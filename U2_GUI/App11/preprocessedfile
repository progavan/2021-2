# 1 "/mnt/sda3/Users/LMC/2021/REPOS_2021/2MM4_PROG_AVAN_2021-2/REPO_progavan_2021-2/org_progavan/2021-2/U2_GUI/App11/App11App.cpp"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "/mnt/sda3/Users/LMC/2021/REPOS_2021/2MM4_PROG_AVAN_2021-2/REPO_progavan_2021-2/org_progavan/2021-2/U2_GUI/App11/App11App.cpp"
# 18 "/mnt/sda3/Users/LMC/2021/REPOS_2021/2MM4_PROG_AVAN_2021-2/REPO_progavan_2021-2/org_progavan/2021-2/U2_GUI/App11/App11App.cpp"
# 1 "/mnt/sda3/Users/LMC/2021/REPOS_2021/2MM4_PROG_AVAN_2021-2/REPO_progavan_2021-2/org_progavan/2021-2/U2_GUI/App11/App11App.h" 1
# 13 "/mnt/sda3/Users/LMC/2021/REPOS_2021/2MM4_PROG_AVAN_2021-2/REPO_progavan_2021-2/org_progavan/2021-2/U2_GUI/App11/App11App.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/app.h" 1
# 19 "/usr/include/wx-3.1-unofficial/wx/app.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/event.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/event.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 45 "/usr/include/wx-3.1-unofficial/wx/defs.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/platform.h" 1
# 149 "/usr/include/wx-3.1-unofficial/wx/platform.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/compiler.h" 1
# 150 "/usr/include/wx-3.1-unofficial/wx/platform.h" 2
# 159 "/usr/include/wx-3.1-unofficial/wx/platform.h"
# 1 "/usr/lib/x86_64-linux-gnu/wx/include/gtk3-unicode-3.1-unofficial/wx/setup.h" 1
# 160 "/usr/include/wx-3.1-unofficial/wx/platform.h" 2
# 503 "/usr/include/wx-3.1-unofficial/wx/platform.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/chkconf.h" 1
# 1294 "/usr/include/wx-3.1-unofficial/wx/chkconf.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/gtk/chkconf.h" 1
# 1295 "/usr/include/wx-3.1-unofficial/wx/chkconf.h" 2
# 1312 "/usr/include/wx-3.1-unofficial/wx/chkconf.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/unix/chkconf.h" 1
# 1313 "/usr/include/wx-3.1-unofficial/wx/chkconf.h" 2
# 504 "/usr/include/wx-3.1-unofficial/wx/platform.h" 2
# 46 "/usr/include/wx-3.1-unofficial/wx/defs.h" 2
# 189 "/usr/include/wx-3.1-unofficial/wx/defs.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/version.h" 1
# 16 "/usr/include/wx-3.1-unofficial/wx/version.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/cpp.h" 1
# 17 "/usr/include/wx-3.1-unofficial/wx/version.h" 2
# 190 "/usr/include/wx-3.1-unofficial/wx/defs.h" 2
# 235 "/usr/include/wx-3.1-unofficial/wx/defs.h"
typedef short int WXTYPE;
# 532 "/usr/include/wx-3.1-unofficial/wx/defs.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/dlimpexp.h" 1
# 533 "/usr/include/wx-3.1-unofficial/wx/defs.h" 2
# 757 "/usr/include/wx-3.1-unofficial/wx/defs.h"
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 143 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 3 4

# 143 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 3 4
typedef long int ptrdiff_t;
# 209 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 415 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 3 4
typedef struct {
  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));
# 426 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 3 4
} max_align_t;






  typedef decltype(nullptr) nullptr_t;
# 758 "/usr/include/wx-3.1-unofficial/wx/defs.h" 2
# 877 "/usr/include/wx-3.1-unofficial/wx/defs.h"
    
# 877 "/usr/include/wx-3.1-unofficial/wx/defs.h"
   template <class T>
        inline void wxUnusedVar(const T& ) { }
# 892 "/usr/include/wx-3.1-unofficial/wx/defs.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/types.h" 1
# 26 "/usr/include/wx-3.1-unofficial/wx/types.h"
typedef int wxCoord;

enum { wxDefaultCoord = -1 };
# 42 "/usr/include/wx-3.1-unofficial/wx/types.h"
typedef signed char wxInt8;
typedef unsigned char wxUint8;
typedef wxUint8 wxByte;
# 56 "/usr/include/wx-3.1-unofficial/wx/types.h"
typedef signed short wxInt16;
typedef unsigned short wxUint16;

typedef wxUint16 wxWord;
# 145 "/usr/include/wx-3.1-unofficial/wx/types.h"
            typedef int wxInt32;
            typedef unsigned int wxUint32;
# 213 "/usr/include/wx-3.1-unofficial/wx/types.h"
typedef wxUint32 wxDword;
# 279 "/usr/include/wx-3.1-unofficial/wx/types.h"
    typedef long long wxInt64;
    typedef unsigned long long wxUint64;
# 328 "/usr/include/wx-3.1-unofficial/wx/types.h"
# 1 "/usr/include/x86_64-linux-gnu/sys/types.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 461 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 452 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 453 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 454 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 462 "/usr/include/features.h" 2 3 4
# 485 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 486 "/usr/include/features.h" 2 3 4
# 26 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


# 27 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
extern "C" {

# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;






typedef __int8_t __int_least8_t;
typedef __uint8_t __uint_least8_t;
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
typedef __int64_t __int_least64_t;
typedef __uint64_t __uint_least64_t;



typedef long int __quad_t;
typedef unsigned long int __u_quad_t;







typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;
# 141 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 142 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/time64.h" 1 3 4
# 143 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;




typedef int __sig_atomic_t;
# 30 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;


typedef __loff_t loff_t;






typedef __ino64_t ino_t;




typedef __ino64_t ino64_t;




typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;







typedef __off64_t off_t;




typedef __off64_t off64_t;




typedef __pid_t pid_t;





typedef __id_t id_t;




typedef __ssize_t ssize_t;





typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;




# 1 "/usr/include/x86_64-linux-gnu/bits/types/clock_t.h" 1 3 4






typedef __clock_t clock_t;
# 127 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/clockid_t.h" 1 3 4






typedef __clockid_t clockid_t;
# 129 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h" 1 3 4






typedef __time_t time_t;
# 130 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/timer_t.h" 1 3 4






typedef __timer_t timer_t;
# 131 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef __useconds_t useconds_t;



typedef __suseconds_t suseconds_t;





# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 145 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;




# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 3 4
typedef __int8_t int8_t;
typedef __int16_t int16_t;
typedef __int32_t int32_t;
typedef __int64_t int64_t;
# 156 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


typedef __uint8_t u_int8_t;
typedef __uint16_t u_int16_t;
typedef __uint32_t u_int32_t;
typedef __uint64_t u_int64_t;


typedef int register_t __attribute__ ((__mode__ (__word__)));
# 176 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 24 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endian.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endianness.h" 1 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/endian.h" 2 3 4
# 25 "/usr/include/endian.h" 2 3 4
# 35 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline __uint16_t
__bswap_16 (__uint16_t __bsx)
{

  return __builtin_bswap16 (__bsx);



}






static __inline __uint32_t
__bswap_32 (__uint32_t __bsx)
{

  return __builtin_bswap32 (__bsx);



}
# 69 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
__extension__ static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{

  return __builtin_bswap64 (__bsx);



}
# 36 "/usr/include/endian.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 3 4
static __inline __uint16_t
__uint16_identity (__uint16_t __x)
{
  return __x;
}

static __inline __uint32_t
__uint32_identity (__uint32_t __x)
{
  return __x;
}

static __inline __uint64_t
__uint64_identity (__uint64_t __x)
{
  return __x;
}
# 37 "/usr/include/endian.h" 2 3 4
# 177 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/select.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/select.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/select.h" 2 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h" 1 3 4




typedef struct
{
  unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
} __sigset_t;
# 5 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 2 3 4


typedef __sigset_t sigset_t;
# 34 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h" 1 3 4







struct timeval
{
  __time_t tv_sec;
  __suseconds_t tv_usec;
};
# 38 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3 4
struct timespec
{
  __time_t tv_sec;



  __syscall_slong_t tv_nsec;
# 26 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3 4
};
# 40 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4
# 49 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef long int __fd_mask;
# 59 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];





  } fd_set;






typedef __fd_mask fd_mask;
# 91 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern "C" {
# 101 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 113 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 126 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
}
# 180 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;
# 205 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __blkcnt64_t blkcnt_t;



typedef __fsblkcnt64_t fsblkcnt_t;



typedef __fsfilcnt64_t fsfilcnt_t;





typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;





# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 1 3 4
# 44 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 2 3 4
# 45 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4




typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;

typedef struct __pthread_internal_slist
{
  struct __pthread_internal_slist *__next;
} __pthread_slist_t;
# 74 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3 4
struct __pthread_mutex_s
{
  int __lock;
  unsigned int __count;
  int __owner;

  unsigned int __nusers;



  int __kind;

  short __spins;
  short __elision;
  __pthread_list_t __list;
# 53 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3 4
};
# 75 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4
# 87 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3 4
struct __pthread_rwlock_arch_t
{
  unsigned int __readers;
  unsigned int __writers;
  unsigned int __wrphase_futex;
  unsigned int __writers_futex;
  unsigned int __pad3;
  unsigned int __pad4;

  int __cur_writer;
  int __shared;
  signed char __rwelision;




  unsigned char __pad1[7];


  unsigned long int __pad2;


  unsigned int __flags;
# 55 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3 4
};
# 88 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4




struct __pthread_cond_s
{
  __extension__ union
  {
    __extension__ unsigned long long int __wseq;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __wseq32;
  };
  __extension__ union
  {
    __extension__ unsigned long long int __g1_start;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __g1_start32;
  };
  unsigned int __g_refs[2] ;
  unsigned int __g_size[2];
  unsigned int __g1_orig_size;
  unsigned int __wrefs;
  unsigned int __g_signals[2];
};
# 24 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 2 3 4



typedef unsigned long int pthread_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;




typedef union
{
  struct __pthread_mutex_s __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;


typedef union
{
  struct __pthread_cond_s __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;





typedef union
{
  struct __pthread_rwlock_arch_t __data;
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 228 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


}
# 329 "/usr/include/wx-3.1-unofficial/wx/types.h" 2
# 364 "/usr/include/wx-3.1-unofficial/wx/types.h"
    
# 364 "/usr/include/wx-3.1-unofficial/wx/types.h"
   typedef long wxIntPtr;
    typedef unsigned long wxUIntPtr;
# 893 "/usr/include/wx-3.1-unofficial/wx/defs.h" 2




# 1 "/usr/include/wx-3.1-unofficial/wx/debug.h" 1
# 13 "/usr/include/wx-3.1-unofficial/wx/debug.h"
# 1 "/usr/include/assert.h" 1 3 4
# 66 "/usr/include/assert.h" 3 4

# 66 "/usr/include/assert.h" 3 4
extern "C" {


extern void __assert_fail (const char *__assertion, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));


extern void __assert_perror_fail (int __errnum, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));




extern void __assert (const char *__assertion, const char *__file, int __line)
     throw () __attribute__ ((__noreturn__));


}
# 14 "/usr/include/wx-3.1-unofficial/wx/debug.h" 2

# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/limits.h" 1 3 4
# 34 "/usr/lib/gcc/x86_64-linux-gnu/10/include/limits.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/syslimits.h" 1 3 4






# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/limits.h" 1 3 4
# 195 "/usr/lib/gcc/x86_64-linux-gnu/10/include/limits.h" 3 4
# 1 "/usr/include/limits.h" 1 3 4
# 26 "/usr/include/limits.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/limits.h" 2 3 4
# 183 "/usr/include/limits.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 2 3 4
# 161 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 1 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 3 4
# 1 "/usr/include/linux/limits.h" 1 3 4
# 39 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 2 3 4
# 162 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 2 3 4
# 184 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/posix2_lim.h" 1 3 4
# 188 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 1 3 4
# 64 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/uio_lim.h" 1 3 4
# 65 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 2 3 4
# 192 "/usr/include/limits.h" 2 3 4
# 196 "/usr/lib/gcc/x86_64-linux-gnu/10/include/limits.h" 2 3 4
# 8 "/usr/lib/gcc/x86_64-linux-gnu/10/include/syslimits.h" 2 3 4
# 35 "/usr/lib/gcc/x86_64-linux-gnu/10/include/limits.h" 2 3 4
# 16 "/usr/include/wx-3.1-unofficial/wx/debug.h" 2

# 1 "/usr/include/wx-3.1-unofficial/wx/chartype.h" 1
# 52 "/usr/include/wx-3.1-unofficial/wx/chartype.h"
# 1 "/usr/include/wchar.h" 1 3 4
# 27 "/usr/include/wchar.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 28 "/usr/include/wchar.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 1 3 4
# 75 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
typedef _Complex float __cfloat128 __attribute__ ((__mode__ (__TC__)));
# 87 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
typedef __float128 _Float128;
# 120 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 2 3 4
# 214 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef float _Float32;
# 251 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef double _Float64;
# 268 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef double _Float32x;
# 285 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef long double _Float64x;
# 121 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 2 3 4
# 31 "/usr/include/wchar.h" 2 3 4




# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 36 "/usr/include/wchar.h" 2 3 4


# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 39 "/usr/include/wchar.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/wchar.h" 1 3 4
# 41 "/usr/include/wchar.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h" 3 4
typedef unsigned int wint_t;
# 42 "/usr/include/wchar.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 1 3 4
# 13 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 3 4
typedef struct
{
  int __count;
  union
  {
    unsigned int __wch;
    char __wchb[4];
  } __value;
} __mbstate_t;
# 5 "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h" 2 3 4

typedef __mbstate_t mbstate_t;
# 43 "/usr/include/wchar.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h" 1 3 4



struct _IO_FILE;
typedef struct _IO_FILE __FILE;
# 44 "/usr/include/wchar.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h" 1 3 4



struct _IO_FILE;


typedef struct _IO_FILE FILE;
# 47 "/usr/include/wchar.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 3 4
struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
};

typedef struct __locale_struct *__locale_t;
# 23 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 2 3 4

typedef __locale_t locale_t;
# 50 "/usr/include/wchar.h" 2 3 4
# 79 "/usr/include/wchar.h" 3 4
extern "C" {



struct tm;



extern wchar_t *wcscpy (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern wchar_t *wcsncpy (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern wchar_t *wcscat (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern wchar_t *wcsncat (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int wcscmp (const wchar_t *__s1, const wchar_t *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int wcsncmp (const wchar_t *__s1, const wchar_t *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern int wcscasecmp (const wchar_t *__s1, const wchar_t *__s2) throw ();


extern int wcsncasecmp (const wchar_t *__s1, const wchar_t *__s2,
   size_t __n) throw ();



extern int wcscasecmp_l (const wchar_t *__s1, const wchar_t *__s2,
    locale_t __loc) throw ();

extern int wcsncasecmp_l (const wchar_t *__s1, const wchar_t *__s2,
     size_t __n, locale_t __loc) throw ();




extern int wcscoll (const wchar_t *__s1, const wchar_t *__s2) throw ();



extern size_t wcsxfrm (wchar_t *__restrict __s1,
         const wchar_t *__restrict __s2, size_t __n) throw ();







extern int wcscoll_l (const wchar_t *__s1, const wchar_t *__s2,
        locale_t __loc) throw ();




extern size_t wcsxfrm_l (wchar_t *__s1, const wchar_t *__s2,
    size_t __n, locale_t __loc) throw ();


extern wchar_t *wcsdup (const wchar_t *__s) throw () __attribute__ ((__malloc__));




extern "C++" wchar_t *wcschr (wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcschr") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcschr (const wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcschr") __attribute__ ((__pure__));






extern "C++" wchar_t *wcsrchr (wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcsrchr") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcsrchr (const wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcsrchr") __attribute__ ((__pure__));
# 181 "/usr/include/wchar.h" 3 4
extern wchar_t *wcschrnul (const wchar_t *__s, wchar_t __wc)
     throw () __attribute__ ((__pure__));




extern size_t wcscspn (const wchar_t *__wcs, const wchar_t *__reject)
     throw () __attribute__ ((__pure__));


extern size_t wcsspn (const wchar_t *__wcs, const wchar_t *__accept)
     throw () __attribute__ ((__pure__));


extern "C++" wchar_t *wcspbrk (wchar_t *__wcs, const wchar_t *__accept)
     throw () __asm ("wcspbrk") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcspbrk (const wchar_t *__wcs,
         const wchar_t *__accept)
     throw () __asm ("wcspbrk") __attribute__ ((__pure__));






extern "C++" wchar_t *wcsstr (wchar_t *__haystack, const wchar_t *__needle)
     throw () __asm ("wcsstr") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcsstr (const wchar_t *__haystack,
        const wchar_t *__needle)
     throw () __asm ("wcsstr") __attribute__ ((__pure__));






extern wchar_t *wcstok (wchar_t *__restrict __s,
   const wchar_t *__restrict __delim,
   wchar_t **__restrict __ptr) throw ();


extern size_t wcslen (const wchar_t *__s) throw () __attribute__ ((__pure__));




extern "C++" wchar_t *wcswcs (wchar_t *__haystack, const wchar_t *__needle)
     throw () __asm ("wcswcs") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcswcs (const wchar_t *__haystack,
        const wchar_t *__needle)
     throw () __asm ("wcswcs") __attribute__ ((__pure__));
# 240 "/usr/include/wchar.h" 3 4
extern size_t wcsnlen (const wchar_t *__s, size_t __maxlen)
     throw () __attribute__ ((__pure__));





extern "C++" wchar_t *wmemchr (wchar_t *__s, wchar_t __c, size_t __n)
     throw () __asm ("wmemchr") __attribute__ ((__pure__));
extern "C++" const wchar_t *wmemchr (const wchar_t *__s, wchar_t __c,
         size_t __n)
     throw () __asm ("wmemchr") __attribute__ ((__pure__));






extern int wmemcmp (const wchar_t *__s1, const wchar_t *__s2, size_t __n)
     throw () __attribute__ ((__pure__));


extern wchar_t *wmemcpy (wchar_t *__restrict __s1,
    const wchar_t *__restrict __s2, size_t __n) throw ();



extern wchar_t *wmemmove (wchar_t *__s1, const wchar_t *__s2, size_t __n)
     throw ();


extern wchar_t *wmemset (wchar_t *__s, wchar_t __c, size_t __n) throw ();




extern wchar_t *wmempcpy (wchar_t *__restrict __s1,
     const wchar_t *__restrict __s2, size_t __n)
     throw ();





extern wint_t btowc (int __c) throw ();



extern int wctob (wint_t __c) throw ();



extern int mbsinit (const mbstate_t *__ps) throw () __attribute__ ((__pure__));



extern size_t mbrtowc (wchar_t *__restrict __pwc,
         const char *__restrict __s, size_t __n,
         mbstate_t *__restrict __p) throw ();


extern size_t wcrtomb (char *__restrict __s, wchar_t __wc,
         mbstate_t *__restrict __ps) throw ();


extern size_t __mbrlen (const char *__restrict __s, size_t __n,
   mbstate_t *__restrict __ps) throw ();
extern size_t mbrlen (const char *__restrict __s, size_t __n,
        mbstate_t *__restrict __ps) throw ();
# 337 "/usr/include/wchar.h" 3 4
extern size_t mbsrtowcs (wchar_t *__restrict __dst,
    const char **__restrict __src, size_t __len,
    mbstate_t *__restrict __ps) throw ();



extern size_t wcsrtombs (char *__restrict __dst,
    const wchar_t **__restrict __src, size_t __len,
    mbstate_t *__restrict __ps) throw ();





extern size_t mbsnrtowcs (wchar_t *__restrict __dst,
     const char **__restrict __src, size_t __nmc,
     size_t __len, mbstate_t *__restrict __ps) throw ();



extern size_t wcsnrtombs (char *__restrict __dst,
     const wchar_t **__restrict __src,
     size_t __nwc, size_t __len,
     mbstate_t *__restrict __ps) throw ();






extern int wcwidth (wchar_t __c) throw ();



extern int wcswidth (const wchar_t *__s, size_t __n) throw ();





extern double wcstod (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr) throw ();



extern float wcstof (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();
extern long double wcstold (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();
# 396 "/usr/include/wchar.h" 3 4
extern _Float32 wcstof32 (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr) throw ();



extern _Float64 wcstof64 (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr) throw ();



extern _Float128 wcstof128 (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();



extern _Float32x wcstof32x (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();



extern _Float64x wcstof64x (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();
# 428 "/usr/include/wchar.h" 3 4
extern long int wcstol (const wchar_t *__restrict __nptr,
   wchar_t **__restrict __endptr, int __base) throw ();



extern unsigned long int wcstoul (const wchar_t *__restrict __nptr,
      wchar_t **__restrict __endptr, int __base)
     throw ();




__extension__
extern long long int wcstoll (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr, int __base)
     throw ();



__extension__
extern unsigned long long int wcstoull (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr,
     int __base) throw ();





__extension__
extern long long int wcstoq (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr, int __base)
     throw ();



__extension__
extern unsigned long long int wcstouq (const wchar_t *__restrict __nptr,
           wchar_t **__restrict __endptr,
           int __base) throw ();






extern long int wcstol_l (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr, int __base,
     locale_t __loc) throw ();

extern unsigned long int wcstoul_l (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr,
        int __base, locale_t __loc) throw ();

__extension__
extern long long int wcstoll_l (const wchar_t *__restrict __nptr,
    wchar_t **__restrict __endptr,
    int __base, locale_t __loc) throw ();

__extension__
extern unsigned long long int wcstoull_l (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr,
       int __base, locale_t __loc)
     throw ();

extern double wcstod_l (const wchar_t *__restrict __nptr,
   wchar_t **__restrict __endptr, locale_t __loc)
     throw ();

extern float wcstof_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr, locale_t __loc)
     throw ();

extern long double wcstold_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         locale_t __loc) throw ();
# 511 "/usr/include/wchar.h" 3 4
extern _Float32 wcstof32_l (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr,
       locale_t __loc) throw ();



extern _Float64 wcstof64_l (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr,
       locale_t __loc) throw ();



extern _Float128 wcstof128_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         locale_t __loc) throw ();



extern _Float32x wcstof32x_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         locale_t __loc) throw ();



extern _Float64x wcstof64x_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         locale_t __loc) throw ();
# 551 "/usr/include/wchar.h" 3 4
extern wchar_t *wcpcpy (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src) throw ();



extern wchar_t *wcpncpy (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     throw ();
# 567 "/usr/include/wchar.h" 3 4
extern __FILE *open_wmemstream (wchar_t **__bufloc, size_t *__sizeloc) throw ();





extern int fwide (__FILE *__fp, int __mode) throw ();






extern int fwprintf (__FILE *__restrict __stream,
       const wchar_t *__restrict __format, ...)
                                                           ;




extern int wprintf (const wchar_t *__restrict __format, ...)
                                                           ;

extern int swprintf (wchar_t *__restrict __s, size_t __n,
       const wchar_t *__restrict __format, ...)
     throw () ;





extern int vfwprintf (__FILE *__restrict __s,
        const wchar_t *__restrict __format,
        __gnuc_va_list __arg)
                                                           ;




extern int vwprintf (const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
                                                           ;


extern int vswprintf (wchar_t *__restrict __s, size_t __n,
        const wchar_t *__restrict __format,
        __gnuc_va_list __arg)
     throw () ;






extern int fwscanf (__FILE *__restrict __stream,
      const wchar_t *__restrict __format, ...)
                                                          ;




extern int wscanf (const wchar_t *__restrict __format, ...)
                                                          ;

extern int swscanf (const wchar_t *__restrict __s,
      const wchar_t *__restrict __format, ...)
     throw () ;






extern int fwscanf (__FILE *__restrict __stream, const wchar_t *__restrict __format, ...) __asm__ ("" "__isoc99_fwscanf")


                                                          ;
extern int wscanf (const wchar_t *__restrict __format, ...) __asm__ ("" "__isoc99_wscanf")

                                                          ;
extern int swscanf (const wchar_t *__restrict __s, const wchar_t *__restrict __format, ...) throw () __asm__ ("" "__isoc99_swscanf")


                                                          ;
# 671 "/usr/include/wchar.h" 3 4
extern int vfwscanf (__FILE *__restrict __s,
       const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
                                                          ;




extern int vwscanf (const wchar_t *__restrict __format,
      __gnuc_va_list __arg)
                                                          ;

extern int vswscanf (const wchar_t *__restrict __s,
       const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
     throw () ;






extern int vfwscanf (__FILE *__restrict __s, const wchar_t *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vfwscanf")


                                                          ;
extern int vwscanf (const wchar_t *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vwscanf")

                                                          ;
extern int vswscanf (const wchar_t *__restrict __s, const wchar_t *__restrict __format, __gnuc_va_list __arg) throw () __asm__ ("" "__isoc99_vswscanf")


                                                          ;
# 726 "/usr/include/wchar.h" 3 4
extern wint_t fgetwc (__FILE *__stream);
extern wint_t getwc (__FILE *__stream);





extern wint_t getwchar (void);






extern wint_t fputwc (wchar_t __wc, __FILE *__stream);
extern wint_t putwc (wchar_t __wc, __FILE *__stream);





extern wint_t putwchar (wchar_t __wc);







extern wchar_t *fgetws (wchar_t *__restrict __ws, int __n,
   __FILE *__restrict __stream);





extern int fputws (const wchar_t *__restrict __ws,
     __FILE *__restrict __stream);






extern wint_t ungetwc (wint_t __wc, __FILE *__stream);
# 781 "/usr/include/wchar.h" 3 4
extern wint_t getwc_unlocked (__FILE *__stream);
extern wint_t getwchar_unlocked (void);







extern wint_t fgetwc_unlocked (__FILE *__stream);







extern wint_t fputwc_unlocked (wchar_t __wc, __FILE *__stream);
# 807 "/usr/include/wchar.h" 3 4
extern wint_t putwc_unlocked (wchar_t __wc, __FILE *__stream);
extern wint_t putwchar_unlocked (wchar_t __wc);
# 817 "/usr/include/wchar.h" 3 4
extern wchar_t *fgetws_unlocked (wchar_t *__restrict __ws, int __n,
     __FILE *__restrict __stream);







extern int fputws_unlocked (const wchar_t *__restrict __ws,
       __FILE *__restrict __stream);






extern size_t wcsftime (wchar_t *__restrict __s, size_t __maxsize,
   const wchar_t *__restrict __format,
   const struct tm *__restrict __tp) throw ();




extern size_t wcsftime_l (wchar_t *__restrict __s, size_t __maxsize,
     const wchar_t *__restrict __format,
     const struct tm *__restrict __tp,
     locale_t __loc) throw ();
# 856 "/usr/include/wchar.h" 3 4
}
# 53 "/usr/include/wx-3.1-unofficial/wx/chartype.h" 2
# 123 "/usr/include/wx-3.1-unofficial/wx/chartype.h"
    
# 123 "/usr/include/wx-3.1-unofficial/wx/chartype.h"
   typedef wchar_t wxChar;
    typedef wchar_t wxSChar;
    typedef wchar_t wxUChar;
# 170 "/usr/include/wx-3.1-unofficial/wx/chartype.h"
    typedef wchar_t wxStringCharType;
# 18 "/usr/include/wx-3.1-unofficial/wx/debug.h" 2



class wxString;
class wxCStrData;
# 76 "/usr/include/wx-3.1-unofficial/wx/debug.h"
typedef void (*wxAssertHandler_t)(const wxString& file,
                                  int line,
                                  const wxString& func,
                                  const wxString& cond,
                                  const wxString& msg);





extern __attribute__ ((visibility("default"))) wxAssertHandler_t wxTheAssertHandler;
# 112 "/usr/include/wx-3.1-unofficial/wx/debug.h"
inline wxAssertHandler_t wxSetAssertHandler(wxAssertHandler_t handler)
{
    const wxAssertHandler_t old = wxTheAssertHandler;
    wxTheAssertHandler = handler;
    return old;
}







extern void __attribute__ ((visibility("default"))) wxSetDefaultAssertHandler();
# 143 "/usr/include/wx-3.1-unofficial/wx/debug.h"
inline void wxDisableAsserts() { wxSetAssertHandler(
# 143 "/usr/include/wx-3.1-unofficial/wx/debug.h" 3 4
                                                   __null
# 143 "/usr/include/wx-3.1-unofficial/wx/debug.h"
                                                       ); }
# 178 "/usr/include/wx-3.1-unofficial/wx/debug.h"
extern __attribute__ ((visibility("default"))) void wxOnAssert(const char *file,
                                        int line,
                                        const char *func,
                                        const char *cond);

extern __attribute__ ((visibility("default"))) void wxOnAssert(const char *file,
                                        int line,
                                        const char *func,
                                        const char *cond,
                                        const char *msg);

extern __attribute__ ((visibility("default"))) void wxOnAssert(const char *file,
                                        int line,
                                        const char *func,
                                        const char *cond,
                                        const wxChar *msg) ;





extern __attribute__ ((visibility("default"))) void wxOnAssert(const wxChar *file,
                                        int line,
                                        const char *func,
                                        const wxChar *cond,
                                        const wxChar *msg = 
# 203 "/usr/include/wx-3.1-unofficial/wx/debug.h" 3 4
                                                           __null
# 203 "/usr/include/wx-3.1-unofficial/wx/debug.h"
                                                               );




extern __attribute__ ((visibility("default"))) void wxOnAssert(const wxString& file,
                                        int line,
                                        const wxString& func,
                                        const wxString& cond,
                                        const wxString& msg);

extern __attribute__ ((visibility("default"))) void wxOnAssert(const wxString& file,
                                        int line,
                                        const wxString& func,
                                        const wxString& cond);

extern __attribute__ ((visibility("default"))) void wxOnAssert(const char *file,
                                        int line,
                                        const char *func,
                                        const char *cond,
                                        const wxCStrData& msg);

extern __attribute__ ((visibility("default"))) void wxOnAssert(const char *file,
                                        int line,
                                        const char *func,
                                        const char *cond,
                                        const wxString& msg);
# 273 "/usr/include/wx-3.1-unofficial/wx/debug.h"
    extern __attribute__ ((visibility("default"))) bool wxTrapInAssert;
# 350 "/usr/include/wx-3.1-unofficial/wx/debug.h"
extern void __attribute__ ((visibility("default"))) wxAbort();
# 480 "/usr/include/wx-3.1-unofficial/wx/debug.h"
    inline bool wxIsDebuggerRunning() { return false; }
# 490 "/usr/include/wx-3.1-unofficial/wx/debug.h"
extern bool __attribute__ ((visibility("default"))) wxAssertIsEqual(int x, int y);



extern __attribute__ ((visibility("default"))) const bool wxFalse;
# 898 "/usr/include/wx-3.1-unofficial/wx/defs.h" 2


    template <typename T>
    inline void wxDELETE(T*& ptr)
    {
        typedef char TypeIsCompleteCheck[sizeof(T)] __attribute__ ((unused));

        if ( ptr != 
# 905 "/usr/include/wx-3.1-unofficial/wx/defs.h" 3 4
                   __null 
# 905 "/usr/include/wx-3.1-unofficial/wx/defs.h"
                        )
        {
            delete ptr;
            ptr = 
# 908 "/usr/include/wx-3.1-unofficial/wx/defs.h" 3 4
                 __null
# 908 "/usr/include/wx-3.1-unofficial/wx/defs.h"
                     ;
        }
    }


    template <typename T>
    inline void wxDELETEA(T*& ptr)
    {
        typedef char TypeIsCompleteCheck[sizeof(T)] __attribute__ ((unused));

        if ( ptr != 
# 918 "/usr/include/wx-3.1-unofficial/wx/defs.h" 3 4
                   __null 
# 918 "/usr/include/wx-3.1-unofficial/wx/defs.h"
                        )
        {
            delete [] ptr;
            ptr = 
# 921 "/usr/include/wx-3.1-unofficial/wx/defs.h" 3 4
                 __null
# 921 "/usr/include/wx-3.1-unofficial/wx/defs.h"
                     ;
        }
    }


    template <typename T>
    inline void wxSwap(T& first, T& second)
    {
        T tmp(first);
        first = second;
        second = tmp;
    }


inline wxUIntPtr wxPtrToUInt(const void *p)
{
# 952 "/usr/include/wx-3.1-unofficial/wx/defs.h"
    return reinterpret_cast<wxUIntPtr>(p);




}

inline void *wxUIntToPtr(wxUIntPtr p)
{
# 971 "/usr/include/wx-3.1-unofficial/wx/defs.h"
    return reinterpret_cast<void *>(p);




}
# 988 "/usr/include/wx-3.1-unofficial/wx/defs.h"
typedef float wxFloat32;
typedef double wxFloat64;

typedef double wxDouble;
# 1038 "/usr/include/wx-3.1-unofficial/wx/defs.h"
    typedef wxUint16 wxChar16;




    typedef wchar_t wxChar32;
# 1258 "/usr/include/wx-3.1-unofficial/wx/defs.h"
enum wxGeometryCentre
{
    wxCENTRE = 0x0001,
    wxCENTER = wxCENTRE
};







enum wxOrientation
{

    wxHORIZONTAL = 0x0004,
    wxVERTICAL = 0x0008,

    wxBOTH = wxVERTICAL | wxHORIZONTAL,


    wxORIENTATION_MASK = wxBOTH
};

enum wxDirection
{
    wxLEFT = 0x0010,
    wxRIGHT = 0x0020,
    wxUP = 0x0040,
    wxDOWN = 0x0080,

    wxTOP = wxUP,
    wxBOTTOM = wxDOWN,

    wxNORTH = wxUP,
    wxSOUTH = wxDOWN,
    wxWEST = wxLEFT,
    wxEAST = wxRIGHT,

    wxALL = (wxUP | wxDOWN | wxRIGHT | wxLEFT),


    wxDIRECTION_MASK = wxALL
};

enum wxAlignment
{





    wxALIGN_INVALID = -1,

    wxALIGN_NOT = 0x0000,
    wxALIGN_CENTER_HORIZONTAL = 0x0100,
    wxALIGN_CENTRE_HORIZONTAL = wxALIGN_CENTER_HORIZONTAL,
    wxALIGN_LEFT = wxALIGN_NOT,
    wxALIGN_TOP = wxALIGN_NOT,
    wxALIGN_RIGHT = 0x0200,
    wxALIGN_BOTTOM = 0x0400,
    wxALIGN_CENTER_VERTICAL = 0x0800,
    wxALIGN_CENTRE_VERTICAL = wxALIGN_CENTER_VERTICAL,

    wxALIGN_CENTER = (wxALIGN_CENTER_HORIZONTAL | wxALIGN_CENTER_VERTICAL),
    wxALIGN_CENTRE = wxALIGN_CENTER,


    wxALIGN_MASK = 0x0f00
};


enum wxSizerFlagBits
{
# 1341 "/usr/include/wx-3.1-unofficial/wx/defs.h"
    wxFIXED_MINSIZE = 0x8000,
    wxRESERVE_SPACE_EVEN_IF_HIDDEN = 0x0002,


    wxSIZER_FLAG_BITS_MASK = 0x8002
};

enum wxStretch
{
    wxSTRETCH_NOT = 0x0000,
    wxSHRINK = 0x1000,
    wxGROW = 0x2000,
    wxEXPAND = wxGROW,
    wxSHAPED = 0x4000,
    wxTILE = wxSHAPED | wxFIXED_MINSIZE,


    wxSTRETCH_MASK = 0x7000
};


enum wxBorder
{


    wxBORDER_DEFAULT = 0,

    wxBORDER_NONE = 0x00200000,
    wxBORDER_STATIC = 0x01000000,
    wxBORDER_SIMPLE = 0x02000000,
    wxBORDER_RAISED = 0x04000000,
    wxBORDER_SUNKEN = 0x08000000,
    wxBORDER_DOUBLE = 0x10000000,
    wxBORDER_THEME = wxBORDER_DOUBLE,


    wxBORDER_MASK = 0x1f200000
};
# 1712 "/usr/include/wx-3.1-unofficial/wx/defs.h"
enum wxBackgroundStyle
{





    wxBG_STYLE_ERASE,





    wxBG_STYLE_SYSTEM,






    wxBG_STYLE_PAINT,





    wxBG_STYLE_TRANSPARENT,


    wxBG_STYLE_COLOUR,





    wxBG_STYLE_CUSTOM = wxBG_STYLE_PAINT
};




enum wxKeyType
{
    wxKEY_NONE,
    wxKEY_INTEGER,
    wxKEY_STRING
};






enum wxStandardID
{
# 1781 "/usr/include/wx-3.1-unofficial/wx/defs.h"
    wxID_AUTO_LOWEST = -1000000,
    wxID_AUTO_HIGHEST = -2000,



    wxID_NONE = -3,


    wxID_SEPARATOR = -2,



    wxID_ANY = -1,



    wxID_LOWEST = 4999,

    wxID_OPEN,
    wxID_CLOSE,
    wxID_NEW,
    wxID_SAVE,
    wxID_SAVEAS,
    wxID_REVERT,
    wxID_EXIT,
    wxID_UNDO,
    wxID_REDO,
    wxID_HELP,
    wxID_PRINT,
    wxID_PRINT_SETUP,
    wxID_PAGE_SETUP,
    wxID_PREVIEW,
    wxID_ABOUT,
    wxID_HELP_CONTENTS,
    wxID_HELP_INDEX,
    wxID_HELP_SEARCH,
    wxID_HELP_COMMANDS,
    wxID_HELP_PROCEDURES,
    wxID_HELP_CONTEXT,
    wxID_CLOSE_ALL,
    wxID_PREFERENCES,

    wxID_EDIT = 5030,
    wxID_CUT,
    wxID_COPY,
    wxID_PASTE,
    wxID_CLEAR,
    wxID_FIND,
    wxID_DUPLICATE,
    wxID_SELECTALL,
    wxID_DELETE,
    wxID_REPLACE,
    wxID_REPLACE_ALL,
    wxID_PROPERTIES,

    wxID_VIEW_DETAILS,
    wxID_VIEW_LARGEICONS,
    wxID_VIEW_SMALLICONS,
    wxID_VIEW_LIST,
    wxID_VIEW_SORTDATE,
    wxID_VIEW_SORTNAME,
    wxID_VIEW_SORTSIZE,
    wxID_VIEW_SORTTYPE,

    wxID_FILE = 5050,
    wxID_FILE1,
    wxID_FILE2,
    wxID_FILE3,
    wxID_FILE4,
    wxID_FILE5,
    wxID_FILE6,
    wxID_FILE7,
    wxID_FILE8,
    wxID_FILE9,


    wxID_OK = 5100,
    wxID_CANCEL,
    wxID_APPLY,
    wxID_YES,
    wxID_NO,
    wxID_STATIC,
    wxID_FORWARD,
    wxID_BACKWARD,
    wxID_DEFAULT,
    wxID_MORE,
    wxID_SETUP,
    wxID_RESET,
    wxID_CONTEXT_HELP,
    wxID_YESTOALL,
    wxID_NOTOALL,
    wxID_ABORT,
    wxID_RETRY,
    wxID_IGNORE,
    wxID_ADD,
    wxID_REMOVE,

    wxID_UP,
    wxID_DOWN,
    wxID_HOME,
    wxID_REFRESH,
    wxID_STOP,
    wxID_INDEX,

    wxID_BOLD,
    wxID_ITALIC,
    wxID_JUSTIFY_CENTER,
    wxID_JUSTIFY_FILL,
    wxID_JUSTIFY_RIGHT,
    wxID_JUSTIFY_LEFT,
    wxID_UNDERLINE,
    wxID_INDENT,
    wxID_UNINDENT,
    wxID_ZOOM_100,
    wxID_ZOOM_FIT,
    wxID_ZOOM_IN,
    wxID_ZOOM_OUT,
    wxID_UNDELETE,
    wxID_REVERT_TO_SAVED,
    wxID_CDROM,
    wxID_CONVERT,
    wxID_EXECUTE,
    wxID_FLOPPY,
    wxID_HARDDISK,
    wxID_BOTTOM,
    wxID_FIRST,
    wxID_LAST,
    wxID_TOP,
    wxID_INFO,
    wxID_JUMP_TO,
    wxID_NETWORK,
    wxID_SELECT_COLOR,
    wxID_SELECT_FONT,
    wxID_SORT_ASCENDING,
    wxID_SORT_DESCENDING,
    wxID_SPELL_CHECK,
    wxID_STRIKETHROUGH,


    wxID_SYSTEM_MENU = 5200,
    wxID_CLOSE_FRAME,
    wxID_MOVE_FRAME,
    wxID_RESIZE_FRAME,
    wxID_MAXIMIZE_FRAME,
    wxID_ICONIZE_FRAME,
    wxID_RESTORE_FRAME,


    wxID_MDI_WINDOW_FIRST = 5230,
    wxID_MDI_WINDOW_CASCADE = wxID_MDI_WINDOW_FIRST,
    wxID_MDI_WINDOW_TILE_HORZ,
    wxID_MDI_WINDOW_TILE_VERT,
    wxID_MDI_WINDOW_ARRANGE_ICONS,
    wxID_MDI_WINDOW_PREV,
    wxID_MDI_WINDOW_NEXT,
    wxID_MDI_WINDOW_LAST = wxID_MDI_WINDOW_NEXT,


    wxID_OSX_MENU_FIRST = 5250,
    wxID_OSX_HIDE = wxID_OSX_MENU_FIRST,
    wxID_OSX_HIDEOTHERS,
    wxID_OSX_SHOWALL,

    wxID_OSX_SERVICES,
    wxID_OSX_MENU_LAST = wxID_OSX_SERVICES,





    wxID_FILEDLGG = 5900,


    wxID_FILECTRL = 5950,

    wxID_HIGHEST = 5999
};







typedef int wxWindowID;






enum wxItemKind
{
    wxITEM_SEPARATOR = -1,
    wxITEM_NORMAL,
    wxITEM_CHECK,
    wxITEM_RADIO,
    wxITEM_DROPDOWN,
    wxITEM_MAX
};





enum wxCheckBoxState
{
    wxCHK_UNCHECKED,
    wxCHK_CHECKED,
    wxCHK_UNDETERMINED
};



enum wxHitTest
{
    wxHT_NOWHERE,


    wxHT_SCROLLBAR_FIRST = wxHT_NOWHERE,
    wxHT_SCROLLBAR_ARROW_LINE_1,
    wxHT_SCROLLBAR_ARROW_LINE_2,
    wxHT_SCROLLBAR_ARROW_PAGE_1,
    wxHT_SCROLLBAR_ARROW_PAGE_2,
    wxHT_SCROLLBAR_THUMB,
    wxHT_SCROLLBAR_BAR_1,
    wxHT_SCROLLBAR_BAR_2,
    wxHT_SCROLLBAR_LAST,


    wxHT_WINDOW_OUTSIDE,
    wxHT_WINDOW_INSIDE,
    wxHT_WINDOW_VERT_SCROLLBAR,
    wxHT_WINDOW_HORZ_SCROLLBAR,
    wxHT_WINDOW_CORNER,

    wxHT_MAX
};
# 2050 "/usr/include/wx-3.1-unofficial/wx/defs.h"
enum wxHatchStyle
{
    wxHATCHSTYLE_INVALID = -1,





    wxHATCHSTYLE_FIRST = 111,
    wxHATCHSTYLE_BDIAGONAL = wxHATCHSTYLE_FIRST,
    wxHATCHSTYLE_CROSSDIAG,
    wxHATCHSTYLE_FDIAGONAL,
    wxHATCHSTYLE_CROSS,
    wxHATCHSTYLE_HORIZONTAL,
    wxHATCHSTYLE_VERTICAL,
    wxHATCHSTYLE_LAST = wxHATCHSTYLE_VERTICAL
};
# 2075 "/usr/include/wx-3.1-unofficial/wx/defs.h"
enum wxDeprecatedGUIConstants
{

    wxDEFAULT = 70,
    wxDECORATIVE,
    wxROMAN,
    wxSCRIPT,
    wxSWISS,
    wxMODERN,
    wxTELETYPE,


    wxVARIABLE = 80,
    wxFIXED,

    wxNORMAL = 90,
    wxLIGHT,
    wxBOLD,

    wxITALIC,
    wxSLANT,


    wxSOLID = 100,
    wxDOT,
    wxLONG_DASH,
    wxSHORT_DASH,
    wxDOT_DASH,
    wxUSER_DASH,

    wxTRANSPARENT,



    wxSTIPPLE_MASK_OPAQUE,
    wxSTIPPLE_MASK,

    wxSTIPPLE = 110,

    wxBDIAGONAL_HATCH = wxHATCHSTYLE_BDIAGONAL,
    wxCROSSDIAG_HATCH = wxHATCHSTYLE_CROSSDIAG,
    wxFDIAGONAL_HATCH = wxHATCHSTYLE_FDIAGONAL,
    wxCROSS_HATCH = wxHATCHSTYLE_CROSS,
    wxHORIZONTAL_HATCH = wxHATCHSTYLE_HORIZONTAL,
    wxVERTICAL_HATCH = wxHATCHSTYLE_VERTICAL,
    wxFIRST_HATCH = wxHATCHSTYLE_FIRST,
    wxLAST_HATCH = wxHATCHSTYLE_LAST
};


enum
{
    wxTOOL_TOP = 1,
    wxTOOL_BOTTOM,
    wxTOOL_LEFT,
    wxTOOL_RIGHT
};



enum wxDataFormatId
{
    wxDF_INVALID = 0,
    wxDF_TEXT = 1,
    wxDF_BITMAP = 2,
    wxDF_METAFILE = 3,
    wxDF_SYLK = 4,
    wxDF_DIF = 5,
    wxDF_TIFF = 6,
    wxDF_OEMTEXT = 7,
    wxDF_DIB = 8,
    wxDF_PALETTE = 9,
    wxDF_PENDATA = 10,
    wxDF_RIFF = 11,
    wxDF_WAVE = 12,
    wxDF_UNICODETEXT = 13,
    wxDF_ENHMETAFILE = 14,
    wxDF_FILENAME = 15,
    wxDF_LOCALE = 16,
    wxDF_PRIVATE = 20,
    wxDF_HTML = 30,
    wxDF_PNG = 31,
    wxDF_MAX
};


enum wxKeyCode
{
    WXK_NONE = 0,

    WXK_CONTROL_A = 1,
    WXK_CONTROL_B,
    WXK_CONTROL_C,
    WXK_CONTROL_D,
    WXK_CONTROL_E,
    WXK_CONTROL_F,
    WXK_CONTROL_G,
    WXK_CONTROL_H,
    WXK_CONTROL_I,
    WXK_CONTROL_J,
    WXK_CONTROL_K,
    WXK_CONTROL_L,
    WXK_CONTROL_M,
    WXK_CONTROL_N,
    WXK_CONTROL_O,
    WXK_CONTROL_P,
    WXK_CONTROL_Q,
    WXK_CONTROL_R,
    WXK_CONTROL_S,
    WXK_CONTROL_T,
    WXK_CONTROL_U,
    WXK_CONTROL_V,
    WXK_CONTROL_W,
    WXK_CONTROL_X,
    WXK_CONTROL_Y,
    WXK_CONTROL_Z,

    WXK_BACK = 8,
    WXK_TAB = 9,
    WXK_RETURN = 13,
    WXK_ESCAPE = 27,



    WXK_SPACE = 32,
    WXK_DELETE = 127,
# 2209 "/usr/include/wx-3.1-unofficial/wx/defs.h"
    WXK_START = 300,
    WXK_LBUTTON,
    WXK_RBUTTON,
    WXK_CANCEL,
    WXK_MBUTTON,
    WXK_CLEAR,
    WXK_SHIFT,
    WXK_ALT,
    WXK_CONTROL,
    WXK_MENU,
    WXK_PAUSE,
    WXK_CAPITAL,
    WXK_END,
    WXK_HOME,
    WXK_LEFT,
    WXK_UP,
    WXK_RIGHT,
    WXK_DOWN,
    WXK_SELECT,
    WXK_PRINT,
    WXK_EXECUTE,
    WXK_SNAPSHOT,
    WXK_INSERT,
    WXK_HELP,
    WXK_NUMPAD0,
    WXK_NUMPAD1,
    WXK_NUMPAD2,
    WXK_NUMPAD3,
    WXK_NUMPAD4,
    WXK_NUMPAD5,
    WXK_NUMPAD6,
    WXK_NUMPAD7,
    WXK_NUMPAD8,
    WXK_NUMPAD9,
    WXK_MULTIPLY,
    WXK_ADD,
    WXK_SEPARATOR,
    WXK_SUBTRACT,
    WXK_DECIMAL,
    WXK_DIVIDE,
    WXK_F1,
    WXK_F2,
    WXK_F3,
    WXK_F4,
    WXK_F5,
    WXK_F6,
    WXK_F7,
    WXK_F8,
    WXK_F9,
    WXK_F10,
    WXK_F11,
    WXK_F12,
    WXK_F13,
    WXK_F14,
    WXK_F15,
    WXK_F16,
    WXK_F17,
    WXK_F18,
    WXK_F19,
    WXK_F20,
    WXK_F21,
    WXK_F22,
    WXK_F23,
    WXK_F24,
    WXK_NUMLOCK,
    WXK_SCROLL,
    WXK_PAGEUP,
    WXK_PAGEDOWN,
    WXK_NUMPAD_SPACE,
    WXK_NUMPAD_TAB,
    WXK_NUMPAD_ENTER,
    WXK_NUMPAD_F1,
    WXK_NUMPAD_F2,
    WXK_NUMPAD_F3,
    WXK_NUMPAD_F4,
    WXK_NUMPAD_HOME,
    WXK_NUMPAD_LEFT,
    WXK_NUMPAD_UP,
    WXK_NUMPAD_RIGHT,
    WXK_NUMPAD_DOWN,
    WXK_NUMPAD_PAGEUP,
    WXK_NUMPAD_PAGEDOWN,
    WXK_NUMPAD_END,
    WXK_NUMPAD_BEGIN,
    WXK_NUMPAD_INSERT,
    WXK_NUMPAD_DELETE,
    WXK_NUMPAD_EQUAL,
    WXK_NUMPAD_MULTIPLY,
    WXK_NUMPAD_ADD,
    WXK_NUMPAD_SEPARATOR,
    WXK_NUMPAD_SUBTRACT,
    WXK_NUMPAD_DECIMAL,
    WXK_NUMPAD_DIVIDE,

    WXK_WINDOWS_LEFT,
    WXK_WINDOWS_RIGHT,
    WXK_WINDOWS_MENU ,



    WXK_RAW_CONTROL = WXK_CONTROL,

    WXK_COMMAND = WXK_CONTROL,


    WXK_SPECIAL1 = WXK_WINDOWS_MENU + 2,
    WXK_SPECIAL2,
    WXK_SPECIAL3,
    WXK_SPECIAL4,
    WXK_SPECIAL5,
    WXK_SPECIAL6,
    WXK_SPECIAL7,
    WXK_SPECIAL8,
    WXK_SPECIAL9,
    WXK_SPECIAL10,
    WXK_SPECIAL11,
    WXK_SPECIAL12,
    WXK_SPECIAL13,
    WXK_SPECIAL14,
    WXK_SPECIAL15,
    WXK_SPECIAL16,
    WXK_SPECIAL17,
    WXK_SPECIAL18,
    WXK_SPECIAL19,
    WXK_SPECIAL20,

    WXK_BROWSER_BACK,
    WXK_BROWSER_FORWARD,
    WXK_BROWSER_REFRESH,
    WXK_BROWSER_STOP,
    WXK_BROWSER_SEARCH,
    WXK_BROWSER_FAVORITES,
    WXK_BROWSER_HOME,
    WXK_VOLUME_MUTE,
    WXK_VOLUME_DOWN,
    WXK_VOLUME_UP,
    WXK_MEDIA_NEXT_TRACK,
    WXK_MEDIA_PREV_TRACK,
    WXK_MEDIA_STOP,
    WXK_MEDIA_PLAY_PAUSE,
    WXK_LAUNCH_MAIL,
    WXK_LAUNCH_APP1,
    WXK_LAUNCH_APP2
};


enum wxKeyModifier
{
    wxMOD_NONE = 0x0000,
    wxMOD_ALT = 0x0001,
    wxMOD_CONTROL = 0x0002,
    wxMOD_ALTGR = wxMOD_ALT | wxMOD_CONTROL,
    wxMOD_SHIFT = 0x0004,
    wxMOD_META = 0x0008,
    wxMOD_WIN = wxMOD_META,



    wxMOD_RAW_CONTROL = wxMOD_CONTROL,

    wxMOD_CMD = wxMOD_CONTROL,
    wxMOD_ALL = 0xffff
};





enum wxPaperSize
{
    wxPAPER_NONE,
    wxPAPER_LETTER,
    wxPAPER_LEGAL,
    wxPAPER_A4,
    wxPAPER_CSHEET,
    wxPAPER_DSHEET,
    wxPAPER_ESHEET,
    wxPAPER_LETTERSMALL,
    wxPAPER_TABLOID,
    wxPAPER_LEDGER,
    wxPAPER_STATEMENT,
    wxPAPER_EXECUTIVE,
    wxPAPER_A3,
    wxPAPER_A4SMALL,
    wxPAPER_A5,
    wxPAPER_B4,
    wxPAPER_B5,
    wxPAPER_FOLIO,
    wxPAPER_QUARTO,
    wxPAPER_10X14,
    wxPAPER_11X17,
    wxPAPER_NOTE,
    wxPAPER_ENV_9,
    wxPAPER_ENV_10,
    wxPAPER_ENV_11,
    wxPAPER_ENV_12,
    wxPAPER_ENV_14,
    wxPAPER_ENV_DL,
    wxPAPER_ENV_C5,
    wxPAPER_ENV_C3,
    wxPAPER_ENV_C4,
    wxPAPER_ENV_C6,
    wxPAPER_ENV_C65,
    wxPAPER_ENV_B4,
    wxPAPER_ENV_B5,
    wxPAPER_ENV_B6,
    wxPAPER_ENV_ITALY,
    wxPAPER_ENV_MONARCH,
    wxPAPER_ENV_PERSONAL,
    wxPAPER_FANFOLD_US,
    wxPAPER_FANFOLD_STD_GERMAN,
    wxPAPER_FANFOLD_LGL_GERMAN,

    wxPAPER_ISO_B4,
    wxPAPER_JAPANESE_POSTCARD,
    wxPAPER_9X11,
    wxPAPER_10X11,
    wxPAPER_15X11,
    wxPAPER_ENV_INVITE,
    wxPAPER_LETTER_EXTRA,
    wxPAPER_LEGAL_EXTRA,
    wxPAPER_TABLOID_EXTRA,
    wxPAPER_A4_EXTRA,
    wxPAPER_LETTER_TRANSVERSE,
    wxPAPER_A4_TRANSVERSE,
    wxPAPER_LETTER_EXTRA_TRANSVERSE,
    wxPAPER_A_PLUS,
    wxPAPER_B_PLUS,
    wxPAPER_LETTER_PLUS,
    wxPAPER_A4_PLUS,
    wxPAPER_A5_TRANSVERSE,
    wxPAPER_B5_TRANSVERSE,
    wxPAPER_A3_EXTRA,
    wxPAPER_A5_EXTRA,
    wxPAPER_B5_EXTRA,
    wxPAPER_A2,
    wxPAPER_A3_TRANSVERSE,
    wxPAPER_A3_EXTRA_TRANSVERSE,

    wxPAPER_DBL_JAPANESE_POSTCARD,
    wxPAPER_A6,
    wxPAPER_JENV_KAKU2,
    wxPAPER_JENV_KAKU3,
    wxPAPER_JENV_CHOU3,
    wxPAPER_JENV_CHOU4,
    wxPAPER_LETTER_ROTATED,
    wxPAPER_A3_ROTATED,
    wxPAPER_A4_ROTATED,
    wxPAPER_A5_ROTATED,
    wxPAPER_B4_JIS_ROTATED,
    wxPAPER_B5_JIS_ROTATED,
    wxPAPER_JAPANESE_POSTCARD_ROTATED,
    wxPAPER_DBL_JAPANESE_POSTCARD_ROTATED,
    wxPAPER_A6_ROTATED,
    wxPAPER_JENV_KAKU2_ROTATED,
    wxPAPER_JENV_KAKU3_ROTATED,
    wxPAPER_JENV_CHOU3_ROTATED,
    wxPAPER_JENV_CHOU4_ROTATED,
    wxPAPER_B6_JIS,
    wxPAPER_B6_JIS_ROTATED,
    wxPAPER_12X11,
    wxPAPER_JENV_YOU4,
    wxPAPER_JENV_YOU4_ROTATED,
    wxPAPER_P16K,
    wxPAPER_P32K,
    wxPAPER_P32KBIG,
    wxPAPER_PENV_1,
    wxPAPER_PENV_2,
    wxPAPER_PENV_3,
    wxPAPER_PENV_4,
    wxPAPER_PENV_5,
    wxPAPER_PENV_6,
    wxPAPER_PENV_7,
    wxPAPER_PENV_8,
    wxPAPER_PENV_9,
    wxPAPER_PENV_10,
    wxPAPER_P16K_ROTATED,
    wxPAPER_P32K_ROTATED,
    wxPAPER_P32KBIG_ROTATED,
    wxPAPER_PENV_1_ROTATED,
    wxPAPER_PENV_2_ROTATED,
    wxPAPER_PENV_3_ROTATED,
    wxPAPER_PENV_4_ROTATED,
    wxPAPER_PENV_5_ROTATED,
    wxPAPER_PENV_6_ROTATED,
    wxPAPER_PENV_7_ROTATED,
    wxPAPER_PENV_8_ROTATED,
    wxPAPER_PENV_9_ROTATED,
    wxPAPER_PENV_10_ROTATED,
    wxPAPER_A0,
    wxPAPER_A1
};


enum wxPrintOrientation
{
   wxPORTRAIT = 1,
   wxLANDSCAPE
};




enum wxDuplexMode
{
    wxDUPLEX_SIMPLEX,
    wxDUPLEX_HORIZONTAL,
    wxDUPLEX_VERTICAL
};
# 2527 "/usr/include/wx-3.1-unofficial/wx/defs.h"
typedef int wxPrintQuality;




enum wxPrintMode
{
    wxPRINT_MODE_NONE = 0,
    wxPRINT_MODE_PREVIEW = 1,
    wxPRINT_MODE_FILE = 2,
    wxPRINT_MODE_PRINTER = 3,
    wxPRINT_MODE_STREAM = 4
};





enum wxUpdateUI
{
    wxUPDATE_UI_NONE = 0x0000,
    wxUPDATE_UI_RECURSE = 0x0001,
    wxUPDATE_UI_FROMIDLE = 0x0002
};
# 2561 "/usr/include/wx-3.1-unofficial/wx/defs.h"
typedef int (* wxSortCompareFunction)(const void *elem1, const void *elem2);


typedef int (* wxListIterateFunction)(void *current);
# 2940 "/usr/include/wx-3.1-unofficial/wx/defs.h"
typedef struct _GSList GSList;


typedef struct _GdkColor GdkColor;
typedef struct _GdkCursor GdkCursor;
typedef struct _GdkDragContext GdkDragContext;


    typedef struct _GdkAtom* GdkAtom;
# 2961 "/usr/include/wx-3.1-unofficial/wx/defs.h"
    typedef struct _GdkWindow GdkWindow;
    typedef struct _GdkEventSequence GdkEventSequence;
# 2973 "/usr/include/wx-3.1-unofficial/wx/defs.h"
typedef struct _GtkWidget GtkWidget;
typedef struct _GtkRcStyle GtkRcStyle;
typedef struct _GtkAdjustment GtkAdjustment;
typedef struct _GtkToolbar GtkToolbar;
typedef struct _GtkNotebook GtkNotebook;
typedef struct _GtkNotebookPage GtkNotebookPage;
typedef struct _GtkAccelGroup GtkAccelGroup;
typedef struct _GtkSelectionData GtkSelectionData;
typedef struct _GtkTextBuffer GtkTextBuffer;
typedef struct _GtkRange GtkRange;
typedef struct _GtkCellRenderer GtkCellRenderer;

typedef GtkWidget *WXWidget;
# 3002 "/usr/include/wx-3.1-unofficial/wx/defs.h"
typedef struct _PangoContext PangoContext;
typedef struct _PangoLayout PangoLayout;
typedef struct _PangoFontDescription PangoFontDescription;
# 3018 "/usr/include/wx-3.1-unofficial/wx/defs.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/features.h" 1
# 3019 "/usr/include/wx-3.1-unofficial/wx/defs.h" 2
# 3088 "/usr/include/wx-3.1-unofficial/wx/defs.h"
enum
{
    wxPRIORITY_MIN = 0u,
    wxPRIORITY_DEFAULT = 50u,
    wxPRIORITY_MAX = 100u
};
# 15 "/usr/include/wx-3.1-unofficial/wx/event.h" 2

# 1 "/usr/include/wx-3.1-unofficial/wx/object.h" 1
# 19 "/usr/include/wx-3.1-unofficial/wx/object.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/memory.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/memory.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/memory.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/string.h" 1
# 24 "/usr/include/wx-3.1-unofficial/wx/string.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 25 "/usr/include/wx-3.1-unofficial/wx/string.h" 2





# 1 "/usr/include/string.h" 1 3 4
# 26 "/usr/include/string.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/string.h" 2 3 4


# 28 "/usr/include/string.h" 3 4
extern "C" {




# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 34 "/usr/include/string.h" 2 3 4
# 43 "/usr/include/string.h" 3 4
extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern void *memset (void *__s, int __c, size_t __n) throw () __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern "C++"
{
extern void *memchr (void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const void *memchr (const void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 89 "/usr/include/string.h" 3 4
}
# 99 "/usr/include/string.h" 3 4
extern "C++" void *rawmemchr (void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const void *rawmemchr (const void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));







extern "C++" void *memrchr (void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const void *memrchr (const void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 122 "/usr/include/string.h" 3 4
extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (2)));






extern int strcoll_l (const char *__s1, const char *__s2, locale_t __l)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));


extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    locale_t __l) throw () __attribute__ ((__nonnull__ (2, 4)));





extern char *strdup (const char *__s)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 204 "/usr/include/string.h" 3 4
extern "C++"
{
extern char *strchr (char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *strchr (const char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 224 "/usr/include/string.h" 3 4
}






extern "C++"
{
extern char *strrchr (char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *strrchr (const char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 251 "/usr/include/string.h" 3 4
}
# 261 "/usr/include/string.h" 3 4
extern "C++" char *strchrnul (char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const char *strchrnul (const char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 273 "/usr/include/string.h" 3 4
extern size_t strcspn (const char *__s, const char *__reject)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern "C++"
{
extern char *strpbrk (char *__s, const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern const char *strpbrk (const char *__s, const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 301 "/usr/include/string.h" 3 4
}






extern "C++"
{
extern char *strstr (char *__haystack, const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern const char *strstr (const char *__haystack, const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 328 "/usr/include/string.h" 3 4
}







extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (2)));



extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));





extern "C++" char *strcasestr (char *__haystack, const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern "C++" const char *strcasestr (const char *__haystack,
         const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 369 "/usr/include/string.h" 3 4
extern void *memmem (const void *__haystack, size_t __haystacklen,
       const void *__needle, size_t __needlelen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 3)));



extern void *__mempcpy (void *__restrict __dest,
   const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern void *mempcpy (void *__restrict __dest,
        const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern size_t strlen (const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern size_t strnlen (const char *__string, size_t __maxlen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern char *strerror (int __errnum) throw ();
# 421 "/usr/include/string.h" 3 4
extern char *strerror_r (int __errnum, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2))) ;





extern char *strerror_l (int __errnum, locale_t __l) throw ();



# 1 "/usr/include/strings.h" 1 3 4
# 23 "/usr/include/strings.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 24 "/usr/include/strings.h" 2 3 4






extern "C" {



extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bcopy (const void *__src, void *__dest, size_t __n)
  throw () __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));



extern "C++"
{
extern char *index (char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *index (const char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 66 "/usr/include/strings.h" 3 4
}







extern "C++"
{
extern char *rindex (char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *rindex (const char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 94 "/usr/include/strings.h" 3 4
}
# 104 "/usr/include/strings.h" 3 4
extern int ffs (int __i) throw () __attribute__ ((__const__));





extern int ffsl (long int __l) throw () __attribute__ ((__const__));
__extension__ extern int ffsll (long long int __ll)
     throw () __attribute__ ((__const__));



extern int strcasecmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));






extern int strcasecmp_l (const char *__s1, const char *__s2, locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));



extern int strncasecmp_l (const char *__s1, const char *__s2,
     size_t __n, locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));


}
# 433 "/usr/include/string.h" 2 3 4



extern void explicit_bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));



extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) throw ();


extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int strverscmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strfry (char *__string) throw () __attribute__ ((__nonnull__ (1)));


extern void *memfrob (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));







extern "C++" char *basename (char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
extern "C++" const char *basename (const char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
# 499 "/usr/include/string.h" 3 4
}
# 31 "/usr/include/wx-3.1-unofficial/wx/string.h" 2
# 1 "/usr/include/stdio.h" 1 3 4
# 27 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 28 "/usr/include/stdio.h" 2 3 4

extern "C" {



# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 34 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stdarg.h" 1 3 4
# 37 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h" 3 4
typedef struct _G_fpos_t
{
  __off_t __pos;
  __mbstate_t __state;
} __fpos_t;
# 40 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h" 3 4
typedef struct _G_fpos64_t
{
  __off64_t __pos;
  __mbstate_t __state;
} __fpos64_t;
# 41 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h" 3 4
struct _IO_FILE;
struct _IO_marker;
struct _IO_codecvt;
struct _IO_wide_data;




typedef void _IO_lock_t;





struct _IO_FILE
{
  int _flags;


  char *_IO_read_ptr;
  char *_IO_read_end;
  char *_IO_read_base;
  char *_IO_write_base;
  char *_IO_write_ptr;
  char *_IO_write_end;
  char *_IO_buf_base;
  char *_IO_buf_end;


  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;
  int _flags2;
  __off_t _old_offset;


  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];

  _IO_lock_t *_lock;







  __off64_t _offset;

  struct _IO_codecvt *_codecvt;
  struct _IO_wide_data *_wide_data;
  struct _IO_FILE *_freeres_list;
  void *_freeres_buf;
  size_t __pad5;
  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];
};
# 44 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h" 3 4
typedef __ssize_t cookie_read_function_t (void *__cookie, char *__buf,
                                          size_t __nbytes);







typedef __ssize_t cookie_write_function_t (void *__cookie, const char *__buf,
                                           size_t __nbytes);







typedef int cookie_seek_function_t (void *__cookie, __off64_t *__pos, int __w);


typedef int cookie_close_function_t (void *__cookie);






typedef struct _IO_cookie_io_functions_t
{
  cookie_read_function_t *read;
  cookie_write_function_t *write;
  cookie_seek_function_t *seek;
  cookie_close_function_t *close;
} cookie_io_functions_t;
# 47 "/usr/include/stdio.h" 2 3 4





typedef __gnuc_va_list va_list;
# 86 "/usr/include/stdio.h" 3 4
typedef __fpos64_t fpos_t;


typedef __fpos64_t fpos64_t;
# 133 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 134 "/usr/include/stdio.h" 2 3 4



extern FILE *stdin;
extern FILE *stdout;
extern FILE *stderr;






extern int remove (const char *__filename) throw ();

extern int rename (const char *__old, const char *__new) throw ();



extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) throw ();
# 164 "/usr/include/stdio.h" 3 4
extern int renameat2 (int __oldfd, const char *__old, int __newfd,
        const char *__new, unsigned int __flags) throw ();
# 176 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile (void) __asm__ ("" "tmpfile64") ;






extern FILE *tmpfile64 (void) ;



extern char *tmpnam (char *__s) throw () ;




extern char *tmpnam_r (char *__s) throw () ;
# 204 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
     throw () __attribute__ ((__malloc__)) ;







extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);
# 227 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 237 "/usr/include/stdio.h" 3 4
extern int fcloseall (void);
# 257 "/usr/include/stdio.h" 3 4
extern FILE *fopen (const char *__restrict __filename, const char *__restrict __modes) __asm__ ("" "fopen64")

  ;
extern FILE *freopen (const char *__restrict __filename, const char *__restrict __modes, FILE *__restrict __stream) __asm__ ("" "freopen64")


  ;






extern FILE *fopen64 (const char *__restrict __filename,
        const char *__restrict __modes) ;
extern FILE *freopen64 (const char *__restrict __filename,
   const char *__restrict __modes,
   FILE *__restrict __stream) ;




extern FILE *fdopen (int __fd, const char *__modes) throw () ;





extern FILE *fopencookie (void *__restrict __magic_cookie,
     const char *__restrict __modes,
     cookie_io_functions_t __io_funcs) throw () ;




extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  throw () ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) throw () ;





extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) throw ();



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) throw ();




extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) throw ();


extern void setlinebuf (FILE *__stream) throw ();







extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) throw ();





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) throw ();



extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 3, 0)));





extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,
        __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 2, 0))) ;
extern int __asprintf (char **__restrict __ptr,
         const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;
extern int asprintf (char **__restrict __ptr,
       const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;




extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));







extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) ;




extern int scanf (const char *__restrict __format, ...) ;

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) throw ();






extern int fscanf (FILE *__restrict __stream, const char *__restrict __format, ...) __asm__ ("" "__isoc99_fscanf")

                               ;
extern int scanf (const char *__restrict __format, ...) __asm__ ("" "__isoc99_scanf")
                              ;
extern int sscanf (const char *__restrict __s, const char *__restrict __format, ...) throw () __asm__ ("" "__isoc99_sscanf")

                      ;
# 432 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__scanf__, 2, 0)));




extern int vfscanf (FILE *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vfscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0))) ;
extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vscanf")

     __attribute__ ((__format__ (__scanf__, 1, 0))) ;
extern int vsscanf (const char *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) throw () __asm__ ("" "__isoc99_vsscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0)));
# 485 "/usr/include/stdio.h" 3 4
extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);






extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 510 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);
# 521 "/usr/include/stdio.h" 3 4
extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);
# 537 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);







extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     ;
# 587 "/usr/include/stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream) ;
# 603 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
                             size_t *__restrict __n, int __delimiter,
                             FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
                           size_t *__restrict __n, int __delimiter,
                           FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
                          size_t *__restrict __n,
                          FILE *__restrict __stream) ;







extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);
# 662 "/usr/include/stdio.h" 3 4
extern int fputs_unlocked (const char *__restrict __s,
      FILE *__restrict __stream);
# 673 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);







extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);
# 715 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off64_t __off, int __whence) __asm__ ("" "fseeko64")

                  ;
extern __off64_t ftello (FILE *__stream) __asm__ ("" "ftello64");
# 739 "/usr/include/stdio.h" 3 4
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos) __asm__ ("" "fgetpos64")
                                          ;
extern int fsetpos (FILE *__stream, const fpos_t *__pos) __asm__ ("" "fsetpos64")
                                                          ;







extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) ;
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos);



extern void clearerr (FILE *__stream) throw ();

extern int feof (FILE *__stream) throw () ;

extern int ferror (FILE *__stream) throw () ;



extern void clearerr_unlocked (FILE *__stream) throw ();
extern int feof_unlocked (FILE *__stream) throw () ;
extern int ferror_unlocked (FILE *__stream) throw () ;







extern void perror (const char *__s);





# 1 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern const char *const sys_errlist[];


extern int _sys_nerr;
extern const char *const _sys_errlist[];
# 782 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) throw () ;




extern int fileno_unlocked (FILE *__stream) throw () ;
# 800 "/usr/include/stdio.h" 3 4
extern FILE *popen (const char *__command, const char *__modes) ;





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) throw ();





extern char *cuserid (char *__s);




struct obstack;


extern int obstack_printf (struct obstack *__restrict __obstack,
      const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       const char *__restrict __format,
       __gnuc_va_list __args)
     throw () __attribute__ ((__format__ (__printf__, 2, 0)));







extern void flockfile (FILE *__stream) throw ();



extern int ftrylockfile (FILE *__stream) throw () ;


extern void funlockfile (FILE *__stream) throw ();
# 858 "/usr/include/stdio.h" 3 4
extern int __uflow (FILE *);
extern int __overflow (FILE *, int);
# 873 "/usr/include/stdio.h" 3 4
}
# 32 "/usr/include/wx-3.1-unofficial/wx/string.h" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stdarg.h" 1 3 4
# 33 "/usr/include/wx-3.1-unofficial/wx/string.h" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/limits.h" 1 3 4
# 34 "/usr/include/wx-3.1-unofficial/wx/string.h" 2
# 1 "/usr/include/c++/10/stdlib.h" 1 3
# 36 "/usr/include/c++/10/stdlib.h" 3
# 1 "/usr/include/c++/10/cstdlib" 1 3
# 39 "/usr/include/c++/10/cstdlib" 3
       
# 40 "/usr/include/c++/10/cstdlib" 3

# 1 "/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h" 1 3
# 262 "/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h" 3
namespace std
{
  typedef long unsigned int size_t;
  typedef long int ptrdiff_t;


  typedef decltype(nullptr) nullptr_t;

}
# 284 "/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h" 3
namespace std
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
namespace __gnu_cxx
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
# 522 "/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h" 3
# 1 "/usr/include/x86_64-linux-gnu/c++/10/bits/os_defines.h" 1 3
# 523 "/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h" 2 3


# 1 "/usr/include/x86_64-linux-gnu/c++/10/bits/cpu_defines.h" 1 3
# 526 "/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h" 2 3
# 42 "/usr/include/c++/10/cstdlib" 2 3
# 75 "/usr/include/c++/10/cstdlib" 3
# 1 "/usr/include/stdlib.h" 1 3 4
# 25 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 26 "/usr/include/stdlib.h" 2 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 32 "/usr/include/stdlib.h" 2 3 4

extern "C" {





# 1 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 1 3 4
# 52 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 3 4
typedef enum
{
  P_ALL,
  P_PID,
  P_PGID
} idtype_t;
# 40 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 1 3 4
# 41 "/usr/include/stdlib.h" 2 3 4
# 58 "/usr/include/stdlib.h" 3 4
typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;





__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;
# 97 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) throw () ;



extern double atof (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



__extension__ extern long long int atoll (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) throw () __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));
# 140 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32 (const char *__restrict __nptr,
     char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float64 strtof64 (const char *__restrict __nptr,
     char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float128 strtof128 (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float32x strtof32x (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float64x strtof64x (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));
# 176 "/usr/include/stdlib.h" 3 4
extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));



__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));




extern int strfromd (char *__dest, size_t __size, const char *__format,
       double __f)
     throw () __attribute__ ((__nonnull__ (3)));

extern int strfromf (char *__dest, size_t __size, const char *__format,
       float __f)
     throw () __attribute__ ((__nonnull__ (3)));

extern int strfroml (char *__dest, size_t __size, const char *__format,
       long double __f)
     throw () __attribute__ ((__nonnull__ (3)));
# 232 "/usr/include/stdlib.h" 3 4
extern int strfromf32 (char *__dest, size_t __size, const char * __format,
         _Float32 __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf64 (char *__dest, size_t __size, const char * __format,
         _Float64 __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf128 (char *__dest, size_t __size, const char * __format,
   _Float128 __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf32x (char *__dest, size_t __size, const char * __format,
   _Float32x __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf64x (char *__dest, size_t __size, const char * __format,
   _Float64x __f)
     throw () __attribute__ ((__nonnull__ (3)));
# 274 "/usr/include/stdlib.h" 3 4
extern long int strtol_l (const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     locale_t __loc) throw () __attribute__ ((__nonnull__ (1, 4)));

extern unsigned long int strtoul_l (const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern long long int strtoll_l (const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern unsigned long long int strtoull_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

extern double strtod_l (const char *__restrict __nptr,
   char **__restrict __endptr, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern float strtof_l (const char *__restrict __nptr,
         char **__restrict __endptr, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern long double strtold_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));
# 316 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float64 strtof64_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float128 strtof128_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float32x strtof32x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float64x strtof64x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));
# 385 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) throw () ;


extern long int a64l (const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;
# 401 "/usr/include/stdlib.h" 3 4
extern long int random (void) throw ();


extern void srandom (unsigned int __seed) throw ();





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) throw () __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) throw () __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     throw () __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern int rand (void) throw ();

extern void srand (unsigned int __seed) throw ();



extern int rand_r (unsigned int *__seed) throw ();







extern double drand48 (void) throw ();
extern double erand48 (unsigned short int __xsubi[3]) throw () __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) throw ();
extern long int nrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) throw ();
extern long int jrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) throw ();
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     throw () __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) throw () __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern void *malloc (size_t __size) throw () __attribute__ ((__malloc__))
     __attribute__ ((__alloc_size__ (1))) ;

extern void *calloc (size_t __nmemb, size_t __size)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (1, 2))) ;






extern void *realloc (void *__ptr, size_t __size)
     throw () __attribute__ ((__warn_unused_result__)) __attribute__ ((__alloc_size__ (2)));







extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     throw () __attribute__ ((__warn_unused_result__))
     __attribute__ ((__alloc_size__ (2, 3)));



extern void free (void *__ptr) throw ();


# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4

extern "C" {





extern void *alloca (size_t __size) throw ();





}
# 569 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) throw () __attribute__ ((__malloc__))
     __attribute__ ((__alloc_size__ (1))) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     throw () __attribute__ ((__nonnull__ (1))) ;




extern void *aligned_alloc (size_t __alignment, size_t __size)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (2))) ;



extern void abort (void) throw () __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) throw () __attribute__ ((__nonnull__ (1)));




extern "C++" int at_quick_exit (void (*__func) (void))
     throw () __asm ("at_quick_exit") __attribute__ ((__nonnull__ (1)));
# 610 "/usr/include/stdlib.h" 3 4
extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     throw () __attribute__ ((__nonnull__ (1)));





extern void exit (int __status) throw () __attribute__ ((__noreturn__));





extern void quick_exit (int __status) throw () __attribute__ ((__noreturn__));





extern void _Exit (int __status) throw () __attribute__ ((__noreturn__));




extern char *getenv (const char *__name) throw () __attribute__ ((__nonnull__ (1))) ;




extern char *secure_getenv (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;






extern int putenv (char *__string) throw () __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     throw () __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) throw () __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) throw ();
# 675 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) throw () __attribute__ ((__nonnull__ (1)));
# 691 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __asm__ ("" "mkstemp64")
     __attribute__ ((__nonnull__ (1))) ;





extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 713 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __asm__ ("" "mkstemps64")
                     __attribute__ ((__nonnull__ (1))) ;





extern int mkstemps64 (char *__template, int __suffixlen)
     __attribute__ ((__nonnull__ (1))) ;
# 731 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) throw () __attribute__ ((__nonnull__ (1))) ;
# 745 "/usr/include/stdlib.h" 3 4
extern int mkostemp (char *__template, int __flags) __asm__ ("" "mkostemp64")
     __attribute__ ((__nonnull__ (1))) ;





extern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 766 "/usr/include/stdlib.h" 3 4
extern int mkostemps (char *__template, int __suffixlen, int __flags) __asm__ ("" "mkostemps64")

     __attribute__ ((__nonnull__ (1))) ;





extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 784 "/usr/include/stdlib.h" 3 4
extern int system (const char *__command) ;





extern char *canonicalize_file_name (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 800 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) throw () ;






typedef int (*__compar_fn_t) (const void *, const void *);


typedef __compar_fn_t comparison_fn_t;



typedef int (*__compar_d_fn_t) (const void *, const void *, void *);




extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;







extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));

extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  __attribute__ ((__nonnull__ (1, 4)));




extern int abs (int __x) throw () __attribute__ ((__const__)) ;
extern long int labs (long int __x) throw () __attribute__ ((__const__)) ;


__extension__ extern long long int llabs (long long int __x)
     throw () __attribute__ ((__const__)) ;






extern div_t div (int __numer, int __denom)
     throw () __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     throw () __attribute__ ((__const__)) ;


__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     throw () __attribute__ ((__const__)) ;
# 872 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));





extern int mblen (const char *__s, size_t __n) throw ();


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) throw ();


extern int wctomb (char *__s, wchar_t __wchar) throw ();



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) throw ();

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     throw ();







extern int rpmatch (const char *__response) throw () __attribute__ ((__nonnull__ (1))) ;
# 957 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     throw () __attribute__ ((__nonnull__ (1, 2, 3))) ;







extern int posix_openpt (int __oflag) ;







extern int grantpt (int __fd) throw ();



extern int unlockpt (int __fd) throw ();




extern char *ptsname (int __fd) throw () ;






extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int getpt (void);






extern int getloadavg (double __loadavg[], int __nelem)
     throw () __attribute__ ((__nonnull__ (1)));
# 1013 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 1 3 4
# 1014 "/usr/include/stdlib.h" 2 3 4
# 1023 "/usr/include/stdlib.h" 3 4
}
# 76 "/usr/include/c++/10/cstdlib" 2 3

# 1 "/usr/include/c++/10/bits/std_abs.h" 1 3
# 33 "/usr/include/c++/10/bits/std_abs.h" 3
       
# 34 "/usr/include/c++/10/bits/std_abs.h" 3
# 46 "/usr/include/c++/10/bits/std_abs.h" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::abs;


  inline long
  abs(long __i) { return __builtin_labs(__i); }



  inline long long
  abs(long long __x) { return __builtin_llabs (__x); }
# 70 "/usr/include/c++/10/bits/std_abs.h" 3
  inline constexpr double
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline constexpr float
  abs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  abs(long double __x)
  { return __builtin_fabsl(__x); }



  inline constexpr __int128
  abs(__int128 __x) { return __x >= 0 ? __x : -__x; }
# 101 "/usr/include/c++/10/bits/std_abs.h" 3
  inline constexpr
  __float128
  abs(__float128 __x)
  { return __x < 0 ? -__x : __x; }



}
}
# 78 "/usr/include/c++/10/cstdlib" 2 3
# 121 "/usr/include/c++/10/cstdlib" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::div_t;
  using ::ldiv_t;

  using ::abort;



  using ::atexit;


  using ::at_quick_exit;


  using ::atof;
  using ::atoi;
  using ::atol;
  using ::bsearch;
  using ::calloc;
  using ::div;
  using ::exit;
  using ::free;
  using ::getenv;
  using ::labs;
  using ::ldiv;
  using ::malloc;

  using ::mblen;
  using ::mbstowcs;
  using ::mbtowc;

  using ::qsort;


  using ::quick_exit;


  using ::rand;
  using ::realloc;
  using ::srand;
  using ::strtod;
  using ::strtol;
  using ::strtoul;
  using ::system;

  using ::wcstombs;
  using ::wctomb;



  inline ldiv_t
  div(long __i, long __j) { return ldiv(__i, __j); }




}
# 195 "/usr/include/c++/10/cstdlib" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  using ::lldiv_t;





  using ::_Exit;



  using ::llabs;

  inline lldiv_t
  div(long long __n, long long __d)
  { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }

  using ::lldiv;
# 227 "/usr/include/c++/10/cstdlib" 3
  using ::atoll;
  using ::strtoll;
  using ::strtoull;

  using ::strtof;
  using ::strtold;


}

namespace std
{

  using ::__gnu_cxx::lldiv_t;

  using ::__gnu_cxx::_Exit;

  using ::__gnu_cxx::llabs;
  using ::__gnu_cxx::div;
  using ::__gnu_cxx::lldiv;

  using ::__gnu_cxx::atoll;
  using ::__gnu_cxx::strtof;
  using ::__gnu_cxx::strtoll;
  using ::__gnu_cxx::strtoull;
  using ::__gnu_cxx::strtold;
}



}
# 37 "/usr/include/c++/10/stdlib.h" 2 3

using std::abort;
using std::atexit;
using std::exit;


  using std::at_quick_exit;


  using std::quick_exit;




using std::div_t;
using std::ldiv_t;

using std::abs;
using std::atof;
using std::atoi;
using std::atol;
using std::bsearch;
using std::calloc;
using std::div;
using std::free;
using std::getenv;
using std::labs;
using std::ldiv;
using std::malloc;

using std::mblen;
using std::mbstowcs;
using std::mbtowc;

using std::qsort;
using std::rand;
using std::realloc;
using std::srand;
using std::strtod;
using std::strtol;
using std::strtoul;
using std::system;

using std::wcstombs;
using std::wctomb;
# 35 "/usr/include/wx-3.1-unofficial/wx/string.h" 2

# 1 "/usr/include/wx-3.1-unofficial/wx/wxcrtbase.h" 1
# 36 "/usr/include/wx-3.1-unofficial/wx/wxcrtbase.h"
# 1 "/usr/include/ctype.h" 1 3 4
# 28 "/usr/include/ctype.h" 3 4
extern "C" {
# 46 "/usr/include/ctype.h" 3 4
enum
{
  _ISupper = ((0) < 8 ? ((1 << (0)) << 8) : ((1 << (0)) >> 8)),
  _ISlower = ((1) < 8 ? ((1 << (1)) << 8) : ((1 << (1)) >> 8)),
  _ISalpha = ((2) < 8 ? ((1 << (2)) << 8) : ((1 << (2)) >> 8)),
  _ISdigit = ((3) < 8 ? ((1 << (3)) << 8) : ((1 << (3)) >> 8)),
  _ISxdigit = ((4) < 8 ? ((1 << (4)) << 8) : ((1 << (4)) >> 8)),
  _ISspace = ((5) < 8 ? ((1 << (5)) << 8) : ((1 << (5)) >> 8)),
  _ISprint = ((6) < 8 ? ((1 << (6)) << 8) : ((1 << (6)) >> 8)),
  _ISgraph = ((7) < 8 ? ((1 << (7)) << 8) : ((1 << (7)) >> 8)),
  _ISblank = ((8) < 8 ? ((1 << (8)) << 8) : ((1 << (8)) >> 8)),
  _IScntrl = ((9) < 8 ? ((1 << (9)) << 8) : ((1 << (9)) >> 8)),
  _ISpunct = ((10) < 8 ? ((1 << (10)) << 8) : ((1 << (10)) >> 8)),
  _ISalnum = ((11) < 8 ? ((1 << (11)) << 8) : ((1 << (11)) >> 8))
};
# 79 "/usr/include/ctype.h" 3 4
extern const unsigned short int **__ctype_b_loc (void)
     throw () __attribute__ ((__const__));
extern const __int32_t **__ctype_tolower_loc (void)
     throw () __attribute__ ((__const__));
extern const __int32_t **__ctype_toupper_loc (void)
     throw () __attribute__ ((__const__));
# 108 "/usr/include/ctype.h" 3 4
extern int isalnum (int) throw ();
extern int isalpha (int) throw ();
extern int iscntrl (int) throw ();
extern int isdigit (int) throw ();
extern int islower (int) throw ();
extern int isgraph (int) throw ();
extern int isprint (int) throw ();
extern int ispunct (int) throw ();
extern int isspace (int) throw ();
extern int isupper (int) throw ();
extern int isxdigit (int) throw ();



extern int tolower (int __c) throw ();


extern int toupper (int __c) throw ();




extern int isblank (int) throw ();




extern int isctype (int __c, int __mask) throw ();






extern int isascii (int __c) throw ();



extern int toascii (int __c) throw ();



extern int _toupper (int) throw ();
extern int _tolower (int) throw ();
# 251 "/usr/include/ctype.h" 3 4
extern int isalnum_l (int, locale_t) throw ();
extern int isalpha_l (int, locale_t) throw ();
extern int iscntrl_l (int, locale_t) throw ();
extern int isdigit_l (int, locale_t) throw ();
extern int islower_l (int, locale_t) throw ();
extern int isgraph_l (int, locale_t) throw ();
extern int isprint_l (int, locale_t) throw ();
extern int ispunct_l (int, locale_t) throw ();
extern int isspace_l (int, locale_t) throw ();
extern int isupper_l (int, locale_t) throw ();
extern int isxdigit_l (int, locale_t) throw ();

extern int isblank_l (int, locale_t) throw ();



extern int __tolower_l (int __c, locale_t __l) throw ();
extern int tolower_l (int __c, locale_t __l) throw ();


extern int __toupper_l (int __c, locale_t __l) throw ();
extern int toupper_l (int __c, locale_t __l) throw ();
# 327 "/usr/include/ctype.h" 3 4
}
# 37 "/usr/include/wx-3.1-unofficial/wx/wxcrtbase.h" 2
# 1 "/usr/include/wctype.h" 1 3 4
# 38 "/usr/include/wctype.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h" 1 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h" 3 4
typedef unsigned long int wctype_t;
# 56 "/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h" 3 4
enum
{
  __ISwupper = 0,
  __ISwlower = 1,
  __ISwalpha = 2,
  __ISwdigit = 3,
  __ISwxdigit = 4,
  __ISwspace = 5,
  __ISwprint = 6,
  __ISwgraph = 7,
  __ISwblank = 8,
  __ISwcntrl = 9,
  __ISwpunct = 10,
  __ISwalnum = 11,

  _ISwupper = ((__ISwupper) < 8 ? (int) ((1UL << (__ISwupper)) << 24) : ((__ISwupper) < 16 ? (int) ((1UL << (__ISwupper)) << 8) : ((__ISwupper) < 24 ? (int) ((1UL << (__ISwupper)) >> 8) : (int) ((1UL << (__ISwupper)) >> 24)))),
  _ISwlower = ((__ISwlower) < 8 ? (int) ((1UL << (__ISwlower)) << 24) : ((__ISwlower) < 16 ? (int) ((1UL << (__ISwlower)) << 8) : ((__ISwlower) < 24 ? (int) ((1UL << (__ISwlower)) >> 8) : (int) ((1UL << (__ISwlower)) >> 24)))),
  _ISwalpha = ((__ISwalpha) < 8 ? (int) ((1UL << (__ISwalpha)) << 24) : ((__ISwalpha) < 16 ? (int) ((1UL << (__ISwalpha)) << 8) : ((__ISwalpha) < 24 ? (int) ((1UL << (__ISwalpha)) >> 8) : (int) ((1UL << (__ISwalpha)) >> 24)))),
  _ISwdigit = ((__ISwdigit) < 8 ? (int) ((1UL << (__ISwdigit)) << 24) : ((__ISwdigit) < 16 ? (int) ((1UL << (__ISwdigit)) << 8) : ((__ISwdigit) < 24 ? (int) ((1UL << (__ISwdigit)) >> 8) : (int) ((1UL << (__ISwdigit)) >> 24)))),
  _ISwxdigit = ((__ISwxdigit) < 8 ? (int) ((1UL << (__ISwxdigit)) << 24) : ((__ISwxdigit) < 16 ? (int) ((1UL << (__ISwxdigit)) << 8) : ((__ISwxdigit) < 24 ? (int) ((1UL << (__ISwxdigit)) >> 8) : (int) ((1UL << (__ISwxdigit)) >> 24)))),
  _ISwspace = ((__ISwspace) < 8 ? (int) ((1UL << (__ISwspace)) << 24) : ((__ISwspace) < 16 ? (int) ((1UL << (__ISwspace)) << 8) : ((__ISwspace) < 24 ? (int) ((1UL << (__ISwspace)) >> 8) : (int) ((1UL << (__ISwspace)) >> 24)))),
  _ISwprint = ((__ISwprint) < 8 ? (int) ((1UL << (__ISwprint)) << 24) : ((__ISwprint) < 16 ? (int) ((1UL << (__ISwprint)) << 8) : ((__ISwprint) < 24 ? (int) ((1UL << (__ISwprint)) >> 8) : (int) ((1UL << (__ISwprint)) >> 24)))),
  _ISwgraph = ((__ISwgraph) < 8 ? (int) ((1UL << (__ISwgraph)) << 24) : ((__ISwgraph) < 16 ? (int) ((1UL << (__ISwgraph)) << 8) : ((__ISwgraph) < 24 ? (int) ((1UL << (__ISwgraph)) >> 8) : (int) ((1UL << (__ISwgraph)) >> 24)))),
  _ISwblank = ((__ISwblank) < 8 ? (int) ((1UL << (__ISwblank)) << 24) : ((__ISwblank) < 16 ? (int) ((1UL << (__ISwblank)) << 8) : ((__ISwblank) < 24 ? (int) ((1UL << (__ISwblank)) >> 8) : (int) ((1UL << (__ISwblank)) >> 24)))),
  _ISwcntrl = ((__ISwcntrl) < 8 ? (int) ((1UL << (__ISwcntrl)) << 24) : ((__ISwcntrl) < 16 ? (int) ((1UL << (__ISwcntrl)) << 8) : ((__ISwcntrl) < 24 ? (int) ((1UL << (__ISwcntrl)) >> 8) : (int) ((1UL << (__ISwcntrl)) >> 24)))),
  _ISwpunct = ((__ISwpunct) < 8 ? (int) ((1UL << (__ISwpunct)) << 24) : ((__ISwpunct) < 16 ? (int) ((1UL << (__ISwpunct)) << 8) : ((__ISwpunct) < 24 ? (int) ((1UL << (__ISwpunct)) >> 8) : (int) ((1UL << (__ISwpunct)) >> 24)))),
  _ISwalnum = ((__ISwalnum) < 8 ? (int) ((1UL << (__ISwalnum)) << 24) : ((__ISwalnum) < 16 ? (int) ((1UL << (__ISwalnum)) << 8) : ((__ISwalnum) < 24 ? (int) ((1UL << (__ISwalnum)) >> 8) : (int) ((1UL << (__ISwalnum)) >> 24))))
};



extern "C" {







extern int iswalnum (wint_t __wc) throw ();





extern int iswalpha (wint_t __wc) throw ();


extern int iswcntrl (wint_t __wc) throw ();



extern int iswdigit (wint_t __wc) throw ();



extern int iswgraph (wint_t __wc) throw ();




extern int iswlower (wint_t __wc) throw ();


extern int iswprint (wint_t __wc) throw ();




extern int iswpunct (wint_t __wc) throw ();




extern int iswspace (wint_t __wc) throw ();




extern int iswupper (wint_t __wc) throw ();




extern int iswxdigit (wint_t __wc) throw ();





extern int iswblank (wint_t __wc) throw ();
# 155 "/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h" 3 4
extern wctype_t wctype (const char *__property) throw ();



extern int iswctype (wint_t __wc, wctype_t __desc) throw ();






extern wint_t towlower (wint_t __wc) throw ();


extern wint_t towupper (wint_t __wc) throw ();

}
# 39 "/usr/include/wctype.h" 2 3 4





extern "C" {



typedef const __int32_t *wctrans_t;



extern wctrans_t wctrans (const char *__property) throw ();


extern wint_t towctrans (wint_t __wc, wctrans_t __desc) throw ();







extern int iswalnum_l (wint_t __wc, locale_t __locale) throw ();





extern int iswalpha_l (wint_t __wc, locale_t __locale) throw ();


extern int iswcntrl_l (wint_t __wc, locale_t __locale) throw ();



extern int iswdigit_l (wint_t __wc, locale_t __locale) throw ();



extern int iswgraph_l (wint_t __wc, locale_t __locale) throw ();




extern int iswlower_l (wint_t __wc, locale_t __locale) throw ();


extern int iswprint_l (wint_t __wc, locale_t __locale) throw ();




extern int iswpunct_l (wint_t __wc, locale_t __locale) throw ();




extern int iswspace_l (wint_t __wc, locale_t __locale) throw ();




extern int iswupper_l (wint_t __wc, locale_t __locale) throw ();




extern int iswxdigit_l (wint_t __wc, locale_t __locale) throw ();




extern int iswblank_l (wint_t __wc, locale_t __locale) throw ();



extern wctype_t wctype_l (const char *__property, locale_t __locale)
     throw ();



extern int iswctype_l (wint_t __wc, wctype_t __desc, locale_t __locale)
     throw ();






extern wint_t towlower_l (wint_t __wc, locale_t __locale) throw ();


extern wint_t towupper_l (wint_t __wc, locale_t __locale) throw ();



extern wctrans_t wctrans_l (const char *__property, locale_t __locale)
     throw ();


extern wint_t towctrans_l (wint_t __wc, wctrans_t __desc,
      locale_t __locale) throw ();



}
# 38 "/usr/include/wx-3.1-unofficial/wx/wxcrtbase.h" 2
# 1 "/usr/include/time.h" 1 3 4
# 29 "/usr/include/time.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 30 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 73 "/usr/include/x86_64-linux-gnu/bits/time.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timex.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3 4
struct timex
{
  unsigned int modes;
  __syscall_slong_t offset;
  __syscall_slong_t freq;
  __syscall_slong_t maxerror;
  __syscall_slong_t esterror;
  int status;
  __syscall_slong_t constant;
  __syscall_slong_t precision;
  __syscall_slong_t tolerance;
  struct timeval time;
  __syscall_slong_t tick;
  __syscall_slong_t ppsfreq;
  __syscall_slong_t jitter;
  int shift;
  __syscall_slong_t stabil;
  __syscall_slong_t jitcnt;
  __syscall_slong_t calcnt;
  __syscall_slong_t errcnt;
  __syscall_slong_t stbcnt;

  int tai;


  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32;
};
# 74 "/usr/include/x86_64-linux-gnu/bits/time.h" 2 3 4

extern "C" {


extern int clock_adjtime (__clockid_t __clock_id, struct timex *__utx) throw ();

}
# 34 "/usr/include/time.h" 2 3 4





# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h" 1 3 4






struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  const char *tm_zone;




};
# 40 "/usr/include/time.h" 2 3 4
# 48 "/usr/include/time.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_itimerspec.h" 1 3 4







struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };
# 49 "/usr/include/time.h" 2 3 4
struct sigevent;
# 68 "/usr/include/time.h" 3 4
extern "C" {



extern clock_t clock (void) throw ();


extern time_t time (time_t *__timer) throw ();


extern double difftime (time_t __time1, time_t __time0)
     throw () __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) throw ();





extern size_t strftime (char *__restrict __s, size_t __maxsize,
   const char *__restrict __format,
   const struct tm *__restrict __tp) throw ();




extern char *strptime (const char *__restrict __s,
         const char *__restrict __fmt, struct tm *__tp)
     throw ();






extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     const char *__restrict __format,
     const struct tm *__restrict __tp,
     locale_t __loc) throw ();



extern char *strptime_l (const char *__restrict __s,
    const char *__restrict __fmt, struct tm *__tp,
    locale_t __loc) throw ();





extern struct tm *gmtime (const time_t *__timer) throw ();



extern struct tm *localtime (const time_t *__timer) throw ();




extern struct tm *gmtime_r (const time_t *__restrict __timer,
       struct tm *__restrict __tp) throw ();



extern struct tm *localtime_r (const time_t *__restrict __timer,
          struct tm *__restrict __tp) throw ();




extern char *asctime (const struct tm *__tp) throw ();


extern char *ctime (const time_t *__timer) throw ();






extern char *asctime_r (const struct tm *__restrict __tp,
   char *__restrict __buf) throw ();


extern char *ctime_r (const time_t *__restrict __timer,
        char *__restrict __buf) throw ();




extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) throw ();



extern int daylight;
extern long int timezone;
# 190 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) throw ();


extern time_t timelocal (struct tm *__tp) throw ();


extern int dysize (int __year) throw () __attribute__ ((__const__));
# 205 "/usr/include/time.h" 3 4
extern int nanosleep (const struct timespec *__requested_time,
        struct timespec *__remaining);



extern int clock_getres (clockid_t __clock_id, struct timespec *__res) throw ();


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) throw ();


extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp)
     throw ();






extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       const struct timespec *__req,
       struct timespec *__rem);


extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) throw ();




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) throw ();


extern int timer_delete (timer_t __timerid) throw ();


extern int timer_settime (timer_t __timerid, int __flags,
     const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) throw ();


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     throw ();


extern int timer_getoverrun (timer_t __timerid) throw ();





extern int timespec_get (struct timespec *__ts, int __base)
     throw () __attribute__ ((__nonnull__ (1)));
# 274 "/usr/include/time.h" 3 4
extern int getdate_err;
# 283 "/usr/include/time.h" 3 4
extern struct tm *getdate (const char *__string);
# 297 "/usr/include/time.h" 3 4
extern int getdate_r (const char *__restrict __string,
        struct tm *__restrict __resbufp);


}
# 39 "/usr/include/wx-3.1-unofficial/wx/wxcrtbase.h" 2
# 83 "/usr/include/wx-3.1-unofficial/wx/wxcrtbase.h"
        
# 83 "/usr/include/wx-3.1-unofficial/wx/wxcrtbase.h"
       extern __attribute__ ((visibility("default"))) bool wxLocaleIsUtf8;


        extern __attribute__ ((visibility("default"))) void wxUpdateLocaleIsUtf8();
# 193 "/usr/include/wx-3.1-unofficial/wx/wxcrtbase.h"
       
       
# 228 "/usr/include/wx-3.1-unofficial/wx/wxcrtbase.h"
   
# 273 "/usr/include/wx-3.1-unofficial/wx/wxcrtbase.h"
extern "C" {
# 285 "/usr/include/wx-3.1-unofficial/wx/wxcrtbase.h"
}
# 394 "/usr/include/wx-3.1-unofficial/wx/wxcrtbase.h"
__attribute__ ((visibility("default"))) wchar_t *wxCRT_StrtokW(wchar_t *psz, const wchar_t *delim, wchar_t **save_ptr);
# 475 "/usr/include/wx-3.1-unofficial/wx/wxcrtbase.h"
__attribute__ ((visibility("default"))) int wxCRT_PutsW(const wchar_t *ws);







__attribute__ ((visibility("default"))) int wxCRT_FputcW(wchar_t wc, FILE *stream);
# 508 "/usr/include/wx-3.1-unofficial/wx/wxcrtbase.h"
__attribute__ ((visibility("default"))) wchar_t * wxCRT_GetenvW(const wchar_t *name);
# 649 "/usr/include/wx-3.1-unofficial/wx/wxcrtbase.h"
inline size_t wxStrlen(const char *s) { return s ? strlen(s) : 0; }
inline size_t wxStrlen(const wchar_t *s) { return s ? wcslen(s) : 0; }

       __attribute__ ((visibility("default"))) size_t wxStrlen(const wxChar16 *s );
# 661 "/usr/include/wx-3.1-unofficial/wx/wxcrtbase.h"
inline char* wxStrdup(const char *s) { return strdup(s); }
inline wchar_t* wxStrdup(const wchar_t *s) { return wcsdup(s); }

       __attribute__ ((visibility("default"))) wxChar16* wxStrdup(const wxChar16* s);
# 37 "/usr/include/wx-3.1-unofficial/wx/string.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/strvararg.h" 1
# 17 "/usr/include/wx-3.1-unofficial/wx/strvararg.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/strconv.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/strconv.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 16 "/usr/include/wx-3.1-unofficial/wx/strconv.h" 2

# 1 "/usr/include/wx-3.1-unofficial/wx/buffer.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/buffer.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/buffer.h" 2


# 1 "/usr/include/c++/10/stdlib.h" 1 3
# 18 "/usr/include/wx-3.1-unofficial/wx/buffer.h" 2

class wxCStrData;







namespace wxPrivate
{

struct UntypedBufferData
{
    enum Kind
    {
        Owned,
        NonOwned
    };

    UntypedBufferData(void *str, size_t len, Kind kind = Owned)
        : m_str(str), m_length(len), m_ref(1), m_owned(kind == Owned) {}

    ~UntypedBufferData()
    {
        if ( m_owned )
            free(m_str);
    }

    void *m_str;
    size_t m_length;


    unsigned short m_ref;

    bool m_owned;
};


__attribute__ ((visibility("default"))) UntypedBufferData * GetUntypedNullData();

}





template <typename T>
class wxScopedCharTypeBuffer
{
public:
    typedef T CharType;

    wxScopedCharTypeBuffer()
    {
        m_data = GetNullData();
    }




    static
    const wxScopedCharTypeBuffer CreateNonOwned(const CharType *str,
                                                size_t len = ((size_t)-1))
    {
        if ( len == ((size_t)-1) )
            len = wxStrlen(str);

        wxScopedCharTypeBuffer buf;
        if ( str )
            buf.m_data = new Data(const_cast<CharType*>(str), len, Data::NonOwned);
        return buf;
    }



    static
    const wxScopedCharTypeBuffer CreateOwned(CharType *str,
                                             size_t len = ((size_t)-1) )
    {
        if ( len == ((size_t)-1) )
            len = wxStrlen(str);

        wxScopedCharTypeBuffer buf;
        if ( str )
            buf.m_data = new Data(str, len);
        return buf;
    }

    wxScopedCharTypeBuffer(const wxScopedCharTypeBuffer& src)
    {
        m_data = src.m_data;
        IncRef();
    }

    wxScopedCharTypeBuffer& operator=(const wxScopedCharTypeBuffer& src)
    {
        if ( &src == this )
            return *this;

        DecRef();
        m_data = src.m_data;
        IncRef();

        return *this;
    }

    ~wxScopedCharTypeBuffer()
    {
        DecRef();
    }




    CharType *release() const
    {
        if ( m_data == GetNullData() )
            return 
# 136 "/usr/include/wx-3.1-unofficial/wx/buffer.h" 3 4
                  __null
# 136 "/usr/include/wx-3.1-unofficial/wx/buffer.h"
                      ;

        do { if ( m_data->m_owned ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/buffer.h", 138, __FUNCTION__, "m_data->m_owned", L"can't release non-owned buffer"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );
        do { if ( m_data->m_ref == 1 ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/buffer.h", 139, __FUNCTION__, "m_data->m_ref == 1", L"can't release shared buffer"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );

        CharType * const p = m_data->Get();

        wxScopedCharTypeBuffer *self = const_cast<wxScopedCharTypeBuffer*>(this);
        self->m_data->Set(
# 144 "/usr/include/wx-3.1-unofficial/wx/buffer.h" 3 4
                         __null
# 144 "/usr/include/wx-3.1-unofficial/wx/buffer.h"
                             , 0);
        self->DecRef();

        return p;
    }

    void reset()
    {
        DecRef();
    }

    CharType *data() { return m_data->Get(); }
    const CharType *data() const { return m_data->Get(); }
    operator const CharType *() const { return data(); }
    CharType operator[](size_t n) const { return data()[n]; }

    size_t length() const { return m_data->m_length; }

protected:

    struct Data : public wxPrivate::UntypedBufferData
    {
        Data(CharType *str, size_t len, Kind kind = Owned)
            : wxPrivate::UntypedBufferData(str, len, kind)
        {
        }

        CharType *Get() const { return static_cast<CharType *>(m_str); }
        void Set(CharType *str, size_t len)
        {
            m_str = str;
            m_length = len;
        }
    };


    static Data *GetNullData()
    {
        return static_cast<Data *>(wxPrivate::GetUntypedNullData());
    }

    void IncRef()
    {
        if ( m_data == GetNullData() )
            return;
        m_data->m_ref++;
    }

    void DecRef()
    {
        if ( m_data == GetNullData() )
            return;
        if ( --m_data->m_ref == 0 )
            delete m_data;
        m_data = GetNullData();
    }



    void MakeOwnedCopyOf(const wxScopedCharTypeBuffer& src)
    {
        this->DecRef();

        if ( src.m_data == this->GetNullData() )
        {
            this->m_data = this->GetNullData();
        }
        else if ( src.m_data->m_owned )
        {
            this->m_data = src.m_data;
            this->IncRef();
        }
        else
        {



            this->m_data = new Data
                               (
                                   StrCopy(src.data(), src.length()),
                                   src.length()
                               );
        }
    }

    static CharType *StrCopy(const CharType *src, size_t len)
    {
        CharType *dst = (CharType*)malloc(sizeof(CharType) * (len + 1));
        if ( dst )
            memcpy(dst, src, sizeof(CharType) * (len + 1));
        return dst;
    }

protected:
    Data *m_data;
};

typedef wxScopedCharTypeBuffer<char> wxScopedCharBuffer;
typedef wxScopedCharTypeBuffer<wchar_t> wxScopedWCharBuffer;



template <typename T>
class wxCharTypeBuffer : public wxScopedCharTypeBuffer<T>
{
protected:
    typedef typename wxScopedCharTypeBuffer<T>::Data Data;

public:
    typedef T CharType;

    wxCharTypeBuffer(const CharType *str = 
# 255 "/usr/include/wx-3.1-unofficial/wx/buffer.h" 3 4
                                          __null
# 255 "/usr/include/wx-3.1-unofficial/wx/buffer.h"
                                              , size_t len = ((size_t)-1))
    {
        if ( str )
        {
            if ( len == ((size_t)-1) )
                len = wxStrlen(str);
            this->m_data = new Data(this->StrCopy(str, len), len);
        }
        else
        {
            this->m_data = this->GetNullData();
        }
    }

    wxCharTypeBuffer(size_t len)
    {
        CharType* const str = (CharType *)malloc((len + 1)*sizeof(CharType));
        if ( str )
        {
            str[len] = (CharType)0;






            this->m_data = new Data(str, len);
        }
        else
        {
            this->m_data = this->GetNullData();
        }
    }

    wxCharTypeBuffer(const wxCharTypeBuffer& src)
        : wxScopedCharTypeBuffer<T>(src) {}

    wxCharTypeBuffer& operator=(const CharType *str)
    {
        this->DecRef();

        if ( str )
            this->m_data = new Data(wxStrdup(str), wxStrlen(str));
        return *this;
    }

    wxCharTypeBuffer& operator=(const wxCharTypeBuffer& src)
    {
        wxScopedCharTypeBuffer<T>::operator=(src);
        return *this;
    }

    wxCharTypeBuffer(const wxScopedCharTypeBuffer<T>& src)
    {
        this->MakeOwnedCopyOf(src);
    }

    wxCharTypeBuffer& operator=(const wxScopedCharTypeBuffer<T>& src)
    {
        MakeOwnedCopyOf(src);
        return *this;
    }

    bool extend(size_t len)
    {
        do { if ( this->m_data->m_owned ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/buffer.h", 320, __FUNCTION__, "this->m_data->m_owned", "cannot extend non-owned buffer"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );
        do { if ( this->m_data->m_ref == 1 ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/buffer.h", 321, __FUNCTION__, "this->m_data->m_ref == 1", "can't extend shared buffer"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );

        CharType *str =
            (CharType *)realloc(this->data(), (len + 1) * sizeof(CharType));
        if ( !str )
            return false;



        str[len] = (CharType)0;

        if ( this->m_data == this->GetNullData() )
        {
            this->m_data = new Data(str, len);
        }
        else
        {
            this->m_data->Set(str, len);
            this->m_data->m_owned = true;
        }

        return true;
    }

    void shrink(size_t len)
    {
        do { if ( this->m_data->m_owned ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/buffer.h", 347, __FUNCTION__, "this->m_data->m_owned", "cannot shrink non-owned buffer"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );
        do { if ( this->m_data->m_ref == 1 ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/buffer.h", 348, __FUNCTION__, "this->m_data->m_ref == 1", "can't shrink shared buffer"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );

        do { if ( len <= this->length() ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/buffer.h", 350, __FUNCTION__, "len <= this->length()", (const char*)
# 350 "/usr/include/wx-3.1-unofficial/wx/buffer.h" 3 4
       __null
# 350 "/usr/include/wx-3.1-unofficial/wx/buffer.h"
       ), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );

        this->m_data->m_length = len;
        this->data()[len] = 0;
    }
};

class wxCharBuffer : public wxCharTypeBuffer<char>
{
public:
    typedef wxCharTypeBuffer<char> wxCharTypeBufferBase;
    typedef wxScopedCharTypeBuffer<char> wxScopedCharTypeBufferBase;

    wxCharBuffer(const wxCharTypeBufferBase& buf)
        : wxCharTypeBufferBase(buf) {}
    wxCharBuffer(const wxScopedCharTypeBufferBase& buf)
        : wxCharTypeBufferBase(buf) {}

    wxCharBuffer(const CharType *str = 
# 368 "/usr/include/wx-3.1-unofficial/wx/buffer.h" 3 4
                                      __null
# 368 "/usr/include/wx-3.1-unofficial/wx/buffer.h"
                                          ) : wxCharTypeBufferBase(str) {}
    wxCharBuffer(size_t len) : wxCharTypeBufferBase(len) {}

    wxCharBuffer(const wxCStrData& cstr);
};

class wxWCharBuffer : public wxCharTypeBuffer<wchar_t>
{
public:
    typedef wxCharTypeBuffer<wchar_t> wxCharTypeBufferBase;
    typedef wxScopedCharTypeBuffer<wchar_t> wxScopedCharTypeBufferBase;

    wxWCharBuffer(const wxCharTypeBufferBase& buf)
        : wxCharTypeBufferBase(buf) {}
    wxWCharBuffer(const wxScopedCharTypeBufferBase& buf)
        : wxCharTypeBufferBase(buf) {}

    wxWCharBuffer(const CharType *str = 
# 385 "/usr/include/wx-3.1-unofficial/wx/buffer.h" 3 4
                                       __null
# 385 "/usr/include/wx-3.1-unofficial/wx/buffer.h"
                                           ) : wxCharTypeBufferBase(str) {}
    wxWCharBuffer(size_t len) : wxCharTypeBufferBase(len) {}

    wxWCharBuffer(const wxCStrData& cstr);
};


template <typename T>
class wxWritableCharTypeBuffer : public wxCharTypeBuffer<T>
{
public:
    typedef typename wxScopedCharTypeBuffer<T>::CharType CharType;

    wxWritableCharTypeBuffer(const wxScopedCharTypeBuffer<T>& src)
        : wxCharTypeBuffer<T>(src) {}




    wxWritableCharTypeBuffer(const CharType *str = 
# 404 "/usr/include/wx-3.1-unofficial/wx/buffer.h" 3 4
                                                  __null
# 404 "/usr/include/wx-3.1-unofficial/wx/buffer.h"
                                                      )
        : wxCharTypeBuffer<T>(str) {}

    operator CharType*() { return this->data(); }
};

typedef wxWritableCharTypeBuffer<char> wxWritableCharBuffer;
typedef wxWritableCharTypeBuffer<wchar_t> wxWritableWCharBuffer;
# 440 "/usr/include/wx-3.1-unofficial/wx/buffer.h"
class wxMemoryBufferData
{
public:

    enum { DefBufSize = 1024 };

    friend class wxMemoryBuffer;


private:
    wxMemoryBufferData(size_t size = wxMemoryBufferData::DefBufSize)
        : m_data(size ? malloc(size) : 
# 451 "/usr/include/wx-3.1-unofficial/wx/buffer.h" 3 4
                                      __null
# 451 "/usr/include/wx-3.1-unofficial/wx/buffer.h"
                                          ), m_size(size), m_len(0), m_ref(0)
    {
    }
    ~wxMemoryBufferData() { free(m_data); }


    void ResizeIfNeeded(size_t newSize)
    {
        if (newSize > m_size)
        {
            void* const data = realloc(m_data, newSize + wxMemoryBufferData::DefBufSize);
            if ( !data )
            {



                free(release());
                return;
            }

            m_data = data;
            m_size = newSize + wxMemoryBufferData::DefBufSize;
        }
    }

    void IncRef() { m_ref += 1; }
    void DecRef()
    {
        m_ref -= 1;
        if (m_ref == 0)
            delete this;
    }

    void *release()
    {
        if ( m_data == 
# 486 "/usr/include/wx-3.1-unofficial/wx/buffer.h" 3 4
                      __null 
# 486 "/usr/include/wx-3.1-unofficial/wx/buffer.h"
                           )
            return 
# 487 "/usr/include/wx-3.1-unofficial/wx/buffer.h" 3 4
                  __null
# 487 "/usr/include/wx-3.1-unofficial/wx/buffer.h"
                      ;

        do { if ( m_ref == 1 ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/buffer.h", 489, __FUNCTION__, "m_ref == 1", "can't release shared buffer"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );

        void *p = m_data;
        m_data = 
# 492 "/usr/include/wx-3.1-unofficial/wx/buffer.h" 3 4
                __null
# 492 "/usr/include/wx-3.1-unofficial/wx/buffer.h"
                    ;
        m_len =
        m_size = 0;

        return p;
    }



    void *m_data;


    size_t m_size;


    size_t m_len;


    size_t m_ref;

    private: wxMemoryBufferData(const wxMemoryBufferData&) = delete; wxMemoryBufferData& operator=(const wxMemoryBufferData&) = delete;
};


class wxMemoryBuffer
{
public:

    wxMemoryBuffer(size_t size = wxMemoryBufferData::DefBufSize)
    {
        m_bufdata = new wxMemoryBufferData(size);
        m_bufdata->IncRef();
    }

    ~wxMemoryBuffer() { m_bufdata->DecRef(); }



    wxMemoryBuffer(const wxMemoryBuffer& src)
        : m_bufdata(src.m_bufdata)
    {
        m_bufdata->IncRef();
    }

    wxMemoryBuffer& operator=(const wxMemoryBuffer& src)
    {
        if (&src != this)
        {
            m_bufdata->DecRef();
            m_bufdata = src.m_bufdata;
            m_bufdata->IncRef();
        }
        return *this;
    }



    void *GetData() const { return m_bufdata->m_data; }
    size_t GetBufSize() const { return m_bufdata->m_size; }
    size_t GetDataLen() const { return m_bufdata->m_len; }

    bool IsEmpty() const { return GetDataLen() == 0; }

    void SetBufSize(size_t size) { m_bufdata->ResizeIfNeeded(size); }
    void SetDataLen(size_t len)
    {
        do { if ( len <= m_bufdata->m_size ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/buffer.h", 558, __FUNCTION__, "len <= m_bufdata->m_size", (const char*)
# 558 "/usr/include/wx-3.1-unofficial/wx/buffer.h" 3 4
       __null
# 558 "/usr/include/wx-3.1-unofficial/wx/buffer.h"
       ), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );
        m_bufdata->m_len = len;
    }

    void Clear() { SetDataLen(0); }


    void *GetWriteBuf(size_t sizeNeeded)
    {
        m_bufdata->ResizeIfNeeded(sizeNeeded);
        return m_bufdata->m_data;
    }


    void UngetWriteBuf(size_t sizeUsed) { SetDataLen(sizeUsed); }


    void *GetAppendBuf(size_t sizeNeeded)
    {
        m_bufdata->ResizeIfNeeded(m_bufdata->m_len + sizeNeeded);
        return (char*)m_bufdata->m_data + m_bufdata->m_len;
    }


    void UngetAppendBuf(size_t sizeUsed)
    {
        SetDataLen(m_bufdata->m_len + sizeUsed);
    }


    void AppendByte(char data)
    {
        if ( m_bufdata->m_data ) {} else { do { if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/buffer.h", 590, __FUNCTION__, "\"m_bufdata->m_data\"", L"invalid wxMemoryBuffer"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); return; } struct wxDummyCheckStruct590;

        m_bufdata->ResizeIfNeeded(m_bufdata->m_len + 1);
        *(((char*)m_bufdata->m_data) + m_bufdata->m_len) = data;
        m_bufdata->m_len += 1;
    }

    void AppendData(const void *data, size_t len)
    {
        memcpy(GetAppendBuf(len), data, len);
        UngetAppendBuf(len);
    }

    operator const char *() const { return (const char*)GetData(); }



    void *release()
    {
        return m_bufdata->release();
    }

private:
    wxMemoryBufferData* m_bufdata;
};
# 18 "/usr/include/wx-3.1-unofficial/wx/strconv.h" 2

# 1 "/usr/include/c++/10/stdlib.h" 1 3
# 20 "/usr/include/wx-3.1-unofficial/wx/strconv.h" 2

class wxString;
# 41 "/usr/include/wx-3.1-unofficial/wx/strconv.h"
class __attribute__ ((visibility("default"))) wxMBConv
{
public:
# 69 "/usr/include/wx-3.1-unofficial/wx/strconv.h"
    virtual size_t ToWChar(wchar_t *dst, size_t dstLen,
                           const char *src, size_t srcLen = ((size_t)-1)) const;

    virtual size_t FromWChar(char *dst, size_t dstLen,
                             const wchar_t *src, size_t srcLen = ((size_t)-1)) const;





    wxWCharBuffer cMB2WC(const char *in) const
        { return DoConvertMB2WC(in, ((size_t)-1)); }
    wxCharBuffer cWC2MB(const wchar_t *in) const
        { return DoConvertWC2MB(in, ((size_t)-1)); }

    wxWCharBuffer cMB2WC(const wxScopedCharBuffer& in) const
        { return DoConvertMB2WC(in, in.length()); }
    wxCharBuffer cWC2MB(const wxScopedWCharBuffer& in) const
        { return DoConvertWC2MB(in, in.length()); }
# 105 "/usr/include/wx-3.1-unofficial/wx/strconv.h"
    wxWCharBuffer
        cMB2WC(const char *in, size_t inLen, size_t *outLen) const;
    wxCharBuffer
        cWC2MB(const wchar_t *in, size_t inLen, size_t *outLen) const;



    wxWCharBuffer cMB2WX(const char *psz) const { return cMB2WC(psz); }
    wxCharBuffer cWX2MB(const wchar_t *psz) const { return cWC2MB(psz); }
    const wchar_t* cWC2WX(const wchar_t *psz) const { return psz; }
    const wchar_t* cWX2WC(const wchar_t *psz) const { return psz; }
# 125 "/usr/include/wx-3.1-unofficial/wx/strconv.h"
    virtual size_t GetMaxCharLen() const { return 1; }
# 138 "/usr/include/wx-3.1-unofficial/wx/strconv.h"
    virtual size_t GetMBNulLen() const { return 1; }



    static size_t GetMaxMBNulLen() { return 4 ; }




    virtual bool IsUTF8() const { return false; }
# 165 "/usr/include/wx-3.1-unofficial/wx/strconv.h"
    virtual size_t MB2WC(wchar_t *out, const char *in, size_t outLen) const;
    virtual size_t WC2MB(char *out, const wchar_t *in, size_t outLen) const;



    virtual wxMBConv *Clone() const = 0;


    virtual ~wxMBConv() { }

private:

    wxCharBuffer DoConvertWC2MB(const wchar_t* pwz, size_t srcLen) const;
    wxWCharBuffer DoConvertMB2WC(const char* psz, size_t srcLen) const;
};






class __attribute__ ((visibility("default"))) wxMBConvLibc : public wxMBConv
{
public:
    virtual size_t MB2WC(wchar_t *outputBuf, const char *psz, size_t outputSize) const override;
    virtual size_t WC2MB(char *outputBuf, const wchar_t *psz, size_t outputSize) const override;

    virtual wxMBConv *Clone() const override { return new wxMBConvLibc; }

    virtual bool IsUTF8() const override { return wxLocaleIsUtf8; }
};
# 206 "/usr/include/wx-3.1-unofficial/wx/strconv.h"
class __attribute__ ((visibility("default"))) wxConvBrokenFileNames : public wxMBConv
{
public:
    wxConvBrokenFileNames(const wxString& charset);
    wxConvBrokenFileNames(const wxConvBrokenFileNames& conv)
        : wxMBConv(),
          m_conv(conv.m_conv ? conv.m_conv->Clone() : 
# 212 "/usr/include/wx-3.1-unofficial/wx/strconv.h" 3 4
                                                     __null
# 212 "/usr/include/wx-3.1-unofficial/wx/strconv.h"
                                                         )
    {
    }
    virtual ~wxConvBrokenFileNames() { delete m_conv; }

    virtual size_t MB2WC(wchar_t *out, const char *in, size_t outLen) const override
    {
        return m_conv->MB2WC(out, in, outLen);
    }

    virtual size_t WC2MB(char *out, const wchar_t *in, size_t outLen) const override
    {
        return m_conv->WC2MB(out, in, outLen);
    }

    virtual size_t GetMBNulLen() const override
    {

        return m_conv->GetMBNulLen();
    }

    virtual bool IsUTF8() const override { return m_conv->IsUTF8(); }

    virtual wxMBConv *Clone() const override { return new wxConvBrokenFileNames(*this); }

private:

    wxMBConv *m_conv;

    private: wxConvBrokenFileNames& operator=(const wxConvBrokenFileNames&) = delete;
};







class __attribute__ ((visibility("default"))) wxMBConvUTF7 : public wxMBConv
{
public:
    wxMBConvUTF7() { }




    virtual size_t ToWChar(wchar_t *dst, size_t dstLen,
                           const char *src, size_t srcLen = ((size_t)-1)) const override;
    virtual size_t FromWChar(char *dst, size_t dstLen,
                             const wchar_t *src, size_t srcLen = ((size_t)-1)) const override;

    virtual size_t GetMaxCharLen() const override { return 4; }

    virtual wxMBConv *Clone() const override { return new wxMBConvUTF7; }

private:


    struct StateMode
    {
        enum Mode
        {
            Direct,
            Shifted
        };
    };




    class DecoderState : private StateMode
    {
    private:


        Mode mode;

    public:

        DecoderState() { mode = Direct; accum = bit = msb = 0; isLSB = false; }


        void ToDirect() { mode = Direct; }
        void ToShifted() { mode = Shifted; accum = bit = 0; isLSB = false; }

        bool IsDirect() const { return mode == Direct; }
        bool IsShifted() const { return mode == Shifted; }




        unsigned int accum;
        unsigned int bit;
        unsigned char msb;
        bool isLSB;
    };

    DecoderState m_stateDecoder;




    class EncoderState : private StateMode
    {
    private:
        Mode mode;

    public:
        EncoderState() { mode = Direct; accum = bit = 0; }

        void ToDirect() { mode = Direct; }
        void ToShifted() { mode = Shifted; accum = bit = 0; }

        bool IsDirect() const { return mode == Direct; }
        bool IsShifted() const { return mode == Shifted; }

        unsigned int accum;
        unsigned int bit;
    };

    EncoderState m_stateEncoder;
};
# 342 "/usr/include/wx-3.1-unofficial/wx/strconv.h"
class __attribute__ ((visibility("default"))) wxMBConvStrictUTF8 : public wxMBConv
{
public:


    virtual size_t ToWChar(wchar_t *dst, size_t dstLen,
                           const char *src, size_t srcLen = ((size_t)-1)) const override;
    virtual size_t FromWChar(char *dst, size_t dstLen,
                             const wchar_t *src, size_t srcLen = ((size_t)-1)) const override;

    virtual size_t GetMaxCharLen() const override { return 4; }

    virtual wxMBConv *Clone() const override { return new wxMBConvStrictUTF8(); }



    virtual bool IsUTF8() const override { return true; }
};

class __attribute__ ((visibility("default"))) wxMBConvUTF8 : public wxMBConvStrictUTF8
{
public:
    enum
    {
        MAP_INVALID_UTF8_NOT = 0,
        MAP_INVALID_UTF8_TO_PUA = 1,
        MAP_INVALID_UTF8_TO_OCTAL = 2
    };

    wxMBConvUTF8(int options = MAP_INVALID_UTF8_NOT) : m_options(options) { }

    virtual size_t ToWChar(wchar_t *dst, size_t dstLen,
                           const char *src, size_t srcLen = ((size_t)-1)) const override;
    virtual size_t FromWChar(char *dst, size_t dstLen,
                             const wchar_t *src, size_t srcLen = ((size_t)-1)) const override;

    virtual size_t GetMaxCharLen() const override { return 4; }

    virtual wxMBConv *Clone() const override { return new wxMBConvUTF8(m_options); }



    virtual bool IsUTF8() const override { return m_options == MAP_INVALID_UTF8_NOT; }

private:
    int m_options;
};





class __attribute__ ((visibility("default"))) wxMBConvUTF16Base : public wxMBConv
{
public:
    enum { BYTES_PER_CHAR = 2 };

    virtual size_t GetMBNulLen() const override { return BYTES_PER_CHAR; }

protected:




    static size_t GetLength(const char *src, size_t srcLen);
};





class __attribute__ ((visibility("default"))) wxMBConvUTF16LE : public wxMBConvUTF16Base
{
public:
    virtual size_t ToWChar(wchar_t *dst, size_t dstLen,
                           const char *src, size_t srcLen = ((size_t)-1)) const override;
    virtual size_t FromWChar(char *dst, size_t dstLen,
                             const wchar_t *src, size_t srcLen = ((size_t)-1)) const override;
    virtual size_t GetMaxCharLen() const override { return 4; }
    virtual wxMBConv *Clone() const override { return new wxMBConvUTF16LE; }
};





class __attribute__ ((visibility("default"))) wxMBConvUTF16BE : public wxMBConvUTF16Base
{
public:
    virtual size_t ToWChar(wchar_t *dst, size_t dstLen,
                           const char *src, size_t srcLen = ((size_t)-1)) const override;
    virtual size_t FromWChar(char *dst, size_t dstLen,
                             const wchar_t *src, size_t srcLen = ((size_t)-1)) const override;
    virtual size_t GetMaxCharLen() const override { return 4; }
    virtual wxMBConv *Clone() const override { return new wxMBConvUTF16BE; }
};





class __attribute__ ((visibility("default"))) wxMBConvUTF32Base : public wxMBConv
{
public:
    enum { BYTES_PER_CHAR = 4 };

    virtual size_t GetMBNulLen() const override { return BYTES_PER_CHAR; }

protected:



    static size_t GetLength(const char *src, size_t srcLen);
};





class __attribute__ ((visibility("default"))) wxMBConvUTF32LE : public wxMBConvUTF32Base
{
public:
    virtual size_t ToWChar(wchar_t *dst, size_t dstLen,
                           const char *src, size_t srcLen = ((size_t)-1)) const override;
    virtual size_t FromWChar(char *dst, size_t dstLen,
                             const wchar_t *src, size_t srcLen = ((size_t)-1)) const override;
    virtual size_t GetMaxCharLen() const override { return 4; }
    virtual wxMBConv *Clone() const override { return new wxMBConvUTF32LE; }
};





class __attribute__ ((visibility("default"))) wxMBConvUTF32BE : public wxMBConvUTF32Base
{
public:
    virtual size_t ToWChar(wchar_t *dst, size_t dstLen,
                           const char *src, size_t srcLen = ((size_t)-1)) const override;
    virtual size_t FromWChar(char *dst, size_t dstLen,
                             const wchar_t *src, size_t srcLen = ((size_t)-1)) const override;
    virtual size_t GetMaxCharLen() const override { return 4; }
    virtual wxMBConv *Clone() const override { return new wxMBConvUTF32BE; }
};





# 1 "/usr/include/wx-3.1-unofficial/wx/fontenc.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/fontenc.h"
enum wxFontEncoding
{
    wxFONTENCODING_SYSTEM = -1,
    wxFONTENCODING_DEFAULT,


    wxFONTENCODING_ISO8859_1,
    wxFONTENCODING_ISO8859_2,
    wxFONTENCODING_ISO8859_3,
    wxFONTENCODING_ISO8859_4,
    wxFONTENCODING_ISO8859_5,
    wxFONTENCODING_ISO8859_6,
    wxFONTENCODING_ISO8859_7,
    wxFONTENCODING_ISO8859_8,
    wxFONTENCODING_ISO8859_9,
    wxFONTENCODING_ISO8859_10,
    wxFONTENCODING_ISO8859_11,
    wxFONTENCODING_ISO8859_12,


    wxFONTENCODING_ISO8859_13,
    wxFONTENCODING_ISO8859_14,
    wxFONTENCODING_ISO8859_15,
    wxFONTENCODING_ISO8859_MAX,


    wxFONTENCODING_KOI8,
    wxFONTENCODING_KOI8_U,
    wxFONTENCODING_ALTERNATIVE,
    wxFONTENCODING_BULGARIAN,



    wxFONTENCODING_CP437,
    wxFONTENCODING_CP850,
    wxFONTENCODING_CP852,
    wxFONTENCODING_CP855,
    wxFONTENCODING_CP866,

    wxFONTENCODING_CP874,
    wxFONTENCODING_CP932,
    wxFONTENCODING_CP936,
    wxFONTENCODING_CP949,
    wxFONTENCODING_CP950,
    wxFONTENCODING_CP1250,
    wxFONTENCODING_CP1251,
    wxFONTENCODING_CP1252,
    wxFONTENCODING_CP1253,
    wxFONTENCODING_CP1254,
    wxFONTENCODING_CP1255,
    wxFONTENCODING_CP1256,
    wxFONTENCODING_CP1257,
    wxFONTENCODING_CP1258,
    wxFONTENCODING_CP1361,
    wxFONTENCODING_CP12_MAX,

    wxFONTENCODING_UTF7,
    wxFONTENCODING_UTF8,
    wxFONTENCODING_EUC_JP,
    wxFONTENCODING_UTF16BE,
    wxFONTENCODING_UTF16LE,
    wxFONTENCODING_UTF32BE,
    wxFONTENCODING_UTF32LE,

    wxFONTENCODING_MACROMAN,
    wxFONTENCODING_MACJAPANESE,
    wxFONTENCODING_MACCHINESETRAD,
    wxFONTENCODING_MACKOREAN,
    wxFONTENCODING_MACARABIC,
    wxFONTENCODING_MACHEBREW,
    wxFONTENCODING_MACGREEK,
    wxFONTENCODING_MACCYRILLIC,
    wxFONTENCODING_MACDEVANAGARI,
    wxFONTENCODING_MACGURMUKHI,
    wxFONTENCODING_MACGUJARATI,
    wxFONTENCODING_MACORIYA,
    wxFONTENCODING_MACBENGALI,
    wxFONTENCODING_MACTAMIL,
    wxFONTENCODING_MACTELUGU,
    wxFONTENCODING_MACKANNADA,
    wxFONTENCODING_MACMALAJALAM,
    wxFONTENCODING_MACSINHALESE,
    wxFONTENCODING_MACBURMESE,
    wxFONTENCODING_MACKHMER,
    wxFONTENCODING_MACTHAI,
    wxFONTENCODING_MACLAOTIAN,
    wxFONTENCODING_MACGEORGIAN,
    wxFONTENCODING_MACARMENIAN,
    wxFONTENCODING_MACCHINESESIMP,
    wxFONTENCODING_MACTIBETAN,
    wxFONTENCODING_MACMONGOLIAN,
    wxFONTENCODING_MACETHIOPIC,
    wxFONTENCODING_MACCENTRALEUR,
    wxFONTENCODING_MACVIATNAMESE,
    wxFONTENCODING_MACARABICEXT,
    wxFONTENCODING_MACSYMBOL,
    wxFONTENCODING_MACDINGBATS,
    wxFONTENCODING_MACTURKISH,
    wxFONTENCODING_MACCROATIAN,
    wxFONTENCODING_MACICELANDIC,
    wxFONTENCODING_MACROMANIAN,
    wxFONTENCODING_MACCELTIC,
    wxFONTENCODING_MACGAELIC,
    wxFONTENCODING_MACKEYBOARD,



    wxFONTENCODING_ISO2022_JP,

    wxFONTENCODING_MAX,

    wxFONTENCODING_MACMIN = wxFONTENCODING_MACROMAN ,
    wxFONTENCODING_MACMAX = wxFONTENCODING_MACKEYBOARD ,






    wxFONTENCODING_UTF16 = wxFONTENCODING_UTF16LE,
    wxFONTENCODING_UTF32 = wxFONTENCODING_UTF32LE,







    wxFONTENCODING_UNICODE = wxFONTENCODING_UTF32,




    wxFONTENCODING_GB2312 = wxFONTENCODING_CP936,
    wxFONTENCODING_BIG5 = wxFONTENCODING_CP950,


    wxFONTENCODING_SHIFT_JIS = wxFONTENCODING_CP932,


    wxFONTENCODING_EUC_KR = wxFONTENCODING_CP949,
    wxFONTENCODING_JOHAB = wxFONTENCODING_CP1361,


    wxFONTENCODING_VIETNAMESE = wxFONTENCODING_CP1258
};
# 492 "/usr/include/wx-3.1-unofficial/wx/strconv.h" 2

class __attribute__ ((visibility("default"))) wxCSConv : public wxMBConv
{
public:


    wxCSConv(const wxString& charset);
    wxCSConv(wxFontEncoding encoding);

    wxCSConv(const wxCSConv& conv);
    virtual ~wxCSConv();

    wxCSConv& operator=(const wxCSConv& conv);

    virtual size_t ToWChar(wchar_t *dst, size_t dstLen,
                           const char *src, size_t srcLen = ((size_t)-1)) const override;
    virtual size_t FromWChar(char *dst, size_t dstLen,
                             const wchar_t *src, size_t srcLen = ((size_t)-1)) const override;
    virtual size_t GetMBNulLen() const override;

    virtual bool IsUTF8() const override;

    virtual wxMBConv *Clone() const override { return new wxCSConv(*this); }

    void Clear();


    bool IsOk() const;

private:

    void Init();



    wxMBConv *DoCreate() const;



    void SetName(const char *charset);






    void SetEncoding(wxFontEncoding encoding);
# 549 "/usr/include/wx-3.1-unofficial/wx/strconv.h"
    char *m_name;
    wxFontEncoding m_encoding;



    wxMBConv *m_convReal;
};





class __attribute__ ((visibility("default"))) wxWhateverWorksConv : public wxMBConv
{
public:
    wxWhateverWorksConv()
    {
    }






    virtual size_t
    ToWChar(wchar_t *dst, size_t dstLen,
            const char *src, size_t srcLen = ((size_t)-1)) const override;





    virtual size_t
    FromWChar(char *dst, size_t dstLen,
              const wchar_t *src, size_t srcLen = ((size_t)-1)) const override;



    virtual size_t GetMaxCharLen() const override { return 4; }

    virtual wxMBConv *Clone() const override
    {
        return new wxWhateverWorksConv();
    }
};
# 616 "/usr/include/wx-3.1-unofficial/wx/strconv.h"
extern __attribute__ ((visibility("default"))) wxMBConv* wxConvLibcPtr; extern __attribute__ ((visibility("default"))) wxMBConv* wxGet_wxConvLibcPtr(); inline wxMBConv& wxGet_wxConvLibc() { if ( !wxConvLibcPtr ) wxConvLibcPtr = wxGet_wxConvLibcPtr(); return *wxConvLibcPtr; }



extern __attribute__ ((visibility("default"))) wxCSConv* wxConvISO8859_1Ptr; extern __attribute__ ((visibility("default"))) wxCSConv* wxGet_wxConvISO8859_1Ptr(); inline wxCSConv& wxGet_wxConvISO8859_1() { if ( !wxConvISO8859_1Ptr ) wxConvISO8859_1Ptr = wxGet_wxConvISO8859_1Ptr(); return *wxConvISO8859_1Ptr; }


extern __attribute__ ((visibility("default"))) wxMBConvStrictUTF8* wxConvUTF8Ptr; extern __attribute__ ((visibility("default"))) wxMBConvStrictUTF8* wxGet_wxConvUTF8Ptr(); inline wxMBConvStrictUTF8& wxGet_wxConvUTF8() { if ( !wxConvUTF8Ptr ) wxConvUTF8Ptr = wxGet_wxConvUTF8Ptr(); return *wxConvUTF8Ptr; }


extern __attribute__ ((visibility("default"))) wxMBConvUTF7* wxConvUTF7Ptr; extern __attribute__ ((visibility("default"))) wxMBConvUTF7* wxGet_wxConvUTF7Ptr(); inline wxMBConvUTF7& wxGet_wxConvUTF7() { if ( !wxConvUTF7Ptr ) wxConvUTF7Ptr = wxGet_wxConvUTF7Ptr(); return *wxConvUTF7Ptr; }





extern __attribute__ ((visibility("default"))) wxWhateverWorksConv* wxConvWhateverWorksPtr; extern __attribute__ ((visibility("default"))) wxWhateverWorksConv* wxGet_wxConvWhateverWorksPtr(); inline wxWhateverWorksConv& wxGet_wxConvWhateverWorks() { if ( !wxConvWhateverWorksPtr ) wxConvWhateverWorksPtr = wxGet_wxConvWhateverWorksPtr(); return *wxConvWhateverWorksPtr; }
# 642 "/usr/include/wx-3.1-unofficial/wx/strconv.h"
extern __attribute__ ((visibility("default"))) wxMBConv * wxConvFileName;






extern __attribute__ ((visibility("default"))) wxMBConv * wxConvCurrent;


extern __attribute__ ((visibility("default"))) wxCSConv* wxConvLocalPtr; extern __attribute__ ((visibility("default"))) wxCSConv* wxGet_wxConvLocalPtr(); inline wxCSConv& wxGet_wxConvLocal() { if ( !wxConvLocalPtr ) wxConvLocalPtr = wxGet_wxConvLocalPtr(); return *wxConvLocalPtr; }






extern __attribute__ ((visibility("default"))) wxMBConv * wxConvUI;
# 671 "/usr/include/wx-3.1-unofficial/wx/strconv.h"
    typedef wxMBConvUTF16LE wxMBConvUTF16;
    typedef wxMBConvUTF32LE wxMBConvUTF32;
# 705 "/usr/include/wx-3.1-unofficial/wx/strconv.h"
    inline wxWCharBuffer wxSafeConvertMB2WX(const char *s)
    {
        return wxGet_wxConvWhateverWorks().cMB2WC(s);
    }

    inline wxCharBuffer wxSafeConvertWX2MB(const wchar_t *ws)
    {
        return wxGet_wxConvWhateverWorks().cWC2MB(ws);
    }
# 18 "/usr/include/wx-3.1-unofficial/wx/strvararg.h" 2

# 1 "/usr/include/wx-3.1-unofficial/wx/unichar.h" 1
# 13 "/usr/include/wx-3.1-unofficial/wx/unichar.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/unichar.h" 2

# 1 "/usr/include/wx-3.1-unofficial/wx/stringimpl.h" 1
# 24 "/usr/include/wx-3.1-unofficial/wx/stringimpl.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 25 "/usr/include/wx-3.1-unofficial/wx/stringimpl.h" 2



# 1 "/usr/include/c++/10/stdlib.h" 1 3
# 29 "/usr/include/wx-3.1-unofficial/wx/stringimpl.h" 2
# 44 "/usr/include/wx-3.1-unofficial/wx/stringimpl.h"
extern __attribute__ ((visibility("default"))) const wxChar* wxEmptyString;
# 65 "/usr/include/wx-3.1-unofficial/wx/stringimpl.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/beforestd.h" 1
# 66 "/usr/include/wx-3.1-unofficial/wx/stringimpl.h" 2
# 1 "/usr/include/c++/10/string" 1 3
# 36 "/usr/include/c++/10/string" 3
       
# 37 "/usr/include/c++/10/string" 3


# 1 "/usr/include/c++/10/bits/stringfwd.h" 1 3
# 37 "/usr/include/c++/10/bits/stringfwd.h" 3
       
# 38 "/usr/include/c++/10/bits/stringfwd.h" 3


# 1 "/usr/include/c++/10/bits/memoryfwd.h" 1 3
# 46 "/usr/include/c++/10/bits/memoryfwd.h" 3
       
# 47 "/usr/include/c++/10/bits/memoryfwd.h" 3




# 50 "/usr/include/c++/10/bits/memoryfwd.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 63 "/usr/include/c++/10/bits/memoryfwd.h" 3
  template<typename>
    class allocator;


  template<>
    class allocator<void>;




  template<typename, typename>
    struct uses_allocator;





}
# 41 "/usr/include/c++/10/bits/stringfwd.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{








  template<class _CharT>
    struct char_traits;

  template<> struct char_traits<char>;


  template<> struct char_traits<wchar_t>;







  template<> struct char_traits<char16_t>;
  template<> struct char_traits<char32_t>;


namespace __cxx11 {

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
           typename _Alloc = allocator<_CharT> >
    class basic_string;

}


  typedef basic_string<char> string;



  typedef basic_string<wchar_t> wstring;
# 93 "/usr/include/c++/10/bits/stringfwd.h" 3
  typedef basic_string<char16_t> u16string;


  typedef basic_string<char32_t> u32string;





}
# 40 "/usr/include/c++/10/string" 2 3
# 1 "/usr/include/c++/10/bits/char_traits.h" 1 3
# 37 "/usr/include/c++/10/bits/char_traits.h" 3
       
# 38 "/usr/include/c++/10/bits/char_traits.h" 3

# 1 "/usr/include/c++/10/bits/stl_algobase.h" 1 3
# 60 "/usr/include/c++/10/bits/stl_algobase.h" 3
# 1 "/usr/include/c++/10/bits/functexcept.h" 1 3
# 40 "/usr/include/c++/10/bits/functexcept.h" 3
# 1 "/usr/include/c++/10/bits/exception_defines.h" 1 3
# 41 "/usr/include/c++/10/bits/functexcept.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  void
  __throw_bad_exception(void) __attribute__((__noreturn__));


  void
  __throw_bad_alloc(void) __attribute__((__noreturn__));


  void
  __throw_bad_cast(void) __attribute__((__noreturn__));

  void
  __throw_bad_typeid(void) __attribute__((__noreturn__));


  void
  __throw_logic_error(const char*) __attribute__((__noreturn__));

  void
  __throw_domain_error(const char*) __attribute__((__noreturn__));

  void
  __throw_invalid_argument(const char*) __attribute__((__noreturn__));

  void
  __throw_length_error(const char*) __attribute__((__noreturn__));

  void
  __throw_out_of_range(const char*) __attribute__((__noreturn__));

  void
  __throw_out_of_range_fmt(const char*, ...) __attribute__((__noreturn__))
    __attribute__((__format__(__gnu_printf__, 1, 2)));

  void
  __throw_runtime_error(const char*) __attribute__((__noreturn__));

  void
  __throw_range_error(const char*) __attribute__((__noreturn__));

  void
  __throw_overflow_error(const char*) __attribute__((__noreturn__));

  void
  __throw_underflow_error(const char*) __attribute__((__noreturn__));


  void
  __throw_ios_failure(const char*) __attribute__((__noreturn__));

  void
  __throw_ios_failure(const char*, int) __attribute__((__noreturn__));


  void
  __throw_system_error(int) __attribute__((__noreturn__));


  void
  __throw_future_error(int) __attribute__((__noreturn__));


  void
  __throw_bad_function_call() __attribute__((__noreturn__));


}
# 61 "/usr/include/c++/10/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/10/bits/cpp_type_traits.h" 1 3
# 35 "/usr/include/c++/10/bits/cpp_type_traits.h" 3
       
# 36 "/usr/include/c++/10/bits/cpp_type_traits.h" 3
# 67 "/usr/include/c++/10/bits/cpp_type_traits.h" 3
extern "C++" {

namespace std __attribute__ ((__visibility__ ("default")))
{


  struct __true_type { };
  struct __false_type { };

  template<bool>
    struct __truth_type
    { typedef __false_type __type; };

  template<>
    struct __truth_type<true>
    { typedef __true_type __type; };



  template<class _Sp, class _Tp>
    struct __traitor
    {
      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };
      typedef typename __truth_type<__value>::__type __type;
    };


  template<typename, typename>
    struct __are_same
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __are_same<_Tp, _Tp>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_void
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_void<void>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_integer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };





  template<>
    struct __is_integer<bool>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 184 "/usr/include/c++/10/bits/cpp_type_traits.h" 3
  template<>
    struct __is_integer<char16_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char32_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 270 "/usr/include/c++/10/bits/cpp_type_traits.h" 3
template<> struct __is_integer<__int128> { enum { __value = 1 }; typedef __true_type __type; }; template<> struct __is_integer<unsigned __int128> { enum { __value = 1 }; typedef __true_type __type; };
# 287 "/usr/include/c++/10/bits/cpp_type_traits.h" 3
  template<typename _Tp>
    struct __is_floating
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };


  template<>
    struct __is_floating<float>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<long double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_pointer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __is_pointer<_Tp*>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_arithmetic
    : public __traitor<__is_integer<_Tp>, __is_floating<_Tp> >
    { };




  template<typename _Tp>
    struct __is_scalar
    : public __traitor<__is_arithmetic<_Tp>, __is_pointer<_Tp> >
    { };




  template<typename _Tp>
    struct __is_char
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_char<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_char<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_byte
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_byte<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 423 "/usr/include/c++/10/bits/cpp_type_traits.h" 3
  template<typename> struct iterator_traits;


  template<typename _Tp>
    struct __is_nonvolatile_trivially_copyable
    {
      enum { __value = __is_trivially_copyable(_Tp) };
    };




  template<typename _Tp>
    struct __is_nonvolatile_trivially_copyable<volatile _Tp>
    {
      enum { __value = 0 };
    };


  template<typename _OutputIter, typename _InputIter>
    struct __memcpyable
    {
      enum { __value = 0 };
    };

  template<typename _Tp>
    struct __memcpyable<_Tp*, _Tp*>
    : __is_nonvolatile_trivially_copyable<_Tp>
    { };

  template<typename _Tp>
    struct __memcpyable<_Tp*, const _Tp*>
    : __is_nonvolatile_trivially_copyable<_Tp>
    { };






  template<typename _Iter1, typename _Iter2>
    struct __memcmpable
    {
      enum { __value = 0 };
    };


  template<typename _Tp>
    struct __memcmpable<_Tp*, _Tp*>
    : __is_nonvolatile_trivially_copyable<_Tp>
    { };

  template<typename _Tp>
    struct __memcmpable<const _Tp*, _Tp*>
    : __is_nonvolatile_trivially_copyable<_Tp>
    { };

  template<typename _Tp>
    struct __memcmpable<_Tp*, const _Tp*>
    : __is_nonvolatile_trivially_copyable<_Tp>
    { };




  template<typename _Tp, bool _TreatAsBytes = __is_byte<_Tp>::__value>
    struct __is_memcmp_ordered
    {
      static const bool __value = _Tp(-1) > _Tp(1);
    };

  template<typename _Tp>
    struct __is_memcmp_ordered<_Tp, false>
    {
      static const bool __value = false;
    };


  template<typename _Tp, typename _Up, bool = sizeof(_Tp) == sizeof(_Up)>
    struct __is_memcmp_ordered_with
    {
      static const bool __value = __is_memcmp_ordered<_Tp>::__value
 && __is_memcmp_ordered<_Up>::__value;
    };

  template<typename _Tp, typename _Up>
    struct __is_memcmp_ordered_with<_Tp, _Up, false>
    {
      static const bool __value = false;
    };
# 532 "/usr/include/c++/10/bits/cpp_type_traits.h" 3
  template<typename _Tp>
    struct __is_move_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };



  template<typename _Iterator>
   
    inline _Iterator
    __miter_base(_Iterator __it)
    { return __it; }


}
}
# 62 "/usr/include/c++/10/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/10/ext/type_traits.h" 1 3
# 32 "/usr/include/c++/10/ext/type_traits.h" 3
       
# 33 "/usr/include/c++/10/ext/type_traits.h" 3




extern "C++" {

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  template<bool, typename>
    struct __enable_if
    { };

  template<typename _Tp>
    struct __enable_if<true, _Tp>
    { typedef _Tp __type; };



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct __conditional_type
    { typedef _Iftrue __type; };

  template<typename _Iftrue, typename _Iffalse>
    struct __conditional_type<false, _Iftrue, _Iffalse>
    { typedef _Iffalse __type; };



  template<typename _Tp>
    struct __add_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __add_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __add_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __add_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __add_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __add_unsigned<bool>;

  template<>
    struct __add_unsigned<wchar_t>;



  template<typename _Tp>
    struct __remove_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __remove_unsigned<char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned short>
    { typedef short __type; };

  template<>
    struct __remove_unsigned<unsigned int>
    { typedef int __type; };

  template<>
    struct __remove_unsigned<unsigned long>
    { typedef long __type; };

  template<>
    struct __remove_unsigned<unsigned long long>
    { typedef long long __type; };


  template<>
    struct __remove_unsigned<bool>;

  template<>
    struct __remove_unsigned<wchar_t>;



  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
    { return __ptr == 0; }

  template<typename _Type>
    inline bool
    __is_null_pointer(_Type)
    { return false; }


  inline bool
  __is_null_pointer(std::nullptr_t)
  { return true; }



  template<typename _Tp, bool = std::__is_integer<_Tp>::__value>
    struct __promote
    { typedef double __type; };




  template<typename _Tp>
    struct __promote<_Tp, false>
    { };

  template<>
    struct __promote<long double>
    { typedef long double __type; };

  template<>
    struct __promote<double>
    { typedef double __type; };

  template<>
    struct __promote<float>
    { typedef float __type; };

  template<typename _Tp, typename _Up,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type>
    struct __promote_2
    {
      typedef __typeof__(_Tp2() + _Up2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type>
    struct __promote_3
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp, typename _Wp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type,
           typename _Wp2 = typename __promote<_Wp>::__type>
    struct __promote_4
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2() + _Wp2()) __type;
    };


}
}
# 63 "/usr/include/c++/10/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/10/ext/numeric_traits.h" 1 3
# 32 "/usr/include/c++/10/ext/numeric_traits.h" 3
       
# 33 "/usr/include/c++/10/ext/numeric_traits.h" 3




namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{

# 50 "/usr/include/c++/10/ext/numeric_traits.h" 3
  template<typename _Tp>
    struct __is_integer_nonstrict
    : public std::__is_integer<_Tp>
    {
      using std::__is_integer<_Tp>::__value;


      enum { __width = __value ? sizeof(_Tp) * 8 : 0 };
    };

  template<typename _Value>
    struct __numeric_traits_integer
    {

      static_assert(__is_integer_nonstrict<_Value>::__value,
      "invalid specialization");




      static const bool __is_signed = (_Value)(-1) < 0;
      static const int __digits
 = __is_integer_nonstrict<_Value>::__width - __is_signed;


      static const _Value __max = __is_signed
 ? (((((_Value)1 << (__digits - 1)) - 1) << 1) + 1)
 : ~(_Value)0;
      static const _Value __min = __is_signed ? -__max - 1 : (_Value)0;
    };

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__min;

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__max;

  template<typename _Value>
    const bool __numeric_traits_integer<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_integer<_Value>::__digits;
# 135 "/usr/include/c++/10/ext/numeric_traits.h" 3
  template<typename _Tp>
    using __int_traits = __numeric_traits_integer<_Tp>;
# 155 "/usr/include/c++/10/ext/numeric_traits.h" 3
  template<typename _Value>
    struct __numeric_traits_floating
    {

      static const int __max_digits10 = (2 + (std::__are_same<_Value, float>::__value ? 24 : std::__are_same<_Value, double>::__value ? 53 : 64) * 643L / 2136);


      static const bool __is_signed = true;
      static const int __digits10 = (std::__are_same<_Value, float>::__value ? 6 : std::__are_same<_Value, double>::__value ? 15 : 18);
      static const int __max_exponent10 = (std::__are_same<_Value, float>::__value ? 38 : std::__are_same<_Value, double>::__value ? 308 : 4932);
    };

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_digits10;

  template<typename _Value>
    const bool __numeric_traits_floating<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__digits10;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_exponent10;

  template<typename _Value>
    struct __numeric_traits
    : public __conditional_type<__is_integer_nonstrict<_Value>::__value,
    __numeric_traits_integer<_Value>,
    __numeric_traits_floating<_Value> >::__type
    { };


}
# 64 "/usr/include/c++/10/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/10/bits/stl_pair.h" 1 3
# 59 "/usr/include/c++/10/bits/stl_pair.h" 3
# 1 "/usr/include/c++/10/bits/move.h" 1 3
# 38 "/usr/include/c++/10/bits/move.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename _Tp>
    inline constexpr _Tp*
    __addressof(_Tp& __r) noexcept
    { return __builtin_addressof(__r); }




}

# 1 "/usr/include/c++/10/type_traits" 1 3
# 32 "/usr/include/c++/10/type_traits" 3
       
# 33 "/usr/include/c++/10/type_traits" 3







namespace std __attribute__ ((__visibility__ ("default")))
{

# 56 "/usr/include/c++/10/type_traits" 3
  template<typename _Tp, _Tp __v>
    struct integral_constant
    {
      static constexpr _Tp value = __v;
      typedef _Tp value_type;
      typedef integral_constant<_Tp, __v> type;
      constexpr operator value_type() const noexcept { return value; }




      constexpr value_type operator()() const noexcept { return value; }

    };

  template<typename _Tp, _Tp __v>
    constexpr _Tp integral_constant<_Tp, __v>::value;


  typedef integral_constant<bool, true> true_type;


  typedef integral_constant<bool, false> false_type;

  template<bool __v>
    using __bool_constant = integral_constant<bool, __v>;
# 91 "/usr/include/c++/10/type_traits" 3
  template<bool, typename, typename>
    struct conditional;

  template <typename _Type>
    struct __type_identity
    { using type = _Type; };

  template<typename _Tp>
    using __type_identity_t = typename __type_identity<_Tp>::type;

  template<typename...>
    struct __or_;

  template<>
    struct __or_<>
    : public false_type
    { };

  template<typename _B1>
    struct __or_<_B1>
    : public _B1
    { };

  template<typename _B1, typename _B2>
    struct __or_<_B1, _B2>
    : public conditional<_B1::value, _B1, _B2>::type
    { };

  template<typename _B1, typename _B2, typename _B3, typename... _Bn>
    struct __or_<_B1, _B2, _B3, _Bn...>
    : public conditional<_B1::value, _B1, __or_<_B2, _B3, _Bn...>>::type
    { };

  template<typename...>
    struct __and_;

  template<>
    struct __and_<>
    : public true_type
    { };

  template<typename _B1>
    struct __and_<_B1>
    : public _B1
    { };

  template<typename _B1, typename _B2>
    struct __and_<_B1, _B2>
    : public conditional<_B1::value, _B2, _B1>::type
    { };

  template<typename _B1, typename _B2, typename _B3, typename... _Bn>
    struct __and_<_B1, _B2, _B3, _Bn...>
    : public conditional<_B1::value, __and_<_B2, _B3, _Bn...>, _B1>::type
    { };

  template<typename _Pp>
    struct __not_
    : public __bool_constant<!bool(_Pp::value)>
    { };
# 188 "/usr/include/c++/10/type_traits" 3
  template<typename>
    struct is_reference;
  template<typename>
    struct is_function;
  template<typename>
    struct is_void;
  template<typename>
    struct __is_array_unknown_bounds;




  template <typename _Tp, size_t = sizeof(_Tp)>
    constexpr true_type __is_complete_or_unbounded(__type_identity<_Tp>)
    { return {}; }

  template <typename _TypeIdentity,
      typename _NestedType = typename _TypeIdentity::type>
    constexpr typename __or_<
      is_reference<_NestedType>,
      is_function<_NestedType>,
      is_void<_NestedType>,
      __is_array_unknown_bounds<_NestedType>
    >::type __is_complete_or_unbounded(_TypeIdentity)
    { return {}; }






  template<typename _Tp>
    struct __success_type
    { typedef _Tp type; };

  struct __failure_type
  { };

  template<typename>
    struct remove_cv;


  template<typename _Tp>
    using __remove_cv_t = typename remove_cv<_Tp>::type;

  template<typename>
    struct is_const;



  template<typename>
    struct __is_void_helper
    : public false_type { };

  template<>
    struct __is_void_helper<void>
    : public true_type { };


  template<typename _Tp>
    struct is_void
    : public __is_void_helper<__remove_cv_t<_Tp>>::type
    { };

  template<typename>
    struct __is_integral_helper
    : public false_type { };

  template<>
    struct __is_integral_helper<bool>
    : public true_type { };

  template<>
    struct __is_integral_helper<char>
    : public true_type { };

  template<>
    struct __is_integral_helper<signed char>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned char>
    : public true_type { };


  template<>
    struct __is_integral_helper<wchar_t>
    : public true_type { };
# 284 "/usr/include/c++/10/type_traits" 3
  template<>
    struct __is_integral_helper<char16_t>
    : public true_type { };

  template<>
    struct __is_integral_helper<char32_t>
    : public true_type { };

  template<>
    struct __is_integral_helper<short>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned short>
    : public true_type { };

  template<>
    struct __is_integral_helper<int>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned int>
    : public true_type { };

  template<>
    struct __is_integral_helper<long>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned long>
    : public true_type { };

  template<>
    struct __is_integral_helper<long long>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned long long>
    : public true_type { };




  template<>
    struct __is_integral_helper<__int128>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned __int128>
    : public true_type { };
# 364 "/usr/include/c++/10/type_traits" 3
  template<typename _Tp>
    struct is_integral
    : public __is_integral_helper<__remove_cv_t<_Tp>>::type
    { };

  template<typename>
    struct __is_floating_point_helper
    : public false_type { };

  template<>
    struct __is_floating_point_helper<float>
    : public true_type { };

  template<>
    struct __is_floating_point_helper<double>
    : public true_type { };

  template<>
    struct __is_floating_point_helper<long double>
    : public true_type { };


  template<>
    struct __is_floating_point_helper<__float128>
    : public true_type { };



  template<typename _Tp>
    struct is_floating_point
    : public __is_floating_point_helper<__remove_cv_t<_Tp>>::type
    { };


  template<typename>
    struct is_array
    : public false_type { };

  template<typename _Tp, std::size_t _Size>
    struct is_array<_Tp[_Size]>
    : public true_type { };

  template<typename _Tp>
    struct is_array<_Tp[]>
    : public true_type { };

  template<typename>
    struct __is_pointer_helper
    : public false_type { };

  template<typename _Tp>
    struct __is_pointer_helper<_Tp*>
    : public true_type { };


  template<typename _Tp>
    struct is_pointer
    : public __is_pointer_helper<__remove_cv_t<_Tp>>::type
    { };


  template<typename>
    struct is_lvalue_reference
    : public false_type { };

  template<typename _Tp>
    struct is_lvalue_reference<_Tp&>
    : public true_type { };


  template<typename>
    struct is_rvalue_reference
    : public false_type { };

  template<typename _Tp>
    struct is_rvalue_reference<_Tp&&>
    : public true_type { };

  template<typename>
    struct __is_member_object_pointer_helper
    : public false_type { };

  template<typename _Tp, typename _Cp>
    struct __is_member_object_pointer_helper<_Tp _Cp::*>
    : public __not_<is_function<_Tp>>::type { };


  template<typename _Tp>
    struct is_member_object_pointer
    : public __is_member_object_pointer_helper<__remove_cv_t<_Tp>>::type
    { };

  template<typename>
    struct __is_member_function_pointer_helper
    : public false_type { };

  template<typename _Tp, typename _Cp>
    struct __is_member_function_pointer_helper<_Tp _Cp::*>
    : public is_function<_Tp>::type { };


  template<typename _Tp>
    struct is_member_function_pointer
    : public __is_member_function_pointer_helper<__remove_cv_t<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_enum
    : public integral_constant<bool, __is_enum(_Tp)>
    { };


  template<typename _Tp>
    struct is_union
    : public integral_constant<bool, __is_union(_Tp)>
    { };


  template<typename _Tp>
    struct is_class
    : public integral_constant<bool, __is_class(_Tp)>
    { };


  template<typename _Tp>
    struct is_function
    : public __bool_constant<!is_const<const _Tp>::value> { };

  template<typename _Tp>
    struct is_function<_Tp&>
    : public false_type { };

  template<typename _Tp>
    struct is_function<_Tp&&>
    : public false_type { };



  template<typename>
    struct __is_null_pointer_helper
    : public false_type { };

  template<>
    struct __is_null_pointer_helper<std::nullptr_t>
    : public true_type { };


  template<typename _Tp>
    struct is_null_pointer
    : public __is_null_pointer_helper<__remove_cv_t<_Tp>>::type
    { };


  template<typename _Tp>
    struct __is_nullptr_t
    : public is_null_pointer<_Tp>
    { } __attribute__ ((__deprecated__ ("use '" "std::is_null_pointer" "' instead")));




  template<typename _Tp>
    struct is_reference
    : public __or_<is_lvalue_reference<_Tp>,
                   is_rvalue_reference<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_arithmetic
    : public __or_<is_integral<_Tp>, is_floating_point<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_fundamental
    : public __or_<is_arithmetic<_Tp>, is_void<_Tp>,
     is_null_pointer<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_object
    : public __not_<__or_<is_function<_Tp>, is_reference<_Tp>,
                          is_void<_Tp>>>::type
    { };

  template<typename>
    struct is_member_pointer;


  template<typename _Tp>
    struct is_scalar
    : public __or_<is_arithmetic<_Tp>, is_enum<_Tp>, is_pointer<_Tp>,
                   is_member_pointer<_Tp>, is_null_pointer<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_compound
    : public __not_<is_fundamental<_Tp>>::type { };

  template<typename _Tp>
    struct __is_member_pointer_helper
    : public false_type { };

  template<typename _Tp, typename _Cp>
    struct __is_member_pointer_helper<_Tp _Cp::*>
    : public true_type { };


  template<typename _Tp>
    struct is_member_pointer
    : public __is_member_pointer_helper<__remove_cv_t<_Tp>>::type
    { };

  template<typename, typename>
    struct is_same;

  template<typename _Tp, typename... _Types>
    using __is_one_of = __or_<is_same<_Tp, _Types>...>;


  template<typename _Tp>
    using __is_signed_integer = __is_one_of<__remove_cv_t<_Tp>,
   signed char, signed short, signed int, signed long,
   signed long long

   , signed __int128
# 604 "/usr/include/c++/10/type_traits" 3
   >;


  template<typename _Tp>
    using __is_unsigned_integer = __is_one_of<__remove_cv_t<_Tp>,
   unsigned char, unsigned short, unsigned int, unsigned long,
   unsigned long long

   , unsigned __int128
# 623 "/usr/include/c++/10/type_traits" 3
   >;


  template<typename _Tp>
    using __is_standard_integer
      = __or_<__is_signed_integer<_Tp>, __is_unsigned_integer<_Tp>>;


  template<typename...> using __void_t = void;



  template<typename _Tp, typename = void>
    struct __is_referenceable
    : public false_type
    { };

  template<typename _Tp>
    struct __is_referenceable<_Tp, __void_t<_Tp&>>
    : public true_type
    { };




  template<typename>
    struct is_const
    : public false_type { };

  template<typename _Tp>
    struct is_const<_Tp const>
    : public true_type { };


  template<typename>
    struct is_volatile
    : public false_type { };

  template<typename _Tp>
    struct is_volatile<_Tp volatile>
    : public true_type { };


  template<typename _Tp>
    struct is_trivial
    : public integral_constant<bool, __is_trivial(_Tp)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_trivially_copyable
    : public integral_constant<bool, __is_trivially_copyable(_Tp)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_standard_layout
    : public integral_constant<bool, __is_standard_layout(_Tp)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };



  template<typename _Tp>
    struct
   
    is_pod
    : public integral_constant<bool, __is_pod(_Tp)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_literal_type
    : public integral_constant<bool, __is_literal_type(_Tp)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_empty
    : public integral_constant<bool, __is_empty(_Tp)>
    { };


  template<typename _Tp>
    struct is_polymorphic
    : public integral_constant<bool, __is_polymorphic(_Tp)>
    { };




  template<typename _Tp>
    struct is_final
    : public integral_constant<bool, __is_final(_Tp)>
    { };



  template<typename _Tp>
    struct is_abstract
    : public integral_constant<bool, __is_abstract(_Tp)>
    { };

  template<typename _Tp,
    bool = is_arithmetic<_Tp>::value>
    struct __is_signed_helper
    : public false_type { };

  template<typename _Tp>
    struct __is_signed_helper<_Tp, true>
    : public integral_constant<bool, _Tp(-1) < _Tp(0)>
    { };


  template<typename _Tp>
    struct is_signed
    : public __is_signed_helper<_Tp>::type
    { };


  template<typename _Tp>
    struct is_unsigned
    : public __and_<is_arithmetic<_Tp>, __not_<is_signed<_Tp>>>
    { };
# 770 "/usr/include/c++/10/type_traits" 3
  template<typename _Tp, typename _Up = _Tp&&>
    _Up
    __declval(int);

  template<typename _Tp>
    _Tp
    __declval(long);

  template<typename _Tp>
    auto declval() noexcept -> decltype(__declval<_Tp>(0));

  template<typename, unsigned = 0>
    struct extent;

  template<typename>
    struct remove_all_extents;

  template<typename _Tp>
    struct __is_array_known_bounds
    : public integral_constant<bool, (extent<_Tp>::value > 0)>
    { };

  template<typename _Tp>
    struct __is_array_unknown_bounds
    : public __and_<is_array<_Tp>, __not_<extent<_Tp>>>
    { };






  struct __do_is_destructible_impl
  {
    template<typename _Tp, typename = decltype(declval<_Tp&>().~_Tp())>
      static true_type __test(int);

    template<typename>
      static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_destructible_impl
    : public __do_is_destructible_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp,
           bool = __or_<is_void<_Tp>,
                        __is_array_unknown_bounds<_Tp>,
                        is_function<_Tp>>::value,
           bool = __or_<is_reference<_Tp>, is_scalar<_Tp>>::value>
    struct __is_destructible_safe;

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, false, false>
    : public __is_destructible_impl<typename
               remove_all_extents<_Tp>::type>::type
    { };

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, true, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, false, true>
    : public true_type { };


  template<typename _Tp>
    struct is_destructible
    : public __is_destructible_safe<_Tp>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };





  struct __do_is_nt_destructible_impl
  {
    template<typename _Tp>
      static __bool_constant<noexcept(declval<_Tp&>().~_Tp())>
      __test(int);

    template<typename>
      static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_nt_destructible_impl
    : public __do_is_nt_destructible_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp,
           bool = __or_<is_void<_Tp>,
                        __is_array_unknown_bounds<_Tp>,
                        is_function<_Tp>>::value,
           bool = __or_<is_reference<_Tp>, is_scalar<_Tp>>::value>
    struct __is_nt_destructible_safe;

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, false, false>
    : public __is_nt_destructible_impl<typename
               remove_all_extents<_Tp>::type>::type
    { };

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, true, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, false, true>
    : public true_type { };


  template<typename _Tp>
    struct is_nothrow_destructible
    : public __is_nt_destructible_safe<_Tp>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<typename _Tp, typename... _Args>
    struct __is_constructible_impl
    : public __bool_constant<__is_constructible(_Tp, _Args...)>
    { };


  template<typename _Tp, typename... _Args>
    struct is_constructible
      : public __is_constructible_impl<_Tp, _Args...>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_default_constructible
    : public __is_constructible_impl<_Tp>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_copy_constructible_impl;

  template<typename _Tp>
    struct __is_copy_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_copy_constructible_impl<_Tp, true>
    : public __is_constructible_impl<_Tp, const _Tp&>
    { };


  template<typename _Tp>
    struct is_copy_constructible
    : public __is_copy_constructible_impl<_Tp>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_move_constructible_impl;

  template<typename _Tp>
    struct __is_move_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_move_constructible_impl<_Tp, true>
    : public __is_constructible_impl<_Tp, _Tp&&>
    { };


  template<typename _Tp>
    struct is_move_constructible
    : public __is_move_constructible_impl<_Tp>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<bool, typename _Tp, typename... _Args>
    struct __is_nt_constructible_impl
    : public false_type
    { };

  template<typename _Tp, typename... _Args>
    struct __is_nt_constructible_impl<true, _Tp, _Args...>
    : public __bool_constant<noexcept(_Tp(std::declval<_Args>()...))>
    { };

  template<typename _Tp, typename _Arg>
    struct __is_nt_constructible_impl<true, _Tp, _Arg>
    : public __bool_constant<noexcept(static_cast<_Tp>(std::declval<_Arg>()))>
    { };

  template<typename _Tp>
    struct __is_nt_constructible_impl<true, _Tp>
    : public __bool_constant<noexcept(_Tp())>
    { };

  template<typename _Tp, size_t _Num>
    struct __is_nt_constructible_impl<true, _Tp[_Num]>
    : public __bool_constant<noexcept(typename remove_all_extents<_Tp>::type())>
    { };
# 1001 "/usr/include/c++/10/type_traits" 3
  template<typename _Tp, typename... _Args>
    using __is_nothrow_constructible_impl
      = __is_nt_constructible_impl<__is_constructible(_Tp, _Args...),
       _Tp, _Args...>;


  template<typename _Tp, typename... _Args>
    struct is_nothrow_constructible
    : public __is_nothrow_constructible_impl<_Tp, _Args...>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_nothrow_default_constructible
    : public __is_nothrow_constructible_impl<_Tp>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nothrow_copy_constructible_impl;

  template<typename _Tp>
    struct __is_nothrow_copy_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nothrow_copy_constructible_impl<_Tp, true>
    : public __is_nothrow_constructible_impl<_Tp, const _Tp&>
    { };


  template<typename _Tp>
    struct is_nothrow_copy_constructible
    : public __is_nothrow_copy_constructible_impl<_Tp>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nothrow_move_constructible_impl;

  template<typename _Tp>
    struct __is_nothrow_move_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nothrow_move_constructible_impl<_Tp, true>
    : public __is_nothrow_constructible_impl<_Tp, _Tp&&>
    { };


  template<typename _Tp>
    struct is_nothrow_move_constructible
    : public __is_nothrow_move_constructible_impl<_Tp>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp, typename _Up>
    struct is_assignable
    : public __bool_constant<__is_assignable(_Tp, _Up)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_copy_assignable_impl;

  template<typename _Tp>
    struct __is_copy_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_copy_assignable_impl<_Tp, true>
    : public __bool_constant<__is_assignable(_Tp&, const _Tp&)>
    { };


  template<typename _Tp>
    struct is_copy_assignable
    : public __is_copy_assignable_impl<_Tp>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_move_assignable_impl;

  template<typename _Tp>
    struct __is_move_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_move_assignable_impl<_Tp, true>
    : public __bool_constant<__is_assignable(_Tp&, _Tp&&)>
    { };


  template<typename _Tp>
    struct is_move_assignable
    : public __is_move_assignable_impl<_Tp>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<typename _Tp, typename _Up>
    struct __is_nt_assignable_impl
    : public integral_constant<bool, noexcept(declval<_Tp>() = declval<_Up>())>
    { };

  template<typename _Tp, typename _Up>
    struct __is_nothrow_assignable_impl
    : public __and_<__bool_constant<__is_assignable(_Tp, _Up)>,
      __is_nt_assignable_impl<_Tp, _Up>>
    { };


  template<typename _Tp, typename _Up>
    struct is_nothrow_assignable
    : public __is_nothrow_assignable_impl<_Tp, _Up>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nt_copy_assignable_impl;

  template<typename _Tp>
    struct __is_nt_copy_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_copy_assignable_impl<_Tp, true>
    : public __is_nothrow_assignable_impl<_Tp&, const _Tp&>
    { };


  template<typename _Tp>
    struct is_nothrow_copy_assignable
    : public __is_nt_copy_assignable_impl<_Tp>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nt_move_assignable_impl;

  template<typename _Tp>
    struct __is_nt_move_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_move_assignable_impl<_Tp, true>
    : public __is_nothrow_assignable_impl<_Tp&, _Tp&&>
    { };


  template<typename _Tp>
    struct is_nothrow_move_assignable
    : public __is_nt_move_assignable_impl<_Tp>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp, typename... _Args>
    struct is_trivially_constructible
    : public __bool_constant<__is_trivially_constructible(_Tp, _Args...)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_trivially_default_constructible
    : public __bool_constant<__is_trivially_constructible(_Tp)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  struct __do_is_implicitly_default_constructible_impl
  {
    template <typename _Tp>
    static void __helper(const _Tp&);

    template <typename _Tp>
    static true_type __test(const _Tp&,
                            decltype(__helper<const _Tp&>({}))* = 0);

    static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_implicitly_default_constructible_impl
    : public __do_is_implicitly_default_constructible_impl
    {
      typedef decltype(__test(declval<_Tp>())) type;
    };

  template<typename _Tp>
    struct __is_implicitly_default_constructible_safe
    : public __is_implicitly_default_constructible_impl<_Tp>::type
    { };

  template <typename _Tp>
    struct __is_implicitly_default_constructible
    : public __and_<__is_constructible_impl<_Tp>,
      __is_implicitly_default_constructible_safe<_Tp>>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_trivially_copy_constructible_impl;

  template<typename _Tp>
    struct __is_trivially_copy_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_trivially_copy_constructible_impl<_Tp, true>
    : public __and_<__is_copy_constructible_impl<_Tp>,
      integral_constant<bool,
   __is_trivially_constructible(_Tp, const _Tp&)>>
    { };


  template<typename _Tp>
    struct is_trivially_copy_constructible
    : public __is_trivially_copy_constructible_impl<_Tp>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_trivially_move_constructible_impl;

  template<typename _Tp>
    struct __is_trivially_move_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_trivially_move_constructible_impl<_Tp, true>
    : public __and_<__is_move_constructible_impl<_Tp>,
      integral_constant<bool,
   __is_trivially_constructible(_Tp, _Tp&&)>>
    { };


  template<typename _Tp>
    struct is_trivially_move_constructible
    : public __is_trivially_move_constructible_impl<_Tp>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp, typename _Up>
    struct is_trivially_assignable
    : public __bool_constant<__is_trivially_assignable(_Tp, _Up)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_trivially_copy_assignable_impl;

  template<typename _Tp>
    struct __is_trivially_copy_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_trivially_copy_assignable_impl<_Tp, true>
    : public __bool_constant<__is_trivially_assignable(_Tp&, const _Tp&)>
    { };


  template<typename _Tp>
    struct is_trivially_copy_assignable
    : public __is_trivially_copy_assignable_impl<_Tp>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_trivially_move_assignable_impl;

  template<typename _Tp>
    struct __is_trivially_move_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_trivially_move_assignable_impl<_Tp, true>
    : public __bool_constant<__is_trivially_assignable(_Tp&, _Tp&&)>
    { };


  template<typename _Tp>
    struct is_trivially_move_assignable
    : public __is_trivially_move_assignable_impl<_Tp>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_trivially_destructible
    : public __and_<__is_destructible_safe<_Tp>,
      __bool_constant<__has_trivial_destructor(_Tp)>>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };



  template<typename _Tp>
    struct has_virtual_destructor
    : public integral_constant<bool, __has_virtual_destructor(_Tp)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };





  template<typename _Tp>
    struct alignment_of
    : public integral_constant<std::size_t, alignof(_Tp)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename>
    struct rank
    : public integral_constant<std::size_t, 0> { };

  template<typename _Tp, std::size_t _Size>
    struct rank<_Tp[_Size]>
    : public integral_constant<std::size_t, 1 + rank<_Tp>::value> { };

  template<typename _Tp>
    struct rank<_Tp[]>
    : public integral_constant<std::size_t, 1 + rank<_Tp>::value> { };


  template<typename, unsigned _Uint>
    struct extent
    : public integral_constant<std::size_t, 0> { };

  template<typename _Tp, unsigned _Uint, std::size_t _Size>
    struct extent<_Tp[_Size], _Uint>
    : public integral_constant<std::size_t,
          _Uint == 0 ? _Size : extent<_Tp,
          _Uint - 1>::value>
    { };

  template<typename _Tp, unsigned _Uint>
    struct extent<_Tp[], _Uint>
    : public integral_constant<std::size_t,
          _Uint == 0 ? 0 : extent<_Tp,
             _Uint - 1>::value>
    { };





  template<typename _Tp, typename _Up>
    struct is_same

    : public integral_constant<bool, __is_same_as(_Tp, _Up)>



    { };
# 1410 "/usr/include/c++/10/type_traits" 3
  template<typename _Base, typename _Derived>
    struct is_base_of
    : public integral_constant<bool, __is_base_of(_Base, _Derived)>
    { };

  template<typename _From, typename _To,
           bool = __or_<is_void<_From>, is_function<_To>,
                        is_array<_To>>::value>
    struct __is_convertible_helper
    {
      typedef typename is_void<_To>::type type;
    };

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wctor-dtor-privacy"
  template<typename _From, typename _To>
    class __is_convertible_helper<_From, _To, false>
    {
      template<typename _To1>
 static void __test_aux(_To1) noexcept;

      template<typename _From1, typename _To1,
        typename = decltype(__test_aux<_To1>(std::declval<_From1>()))>
 static true_type
 __test(int);

      template<typename, typename>
 static false_type
 __test(...);

    public:
      typedef decltype(__test<_From, _To>(0)) type;
    };
#pragma GCC diagnostic pop


  template<typename _From, typename _To>
    struct is_convertible
    : public __is_convertible_helper<_From, _To>::type
    { };


  template<typename _ToElementType, typename _FromElementType>
    using __is_array_convertible
      = is_convertible<_FromElementType(*)[], _ToElementType(*)[]>;

  template<typename _From, typename _To,
           bool = __or_<is_void<_From>, is_function<_To>,
                        is_array<_To>>::value>
    struct __is_nt_convertible_helper
    : is_void<_To>
    { };

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wctor-dtor-privacy"
  template<typename _From, typename _To>
    class __is_nt_convertible_helper<_From, _To, false>
    {
      template<typename _To1>
 static void __test_aux(_To1) noexcept;

      template<typename _From1, typename _To1>
 static
 __bool_constant<noexcept(__test_aux<_To1>(std::declval<_From1>()))>
 __test(int);

      template<typename, typename>
 static false_type
 __test(...);

    public:
      using type = decltype(__test<_From, _To>(0));
    };
#pragma GCC diagnostic pop


  template<typename _From, typename _To>
    struct __is_nothrow_convertible
    : public __is_nt_convertible_helper<_From, _To>::type
    { };
# 1508 "/usr/include/c++/10/type_traits" 3
  template<typename _Tp>
    struct remove_const
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_const<_Tp const>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_volatile
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_volatile<_Tp volatile>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_cv
    { using type = _Tp; };

  template<typename _Tp>
    struct remove_cv<const _Tp>
    { using type = _Tp; };

  template<typename _Tp>
    struct remove_cv<volatile _Tp>
    { using type = _Tp; };

  template<typename _Tp>
    struct remove_cv<const volatile _Tp>
    { using type = _Tp; };


  template<typename _Tp>
    struct add_const
    { typedef _Tp const type; };


  template<typename _Tp>
    struct add_volatile
    { typedef _Tp volatile type; };


  template<typename _Tp>
    struct add_cv
    {
      typedef typename
      add_const<typename add_volatile<_Tp>::type>::type type;
    };






  template<typename _Tp>
    using remove_const_t = typename remove_const<_Tp>::type;


  template<typename _Tp>
    using remove_volatile_t = typename remove_volatile<_Tp>::type;


  template<typename _Tp>
    using remove_cv_t = typename remove_cv<_Tp>::type;


  template<typename _Tp>
    using add_const_t = typename add_const<_Tp>::type;


  template<typename _Tp>
    using add_volatile_t = typename add_volatile<_Tp>::type;


  template<typename _Tp>
    using add_cv_t = typename add_cv<_Tp>::type;





  template<typename _Tp>
    struct remove_reference
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_reference<_Tp&>
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_reference<_Tp&&>
    { typedef _Tp type; };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __add_lvalue_reference_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_lvalue_reference_helper<_Tp, true>
    { typedef _Tp& type; };


  template<typename _Tp>
    struct add_lvalue_reference
    : public __add_lvalue_reference_helper<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __add_rvalue_reference_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_rvalue_reference_helper<_Tp, true>
    { typedef _Tp&& type; };


  template<typename _Tp>
    struct add_rvalue_reference
    : public __add_rvalue_reference_helper<_Tp>
    { };



  template<typename _Tp>
    using remove_reference_t = typename remove_reference<_Tp>::type;


  template<typename _Tp>
    using add_lvalue_reference_t = typename add_lvalue_reference<_Tp>::type;


  template<typename _Tp>
    using add_rvalue_reference_t = typename add_rvalue_reference<_Tp>::type;





  template<typename _Unqualified, bool _IsConst, bool _IsVol>
    struct __cv_selector;

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, false, false>
    { typedef _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, false, true>
    { typedef volatile _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, true, false>
    { typedef const _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, true, true>
    { typedef const volatile _Unqualified __type; };

  template<typename _Qualified, typename _Unqualified,
    bool _IsConst = is_const<_Qualified>::value,
    bool _IsVol = is_volatile<_Qualified>::value>
    class __match_cv_qualifiers
    {
      typedef __cv_selector<_Unqualified, _IsConst, _IsVol> __match;

    public:
      typedef typename __match::__type __type;
    };


  template<typename _Tp>
    struct __make_unsigned
    { typedef _Tp __type; };

  template<>
    struct __make_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __make_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __make_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __make_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __make_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __make_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __make_unsigned<__int128>
    { typedef unsigned __int128 __type; };
# 1730 "/usr/include/c++/10/type_traits" 3
  template<typename _Tp,
    bool _IsInt = is_integral<_Tp>::value,
    bool _IsEnum = is_enum<_Tp>::value>
    class __make_unsigned_selector;

  template<typename _Tp>
    class __make_unsigned_selector<_Tp, true, false>
    {
      using __unsigned_type
 = typename __make_unsigned<__remove_cv_t<_Tp>>::__type;

    public:
      using __type
 = typename __match_cv_qualifiers<_Tp, __unsigned_type>::__type;
    };

  class __make_unsigned_selector_base
  {
  protected:
    template<typename...> struct _List { };

    template<typename _Tp, typename... _Up>
      struct _List<_Tp, _Up...> : _List<_Up...>
      { static constexpr size_t __size = sizeof(_Tp); };

    template<size_t _Sz, typename _Tp, bool = (_Sz <= _Tp::__size)>
      struct __select;

    template<size_t _Sz, typename _Uint, typename... _UInts>
      struct __select<_Sz, _List<_Uint, _UInts...>, true>
      { using __type = _Uint; };

    template<size_t _Sz, typename _Uint, typename... _UInts>
      struct __select<_Sz, _List<_Uint, _UInts...>, false>
      : __select<_Sz, _List<_UInts...>>
      { };
  };


  template<typename _Tp>
    class __make_unsigned_selector<_Tp, false, true>
    : __make_unsigned_selector_base
    {

      using _UInts = _List<unsigned char, unsigned short, unsigned int,
      unsigned long, unsigned long long>;

      using __unsigned_type = typename __select<sizeof(_Tp), _UInts>::__type;

    public:
      using __type
 = typename __match_cv_qualifiers<_Tp, __unsigned_type>::__type;
    };






  template<>
    struct __make_unsigned<wchar_t>
    {
      using __type
 = typename __make_unsigned_selector<wchar_t, false, true>::__type;
    };
# 1806 "/usr/include/c++/10/type_traits" 3
  template<>
    struct __make_unsigned<char16_t>
    {
      using __type
 = typename __make_unsigned_selector<char16_t, false, true>::__type;
    };

  template<>
    struct __make_unsigned<char32_t>
    {
      using __type
 = typename __make_unsigned_selector<char32_t, false, true>::__type;
    };





  template<typename _Tp>
    struct make_unsigned
    { typedef typename __make_unsigned_selector<_Tp>::__type type; };


  template<>
    struct make_unsigned<bool>;



  template<typename _Tp>
    struct __make_signed
    { typedef _Tp __type; };

  template<>
    struct __make_signed<char>
    { typedef signed char __type; };

  template<>
    struct __make_signed<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __make_signed<unsigned short>
    { typedef signed short __type; };

  template<>
    struct __make_signed<unsigned int>
    { typedef signed int __type; };

  template<>
    struct __make_signed<unsigned long>
    { typedef signed long __type; };

  template<>
    struct __make_signed<unsigned long long>
    { typedef signed long long __type; };


  template<>
    struct __make_signed<unsigned __int128>
    { typedef __int128 __type; };
# 1884 "/usr/include/c++/10/type_traits" 3
  template<typename _Tp,
    bool _IsInt = is_integral<_Tp>::value,
    bool _IsEnum = is_enum<_Tp>::value>
    class __make_signed_selector;

  template<typename _Tp>
    class __make_signed_selector<_Tp, true, false>
    {
      using __signed_type
 = typename __make_signed<__remove_cv_t<_Tp>>::__type;

    public:
      using __type
 = typename __match_cv_qualifiers<_Tp, __signed_type>::__type;
    };


  template<typename _Tp>
    class __make_signed_selector<_Tp, false, true>
    {
      typedef typename __make_unsigned_selector<_Tp>::__type __unsigned_type;

    public:
      typedef typename __make_signed_selector<__unsigned_type>::__type __type;
    };






  template<>
    struct __make_signed<wchar_t>
    {
      using __type
 = typename __make_signed_selector<wchar_t, false, true>::__type;
    };
# 1932 "/usr/include/c++/10/type_traits" 3
  template<>
    struct __make_signed<char16_t>
    {
      using __type
 = typename __make_signed_selector<char16_t, false, true>::__type;
    };

  template<>
    struct __make_signed<char32_t>
    {
      using __type
 = typename __make_signed_selector<char32_t, false, true>::__type;
    };





  template<typename _Tp>
    struct make_signed
    { typedef typename __make_signed_selector<_Tp>::__type type; };


  template<>
    struct make_signed<bool>;



  template<typename _Tp>
    using make_signed_t = typename make_signed<_Tp>::type;


  template<typename _Tp>
    using make_unsigned_t = typename make_unsigned<_Tp>::type;





  template<typename _Tp>
    struct remove_extent
    { typedef _Tp type; };

  template<typename _Tp, std::size_t _Size>
    struct remove_extent<_Tp[_Size]>
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_extent<_Tp[]>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_all_extents
    { typedef _Tp type; };

  template<typename _Tp, std::size_t _Size>
    struct remove_all_extents<_Tp[_Size]>
    { typedef typename remove_all_extents<_Tp>::type type; };

  template<typename _Tp>
    struct remove_all_extents<_Tp[]>
    { typedef typename remove_all_extents<_Tp>::type type; };



  template<typename _Tp>
    using remove_extent_t = typename remove_extent<_Tp>::type;


  template<typename _Tp>
    using remove_all_extents_t = typename remove_all_extents<_Tp>::type;




  template<typename _Tp, typename>
    struct __remove_pointer_helper
    { typedef _Tp type; };

  template<typename _Tp, typename _Up>
    struct __remove_pointer_helper<_Tp, _Up*>
    { typedef _Up type; };


  template<typename _Tp>
    struct remove_pointer
    : public __remove_pointer_helper<_Tp, __remove_cv_t<_Tp>>
    { };


  template<typename _Tp, bool = __or_<__is_referenceable<_Tp>,
          is_void<_Tp>>::value>
    struct __add_pointer_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_pointer_helper<_Tp, true>
    { typedef typename remove_reference<_Tp>::type* type; };

  template<typename _Tp>
    struct add_pointer
    : public __add_pointer_helper<_Tp>
    { };



  template<typename _Tp>
    using remove_pointer_t = typename remove_pointer<_Tp>::type;


  template<typename _Tp>
    using add_pointer_t = typename add_pointer<_Tp>::type;


  template<std::size_t _Len>
    struct __aligned_storage_msa
    {
      union __type
      {
 unsigned char __data[_Len];
 struct __attribute__((__aligned__)) { } __align;
      };
    };
# 2067 "/usr/include/c++/10/type_traits" 3
  template<std::size_t _Len, std::size_t _Align =
    __alignof__(typename __aligned_storage_msa<_Len>::__type)>
    struct aligned_storage
    {
      union type
      {
 unsigned char __data[_Len];
 struct __attribute__((__aligned__((_Align)))) { } __align;
      };
    };

  template <typename... _Types>
    struct __strictest_alignment
    {
      static const size_t _S_alignment = 0;
      static const size_t _S_size = 0;
    };

  template <typename _Tp, typename... _Types>
    struct __strictest_alignment<_Tp, _Types...>
    {
      static const size_t _S_alignment =
        alignof(_Tp) > __strictest_alignment<_Types...>::_S_alignment
 ? alignof(_Tp) : __strictest_alignment<_Types...>::_S_alignment;
      static const size_t _S_size =
        sizeof(_Tp) > __strictest_alignment<_Types...>::_S_size
 ? sizeof(_Tp) : __strictest_alignment<_Types...>::_S_size;
    };
# 2106 "/usr/include/c++/10/type_traits" 3
  template <size_t _Len, typename... _Types>
    struct aligned_union
    {
    private:
      static_assert(sizeof...(_Types) != 0, "At least one type is required");

      using __strictest = __strictest_alignment<_Types...>;
      static const size_t _S_len = _Len > __strictest::_S_size
 ? _Len : __strictest::_S_size;
    public:

      static const size_t alignment_value = __strictest::_S_alignment;

      typedef typename aligned_storage<_S_len, alignment_value>::type type;
    };

  template <size_t _Len, typename... _Types>
    const size_t aligned_union<_Len, _Types...>::alignment_value;



  template<typename _Up,
    bool _IsArray = is_array<_Up>::value,
    bool _IsFunction = is_function<_Up>::value>
    struct __decay_selector;


  template<typename _Up>
    struct __decay_selector<_Up, false, false>
    { typedef __remove_cv_t<_Up> __type; };

  template<typename _Up>
    struct __decay_selector<_Up, true, false>
    { typedef typename remove_extent<_Up>::type* __type; };

  template<typename _Up>
    struct __decay_selector<_Up, false, true>
    { typedef typename add_pointer<_Up>::type __type; };


  template<typename _Tp>
    class decay
    {
      typedef typename remove_reference<_Tp>::type __remove_type;

    public:
      typedef typename __decay_selector<__remove_type>::__type type;
    };


  template<typename _Tp>
    using __decay_t = typename decay<_Tp>::type;

  template<typename _Tp>
    class reference_wrapper;


  template<typename _Tp>
    struct __strip_reference_wrapper
    {
      typedef _Tp __type;
    };

  template<typename _Tp>
    struct __strip_reference_wrapper<reference_wrapper<_Tp> >
    {
      typedef _Tp& __type;
    };

  template<typename _Tp>
    using __decay_and_strip = __strip_reference_wrapper<__decay_t<_Tp>>;




  template<bool, typename _Tp = void>
    struct enable_if
    { };


  template<typename _Tp>
    struct enable_if<true, _Tp>
    { typedef _Tp type; };


  template<bool _Cond, typename _Tp = void>
    using __enable_if_t = typename enable_if<_Cond, _Tp>::type;

  template<typename... _Cond>
    using _Require = __enable_if_t<__and_<_Cond...>::value>;



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct conditional
    { typedef _Iftrue type; };


  template<typename _Iftrue, typename _Iffalse>
    struct conditional<false, _Iftrue, _Iffalse>
    { typedef _Iffalse type; };


  template<typename _Tp>
    using __remove_cvref_t
     = typename remove_cv<typename remove_reference<_Tp>::type>::type;


  template<typename... _Tp>
    struct common_type;



  struct __do_common_type_impl
  {
    template<typename _Tp, typename _Up>
      using __cond_t
 = decltype(true ? std::declval<_Tp>() : std::declval<_Up>());



    template<typename _Tp, typename _Up>
      static __success_type<__decay_t<__cond_t<_Tp, _Up>>>
      _S_test(int);
# 2239 "/usr/include/c++/10/type_traits" 3
    template<typename, typename>
      static __failure_type
      _S_test_2(...);

    template<typename _Tp, typename _Up>
      static decltype(_S_test_2<_Tp, _Up>(0))
      _S_test(...);
  };


  template<>
    struct common_type<>
    { };


  template<typename _Tp0>
    struct common_type<_Tp0>
    : public common_type<_Tp0, _Tp0>
    { };


  template<typename _Tp1, typename _Tp2,
    typename _Dp1 = __decay_t<_Tp1>, typename _Dp2 = __decay_t<_Tp2>>
    struct __common_type_impl
    {


      using type = common_type<_Dp1, _Dp2>;
    };

  template<typename _Tp1, typename _Tp2>
    struct __common_type_impl<_Tp1, _Tp2, _Tp1, _Tp2>
    : private __do_common_type_impl
    {


      using type = decltype(_S_test<_Tp1, _Tp2>(0));
    };


  template<typename _Tp1, typename _Tp2>
    struct common_type<_Tp1, _Tp2>
    : public __common_type_impl<_Tp1, _Tp2>::type
    { };

  template<typename...>
    struct __common_type_pack
    { };

  template<typename, typename, typename = void>
    struct __common_type_fold;


  template<typename _Tp1, typename _Tp2, typename... _Rp>
    struct common_type<_Tp1, _Tp2, _Rp...>
    : public __common_type_fold<common_type<_Tp1, _Tp2>,
    __common_type_pack<_Rp...>>
    { };




  template<typename _CTp, typename... _Rp>
    struct __common_type_fold<_CTp, __common_type_pack<_Rp...>,
         __void_t<typename _CTp::type>>
    : public common_type<typename _CTp::type, _Rp...>
    { };


  template<typename _CTp, typename _Rp>
    struct __common_type_fold<_CTp, _Rp, void>
    { };

  template<typename _Tp, bool = is_enum<_Tp>::value>
    struct __underlying_type_impl
    {
      using type = __underlying_type(_Tp);
    };

  template<typename _Tp>
    struct __underlying_type_impl<_Tp, false>
    { };


  template<typename _Tp>
    struct underlying_type
    : public __underlying_type_impl<_Tp>
    { };

  template<typename _Tp>
    struct __declval_protector
    {
      static const bool __stop = false;
    };

  template<typename _Tp>
    auto declval() noexcept -> decltype(__declval<_Tp>(0))
    {
      static_assert(__declval_protector<_Tp>::__stop,
      "declval() must not be used!");
      return __declval<_Tp>(0);
    }


  template<typename _Signature>
    class result_of;





  struct __invoke_memfun_ref { };
  struct __invoke_memfun_deref { };
  struct __invoke_memobj_ref { };
  struct __invoke_memobj_deref { };
  struct __invoke_other { };


  template<typename _Tp, typename _Tag>
    struct __result_of_success : __success_type<_Tp>
    { using __invoke_type = _Tag; };


  struct __result_of_memfun_ref_impl
  {
    template<typename _Fp, typename _Tp1, typename... _Args>
      static __result_of_success<decltype(
      (std::declval<_Tp1>().*std::declval<_Fp>())(std::declval<_Args>()...)
      ), __invoke_memfun_ref> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun_ref
    : private __result_of_memfun_ref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg, _Args...>(0)) type;
    };


  struct __result_of_memfun_deref_impl
  {
    template<typename _Fp, typename _Tp1, typename... _Args>
      static __result_of_success<decltype(
      ((*std::declval<_Tp1>()).*std::declval<_Fp>())(std::declval<_Args>()...)
      ), __invoke_memfun_deref> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun_deref
    : private __result_of_memfun_deref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg, _Args...>(0)) type;
    };


  struct __result_of_memobj_ref_impl
  {
    template<typename _Fp, typename _Tp1>
      static __result_of_success<decltype(
      std::declval<_Tp1>().*std::declval<_Fp>()
      ), __invoke_memobj_ref> _S_test(int);

    template<typename, typename>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj_ref
    : private __result_of_memobj_ref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg>(0)) type;
    };


  struct __result_of_memobj_deref_impl
  {
    template<typename _Fp, typename _Tp1>
      static __result_of_success<decltype(
      (*std::declval<_Tp1>()).*std::declval<_Fp>()
      ), __invoke_memobj_deref> _S_test(int);

    template<typename, typename>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj_deref
    : private __result_of_memobj_deref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg>(0)) type;
    };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj;

  template<typename _Res, typename _Class, typename _Arg>
    struct __result_of_memobj<_Res _Class::*, _Arg>
    {
      typedef __remove_cvref_t<_Arg> _Argval;
      typedef _Res _Class::* _MemPtr;
      typedef typename conditional<__or_<is_same<_Argval, _Class>,
        is_base_of<_Class, _Argval>>::value,
        __result_of_memobj_ref<_MemPtr, _Arg>,
        __result_of_memobj_deref<_MemPtr, _Arg>
      >::type::type type;
    };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun;

  template<typename _Res, typename _Class, typename _Arg, typename... _Args>
    struct __result_of_memfun<_Res _Class::*, _Arg, _Args...>
    {
      typedef typename remove_reference<_Arg>::type _Argval;
      typedef _Res _Class::* _MemPtr;
      typedef typename conditional<is_base_of<_Class, _Argval>::value,
        __result_of_memfun_ref<_MemPtr, _Arg, _Args...>,
        __result_of_memfun_deref<_MemPtr, _Arg, _Args...>
      >::type::type type;
    };






  template<typename _Tp, typename _Up = __remove_cvref_t<_Tp>>
    struct __inv_unwrap
    {
      using type = _Tp;
    };

  template<typename _Tp, typename _Up>
    struct __inv_unwrap<_Tp, reference_wrapper<_Up>>
    {
      using type = _Up&;
    };

  template<bool, bool, typename _Functor, typename... _ArgTypes>
    struct __result_of_impl
    {
      typedef __failure_type type;
    };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_impl<true, false, _MemPtr, _Arg>
    : public __result_of_memobj<__decay_t<_MemPtr>,
    typename __inv_unwrap<_Arg>::type>
    { };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_impl<false, true, _MemPtr, _Arg, _Args...>
    : public __result_of_memfun<__decay_t<_MemPtr>,
    typename __inv_unwrap<_Arg>::type, _Args...>
    { };


  struct __result_of_other_impl
  {
    template<typename _Fn, typename... _Args>
      static __result_of_success<decltype(
      std::declval<_Fn>()(std::declval<_Args>()...)
      ), __invoke_other> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _Functor, typename... _ArgTypes>
    struct __result_of_impl<false, false, _Functor, _ArgTypes...>
    : private __result_of_other_impl
    {
      typedef decltype(_S_test<_Functor, _ArgTypes...>(0)) type;
    };


  template<typename _Functor, typename... _ArgTypes>
    struct __invoke_result
    : public __result_of_impl<
        is_member_object_pointer<
          typename remove_reference<_Functor>::type
        >::value,
        is_member_function_pointer<
          typename remove_reference<_Functor>::type
        >::value,
 _Functor, _ArgTypes...
      >::type
    { };

  template<typename _Functor, typename... _ArgTypes>
    struct result_of<_Functor(_ArgTypes...)>
    : public __invoke_result<_Functor, _ArgTypes...>
    { };



  template<size_t _Len, size_t _Align =
     __alignof__(typename __aligned_storage_msa<_Len>::__type)>
    using aligned_storage_t = typename aligned_storage<_Len, _Align>::type;

  template <size_t _Len, typename... _Types>
    using aligned_union_t = typename aligned_union<_Len, _Types...>::type;


  template<typename _Tp>
    using decay_t = typename decay<_Tp>::type;


  template<bool _Cond, typename _Tp = void>
    using enable_if_t = typename enable_if<_Cond, _Tp>::type;


  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    using conditional_t = typename conditional<_Cond, _Iftrue, _Iffalse>::type;


  template<typename... _Tp>
    using common_type_t = typename common_type<_Tp...>::type;


  template<typename _Tp>
    using underlying_type_t = typename underlying_type<_Tp>::type;


  template<typename _Tp>
    using result_of_t = typename result_of<_Tp>::type;





  template<typename...> using void_t = void;



  template<typename _Default, typename _AlwaysVoid,
    template<typename...> class _Op, typename... _Args>
    struct __detector
    {
      using value_t = false_type;
      using type = _Default;
    };


  template<typename _Default, template<typename...> class _Op,
     typename... _Args>
    struct __detector<_Default, __void_t<_Op<_Args...>>, _Op, _Args...>
    {
      using value_t = true_type;
      using type = _Op<_Args...>;
    };


  template<typename _Default, template<typename...> class _Op,
    typename... _Args>
    using __detected_or = __detector<_Default, void, _Op, _Args...>;


  template<typename _Default, template<typename...> class _Op,
    typename... _Args>
    using __detected_or_t
      = typename __detected_or<_Default, _Op, _Args...>::type;
# 2624 "/usr/include/c++/10/type_traits" 3
  template <typename _Tp>
    struct __is_swappable;

  template <typename _Tp>
    struct __is_nothrow_swappable;

  template<typename... _Elements>
    class tuple;

  template<typename>
    struct __is_tuple_like_impl : false_type
    { };

  template<typename... _Tps>
    struct __is_tuple_like_impl<tuple<_Tps...>> : true_type
    { };


  template<typename _Tp>
    struct __is_tuple_like
    : public __is_tuple_like_impl<__remove_cvref_t<_Tp>>::type
    { };

  template<typename _Tp>
   
    inline
    _Require<__not_<__is_tuple_like<_Tp>>,
      is_move_constructible<_Tp>,
      is_move_assignable<_Tp>>
    swap(_Tp&, _Tp&)
    noexcept(__and_<is_nothrow_move_constructible<_Tp>,
             is_nothrow_move_assignable<_Tp>>::value);

  template<typename _Tp, size_t _Nm>
   
    inline
    __enable_if_t<__is_swappable<_Tp>::value>
    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
    noexcept(__is_nothrow_swappable<_Tp>::value);

  namespace __swappable_details {
    using std::swap;

    struct __do_is_swappable_impl
    {
      template<typename _Tp, typename
               = decltype(swap(std::declval<_Tp&>(), std::declval<_Tp&>()))>
        static true_type __test(int);

      template<typename>
        static false_type __test(...);
    };

    struct __do_is_nothrow_swappable_impl
    {
      template<typename _Tp>
        static __bool_constant<
          noexcept(swap(std::declval<_Tp&>(), std::declval<_Tp&>()))
        > __test(int);

      template<typename>
        static false_type __test(...);
    };

  }

  template<typename _Tp>
    struct __is_swappable_impl
    : public __swappable_details::__do_is_swappable_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp>
    struct __is_nothrow_swappable_impl
    : public __swappable_details::__do_is_nothrow_swappable_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp>
    struct __is_swappable
    : public __is_swappable_impl<_Tp>::type
    { };

  template<typename _Tp>
    struct __is_nothrow_swappable
    : public __is_nothrow_swappable_impl<_Tp>::type
    { };






  template<typename _Tp>
    struct is_swappable
    : public __is_swappable_impl<_Tp>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_nothrow_swappable
    : public __is_nothrow_swappable_impl<_Tp>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };



  template<typename _Tp>
    constexpr bool is_swappable_v =
      is_swappable<_Tp>::value;


  template<typename _Tp>
    constexpr bool is_nothrow_swappable_v =
      is_nothrow_swappable<_Tp>::value;


  namespace __swappable_with_details {
    using std::swap;

    struct __do_is_swappable_with_impl
    {
      template<typename _Tp, typename _Up, typename
               = decltype(swap(std::declval<_Tp>(), std::declval<_Up>())),
               typename
               = decltype(swap(std::declval<_Up>(), std::declval<_Tp>()))>
        static true_type __test(int);

      template<typename, typename>
        static false_type __test(...);
    };

    struct __do_is_nothrow_swappable_with_impl
    {
      template<typename _Tp, typename _Up>
        static __bool_constant<
          noexcept(swap(std::declval<_Tp>(), std::declval<_Up>()))
          &&
          noexcept(swap(std::declval<_Up>(), std::declval<_Tp>()))
        > __test(int);

      template<typename, typename>
        static false_type __test(...);
    };

  }

  template<typename _Tp, typename _Up>
    struct __is_swappable_with_impl
    : public __swappable_with_details::__do_is_swappable_with_impl
    {
      typedef decltype(__test<_Tp, _Up>(0)) type;
    };


  template<typename _Tp>
    struct __is_swappable_with_impl<_Tp&, _Tp&>
    : public __swappable_details::__do_is_swappable_impl
    {
      typedef decltype(__test<_Tp&>(0)) type;
    };

  template<typename _Tp, typename _Up>
    struct __is_nothrow_swappable_with_impl
    : public __swappable_with_details::__do_is_nothrow_swappable_with_impl
    {
      typedef decltype(__test<_Tp, _Up>(0)) type;
    };


  template<typename _Tp>
    struct __is_nothrow_swappable_with_impl<_Tp&, _Tp&>
    : public __swappable_details::__do_is_nothrow_swappable_impl
    {
      typedef decltype(__test<_Tp&>(0)) type;
    };


  template<typename _Tp, typename _Up>
    struct is_swappable_with
    : public __is_swappable_with_impl<_Tp, _Up>::type
    { };


  template<typename _Tp, typename _Up>
    struct is_nothrow_swappable_with
    : public __is_nothrow_swappable_with_impl<_Tp, _Up>::type
    { };



  template<typename _Tp, typename _Up>
    constexpr bool is_swappable_with_v =
      is_swappable_with<_Tp, _Up>::value;


  template<typename _Tp, typename _Up>
    constexpr bool is_nothrow_swappable_with_v =
      is_nothrow_swappable_with<_Tp, _Up>::value;







  template<typename _Result, typename _Ret,
    bool = is_void<_Ret>::value, typename = void>
    struct __is_invocable_impl : false_type { };


  template<typename _Result, typename _Ret>
    struct __is_invocable_impl<_Result, _Ret,
                                true,
          __void_t<typename _Result::type>>
    : true_type
    { };

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wctor-dtor-privacy"

  template<typename _Result, typename _Ret>
    struct __is_invocable_impl<_Result, _Ret,
                                false,
          __void_t<typename _Result::type>>
    {
    private:


      static typename _Result::type _S_get();

      template<typename _Tp>
 static void _S_conv(_Tp);


      template<typename _Tp, typename = decltype(_S_conv<_Tp>(_S_get()))>
 static true_type
 _S_test(int);

      template<typename _Tp>
 static false_type
 _S_test(...);

    public:
      using type = decltype(_S_test<_Ret>(1));
    };
#pragma GCC diagnostic pop

  template<typename _Fn, typename... _ArgTypes>
    struct __is_invocable
    : __is_invocable_impl<__invoke_result<_Fn, _ArgTypes...>, void>::type
    { };

  template<typename _Fn, typename _Tp, typename... _Args>
    constexpr bool __call_is_nt(__invoke_memfun_ref)
    {
      using _Up = typename __inv_unwrap<_Tp>::type;
      return noexcept((std::declval<_Up>().*std::declval<_Fn>())(
     std::declval<_Args>()...));
    }

  template<typename _Fn, typename _Tp, typename... _Args>
    constexpr bool __call_is_nt(__invoke_memfun_deref)
    {
      return noexcept(((*std::declval<_Tp>()).*std::declval<_Fn>())(
     std::declval<_Args>()...));
    }

  template<typename _Fn, typename _Tp>
    constexpr bool __call_is_nt(__invoke_memobj_ref)
    {
      using _Up = typename __inv_unwrap<_Tp>::type;
      return noexcept(std::declval<_Up>().*std::declval<_Fn>());
    }

  template<typename _Fn, typename _Tp>
    constexpr bool __call_is_nt(__invoke_memobj_deref)
    {
      return noexcept((*std::declval<_Tp>()).*std::declval<_Fn>());
    }

  template<typename _Fn, typename... _Args>
    constexpr bool __call_is_nt(__invoke_other)
    {
      return noexcept(std::declval<_Fn>()(std::declval<_Args>()...));
    }

  template<typename _Result, typename _Fn, typename... _Args>
    struct __call_is_nothrow
    : __bool_constant<
 std::__call_is_nt<_Fn, _Args...>(typename _Result::__invoke_type{})
      >
    { };

  template<typename _Fn, typename... _Args>
    using __call_is_nothrow_
      = __call_is_nothrow<__invoke_result<_Fn, _Args...>, _Fn, _Args...>;


  template<typename _Fn, typename... _Args>
    struct __is_nothrow_invocable
    : __and_<__is_invocable<_Fn, _Args...>,
             __call_is_nothrow_<_Fn, _Args...>>::type
    { };

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wctor-dtor-privacy"
  struct __nonesuchbase {};
  struct __nonesuch : private __nonesuchbase {
    ~__nonesuch() = delete;
    __nonesuch(__nonesuch const&) = delete;
    void operator=(__nonesuch const&) = delete;
  };
#pragma GCC diagnostic pop
# 3455 "/usr/include/c++/10/type_traits" 3

}
# 58 "/usr/include/c++/10/bits/move.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 74 "/usr/include/c++/10/bits/move.h" 3
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    { return static_cast<_Tp&&>(__t); }







  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type&& __t) noexcept
    {
      static_assert(!std::is_lvalue_reference<_Tp>::value, "template argument"
      " substituting _Tp is an lvalue reference type");
      return static_cast<_Tp&&>(__t);
    }






  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }


  template<typename _Tp>
    struct __move_if_noexcept_cond
    : public __and_<__not_<is_nothrow_move_constructible<_Tp>>,
                    is_copy_constructible<_Tp>>::type { };
# 118 "/usr/include/c++/10/bits/move.h" 3
  template<typename _Tp>
    constexpr typename
    conditional<__move_if_noexcept_cond<_Tp>::value, const _Tp&, _Tp&&>::type
    move_if_noexcept(_Tp& __x) noexcept
    { return std::move(__x); }
# 138 "/usr/include/c++/10/bits/move.h" 3
  template<typename _Tp>
    inline _Tp*
    addressof(_Tp& __r) noexcept
    { return std::__addressof(__r); }



  template<typename _Tp>
    const _Tp* addressof(const _Tp&&) = delete;


  template <typename _Tp, typename _Up = _Tp>
   
    inline _Tp
    __exchange(_Tp& __obj, _Up&& __new_val)
    {
      _Tp __old_val = std::move(__obj);
      __obj = std::forward<_Up>(__new_val);
      return __old_val;
    }
# 179 "/usr/include/c++/10/bits/move.h" 3
  template<typename _Tp>
   
    inline

    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
         is_move_constructible<_Tp>,
         is_move_assignable<_Tp>>::value>::type



    swap(_Tp& __a, _Tp& __b)
    noexcept(__and_<is_nothrow_move_constructible<_Tp>, is_nothrow_move_assignable<_Tp>>::value)

    {




      _Tp __tmp = std::move(__a);
      __a = std::move(__b);
      __b = std::move(__tmp);
    }




  template<typename _Tp, size_t _Nm>
   
    inline

    typename enable_if<__is_swappable<_Tp>::value>::type



    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
    noexcept(__is_nothrow_swappable<_Tp>::value)
    {
      for (size_t __n = 0; __n < _Nm; ++__n)
 swap(__a[__n], __b[__n]);
    }



}
# 60 "/usr/include/c++/10/bits/stl_pair.h" 2 3
# 69 "/usr/include/c++/10/bits/stl_pair.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 80 "/usr/include/c++/10/bits/stl_pair.h" 3
  struct piecewise_construct_t { explicit piecewise_construct_t() = default; };


  constexpr piecewise_construct_t piecewise_construct =
    piecewise_construct_t();




  template<typename...>
    class tuple;

  template<std::size_t...>
    struct _Index_tuple;






  template <bool, typename _T1, typename _T2>
    struct _PCC
    {
      template <typename _U1, typename _U2>
      static constexpr bool _ConstructiblePair()
      {
 return __and_<is_constructible<_T1, const _U1&>,
        is_constructible<_T2, const _U2&>>::value;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _ImplicitlyConvertiblePair()
      {
 return __and_<is_convertible<const _U1&, _T1>,
        is_convertible<const _U2&, _T2>>::value;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _MoveConstructiblePair()
      {
 return __and_<is_constructible<_T1, _U1&&>,
        is_constructible<_T2, _U2&&>>::value;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _ImplicitlyMoveConvertiblePair()
      {
 return __and_<is_convertible<_U1&&, _T1>,
        is_convertible<_U2&&, _T2>>::value;
      }

      template <bool __implicit, typename _U1, typename _U2>
      static constexpr bool _CopyMovePair()
      {
 using __do_converts = __and_<is_convertible<const _U1&, _T1>,
      is_convertible<_U2&&, _T2>>;
 using __converts = typename conditional<__implicit,
           __do_converts,
           __not_<__do_converts>>::type;
 return __and_<is_constructible<_T1, const _U1&>,
        is_constructible<_T2, _U2&&>,
        __converts
        >::value;
      }

      template <bool __implicit, typename _U1, typename _U2>
      static constexpr bool _MoveCopyPair()
      {
 using __do_converts = __and_<is_convertible<_U1&&, _T1>,
      is_convertible<const _U2&, _T2>>;
 using __converts = typename conditional<__implicit,
           __do_converts,
           __not_<__do_converts>>::type;
 return __and_<is_constructible<_T1, _U1&&>,
        is_constructible<_T2, const _U2&&>,
        __converts
        >::value;
      }
  };

  template <typename _T1, typename _T2>
    struct _PCC<false, _T1, _T2>
    {
      template <typename _U1, typename _U2>
      static constexpr bool _ConstructiblePair()
      {
 return false;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _ImplicitlyConvertiblePair()
      {
 return false;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _MoveConstructiblePair()
      {
 return false;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _ImplicitlyMoveConvertiblePair()
      {
 return false;
      }
  };


  template<typename _U1, typename _U2> class __pair_base
  {

    template<typename _T1, typename _T2> friend struct pair;
    __pair_base() = default;
    ~__pair_base() = default;
    __pair_base(const __pair_base&) = default;
    __pair_base& operator=(const __pair_base&) = delete;

  };
# 210 "/usr/include/c++/10/bits/stl_pair.h" 3
  template<typename _T1, typename _T2>
    struct pair
    : private __pair_base<_T1, _T2>
    {
      typedef _T1 first_type;
      typedef _T2 second_type;

      _T1 first;
      _T2 second;






      template <typename _U1 = _T1,
                typename _U2 = _T2,
                typename enable_if<__and_<
                                     __is_implicitly_default_constructible<_U1>,
                                     __is_implicitly_default_constructible<_U2>>
                                   ::value, bool>::type = true>

      constexpr pair()
      : first(), second() { }


      template <typename _U1 = _T1,
                typename _U2 = _T2,
                typename enable_if<__and_<
                       is_default_constructible<_U1>,
                       is_default_constructible<_U2>,
                       __not_<
                         __and_<__is_implicitly_default_constructible<_U1>,
                                __is_implicitly_default_constructible<_U2>>>>
                                   ::value, bool>::type = false>
      explicit constexpr pair()
      : first(), second() { }
# 256 "/usr/include/c++/10/bits/stl_pair.h" 3
      using _PCCP = _PCC<true, _T1, _T2>;



      template<typename _U1 = _T1, typename _U2=_T2, typename
        enable_if<_PCCP::template
      _ConstructiblePair<_U1, _U2>()
                  && _PCCP::template
      _ImplicitlyConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
      constexpr pair(const _T1& __a, const _T2& __b)
      : first(__a), second(__b) { }


       template<typename _U1 = _T1, typename _U2=_T2, typename
  enable_if<_PCCP::template
       _ConstructiblePair<_U1, _U2>()
                   && !_PCCP::template
       _ImplicitlyConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
      explicit constexpr pair(const _T1& __a, const _T2& __b)
      : first(__a), second(__b) { }
# 288 "/usr/include/c++/10/bits/stl_pair.h" 3
      template <typename _U1, typename _U2>
        using _PCCFP = _PCC<!is_same<_T1, _U1>::value
       || !is_same<_T2, _U2>::value,
       _T1, _T2>;


      template<typename _U1, typename _U2, typename
        enable_if<_PCCFP<_U1, _U2>::template
      _ConstructiblePair<_U1, _U2>()
                  && _PCCFP<_U1, _U2>::template
      _ImplicitlyConvertiblePair<_U1, _U2>(),
     bool>::type=true>
        constexpr pair(const pair<_U1, _U2>& __p)
        : first(__p.first), second(__p.second) { }

      template<typename _U1, typename _U2, typename
        enable_if<_PCCFP<_U1, _U2>::template
      _ConstructiblePair<_U1, _U2>()
    && !_PCCFP<_U1, _U2>::template
      _ImplicitlyConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
 explicit constexpr pair(const pair<_U1, _U2>& __p)
 : first(__p.first), second(__p.second) { }



      constexpr pair(const pair&) = default;
      constexpr pair(pair&&) = default;


      template<typename _U1, typename
        enable_if<_PCCP::template
      _MoveCopyPair<true, _U1, _T2>(),
                         bool>::type=true>
       constexpr pair(_U1&& __x, const _T2& __y)
       : first(std::forward<_U1>(__x)), second(__y) { }

      template<typename _U1, typename
        enable_if<_PCCP::template
      _MoveCopyPair<false, _U1, _T2>(),
                         bool>::type=false>
       explicit constexpr pair(_U1&& __x, const _T2& __y)
       : first(std::forward<_U1>(__x)), second(__y) { }

      template<typename _U2, typename
        enable_if<_PCCP::template
      _CopyMovePair<true, _T1, _U2>(),
                         bool>::type=true>
       constexpr pair(const _T1& __x, _U2&& __y)
       : first(__x), second(std::forward<_U2>(__y)) { }

      template<typename _U2, typename
        enable_if<_PCCP::template
      _CopyMovePair<false, _T1, _U2>(),
                         bool>::type=false>
       explicit pair(const _T1& __x, _U2&& __y)
       : first(__x), second(std::forward<_U2>(__y)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_PCCP::template
      _MoveConstructiblePair<_U1, _U2>()
     && _PCCP::template
      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
 constexpr pair(_U1&& __x, _U2&& __y)
 : first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_PCCP::template
      _MoveConstructiblePair<_U1, _U2>()
     && !_PCCP::template
      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
 explicit constexpr pair(_U1&& __x, _U2&& __y)
 : first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }


      template<typename _U1, typename _U2, typename
        enable_if<_PCCFP<_U1, _U2>::template
      _MoveConstructiblePair<_U1, _U2>()
     && _PCCFP<_U1, _U2>::template
      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
 constexpr pair(pair<_U1, _U2>&& __p)
 : first(std::forward<_U1>(__p.first)),
   second(std::forward<_U2>(__p.second)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_PCCFP<_U1, _U2>::template
      _MoveConstructiblePair<_U1, _U2>()
     && !_PCCFP<_U1, _U2>::template
      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
 explicit constexpr pair(pair<_U1, _U2>&& __p)
 : first(std::forward<_U1>(__p.first)),
   second(std::forward<_U2>(__p.second)) { }

      template<typename... _Args1, typename... _Args2>

        pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);

      pair&
      operator=(typename conditional<
  __and_<is_copy_assignable<_T1>,
         is_copy_assignable<_T2>>::value,
  const pair&, const __nonesuch&>::type __p)
      {
 first = __p.first;
 second = __p.second;
 return *this;
      }

      pair&
      operator=(typename conditional<
  __and_<is_move_assignable<_T1>,
         is_move_assignable<_T2>>::value,
  pair&&, __nonesuch&&>::type __p)
      noexcept(__and_<is_nothrow_move_assignable<_T1>,
        is_nothrow_move_assignable<_T2>>::value)
      {
 first = std::forward<first_type>(__p.first);
 second = std::forward<second_type>(__p.second);
 return *this;
      }

      template<typename _U1, typename _U2>

 typename enable_if<__and_<is_assignable<_T1&, const _U1&>,
      is_assignable<_T2&, const _U2&>>::value,
      pair&>::type
 operator=(const pair<_U1, _U2>& __p)
 {
   first = __p.first;
   second = __p.second;
   return *this;
 }

      template<typename _U1, typename _U2>

 typename enable_if<__and_<is_assignable<_T1&, _U1&&>,
      is_assignable<_T2&, _U2&&>>::value,
      pair&>::type
 operator=(pair<_U1, _U2>&& __p)
 {
   first = std::forward<_U1>(__p.first);
   second = std::forward<_U2>(__p.second);
   return *this;
 }


      void
      swap(pair& __p)
      noexcept(__and_<__is_nothrow_swappable<_T1>,
                      __is_nothrow_swappable<_T2>>::value)
      {
 using std::swap;
 swap(first, __p.first);
 swap(second, __p.second);
      }

    private:
      template<typename... _Args1, std::size_t... _Indexes1,
               typename... _Args2, std::size_t... _Indexes2>

        pair(tuple<_Args1...>&, tuple<_Args2...>&,
             _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>);

    };
# 464 "/usr/include/c++/10/bits/stl_pair.h" 3
  template<typename _T1, typename _T2>
    inline constexpr bool
    operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first == __y.first && __x.second == __y.second; }
# 487 "/usr/include/c++/10/bits/stl_pair.h" 3
  template<typename _T1, typename _T2>
    inline constexpr bool
    operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first < __y.first
      || (!(__y.first < __x.first) && __x.second < __y.second); }


  template<typename _T1, typename _T2>
    inline constexpr bool
    operator!=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x == __y); }


  template<typename _T1, typename _T2>
    inline constexpr bool
    operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __y < __x; }


  template<typename _T1, typename _T2>
    inline constexpr bool
    operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__y < __x); }


  template<typename _T1, typename _T2>
    inline constexpr bool
    operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x < __y); }
# 524 "/usr/include/c++/10/bits/stl_pair.h" 3
  template<typename _T1, typename _T2>
    inline


    typename enable_if<__and_<__is_swappable<_T1>,
                              __is_swappable<_T2>>::value>::type



    swap(pair<_T1, _T2>& __x, pair<_T1, _T2>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }


  template<typename _T1, typename _T2>
    typename enable_if<!__and_<__is_swappable<_T1>,
          __is_swappable<_T2>>::value>::type
    swap(pair<_T1, _T2>&, pair<_T1, _T2>&) = delete;
# 564 "/usr/include/c++/10/bits/stl_pair.h" 3
  template<typename _T1, typename _T2>
    constexpr pair<typename __decay_and_strip<_T1>::__type,
                   typename __decay_and_strip<_T2>::__type>
    make_pair(_T1&& __x, _T2&& __y)
    {
      typedef typename __decay_and_strip<_T1>::__type __ds_type1;
      typedef typename __decay_and_strip<_T2>::__type __ds_type2;
      typedef pair<__ds_type1, __ds_type2> __pair_type;
      return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
    }
# 583 "/usr/include/c++/10/bits/stl_pair.h" 3

}
# 65 "/usr/include/c++/10/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/10/bits/stl_iterator_base_types.h" 1 3
# 62 "/usr/include/c++/10/bits/stl_iterator_base_types.h" 3
       
# 63 "/usr/include/c++/10/bits/stl_iterator_base_types.h" 3
# 74 "/usr/include/c++/10/bits/stl_iterator_base_types.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 93 "/usr/include/c++/10/bits/stl_iterator_base_types.h" 3
  struct input_iterator_tag { };


  struct output_iterator_tag { };


  struct forward_iterator_tag : public input_iterator_tag { };



  struct bidirectional_iterator_tag : public forward_iterator_tag { };



  struct random_access_iterator_tag : public bidirectional_iterator_tag { };
# 125 "/usr/include/c++/10/bits/stl_iterator_base_types.h" 3
  template<typename _Category, typename _Tp, typename _Distance = ptrdiff_t,
           typename _Pointer = _Tp*, typename _Reference = _Tp&>
    struct iterator
    {

      typedef _Category iterator_category;

      typedef _Tp value_type;

      typedef _Distance difference_type;

      typedef _Pointer pointer;

      typedef _Reference reference;
    };
# 149 "/usr/include/c++/10/bits/stl_iterator_base_types.h" 3
  template<typename _Iterator>
    struct iterator_traits;




  template<typename _Iterator, typename = __void_t<>>
    struct __iterator_traits { };



  template<typename _Iterator>
    struct __iterator_traits<_Iterator,
        __void_t<typename _Iterator::iterator_category,
          typename _Iterator::value_type,
          typename _Iterator::difference_type,
          typename _Iterator::pointer,
          typename _Iterator::reference>>
    {
      typedef typename _Iterator::iterator_category iterator_category;
      typedef typename _Iterator::value_type value_type;
      typedef typename _Iterator::difference_type difference_type;
      typedef typename _Iterator::pointer pointer;
      typedef typename _Iterator::reference reference;
    };


  template<typename _Iterator>
    struct iterator_traits
    : public __iterator_traits<_Iterator> { };
# 209 "/usr/include/c++/10/bits/stl_iterator_base_types.h" 3
  template<typename _Tp>
    struct iterator_traits<_Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef _Tp& reference;
    };


  template<typename _Tp>
    struct iterator_traits<const _Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef const _Tp* pointer;
      typedef const _Tp& reference;
    };






  template<typename _Iter>
    inline constexpr
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
    { return typename iterator_traits<_Iter>::iterator_category(); }




  template<typename _Iter>
    using __iterator_category_t
      = typename iterator_traits<_Iter>::iterator_category;

  template<typename _InIter>
    using _RequireInputIter =
      __enable_if_t<is_convertible<__iterator_category_t<_InIter>,
       input_iterator_tag>::value>;

  template<typename _It,
    typename _Cat = __iterator_category_t<_It>>
    struct __is_random_access_iter
      : is_base_of<random_access_iterator_tag, _Cat>
    {
      typedef is_base_of<random_access_iterator_tag, _Cat> _Base;
      enum { __value = _Base::value };
    };








}
# 66 "/usr/include/c++/10/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/10/bits/stl_iterator_base_funcs.h" 1 3
# 62 "/usr/include/c++/10/bits/stl_iterator_base_funcs.h" 3
       
# 63 "/usr/include/c++/10/bits/stl_iterator_base_funcs.h" 3

# 1 "/usr/include/c++/10/bits/concept_check.h" 1 3
# 33 "/usr/include/c++/10/bits/concept_check.h" 3
       
# 34 "/usr/include/c++/10/bits/concept_check.h" 3
# 65 "/usr/include/c++/10/bits/stl_iterator_base_funcs.h" 2 3
# 1 "/usr/include/c++/10/debug/assertions.h" 1 3
# 66 "/usr/include/c++/10/bits/stl_iterator_base_funcs.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{




  template <typename> struct _List_iterator;
  template <typename> struct _List_const_iterator;


  template<typename _InputIterator>
    inline constexpr
    typename iterator_traits<_InputIterator>::difference_type
    __distance(_InputIterator __first, _InputIterator __last,
               input_iterator_tag)
    {

     

      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      while (__first != __last)
 {
   ++__first;
   ++__n;
 }
      return __n;
    }

  template<typename _RandomAccessIterator>
    inline constexpr
    typename iterator_traits<_RandomAccessIterator>::difference_type
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
               random_access_iterator_tag)
    {

     

      return __last - __first;
    }



  template<typename _Tp>
    ptrdiff_t
    __distance(std::_List_iterator<_Tp>,
        std::_List_iterator<_Tp>,
        input_iterator_tag);

  template<typename _Tp>
    ptrdiff_t
    __distance(std::_List_const_iterator<_Tp>,
        std::_List_const_iterator<_Tp>,
        input_iterator_tag);
# 135 "/usr/include/c++/10/bits/stl_iterator_base_funcs.h" 3
  template<typename _InputIterator>
    inline
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
    {

      return std::__distance(__first, __last,
        std::__iterator_category(__first));
    }

  template<typename _InputIterator, typename _Distance>
    inline constexpr void
    __advance(_InputIterator& __i, _Distance __n, input_iterator_tag)
    {

     
      ;
      while (__n--)
 ++__i;
    }

  template<typename _BidirectionalIterator, typename _Distance>
    inline constexpr void
    __advance(_BidirectionalIterator& __i, _Distance __n,
       bidirectional_iterator_tag)
    {

     

      if (__n > 0)
        while (__n--)
   ++__i;
      else
        while (__n++)
   --__i;
    }

  template<typename _RandomAccessIterator, typename _Distance>
    inline constexpr void
    __advance(_RandomAccessIterator& __i, _Distance __n,
              random_access_iterator_tag)
    {

     

      if (__builtin_constant_p(__n) && __n == 1)
 ++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
 --__i;
      else
 __i += __n;
    }
# 200 "/usr/include/c++/10/bits/stl_iterator_base_funcs.h" 3
  template<typename _InputIterator, typename _Distance>
    inline void
    advance(_InputIterator& __i, _Distance __n)
    {

      typename iterator_traits<_InputIterator>::difference_type __d = __n;
      std::__advance(__i, __d, std::__iterator_category(__i));
    }



  template<typename _InputIterator>
    inline _InputIterator
    next(_InputIterator __x, typename
  iterator_traits<_InputIterator>::difference_type __n = 1)
    {

     
      std::advance(__x, __n);
      return __x;
    }

  template<typename _BidirectionalIterator>
    inline _BidirectionalIterator
    prev(_BidirectionalIterator __x, typename
  iterator_traits<_BidirectionalIterator>::difference_type __n = 1)
    {

     

      std::advance(__x, -__n);
      return __x;
    }




}
# 67 "/usr/include/c++/10/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/10/bits/stl_iterator.h" 1 3
# 66 "/usr/include/c++/10/bits/stl_iterator.h" 3
# 1 "/usr/include/c++/10/bits/ptr_traits.h" 1 3
# 42 "/usr/include/c++/10/bits/ptr_traits.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  class __undefined;


  template<typename _Tp>
    struct __get_first_arg
    { using type = __undefined; };

  template<template<typename, typename...> class _Template, typename _Tp,
           typename... _Types>
    struct __get_first_arg<_Template<_Tp, _Types...>>
    { using type = _Tp; };

  template<typename _Tp>
    using __get_first_arg_t = typename __get_first_arg<_Tp>::type;


  template<typename _Tp, typename _Up>
    struct __replace_first_arg
    { };

  template<template<typename, typename...> class _Template, typename _Up,
           typename _Tp, typename... _Types>
    struct __replace_first_arg<_Template<_Tp, _Types...>, _Up>
    { using type = _Template<_Up, _Types...>; };

  template<typename _Tp, typename _Up>
    using __replace_first_arg_t = typename __replace_first_arg<_Tp, _Up>::type;

  template<typename _Tp>
    using __make_not_void
      = typename conditional<is_void<_Tp>::value, __undefined, _Tp>::type;





  template<typename _Ptr>
    struct pointer_traits
    {
    private:
      template<typename _Tp>
 using __element_type = typename _Tp::element_type;

      template<typename _Tp>
 using __difference_type = typename _Tp::difference_type;

      template<typename _Tp, typename _Up, typename = void>
 struct __rebind : __replace_first_arg<_Tp, _Up> { };

      template<typename _Tp, typename _Up>
 struct __rebind<_Tp, _Up, __void_t<typename _Tp::template rebind<_Up>>>
 { using type = typename _Tp::template rebind<_Up>; };

    public:

      using pointer = _Ptr;


      using element_type
 = __detected_or_t<__get_first_arg_t<_Ptr>, __element_type, _Ptr>;


      using difference_type
 = __detected_or_t<ptrdiff_t, __difference_type, _Ptr>;


      template<typename _Up>
        using rebind = typename __rebind<_Ptr, _Up>::type;

      static _Ptr
      pointer_to(__make_not_void<element_type>& __e)
      { return _Ptr::pointer_to(__e); }

      static_assert(!is_same<element_type, __undefined>::value,
   "pointer type defines element_type or is like SomePointer<T, Args>");
    };





  template<typename _Tp>
    struct pointer_traits<_Tp*>
    {

      typedef _Tp* pointer;

      typedef _Tp element_type;

      typedef ptrdiff_t difference_type;

      template<typename _Up>
        using rebind = _Up*;






      static pointer
      pointer_to(__make_not_void<element_type>& __r) noexcept
      { return std::addressof(__r); }
    };


  template<typename _Ptr, typename _Tp>
    using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;

  template<typename _Tp>
    constexpr _Tp*
    __to_address(_Tp* __ptr) noexcept
    {
      static_assert(!std::is_function<_Tp>::value, "not a function pointer");
      return __ptr;
    }


  template<typename _Ptr>
    constexpr typename std::pointer_traits<_Ptr>::element_type*
    __to_address(const _Ptr& __ptr)
    { return std::__to_address(__ptr.operator->()); }
# 210 "/usr/include/c++/10/bits/ptr_traits.h" 3

}
# 67 "/usr/include/c++/10/bits/stl_iterator.h" 2 3
# 85 "/usr/include/c++/10/bits/stl_iterator.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 124 "/usr/include/c++/10/bits/stl_iterator.h" 3
  template<typename _Iterator>
    class reverse_iterator
    : public iterator<typename iterator_traits<_Iterator>::iterator_category,
        typename iterator_traits<_Iterator>::value_type,
        typename iterator_traits<_Iterator>::difference_type,
        typename iterator_traits<_Iterator>::pointer,
                      typename iterator_traits<_Iterator>::reference>
    {
    protected:
      _Iterator current;

      typedef iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::difference_type difference_type;
      typedef typename __traits_type::pointer pointer;
      typedef typename __traits_type::reference reference;
# 160 "/usr/include/c++/10/bits/stl_iterator.h" 3
     
      reverse_iterator() : current() { }




      explicit
      reverse_iterator(iterator_type __x) : current(__x) { }




     
      reverse_iterator(const reverse_iterator& __x)
      : current(__x.current) { }


      reverse_iterator& operator=(const reverse_iterator&) = default;






      template<typename _Iter>

        reverse_iterator(const reverse_iterator<_Iter>& __x)
 : current(__x.base()) { }




      iterator_type
      base() const
      { return current; }
# 206 "/usr/include/c++/10/bits/stl_iterator.h" 3
      reference
      operator*() const
      {
 _Iterator __tmp = current;
 return *--__tmp;
      }






      pointer
      operator->() const




      {


 _Iterator __tmp = current;
 --__tmp;
 return _S_to_pointer(__tmp);
      }






      reverse_iterator&
      operator++()
      {
 --current;
 return *this;
      }






      reverse_iterator
      operator++(int)
      {
 reverse_iterator __tmp = *this;
 --current;
 return __tmp;
      }






      reverse_iterator&
      operator--()
      {
 ++current;
 return *this;
      }






      reverse_iterator
      operator--(int)
      {
 reverse_iterator __tmp = *this;
 ++current;
 return __tmp;
      }






      reverse_iterator
      operator+(difference_type __n) const
      { return reverse_iterator(current - __n); }







      reverse_iterator&
      operator+=(difference_type __n)
      {
 current -= __n;
 return *this;
      }






      reverse_iterator
      operator-(difference_type __n) const
      { return reverse_iterator(current + __n); }







      reverse_iterator&
      operator-=(difference_type __n)
      {
 current += __n;
 return *this;
      }






      reference
      operator[](difference_type __n) const
      { return *(*this + __n); }
# 360 "/usr/include/c++/10/bits/stl_iterator.h" 3
    private:
      template<typename _Tp>
 static _Tp*
 _S_to_pointer(_Tp* __p)
        { return __p; }

      template<typename _Tp>
 static pointer
 _S_to_pointer(_Tp __t)
        { return __t.operator->(); }
    };
# 383 "/usr/include/c++/10/bits/stl_iterator.h" 3
  template<typename _Iterator>
    inline bool
    operator==(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return __x.base() == __y.base(); }

  template<typename _Iterator>
    inline bool
    operator<(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y.base() < __x.base(); }

  template<typename _Iterator>
    inline bool
    operator!=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x == __y); }

  template<typename _Iterator>
    inline bool
    operator>(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y < __x; }

  template<typename _Iterator>
    inline bool
    operator<=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__y < __x); }

  template<typename _Iterator>
    inline bool
    operator>=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x < __y); }



  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator==(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return __x.base() == __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __y.base() < __x.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator!=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__x == __y); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __y < __x; }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__y < __x); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__x < __y); }
# 523 "/usr/include/c++/10/bits/stl_iterator.h" 3
  template<typename _IteratorL, typename _IteratorR>
    inline auto
    operator-(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    -> decltype(__y.base() - __x.base())
    { return __y.base() - __x.base(); }


  template<typename _Iterator>
    inline reverse_iterator<_Iterator>
    operator+(typename reverse_iterator<_Iterator>::difference_type __n,
       const reverse_iterator<_Iterator>& __x)
    { return reverse_iterator<_Iterator>(__x.base() - __n); }



  template<typename _Iterator>
    inline reverse_iterator<_Iterator>
    __make_reverse_iterator(_Iterator __i)
    { return reverse_iterator<_Iterator>(__i); }







  template<typename _Iterator>
    inline reverse_iterator<_Iterator>
    make_reverse_iterator(_Iterator __i)
    { return reverse_iterator<_Iterator>(__i); }
# 564 "/usr/include/c++/10/bits/stl_iterator.h" 3
  template<typename _Iterator>
   
    auto
    __niter_base(reverse_iterator<_Iterator> __it)
    -> decltype(__make_reverse_iterator(__niter_base(__it.base())))
    { return __make_reverse_iterator(__niter_base(__it.base())); }

  template<typename _Iterator>
    struct __is_move_iterator<reverse_iterator<_Iterator> >
      : __is_move_iterator<_Iterator>
    { };

  template<typename _Iterator>
   
    auto
    __miter_base(reverse_iterator<_Iterator> __it)
    -> decltype(__make_reverse_iterator(__miter_base(__it.base())))
    { return __make_reverse_iterator(__miter_base(__it.base())); }
# 595 "/usr/include/c++/10/bits/stl_iterator.h" 3
  template<typename _Container>
    class back_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;







      explicit
      back_insert_iterator(_Container& __x)
      : container(std::__addressof(__x)) { }
# 635 "/usr/include/c++/10/bits/stl_iterator.h" 3
     
      back_insert_iterator&
      operator=(const typename _Container::value_type& __value)
      {
 container->push_back(__value);
 return *this;
      }

     
      back_insert_iterator&
      operator=(typename _Container::value_type&& __value)
      {
 container->push_back(std::move(__value));
 return *this;
      }



     
      back_insert_iterator&
      operator*()
      { return *this; }


     
      back_insert_iterator&
      operator++()
      { return *this; }


     
      back_insert_iterator
      operator++(int)
      { return *this; }
    };
# 682 "/usr/include/c++/10/bits/stl_iterator.h" 3
  template<typename _Container>
   
    inline back_insert_iterator<_Container>
    back_inserter(_Container& __x)
    { return back_insert_iterator<_Container>(__x); }
# 698 "/usr/include/c++/10/bits/stl_iterator.h" 3
  template<typename _Container>
    class front_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;







      explicit
      front_insert_iterator(_Container& __x)
      : container(std::__addressof(__x)) { }
# 738 "/usr/include/c++/10/bits/stl_iterator.h" 3
     
      front_insert_iterator&
      operator=(const typename _Container::value_type& __value)
      {
 container->push_front(__value);
 return *this;
      }

     
      front_insert_iterator&
      operator=(typename _Container::value_type&& __value)
      {
 container->push_front(std::move(__value));
 return *this;
      }



     
      front_insert_iterator&
      operator*()
      { return *this; }


     
      front_insert_iterator&
      operator++()
      { return *this; }


     
      front_insert_iterator
      operator++(int)
      { return *this; }
    };
# 785 "/usr/include/c++/10/bits/stl_iterator.h" 3
  template<typename _Container>
   
    inline front_insert_iterator<_Container>
    front_inserter(_Container& __x)
    { return front_insert_iterator<_Container>(__x); }
# 805 "/usr/include/c++/10/bits/stl_iterator.h" 3
  template<typename _Container>
    class insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {







      typedef typename _Container::iterator _Iter;

    protected:
      _Container* container;
      _Iter iter;


    public:

      typedef _Container container_type;
# 837 "/usr/include/c++/10/bits/stl_iterator.h" 3
     
      insert_iterator(_Container& __x, _Iter __i)
      : container(std::__addressof(__x)), iter(__i) {}
# 873 "/usr/include/c++/10/bits/stl_iterator.h" 3
     
      insert_iterator&
      operator=(const typename _Container::value_type& __value)
      {
 iter = container->insert(iter, __value);
 ++iter;
 return *this;
      }

     
      insert_iterator&
      operator=(typename _Container::value_type&& __value)
      {
 iter = container->insert(iter, std::move(__value));
 ++iter;
 return *this;
      }



     
      insert_iterator&
      operator*()
      { return *this; }


     
      insert_iterator&
      operator++()
      { return *this; }


     
      insert_iterator&
      operator++(int)
      { return *this; }
    };
# 929 "/usr/include/c++/10/bits/stl_iterator.h" 3
  template<typename _Container, typename _Iterator>
    inline insert_iterator<_Container>
    inserter(_Container& __x, _Iterator __i)
    {
      return insert_iterator<_Container>(__x,
      typename _Container::iterator(__i));
    }





}

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{

# 954 "/usr/include/c++/10/bits/stl_iterator.h" 3
  template<typename _Iterator, typename _Container>
    class __normal_iterator
    {
    protected:
      _Iterator _M_current;

      typedef std::iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::iterator_category iterator_category;
      typedef typename __traits_type::value_type value_type;
      typedef typename __traits_type::difference_type difference_type;
      typedef typename __traits_type::reference reference;
      typedef typename __traits_type::pointer pointer;





      constexpr __normal_iterator() noexcept
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) noexcept
      : _M_current(__i) { }


      template<typename _Iter>
       
        __normal_iterator(const __normal_iterator<_Iter,
     typename __enable_if<
              (std::__are_same<_Iter, typename _Container::pointer>::__value),
        _Container>::__type>& __i) noexcept
        : _M_current(__i.base()) { }


     
      reference
      operator*() const noexcept
      { return *_M_current; }

     
      pointer
      operator->() const noexcept
      { return _M_current; }

     
      __normal_iterator&
      operator++() noexcept
      {
 ++_M_current;
 return *this;
      }

     
      __normal_iterator
      operator++(int) noexcept
      { return __normal_iterator(_M_current++); }


     
      __normal_iterator&
      operator--() noexcept
      {
 --_M_current;
 return *this;
      }

     
      __normal_iterator
      operator--(int) noexcept
      { return __normal_iterator(_M_current--); }


     
      reference
      operator[](difference_type __n) const noexcept
      { return _M_current[__n]; }

     
      __normal_iterator&
      operator+=(difference_type __n) noexcept
      { _M_current += __n; return *this; }

     
      __normal_iterator
      operator+(difference_type __n) const noexcept
      { return __normal_iterator(_M_current + __n); }

     
      __normal_iterator&
      operator-=(difference_type __n) noexcept
      { _M_current -= __n; return *this; }

     
      __normal_iterator
      operator-(difference_type __n) const noexcept
      { return __normal_iterator(_M_current - __n); }

     
      const _Iterator&
      base() const noexcept
      { return _M_current; }
    };
# 1086 "/usr/include/c++/10/bits/stl_iterator.h" 3
  template<typename _IteratorL, typename _IteratorR, typename _Container>
   
    inline bool
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() == __rhs.base(); }

  template<typename _Iterator, typename _Container>
   
    inline bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() == __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
   
    inline bool
    operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
   
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() != __rhs.base(); }


  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() < __rhs.base(); }

  template<typename _Iterator, typename _Container>
   
    inline bool
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() < __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() > __rhs.base(); }

  template<typename _Iterator, typename _Container>
   
    inline bool
    operator>(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() > __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() <= __rhs.base(); }

  template<typename _Iterator, typename _Container>
   
    inline bool
    operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() <= __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() >= __rhs.base(); }

  template<typename _Iterator, typename _Container>
   
    inline bool
    operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() >= __rhs.base(); }






  template<typename _IteratorL, typename _IteratorR, typename _Container>


   
    inline auto
    operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs) noexcept
    -> decltype(__lhs.base() - __rhs.base())





    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
   
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
   
    inline __normal_iterator<_Iterator, _Container>
    operator+(typename __normal_iterator<_Iterator, _Container>::difference_type
       __n, const __normal_iterator<_Iterator, _Container>& __i)
    noexcept
    { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }


}

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Iterator, typename _Container>
   
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
    noexcept(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it.base(); }
# 1285 "/usr/include/c++/10/bits/stl_iterator.h" 3
  template<typename _Iterator>
    class move_iterator
    {
      _Iterator _M_current;

      using __traits_type = iterator_traits<_Iterator>;



      using __base_ref = typename __traits_type::reference;


    public:
      using iterator_type = _Iterator;
# 1309 "/usr/include/c++/10/bits/stl_iterator.h" 3
      typedef typename __traits_type::iterator_category iterator_category;
      typedef typename __traits_type::value_type value_type;
      typedef typename __traits_type::difference_type difference_type;

      typedef _Iterator pointer;


      typedef typename conditional<is_reference<__base_ref>::value,
    typename remove_reference<__base_ref>::type&&,
    __base_ref>::type reference;


     
      move_iterator()
      : _M_current() { }

      explicit
      move_iterator(iterator_type __i)
      : _M_current(std::move(__i)) { }

      template<typename _Iter>

 move_iterator(const move_iterator<_Iter>& __i)
 : _M_current(__i.base()) { }


      iterator_type
      base() const
      { return _M_current; }
# 1351 "/usr/include/c++/10/bits/stl_iterator.h" 3
      reference
      operator*() const



      { return static_cast<reference>(*_M_current); }


      pointer
      operator->() const
      { return _M_current; }

      move_iterator&
      operator++()
      {
 ++_M_current;
 return *this;
      }

      move_iterator
      operator++(int)
      {
 move_iterator __tmp = *this;
 ++_M_current;
 return __tmp;
      }







      move_iterator&
      operator--()
      {
 --_M_current;
 return *this;
      }

      move_iterator
      operator--(int)
      {
 move_iterator __tmp = *this;
 --_M_current;
 return __tmp;
      }

      move_iterator
      operator+(difference_type __n) const
      { return move_iterator(_M_current + __n); }

      move_iterator&
      operator+=(difference_type __n)
      {
 _M_current += __n;
 return *this;
      }

      move_iterator
      operator-(difference_type __n) const
      { return move_iterator(_M_current - __n); }

      move_iterator&
      operator-=(difference_type __n)
      {
 _M_current -= __n;
 return *this;
      }

      reference
      operator[](difference_type __n) const



      { return std::move(_M_current[__n]); }
# 1456 "/usr/include/c++/10/bits/stl_iterator.h" 3
    };

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator==(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)



    { return __x.base() == __y.base(); }
# 1475 "/usr/include/c++/10/bits/stl_iterator.h" 3
  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator!=(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return !(__x == __y); }


  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<(const move_iterator<_IteratorL>& __x,
       const move_iterator<_IteratorR>& __y)



    { return __x.base() < __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<=(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)



    { return !(__y < __x); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>(const move_iterator<_IteratorL>& __x,
       const move_iterator<_IteratorR>& __y)



    { return __y < __x; }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>=(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)



    { return !(__x < __y); }
# 1526 "/usr/include/c++/10/bits/stl_iterator.h" 3
  template<typename _Iterator>
    inline bool
    operator==(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return __x.base() == __y.base(); }

  template<typename _Iterator>
    inline bool
    operator!=(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return !(__x == __y); }

  template<typename _Iterator>
    inline bool
    operator<(const move_iterator<_Iterator>& __x,
       const move_iterator<_Iterator>& __y)
    { return __x.base() < __y.base(); }

  template<typename _Iterator>
    inline bool
    operator<=(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return !(__y < __x); }

  template<typename _Iterator>
    inline bool
    operator>(const move_iterator<_Iterator>& __x,
       const move_iterator<_Iterator>& __y)
    { return __y < __x; }

  template<typename _Iterator>
    inline bool
    operator>=(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return !(__x < __y); }



  template<typename _IteratorL, typename _IteratorR>
    inline auto
    operator-(const move_iterator<_IteratorL>& __x,
       const move_iterator<_IteratorR>& __y)
    -> decltype(__x.base() - __y.base())
    { return __x.base() - __y.base(); }

  template<typename _Iterator>
    inline move_iterator<_Iterator>
    operator+(typename move_iterator<_Iterator>::difference_type __n,
       const move_iterator<_Iterator>& __x)
    { return __x + __n; }

  template<typename _Iterator>
    inline move_iterator<_Iterator>
    make_move_iterator(_Iterator __i)
    { return move_iterator<_Iterator>(std::move(__i)); }

  template<typename _Iterator, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond
      <typename iterator_traits<_Iterator>::value_type>::value,
                _Iterator, move_iterator<_Iterator>>::type>
    inline _ReturnType
    __make_move_if_noexcept_iterator(_Iterator __i)
    { return _ReturnType(__i); }



  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
      const _Tp*, move_iterator<_Tp*>>::type>
    inline _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
    { return _ReturnType(__i); }
# 2183 "/usr/include/c++/10/bits/stl_iterator.h" 3
  template<typename _Iterator>
    auto
    __niter_base(move_iterator<_Iterator> __it)
    -> decltype(make_move_iterator(__niter_base(__it.base())))
    { return make_move_iterator(__niter_base(__it.base())); }

  template<typename _Iterator>
    struct __is_move_iterator<move_iterator<_Iterator> >
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
# 2230 "/usr/include/c++/10/bits/stl_iterator.h" 3

}
# 68 "/usr/include/c++/10/bits/stl_algobase.h" 2 3

# 1 "/usr/include/c++/10/debug/debug.h" 1 3
# 48 "/usr/include/c++/10/debug/debug.h" 3
namespace std
{
  namespace __debug { }
}




namespace __gnu_debug
{
  using namespace std::__debug;

  template<typename _Ite, typename _Seq, typename _Cat>
    struct _Safe_iterator;
}
# 70 "/usr/include/c++/10/bits/stl_algobase.h" 2 3

# 1 "/usr/include/c++/10/bits/predefined_ops.h" 1 3
# 33 "/usr/include/c++/10/bits/predefined_ops.h" 3
namespace __gnu_cxx
{
namespace __ops
{
  struct _Iter_less_iter
  {
    template<typename _Iterator1, typename _Iterator2>
      constexpr
      bool
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
      { return *__it1 < *__it2; }
  };

  constexpr
  inline _Iter_less_iter
  __iter_less_iter()
  { return _Iter_less_iter(); }

  struct _Iter_less_val
  {

    constexpr _Iter_less_val() = default;




   
    explicit
    _Iter_less_val(_Iter_less_iter) { }

    template<typename _Iterator, typename _Value>
     
      bool
      operator()(_Iterator __it, _Value& __val) const
      { return *__it < __val; }
  };

 
  inline _Iter_less_val
  __iter_less_val()
  { return _Iter_less_val(); }

 
  inline _Iter_less_val
  __iter_comp_val(_Iter_less_iter)
  { return _Iter_less_val(); }

  struct _Val_less_iter
  {

    constexpr _Val_less_iter() = default;




   
    explicit
    _Val_less_iter(_Iter_less_iter) { }

    template<typename _Value, typename _Iterator>
     
      bool
      operator()(_Value& __val, _Iterator __it) const
      { return __val < *__it; }
  };

 
  inline _Val_less_iter
  __val_less_iter()
  { return _Val_less_iter(); }

 
  inline _Val_less_iter
  __val_comp_iter(_Iter_less_iter)
  { return _Val_less_iter(); }

  struct _Iter_equal_to_iter
  {
    template<typename _Iterator1, typename _Iterator2>
     
      bool
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
      { return *__it1 == *__it2; }
  };

 
  inline _Iter_equal_to_iter
  __iter_equal_to_iter()
  { return _Iter_equal_to_iter(); }

  struct _Iter_equal_to_val
  {
    template<typename _Iterator, typename _Value>
     
      bool
      operator()(_Iterator __it, _Value& __val) const
      { return *__it == __val; }
  };

 
  inline _Iter_equal_to_val
  __iter_equal_to_val()
  { return _Iter_equal_to_val(); }

 
  inline _Iter_equal_to_val
  __iter_comp_val(_Iter_equal_to_iter)
  { return _Iter_equal_to_val(); }

  template<typename _Compare>
    struct _Iter_comp_iter
    {
      _Compare _M_comp;

      explicit constexpr
      _Iter_comp_iter(_Compare __comp)
 : _M_comp(std::move(__comp))
      { }

      template<typename _Iterator1, typename _Iterator2>
        constexpr
        bool
        operator()(_Iterator1 __it1, _Iterator2 __it2)
        { return bool(_M_comp(*__it1, *__it2)); }
    };

  template<typename _Compare>
    constexpr
    inline _Iter_comp_iter<_Compare>
    __iter_comp_iter(_Compare __comp)
    { return _Iter_comp_iter<_Compare>(std::move(__comp)); }

  template<typename _Compare>
    struct _Iter_comp_val
    {
      _Compare _M_comp;

     
      explicit
      _Iter_comp_val(_Compare __comp)
 : _M_comp(std::move(__comp))
      { }

     
      explicit
      _Iter_comp_val(const _Iter_comp_iter<_Compare>& __comp)
 : _M_comp(__comp._M_comp)
      { }


     
      explicit
      _Iter_comp_val(_Iter_comp_iter<_Compare>&& __comp)
 : _M_comp(std::move(__comp._M_comp))
      { }


      template<typename _Iterator, typename _Value>

 bool
 operator()(_Iterator __it, _Value& __val)
 { return bool(_M_comp(*__it, __val)); }
    };

  template<typename _Compare>
   
    inline _Iter_comp_val<_Compare>
    __iter_comp_val(_Compare __comp)
    { return _Iter_comp_val<_Compare>(std::move(__comp)); }

  template<typename _Compare>
   
    inline _Iter_comp_val<_Compare>
    __iter_comp_val(_Iter_comp_iter<_Compare> __comp)
    { return _Iter_comp_val<_Compare>(std::move(__comp)); }

  template<typename _Compare>
    struct _Val_comp_iter
    {
      _Compare _M_comp;

     
      explicit
      _Val_comp_iter(_Compare __comp)
 : _M_comp(std::move(__comp))
      { }

     
      explicit
      _Val_comp_iter(const _Iter_comp_iter<_Compare>& __comp)
 : _M_comp(__comp._M_comp)
      { }


     
      explicit
      _Val_comp_iter(_Iter_comp_iter<_Compare>&& __comp)
 : _M_comp(std::move(__comp._M_comp))
      { }


      template<typename _Value, typename _Iterator>

 bool
 operator()(_Value& __val, _Iterator __it)
 { return bool(_M_comp(__val, *__it)); }
    };

  template<typename _Compare>
   
    inline _Val_comp_iter<_Compare>
    __val_comp_iter(_Compare __comp)
    { return _Val_comp_iter<_Compare>(std::move(__comp)); }

  template<typename _Compare>
   
    inline _Val_comp_iter<_Compare>
    __val_comp_iter(_Iter_comp_iter<_Compare> __comp)
    { return _Val_comp_iter<_Compare>(std::move(__comp)); }

  template<typename _Value>
    struct _Iter_equals_val
    {
      _Value& _M_value;

     
      explicit
      _Iter_equals_val(_Value& __value)
 : _M_value(__value)
      { }

      template<typename _Iterator>

 bool
 operator()(_Iterator __it)
 { return *__it == _M_value; }
    };

  template<typename _Value>
   
    inline _Iter_equals_val<_Value>
    __iter_equals_val(_Value& __val)
    { return _Iter_equals_val<_Value>(__val); }

  template<typename _Iterator1>
    struct _Iter_equals_iter
    {
      _Iterator1 _M_it1;

     
      explicit
      _Iter_equals_iter(_Iterator1 __it1)
 : _M_it1(__it1)
      { }

      template<typename _Iterator2>

 bool
 operator()(_Iterator2 __it2)
 { return *__it2 == *_M_it1; }
    };

  template<typename _Iterator>
   
    inline _Iter_equals_iter<_Iterator>
    __iter_comp_iter(_Iter_equal_to_iter, _Iterator __it)
    { return _Iter_equals_iter<_Iterator>(__it); }

  template<typename _Predicate>
    struct _Iter_pred
    {
      _Predicate _M_pred;

     
      explicit
      _Iter_pred(_Predicate __pred)
 : _M_pred(std::move(__pred))
      { }

      template<typename _Iterator>

 bool
 operator()(_Iterator __it)
 { return bool(_M_pred(*__it)); }
    };

  template<typename _Predicate>
   
    inline _Iter_pred<_Predicate>
    __pred_iter(_Predicate __pred)
    { return _Iter_pred<_Predicate>(std::move(__pred)); }

  template<typename _Compare, typename _Value>
    struct _Iter_comp_to_val
    {
      _Compare _M_comp;
      _Value& _M_value;

     
      _Iter_comp_to_val(_Compare __comp, _Value& __value)
 : _M_comp(std::move(__comp)), _M_value(__value)
      { }

      template<typename _Iterator>

 bool
 operator()(_Iterator __it)
 { return bool(_M_comp(*__it, _M_value)); }
    };

  template<typename _Compare, typename _Value>
    _Iter_comp_to_val<_Compare, _Value>
   
    __iter_comp_val(_Compare __comp, _Value &__val)
    {
      return _Iter_comp_to_val<_Compare, _Value>(std::move(__comp), __val);
    }

  template<typename _Compare, typename _Iterator1>
    struct _Iter_comp_to_iter
    {
      _Compare _M_comp;
      _Iterator1 _M_it1;

     
      _Iter_comp_to_iter(_Compare __comp, _Iterator1 __it1)
 : _M_comp(std::move(__comp)), _M_it1(__it1)
      { }

      template<typename _Iterator2>

 bool
 operator()(_Iterator2 __it2)
 { return bool(_M_comp(*__it2, *_M_it1)); }
    };

  template<typename _Compare, typename _Iterator>
   
    inline _Iter_comp_to_iter<_Compare, _Iterator>
    __iter_comp_iter(_Iter_comp_iter<_Compare> __comp, _Iterator __it)
    {
      return _Iter_comp_to_iter<_Compare, _Iterator>(
   std::move(__comp._M_comp), __it);
    }

  template<typename _Predicate>
    struct _Iter_negate
    {
      _Predicate _M_pred;

     
      explicit
      _Iter_negate(_Predicate __pred)
 : _M_pred(std::move(__pred))
      { }

      template<typename _Iterator>

 bool
 operator()(_Iterator __it)
 { return !bool(_M_pred(*__it)); }
    };

  template<typename _Predicate>
   
    inline _Iter_negate<_Predicate>
    __negate(_Iter_pred<_Predicate> __pred)
    { return _Iter_negate<_Predicate>(std::move(__pred._M_pred)); }

}
}
# 72 "/usr/include/c++/10/bits/stl_algobase.h" 2 3







namespace std __attribute__ ((__visibility__ ("default")))
{






  template<typename _Tp, typename _Up>
    constexpr
    inline int
    __memcmp(const _Tp* __first1, const _Up* __first2, size_t __num)
    {

      static_assert(sizeof(_Tp) == sizeof(_Up), "can be compared with memcmp");
# 105 "/usr/include/c++/10/bits/stl_algobase.h" 3
 return __builtin_memcmp(__first1, __first2, sizeof(_Tp) * __num);
    }
# 149 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
   
    inline void
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
    {

     

     
# 182 "/usr/include/c++/10/bits/stl_algobase.h" 3
      swap(*__a, *__b);

    }
# 198 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
   
    _ForwardIterator2
    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
  _ForwardIterator2 __first2)
    {

     

     

      ;

      for (; __first1 != __last1; ++__first1, (void)++__first2)
 std::iter_swap(__first1, __first2);
      return __first2;
    }
# 227 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _Tp>
    constexpr
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
    {

     

      if (__b < __a)
 return __b;
      return __a;
    }
# 251 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _Tp>
    constexpr
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
    {

     

      if (__a < __b)
 return __b;
      return __a;
    }
# 275 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _Tp, typename _Compare>
    constexpr
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__b, __a))
 return __b;
      return __a;
    }
# 297 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _Tp, typename _Compare>
    constexpr
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__a, __b))
 return __b;
      return __a;
    }



  template<typename _Iterator>
   
    inline _Iterator
    __niter_base(_Iterator __it)
    noexcept(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }




  template<typename _From, typename _To>
   
    inline _From
    __niter_wrap(_From __from, _To __res)
    { return __from + (__res - std::__niter_base(__from)); }


  template<typename _Iterator>
   
    inline _Iterator
    __niter_wrap(const _Iterator&, _Iterator __res)
    { return __res; }







  template<bool _IsMove, bool _IsSimple, typename _Category>
    struct __copy_move
    {
      template<typename _II, typename _OI>

 static _OI
 __copy_m(_II __first, _II __last, _OI __result)
 {
   for (; __first != __last; ++__result, (void)++__first)
     *__result = *__first;
   return __result;
 }
    };


  template<typename _Category>
    struct __copy_move<true, false, _Category>
    {
      template<typename _II, typename _OI>

 static _OI
 __copy_m(_II __first, _II __last, _OI __result)
 {
   for (; __first != __last; ++__result, (void)++__first)
     *__result = std::move(*__first);
   return __result;
 }
    };


  template<>
    struct __copy_move<false, false, random_access_iterator_tag>
    {
      template<typename _II, typename _OI>

 static _OI
 __copy_m(_II __first, _II __last, _OI __result)
 {
   typedef typename iterator_traits<_II>::difference_type _Distance;
   for(_Distance __n = __last - __first; __n > 0; --__n)
     {
       *__result = *__first;
       ++__first;
       ++__result;
     }
   return __result;
 }
    };


  template<>
    struct __copy_move<true, false, random_access_iterator_tag>
    {
      template<typename _II, typename _OI>

 static _OI
 __copy_m(_II __first, _II __last, _OI __result)
 {
   typedef typename iterator_traits<_II>::difference_type _Distance;
   for(_Distance __n = __last - __first; __n > 0; --__n)
     {
       *__result = std::move(*__first);
       ++__first;
       ++__result;
     }
   return __result;
 }
    };


  template<bool _IsMove>
    struct __copy_move<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>

 static _Tp*
 __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 {

   using __assignable = conditional<_IsMove,
        is_move_assignable<_Tp>,
        is_copy_assignable<_Tp>>;

   static_assert( __assignable::type::value, "type is not assignable" );

   const ptrdiff_t _Num = __last - __first;
   if (_Num)
     __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   return __result + _Num;
 }
    };



  template<typename _CharT>
    struct char_traits;

  template<typename _CharT, typename _Traits>
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits>
    class ostreambuf_iterator;

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(_CharT*, _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(const _CharT*, const _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        _CharT*>::__type
    __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
     istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);

  template<bool _IsMove, typename _II, typename _OI>
   
    inline _OI
    __copy_move_a2(_II __first, _II __last, _OI __result)
    {
      typedef typename iterator_traits<_II>::iterator_category _Category;





      return std::__copy_move<_IsMove, __memcpyable<_OI, _II>::__value,
         _Category>::__copy_m(__first, __last, __result);
    }



  template<typename _Tp, typename _Ref, typename _Ptr>
    struct _Deque_iterator;



  template<bool _IsMove,
    typename _Tp, typename _Ref, typename _Ptr, typename _OI>
    _OI
    __copy_move_a1(std::_Deque_iterator<_Tp, _Ref, _Ptr>,
     std::_Deque_iterator<_Tp, _Ref, _Ptr>,
     _OI);

  template<bool _IsMove,
    typename _ITp, typename _IRef, typename _IPtr, typename _OTp>
    std::_Deque_iterator<_OTp, _OTp&, _OTp*>
    __copy_move_a1(std::_Deque_iterator<_ITp, _IRef, _IPtr>,
     std::_Deque_iterator<_ITp, _IRef, _IPtr>,
     std::_Deque_iterator<_OTp, _OTp&, _OTp*>);

  template<bool _IsMove, typename _II, typename _Tp>
    typename __gnu_cxx::__enable_if<
      __is_random_access_iter<_II>::__value,
      std::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
    __copy_move_a1(_II, _II, std::_Deque_iterator<_Tp, _Tp&, _Tp*>);

  template<bool _IsMove, typename _II, typename _OI>
   
    inline _OI
    __copy_move_a1(_II __first, _II __last, _OI __result)
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }

  template<bool _IsMove, typename _II, typename _OI>
   
    inline _OI
    __copy_move_a(_II __first, _II __last, _OI __result)
    {
      return std::__niter_wrap(__result,
  std::__copy_move_a1<_IsMove>(std::__niter_base(__first),
          std::__niter_base(__last),
          std::__niter_base(__result)));
    }

  template<bool _IsMove,
    typename _Ite, typename _Seq, typename _Cat, typename _OI>
    _OI
    __copy_move_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
    const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
    _OI);

  template<bool _IsMove,
    typename _II, typename _Ite, typename _Seq, typename _Cat>
    __gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>
    __copy_move_a(_II, _II,
    const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&);

  template<bool _IsMove,
    typename _IIte, typename _ISeq, typename _ICat,
    typename _OIte, typename _OSeq, typename _OCat>
    ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>
    __copy_move_a(const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
    const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
    const ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>&);
# 557 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _II, typename _OI>
   
    inline _OI
    copy(_II __first, _II __last, _OI __result)
    {

     
     

      ;

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
      (std::__miter_base(__first), std::__miter_base(__last), __result);
    }
# 590 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _II, typename _OI>
   
    inline _OI
    move(_II __first, _II __last, _OI __result)
    {

     
     

      ;

      return std::__copy_move_a<true>(std::__miter_base(__first),
          std::__miter_base(__last), __result);
    }






  template<bool _IsMove, bool _IsSimple, typename _Category>
    struct __copy_move_backward
    {
      template<typename _BI1, typename _BI2>

 static _BI2
 __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 {
   while (__first != __last)
     *--__result = *--__last;
   return __result;
 }
    };


  template<typename _Category>
    struct __copy_move_backward<true, false, _Category>
    {
      template<typename _BI1, typename _BI2>

 static _BI2
 __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 {
   while (__first != __last)
     *--__result = std::move(*--__last);
   return __result;
 }
    };


  template<>
    struct __copy_move_backward<false, false, random_access_iterator_tag>
    {
      template<typename _BI1, typename _BI2>

 static _BI2
 __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 {
   typename iterator_traits<_BI1>::difference_type
     __n = __last - __first;
   for (; __n > 0; --__n)
     *--__result = *--__last;
   return __result;
 }
    };


  template<>
    struct __copy_move_backward<true, false, random_access_iterator_tag>
    {
      template<typename _BI1, typename _BI2>

 static _BI2
 __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 {
   typename iterator_traits<_BI1>::difference_type
     __n = __last - __first;
   for (; __n > 0; --__n)
     *--__result = std::move(*--__last);
   return __result;
 }
    };


  template<bool _IsMove>
    struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>

 static _Tp*
 __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 {

   using __assignable = conditional<_IsMove,
        is_move_assignable<_Tp>,
        is_copy_assignable<_Tp>>;

   static_assert( __assignable::type::value, "type is not assignable" );

   const ptrdiff_t _Num = __last - __first;
   if (_Num)
     __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   return __result - _Num;
 }
    };

  template<bool _IsMove, typename _BI1, typename _BI2>
   
    inline _BI2
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      typedef typename iterator_traits<_BI1>::iterator_category _Category;





      return std::__copy_move_backward<_IsMove,
           __memcpyable<_BI2, _BI1>::__value,
           _Category>::__copy_move_b(__first,
         __last,
         __result);
    }

  template<bool _IsMove, typename _BI1, typename _BI2>
   
    inline _BI2
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }

  template<bool _IsMove,
    typename _Tp, typename _Ref, typename _Ptr, typename _OI>
    _OI
    __copy_move_backward_a1(std::_Deque_iterator<_Tp, _Ref, _Ptr>,
       std::_Deque_iterator<_Tp, _Ref, _Ptr>,
       _OI);

  template<bool _IsMove,
    typename _ITp, typename _IRef, typename _IPtr, typename _OTp>
    std::_Deque_iterator<_OTp, _OTp&, _OTp*>
    __copy_move_backward_a1(
   std::_Deque_iterator<_ITp, _IRef, _IPtr>,
   std::_Deque_iterator<_ITp, _IRef, _IPtr>,
   std::_Deque_iterator<_OTp, _OTp&, _OTp*>);

  template<bool _IsMove, typename _II, typename _Tp>
    typename __gnu_cxx::__enable_if<
      __is_random_access_iter<_II>::__value,
      std::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
    __copy_move_backward_a1(_II, _II,
       std::_Deque_iterator<_Tp, _Tp&, _Tp*>);

  template<bool _IsMove, typename _II, typename _OI>
   
    inline _OI
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
    {
      return std::__niter_wrap(__result,
  std::__copy_move_backward_a1<_IsMove>
    (std::__niter_base(__first), std::__niter_base(__last),
     std::__niter_base(__result)));
    }

  template<bool _IsMove,
    typename _Ite, typename _Seq, typename _Cat, typename _OI>
    _OI
    __copy_move_backward_a(
  const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
  const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
  _OI);

  template<bool _IsMove,
    typename _II, typename _Ite, typename _Seq, typename _Cat>
    __gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>
    __copy_move_backward_a(_II, _II,
  const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&);

  template<bool _IsMove,
    typename _IIte, typename _ISeq, typename _ICat,
    typename _OIte, typename _OSeq, typename _OCat>
    ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>
    __copy_move_backward_a(
  const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
  const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
  const ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>&);
# 794 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _BI1, typename _BI2>
   
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
    {

     
     
     


      ;

      return std::__copy_move_backward_a<__is_move_iterator<_BI1>::__value>
      (std::__miter_base(__first), std::__miter_base(__last), __result);
    }
# 830 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _BI1, typename _BI2>
   
    inline _BI2
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
    {

     
     
     


      ;

      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
            std::__miter_base(__last),
            __result);
    }






  template<typename _ForwardIterator, typename _Tp>
   
    inline typename
    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, void>::__type
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
       const _Tp& __value)
    {
      for (; __first != __last; ++__first)
 *__first = __value;
    }

  template<typename _ForwardIterator, typename _Tp>
   
    inline typename
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
       const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
 *__first = __tmp;
    }


  template<typename _Tp>
   
    inline typename
    __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, void>::__type
    __fill_a1(_Tp* __first, _Tp* __last, const _Tp& __c)
    {
      const _Tp __tmp = __c;
# 892 "/usr/include/c++/10/bits/stl_algobase.h" 3
      if (const size_t __len = __last - __first)
 __builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
    }

  template<typename _Ite, typename _Cont, typename _Tp>
   
    inline void
    __fill_a1(::__gnu_cxx::__normal_iterator<_Ite, _Cont> __first,
       ::__gnu_cxx::__normal_iterator<_Ite, _Cont> __last,
       const _Tp& __value)
    { std::__fill_a1(__first.base(), __last.base(), __value); }

  template<typename _Tp, typename _VTp>
    void
    __fill_a1(const std::_Deque_iterator<_Tp, _Tp&, _Tp*>&,
       const std::_Deque_iterator<_Tp, _Tp&, _Tp*>&,
       const _VTp&);

  template<typename _FIte, typename _Tp>
   
    inline void
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
    { std::__fill_a1(__first, __last, __value); }

  template<typename _Ite, typename _Seq, typename _Cat, typename _Tp>
    void
    __fill_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
      const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
      const _Tp&);
# 934 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
   
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
    {

     

      ;

      std::__fill_a(__first, __last, __value);
    }


  inline constexpr int
  __size_to_integer(int __n) { return __n; }
  inline constexpr unsigned
  __size_to_integer(unsigned __n) { return __n; }
  inline constexpr long
  __size_to_integer(long __n) { return __n; }
  inline constexpr unsigned long
  __size_to_integer(unsigned long __n) { return __n; }
  inline constexpr long long
  __size_to_integer(long long __n) { return __n; }
  inline constexpr unsigned long long
  __size_to_integer(unsigned long long __n) { return __n; }


  inline constexpr __int128
  __size_to_integer(__int128 __n) { return __n; }
  inline constexpr unsigned __int128
  __size_to_integer(unsigned __int128 __n) { return __n; }
# 986 "/usr/include/c++/10/bits/stl_algobase.h" 3
  inline constexpr long long
  __size_to_integer(float __n) { return __n; }
  inline constexpr long long
  __size_to_integer(double __n) { return __n; }
  inline constexpr long long
  __size_to_integer(long double __n) { return __n; }

  inline constexpr long long
  __size_to_integer(__float128 __n) { return __n; }


  template<typename _OutputIterator, typename _Size, typename _Tp>
   
    inline typename
    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, _OutputIterator>::__type
    __fill_n_a1(_OutputIterator __first, _Size __n, const _Tp& __value)
    {
      for (; __n > 0; --__n, (void) ++__first)
 *__first = __value;
      return __first;
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
   
    inline typename
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, _OutputIterator>::__type
    __fill_n_a1(_OutputIterator __first, _Size __n, const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __n > 0; --__n, (void) ++__first)
 *__first = __tmp;
      return __first;
    }

  template<typename _Ite, typename _Seq, typename _Cat, typename _Size,
    typename _Tp>
    ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>
    __fill_n_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>& __first,
        _Size __n, const _Tp& __value,
        std::input_iterator_tag);

  template<typename _OutputIterator, typename _Size, typename _Tp>
   
    inline _OutputIterator
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
        std::output_iterator_tag)
    {

      static_assert(is_integral<_Size>{}, "fill_n must pass integral size");

      return __fill_n_a1(__first, __n, __value);
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
   
    inline _OutputIterator
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
        std::input_iterator_tag)
    {

      static_assert(is_integral<_Size>{}, "fill_n must pass integral size");

      return __fill_n_a1(__first, __n, __value);
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
   
    inline _OutputIterator
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
        std::random_access_iterator_tag)
    {

      static_assert(is_integral<_Size>{}, "fill_n must pass integral size");

      if (__n <= 0)
 return __first;

      ;

      std::__fill_a(__first, __first + __n, __value);
      return __first + __n;
    }
# 1086 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _OI, typename _Size, typename _Tp>
   
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
    {

     

      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
          std::__iterator_category(__first));
    }

  template<bool _BoolType>
    struct __equal
    {
      template<typename _II1, typename _II2>

 static bool
 equal(_II1 __first1, _II1 __last1, _II2 __first2)
 {
   for (; __first1 != __last1; ++__first1, (void) ++__first2)
     if (!(*__first1 == *__first2))
       return false;
   return true;
 }
    };

  template<>
    struct __equal<true>
    {
      template<typename _Tp>

 static bool
 equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)
 {
   if (const size_t __len = (__last1 - __first1))
     return !std::__memcmp(__first1, __first2, __len);
   return true;
 }
    };

  template<typename _Tp, typename _Ref, typename _Ptr, typename _II>
    typename __gnu_cxx::__enable_if<
      __is_random_access_iter<_II>::__value, bool>::__type
    __equal_aux1(std::_Deque_iterator<_Tp, _Ref, _Ptr>,
   std::_Deque_iterator<_Tp, _Ref, _Ptr>,
   _II);

  template<typename _Tp1, typename _Ref1, typename _Ptr1,
    typename _Tp2, typename _Ref2, typename _Ptr2>
    bool
    __equal_aux1(std::_Deque_iterator<_Tp1, _Ref1, _Ptr1>,
   std::_Deque_iterator<_Tp1, _Ref1, _Ptr1>,
   std::_Deque_iterator<_Tp2, _Ref2, _Ptr2>);

  template<typename _II, typename _Tp, typename _Ref, typename _Ptr>
    typename __gnu_cxx::__enable_if<
      __is_random_access_iter<_II>::__value, bool>::__type
    __equal_aux1(_II, _II,
  std::_Deque_iterator<_Tp, _Ref, _Ptr>);

  template<typename _II1, typename _II2>
   
    inline bool
    __equal_aux1(_II1 __first1, _II1 __last1, _II2 __first2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      const bool __simple = ((__is_integer<_ValueType1>::__value
         || __is_pointer<_ValueType1>::__value)
        && __memcmpable<_II1, _II2>::__value);
      return std::__equal<__simple>::equal(__first1, __last1, __first2);
    }

  template<typename _II1, typename _II2>
   
    inline bool
    __equal_aux(_II1 __first1, _II1 __last1, _II2 __first2)
    {
      return std::__equal_aux1(std::__niter_base(__first1),
          std::__niter_base(__last1),
          std::__niter_base(__first2));
    }

  template<typename _II1, typename _Seq1, typename _Cat1, typename _II2>
    bool
    __equal_aux(const ::__gnu_debug::_Safe_iterator<_II1, _Seq1, _Cat1>&,
  const ::__gnu_debug::_Safe_iterator<_II1, _Seq1, _Cat1>&,
  _II2);

  template<typename _II1, typename _II2, typename _Seq2, typename _Cat2>
    bool
    __equal_aux(_II1, _II1,
  const ::__gnu_debug::_Safe_iterator<_II2, _Seq2, _Cat2>&);

  template<typename _II1, typename _Seq1, typename _Cat1,
    typename _II2, typename _Seq2, typename _Cat2>
    bool
    __equal_aux(const ::__gnu_debug::_Safe_iterator<_II1, _Seq1, _Cat1>&,
  const ::__gnu_debug::_Safe_iterator<_II1, _Seq1, _Cat1>&,
  const ::__gnu_debug::_Safe_iterator<_II2, _Seq2, _Cat2>&);

  template<typename, typename>
    struct __lc_rai
    {
      template<typename _II1, typename _II2>

 static _II1
 __newlast1(_II1, _II1 __last1, _II2, _II2)
 { return __last1; }

      template<typename _II>

 static bool
 __cnd2(_II __first, _II __last)
 { return __first != __last; }
    };

  template<>
    struct __lc_rai<random_access_iterator_tag, random_access_iterator_tag>
    {
      template<typename _RAI1, typename _RAI2>

 static _RAI1
 __newlast1(_RAI1 __first1, _RAI1 __last1,
     _RAI2 __first2, _RAI2 __last2)
 {
   const typename iterator_traits<_RAI1>::difference_type
     __diff1 = __last1 - __first1;
   const typename iterator_traits<_RAI2>::difference_type
     __diff2 = __last2 - __first2;
   return __diff2 < __diff1 ? __first1 + __diff2 : __last1;
 }

      template<typename _RAI>
 static bool
 __cnd2(_RAI, _RAI)
 { return true; }
    };

  template<typename _II1, typename _II2, typename _Compare>
   
    bool
    __lexicographical_compare_impl(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2,
       _Compare __comp)
    {
      typedef typename iterator_traits<_II1>::iterator_category _Category1;
      typedef typename iterator_traits<_II2>::iterator_category _Category2;
      typedef std::__lc_rai<_Category1, _Category2> __rai_type;

      __last1 = __rai_type::__newlast1(__first1, __last1, __first2, __last2);
      for (; __first1 != __last1 && __rai_type::__cnd2(__first2, __last2);
    ++__first1, (void)++__first2)
 {
   if (__comp(__first1, __first2))
     return true;
   if (__comp(__first2, __first1))
     return false;
 }
      return __first1 == __last1 && __first2 != __last2;
    }

  template<bool _BoolType>
    struct __lexicographical_compare
    {
      template<typename _II1, typename _II2>

 static bool
 __lc(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
 {
   using __gnu_cxx::__ops::__iter_less_iter;
   return std::__lexicographical_compare_impl(__first1, __last1,
           __first2, __last2,
           __iter_less_iter());
 }
    };

  template<>
    struct __lexicographical_compare<true>
    {
      template<typename _Tp, typename _Up>

 static bool
 __lc(const _Tp* __first1, const _Tp* __last1,
      const _Up* __first2, const _Up* __last2)
 {
   const size_t __len1 = __last1 - __first1;
   const size_t __len2 = __last2 - __first2;
   if (const size_t __len = std::min(__len1, __len2))
     if (int __result = std::__memcmp(__first1, __first2, __len))
       return __result < 0;
   return __len1 < __len2;
 }
    };

  template<typename _II1, typename _II2>
   
    inline bool
    __lexicographical_compare_aux(_II1 __first1, _II1 __last1,
      _II2 __first2, _II2 __last2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;
      const bool __simple =
 (__is_memcmp_ordered_with<_ValueType1, _ValueType2>::__value
  && __is_pointer<_II1>::__value
  && __is_pointer<_II2>::__value







  );

      return std::__lexicographical_compare<__simple>::__lc(__first1, __last1,
           __first2, __last2);
    }

  template<typename _ForwardIterator, typename _Tp, typename _Compare>
   
    _ForwardIterator
    __lower_bound(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__comp(__middle, __val))
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else
     __len = __half;
 }
      return __first;
    }
# 1345 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
   
    inline _ForwardIterator
    lower_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {

     
     

      ;

      return std::__lower_bound(__first, __last, __val,
    __gnu_cxx::__ops::__iter_less_val());
    }



  inline constexpr int
  __lg(int __n)
  { return (int)sizeof(int) * 8 - 1 - __builtin_clz(__n); }

  inline constexpr unsigned
  __lg(unsigned __n)
  { return (int)sizeof(int) * 8 - 1 - __builtin_clz(__n); }

  inline constexpr long
  __lg(long __n)
  { return (int)sizeof(long) * 8 - 1 - __builtin_clzl(__n); }

  inline constexpr unsigned long
  __lg(unsigned long __n)
  { return (int)sizeof(long) * 8 - 1 - __builtin_clzl(__n); }

  inline constexpr long long
  __lg(long long __n)
  { return (int)sizeof(long long) * 8 - 1 - __builtin_clzll(__n); }

  inline constexpr unsigned long long
  __lg(unsigned long long __n)
  { return (int)sizeof(long long) * 8 - 1 - __builtin_clzll(__n); }


# 1401 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
   
    inline bool
    equal(_II1 __first1, _II1 __last1, _II2 __first2)
    {

     
     
     


      ;

      return std::__equal_aux(__first1, __last1, __first2);
    }
# 1432 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
   
    inline bool
    equal(_IIter1 __first1, _IIter1 __last1,
   _IIter2 __first2, _BinaryPredicate __binary_pred)
    {

     
     
      ;

      for (; __first1 != __last1; ++__first1, (void)++__first2)
 if (!bool(__binary_pred(*__first1, *__first2)))
   return false;
      return true;
    }



  template<typename _II1, typename _II2>
   
    inline bool
    __equal4(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
    {
      using _RATag = random_access_iterator_tag;
      using _Cat1 = typename iterator_traits<_II1>::iterator_category;
      using _Cat2 = typename iterator_traits<_II2>::iterator_category;
      using _RAIters = __and_<is_same<_Cat1, _RATag>, is_same<_Cat2, _RATag>>;
      if (_RAIters())
 {
   auto __d1 = std::distance(__first1, __last1);
   auto __d2 = std::distance(__first2, __last2);
   if (__d1 != __d2)
     return false;
   return std::equal(__first1, __last1, __first2);
 }

      for (; __first1 != __last1 && __first2 != __last2;
   ++__first1, (void)++__first2)
 if (!(*__first1 == *__first2))
   return false;
      return __first1 == __last1 && __first2 == __last2;
    }


  template<typename _II1, typename _II2, typename _BinaryPredicate>
   
    inline bool
    __equal4(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2,
      _BinaryPredicate __binary_pred)
    {
      using _RATag = random_access_iterator_tag;
      using _Cat1 = typename iterator_traits<_II1>::iterator_category;
      using _Cat2 = typename iterator_traits<_II2>::iterator_category;
      using _RAIters = __and_<is_same<_Cat1, _RATag>, is_same<_Cat2, _RATag>>;
      if (_RAIters())
 {
   auto __d1 = std::distance(__first1, __last1);
   auto __d2 = std::distance(__first2, __last2);
   if (__d1 != __d2)
     return false;
   return std::equal(__first1, __last1, __first2,
           __binary_pred);
 }

      for (; __first1 != __last1 && __first2 != __last2;
   ++__first1, (void)++__first2)
 if (!bool(__binary_pred(*__first1, *__first2)))
   return false;
      return __first1 == __last1 && __first2 == __last2;
    }
# 1522 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
   
    inline bool
    equal(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
    {

     
     
     


      ;
      ;

      return std::__equal4(__first1, __last1, __first2, __last2);
    }
# 1555 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
   
    inline bool
    equal(_IIter1 __first1, _IIter1 __last1,
   _IIter2 __first2, _IIter2 __last2, _BinaryPredicate __binary_pred)
    {

     
     
      ;
      ;

      return std::__equal4(__first1, __last1, __first2, __last2,
          __binary_pred);
    }
# 1587 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
   
    inline bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2)
    {





     
     
     
     
      ;
      ;

      return std::__lexicographical_compare_aux(std::__niter_base(__first1),
      std::__niter_base(__last1),
      std::__niter_base(__first2),
      std::__niter_base(__last2));
    }
# 1624 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2, typename _Compare>
   
    inline bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2, _Compare __comp)
    {

     
     
      ;
      ;

      return std::__lexicographical_compare_impl
 (__first1, __last1, __first2, __last2,
  __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }
# 1737 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
   
    pair<_InputIterator1, _InputIterator2>
    __mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _BinaryPredicate __binary_pred)
    {
      while (__first1 != __last1 && __binary_pred(__first1, __first2))
 {
   ++__first1;
   ++__first2;
 }
      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
    }
# 1765 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2>
   
    inline pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2)
    {

     
     
     


      ;

      return std::__mismatch(__first1, __last1, __first2,
        __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 1799 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
   
    inline pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _BinaryPredicate __binary_pred)
    {

     
     
      ;

      return std::__mismatch(__first1, __last1, __first2,
 __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
    }



  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
   
    pair<_InputIterator1, _InputIterator2>
    __mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _BinaryPredicate __binary_pred)
    {
      while (__first1 != __last1 && __first2 != __last2
      && __binary_pred(__first1, __first2))
 {
   ++__first1;
   ++__first2;
 }
      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
    }
# 1848 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2>
   
    inline pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2)
    {

     
     
     


      ;
      ;

      return std::__mismatch(__first1, __last1, __first2, __last2,
        __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 1884 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
   
    inline pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2,
      _BinaryPredicate __binary_pred)
    {

     
     
      ;
      ;

      return std::__mismatch(__first1, __last1, __first2, __last2,
        __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
    }





  template<typename _InputIterator, typename _Predicate>
   
    inline _InputIterator
    __find_if(_InputIterator __first, _InputIterator __last,
       _Predicate __pred, input_iterator_tag)
    {
      while (__first != __last && !__pred(__first))
 ++__first;
      return __first;
    }


  template<typename _RandomAccessIterator, typename _Predicate>
   
    _RandomAccessIterator
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Predicate __pred, random_access_iterator_tag)
    {
      typename iterator_traits<_RandomAccessIterator>::difference_type
 __trip_count = (__last - __first) >> 2;

      for (; __trip_count > 0; --__trip_count)
 {
   if (__pred(__first))
     return __first;
   ++__first;

   if (__pred(__first))
     return __first;
   ++__first;

   if (__pred(__first))
     return __first;
   ++__first;

   if (__pred(__first))
     return __first;
   ++__first;
 }

      switch (__last - __first)
 {
 case 3:
   if (__pred(__first))
     return __first;
   ++__first;

 case 2:
   if (__pred(__first))
     return __first;
   ++__first;

 case 1:
   if (__pred(__first))
     return __first;
   ++__first;

 case 0:
 default:
   return __last;
 }
    }

  template<typename _Iterator, typename _Predicate>
   
    inline _Iterator
    __find_if(_Iterator __first, _Iterator __last, _Predicate __pred)
    {
      return __find_if(__first, __last, __pred,
         std::__iterator_category(__first));
    }

  template<typename _InputIterator, typename _Predicate>
   
    typename iterator_traits<_InputIterator>::difference_type
    __count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    {
      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      for (; __first != __last; ++__first)
 if (__pred(__first))
   ++__n;
      return __n;
    }


  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
   
    bool
    __is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
       _ForwardIterator2 __first2, _BinaryPredicate __pred)
    {


      for (; __first1 != __last1; ++__first1, (void)++__first2)
 if (!__pred(__first1, __first2))
   break;

      if (__first1 == __last1)
 return true;



      _ForwardIterator2 __last2 = __first2;
      std::advance(__last2, std::distance(__first1, __last1));
      for (_ForwardIterator1 __scan = __first1; __scan != __last1; ++__scan)
 {
   if (__scan != std::__find_if(__first1, __scan,
     __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan)))
     continue;

   auto __matches
     = std::__count_if(__first2, __last2,
   __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan));
   if (0 == __matches ||
       std::__count_if(__scan, __last1,
   __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan))
       != __matches)
     return false;
 }
      return true;
    }
# 2041 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
   
    inline bool
    is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
     _ForwardIterator2 __first2)
    {

     
     
     


      ;

      return std::__is_permutation(__first1, __last1, __first2,
       __gnu_cxx::__ops::__iter_equal_to_iter());
    }



}
# 40 "/usr/include/c++/10/bits/char_traits.h" 2 3
# 1 "/usr/include/c++/10/bits/postypes.h" 1 3
# 38 "/usr/include/c++/10/bits/postypes.h" 3
       
# 39 "/usr/include/c++/10/bits/postypes.h" 3

# 1 "/usr/include/c++/10/cwchar" 1 3
# 39 "/usr/include/c++/10/cwchar" 3
       
# 40 "/usr/include/c++/10/cwchar" 3
# 62 "/usr/include/c++/10/cwchar" 3
namespace std
{
  using ::mbstate_t;
}
# 135 "/usr/include/c++/10/cwchar" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::wint_t;

  using ::btowc;
  using ::fgetwc;
  using ::fgetws;
  using ::fputwc;
  using ::fputws;
  using ::fwide;
  using ::fwprintf;
  using ::fwscanf;
  using ::getwc;
  using ::getwchar;
  using ::mbrlen;
  using ::mbrtowc;
  using ::mbsinit;
  using ::mbsrtowcs;
  using ::putwc;
  using ::putwchar;

  using ::swprintf;

  using ::swscanf;
  using ::ungetwc;
  using ::vfwprintf;

  using ::vfwscanf;


  using ::vswprintf;


  using ::vswscanf;

  using ::vwprintf;

  using ::vwscanf;

  using ::wcrtomb;
  using ::wcscat;
  using ::wcscmp;
  using ::wcscoll;
  using ::wcscpy;
  using ::wcscspn;
  using ::wcsftime;
  using ::wcslen;
  using ::wcsncat;
  using ::wcsncmp;
  using ::wcsncpy;
  using ::wcsrtombs;
  using ::wcsspn;
  using ::wcstod;

  using ::wcstof;

  using ::wcstok;
  using ::wcstol;
  using ::wcstoul;
  using ::wcsxfrm;
  using ::wctob;
  using ::wmemcmp;
  using ::wmemcpy;
  using ::wmemmove;
  using ::wmemset;
  using ::wprintf;
  using ::wscanf;
  using ::wcschr;
  using ::wcspbrk;
  using ::wcsrchr;
  using ::wcsstr;
  using ::wmemchr;
# 234 "/usr/include/c++/10/cwchar" 3

}
}







namespace __gnu_cxx
{





  using ::wcstold;
# 260 "/usr/include/c++/10/cwchar" 3
  using ::wcstoll;
  using ::wcstoull;

}

namespace std
{
  using ::__gnu_cxx::wcstold;
  using ::__gnu_cxx::wcstoll;
  using ::__gnu_cxx::wcstoull;
}
# 280 "/usr/include/c++/10/cwchar" 3
namespace std
{

  using std::wcstof;


  using std::vfwscanf;


  using std::vswscanf;


  using std::vwscanf;



  using std::wcstold;
  using std::wcstoll;
  using std::wcstoull;

}
# 41 "/usr/include/c++/10/bits/postypes.h" 2 3
# 68 "/usr/include/c++/10/bits/postypes.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 88 "/usr/include/c++/10/bits/postypes.h" 3
  typedef long streamoff;
# 98 "/usr/include/c++/10/bits/postypes.h" 3
  typedef ptrdiff_t streamsize;
# 111 "/usr/include/c++/10/bits/postypes.h" 3
  template<typename _StateT>
    class fpos
    {
    private:
      streamoff _M_off;
      _StateT _M_state;

    public:




      fpos()
      : _M_off(0), _M_state() { }
# 133 "/usr/include/c++/10/bits/postypes.h" 3
      fpos(streamoff __off)
      : _M_off(__off), _M_state() { }


      fpos(const fpos&) = default;
      fpos& operator=(const fpos&) = default;
      ~fpos() = default;



      operator streamoff() const { return _M_off; }


      void
      state(_StateT __st)
      { _M_state = __st; }


      _StateT
      state() const
      { return _M_state; }





      fpos&
      operator+=(streamoff __off)
      {
 _M_off += __off;
 return *this;
      }





      fpos&
      operator-=(streamoff __off)
      {
 _M_off -= __off;
 return *this;
      }







      fpos
      operator+(streamoff __off) const
      {
 fpos __pos(*this);
 __pos += __off;
 return __pos;
      }







      fpos
      operator-(streamoff __off) const
      {
 fpos __pos(*this);
 __pos -= __off;
 return __pos;
      }






      streamoff
      operator-(const fpos& __other) const
      { return _M_off - __other._M_off; }
    };






  template<typename _StateT>
    inline bool
    operator==(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) == streamoff(__rhs); }

  template<typename _StateT>
    inline bool
    operator!=(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) != streamoff(__rhs); }





  typedef fpos<mbstate_t> streampos;

  typedef fpos<mbstate_t> wstreampos;
# 245 "/usr/include/c++/10/bits/postypes.h" 3
  typedef fpos<mbstate_t> u16streampos;

  typedef fpos<mbstate_t> u32streampos;



}
# 41 "/usr/include/c++/10/bits/char_traits.h" 2 3
# 1 "/usr/include/c++/10/cwchar" 1 3
# 39 "/usr/include/c++/10/cwchar" 3
       
# 40 "/usr/include/c++/10/cwchar" 3
# 42 "/usr/include/c++/10/bits/char_traits.h" 2 3
# 50 "/usr/include/c++/10/bits/char_traits.h" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{

# 64 "/usr/include/c++/10/bits/char_traits.h" 3
  template<typename _CharT>
    struct _Char_types
    {
      typedef unsigned long int_type;
      typedef std::streampos pos_type;
      typedef std::streamoff off_type;
      typedef std::mbstate_t state_type;
    };
# 89 "/usr/include/c++/10/bits/char_traits.h" 3
  template<typename _CharT>
    struct char_traits
    {
      typedef _CharT char_type;
      typedef typename _Char_types<_CharT>::int_type int_type;
      typedef typename _Char_types<_CharT>::pos_type pos_type;
      typedef typename _Char_types<_CharT>::off_type off_type;
      typedef typename _Char_types<_CharT>::state_type state_type;




      static constexpr void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static constexpr int
      compare(const char_type* __s1, const char_type* __s2, std::size_t __n);

      static constexpr std::size_t
      length(const char_type* __s);

      static constexpr const char_type*
      find(const char_type* __s, std::size_t __n, const char_type& __a);

      static char_type*
      move(char_type* __s1, const char_type* __s2, std::size_t __n);

      static char_type*
      copy(char_type* __s1, const char_type* __s2, std::size_t __n);

      static char_type*
      assign(char_type* __s, std::size_t __n, char_type __a);

      static constexpr char_type
      to_char_type(const int_type& __c)
      { return static_cast<char_type>(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c)
      { return static_cast<int_type>(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static constexpr int_type
      eof()
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c)
      { return !eq_int_type(__c, eof()) ? __c : to_int_type(char_type()); }
    };

  template<typename _CharT>
    constexpr int
    char_traits<_CharT>::
    compare(const char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      for (std::size_t __i = 0; __i < __n; ++__i)
 if (lt(__s1[__i], __s2[__i]))
   return -1;
 else if (lt(__s2[__i], __s1[__i]))
   return 1;
      return 0;
    }

  template<typename _CharT>
    constexpr std::size_t
    char_traits<_CharT>::
    length(const char_type* __p)
    {
      std::size_t __i = 0;
      while (!eq(__p[__i], char_type()))
        ++__i;
      return __i;
    }

  template<typename _CharT>
    constexpr const typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    find(const char_type* __s, std::size_t __n, const char_type& __a)
    {
      for (std::size_t __i = 0; __i < __n; ++__i)
        if (eq(__s[__i], __a))
          return __s + __i;
      return 0;
    }

  template<typename _CharT>
   
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    move(char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      if (__n == 0)
 return __s1;
# 205 "/usr/include/c++/10/bits/char_traits.h" 3
      return static_cast<_CharT*>(__builtin_memmove(__s1, __s2,
          __n * sizeof(char_type)));
    }

  template<typename _CharT>
   
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    copy(char_type* __s1, const char_type* __s2, std::size_t __n)
    {

      std::copy(__s2, __s2 + __n, __s1);
      return __s1;
    }

  template<typename _CharT>
   
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    assign(char_type* __s, std::size_t __n, char_type __a)
    {

      std::fill_n(__s, __n, __a);
      return __s;
    }


}

namespace std __attribute__ ((__visibility__ ("default")))
{

# 309 "/usr/include/c++/10/bits/char_traits.h" 3
  template<class _CharT>
    struct char_traits : public __gnu_cxx::char_traits<_CharT>
    { };



  template<>
    struct char_traits<char>
    {
      typedef char char_type;
      typedef int int_type;
      typedef streampos pos_type;
      typedef streamoff off_type;
      typedef mbstate_t state_type;




      static void
      assign(char_type& __c1, const char_type& __c2) noexcept
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2) noexcept
      {

 return (static_cast<unsigned char>(__c1)
  < static_cast<unsigned char>(__c2));
      }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return 0;






 return __builtin_memcmp(__s1, __s2, __n);
      }

      static size_t
      length(const char_type* __s)
      {




 return __builtin_strlen(__s);
      }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {
 if (__n == 0)
   return 0;






 return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;




 return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n));
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;




 return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 if (__n == 0)
   return __s;




 return static_cast<char_type*>(__builtin_memset(__s, __a, __n));
      }

      static constexpr char_type
      to_char_type(const int_type& __c) noexcept
      { return static_cast<char_type>(__c); }



      static constexpr int_type
      to_int_type(const char_type& __c) noexcept
      { return static_cast<int_type>(static_cast<unsigned char>(__c)); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr int_type
      eof() noexcept
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c) noexcept
      { return (__c == eof()) ? 0 : __c; }
  };




  template<>
    struct char_traits<wchar_t>
    {
      typedef wchar_t char_type;
      typedef wint_t int_type;
      typedef streamoff off_type;
      typedef wstreampos pos_type;
      typedef mbstate_t state_type;




      static void
      assign(char_type& __c1, const char_type& __c2) noexcept
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return 0;






 return wmemcmp(__s1, __s2, __n);
      }

      static size_t
      length(const char_type* __s)
      {




 return wcslen(__s);
      }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {
 if (__n == 0)
   return 0;






 return wmemchr(__s, __a, __n);
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;




 return wmemmove(__s1, __s2, __n);
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;




 return wmemcpy(__s1, __s2, __n);
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 if (__n == 0)
   return __s;




 return wmemset(__s, __a, __n);
      }

      static constexpr char_type
      to_char_type(const int_type& __c) noexcept
      { return char_type(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c) noexcept
      { return int_type(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr int_type
      eof() noexcept
      { return static_cast<int_type>((0xffffffffu)); }

      static constexpr int_type
      not_eof(const int_type& __c) noexcept
      { return eq_int_type(__c, eof()) ? 0 : __c; }
  };
# 687 "/usr/include/c++/10/bits/char_traits.h" 3

}



# 1 "/usr/include/c++/10/cstdint" 1 3
# 32 "/usr/include/c++/10/cstdint" 3
       
# 33 "/usr/include/c++/10/cstdint" 3
# 41 "/usr/include/c++/10/cstdint" 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stdint.h" 1 3 4
# 9 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stdint.h" 3 4
# 1 "/usr/include/stdint.h" 1 3 4
# 26 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/stdint.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 30 "/usr/include/stdint.h" 2 3 4







# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 3 4
typedef __uint8_t uint8_t;
typedef __uint16_t uint16_t;
typedef __uint32_t uint32_t;
typedef __uint64_t uint64_t;
# 38 "/usr/include/stdint.h" 2 3 4





typedef __int_least8_t int_least8_t;
typedef __int_least16_t int_least16_t;
typedef __int_least32_t int_least32_t;
typedef __int_least64_t int_least64_t;


typedef __uint_least8_t uint_least8_t;
typedef __uint_least16_t uint_least16_t;
typedef __uint_least32_t uint_least32_t;
typedef __uint_least64_t uint_least64_t;





typedef signed char int_fast8_t;

typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
# 71 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;

typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
# 87 "/usr/include/stdint.h" 3 4
typedef long int intptr_t;


typedef unsigned long int uintptr_t;
# 101 "/usr/include/stdint.h" 3 4
typedef __intmax_t intmax_t;
typedef __uintmax_t uintmax_t;
# 10 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stdint.h" 2 3 4
# 42 "/usr/include/c++/10/cstdint" 2 3


namespace std
{

  using ::int8_t;
  using ::int16_t;
  using ::int32_t;
  using ::int64_t;

  using ::int_fast8_t;
  using ::int_fast16_t;
  using ::int_fast32_t;
  using ::int_fast64_t;

  using ::int_least8_t;
  using ::int_least16_t;
  using ::int_least32_t;
  using ::int_least64_t;

  using ::intmax_t;
  using ::intptr_t;

  using ::uint8_t;
  using ::uint16_t;
  using ::uint32_t;
  using ::uint64_t;

  using ::uint_fast8_t;
  using ::uint_fast16_t;
  using ::uint_fast32_t;
  using ::uint_fast64_t;

  using ::uint_least8_t;
  using ::uint_least16_t;
  using ::uint_least32_t;
  using ::uint_least64_t;

  using ::uintmax_t;
  using ::uintptr_t;





}
# 693 "/usr/include/c++/10/bits/char_traits.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<>
    struct char_traits<char16_t>
    {
      typedef char16_t char_type;

      typedef uint_least16_t int_type;





      typedef streamoff off_type;
      typedef u16streampos pos_type;
      typedef mbstate_t state_type;




      static void
      assign(char_type& __c1, const char_type& __c2) noexcept
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (lt(__s1[__i], __s2[__i]))
     return -1;
   else if (lt(__s2[__i], __s1[__i]))
     return 1;
 return 0;
      }

      static size_t
      length(const char_type* __s)
      {
 size_t __i = 0;
 while (!eq(__s[__i], char_type()))
   ++__i;
 return __i;
      }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (eq(__s[__i], __a))
     return __s + __i;
 return 0;
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;




 return (static_cast<char_type*>
  (__builtin_memmove(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;




 return (static_cast<char_type*>
  (__builtin_memcpy(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   assign(__s[__i], __a);
 return __s;
      }

      static constexpr char_type
      to_char_type(const int_type& __c) noexcept
      { return char_type(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c) noexcept
      { return __c == eof() ? int_type(0xfffd) : int_type(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr int_type
      eof() noexcept
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c) noexcept
      { return eq_int_type(__c, eof()) ? 0 : __c; }
    };

  template<>
    struct char_traits<char32_t>
    {
      typedef char32_t char_type;

      typedef uint_least32_t int_type;





      typedef streamoff off_type;
      typedef u32streampos pos_type;
      typedef mbstate_t state_type;




      static void
      assign(char_type& __c1, const char_type& __c2) noexcept
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (lt(__s1[__i], __s2[__i]))
     return -1;
   else if (lt(__s2[__i], __s1[__i]))
     return 1;
 return 0;
      }

      static size_t
      length(const char_type* __s)
      {
 size_t __i = 0;
 while (!eq(__s[__i], char_type()))
   ++__i;
 return __i;
      }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (eq(__s[__i], __a))
     return __s + __i;
 return 0;
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;




 return (static_cast<char_type*>
  (__builtin_memmove(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;




 return (static_cast<char_type*>
  (__builtin_memcpy(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   assign(__s[__i], __a);
 return __s;
      }

      static constexpr char_type
      to_char_type(const int_type& __c) noexcept
      { return char_type(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c) noexcept
      { return int_type(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr int_type
      eof() noexcept
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c) noexcept
      { return eq_int_type(__c, eof()) ? 0 : __c; }
    };
# 945 "/usr/include/c++/10/bits/char_traits.h" 3

}
# 41 "/usr/include/c++/10/string" 2 3
# 1 "/usr/include/c++/10/bits/allocator.h" 1 3
# 46 "/usr/include/c++/10/bits/allocator.h" 3
# 1 "/usr/include/x86_64-linux-gnu/c++/10/bits/c++allocator.h" 1 3
# 33 "/usr/include/x86_64-linux-gnu/c++/10/bits/c++allocator.h" 3
# 1 "/usr/include/c++/10/ext/new_allocator.h" 1 3
# 33 "/usr/include/c++/10/ext/new_allocator.h" 3
# 1 "/usr/include/c++/10/new" 1 3
# 38 "/usr/include/c++/10/new" 3
       
# 39 "/usr/include/c++/10/new" 3


# 1 "/usr/include/c++/10/exception" 1 3
# 33 "/usr/include/c++/10/exception" 3
       
# 34 "/usr/include/c++/10/exception" 3

#pragma GCC visibility push(default)


# 1 "/usr/include/c++/10/bits/exception.h" 1 3
# 34 "/usr/include/c++/10/bits/exception.h" 3
       
# 35 "/usr/include/c++/10/bits/exception.h" 3

#pragma GCC visibility push(default)



extern "C++" {

namespace std
{
# 60 "/usr/include/c++/10/bits/exception.h" 3
  class exception
  {
  public:
    exception() noexcept { }
    virtual ~exception() noexcept;

    exception(const exception&) = default;
    exception& operator=(const exception&) = default;
    exception(exception&&) = default;
    exception& operator=(exception&&) = default;




    virtual const char*
    what() const noexcept;
  };

}

}

#pragma GCC visibility pop
# 39 "/usr/include/c++/10/exception" 2 3

extern "C++" {

namespace std
{






  class bad_exception : public exception
  {
  public:
    bad_exception() noexcept { }



    virtual ~bad_exception() noexcept;


    virtual const char*
    what() const noexcept;
  };


  typedef void (*terminate_handler) ();


  typedef void (*unexpected_handler) ();


  terminate_handler set_terminate(terminate_handler) noexcept;



  terminate_handler get_terminate() noexcept;




  void terminate() noexcept __attribute__ ((__noreturn__));


  unexpected_handler set_unexpected(unexpected_handler) noexcept;



  unexpected_handler get_unexpected() noexcept;




  void unexpected() __attribute__ ((__noreturn__));
# 105 "/usr/include/c++/10/exception" 3
 
  bool uncaught_exception() noexcept __attribute__ ((__pure__));




  int uncaught_exceptions() noexcept __attribute__ ((__pure__));



}

namespace __gnu_cxx
{

# 137 "/usr/include/c++/10/exception" 3
  void __verbose_terminate_handler();


}

}

#pragma GCC visibility pop


# 1 "/usr/include/c++/10/bits/exception_ptr.h" 1 3
# 34 "/usr/include/c++/10/bits/exception_ptr.h" 3
#pragma GCC visibility push(default)



# 1 "/usr/include/c++/10/bits/cxxabi_init_exception.h" 1 3
# 34 "/usr/include/c++/10/bits/cxxabi_init_exception.h" 3
       
# 35 "/usr/include/c++/10/bits/cxxabi_init_exception.h" 3

#pragma GCC visibility push(default)

# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 39 "/usr/include/c++/10/bits/cxxabi_init_exception.h" 2 3
# 50 "/usr/include/c++/10/bits/cxxabi_init_exception.h" 3
namespace std
{
  class type_info;
}

namespace __cxxabiv1
{
  struct __cxa_refcounted_exception;

  extern "C"
    {

      void*
      __cxa_allocate_exception(size_t) noexcept;

      void
      __cxa_free_exception(void*) noexcept;


      __cxa_refcounted_exception*
      __cxa_init_primary_exception(void *object, std::type_info *tinfo,
                void ( *dest) (void *)) noexcept;

    }
}



#pragma GCC visibility pop
# 39 "/usr/include/c++/10/bits/exception_ptr.h" 2 3
# 1 "/usr/include/c++/10/typeinfo" 1 3
# 32 "/usr/include/c++/10/typeinfo" 3
       
# 33 "/usr/include/c++/10/typeinfo" 3



# 1 "/usr/include/c++/10/bits/hash_bytes.h" 1 3
# 33 "/usr/include/c++/10/bits/hash_bytes.h" 3
       
# 34 "/usr/include/c++/10/bits/hash_bytes.h" 3



namespace std
{







  size_t
  _Hash_bytes(const void* __ptr, size_t __len, size_t __seed);





  size_t
  _Fnv_hash_bytes(const void* __ptr, size_t __len, size_t __seed);


}
# 37 "/usr/include/c++/10/typeinfo" 2 3


#pragma GCC visibility push(default)

extern "C++" {

namespace __cxxabiv1
{
  class __class_type_info;
}
# 80 "/usr/include/c++/10/typeinfo" 3
namespace std
{






  class type_info
  {
  public:




    virtual ~type_info();



    const char* name() const noexcept
    { return __name[0] == '*' ? __name + 1 : __name; }
# 115 "/usr/include/c++/10/typeinfo" 3
    bool before(const type_info& __arg) const noexcept
    { return (__name[0] == '*' && __arg.__name[0] == '*')
 ? __name < __arg.__name
 : __builtin_strcmp (__name, __arg.__name) < 0; }

    bool operator==(const type_info& __arg) const noexcept
    {
      return ((__name == __arg.__name)
       || (__name[0] != '*' &&
    __builtin_strcmp (__name, __arg.__name) == 0));
    }
# 138 "/usr/include/c++/10/typeinfo" 3
    bool operator!=(const type_info& __arg) const noexcept
    { return !operator==(__arg); }



    size_t hash_code() const noexcept
    {

      return _Hash_bytes(name(), __builtin_strlen(name()),
    static_cast<size_t>(0xc70f6907UL));



    }



    virtual bool __is_pointer_p() const;


    virtual bool __is_function_p() const;







    virtual bool __do_catch(const type_info *__thr_type, void **__thr_obj,
       unsigned __outer) const;


    virtual bool __do_upcast(const __cxxabiv1::__class_type_info *__target,
        void **__obj_ptr) const;

  protected:
    const char *__name;

    explicit type_info(const char *__n): __name(__n) { }

  private:

    type_info& operator=(const type_info&);
    type_info(const type_info&);
  };







  class bad_cast : public exception
  {
  public:
    bad_cast() noexcept { }



    virtual ~bad_cast() noexcept;


    virtual const char* what() const noexcept;
  };





  class bad_typeid : public exception
  {
  public:
    bad_typeid () noexcept { }



    virtual ~bad_typeid() noexcept;


    virtual const char* what() const noexcept;
  };
}

}

#pragma GCC visibility pop
# 40 "/usr/include/c++/10/bits/exception_ptr.h" 2 3
# 1 "/usr/include/c++/10/new" 1 3
# 41 "/usr/include/c++/10/bits/exception_ptr.h" 2 3

extern "C++" {

namespace std
{
  class type_info;






  namespace __exception_ptr
  {
    class exception_ptr;
  }

  using __exception_ptr::exception_ptr;





  exception_ptr current_exception() noexcept;

  template<typename _Ex>
  exception_ptr make_exception_ptr(_Ex) noexcept;


  void rethrow_exception(exception_ptr) __attribute__ ((__noreturn__));

  namespace __exception_ptr
  {
    using std::rethrow_exception;





    class exception_ptr
    {
      void* _M_exception_object;

      explicit exception_ptr(void* __e) noexcept;

      void _M_addref() noexcept;
      void _M_release() noexcept;

      void *_M_get() const noexcept __attribute__ ((__pure__));

      friend exception_ptr std::current_exception() noexcept;
      friend void std::rethrow_exception(exception_ptr);
      template<typename _Ex>
      friend exception_ptr std::make_exception_ptr(_Ex) noexcept;

    public:
      exception_ptr() noexcept;

      exception_ptr(const exception_ptr&) noexcept;


      exception_ptr(nullptr_t) noexcept
      : _M_exception_object(0)
      { }

      exception_ptr(exception_ptr&& __o) noexcept
      : _M_exception_object(__o._M_exception_object)
      { __o._M_exception_object = 0; }
# 118 "/usr/include/c++/10/bits/exception_ptr.h" 3
      exception_ptr&
      operator=(const exception_ptr&) noexcept;


      exception_ptr&
      operator=(exception_ptr&& __o) noexcept
      {
        exception_ptr(static_cast<exception_ptr&&>(__o)).swap(*this);
        return *this;
      }


      ~exception_ptr() noexcept;

      void
      swap(exception_ptr&) noexcept;
# 145 "/usr/include/c++/10/bits/exception_ptr.h" 3
      explicit operator bool() const
      { return _M_exception_object; }


      friend bool
      operator==(const exception_ptr&, const exception_ptr&)
 noexcept __attribute__ ((__pure__));

      const class std::type_info*
      __cxa_exception_type() const noexcept
 __attribute__ ((__pure__));
    };



    bool
    operator==(const exception_ptr&, const exception_ptr&)
      noexcept __attribute__ ((__pure__));

    bool
    operator!=(const exception_ptr&, const exception_ptr&)
      noexcept __attribute__ ((__pure__));

    inline void
    swap(exception_ptr& __lhs, exception_ptr& __rhs)
    { __lhs.swap(__rhs); }




    template<typename _Ex>
      inline void
      __dest_thunk(void* __x)
      { static_cast<_Ex*>(__x)->~_Ex(); }


  }


  template<typename _Ex>
    exception_ptr
    make_exception_ptr(_Ex __ex) noexcept
    {

      void* __e = __cxxabiv1::__cxa_allocate_exception(sizeof(_Ex));
      (void) __cxxabiv1::__cxa_init_primary_exception(
   __e, const_cast<std::type_info*>(&typeid(__ex)),
   __exception_ptr::__dest_thunk<_Ex>);
      try
 {
          ::new (__e) _Ex(__ex);
          return exception_ptr(__e);
 }
      catch(...)
 {
   __cxxabiv1::__cxa_free_exception(__e);
   return current_exception();
 }
# 215 "/usr/include/c++/10/bits/exception_ptr.h" 3
    }


}

}

#pragma GCC visibility pop
# 148 "/usr/include/c++/10/exception" 2 3
# 1 "/usr/include/c++/10/bits/nested_exception.h" 1 3
# 33 "/usr/include/c++/10/bits/nested_exception.h" 3
#pragma GCC visibility push(default)
# 42 "/usr/include/c++/10/bits/nested_exception.h" 3
extern "C++" {

namespace std
{






  class nested_exception
  {
    exception_ptr _M_ptr;

  public:
    nested_exception() noexcept : _M_ptr(current_exception()) { }

    nested_exception(const nested_exception&) noexcept = default;

    nested_exception& operator=(const nested_exception&) noexcept = default;

    virtual ~nested_exception() noexcept;

    [[noreturn]]
    void
    rethrow_nested() const
    {
      if (_M_ptr)
 rethrow_exception(_M_ptr);
      std::terminate();
    }

    exception_ptr
    nested_ptr() const noexcept
    { return _M_ptr; }
  };



  template<typename _Except>
    struct _Nested_exception : public _Except, public nested_exception
    {
      explicit _Nested_exception(const _Except& __ex)
      : _Except(__ex)
      { }

      explicit _Nested_exception(_Except&& __ex)
      : _Except(static_cast<_Except&&>(__ex))
      { }
    };




  template<typename _Tp>
    [[noreturn]]
    inline void
    __throw_with_nested_impl(_Tp&& __t, true_type)
    {
      using _Up = typename remove_reference<_Tp>::type;
      throw _Nested_exception<_Up>{std::forward<_Tp>(__t)};
    }

  template<typename _Tp>
    [[noreturn]]
    inline void
    __throw_with_nested_impl(_Tp&& __t, false_type)
    { throw std::forward<_Tp>(__t); }





  template<typename _Tp>
    [[noreturn]]
    inline void
    throw_with_nested(_Tp&& __t)
    {
      using _Up = typename decay<_Tp>::type;
      using _CopyConstructible
 = __and_<is_copy_constructible<_Up>, is_move_constructible<_Up>>;
      static_assert(_CopyConstructible::value,
   "throw_with_nested argument must be CopyConstructible");
      using __nest = __and_<is_class<_Up>, __bool_constant<!__is_final(_Up)>,
       __not_<is_base_of<nested_exception, _Up>>>;
      std::__throw_with_nested_impl(std::forward<_Tp>(__t), __nest{});
    }




  template<typename _Tp>
    using __rethrow_if_nested_cond = typename enable_if<
      __and_<is_polymorphic<_Tp>,
      __or_<__not_<is_base_of<nested_exception, _Tp>>,
     is_convertible<_Tp*, nested_exception*>>>::value
    >::type;


  template<typename _Ex>
    inline __rethrow_if_nested_cond<_Ex>
    __rethrow_if_nested_impl(const _Ex* __ptr)
    {
      if (auto __ne_ptr = dynamic_cast<const nested_exception*>(__ptr))
 __ne_ptr->rethrow_nested();
    }


  inline void
  __rethrow_if_nested_impl(const void*)
  { }




  template<typename _Ex>
    inline void
    rethrow_if_nested(const _Ex& __ex)
    { std::__rethrow_if_nested_impl(std::__addressof(__ex)); }


}

}



#pragma GCC visibility pop
# 149 "/usr/include/c++/10/exception" 2 3
# 42 "/usr/include/c++/10/new" 2 3

#pragma GCC visibility push(default)

extern "C++" {

namespace std
{






  class bad_alloc : public exception
  {
  public:
    bad_alloc() throw() { }


    bad_alloc(const bad_alloc&) = default;
    bad_alloc& operator=(const bad_alloc&) = default;




    virtual ~bad_alloc() throw();


    virtual const char* what() const throw();
  };


  class bad_array_new_length : public bad_alloc
  {
  public:
    bad_array_new_length() throw() { }



    virtual ~bad_array_new_length() throw();


    virtual const char* what() const throw();
  };






  struct nothrow_t
  {

    explicit nothrow_t() = default;

  };

  extern const nothrow_t nothrow;



  typedef void (*new_handler)();



  new_handler set_new_handler(new_handler) throw();



  new_handler get_new_handler() noexcept;

}
# 126 "/usr/include/c++/10/new" 3
 void* operator new(std::size_t)
  __attribute__((__externally_visible__));
 void* operator new[](std::size_t)
  __attribute__((__externally_visible__));
void operator delete(void*) noexcept
  __attribute__((__externally_visible__));
void operator delete[](void*) noexcept
  __attribute__((__externally_visible__));

void operator delete(void*, std::size_t) noexcept
  __attribute__((__externally_visible__));
void operator delete[](void*, std::size_t) noexcept
  __attribute__((__externally_visible__));

 void* operator new(std::size_t, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__, __malloc__));
 void* operator new[](std::size_t, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__, __malloc__));
void operator delete(void*, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
void operator delete[](void*, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
# 174 "/usr/include/c++/10/new" 3
 inline void* operator new(std::size_t, void* __p) noexcept
{ return __p; }
 inline void* operator new[](std::size_t, void* __p) noexcept
{ return __p; }


inline void operator delete (void*, void*) noexcept { }
inline void operator delete[](void*, void*) noexcept { }

}
# 230 "/usr/include/c++/10/new" 3
#pragma GCC visibility pop
# 34 "/usr/include/c++/10/ext/new_allocator.h" 2 3






namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{

# 54 "/usr/include/c++/10/ext/new_allocator.h" 3
  template<typename _Tp>
    class new_allocator
    {
    public:
      typedef _Tp value_type;
      typedef std::size_t size_type;
      typedef std::ptrdiff_t difference_type;

      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;

      template<typename _Tp1>
 struct rebind
 { typedef new_allocator<_Tp1> other; };





      typedef std::true_type propagate_on_container_move_assignment;


     
      new_allocator() noexcept { }

     
      new_allocator(const new_allocator&) noexcept { }

      template<typename _Tp1>

 new_allocator(const new_allocator<_Tp1>&) noexcept { }


      ~new_allocator() noexcept { }

      pointer
      address(reference __x) const noexcept
      { return std::__addressof(__x); }

      const_pointer
      address(const_reference __x) const noexcept
      { return std::__addressof(__x); }




      _Tp*
      allocate(size_type __n, const void* = static_cast<const void*>(0))
      {
 if (__n > this->_M_max_size())
   std::__throw_bad_alloc();
# 115 "/usr/include/c++/10/ext/new_allocator.h" 3
 return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }


      void
      deallocate(_Tp* __p, size_type __t)
      {
# 133 "/usr/include/c++/10/ext/new_allocator.h" 3
 ::operator delete(__p

     , __t * sizeof(_Tp)

    );
      }


      size_type
      max_size() const noexcept
      { return _M_max_size(); }


      template<typename _Up, typename... _Args>
 void
 construct(_Up* __p, _Args&&... __args)
 noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
 void
 destroy(_Up* __p)
 noexcept(std::is_nothrow_destructible<_Up>::value)
 { __p->~_Up(); }
# 169 "/usr/include/c++/10/ext/new_allocator.h" 3
      template<typename _Up>
 friend bool
 operator==(const new_allocator&, const new_allocator<_Up>&)
 noexcept
 { return true; }


      template<typename _Up>
 friend bool
 operator!=(const new_allocator&, const new_allocator<_Up>&)
 noexcept
 { return false; }


    private:
      constexpr size_type
      _M_max_size() const noexcept
      {

 return std::size_t(0x7fffffffffffffffL) / sizeof(_Tp);



      }
    };


}
# 34 "/usr/include/x86_64-linux-gnu/c++/10/bits/c++allocator.h" 2 3


namespace std
{
# 47 "/usr/include/x86_64-linux-gnu/c++/10/bits/c++allocator.h" 3
  template<typename _Tp>
    using __allocator_base = __gnu_cxx::new_allocator<_Tp>;
}
# 47 "/usr/include/c++/10/bits/allocator.h" 2 3







namespace std __attribute__ ((__visibility__ ("default")))
{








  template<>
    class allocator<void>
    {
    public:
      typedef void value_type;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;

      typedef void* pointer;
      typedef const void* const_pointer;

      template<typename _Tp1>
 struct rebind
 { typedef allocator<_Tp1> other; };
# 89 "/usr/include/c++/10/bits/allocator.h" 3
      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;

      template<typename _Up, typename... _Args>
 void
 construct(_Up* __p, _Args&&... __args)
 noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
 void
 destroy(_Up* __p)
 noexcept(std::is_nothrow_destructible<_Up>::value)
 { __p->~_Up(); }

    };
# 115 "/usr/include/c++/10/bits/allocator.h" 3
  template<typename _Tp>
    class allocator : public __allocator_base<_Tp>
    {
    public:
      typedef _Tp value_type;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;

      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;

      template<typename _Tp1>
 struct rebind
 { typedef allocator<_Tp1> other; };





      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;




     
      allocator() noexcept { }

     
      allocator(const allocator& __a) noexcept
      : __allocator_base<_Tp>(__a) { }



      allocator& operator=(const allocator&) = default;


      template<typename _Tp1>

 allocator(const allocator<_Tp1>&) noexcept { }




      ~allocator() noexcept { }
# 191 "/usr/include/c++/10/bits/allocator.h" 3
      friend bool
      operator==(const allocator&, const allocator&) noexcept
      { return true; }


      friend bool
      operator!=(const allocator&, const allocator&) noexcept
      { return false; }



    };

  template<typename _T1, typename _T2>
    inline bool
    operator==(const allocator<_T1>&, const allocator<_T2>&)
    noexcept
    { return true; }


  template<typename _T1, typename _T2>
    inline bool
    operator!=(const allocator<_T1>&, const allocator<_T2>&)
    noexcept
    { return false; }




  template<typename _Tp>
    class allocator<const _Tp>
    {
    public:
      typedef _Tp value_type;
      template<typename _Up> allocator(const allocator<_Up>&) { }
    };

  template<typename _Tp>
    class allocator<volatile _Tp>
    {
    public:
      typedef _Tp value_type;
      template<typename _Up> allocator(const allocator<_Up>&) { }
    };

  template<typename _Tp>
    class allocator<const volatile _Tp>
    {
    public:
      typedef _Tp value_type;
      template<typename _Up> allocator(const allocator<_Up>&) { }
    };






  extern template class allocator<char>;
  extern template class allocator<wchar_t>;






  template<typename _Alloc, bool = __is_empty(_Alloc)>
    struct __alloc_swap
    { static void _S_do_it(_Alloc&, _Alloc&) noexcept { } };

  template<typename _Alloc>
    struct __alloc_swap<_Alloc, false>
    {
      static void
      _S_do_it(_Alloc& __one, _Alloc& __two) noexcept
      {

 if (__one != __two)
   swap(__one, __two);
      }
    };


  template<typename _Alloc, bool = __is_empty(_Alloc)>
    struct __alloc_neq
    {
      static bool
      _S_do_it(const _Alloc&, const _Alloc&)
      { return false; }
    };

  template<typename _Alloc>
    struct __alloc_neq<_Alloc, false>
    {
      static bool
      _S_do_it(const _Alloc& __one, const _Alloc& __two)
      { return __one != __two; }
    };


  template<typename _Tp, bool
    = __or_<is_copy_constructible<typename _Tp::value_type>,
            is_nothrow_move_constructible<typename _Tp::value_type>>::value>
    struct __shrink_to_fit_aux
    { static bool _S_do_it(_Tp&) noexcept { return false; } };

  template<typename _Tp>
    struct __shrink_to_fit_aux<_Tp, true>
    {
      static bool
      _S_do_it(_Tp& __c) noexcept
      {

 try
   {
     _Tp(__make_move_if_noexcept_iterator(__c.begin()),
  __make_move_if_noexcept_iterator(__c.end()),
  __c.get_allocator()).swap(__c);
     return true;
   }
 catch(...)
   { return false; }



      }
    };



}
# 42 "/usr/include/c++/10/string" 2 3

# 1 "/usr/include/c++/10/bits/localefwd.h" 1 3
# 37 "/usr/include/c++/10/bits/localefwd.h" 3
       
# 38 "/usr/include/c++/10/bits/localefwd.h" 3


# 1 "/usr/include/x86_64-linux-gnu/c++/10/bits/c++locale.h" 1 3
# 39 "/usr/include/x86_64-linux-gnu/c++/10/bits/c++locale.h" 3
       
# 40 "/usr/include/x86_64-linux-gnu/c++/10/bits/c++locale.h" 3

# 1 "/usr/include/c++/10/clocale" 1 3
# 39 "/usr/include/c++/10/clocale" 3
       
# 40 "/usr/include/c++/10/clocale" 3


# 1 "/usr/include/locale.h" 1 3 4
# 28 "/usr/include/locale.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 29 "/usr/include/locale.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/locale.h" 1 3 4
# 30 "/usr/include/locale.h" 2 3 4

extern "C" {
# 51 "/usr/include/locale.h" 3 4
struct lconv
{


  char *decimal_point;
  char *thousands_sep;





  char *grouping;





  char *int_curr_symbol;
  char *currency_symbol;
  char *mon_decimal_point;
  char *mon_thousands_sep;
  char *mon_grouping;
  char *positive_sign;
  char *negative_sign;
  char int_frac_digits;
  char frac_digits;

  char p_cs_precedes;

  char p_sep_by_space;

  char n_cs_precedes;

  char n_sep_by_space;






  char p_sign_posn;
  char n_sign_posn;


  char int_p_cs_precedes;

  char int_p_sep_by_space;

  char int_n_cs_precedes;

  char int_n_sep_by_space;






  char int_p_sign_posn;
  char int_n_sign_posn;
# 118 "/usr/include/locale.h" 3 4
};



extern char *setlocale (int __category, const char *__locale) throw ();


extern struct lconv *localeconv (void) throw ();
# 141 "/usr/include/locale.h" 3 4
extern locale_t newlocale (int __category_mask, const char *__locale,
      locale_t __base) throw ();
# 176 "/usr/include/locale.h" 3 4
extern locale_t duplocale (locale_t __dataset) throw ();



extern void freelocale (locale_t __dataset) throw ();






extern locale_t uselocale (locale_t __dataset) throw ();







}
# 43 "/usr/include/c++/10/clocale" 2 3
# 51 "/usr/include/c++/10/clocale" 3
namespace std
{
  using ::lconv;
  using ::setlocale;
  using ::localeconv;
}
# 42 "/usr/include/x86_64-linux-gnu/c++/10/bits/c++locale.h" 2 3






namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


  extern "C" __typeof(uselocale) __uselocale;


}


namespace std __attribute__ ((__visibility__ ("default")))
{


  typedef __locale_t __c_locale;





  inline int
  __convert_from_v(const __c_locale& __cloc __attribute__ ((__unused__)),
     char* __out,
     const int __size __attribute__ ((__unused__)),
     const char* __fmt, ...)
  {

    __c_locale __old = __gnu_cxx::__uselocale(__cloc);
# 88 "/usr/include/x86_64-linux-gnu/c++/10/bits/c++locale.h" 3
    __builtin_va_list __args;
    __builtin_va_start(__args, __fmt);


    const int __ret = __builtin_vsnprintf(__out, __size, __fmt, __args);




    __builtin_va_end(__args);


    __gnu_cxx::__uselocale(__old);







    return __ret;
  }


}
# 41 "/usr/include/c++/10/bits/localefwd.h" 2 3
# 1 "/usr/include/c++/10/iosfwd" 1 3
# 36 "/usr/include/c++/10/iosfwd" 3
       
# 37 "/usr/include/c++/10/iosfwd" 3





namespace std __attribute__ ((__visibility__ ("default")))
{

# 74 "/usr/include/c++/10/iosfwd" 3
  class ios_base;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ios;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_streambuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_istream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ostream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_iostream;


namespace __cxx11 {

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
     typename _Alloc = allocator<_CharT> >
    class basic_stringbuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_istringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_ostringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_stringstream;

}

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_filebuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ifstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ofstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_fstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class ostreambuf_iterator;



  typedef basic_ios<char> ios;


  typedef basic_streambuf<char> streambuf;


  typedef basic_istream<char> istream;


  typedef basic_ostream<char> ostream;


  typedef basic_iostream<char> iostream;


  typedef basic_stringbuf<char> stringbuf;


  typedef basic_istringstream<char> istringstream;


  typedef basic_ostringstream<char> ostringstream;


  typedef basic_stringstream<char> stringstream;


  typedef basic_filebuf<char> filebuf;


  typedef basic_ifstream<char> ifstream;


  typedef basic_ofstream<char> ofstream;


  typedef basic_fstream<char> fstream;



  typedef basic_ios<wchar_t> wios;


  typedef basic_streambuf<wchar_t> wstreambuf;


  typedef basic_istream<wchar_t> wistream;


  typedef basic_ostream<wchar_t> wostream;


  typedef basic_iostream<wchar_t> wiostream;


  typedef basic_stringbuf<wchar_t> wstringbuf;


  typedef basic_istringstream<wchar_t> wistringstream;


  typedef basic_ostringstream<wchar_t> wostringstream;


  typedef basic_stringstream<wchar_t> wstringstream;


  typedef basic_filebuf<wchar_t> wfilebuf;


  typedef basic_ifstream<wchar_t> wifstream;


  typedef basic_ofstream<wchar_t> wofstream;


  typedef basic_fstream<wchar_t> wfstream;




}
# 42 "/usr/include/c++/10/bits/localefwd.h" 2 3
# 1 "/usr/include/c++/10/cctype" 1 3
# 39 "/usr/include/c++/10/cctype" 3
       
# 40 "/usr/include/c++/10/cctype" 3
# 62 "/usr/include/c++/10/cctype" 3
namespace std
{
  using ::isalnum;
  using ::isalpha;
  using ::iscntrl;
  using ::isdigit;
  using ::isgraph;
  using ::islower;
  using ::isprint;
  using ::ispunct;
  using ::isspace;
  using ::isupper;
  using ::isxdigit;
  using ::tolower;
  using ::toupper;
}







namespace std
{
  using ::isblank;
}
# 43 "/usr/include/c++/10/bits/localefwd.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 55 "/usr/include/c++/10/bits/localefwd.h" 3
  class locale;

  template<typename _Facet>
    bool
    has_facet(const locale&) throw();

  template<typename _Facet>
    const _Facet&
    use_facet(const locale&);


  template<typename _CharT>
    bool
    isspace(_CharT, const locale&);

  template<typename _CharT>
    bool
    isprint(_CharT, const locale&);

  template<typename _CharT>
    bool
    iscntrl(_CharT, const locale&);

  template<typename _CharT>
    bool
    isupper(_CharT, const locale&);

  template<typename _CharT>
    bool
    islower(_CharT, const locale&);

  template<typename _CharT>
    bool
    isalpha(_CharT, const locale&);

  template<typename _CharT>
    bool
    isdigit(_CharT, const locale&);

  template<typename _CharT>
    bool
    ispunct(_CharT, const locale&);

  template<typename _CharT>
    bool
    isxdigit(_CharT, const locale&);

  template<typename _CharT>
    bool
    isalnum(_CharT, const locale&);

  template<typename _CharT>
    bool
    isgraph(_CharT, const locale&);


  template<typename _CharT>
    bool
    isblank(_CharT, const locale&);


  template<typename _CharT>
    _CharT
    toupper(_CharT, const locale&);

  template<typename _CharT>
    _CharT
    tolower(_CharT, const locale&);


  class ctype_base;
  template<typename _CharT>
    class ctype;
  template<> class ctype<char>;

  template<> class ctype<wchar_t>;

  template<typename _CharT>
    class ctype_byname;


  class codecvt_base;
  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt;
  template<> class codecvt<char, char, mbstate_t>;

  template<> class codecvt<wchar_t, char, mbstate_t>;


  template<> class codecvt<char16_t, char, mbstate_t>;
  template<> class codecvt<char32_t, char, mbstate_t>;





  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt_byname;



  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class num_get;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class num_put;

namespace __cxx11 {
  template<typename _CharT> class numpunct;
  template<typename _CharT> class numpunct_byname;
}

namespace __cxx11 {

  template<typename _CharT>
    class collate;
  template<typename _CharT>
    class collate_byname;
}


  class time_base;
namespace __cxx11 {
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class time_get;
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class time_get_byname;
}
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class time_put;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class time_put_byname;


  class money_base;
namespace __cxx11 {
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class money_get;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class money_put;
}
namespace __cxx11 {
  template<typename _CharT, bool _Intl = false>
    class moneypunct;
  template<typename _CharT, bool _Intl = false>
    class moneypunct_byname;
}


  class messages_base;
namespace __cxx11 {
  template<typename _CharT>
    class messages;
  template<typename _CharT>
    class messages_byname;
}


}
# 44 "/usr/include/c++/10/string" 2 3
# 1 "/usr/include/c++/10/bits/ostream_insert.h" 1 3
# 33 "/usr/include/c++/10/bits/ostream_insert.h" 3
       
# 34 "/usr/include/c++/10/bits/ostream_insert.h" 3


# 1 "/usr/include/c++/10/bits/cxxabi_forced.h" 1 3
# 34 "/usr/include/c++/10/bits/cxxabi_forced.h" 3
       
# 35 "/usr/include/c++/10/bits/cxxabi_forced.h" 3

#pragma GCC visibility push(default)


namespace __cxxabiv1
{







  class __forced_unwind
  {
    virtual ~__forced_unwind() throw();


    virtual void __pure_dummy() = 0;
  };
}


#pragma GCC visibility pop
# 37 "/usr/include/c++/10/bits/ostream_insert.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    inline void
    __ostream_write(basic_ostream<_CharT, _Traits>& __out,
      const _CharT* __s, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const streamsize __put = __out.rdbuf()->sputn(__s, __n);
      if (__put != __n)
 __out.setstate(__ios_base::badbit);
    }

  template<typename _CharT, typename _Traits>
    inline void
    __ostream_fill(basic_ostream<_CharT, _Traits>& __out, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const _CharT __c = __out.fill();
      for (; __n > 0; --__n)
 {
   const typename _Traits::int_type __put = __out.rdbuf()->sputc(__c);
   if (_Traits::eq_int_type(__put, _Traits::eof()))
     {
       __out.setstate(__ios_base::badbit);
       break;
     }
 }
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    __ostream_insert(basic_ostream<_CharT, _Traits>& __out,
       const _CharT* __s, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      typename __ostream_type::sentry __cerb(__out);
      if (__cerb)
 {
   try
     {
       const streamsize __w = __out.width();
       if (__w > __n)
  {
    const bool __left = ((__out.flags()
     & __ios_base::adjustfield)
           == __ios_base::left);
    if (!__left)
      __ostream_fill(__out, __w - __n);
    if (__out.good())
      __ostream_write(__out, __s, __n);
    if (__left && __out.good())
      __ostream_fill(__out, __w - __n);
  }
       else
  __ostream_write(__out, __s, __n);
       __out.width(0);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __out._M_setstate(__ios_base::badbit);
       throw;
     }
   catch(...)
     { __out._M_setstate(__ios_base::badbit); }
 }
      return __out;
    }




  extern template ostream& __ostream_insert(ostream&, const char*, streamsize);


  extern template wostream& __ostream_insert(wostream&, const wchar_t*,
          streamsize);




}
# 45 "/usr/include/c++/10/string" 2 3



# 1 "/usr/include/c++/10/bits/stl_function.h" 1 3
# 63 "/usr/include/c++/10/bits/stl_function.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 104 "/usr/include/c++/10/bits/stl_function.h" 3
  template<typename _Arg, typename _Result>
    struct unary_function
    {

      typedef _Arg argument_type;


      typedef _Result result_type;
    };




  template<typename _Arg1, typename _Arg2, typename _Result>
    struct binary_function
    {

      typedef _Arg1 first_argument_type;


      typedef _Arg2 second_argument_type;


      typedef _Result result_type;
    };
# 144 "/usr/include/c++/10/bits/stl_function.h" 3
  struct __is_transparent;

  template<typename _Tp = void>
    struct plus;

  template<typename _Tp = void>
    struct minus;

  template<typename _Tp = void>
    struct multiplies;

  template<typename _Tp = void>
    struct divides;

  template<typename _Tp = void>
    struct modulus;

  template<typename _Tp = void>
    struct negate;



  template<typename _Tp>
    struct plus : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x + __y; }
    };


  template<typename _Tp>
    struct minus : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x - __y; }
    };


  template<typename _Tp>
    struct multiplies : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x * __y; }
    };


  template<typename _Tp>
    struct divides : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x / __y; }
    };


  template<typename _Tp>
    struct modulus : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x % __y; }
    };


  template<typename _Tp>
    struct negate : public unary_function<_Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x) const
      { return -__x; }
    };





  template<>
    struct plus<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) + std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) + std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) + std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct minus<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) - std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) - std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) - std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct multiplies<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) * std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) * std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) * std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct divides<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) / std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) / std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) / std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct modulus<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) % std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) % std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) % std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct negate<void>
    {
      template <typename _Tp>
 constexpr
 auto
 operator()(_Tp&& __t) const
 noexcept(noexcept(-std::forward<_Tp>(__t)))
 -> decltype(-std::forward<_Tp>(__t))
 { return -std::forward<_Tp>(__t); }

      typedef __is_transparent is_transparent;
    };
# 330 "/usr/include/c++/10/bits/stl_function.h" 3
  template<typename _Tp = void>
    struct equal_to;

  template<typename _Tp = void>
    struct not_equal_to;

  template<typename _Tp = void>
    struct greater;

  template<typename _Tp = void>
    struct less;

  template<typename _Tp = void>
    struct greater_equal;

  template<typename _Tp = void>
    struct less_equal;



  template<typename _Tp>
    struct equal_to : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x == __y; }
    };


  template<typename _Tp>
    struct not_equal_to : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x != __y; }
    };


  template<typename _Tp>
    struct greater : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x > __y; }
    };


  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x < __y; }
    };


  template<typename _Tp>
    struct greater_equal : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x >= __y; }
    };


  template<typename _Tp>
    struct less_equal : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x <= __y; }
    };


  template<typename _Tp>
    struct greater<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      constexpr bool
      operator()(_Tp* __x, _Tp* __y) const noexcept
      {


 if (__builtin_is_constant_evaluated())



   return __x > __y;

 return (long unsigned int)__x > (long unsigned int)__y;
      }
    };


  template<typename _Tp>
    struct less<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      constexpr bool
      operator()(_Tp* __x, _Tp* __y) const noexcept
      {


 if (__builtin_is_constant_evaluated())



   return __x < __y;

 return (long unsigned int)__x < (long unsigned int)__y;
      }
    };


  template<typename _Tp>
    struct greater_equal<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      constexpr bool
      operator()(_Tp* __x, _Tp* __y) const noexcept
      {


 if (__builtin_is_constant_evaluated())



   return __x >= __y;

 return (long unsigned int)__x >= (long unsigned int)__y;
      }
    };


  template<typename _Tp>
    struct less_equal<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      constexpr bool
      operator()(_Tp* __x, _Tp* __y) const noexcept
      {


 if (__builtin_is_constant_evaluated())



   return __x <= __y;

 return (long unsigned int)__x <= (long unsigned int)__y;
      }
    };



  template<>
    struct equal_to<void>
    {
      template <typename _Tp, typename _Up>
 constexpr auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) == std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) == std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) == std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct not_equal_to<void>
    {
      template <typename _Tp, typename _Up>
 constexpr auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) != std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) != std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) != std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct greater<void>
    {
      template <typename _Tp, typename _Up>
 constexpr auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) > std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) > std::forward<_Up>(__u))
 {
   return _S_cmp(std::forward<_Tp>(__t), std::forward<_Up>(__u),
   __ptr_cmp<_Tp, _Up>{});
 }

      template<typename _Tp, typename _Up>
 constexpr bool
 operator()(_Tp* __t, _Up* __u) const noexcept
 { return greater<common_type_t<_Tp*, _Up*>>{}(__t, __u); }

      typedef __is_transparent is_transparent;

    private:
      template <typename _Tp, typename _Up>
 static constexpr decltype(auto)
 _S_cmp(_Tp&& __t, _Up&& __u, false_type)
 { return std::forward<_Tp>(__t) > std::forward<_Up>(__u); }

      template <typename _Tp, typename _Up>
 static constexpr bool
 _S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept
 {
   return greater<const volatile void*>{}(
       static_cast<const volatile void*>(std::forward<_Tp>(__t)),
       static_cast<const volatile void*>(std::forward<_Up>(__u)));
 }


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded2 : true_type { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded2<_Tp, _Up, __void_t<
   decltype(std::declval<_Tp>().operator>(std::declval<_Up>()))>>
 : false_type { };


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded<_Tp, _Up, __void_t<
   decltype(operator>(std::declval<_Tp>(), std::declval<_Up>()))>>
 : false_type { };

      template<typename _Tp, typename _Up>
 using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,
       is_convertible<_Tp, const volatile void*>,
       is_convertible<_Up, const volatile void*>>;
    };


  template<>
    struct less<void>
    {
      template <typename _Tp, typename _Up>
 constexpr auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) < std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) < std::forward<_Up>(__u))
 {
   return _S_cmp(std::forward<_Tp>(__t), std::forward<_Up>(__u),
   __ptr_cmp<_Tp, _Up>{});
 }

      template<typename _Tp, typename _Up>
 constexpr bool
 operator()(_Tp* __t, _Up* __u) const noexcept
 { return less<common_type_t<_Tp*, _Up*>>{}(__t, __u); }

      typedef __is_transparent is_transparent;

    private:
      template <typename _Tp, typename _Up>
 static constexpr decltype(auto)
 _S_cmp(_Tp&& __t, _Up&& __u, false_type)
 { return std::forward<_Tp>(__t) < std::forward<_Up>(__u); }

      template <typename _Tp, typename _Up>
 static constexpr bool
 _S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept
 {
   return less<const volatile void*>{}(
       static_cast<const volatile void*>(std::forward<_Tp>(__t)),
       static_cast<const volatile void*>(std::forward<_Up>(__u)));
 }


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded2 : true_type { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded2<_Tp, _Up, __void_t<
   decltype(std::declval<_Tp>().operator<(std::declval<_Up>()))>>
 : false_type { };


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded<_Tp, _Up, __void_t<
   decltype(operator<(std::declval<_Tp>(), std::declval<_Up>()))>>
 : false_type { };

      template<typename _Tp, typename _Up>
 using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,
       is_convertible<_Tp, const volatile void*>,
       is_convertible<_Up, const volatile void*>>;
    };


  template<>
    struct greater_equal<void>
    {
      template <typename _Tp, typename _Up>
 constexpr auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) >= std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) >= std::forward<_Up>(__u))
 {
   return _S_cmp(std::forward<_Tp>(__t), std::forward<_Up>(__u),
   __ptr_cmp<_Tp, _Up>{});
 }

      template<typename _Tp, typename _Up>
 constexpr bool
 operator()(_Tp* __t, _Up* __u) const noexcept
 { return greater_equal<common_type_t<_Tp*, _Up*>>{}(__t, __u); }

      typedef __is_transparent is_transparent;

    private:
      template <typename _Tp, typename _Up>
 static constexpr decltype(auto)
 _S_cmp(_Tp&& __t, _Up&& __u, false_type)
 { return std::forward<_Tp>(__t) >= std::forward<_Up>(__u); }

      template <typename _Tp, typename _Up>
 static constexpr bool
 _S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept
 {
   return greater_equal<const volatile void*>{}(
       static_cast<const volatile void*>(std::forward<_Tp>(__t)),
       static_cast<const volatile void*>(std::forward<_Up>(__u)));
 }


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded2 : true_type { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded2<_Tp, _Up, __void_t<
   decltype(std::declval<_Tp>().operator>=(std::declval<_Up>()))>>
 : false_type { };


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded<_Tp, _Up, __void_t<
   decltype(operator>=(std::declval<_Tp>(), std::declval<_Up>()))>>
 : false_type { };

      template<typename _Tp, typename _Up>
 using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,
       is_convertible<_Tp, const volatile void*>,
       is_convertible<_Up, const volatile void*>>;
    };


  template<>
    struct less_equal<void>
    {
      template <typename _Tp, typename _Up>
 constexpr auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) <= std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) <= std::forward<_Up>(__u))
 {
   return _S_cmp(std::forward<_Tp>(__t), std::forward<_Up>(__u),
   __ptr_cmp<_Tp, _Up>{});
 }

      template<typename _Tp, typename _Up>
 constexpr bool
 operator()(_Tp* __t, _Up* __u) const noexcept
 { return less_equal<common_type_t<_Tp*, _Up*>>{}(__t, __u); }

      typedef __is_transparent is_transparent;

    private:
      template <typename _Tp, typename _Up>
 static constexpr decltype(auto)
 _S_cmp(_Tp&& __t, _Up&& __u, false_type)
 { return std::forward<_Tp>(__t) <= std::forward<_Up>(__u); }

      template <typename _Tp, typename _Up>
 static constexpr bool
 _S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept
 {
   return less_equal<const volatile void*>{}(
       static_cast<const volatile void*>(std::forward<_Tp>(__t)),
       static_cast<const volatile void*>(std::forward<_Up>(__u)));
 }


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded2 : true_type { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded2<_Tp, _Up, __void_t<
   decltype(std::declval<_Tp>().operator<=(std::declval<_Up>()))>>
 : false_type { };


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded<_Tp, _Up, __void_t<
   decltype(operator<=(std::declval<_Tp>(), std::declval<_Up>()))>>
 : false_type { };

      template<typename _Tp, typename _Up>
 using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,
       is_convertible<_Tp, const volatile void*>,
       is_convertible<_Up, const volatile void*>>;
    };
# 774 "/usr/include/c++/10/bits/stl_function.h" 3
  template<typename _Tp = void>
    struct logical_and;

  template<typename _Tp = void>
    struct logical_or;

  template<typename _Tp = void>
    struct logical_not;



  template<typename _Tp>
    struct logical_and : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x && __y; }
    };


  template<typename _Tp>
    struct logical_or : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x || __y; }
    };


  template<typename _Tp>
    struct logical_not : public unary_function<_Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x) const
      { return !__x; }
    };



  template<>
    struct logical_and<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) && std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) && std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) && std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct logical_or<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) || std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) || std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) || std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct logical_not<void>
    {
      template <typename _Tp>
 constexpr
 auto
 operator()(_Tp&& __t) const
 noexcept(noexcept(!std::forward<_Tp>(__t)))
 -> decltype(!std::forward<_Tp>(__t))
 { return !std::forward<_Tp>(__t); }

      typedef __is_transparent is_transparent;
    };




  template<typename _Tp = void>
    struct bit_and;

  template<typename _Tp = void>
    struct bit_or;

  template<typename _Tp = void>
    struct bit_xor;

  template<typename _Tp = void>
    struct bit_not;




  template<typename _Tp>
    struct bit_and : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x & __y; }
    };

  template<typename _Tp>
    struct bit_or : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x | __y; }
    };

  template<typename _Tp>
    struct bit_xor : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x ^ __y; }
    };

  template<typename _Tp>
    struct bit_not : public unary_function<_Tp, _Tp>
    {
    constexpr
      _Tp
      operator()(const _Tp& __x) const
      { return ~__x; }
    };


  template <>
    struct bit_and<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) & std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) & std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) & std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };

  template <>
    struct bit_or<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) | std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) | std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) | std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };

  template <>
    struct bit_xor<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) ^ std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) ^ std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) ^ std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };

  template <>
    struct bit_not<void>
    {
      template <typename _Tp>
 constexpr
 auto
 operator()(_Tp&& __t) const
 noexcept(noexcept(~std::forward<_Tp>(__t)))
 -> decltype(~std::forward<_Tp>(__t))
 { return ~std::forward<_Tp>(__t); }

      typedef __is_transparent is_transparent;
    };
# 1002 "/usr/include/c++/10/bits/stl_function.h" 3
  template<typename _Predicate>
    class unary_negate
    : public unary_function<typename _Predicate::argument_type, bool>
    {
    protected:
      _Predicate _M_pred;

    public:
      constexpr
      explicit
      unary_negate(const _Predicate& __x) : _M_pred(__x) { }

      constexpr
      bool
      operator()(const typename _Predicate::argument_type& __x) const
      { return !_M_pred(__x); }
    };


  template<typename _Predicate>
    constexpr
    inline unary_negate<_Predicate>
    not1(const _Predicate& __pred)
    { return unary_negate<_Predicate>(__pred); }


  template<typename _Predicate>
    class binary_negate
    : public binary_function<typename _Predicate::first_argument_type,
        typename _Predicate::second_argument_type, bool>
    {
    protected:
      _Predicate _M_pred;

    public:
      constexpr
      explicit
      binary_negate(const _Predicate& __x) : _M_pred(__x) { }

      constexpr
      bool
      operator()(const typename _Predicate::first_argument_type& __x,
   const typename _Predicate::second_argument_type& __y) const
      { return !_M_pred(__x, __y); }
    };


  template<typename _Predicate>
    constexpr
    inline binary_negate<_Predicate>
    not2(const _Predicate& __pred)
    { return binary_negate<_Predicate>(__pred); }
# 1079 "/usr/include/c++/10/bits/stl_function.h" 3
  template<typename _Arg, typename _Result>
    class pointer_to_unary_function : public unary_function<_Arg, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg);

    public:
      pointer_to_unary_function() { }

      explicit
      pointer_to_unary_function(_Result (*__x)(_Arg))
      : _M_ptr(__x) { }

      _Result
      operator()(_Arg __x) const
      { return _M_ptr(__x); }
    };


  template<typename _Arg, typename _Result>
    inline pointer_to_unary_function<_Arg, _Result>
    ptr_fun(_Result (*__x)(_Arg))
    { return pointer_to_unary_function<_Arg, _Result>(__x); }


  template<typename _Arg1, typename _Arg2, typename _Result>
    class pointer_to_binary_function
    : public binary_function<_Arg1, _Arg2, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg1, _Arg2);

    public:
      pointer_to_binary_function() { }

      explicit
      pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2))
      : _M_ptr(__x) { }

      _Result
      operator()(_Arg1 __x, _Arg2 __y) const
      { return _M_ptr(__x, __y); }
    };


  template<typename _Arg1, typename _Arg2, typename _Result>
    inline pointer_to_binary_function<_Arg1, _Arg2, _Result>
    ptr_fun(_Result (*__x)(_Arg1, _Arg2))
    { return pointer_to_binary_function<_Arg1, _Arg2, _Result>(__x); }


  template<typename _Tp>
    struct _Identity
    : public unary_function<_Tp, _Tp>
    {
      _Tp&
      operator()(_Tp& __x) const
      { return __x; }

      const _Tp&
      operator()(const _Tp& __x) const
      { return __x; }
    };


  template<typename _Tp> struct _Identity<const _Tp> : _Identity<_Tp> { };

  template<typename _Pair>
    struct _Select1st
    : public unary_function<_Pair, typename _Pair::first_type>
    {
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
      { return __x.first; }


      template<typename _Pair2>
        typename _Pair2::first_type&
        operator()(_Pair2& __x) const
        { return __x.first; }

      template<typename _Pair2>
        const typename _Pair2::first_type&
        operator()(const _Pair2& __x) const
        { return __x.first; }

    };

  template<typename _Pair>
    struct _Select2nd
    : public unary_function<_Pair, typename _Pair::second_type>
    {
      typename _Pair::second_type&
      operator()(_Pair& __x) const
      { return __x.second; }

      const typename _Pair::second_type&
      operator()(const _Pair& __x) const
      { return __x.second; }
    };
# 1202 "/usr/include/c++/10/bits/stl_function.h" 3
  template<typename _Ret, typename _Tp>
    class mem_fun_t : public unary_function<_Tp*, _Ret>
    {
    public:
      explicit
      mem_fun_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p) const
      { return (__p->*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)();
    };



  template<typename _Ret, typename _Tp>
    class const_mem_fun_t : public unary_function<const _Tp*, _Ret>
    {
    public:
      explicit
      const_mem_fun_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp* __p) const
      { return (__p->*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)() const;
    };



  template<typename _Ret, typename _Tp>
    class mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      mem_fun_ref_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp& __r) const
      { return (__r.*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)();
  };



  template<typename _Ret, typename _Tp>
    class const_mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      const_mem_fun_ref_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp& __r) const
      { return (__r.*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)() const;
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class mem_fun1_t : public binary_function<_Tp*, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg);
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class const_mem_fun1_t : public binary_function<const _Tp*, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg);
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class const_mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    };



  template<typename _Ret, typename _Tp>
    inline mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)())
    { return mem_fun_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline const_mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)())
    { return mem_fun_ref_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline const_mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_ref_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline const_mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline const_mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }




}


# 1 "/usr/include/c++/10/backward/binders.h" 1 3
# 60 "/usr/include/c++/10/backward/binders.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

namespace std __attribute__ ((__visibility__ ("default")))
{

# 107 "/usr/include/c++/10/backward/binders.h" 3
  template<typename _Operation>
    class binder1st
    : public unary_function<typename _Operation::second_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::first_argument_type value;

    public:
      binder1st(const _Operation& __x,
  const typename _Operation::first_argument_type& __y)
      : op(__x), value(__y) { }

      typename _Operation::result_type
      operator()(const typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }



      typename _Operation::result_type
      operator()(typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }
    } __attribute__ ((__deprecated__));


  template<typename _Operation, typename _Tp>
    inline binder1st<_Operation>
    bind1st(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::first_argument_type _Arg1_type;
      return binder1st<_Operation>(__fn, _Arg1_type(__x));
    }


  template<typename _Operation>
    class binder2nd
    : public unary_function<typename _Operation::first_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::second_argument_type value;

    public:
      binder2nd(const _Operation& __x,
  const typename _Operation::second_argument_type& __y)
      : op(__x), value(__y) { }

      typename _Operation::result_type
      operator()(const typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }



      typename _Operation::result_type
      operator()(typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }
    } __attribute__ ((__deprecated__));


  template<typename _Operation, typename _Tp>
    inline binder2nd<_Operation>
    bind2nd(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::second_argument_type _Arg2_type;
      return binder2nd<_Operation>(__fn, _Arg2_type(__x));
    }



}

#pragma GCC diagnostic pop
# 1393 "/usr/include/c++/10/bits/stl_function.h" 2 3
# 49 "/usr/include/c++/10/string" 2 3





# 1 "/usr/include/c++/10/bits/range_access.h" 1 3
# 33 "/usr/include/c++/10/bits/range_access.h" 3
       
# 34 "/usr/include/c++/10/bits/range_access.h" 3


# 1 "/usr/include/c++/10/initializer_list" 1 3
# 33 "/usr/include/c++/10/initializer_list" 3
       
# 34 "/usr/include/c++/10/initializer_list" 3





#pragma GCC visibility push(default)



namespace std
{

  template<class _E>
    class initializer_list
    {
    public:
      typedef _E value_type;
      typedef const _E& reference;
      typedef const _E& const_reference;
      typedef size_t size_type;
      typedef const _E* iterator;
      typedef const _E* const_iterator;

    private:
      iterator _M_array;
      size_type _M_len;


      constexpr initializer_list(const_iterator __a, size_type __l)
      : _M_array(__a), _M_len(__l) { }

    public:
      constexpr initializer_list() noexcept
      : _M_array(0), _M_len(0) { }


      constexpr size_type
      size() const noexcept { return _M_len; }


      constexpr const_iterator
      begin() const noexcept { return _M_array; }


      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
    };







  template<class _Tp>
    constexpr const _Tp*
    begin(initializer_list<_Tp> __ils) noexcept
    { return __ils.begin(); }







  template<class _Tp>
    constexpr const _Tp*
    end(initializer_list<_Tp> __ils) noexcept
    { return __ils.end(); }
}

#pragma GCC visibility pop
# 37 "/usr/include/c++/10/bits/range_access.h" 2 3
# 1 "/usr/include/c++/10/bits/iterator_concepts.h" 1 3
# 33 "/usr/include/c++/10/bits/iterator_concepts.h" 3
       
# 34 "/usr/include/c++/10/bits/iterator_concepts.h" 3

# 1 "/usr/include/c++/10/concepts" 1 3
# 36 "/usr/include/c++/10/bits/iterator_concepts.h" 2 3

# 1 "/usr/include/c++/10/bits/range_cmp.h" 1 3
# 38 "/usr/include/c++/10/bits/iterator_concepts.h" 2 3
# 38 "/usr/include/c++/10/bits/range_access.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename _Container>
    inline auto
    begin(_Container& __cont) -> decltype(__cont.begin())
    { return __cont.begin(); }






  template<typename _Container>
    inline auto
    begin(const _Container& __cont) -> decltype(__cont.begin())
    { return __cont.begin(); }






  template<typename _Container>
    inline auto
    end(_Container& __cont) -> decltype(__cont.end())
    { return __cont.end(); }






  template<typename _Container>
    inline auto
    end(const _Container& __cont) -> decltype(__cont.end())
    { return __cont.end(); }





  template<typename _Tp, size_t _Nm>
    inline constexpr _Tp*
    begin(_Tp (&__arr)[_Nm])
    { return __arr; }






  template<typename _Tp, size_t _Nm>
    inline constexpr _Tp*
    end(_Tp (&__arr)[_Nm])
    { return __arr + _Nm; }



  template<typename _Tp> class valarray;

  template<typename _Tp> _Tp* begin(valarray<_Tp>&);
  template<typename _Tp> const _Tp* begin(const valarray<_Tp>&);
  template<typename _Tp> _Tp* end(valarray<_Tp>&);
  template<typename _Tp> const _Tp* end(const valarray<_Tp>&);






  template<typename _Container>
    inline constexpr auto
    cbegin(const _Container& __cont) noexcept(noexcept(std::begin(__cont)))
      -> decltype(std::begin(__cont))
    { return std::begin(__cont); }






  template<typename _Container>
    inline constexpr auto
    cend(const _Container& __cont) noexcept(noexcept(std::end(__cont)))
      -> decltype(std::end(__cont))
    { return std::end(__cont); }






  template<typename _Container>
    inline auto
    rbegin(_Container& __cont) -> decltype(__cont.rbegin())
    { return __cont.rbegin(); }






  template<typename _Container>
    inline auto
    rbegin(const _Container& __cont) -> decltype(__cont.rbegin())
    { return __cont.rbegin(); }






  template<typename _Container>
    inline auto
    rend(_Container& __cont) -> decltype(__cont.rend())
    { return __cont.rend(); }






  template<typename _Container>
    inline auto
    rend(const _Container& __cont) -> decltype(__cont.rend())
    { return __cont.rend(); }






  template<typename _Tp, size_t _Nm>
    inline reverse_iterator<_Tp*>
    rbegin(_Tp (&__arr)[_Nm])
    { return reverse_iterator<_Tp*>(__arr + _Nm); }






  template<typename _Tp, size_t _Nm>
    inline reverse_iterator<_Tp*>
    rend(_Tp (&__arr)[_Nm])
    { return reverse_iterator<_Tp*>(__arr); }






  template<typename _Tp>
    inline reverse_iterator<const _Tp*>
    rbegin(initializer_list<_Tp> __il)
    { return reverse_iterator<const _Tp*>(__il.end()); }






  template<typename _Tp>
    inline reverse_iterator<const _Tp*>
    rend(initializer_list<_Tp> __il)
    { return reverse_iterator<const _Tp*>(__il.begin()); }






  template<typename _Container>
    inline auto
    crbegin(const _Container& __cont) -> decltype(std::rbegin(__cont))
    { return std::rbegin(__cont); }






  template<typename _Container>
    inline auto
    crend(const _Container& __cont) -> decltype(std::rend(__cont))
    { return std::rend(__cont); }
# 1153 "/usr/include/c++/10/bits/range_access.h" 3

}
# 55 "/usr/include/c++/10/string" 2 3
# 1 "/usr/include/c++/10/bits/basic_string.h" 1 3
# 37 "/usr/include/c++/10/bits/basic_string.h" 3
       
# 38 "/usr/include/c++/10/bits/basic_string.h" 3

# 1 "/usr/include/c++/10/ext/atomicity.h" 1 3
# 32 "/usr/include/c++/10/ext/atomicity.h" 3
       
# 33 "/usr/include/c++/10/ext/atomicity.h" 3


# 1 "/usr/include/x86_64-linux-gnu/c++/10/bits/gthr.h" 1 3
# 30 "/usr/include/x86_64-linux-gnu/c++/10/bits/gthr.h" 3
#pragma GCC visibility push(default)
# 148 "/usr/include/x86_64-linux-gnu/c++/10/bits/gthr.h" 3
# 1 "/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h" 1 3
# 35 "/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h" 3
# 1 "/usr/include/pthread.h" 1 3 4
# 22 "/usr/include/pthread.h" 3 4
# 1 "/usr/include/sched.h" 1 3 4
# 29 "/usr/include/sched.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 30 "/usr/include/sched.h" 2 3 4
# 43 "/usr/include/sched.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sched.h" 1 3 4
# 76 "/usr/include/x86_64-linux-gnu/bits/sched.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_sched_param.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/types/struct_sched_param.h" 3 4
struct sched_param
{
  int sched_priority;
};
# 77 "/usr/include/x86_64-linux-gnu/bits/sched.h" 2 3 4

extern "C" {



extern int clone (int (*__fn) (void *__arg), void *__child_stack,
    int __flags, void *__arg, ...) throw ();


extern int unshare (int __flags) throw ();


extern int sched_getcpu (void) throw ();


extern int getcpu (unsigned int *, unsigned int *) throw ();


extern int setns (int __fd, int __nstype) throw ();


}
# 44 "/usr/include/sched.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 3 4
typedef unsigned long int __cpu_mask;






typedef struct
{
  __cpu_mask __bits[1024 / (8 * sizeof (__cpu_mask))];
} cpu_set_t;
# 115 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 3 4
extern "C" {

extern int __sched_cpucount (size_t __setsize, const cpu_set_t *__setp)
     throw ();
extern cpu_set_t *__sched_cpualloc (size_t __count) throw () ;
extern void __sched_cpufree (cpu_set_t *__set) throw ();

}
# 45 "/usr/include/sched.h" 2 3 4






extern "C" {


extern int sched_setparam (__pid_t __pid, const struct sched_param *__param)
     throw ();


extern int sched_getparam (__pid_t __pid, struct sched_param *__param) throw ();


extern int sched_setscheduler (__pid_t __pid, int __policy,
          const struct sched_param *__param) throw ();


extern int sched_getscheduler (__pid_t __pid) throw ();


extern int sched_yield (void) throw ();


extern int sched_get_priority_max (int __algorithm) throw ();


extern int sched_get_priority_min (int __algorithm) throw ();


extern int sched_rr_get_interval (__pid_t __pid, struct timespec *__t) throw ();
# 121 "/usr/include/sched.h" 3 4
extern int sched_setaffinity (__pid_t __pid, size_t __cpusetsize,
         const cpu_set_t *__cpuset) throw ();


extern int sched_getaffinity (__pid_t __pid, size_t __cpusetsize,
         cpu_set_t *__cpuset) throw ();


}
# 23 "/usr/include/pthread.h" 2 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 2 3 4




typedef long int __jmp_buf[8];
# 28 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/pthread.h" 2 3 4




enum
{
  PTHREAD_CREATE_JOINABLE,

  PTHREAD_CREATE_DETACHED

};



enum
{
  PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_ADAPTIVE_NP

  ,
  PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL



  , PTHREAD_MUTEX_FAST_NP = PTHREAD_MUTEX_TIMED_NP

};




enum
{
  PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_STALLED_NP = PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_ROBUST,
  PTHREAD_MUTEX_ROBUST_NP = PTHREAD_MUTEX_ROBUST
};





enum
{
  PTHREAD_PRIO_NONE,
  PTHREAD_PRIO_INHERIT,
  PTHREAD_PRIO_PROTECT
};
# 100 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_RWLOCK_PREFER_READER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP,
  PTHREAD_RWLOCK_DEFAULT_NP = PTHREAD_RWLOCK_PREFER_READER_NP
};
# 120 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_INHERIT_SCHED,

  PTHREAD_EXPLICIT_SCHED

};



enum
{
  PTHREAD_SCOPE_SYSTEM,

  PTHREAD_SCOPE_PROCESS

};



enum
{
  PTHREAD_PROCESS_PRIVATE,

  PTHREAD_PROCESS_SHARED

};
# 155 "/usr/include/pthread.h" 3 4
struct _pthread_cleanup_buffer
{
  void (*__routine) (void *);
  void *__arg;
  int __canceltype;
  struct _pthread_cleanup_buffer *__prev;
};


enum
{
  PTHREAD_CANCEL_ENABLE,

  PTHREAD_CANCEL_DISABLE

};
enum
{
  PTHREAD_CANCEL_DEFERRED,

  PTHREAD_CANCEL_ASYNCHRONOUS

};
# 193 "/usr/include/pthread.h" 3 4
extern "C" {




extern int pthread_create (pthread_t *__restrict __newthread,
      const pthread_attr_t *__restrict __attr,
      void *(*__start_routine) (void *),
      void *__restrict __arg) throw () __attribute__ ((__nonnull__ (1, 3)));





extern void pthread_exit (void *__retval) __attribute__ ((__noreturn__));







extern int pthread_join (pthread_t __th, void **__thread_return);




extern int pthread_tryjoin_np (pthread_t __th, void **__thread_return) throw ();







extern int pthread_timedjoin_np (pthread_t __th, void **__thread_return,
     const struct timespec *__abstime);
# 238 "/usr/include/pthread.h" 3 4
extern int pthread_clockjoin_np (pthread_t __th, void **__thread_return,
                                 clockid_t __clockid,
     const struct timespec *__abstime);






extern int pthread_detach (pthread_t __th) throw ();



extern pthread_t pthread_self (void) throw () __attribute__ ((__const__));


extern int pthread_equal (pthread_t __thread1, pthread_t __thread2)
  throw () __attribute__ ((__const__));







extern int pthread_attr_init (pthread_attr_t *__attr) throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_destroy (pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getdetachstate (const pthread_attr_t *__attr,
     int *__detachstate)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setdetachstate (pthread_attr_t *__attr,
     int __detachstate)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getguardsize (const pthread_attr_t *__attr,
          size_t *__guardsize)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setguardsize (pthread_attr_t *__attr,
          size_t __guardsize)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getschedparam (const pthread_attr_t *__restrict __attr,
           struct sched_param *__restrict __param)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedparam (pthread_attr_t *__restrict __attr,
           const struct sched_param *__restrict
           __param) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_getschedpolicy (const pthread_attr_t *__restrict
     __attr, int *__restrict __policy)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedpolicy (pthread_attr_t *__attr, int __policy)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getinheritsched (const pthread_attr_t *__restrict
      __attr, int *__restrict __inherit)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setinheritsched (pthread_attr_t *__attr,
      int __inherit)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getscope (const pthread_attr_t *__restrict __attr,
      int *__restrict __scope)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setscope (pthread_attr_t *__attr, int __scope)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getstackaddr (const pthread_attr_t *__restrict
          __attr, void **__restrict __stackaddr)
     throw () __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__deprecated__));





extern int pthread_attr_setstackaddr (pthread_attr_t *__attr,
          void *__stackaddr)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__));


extern int pthread_attr_getstacksize (const pthread_attr_t *__restrict
          __attr, size_t *__restrict __stacksize)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_attr_setstacksize (pthread_attr_t *__attr,
          size_t __stacksize)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getstack (const pthread_attr_t *__restrict __attr,
      void **__restrict __stackaddr,
      size_t *__restrict __stacksize)
     throw () __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_attr_setstack (pthread_attr_t *__attr, void *__stackaddr,
      size_t __stacksize) throw () __attribute__ ((__nonnull__ (1)));





extern int pthread_attr_setaffinity_np (pthread_attr_t *__attr,
     size_t __cpusetsize,
     const cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern int pthread_attr_getaffinity_np (const pthread_attr_t *__attr,
     size_t __cpusetsize,
     cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (1, 3)));


extern int pthread_getattr_default_np (pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_setattr_default_np (const pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));




extern int pthread_getattr_np (pthread_t __th, pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (2)));







extern int pthread_setschedparam (pthread_t __target_thread, int __policy,
      const struct sched_param *__param)
     throw () __attribute__ ((__nonnull__ (3)));


extern int pthread_getschedparam (pthread_t __target_thread,
      int *__restrict __policy,
      struct sched_param *__restrict __param)
     throw () __attribute__ ((__nonnull__ (2, 3)));


extern int pthread_setschedprio (pthread_t __target_thread, int __prio)
     throw ();




extern int pthread_getname_np (pthread_t __target_thread, char *__buf,
          size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int pthread_setname_np (pthread_t __target_thread, const char *__name)
     throw () __attribute__ ((__nonnull__ (2)));





extern int pthread_getconcurrency (void) throw ();


extern int pthread_setconcurrency (int __level) throw ();







extern int pthread_yield (void) throw ();




extern int pthread_setaffinity_np (pthread_t __th, size_t __cpusetsize,
       const cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (3)));


extern int pthread_getaffinity_np (pthread_t __th, size_t __cpusetsize,
       cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (3)));
# 470 "/usr/include/pthread.h" 3 4
extern int pthread_once (pthread_once_t *__once_control,
    void (*__init_routine) (void)) __attribute__ ((__nonnull__ (1, 2)));
# 482 "/usr/include/pthread.h" 3 4
extern int pthread_setcancelstate (int __state, int *__oldstate);



extern int pthread_setcanceltype (int __type, int *__oldtype);


extern int pthread_cancel (pthread_t __th);




extern void pthread_testcancel (void);




typedef struct
{
  struct
  {
    __jmp_buf __cancel_jmp_buf;
    int __mask_was_saved;
  } __cancel_jmp_buf[1];
  void *__pad[4];
} __pthread_unwind_buf_t __attribute__ ((__aligned__));
# 516 "/usr/include/pthread.h" 3 4
struct __pthread_cleanup_frame
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;
};




class __pthread_cleanup_class
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;

 public:
  __pthread_cleanup_class (void (*__fct) (void *), void *__arg)
    : __cancel_routine (__fct), __cancel_arg (__arg), __do_it (1) { }
  ~__pthread_cleanup_class () { if (__do_it) __cancel_routine (__cancel_arg); }
  void __setdoit (int __newval) { __do_it = __newval; }
  void __defer () { pthread_setcanceltype (PTHREAD_CANCEL_DEFERRED,
        &__cancel_type); }
  void __restore () const { pthread_setcanceltype (__cancel_type, 0); }
};
# 718 "/usr/include/pthread.h" 3 4
struct __jmp_buf_tag;
extern int __sigsetjmp (struct __jmp_buf_tag *__env, int __savemask) throw ();





extern int pthread_mutex_init (pthread_mutex_t *__mutex,
          const pthread_mutexattr_t *__mutexattr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_destroy (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_trylock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_lock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_timedlock (pthread_mutex_t *__restrict __mutex,
        const struct timespec *__restrict
        __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_clocklock (pthread_mutex_t *__restrict __mutex,
        clockid_t __clockid,
        const struct timespec *__restrict
        __abstime) throw () __attribute__ ((__nonnull__ (1, 3)));



extern int pthread_mutex_unlock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_getprioceiling (const pthread_mutex_t *
      __restrict __mutex,
      int *__restrict __prioceiling)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_setprioceiling (pthread_mutex_t *__restrict __mutex,
      int __prioceiling,
      int *__restrict __old_ceiling)
     throw () __attribute__ ((__nonnull__ (1, 3)));




extern int pthread_mutex_consistent (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));

extern int pthread_mutex_consistent_np (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));
# 789 "/usr/include/pthread.h" 3 4
extern int pthread_mutexattr_init (pthread_mutexattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_destroy (pthread_mutexattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getpshared (const pthread_mutexattr_t *
      __restrict __attr,
      int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setpshared (pthread_mutexattr_t *__attr,
      int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_gettype (const pthread_mutexattr_t *__restrict
          __attr, int *__restrict __kind)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_mutexattr_settype (pthread_mutexattr_t *__attr, int __kind)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getprotocol (const pthread_mutexattr_t *
       __restrict __attr,
       int *__restrict __protocol)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setprotocol (pthread_mutexattr_t *__attr,
       int __protocol)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getprioceiling (const pthread_mutexattr_t *
          __restrict __attr,
          int *__restrict __prioceiling)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setprioceiling (pthread_mutexattr_t *__attr,
          int __prioceiling)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getrobust (const pthread_mutexattr_t *__attr,
     int *__robustness)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern int pthread_mutexattr_getrobust_np (const pthread_mutexattr_t *__attr,
        int *__robustness)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setrobust (pthread_mutexattr_t *__attr,
     int __robustness)
     throw () __attribute__ ((__nonnull__ (1)));

extern int pthread_mutexattr_setrobust_np (pthread_mutexattr_t *__attr,
        int __robustness)
     throw () __attribute__ ((__nonnull__ (1)));
# 871 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_init (pthread_rwlock_t *__restrict __rwlock,
    const pthread_rwlockattr_t *__restrict
    __attr) throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_destroy (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_rdlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_tryrdlock (pthread_rwlock_t *__rwlock)
  throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_rwlock_timedrdlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_rwlock_clockrdlock (pthread_rwlock_t *__restrict __rwlock,
           clockid_t __clockid,
           const struct timespec *__restrict
           __abstime) throw () __attribute__ ((__nonnull__ (1, 3)));



extern int pthread_rwlock_wrlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_trywrlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_rwlock_timedwrlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_rwlock_clockwrlock (pthread_rwlock_t *__restrict __rwlock,
           clockid_t __clockid,
           const struct timespec *__restrict
           __abstime) throw () __attribute__ ((__nonnull__ (1, 3)));



extern int pthread_rwlock_unlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));





extern int pthread_rwlockattr_init (pthread_rwlockattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_destroy (pthread_rwlockattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getpshared (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setpshared (pthread_rwlockattr_t *__attr,
       int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getkind_np (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pref)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setkind_np (pthread_rwlockattr_t *__attr,
       int __pref) throw () __attribute__ ((__nonnull__ (1)));







extern int pthread_cond_init (pthread_cond_t *__restrict __cond,
         const pthread_condattr_t *__restrict __cond_attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_destroy (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_signal (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_broadcast (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));






extern int pthread_cond_wait (pthread_cond_t *__restrict __cond,
         pthread_mutex_t *__restrict __mutex)
     __attribute__ ((__nonnull__ (1, 2)));
# 997 "/usr/include/pthread.h" 3 4
extern int pthread_cond_timedwait (pthread_cond_t *__restrict __cond,
       pthread_mutex_t *__restrict __mutex,
       const struct timespec *__restrict __abstime)
     __attribute__ ((__nonnull__ (1, 2, 3)));
# 1010 "/usr/include/pthread.h" 3 4
extern int pthread_cond_clockwait (pthread_cond_t *__restrict __cond,
       pthread_mutex_t *__restrict __mutex,
       __clockid_t __clock_id,
       const struct timespec *__restrict __abstime)
     __attribute__ ((__nonnull__ (1, 2, 4)));





extern int pthread_condattr_init (pthread_condattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_destroy (pthread_condattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_getpshared (const pthread_condattr_t *
     __restrict __attr,
     int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setpshared (pthread_condattr_t *__attr,
     int __pshared) throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_condattr_getclock (const pthread_condattr_t *
          __restrict __attr,
          __clockid_t *__restrict __clock_id)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setclock (pthread_condattr_t *__attr,
          __clockid_t __clock_id)
     throw () __attribute__ ((__nonnull__ (1)));
# 1056 "/usr/include/pthread.h" 3 4
extern int pthread_spin_init (pthread_spinlock_t *__lock, int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_destroy (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_lock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_trylock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_unlock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));






extern int pthread_barrier_init (pthread_barrier_t *__restrict __barrier,
     const pthread_barrierattr_t *__restrict
     __attr, unsigned int __count)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_destroy (pthread_barrier_t *__barrier)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_wait (pthread_barrier_t *__barrier)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_barrierattr_init (pthread_barrierattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_destroy (pthread_barrierattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_getpshared (const pthread_barrierattr_t *
        __restrict __attr,
        int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_barrierattr_setpshared (pthread_barrierattr_t *__attr,
        int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));
# 1123 "/usr/include/pthread.h" 3 4
extern int pthread_key_create (pthread_key_t *__key,
          void (*__destr_function) (void *))
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_key_delete (pthread_key_t __key) throw ();


extern void *pthread_getspecific (pthread_key_t __key) throw ();


extern int pthread_setspecific (pthread_key_t __key,
    const void *__pointer) throw () ;




extern int pthread_getcpuclockid (pthread_t __thread_id,
      __clockid_t *__clock_id)
     throw () __attribute__ ((__nonnull__ (2)));
# 1157 "/usr/include/pthread.h" 3 4
extern int pthread_atfork (void (*__prepare) (void),
      void (*__parent) (void),
      void (*__child) (void)) throw ();
# 1171 "/usr/include/pthread.h" 3 4
}
# 36 "/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h" 2 3
# 47 "/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h" 3
typedef pthread_t __gthread_t;
typedef pthread_key_t __gthread_key_t;
typedef pthread_once_t __gthread_once_t;
typedef pthread_mutex_t __gthread_mutex_t;
typedef pthread_mutex_t __gthread_recursive_mutex_t;
typedef pthread_cond_t __gthread_cond_t;
typedef struct timespec __gthread_time_t;
# 102 "/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h" 3
static __typeof(pthread_once) __gthrw_pthread_once __attribute__ ((__weakref__("pthread_once"), __copy__ (pthread_once)));
static __typeof(pthread_getspecific) __gthrw_pthread_getspecific __attribute__ ((__weakref__("pthread_getspecific"), __copy__ (pthread_getspecific)));
static __typeof(pthread_setspecific) __gthrw_pthread_setspecific __attribute__ ((__weakref__("pthread_setspecific"), __copy__ (pthread_setspecific)));

static __typeof(pthread_create) __gthrw_pthread_create __attribute__ ((__weakref__("pthread_create"), __copy__ (pthread_create)));
static __typeof(pthread_join) __gthrw_pthread_join __attribute__ ((__weakref__("pthread_join"), __copy__ (pthread_join)));
static __typeof(pthread_equal) __gthrw_pthread_equal __attribute__ ((__weakref__("pthread_equal"), __copy__ (pthread_equal)));
static __typeof(pthread_self) __gthrw_pthread_self __attribute__ ((__weakref__("pthread_self"), __copy__ (pthread_self)));
static __typeof(pthread_detach) __gthrw_pthread_detach __attribute__ ((__weakref__("pthread_detach"), __copy__ (pthread_detach)));

static __typeof(pthread_cancel) __gthrw_pthread_cancel __attribute__ ((__weakref__("pthread_cancel"), __copy__ (pthread_cancel)));

static __typeof(sched_yield) __gthrw_sched_yield __attribute__ ((__weakref__("sched_yield"), __copy__ (sched_yield)));

static __typeof(pthread_mutex_lock) __gthrw_pthread_mutex_lock __attribute__ ((__weakref__("pthread_mutex_lock"), __copy__ (pthread_mutex_lock)));
static __typeof(pthread_mutex_trylock) __gthrw_pthread_mutex_trylock __attribute__ ((__weakref__("pthread_mutex_trylock"), __copy__ (pthread_mutex_trylock)));

static __typeof(pthread_mutex_timedlock) __gthrw_pthread_mutex_timedlock __attribute__ ((__weakref__("pthread_mutex_timedlock"), __copy__ (pthread_mutex_timedlock)));

static __typeof(pthread_mutex_unlock) __gthrw_pthread_mutex_unlock __attribute__ ((__weakref__("pthread_mutex_unlock"), __copy__ (pthread_mutex_unlock)));
static __typeof(pthread_mutex_init) __gthrw_pthread_mutex_init __attribute__ ((__weakref__("pthread_mutex_init"), __copy__ (pthread_mutex_init)));
static __typeof(pthread_mutex_destroy) __gthrw_pthread_mutex_destroy __attribute__ ((__weakref__("pthread_mutex_destroy"), __copy__ (pthread_mutex_destroy)));

static __typeof(pthread_cond_init) __gthrw_pthread_cond_init __attribute__ ((__weakref__("pthread_cond_init"), __copy__ (pthread_cond_init)));
static __typeof(pthread_cond_broadcast) __gthrw_pthread_cond_broadcast __attribute__ ((__weakref__("pthread_cond_broadcast"), __copy__ (pthread_cond_broadcast)));
static __typeof(pthread_cond_signal) __gthrw_pthread_cond_signal __attribute__ ((__weakref__("pthread_cond_signal"), __copy__ (pthread_cond_signal)));
static __typeof(pthread_cond_wait) __gthrw_pthread_cond_wait __attribute__ ((__weakref__("pthread_cond_wait"), __copy__ (pthread_cond_wait)));
static __typeof(pthread_cond_timedwait) __gthrw_pthread_cond_timedwait __attribute__ ((__weakref__("pthread_cond_timedwait"), __copy__ (pthread_cond_timedwait)));
static __typeof(pthread_cond_destroy) __gthrw_pthread_cond_destroy __attribute__ ((__weakref__("pthread_cond_destroy"), __copy__ (pthread_cond_destroy)));

static __typeof(pthread_key_create) __gthrw_pthread_key_create __attribute__ ((__weakref__("pthread_key_create"), __copy__ (pthread_key_create)));
static __typeof(pthread_key_delete) __gthrw_pthread_key_delete __attribute__ ((__weakref__("pthread_key_delete"), __copy__ (pthread_key_delete)));
static __typeof(pthread_mutexattr_init) __gthrw_pthread_mutexattr_init __attribute__ ((__weakref__("pthread_mutexattr_init"), __copy__ (pthread_mutexattr_init)));
static __typeof(pthread_mutexattr_settype) __gthrw_pthread_mutexattr_settype __attribute__ ((__weakref__("pthread_mutexattr_settype"), __copy__ (pthread_mutexattr_settype)));
static __typeof(pthread_mutexattr_destroy) __gthrw_pthread_mutexattr_destroy __attribute__ ((__weakref__("pthread_mutexattr_destroy"), __copy__ (pthread_mutexattr_destroy)));
# 237 "/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h" 3
static __typeof(pthread_key_create) __gthrw___pthread_key_create __attribute__ ((__weakref__("__pthread_key_create"), __copy__ (pthread_key_create)));
# 247 "/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h" 3
static inline int
__gthread_active_p (void)
{
  static void *const __gthread_active_ptr
    = __extension__ (void *) &__gthrw___pthread_key_create;
  return __gthread_active_ptr != 0;
}
# 659 "/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h" 3
static inline int
__gthread_create (__gthread_t *__threadid, void *(*__func) (void*),
    void *__args)
{
  return __gthrw_pthread_create (__threadid, __null, __func, __args);
}

static inline int
__gthread_join (__gthread_t __threadid, void **__value_ptr)
{
  return __gthrw_pthread_join (__threadid, __value_ptr);
}

static inline int
__gthread_detach (__gthread_t __threadid)
{
  return __gthrw_pthread_detach (__threadid);
}

static inline int
__gthread_equal (__gthread_t __t1, __gthread_t __t2)
{
  return __gthrw_pthread_equal (__t1, __t2);
}

static inline __gthread_t
__gthread_self (void)
{
  return __gthrw_pthread_self ();
}

static inline int
__gthread_yield (void)
{
  return __gthrw_sched_yield ();
}

static inline int
__gthread_once (__gthread_once_t *__once, void (*__func) (void))
{
  if (__gthread_active_p ())
    return __gthrw_pthread_once (__once, __func);
  else
    return -1;
}

static inline int
__gthread_key_create (__gthread_key_t *__key, void (*__dtor) (void *))
{
  return __gthrw_pthread_key_create (__key, __dtor);
}

static inline int
__gthread_key_delete (__gthread_key_t __key)
{
  return __gthrw_pthread_key_delete (__key);
}

static inline void *
__gthread_getspecific (__gthread_key_t __key)
{
  return __gthrw_pthread_getspecific (__key);
}

static inline int
__gthread_setspecific (__gthread_key_t __key, const void *__ptr)
{
  return __gthrw_pthread_setspecific (__key, __ptr);
}

static inline void
__gthread_mutex_init_function (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    __gthrw_pthread_mutex_init (__mutex, __null);
}

static inline int
__gthread_mutex_destroy (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_destroy (__mutex);
  else
    return 0;
}

static inline int
__gthread_mutex_lock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_lock (__mutex);
  else
    return 0;
}

static inline int
__gthread_mutex_trylock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_trylock (__mutex);
  else
    return 0;
}


static inline int
__gthread_mutex_timedlock (__gthread_mutex_t *__mutex,
      const __gthread_time_t *__abs_timeout)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_timedlock (__mutex, __abs_timeout);
  else
    return 0;
}


static inline int
__gthread_mutex_unlock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_unlock (__mutex);
  else
    return 0;
}
# 808 "/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h" 3
static inline int
__gthread_recursive_mutex_lock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_lock (__mutex);
}

static inline int
__gthread_recursive_mutex_trylock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_trylock (__mutex);
}


static inline int
__gthread_recursive_mutex_timedlock (__gthread_recursive_mutex_t *__mutex,
         const __gthread_time_t *__abs_timeout)
{
  return __gthread_mutex_timedlock (__mutex, __abs_timeout);
}


static inline int
__gthread_recursive_mutex_unlock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_unlock (__mutex);
}

static inline int
__gthread_recursive_mutex_destroy (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_destroy (__mutex);
}
# 850 "/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h" 3
static inline int
__gthread_cond_broadcast (__gthread_cond_t *__cond)
{
  return __gthrw_pthread_cond_broadcast (__cond);
}

static inline int
__gthread_cond_signal (__gthread_cond_t *__cond)
{
  return __gthrw_pthread_cond_signal (__cond);
}

static inline int
__gthread_cond_wait (__gthread_cond_t *__cond, __gthread_mutex_t *__mutex)
{
  return __gthrw_pthread_cond_wait (__cond, __mutex);
}

static inline int
__gthread_cond_timedwait (__gthread_cond_t *__cond, __gthread_mutex_t *__mutex,
     const __gthread_time_t *__abs_timeout)
{
  return __gthrw_pthread_cond_timedwait (__cond, __mutex, __abs_timeout);
}

static inline int
__gthread_cond_wait_recursive (__gthread_cond_t *__cond,
          __gthread_recursive_mutex_t *__mutex)
{
  return __gthread_cond_wait (__cond, __mutex);
}

static inline int
__gthread_cond_destroy (__gthread_cond_t* __cond)
{
  return __gthrw_pthread_cond_destroy (__cond);
}
# 149 "/usr/include/x86_64-linux-gnu/c++/10/bits/gthr.h" 2 3


#pragma GCC visibility pop
# 36 "/usr/include/c++/10/ext/atomicity.h" 2 3
# 1 "/usr/include/x86_64-linux-gnu/c++/10/bits/atomic_word.h" 1 3
# 32 "/usr/include/x86_64-linux-gnu/c++/10/bits/atomic_word.h" 3
typedef int _Atomic_word;
# 37 "/usr/include/c++/10/ext/atomicity.h" 2 3

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{







  inline _Atomic_word
  __attribute__((__always_inline__))
  __exchange_and_add(volatile _Atomic_word* __mem, int __val)
  { return __atomic_fetch_add(__mem, __val, 4); }

  inline void
  __attribute__((__always_inline__))
  __atomic_add(volatile _Atomic_word* __mem, int __val)
  { __atomic_fetch_add(__mem, __val, 4); }
# 64 "/usr/include/c++/10/ext/atomicity.h" 3
  inline _Atomic_word
  __attribute__((__always_inline__))
  __exchange_and_add_single(_Atomic_word* __mem, int __val)
  {
    _Atomic_word __result = *__mem;
    *__mem += __val;
    return __result;
  }

  inline void
  __attribute__((__always_inline__))
  __atomic_add_single(_Atomic_word* __mem, int __val)
  { *__mem += __val; }

  inline _Atomic_word
  __attribute__ ((__always_inline__))
  __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)
  {

    if (__gthread_active_p())
      return __exchange_and_add(__mem, __val);

    return __exchange_and_add_single(__mem, __val);
  }

  inline void
  __attribute__ ((__always_inline__))
  __atomic_add_dispatch(_Atomic_word* __mem, int __val)
  {

    if (__gthread_active_p())
      {
 __atomic_add(__mem, __val);
 return;
      }

    __atomic_add_single(__mem, __val);
  }


}
# 40 "/usr/include/c++/10/bits/basic_string.h" 2 3
# 1 "/usr/include/c++/10/ext/alloc_traits.h" 1 3
# 32 "/usr/include/c++/10/ext/alloc_traits.h" 3
       
# 33 "/usr/include/c++/10/ext/alloc_traits.h" 3

# 1 "/usr/include/c++/10/bits/alloc_traits.h" 1 3
# 33 "/usr/include/c++/10/bits/alloc_traits.h" 3
# 1 "/usr/include/c++/10/bits/stl_construct.h" 1 3
# 73 "/usr/include/c++/10/bits/stl_construct.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 106 "/usr/include/c++/10/bits/stl_construct.h" 3
  template<typename _Tp, typename... _Args>
    inline void
    _Construct(_Tp* __p, _Args&&... __args)
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
# 121 "/usr/include/c++/10/bits/stl_construct.h" 3
  template<typename _T1>
    inline void
    _Construct_novalue(_T1* __p)
    { ::new(static_cast<void*>(__p)) _T1; }

  template<typename _ForwardIterator>
    void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last);




  template<typename _Tp>
    constexpr inline void
    _Destroy(_Tp* __pointer)
    {



      __pointer->~_Tp();

    }

  template<bool>
    struct _Destroy_aux
    {
      template<typename _ForwardIterator>
 static void
 __destroy(_ForwardIterator __first, _ForwardIterator __last)
 {
   for (; __first != __last; ++__first)
     std::_Destroy(std::__addressof(*__first));
 }
    };

  template<>
    struct _Destroy_aux<true>
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator, _ForwardIterator) { }
    };






  template<typename _ForwardIterator>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
                       _Value_type;


      static_assert(is_destructible<_Value_type>::value,
      "value type is destructible");





      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
 __destroy(__first, __last);
    }

  template<bool>
    struct _Destroy_n_aux
    {
      template<typename _ForwardIterator, typename _Size>
 static _ForwardIterator
 __destroy_n(_ForwardIterator __first, _Size __count)
 {
   for (; __count > 0; (void)++__first, --__count)
     std::_Destroy(std::__addressof(*__first));
   return __first;
 }
    };

  template<>
    struct _Destroy_n_aux<true>
    {
      template<typename _ForwardIterator, typename _Size>
        static _ForwardIterator
        __destroy_n(_ForwardIterator __first, _Size __count)
 {
   std::advance(__first, __count);
   return __first;
 }
    };






  template<typename _ForwardIterator, typename _Size>
    inline _ForwardIterator
    _Destroy_n(_ForwardIterator __first, _Size __count)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
                       _Value_type;


      static_assert(is_destructible<_Value_type>::value,
      "value type is destructible");





      return std::_Destroy_n_aux<__has_trivial_destructor(_Value_type)>::
 __destroy_n(__first, __count);
    }
# 253 "/usr/include/c++/10/bits/stl_construct.h" 3

}
# 34 "/usr/include/c++/10/bits/alloc_traits.h" 2 3







namespace std __attribute__ ((__visibility__ ("default")))
{





  struct __allocator_traits_base
  {
    template<typename _Tp, typename _Up, typename = void>
      struct __rebind : __replace_first_arg<_Tp, _Up> { };

    template<typename _Tp, typename _Up>
      struct __rebind<_Tp, _Up,
        __void_t<typename _Tp::template rebind<_Up>::other>>
      { using type = typename _Tp::template rebind<_Up>::other; };

  protected:
    template<typename _Tp>
      using __pointer = typename _Tp::pointer;
    template<typename _Tp>
      using __c_pointer = typename _Tp::const_pointer;
    template<typename _Tp>
      using __v_pointer = typename _Tp::void_pointer;
    template<typename _Tp>
      using __cv_pointer = typename _Tp::const_void_pointer;
    template<typename _Tp>
      using __pocca = typename _Tp::propagate_on_container_copy_assignment;
    template<typename _Tp>
      using __pocma = typename _Tp::propagate_on_container_move_assignment;
    template<typename _Tp>
      using __pocs = typename _Tp::propagate_on_container_swap;
    template<typename _Tp>
      using __equal = typename _Tp::is_always_equal;
  };

  template<typename _Alloc, typename _Up>
    using __alloc_rebind
      = typename __allocator_traits_base::template __rebind<_Alloc, _Up>::type;





  template<typename _Alloc>
    struct allocator_traits : __allocator_traits_base
    {

      typedef _Alloc allocator_type;

      typedef typename _Alloc::value_type value_type;






      using pointer = __detected_or_t<value_type*, __pointer, _Alloc>;

    private:

      template<template<typename> class _Func, typename _Tp, typename = void>
 struct _Ptr
 {
   using type = typename pointer_traits<pointer>::template rebind<_Tp>;
 };

      template<template<typename> class _Func, typename _Tp>
 struct _Ptr<_Func, _Tp, __void_t<_Func<_Alloc>>>
 {
   using type = _Func<_Alloc>;
 };


      template<typename _A2, typename _PtrT, typename = void>
 struct _Diff
 { using type = typename pointer_traits<_PtrT>::difference_type; };

      template<typename _A2, typename _PtrT>
 struct _Diff<_A2, _PtrT, __void_t<typename _A2::difference_type>>
 { using type = typename _A2::difference_type; };


      template<typename _A2, typename _DiffT, typename = void>
 struct _Size : make_unsigned<_DiffT> { };

      template<typename _A2, typename _DiffT>
 struct _Size<_A2, _DiffT, __void_t<typename _A2::size_type>>
 { using type = typename _A2::size_type; };

    public:






      using const_pointer = typename _Ptr<__c_pointer, const value_type>::type;







      using void_pointer = typename _Ptr<__v_pointer, void>::type;







      using const_void_pointer = typename _Ptr<__cv_pointer, const void>::type;







      using difference_type = typename _Diff<_Alloc, pointer>::type;







      using size_type = typename _Size<_Alloc, difference_type>::type;







      using propagate_on_container_copy_assignment
 = __detected_or_t<false_type, __pocca, _Alloc>;







      using propagate_on_container_move_assignment
 = __detected_or_t<false_type, __pocma, _Alloc>;







      using propagate_on_container_swap
 = __detected_or_t<false_type, __pocs, _Alloc>;







      using is_always_equal
 = __detected_or_t<typename is_empty<_Alloc>::type, __equal, _Alloc>;

      template<typename _Tp>
 using rebind_alloc = __alloc_rebind<_Alloc, _Tp>;
      template<typename _Tp>
 using rebind_traits = allocator_traits<rebind_alloc<_Tp>>;

    private:
      template<typename _Alloc2>
 static constexpr auto
 _S_allocate(_Alloc2& __a, size_type __n, const_void_pointer __hint, int)
 -> decltype(__a.allocate(__n, __hint))
 { return __a.allocate(__n, __hint); }

      template<typename _Alloc2>
 static constexpr pointer
 _S_allocate(_Alloc2& __a, size_type __n, const_void_pointer, ...)
 { return __a.allocate(__n); }

      template<typename _Tp, typename... _Args>
 struct __construct_helper
 {
   template<typename _Alloc2,
     typename = decltype(std::declval<_Alloc2*>()->construct(
    std::declval<_Tp*>(), std::declval<_Args>()...))>
     static true_type __test(int);

   template<typename>
     static false_type __test(...);

   using type = decltype(__test<_Alloc>(0));
 };

      template<typename _Tp, typename... _Args>
 using __has_construct
   = typename __construct_helper<_Tp, _Args...>::type;

      template<typename _Tp, typename... _Args>
 static constexpr _Require<__has_construct<_Tp, _Args...>>
 _S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
 { __a.construct(__p, std::forward<_Args>(__args)...); }

      template<typename _Tp, typename... _Args>
 static constexpr
 _Require<__and_<__not_<__has_construct<_Tp, _Args...>>,
          is_constructible<_Tp, _Args...>>>
 _S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 noexcept(std::is_nothrow_constructible<_Tp, _Args...>::value)
 {

   ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);



 }

      template<typename _Alloc2, typename _Tp>
 static constexpr auto
 _S_destroy(_Alloc2& __a, _Tp* __p, int)
 noexcept(noexcept(__a.destroy(__p)))
 -> decltype(__a.destroy(__p))
 { __a.destroy(__p); }

      template<typename _Alloc2, typename _Tp>
 static constexpr void
 _S_destroy(_Alloc2&, _Tp* __p, ...)
 noexcept(std::is_nothrow_destructible<_Tp>::value)
 { std::_Destroy(__p); }

      template<typename _Alloc2>
 static constexpr auto
 _S_max_size(_Alloc2& __a, int)
 -> decltype(__a.max_size())
 { return __a.max_size(); }

      template<typename _Alloc2>
 static constexpr size_type
 _S_max_size(_Alloc2&, ...)
 {


   return __gnu_cxx::__numeric_traits<size_type>::__max
     / sizeof(value_type);
 }

      template<typename _Alloc2>
 static constexpr auto
 _S_select(_Alloc2& __a, int)
 -> decltype(__a.select_on_container_copy_construction())
 { return __a.select_on_container_copy_construction(); }

      template<typename _Alloc2>
 static constexpr _Alloc2
 _S_select(_Alloc2& __a, ...)
 { return __a; }

    public:
# 312 "/usr/include/c++/10/bits/alloc_traits.h" 3
      static pointer
      allocate(_Alloc& __a, size_type __n)
      { return __a.allocate(__n); }
# 327 "/usr/include/c++/10/bits/alloc_traits.h" 3
      static pointer
      allocate(_Alloc& __a, size_type __n, const_void_pointer __hint)
      { return _S_allocate(__a, __n, __hint, 0); }
# 339 "/usr/include/c++/10/bits/alloc_traits.h" 3
      static void
      deallocate(_Alloc& __a, pointer __p, size_type __n)
      { __a.deallocate(__p, __n); }
# 354 "/usr/include/c++/10/bits/alloc_traits.h" 3
      template<typename _Tp, typename... _Args>
 static auto
 construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 noexcept(noexcept(_S_construct(__a, __p,
           std::forward<_Args>(__args)...)))
 -> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))
 { _S_construct(__a, __p, std::forward<_Args>(__args)...); }
# 370 "/usr/include/c++/10/bits/alloc_traits.h" 3
      template<typename _Tp>
 static void
 destroy(_Alloc& __a, _Tp* __p)
 noexcept(noexcept(_S_destroy(__a, __p, 0)))
 { _S_destroy(__a, __p, 0); }
# 384 "/usr/include/c++/10/bits/alloc_traits.h" 3
      static size_type
      max_size(const _Alloc& __a) noexcept
      { return _S_max_size(__a, 0); }
# 396 "/usr/include/c++/10/bits/alloc_traits.h" 3
      static _Alloc
      select_on_container_copy_construction(const _Alloc& __rhs)
      { return _S_select(__rhs, 0); }
    };






  template<typename _Tp>
    struct allocator_traits<allocator<_Tp>>
    {

      using allocator_type = allocator<_Tp>;


      using value_type = _Tp;


      using pointer = _Tp*;


      using const_pointer = const _Tp*;


      using void_pointer = void*;


      using const_void_pointer = const void*;


      using difference_type = std::ptrdiff_t;


      using size_type = std::size_t;


      using propagate_on_container_copy_assignment = false_type;


      using propagate_on_container_move_assignment = true_type;


      using propagate_on_container_swap = false_type;


      using is_always_equal = true_type;

      template<typename _Up>
 using rebind_alloc = allocator<_Up>;

      template<typename _Up>
 using rebind_traits = allocator_traits<allocator<_Up>>;
# 458 "/usr/include/c++/10/bits/alloc_traits.h" 3
      static pointer
      allocate(allocator_type& __a, size_type __n)
      { return __a.allocate(__n); }
# 472 "/usr/include/c++/10/bits/alloc_traits.h" 3
      static pointer
      allocate(allocator_type& __a, size_type __n, const_void_pointer __hint)
      {

 return __a.allocate(__n, __hint);



      }
# 490 "/usr/include/c++/10/bits/alloc_traits.h" 3
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
      { __a.deallocate(__p, __n); }
# 505 "/usr/include/c++/10/bits/alloc_traits.h" 3
      template<typename _Up, typename... _Args>
 static void
 construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
    _Args&&... __args)
 noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 {

   __a.construct(__p, std::forward<_Args>(__args)...);



 }
# 525 "/usr/include/c++/10/bits/alloc_traits.h" 3
      template<typename _Up>
 static void
 destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 noexcept(is_nothrow_destructible<_Up>::value)
 {

   __a.destroy(__p);



 }






      static size_type
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
      {

 return __a.max_size();



      }






      static allocator_type
      select_on_container_copy_construction(const allocator_type& __rhs)
      { return __rhs; }
    };


  template<typename _Alloc>
    inline void
    __do_alloc_on_copy(_Alloc& __one, const _Alloc& __two, true_type)
    { __one = __two; }

  template<typename _Alloc>
    inline void
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
    { }


  template<typename _Alloc>
    constexpr inline void
    __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_copy_assignment __pocca;




      __do_alloc_on_copy(__one, __two, __pocca());

    }

  template<typename _Alloc>
    constexpr _Alloc
    __alloc_on_copy(const _Alloc& __a)
    {
      typedef allocator_traits<_Alloc> __traits;
      return __traits::select_on_container_copy_construction(__a);
    }


  template<typename _Alloc>
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
    { __one = std::move(__two); }

  template<typename _Alloc>
    inline void __do_alloc_on_move(_Alloc&, _Alloc&, false_type)
    { }


  template<typename _Alloc>
    constexpr inline void
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_move_assignment __pocma;




      __do_alloc_on_move(__one, __two, __pocma());

    }


  template<typename _Alloc>
    inline void __do_alloc_on_swap(_Alloc& __one, _Alloc& __two, true_type)
    {
      using std::swap;
      swap(__one, __two);
    }

  template<typename _Alloc>
    inline void __do_alloc_on_swap(_Alloc&, _Alloc&, false_type)
    { }


  template<typename _Alloc>
    constexpr inline void
    __alloc_on_swap(_Alloc& __one, _Alloc& __two)
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_swap __pocs;







      __do_alloc_on_swap(__one, __two, __pocs());

    }

  template<typename _Alloc, typename _Tp,
    typename _ValueT = __remove_cvref_t<typename _Alloc::value_type>,
    typename = void>
    struct __is_alloc_insertable_impl
    : false_type
    { };

  template<typename _Alloc, typename _Tp, typename _ValueT>
    struct __is_alloc_insertable_impl<_Alloc, _Tp, _ValueT,
      __void_t<decltype(allocator_traits<_Alloc>::construct(
     std::declval<_Alloc&>(), std::declval<_ValueT*>(),
     std::declval<_Tp>()))>>
    : true_type
    { };




  template<typename _Alloc>
    struct __is_copy_insertable
    : __is_alloc_insertable_impl<_Alloc,
     typename _Alloc::value_type const&>::type
    { };


  template<typename _Tp>
    struct __is_copy_insertable<allocator<_Tp>>
    : is_copy_constructible<_Tp>
    { };




  template<typename _Alloc>
    struct __is_move_insertable
    : __is_alloc_insertable_impl<_Alloc, typename _Alloc::value_type>::type
    { };


  template<typename _Tp>
    struct __is_move_insertable<allocator<_Tp>>
    : is_move_constructible<_Tp>
    { };


  template<typename _Alloc, typename = void>
    struct __is_allocator : false_type { };

  template<typename _Alloc>
    struct __is_allocator<_Alloc,
      __void_t<typename _Alloc::value_type,
        decltype(std::declval<_Alloc&>().allocate(size_t{}))>>
    : true_type { };

  template<typename _Alloc>
    using _RequireAllocator
      = typename enable_if<__is_allocator<_Alloc>::value, _Alloc>::type;

  template<typename _Alloc>
    using _RequireNotAllocator
      = typename enable_if<!__is_allocator<_Alloc>::value, _Alloc>::type;
# 719 "/usr/include/c++/10/bits/alloc_traits.h" 3
  template<typename _ForwardIterator, typename _Allocator>
    void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
      _Allocator& __alloc)
    {
      for (; __first != __last; ++__first)



 allocator_traits<_Allocator>::destroy(__alloc,
           std::__addressof(*__first));

    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
      allocator<_Tp>&)
    {
      _Destroy(__first, __last);
    }


}
# 35 "/usr/include/c++/10/ext/alloc_traits.h" 2 3




namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{






template<typename _Alloc, typename = typename _Alloc::value_type>
  struct __alloc_traits

  : std::allocator_traits<_Alloc>

  {
    typedef _Alloc allocator_type;

    typedef std::allocator_traits<_Alloc> _Base_type;
    typedef typename _Base_type::value_type value_type;
    typedef typename _Base_type::pointer pointer;
    typedef typename _Base_type::const_pointer const_pointer;
    typedef typename _Base_type::size_type size_type;
    typedef typename _Base_type::difference_type difference_type;

    typedef value_type& reference;
    typedef const value_type& const_reference;
    using _Base_type::allocate;
    using _Base_type::deallocate;
    using _Base_type::construct;
    using _Base_type::destroy;
    using _Base_type::max_size;

  private:
    template<typename _Ptr>
      using __is_custom_pointer
 = std::__and_<std::is_same<pointer, _Ptr>,
        std::__not_<std::is_pointer<_Ptr>>>;

  public:

    template<typename _Ptr, typename... _Args>
      static constexpr
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      construct(_Alloc& __a, _Ptr __p, _Args&&... __args)
      noexcept(noexcept(_Base_type::construct(__a, std::__to_address(__p),
           std::forward<_Args>(__args)...)))
      {
 _Base_type::construct(__a, std::__to_address(__p),
         std::forward<_Args>(__args)...);
      }


    template<typename _Ptr>
      static constexpr
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
    { return _Base_type::select_on_container_copy_construction(__a); }

    static constexpr void _S_on_swap(_Alloc& __a, _Alloc& __b)
    { std::__alloc_on_swap(__a, __b); }

    static constexpr bool _S_propagate_on_copy_assign()
    { return _Base_type::propagate_on_container_copy_assignment::value; }

    static constexpr bool _S_propagate_on_move_assign()
    { return _Base_type::propagate_on_container_move_assignment::value; }

    static constexpr bool _S_propagate_on_swap()
    { return _Base_type::propagate_on_container_swap::value; }

    static constexpr bool _S_always_equal()
    { return _Base_type::is_always_equal::value; }

    static constexpr bool _S_nothrow_move()
    { return _S_propagate_on_move_assign() || _S_always_equal(); }

    template<typename _Tp>
      struct rebind
      { typedef typename _Base_type::template rebind_alloc<_Tp> other; };
# 166 "/usr/include/c++/10/ext/alloc_traits.h" 3
  };


}
# 41 "/usr/include/c++/10/bits/basic_string.h" 2 3
# 52 "/usr/include/c++/10/bits/basic_string.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



namespace __cxx11 {
# 76 "/usr/include/c++/10/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    class basic_string
    {
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 rebind<_CharT>::other _Char_alloc_type;
      typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;


    public:
      typedef _Traits traits_type;
      typedef typename _Traits::char_type value_type;
      typedef _Char_alloc_type allocator_type;
      typedef typename _Alloc_traits::size_type size_type;
      typedef typename _Alloc_traits::difference_type difference_type;
      typedef typename _Alloc_traits::reference reference;
      typedef typename _Alloc_traits::const_reference const_reference;
      typedef typename _Alloc_traits::pointer pointer;
      typedef typename _Alloc_traits::const_pointer const_pointer;
      typedef __gnu_cxx::__normal_iterator<pointer, basic_string> iterator;
      typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>
       const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;


      static const size_type npos = static_cast<size_type>(-1);

    protected:




      typedef const_iterator __const_iterator;


    private:
# 150 "/usr/include/c++/10/bits/basic_string.h" 3
      struct _Alloc_hider : allocator_type
      {




 _Alloc_hider(pointer __dat, const _Alloc& __a)
 : allocator_type(__a), _M_p(__dat) { }

 _Alloc_hider(pointer __dat, _Alloc&& __a = _Alloc())
 : allocator_type(std::move(__a)), _M_p(__dat) { }


 pointer _M_p;
      };

      _Alloc_hider _M_dataplus;
      size_type _M_string_length;

      enum { _S_local_capacity = 15 / sizeof(_CharT) };

      union
      {
 _CharT _M_local_buf[_S_local_capacity + 1];
 size_type _M_allocated_capacity;
      };

      void
      _M_data(pointer __p)
      { _M_dataplus._M_p = __p; }

      void
      _M_length(size_type __length)
      { _M_string_length = __length; }

      pointer
      _M_data() const
      { return _M_dataplus._M_p; }

      pointer
      _M_local_data()
      {

 return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);



      }

      const_pointer
      _M_local_data() const
      {

 return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);



      }

      void
      _M_capacity(size_type __capacity)
      { _M_allocated_capacity = __capacity; }

      void
      _M_set_length(size_type __n)
      {
 _M_length(__n);
 traits_type::assign(_M_data()[__n], _CharT());
      }

      bool
      _M_is_local() const
      { return _M_data() == _M_local_data(); }


      pointer
      _M_create(size_type&, size_type);

      void
      _M_dispose()
      {
 if (!_M_is_local())
   _M_destroy(_M_allocated_capacity);
      }

      void
      _M_destroy(size_type __size) throw()
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }



      template<typename _InIterator>
        void
        _M_construct_aux(_InIterator __beg, _InIterator __end,
    std::__false_type)
 {
          typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
          _M_construct(__beg, __end, _Tag());
 }



      template<typename _Integer>
        void
        _M_construct_aux(_Integer __beg, _Integer __end, std::__true_type)
 { _M_construct_aux_2(static_cast<size_type>(__beg), __end); }

      void
      _M_construct_aux_2(size_type __req, _CharT __c)
      { _M_construct(__req, __c); }

      template<typename _InIterator>
        void
        _M_construct(_InIterator __beg, _InIterator __end)
 {
   typedef typename std::__is_integer<_InIterator>::__type _Integral;
   _M_construct_aux(__beg, __end, _Integral());
        }


      template<typename _InIterator>
        void
        _M_construct(_InIterator __beg, _InIterator __end,
       std::input_iterator_tag);



      template<typename _FwdIterator>
        void
        _M_construct(_FwdIterator __beg, _FwdIterator __end,
       std::forward_iterator_tag);

      void
      _M_construct(size_type __req, _CharT __c);

      allocator_type&
      _M_get_allocator()
      { return _M_dataplus; }

      const allocator_type&
      _M_get_allocator() const
      { return _M_dataplus; }

    private:
# 309 "/usr/include/c++/10/bits/basic_string.h" 3
      size_type
      _M_check(size_type __pos, const char* __s) const
      {
 if (__pos > this->size())
   __throw_out_of_range_fmt(("%s: __pos (which is %zu) > " "this->size() (which is %zu)")
                                         ,
       __s, __pos, this->size());
 return __pos;
      }

      void
      _M_check_length(size_type __n1, size_type __n2, const char* __s) const
      {
 if (this->max_size() - (this->size() - __n1) < __n2)
   __throw_length_error((__s));
      }



      size_type
      _M_limit(size_type __pos, size_type __off) const noexcept
      {
 const bool __testoff = __off < this->size() - __pos;
 return __testoff ? __off : this->size() - __pos;
      }


      bool
      _M_disjunct(const _CharT* __s) const noexcept
      {
 return (less<const _CharT*>()(__s, _M_data())
  || less<const _CharT*>()(_M_data() + this->size(), __s));
      }



      static void
      _S_copy(_CharT* __d, const _CharT* __s, size_type __n)
      {
 if (__n == 1)
   traits_type::assign(*__d, *__s);
 else
   traits_type::copy(__d, __s, __n);
      }

      static void
      _S_move(_CharT* __d, const _CharT* __s, size_type __n)
      {
 if (__n == 1)
   traits_type::assign(*__d, *__s);
 else
   traits_type::move(__d, __s, __n);
      }

      static void
      _S_assign(_CharT* __d, size_type __n, _CharT __c)
      {
 if (__n == 1)
   traits_type::assign(*__d, __c);
 else
   traits_type::assign(__d, __n, __c);
      }



      template<class _Iterator>
        static void
        _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
        {
   for (; __k1 != __k2; ++__k1, (void)++__p)
     traits_type::assign(*__p, *__k1);
 }

      static void
      _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2) noexcept
      { _S_copy_chars(__p, __k1.base(), __k2.base()); }

      static void
      _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)
      noexcept
      { _S_copy_chars(__p, __k1.base(), __k2.base()); }

      static void
      _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2) noexcept
      { _S_copy(__p, __k1, __k2 - __k1); }

      static void
      _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
      noexcept
      { _S_copy(__p, __k1, __k2 - __k1); }

      static int
      _S_compare(size_type __n1, size_type __n2) noexcept
      {
 const difference_type __d = difference_type(__n1 - __n2);

 if (__d > __gnu_cxx::__numeric_traits<int>::__max)
   return __gnu_cxx::__numeric_traits<int>::__max;
 else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
   return __gnu_cxx::__numeric_traits<int>::__min;
 else
   return int(__d);
      }

      void
      _M_assign(const basic_string&);

      void
      _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,
  size_type __len2);

      void
      _M_erase(size_type __pos, size_type __n);

    public:







      basic_string()
      noexcept(is_nothrow_default_constructible<_Alloc>::value)
      : _M_dataplus(_M_local_data())
      { _M_set_length(0); }




      explicit
      basic_string(const _Alloc& __a) noexcept
      : _M_dataplus(_M_local_data(), __a)
      { _M_set_length(0); }





      basic_string(const basic_string& __str)
      : _M_dataplus(_M_local_data(),
      _Alloc_traits::_S_select_on_copy(__str._M_get_allocator()))
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
# 461 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string(const basic_string& __str, size_type __pos,
     const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      {
 const _CharT* __start = __str._M_data()
   + __str._M_check(__pos, "basic_string::basic_string");
 _M_construct(__start, __start + __str._M_limit(__pos, npos));
      }







      basic_string(const basic_string& __str, size_type __pos,
     size_type __n)
      : _M_dataplus(_M_local_data())
      {
 const _CharT* __start = __str._M_data()
   + __str._M_check(__pos, "basic_string::basic_string");
 _M_construct(__start, __start + __str._M_limit(__pos, __n));
      }
# 492 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string(const basic_string& __str, size_type __pos,
     size_type __n, const _Alloc& __a)
      : _M_dataplus(_M_local_data(), __a)
      {
 const _CharT* __start
   = __str._M_data() + __str._M_check(__pos, "string::string");
 _M_construct(__start, __start + __str._M_limit(__pos, __n));
      }
# 510 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string(const _CharT* __s, size_type __n,
     const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__s, __s + __n); }
# 525 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
# 540 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__n, __c); }
# 552 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string(basic_string&& __str) noexcept
      : _M_dataplus(_M_local_data(), std::move(__str._M_get_allocator()))
      {
 if (__str._M_is_local())
   {
     traits_type::copy(_M_local_buf, __str._M_local_buf,
         _S_local_capacity + 1);
   }
 else
   {
     _M_data(__str._M_data());
     _M_capacity(__str._M_allocated_capacity);
   }




 _M_length(__str.length());
 __str._M_data(__str._M_local_data());
 __str._M_set_length(0);
      }






      basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__l.begin(), __l.end()); }

      basic_string(const basic_string& __str, const _Alloc& __a)
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__str.begin(), __str.end()); }

      basic_string(basic_string&& __str, const _Alloc& __a)
      noexcept(_Alloc_traits::_S_always_equal())
      : _M_dataplus(_M_local_data(), __a)
      {
 if (__str._M_is_local())
   {
     traits_type::copy(_M_local_buf, __str._M_local_buf,
         _S_local_capacity + 1);
     _M_length(__str.length());
     __str._M_set_length(0);
   }
 else if (_Alloc_traits::_S_always_equal()
     || __str.get_allocator() == __a)
   {
     _M_data(__str._M_data());
     _M_length(__str.length());
     _M_capacity(__str._M_allocated_capacity);
     __str._M_data(__str._M_local_buf);
     __str._M_set_length(0);
   }
 else
   _M_construct(__str.begin(), __str.end());
      }
# 620 "/usr/include/c++/10/bits/basic_string.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>



        basic_string(_InputIterator __beg, _InputIterator __end,
       const _Alloc& __a = _Alloc())
 : _M_dataplus(_M_local_data(), __a)
 { _M_construct(__beg, __end); }
# 657 "/usr/include/c++/10/bits/basic_string.h" 3
      ~basic_string()
      { _M_dispose(); }





      basic_string&
      operator=(const basic_string& __str)
      {
 return this->assign(__str);
      }





      basic_string&
      operator=(const _CharT* __s)
      { return this->assign(__s); }
# 685 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string&
      operator=(_CharT __c)
      {
 this->assign(1, __c);
 return *this;
      }
# 702 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string&
      operator=(basic_string&& __str)
      noexcept(_Alloc_traits::_S_nothrow_move())
      {
 if (!_M_is_local() && _Alloc_traits::_S_propagate_on_move_assign()
     && !_Alloc_traits::_S_always_equal()
     && _M_get_allocator() != __str._M_get_allocator())
   {

     _M_destroy(_M_allocated_capacity);
     _M_data(_M_local_data());
     _M_set_length(0);
   }

 std::__alloc_on_move(_M_get_allocator(), __str._M_get_allocator());

 if (__str._M_is_local())
   {

     if (__str.size())
       this->_S_copy(_M_data(), __str._M_data(), __str.size());
     _M_set_length(__str.size());
   }
 else if (_Alloc_traits::_S_propagate_on_move_assign()
     || _Alloc_traits::_S_always_equal()
     || _M_get_allocator() == __str._M_get_allocator())
   {

     pointer __data = nullptr;
     size_type __capacity;
     if (!_M_is_local())
       {
  if (_Alloc_traits::_S_always_equal())
    {

      __data = _M_data();
      __capacity = _M_allocated_capacity;
    }
  else
    _M_destroy(_M_allocated_capacity);
       }

     _M_data(__str._M_data());
     _M_length(__str.length());
     _M_capacity(__str._M_allocated_capacity);
     if (__data)
       {
  __str._M_data(__data);
  __str._M_capacity(__capacity);
       }
     else
       __str._M_data(__str._M_local_buf);
   }
 else
   assign(__str);
 __str.clear();
 return *this;
      }





      basic_string&
      operator=(initializer_list<_CharT> __l)
      {
 this->assign(__l.begin(), __l.size());
 return *this;
      }
# 796 "/usr/include/c++/10/bits/basic_string.h" 3
      iterator
      begin() noexcept
      { return iterator(_M_data()); }





      const_iterator
      begin() const noexcept
      { return const_iterator(_M_data()); }





      iterator
      end() noexcept
      { return iterator(_M_data() + this->size()); }





      const_iterator
      end() const noexcept
      { return const_iterator(_M_data() + this->size()); }






      reverse_iterator
      rbegin() noexcept
      { return reverse_iterator(this->end()); }






      const_reverse_iterator
      rbegin() const noexcept
      { return const_reverse_iterator(this->end()); }






      reverse_iterator
      rend() noexcept
      { return reverse_iterator(this->begin()); }






      const_reverse_iterator
      rend() const noexcept
      { return const_reverse_iterator(this->begin()); }






      const_iterator
      cbegin() const noexcept
      { return const_iterator(this->_M_data()); }





      const_iterator
      cend() const noexcept
      { return const_iterator(this->_M_data() + this->size()); }






      const_reverse_iterator
      crbegin() const noexcept
      { return const_reverse_iterator(this->end()); }






      const_reverse_iterator
      crend() const noexcept
      { return const_reverse_iterator(this->begin()); }


    public:



      size_type
      size() const noexcept
      { return _M_string_length; }



      size_type
      length() const noexcept
      { return _M_string_length; }


      size_type
      max_size() const noexcept
      { return (_Alloc_traits::max_size(_M_get_allocator()) - 1) / 2; }
# 925 "/usr/include/c++/10/bits/basic_string.h" 3
      void
      resize(size_type __n, _CharT __c);
# 938 "/usr/include/c++/10/bits/basic_string.h" 3
      void
      resize(size_type __n)
      { this->resize(__n, _CharT()); }



      void
      shrink_to_fit() noexcept
      {

 if (capacity() > size())
   {
     try
       { reserve(0); }
     catch(...)
       { }
   }

      }






      size_type
      capacity() const noexcept
      {
 return _M_is_local() ? size_type(_S_local_capacity)
                      : _M_allocated_capacity;
      }
# 987 "/usr/include/c++/10/bits/basic_string.h" 3
      void
      reserve(size_type __res_arg = 0);




      void
      clear() noexcept
      { _M_set_length(0); }





      bool
      empty() const noexcept
      { return this->size() == 0; }
# 1016 "/usr/include/c++/10/bits/basic_string.h" 3
      const_reference
      operator[] (size_type __pos) const noexcept
      {
 ;
 return _M_data()[__pos];
      }
# 1033 "/usr/include/c++/10/bits/basic_string.h" 3
      reference
      operator[](size_type __pos)
      {


 ;

 ;
 return _M_data()[__pos];
      }
# 1054 "/usr/include/c++/10/bits/basic_string.h" 3
      const_reference
      at(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range_fmt(("basic_string::at: __n " "(which is %zu) >= this->size() " "(which is %zu)")

                            ,
       __n, this->size());
 return _M_data()[__n];
      }
# 1075 "/usr/include/c++/10/bits/basic_string.h" 3
      reference
      at(size_type __n)
      {
 if (__n >= size())
   __throw_out_of_range_fmt(("basic_string::at: __n " "(which is %zu) >= this->size() " "(which is %zu)")

                            ,
       __n, this->size());
 return _M_data()[__n];
      }






      reference
      front() noexcept
      {
 ;
 return operator[](0);
      }





      const_reference
      front() const noexcept
      {
 ;
 return operator[](0);
      }





      reference
      back() noexcept
      {
 ;
 return operator[](this->size() - 1);
      }





      const_reference
      back() const noexcept
      {
 ;
 return operator[](this->size() - 1);
      }
# 1138 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string&
      operator+=(const basic_string& __str)
      { return this->append(__str); }






      basic_string&
      operator+=(const _CharT* __s)
      { return this->append(__s); }






      basic_string&
      operator+=(_CharT __c)
      {
 this->push_back(__c);
 return *this;
      }







      basic_string&
      operator+=(initializer_list<_CharT> __l)
      { return this->append(__l.begin(), __l.size()); }
# 1191 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string&
      append(const basic_string& __str)
      { return _M_append(__str._M_data(), __str.size()); }
# 1208 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string&
      append(const basic_string& __str, size_type __pos, size_type __n = npos)
      { return _M_append(__str._M_data()
    + __str._M_check(__pos, "basic_string::append"),
    __str._M_limit(__pos, __n)); }







      basic_string&
      append(const _CharT* __s, size_type __n)
      {
 ;
 _M_check_length(size_type(0), __n, "basic_string::append");
 return _M_append(__s, __n);
      }






      basic_string&
      append(const _CharT* __s)
      {
 ;
 const size_type __n = traits_type::length(__s);
 _M_check_length(size_type(0), __n, "basic_string::append");
 return _M_append(__s, __n);
      }
# 1250 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string&
      append(size_type __n, _CharT __c)
      { return _M_replace_aux(this->size(), size_type(0), __n, __c); }







      basic_string&
      append(initializer_list<_CharT> __l)
      { return this->append(__l.begin(), __l.size()); }
# 1274 "/usr/include/c++/10/bits/basic_string.h" 3
      template<class _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>



        basic_string&
        append(_InputIterator __first, _InputIterator __last)
        { return this->replace(end(), end(), __first, __last); }
# 1319 "/usr/include/c++/10/bits/basic_string.h" 3
      void
      push_back(_CharT __c)
      {
 const size_type __size = this->size();
 if (__size + 1 > this->capacity())
   this->_M_mutate(__size, size_type(0), 0, size_type(1));
 traits_type::assign(this->_M_data()[__size], __c);
 this->_M_set_length(__size + 1);
      }






      basic_string&
      assign(const basic_string& __str)
      {

 if (_Alloc_traits::_S_propagate_on_copy_assign())
   {
     if (!_Alloc_traits::_S_always_equal() && !_M_is_local()
  && _M_get_allocator() != __str._M_get_allocator())
       {


  if (__str.size() <= _S_local_capacity)
    {
      _M_destroy(_M_allocated_capacity);
      _M_data(_M_local_data());
      _M_set_length(0);
    }
  else
    {
      const auto __len = __str.size();
      auto __alloc = __str._M_get_allocator();

      auto __ptr = _Alloc_traits::allocate(__alloc, __len + 1);
      _M_destroy(_M_allocated_capacity);
      _M_data(__ptr);
      _M_capacity(__len);
      _M_set_length(__len);
    }
       }
     std::__alloc_on_copy(_M_get_allocator(), __str._M_get_allocator());
   }

 this->_M_assign(__str);
 return *this;
      }
# 1379 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string&
      assign(basic_string&& __str)
      noexcept(_Alloc_traits::_S_nothrow_move())
      {


 return *this = std::move(__str);
      }
# 1402 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string&
      assign(const basic_string& __str, size_type __pos, size_type __n = npos)
      { return _M_replace(size_type(0), this->size(), __str._M_data()
     + __str._M_check(__pos, "basic_string::assign"),
     __str._M_limit(__pos, __n)); }
# 1418 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string&
      assign(const _CharT* __s, size_type __n)
      {
 ;
 return _M_replace(size_type(0), this->size(), __s, __n);
      }
# 1434 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string&
      assign(const _CharT* __s)
      {
 ;
 return _M_replace(size_type(0), this->size(), __s,
     traits_type::length(__s));
      }
# 1451 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string&
      assign(size_type __n, _CharT __c)
      { return _M_replace_aux(size_type(0), this->size(), __n, __c); }
# 1464 "/usr/include/c++/10/bits/basic_string.h" 3
      template<class _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>



        basic_string&
        assign(_InputIterator __first, _InputIterator __last)
        { return this->replace(begin(), end(), __first, __last); }







      basic_string&
      assign(initializer_list<_CharT> __l)
      { return this->assign(__l.begin(), __l.size()); }
# 1533 "/usr/include/c++/10/bits/basic_string.h" 3
      iterator
      insert(const_iterator __p, size_type __n, _CharT __c)
      {
 ;
 const size_type __pos = __p - begin();
 this->replace(__p, __p, __n, __c);
 return iterator(this->_M_data() + __pos);
      }
# 1575 "/usr/include/c++/10/bits/basic_string.h" 3
      template<class _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
 iterator
        insert(const_iterator __p, _InputIterator __beg, _InputIterator __end)
        {
   ;
   const size_type __pos = __p - begin();
   this->replace(__p, __p, __beg, __end);
   return iterator(this->_M_data() + __pos);
 }
# 1611 "/usr/include/c++/10/bits/basic_string.h" 3
      iterator
      insert(const_iterator __p, initializer_list<_CharT> __l)
      { return this->insert(__p, __l.begin(), __l.end()); }
# 1638 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos1, const basic_string& __str)
      { return this->replace(__pos1, size_type(0),
        __str._M_data(), __str.size()); }
# 1661 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos1, const basic_string& __str,
      size_type __pos2, size_type __n = npos)
      { return this->replace(__pos1, size_type(0), __str._M_data()
        + __str._M_check(__pos2, "basic_string::insert"),
        __str._M_limit(__pos2, __n)); }
# 1684 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, const _CharT* __s, size_type __n)
      { return this->replace(__pos, size_type(0), __s, __n); }
# 1703 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, const _CharT* __s)
      {
 ;
 return this->replace(__pos, size_type(0), __s,
        traits_type::length(__s));
      }
# 1727 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, size_type __n, _CharT __c)
      { return _M_replace_aux(_M_check(__pos, "basic_string::insert"),
         size_type(0), __n, __c); }
# 1745 "/usr/include/c++/10/bits/basic_string.h" 3
      iterator
      insert(__const_iterator __p, _CharT __c)
      {
 ;
 const size_type __pos = __p - begin();
 _M_replace_aux(__pos, size_type(0), size_type(1), __c);
 return iterator(_M_data() + __pos);
      }
# 1805 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string&
      erase(size_type __pos = 0, size_type __n = npos)
      {
 _M_check(__pos, "basic_string::erase");
 if (__n == npos)
   this->_M_set_length(__pos);
 else if (__n != 0)
   this->_M_erase(__pos, _M_limit(__pos, __n));
 return *this;
      }
# 1824 "/usr/include/c++/10/bits/basic_string.h" 3
      iterator
      erase(__const_iterator __position)
      {

                           ;
 const size_type __pos = __position - begin();
 this->_M_erase(__pos, size_type(1));
 return iterator(_M_data() + __pos);
      }
# 1843 "/usr/include/c++/10/bits/basic_string.h" 3
      iterator
      erase(__const_iterator __first, __const_iterator __last)
      {

                        ;
        const size_type __pos = __first - begin();
 if (__last == end())
   this->_M_set_length(__pos);
 else
   this->_M_erase(__pos, __last - __first);
 return iterator(this->_M_data() + __pos);
      }







      void
      pop_back() noexcept
      {
 ;
 _M_erase(size() - 1, 1);
      }
# 1887 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n, const basic_string& __str)
      { return this->replace(__pos, __n, __str._M_data(), __str.size()); }
# 1909 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos1, size_type __n1, const basic_string& __str,
       size_type __pos2, size_type __n2 = npos)
      { return this->replace(__pos1, __n1, __str._M_data()
        + __str._M_check(__pos2, "basic_string::replace"),
        __str._M_limit(__pos2, __n2)); }
# 1934 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s,
       size_type __n2)
      {
 ;
 return _M_replace(_M_check(__pos, "basic_string::replace"),
     _M_limit(__pos, __n1), __s, __n2);
      }
# 1959 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s)
      {
 ;
 return this->replace(__pos, __n1, __s, traits_type::length(__s));
      }
# 1983 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)
      { return _M_replace_aux(_M_check(__pos, "basic_string::replace"),
         _M_limit(__pos, __n1), __n2, __c); }
# 2001 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       const basic_string& __str)
      { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }
# 2021 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       const _CharT* __s, size_type __n)
      {

                      ;
 return this->replace(__i1 - begin(), __i2 - __i1, __s, __n);
      }
# 2043 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2, const _CharT* __s)
      {
 ;
 return this->replace(__i1, __i2, __s, traits_type::length(__s));
      }
# 2064 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2, size_type __n,
       _CharT __c)
      {

                      ;
 return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __c);
      }
# 2089 "/usr/include/c++/10/bits/basic_string.h" 3
      template<class _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
        basic_string&
        replace(const_iterator __i1, const_iterator __i2,
  _InputIterator __k1, _InputIterator __k2)
        {
  
                        ;
   ;
   return this->_M_replace_dispatch(__i1, __i2, __k1, __k2,
        std::__false_type());
 }
# 2121 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       _CharT* __k1, _CharT* __k2)
      {

                      ;
 ;
 return this->replace(__i1 - begin(), __i2 - __i1,
        __k1, __k2 - __k1);
      }

      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       const _CharT* __k1, const _CharT* __k2)
      {

                      ;
 ;
 return this->replace(__i1 - begin(), __i2 - __i1,
        __k1, __k2 - __k1);
      }

      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       iterator __k1, iterator __k2)
      {

                      ;
 ;
 return this->replace(__i1 - begin(), __i2 - __i1,
        __k1.base(), __k2 - __k1);
      }

      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       const_iterator __k1, const_iterator __k2)
      {

                      ;
 ;
 return this->replace(__i1 - begin(), __i2 - __i1,
        __k1.base(), __k2 - __k1);
      }
# 2180 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string& replace(const_iterator __i1, const_iterator __i2,
       initializer_list<_CharT> __l)
      { return this->replace(__i1, __i2, __l.begin(), __l.size()); }
# 2240 "/usr/include/c++/10/bits/basic_string.h" 3
    private:
      template<class _Integer>
 basic_string&
 _M_replace_dispatch(const_iterator __i1, const_iterator __i2,
       _Integer __n, _Integer __val, __true_type)
        { return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __val); }

      template<class _InputIterator>
 basic_string&
 _M_replace_dispatch(const_iterator __i1, const_iterator __i2,
       _InputIterator __k1, _InputIterator __k2,
       __false_type);

      basic_string&
      _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
       _CharT __c);

      basic_string&
      _M_replace(size_type __pos, size_type __len1, const _CharT* __s,
   const size_type __len2);

      basic_string&
      _M_append(const _CharT* __s, size_type __n);

    public:
# 2278 "/usr/include/c++/10/bits/basic_string.h" 3
      size_type
      copy(_CharT* __s, size_type __n, size_type __pos = 0) const;
# 2288 "/usr/include/c++/10/bits/basic_string.h" 3
      void
      swap(basic_string& __s) noexcept;
# 2298 "/usr/include/c++/10/bits/basic_string.h" 3
      const _CharT*
      c_str() const noexcept
      { return _M_data(); }
# 2310 "/usr/include/c++/10/bits/basic_string.h" 3
      const _CharT*
      data() const noexcept
      { return _M_data(); }
# 2329 "/usr/include/c++/10/bits/basic_string.h" 3
      allocator_type
      get_allocator() const noexcept
      { return _M_get_allocator(); }
# 2345 "/usr/include/c++/10/bits/basic_string.h" 3
      size_type
      find(const _CharT* __s, size_type __pos, size_type __n) const
      noexcept;
# 2359 "/usr/include/c++/10/bits/basic_string.h" 3
      size_type
      find(const basic_string& __str, size_type __pos = 0) const
      noexcept
      { return this->find(__str.data(), __pos, __str.size()); }
# 2391 "/usr/include/c++/10/bits/basic_string.h" 3
      size_type
      find(const _CharT* __s, size_type __pos = 0) const noexcept
      {
 ;
 return this->find(__s, __pos, traits_type::length(__s));
      }
# 2408 "/usr/include/c++/10/bits/basic_string.h" 3
      size_type
      find(_CharT __c, size_type __pos = 0) const noexcept;
# 2421 "/usr/include/c++/10/bits/basic_string.h" 3
      size_type
      rfind(const basic_string& __str, size_type __pos = npos) const
      noexcept
      { return this->rfind(__str.data(), __pos, __str.size()); }
# 2455 "/usr/include/c++/10/bits/basic_string.h" 3
      size_type
      rfind(const _CharT* __s, size_type __pos, size_type __n) const
      noexcept;
# 2469 "/usr/include/c++/10/bits/basic_string.h" 3
      size_type
      rfind(const _CharT* __s, size_type __pos = npos) const
      {
 ;
 return this->rfind(__s, __pos, traits_type::length(__s));
      }
# 2486 "/usr/include/c++/10/bits/basic_string.h" 3
      size_type
      rfind(_CharT __c, size_type __pos = npos) const noexcept;
# 2500 "/usr/include/c++/10/bits/basic_string.h" 3
      size_type
      find_first_of(const basic_string& __str, size_type __pos = 0) const
      noexcept
      { return this->find_first_of(__str.data(), __pos, __str.size()); }
# 2535 "/usr/include/c++/10/bits/basic_string.h" 3
      size_type
      find_first_of(const _CharT* __s, size_type __pos, size_type __n) const
      noexcept;
# 2549 "/usr/include/c++/10/bits/basic_string.h" 3
      size_type
      find_first_of(const _CharT* __s, size_type __pos = 0) const
      noexcept
      {
 ;
 return this->find_first_of(__s, __pos, traits_type::length(__s));
      }
# 2569 "/usr/include/c++/10/bits/basic_string.h" 3
      size_type
      find_first_of(_CharT __c, size_type __pos = 0) const noexcept
      { return this->find(__c, __pos); }
# 2584 "/usr/include/c++/10/bits/basic_string.h" 3
      size_type
      find_last_of(const basic_string& __str, size_type __pos = npos) const
      noexcept
      { return this->find_last_of(__str.data(), __pos, __str.size()); }
# 2619 "/usr/include/c++/10/bits/basic_string.h" 3
      size_type
      find_last_of(const _CharT* __s, size_type __pos, size_type __n) const
      noexcept;
# 2633 "/usr/include/c++/10/bits/basic_string.h" 3
      size_type
      find_last_of(const _CharT* __s, size_type __pos = npos) const
      noexcept
      {
 ;
 return this->find_last_of(__s, __pos, traits_type::length(__s));
      }
# 2653 "/usr/include/c++/10/bits/basic_string.h" 3
      size_type
      find_last_of(_CharT __c, size_type __pos = npos) const noexcept
      { return this->rfind(__c, __pos); }
# 2667 "/usr/include/c++/10/bits/basic_string.h" 3
      size_type
      find_first_not_of(const basic_string& __str, size_type __pos = 0) const
      noexcept
      { return this->find_first_not_of(__str.data(), __pos, __str.size()); }
# 2702 "/usr/include/c++/10/bits/basic_string.h" 3
      size_type
      find_first_not_of(const _CharT* __s, size_type __pos,
   size_type __n) const noexcept;
# 2716 "/usr/include/c++/10/bits/basic_string.h" 3
      size_type
      find_first_not_of(const _CharT* __s, size_type __pos = 0) const
      noexcept
      {
 ;
 return this->find_first_not_of(__s, __pos, traits_type::length(__s));
      }
# 2734 "/usr/include/c++/10/bits/basic_string.h" 3
      size_type
      find_first_not_of(_CharT __c, size_type __pos = 0) const
      noexcept;
# 2749 "/usr/include/c++/10/bits/basic_string.h" 3
      size_type
      find_last_not_of(const basic_string& __str, size_type __pos = npos) const
      noexcept
      { return this->find_last_not_of(__str.data(), __pos, __str.size()); }
# 2784 "/usr/include/c++/10/bits/basic_string.h" 3
      size_type
      find_last_not_of(const _CharT* __s, size_type __pos,
         size_type __n) const noexcept;
# 2798 "/usr/include/c++/10/bits/basic_string.h" 3
      size_type
      find_last_not_of(const _CharT* __s, size_type __pos = npos) const
      noexcept
      {
 ;
 return this->find_last_not_of(__s, __pos, traits_type::length(__s));
      }
# 2816 "/usr/include/c++/10/bits/basic_string.h" 3
      size_type
      find_last_not_of(_CharT __c, size_type __pos = npos) const
      noexcept;
# 2832 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string
      substr(size_type __pos = 0, size_type __n = npos) const
      { return basic_string(*this,
       _M_check(__pos, "basic_string::substr"), __n); }
# 2851 "/usr/include/c++/10/bits/basic_string.h" 3
      int
      compare(const basic_string& __str) const
      {
 const size_type __size = this->size();
 const size_type __osize = __str.size();
 const size_type __len = std::min(__size, __osize);

 int __r = traits_type::compare(_M_data(), __str.data(), __len);
 if (!__r)
   __r = _S_compare(__size, __osize);
 return __r;
      }
# 2944 "/usr/include/c++/10/bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n, const basic_string& __str) const;
# 2970 "/usr/include/c++/10/bits/basic_string.h" 3
      int
      compare(size_type __pos1, size_type __n1, const basic_string& __str,
       size_type __pos2, size_type __n2 = npos) const;
# 2988 "/usr/include/c++/10/bits/basic_string.h" 3
      int
      compare(const _CharT* __s) const noexcept;
# 3012 "/usr/include/c++/10/bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n1, const _CharT* __s) const;
# 3039 "/usr/include/c++/10/bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n1, const _CharT* __s,
       size_type __n2) const;
# 3070 "/usr/include/c++/10/bits/basic_string.h" 3
      template<typename, typename, typename> friend class basic_stringbuf;
    };
}
# 6030 "/usr/include/c++/10/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
      __str.append(__rhs);
      return __str;
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT,_Traits,_Alloc>
    operator+(const _CharT* __lhs,
       const basic_string<_CharT,_Traits,_Alloc>& __rhs);







  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT,_Traits,_Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT,_Traits,_Alloc>& __rhs);







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
      __str.append(__rhs);
      return __str;
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      __string_type __str(__lhs);
      __str.append(__size_type(1), __rhs);
      return __str;
    }


  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return std::move(__lhs.append(__rhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    {

      using _Alloc_traits = allocator_traits<_Alloc>;
      bool __use_rhs = false;
      if (typename _Alloc_traits::is_always_equal{})
 __use_rhs = true;
      else if (__lhs.get_allocator() == __rhs.get_allocator())
 __use_rhs = true;
      if (__use_rhs)

 {
   const auto __size = __lhs.size() + __rhs.size();
   if (__size > __lhs.capacity() && __size <= __rhs.capacity())
     return std::move(__rhs.insert(0, __lhs));
 }
      return std::move(__lhs.append(__rhs));
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(_CharT __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, 1, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       const _CharT* __rhs)
    { return std::move(__lhs.append(__rhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       _CharT __rhs)
    { return std::move(__lhs.append(1, __rhs)); }
# 6161 "/usr/include/c++/10/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return __lhs.compare(__rhs) == 0; }

  template<typename _CharT>
    inline
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type
    operator==(const basic_string<_CharT>& __lhs,
        const basic_string<_CharT>& __rhs) noexcept
    { return (__lhs.size() == __rhs.size()
       && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
          __lhs.size())); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) == 0; }
# 6224 "/usr/include/c++/10/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) == 0; }
# 6237 "/usr/include/c++/10/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return !(__lhs == __rhs); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return !(__lhs == __rhs); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return !(__lhs == __rhs); }
# 6275 "/usr/include/c++/10/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return __lhs.compare(__rhs) < 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    { return __lhs.compare(__rhs) < 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) > 0; }
# 6313 "/usr/include/c++/10/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return __lhs.compare(__rhs) > 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    { return __lhs.compare(__rhs) > 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) < 0; }
# 6351 "/usr/include/c++/10/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return __lhs.compare(__rhs) <= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) <= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) >= 0; }
# 6389 "/usr/include/c++/10/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return __lhs.compare(__rhs) >= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) >= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const _CharT* __lhs,
      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) <= 0; }
# 6428 "/usr/include/c++/10/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline void
    swap(basic_string<_CharT, _Traits, _Alloc>& __lhs,
  basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept(noexcept(__lhs.swap(__rhs)))
    { __lhs.swap(__rhs); }
# 6448 "/usr/include/c++/10/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is,
        basic_string<_CharT, _Traits, _Alloc>& __str);

  template<>
    basic_istream<char>&
    operator>>(basic_istream<char>& __is, basic_string<char>& __str);
# 6466 "/usr/include/c++/10/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os,
        const basic_string<_CharT, _Traits, _Alloc>& __str)
    {


      return __ostream_insert(__os, __str.data(), __str.size());
    }
# 6489 "/usr/include/c++/10/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim);
# 6506 "/usr/include/c++/10/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str)
    { return std::getline(__is, __str, __is.widen('\n')); }



  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>&& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim)
    { return std::getline(__is, __str, __delim); }


  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>&& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str)
    { return std::getline(__is, __str); }


  template<>
    basic_istream<char>&
    getline(basic_istream<char>& __in, basic_string<char>& __str,
     char __delim);


  template<>
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>& __in, basic_string<wchar_t>& __str,
     wchar_t __delim);



}



# 1 "/usr/include/c++/10/ext/string_conversions.h" 1 3
# 32 "/usr/include/c++/10/ext/string_conversions.h" 3
       
# 33 "/usr/include/c++/10/ext/string_conversions.h" 3
# 41 "/usr/include/c++/10/ext/string_conversions.h" 3
# 1 "/usr/include/c++/10/cstdlib" 1 3
# 39 "/usr/include/c++/10/cstdlib" 3
       
# 40 "/usr/include/c++/10/cstdlib" 3
# 42 "/usr/include/c++/10/ext/string_conversions.h" 2 3
# 1 "/usr/include/c++/10/cwchar" 1 3
# 39 "/usr/include/c++/10/cwchar" 3
       
# 40 "/usr/include/c++/10/cwchar" 3
# 43 "/usr/include/c++/10/ext/string_conversions.h" 2 3
# 1 "/usr/include/c++/10/cstdio" 1 3
# 39 "/usr/include/c++/10/cstdio" 3
       
# 40 "/usr/include/c++/10/cstdio" 3
# 96 "/usr/include/c++/10/cstdio" 3
namespace std
{
  using ::FILE;
  using ::fpos_t;

  using ::clearerr;
  using ::fclose;
  using ::feof;
  using ::ferror;
  using ::fflush;
  using ::fgetc;
  using ::fgetpos;
  using ::fgets;
  using ::fopen;
  using ::fprintf;
  using ::fputc;
  using ::fputs;
  using ::fread;
  using ::freopen;
  using ::fscanf;
  using ::fseek;
  using ::fsetpos;
  using ::ftell;
  using ::fwrite;
  using ::getc;
  using ::getchar;




  using ::perror;
  using ::printf;
  using ::putc;
  using ::putchar;
  using ::puts;
  using ::remove;
  using ::rename;
  using ::rewind;
  using ::scanf;
  using ::setbuf;
  using ::setvbuf;
  using ::sprintf;
  using ::sscanf;
  using ::tmpfile;

  using ::tmpnam;

  using ::ungetc;
  using ::vfprintf;
  using ::vprintf;
  using ::vsprintf;
}
# 157 "/usr/include/c++/10/cstdio" 3
namespace __gnu_cxx
{
# 175 "/usr/include/c++/10/cstdio" 3
  using ::snprintf;
  using ::vfscanf;
  using ::vscanf;
  using ::vsnprintf;
  using ::vsscanf;

}

namespace std
{
  using ::__gnu_cxx::snprintf;
  using ::__gnu_cxx::vfscanf;
  using ::__gnu_cxx::vscanf;
  using ::__gnu_cxx::vsnprintf;
  using ::__gnu_cxx::vsscanf;
}
# 44 "/usr/include/c++/10/ext/string_conversions.h" 2 3
# 1 "/usr/include/c++/10/cerrno" 1 3
# 39 "/usr/include/c++/10/cerrno" 3
       
# 40 "/usr/include/c++/10/cerrno" 3


# 1 "/usr/include/errno.h" 1 3 4
# 28 "/usr/include/errno.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/errno.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/errno.h" 3 4
# 1 "/usr/include/linux/errno.h" 1 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/errno.h" 1 3 4
# 1 "/usr/include/asm-generic/errno.h" 1 3 4




# 1 "/usr/include/asm-generic/errno-base.h" 1 3 4
# 6 "/usr/include/asm-generic/errno.h" 2 3 4
# 2 "/usr/include/x86_64-linux-gnu/asm/errno.h" 2 3 4
# 2 "/usr/include/linux/errno.h" 2 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/errno.h" 2 3 4
# 29 "/usr/include/errno.h" 2 3 4





extern "C" {


extern int *__errno_location (void) throw () __attribute__ ((__const__));







extern char *program_invocation_name;
extern char *program_invocation_short_name;

# 1 "/usr/include/x86_64-linux-gnu/bits/types/error_t.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/error_t.h" 3 4
typedef int error_t;
# 49 "/usr/include/errno.h" 2 3 4



}
# 43 "/usr/include/c++/10/cerrno" 2 3
# 45 "/usr/include/c++/10/ext/string_conversions.h" 2 3

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  template<typename _TRet, typename _Ret = _TRet, typename _CharT,
    typename... _Base>
    _Ret
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
    const char* __name, const _CharT* __str, std::size_t* __idx,
    _Base... __base)
    {
      _Ret __ret;

      _CharT* __endptr;

      struct _Save_errno {
 _Save_errno() : _M_errno((*__errno_location ())) { (*__errno_location ()) = 0; }
 ~_Save_errno() { if ((*__errno_location ()) == 0) (*__errno_location ()) = _M_errno; }
 int _M_errno;
      } const __save_errno;

      struct _Range_chk {
   static bool
   _S_chk(_TRet, std::false_type) { return false; }

   static bool
   _S_chk(_TRet __val, std::true_type)
   {
     return __val < _TRet(__numeric_traits<int>::__min)
       || __val > _TRet(__numeric_traits<int>::__max);
   }
      };

      const _TRet __tmp = __convf(__str, &__endptr, __base...);

      if (__endptr == __str)
 std::__throw_invalid_argument(__name);
      else if ((*__errno_location ()) == 34
   || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
 std::__throw_out_of_range(__name);
      else
 __ret = __tmp;

      if (__idx)
 *__idx = __endptr - __str;

      return __ret;
    }


  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
     __builtin_va_list), std::size_t __n,
   const _CharT* __fmt, ...)
    {


      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
         * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);

      const int __len = __convf(__s, __n, __fmt, __args);

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
    }


}
# 6546 "/usr/include/c++/10/bits/basic_string.h" 2 3
# 1 "/usr/include/c++/10/bits/charconv.h" 1 3
# 33 "/usr/include/c++/10/bits/charconv.h" 3
       
# 34 "/usr/include/c++/10/bits/charconv.h" 3





namespace std __attribute__ ((__visibility__ ("default")))
{

namespace __detail
{

  template<typename _Tp>
    constexpr unsigned
    __to_chars_len(_Tp __value, int __base = 10) noexcept
    {
      static_assert(is_integral<_Tp>::value, "implementation bug");
      static_assert(is_unsigned<_Tp>::value, "implementation bug");

      unsigned __n = 1;
      const unsigned __b2 = __base * __base;
      const unsigned __b3 = __b2 * __base;
      const unsigned long __b4 = __b3 * __base;
      for (;;)
 {
   if (__value < (unsigned)__base) return __n;
   if (__value < __b2) return __n + 1;
   if (__value < __b3) return __n + 2;
   if (__value < __b4) return __n + 3;
   __value /= __b4;
   __n += 4;
 }
    }




  template<typename _Tp>
    void
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
    {
      static_assert(is_integral<_Tp>::value, "implementation bug");
      static_assert(is_unsigned<_Tp>::value, "implementation bug");

      static constexpr char __digits[201] =
 "0001020304050607080910111213141516171819"
 "2021222324252627282930313233343536373839"
 "4041424344454647484950515253545556575859"
 "6061626364656667686970717273747576777879"
 "8081828384858687888990919293949596979899";
      unsigned __pos = __len - 1;
      while (__val >= 100)
 {
   auto const __num = (__val % 100) * 2;
   __val /= 100;
   __first[__pos] = __digits[__num + 1];
   __first[__pos - 1] = __digits[__num];
   __pos -= 2;
 }
      if (__val >= 10)
 {
   auto const __num = __val * 2;
   __first[1] = __digits[__num + 1];
   __first[0] = __digits[__num];
 }
      else
 __first[0] = '0' + __val;
    }

}

}
# 6547 "/usr/include/c++/10/bits/basic_string.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

namespace __cxx11 {



  inline int
  stoi(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa<long, int>(&std::strtol, "stoi", __str.c_str(),
     __idx, __base); }

  inline long
  stol(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtol, "stol", __str.c_str(),
        __idx, __base); }

  inline unsigned long
  stoul(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtoul, "stoul", __str.c_str(),
        __idx, __base); }

  inline long long
  stoll(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtoll, "stoll", __str.c_str(),
        __idx, __base); }

  inline unsigned long long
  stoull(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtoull, "stoull", __str.c_str(),
        __idx, __base); }


  inline float
  stof(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtof, "stof", __str.c_str(), __idx); }

  inline double
  stod(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtod, "stod", __str.c_str(), __idx); }

  inline long double
  stold(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtold, "stold", __str.c_str(), __idx); }




  inline string
  to_string(int __val)
  {
    const bool __neg = __val < 0;
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
    const auto __len = __detail::__to_chars_len(__uval);
    string __str(__neg + __len, '-');
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
    return __str;
  }

  inline string
  to_string(unsigned __val)
  {
    string __str(__detail::__to_chars_len(__val), '\0');
    __detail::__to_chars_10_impl(&__str[0], __str.size(), __val);
    return __str;
  }

  inline string
  to_string(long __val)
  {
    const bool __neg = __val < 0;
    const unsigned long __uval = __neg ? (unsigned long)~__val + 1ul : __val;
    const auto __len = __detail::__to_chars_len(__uval);
    string __str(__neg + __len, '-');
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
    return __str;
  }

  inline string
  to_string(unsigned long __val)
  {
    string __str(__detail::__to_chars_len(__val), '\0');
    __detail::__to_chars_10_impl(&__str[0], __str.size(), __val);
    return __str;
  }

  inline string
  to_string(long long __val)
  {
    const bool __neg = __val < 0;
    const unsigned long long __uval
      = __neg ? (unsigned long long)~__val + 1ull : __val;
    const auto __len = __detail::__to_chars_len(__uval);
    string __str(__neg + __len, '-');
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
    return __str;
  }

  inline string
  to_string(unsigned long long __val)
  {
    string __str(__detail::__to_chars_len(__val), '\0');
    __detail::__to_chars_10_impl(&__str[0], __str.size(), __val);
    return __str;
  }




  inline string
  to_string(float __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<float>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
        "%f", __val);
  }

  inline string
  to_string(double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
        "%f", __val);
  }

  inline string
  to_string(long double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<long double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
        "%Lf", __val);
  }



  inline int
  stoi(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa<long, int>(&std::wcstol, "stoi", __str.c_str(),
     __idx, __base); }

  inline long
  stol(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstol, "stol", __str.c_str(),
        __idx, __base); }

  inline unsigned long
  stoul(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstoul, "stoul", __str.c_str(),
        __idx, __base); }

  inline long long
  stoll(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstoll, "stoll", __str.c_str(),
        __idx, __base); }

  inline unsigned long long
  stoull(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstoull, "stoull", __str.c_str(),
        __idx, __base); }


  inline float
  stof(const wstring& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::wcstof, "stof", __str.c_str(), __idx); }

  inline double
  stod(const wstring& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::wcstod, "stod", __str.c_str(), __idx); }

  inline long double
  stold(const wstring& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::wcstold, "stold", __str.c_str(), __idx); }



  inline wstring
  to_wstring(int __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, 4 * sizeof(int),
         L"%d", __val); }

  inline wstring
  to_wstring(unsigned __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,
         4 * sizeof(unsigned),
         L"%u", __val); }

  inline wstring
  to_wstring(long __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, 4 * sizeof(long),
         L"%ld", __val); }

  inline wstring
  to_wstring(unsigned long __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,
         4 * sizeof(unsigned long),
         L"%lu", __val); }

  inline wstring
  to_wstring(long long __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,
         4 * sizeof(long long),
         L"%lld", __val); }

  inline wstring
  to_wstring(unsigned long long __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,
         4 * sizeof(unsigned long long),
         L"%llu", __val); }

  inline wstring
  to_wstring(float __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<float>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, __n,
         L"%f", __val);
  }

  inline wstring
  to_wstring(double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, __n,
         L"%f", __val);
  }

  inline wstring
  to_wstring(long double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<long double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, __n,
         L"%Lf", __val);
  }



}

}





# 1 "/usr/include/c++/10/bits/functional_hash.h" 1 3
# 33 "/usr/include/c++/10/bits/functional_hash.h" 3
       
# 34 "/usr/include/c++/10/bits/functional_hash.h" 3



namespace std __attribute__ ((__visibility__ ("default")))
{

# 49 "/usr/include/c++/10/bits/functional_hash.h" 3
  template<typename _Result, typename _Arg>
    struct __hash_base
    {
      typedef _Result result_type ;
      typedef _Arg argument_type ;
    };


  template<typename _Tp>
    struct hash;

  template<typename _Tp, typename = void>
    struct __poison_hash
    {
      static constexpr bool __enable_hash_call = false;
    private:

      __poison_hash(__poison_hash&&);
      ~__poison_hash();
    };

  template<typename _Tp>
    struct __poison_hash<_Tp, __void_t<decltype(hash<_Tp>()(declval<_Tp>()))>>
    {
      static constexpr bool __enable_hash_call = true;
    };


  template<typename _Tp, bool = is_enum<_Tp>::value>
    struct __hash_enum
    {
    private:

      __hash_enum(__hash_enum&&);
      ~__hash_enum();
    };


  template<typename _Tp>
    struct __hash_enum<_Tp, true> : public __hash_base<size_t, _Tp>
    {
      size_t
      operator()(_Tp __val) const noexcept
      {
       using __type = typename underlying_type<_Tp>::type;
       return hash<__type>{}(static_cast<__type>(__val));
      }
    };



  template<typename _Tp>
    struct hash : __hash_enum<_Tp>
    { };


  template<typename _Tp>
    struct hash<_Tp*> : public __hash_base<size_t, _Tp*>
    {
      size_t
      operator()(_Tp* __p) const noexcept
      { return reinterpret_cast<size_t>(__p); }
    };
# 124 "/usr/include/c++/10/bits/functional_hash.h" 3
  template<> struct hash<bool> : public __hash_base<size_t, bool> { size_t operator()(bool __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<char> : public __hash_base<size_t, char> { size_t operator()(char __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<signed char> : public __hash_base<size_t, signed char> { size_t operator()(signed char __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned char> : public __hash_base<size_t, unsigned char> { size_t operator()(unsigned char __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<wchar_t> : public __hash_base<size_t, wchar_t> { size_t operator()(wchar_t __val) const noexcept { return static_cast<size_t>(__val); } };







  template<> struct hash<char16_t> : public __hash_base<size_t, char16_t> { size_t operator()(char16_t __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<char32_t> : public __hash_base<size_t, char32_t> { size_t operator()(char32_t __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<short> : public __hash_base<size_t, short> { size_t operator()(short __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<int> : public __hash_base<size_t, int> { size_t operator()(int __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<long> : public __hash_base<size_t, long> { size_t operator()(long __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<long long> : public __hash_base<size_t, long long> { size_t operator()(long long __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned short> : public __hash_base<size_t, unsigned short> { size_t operator()(unsigned short __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned int> : public __hash_base<size_t, unsigned int> { size_t operator()(unsigned int __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned long> : public __hash_base<size_t, unsigned long> { size_t operator()(unsigned long __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned long long> : public __hash_base<size_t, unsigned long long> { size_t operator()(unsigned long long __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<__int128> : public __hash_base<size_t, __int128> { size_t operator()(__int128 __val) const noexcept { return static_cast<size_t>(__val); } };
  template<> struct hash<__int128 unsigned> : public __hash_base<size_t, __int128 unsigned> { size_t operator()(__int128 unsigned __val) const noexcept { return static_cast<size_t>(__val); } };
# 192 "/usr/include/c++/10/bits/functional_hash.h" 3
  struct _Hash_impl
  {
    static size_t
    hash(const void* __ptr, size_t __clength,
  size_t __seed = static_cast<size_t>(0xc70f6907UL))
    { return _Hash_bytes(__ptr, __clength, __seed); }

    template<typename _Tp>
      static size_t
      hash(const _Tp& __val)
      { return hash(&__val, sizeof(__val)); }

    template<typename _Tp>
      static size_t
      __hash_combine(const _Tp& __val, size_t __hash)
      { return hash(&__val, sizeof(__val), __hash); }
  };


  struct _Fnv_hash_impl
  {
    static size_t
    hash(const void* __ptr, size_t __clength,
  size_t __seed = static_cast<size_t>(2166136261UL))
    { return _Fnv_hash_bytes(__ptr, __clength, __seed); }

    template<typename _Tp>
      static size_t
      hash(const _Tp& __val)
      { return hash(&__val, sizeof(__val)); }

    template<typename _Tp>
      static size_t
      __hash_combine(const _Tp& __val, size_t __hash)
      { return hash(&__val, sizeof(__val), __hash); }
  };


  template<>
    struct hash<float> : public __hash_base<size_t, float>
    {
      size_t
      operator()(float __val) const noexcept
      {

 return __val != 0.0f ? std::_Hash_impl::hash(__val) : 0;
      }
    };


  template<>
    struct hash<double> : public __hash_base<size_t, double>
    {
      size_t
      operator()(double __val) const noexcept
      {

 return __val != 0.0 ? std::_Hash_impl::hash(__val) : 0;
      }
    };


  template<>
    struct hash<long double>
    : public __hash_base<size_t, long double>
    {
      __attribute__ ((__pure__)) size_t
      operator()(long double __val) const noexcept;
    };
# 278 "/usr/include/c++/10/bits/functional_hash.h" 3
  template<typename _Hash>
    struct __is_fast_hash : public std::true_type
    { };

  template<>
    struct __is_fast_hash<hash<long double>> : public std::false_type
    { };


}
# 6798 "/usr/include/c++/10/bits/basic_string.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{






  template<>
    struct hash<string>
    : public __hash_base<size_t, string>
    {
      size_t
      operator()(const string& __s) const noexcept
      { return std::_Hash_impl::hash(__s.data(), __s.length()); }
    };

  template<>
    struct __is_fast_hash<hash<string>> : std::false_type
    { };



  template<>
    struct hash<wstring>
    : public __hash_base<size_t, wstring>
    {
      size_t
      operator()(const wstring& __s) const noexcept
      { return std::_Hash_impl::hash(__s.data(),
                                     __s.length() * sizeof(wchar_t)); }
    };

  template<>
    struct __is_fast_hash<hash<wstring>> : std::false_type
    { };
# 6856 "/usr/include/c++/10/bits/basic_string.h" 3
  template<>
    struct hash<u16string>
    : public __hash_base<size_t, u16string>
    {
      size_t
      operator()(const u16string& __s) const noexcept
      { return std::_Hash_impl::hash(__s.data(),
                                     __s.length() * sizeof(char16_t)); }
    };

  template<>
    struct __is_fast_hash<hash<u16string>> : std::false_type
    { };


  template<>
    struct hash<u32string>
    : public __hash_base<size_t, u32string>
    {
      size_t
      operator()(const u32string& __s) const noexcept
      { return std::_Hash_impl::hash(__s.data(),
                                     __s.length() * sizeof(char32_t)); }
    };

  template<>
    struct __is_fast_hash<hash<u32string>> : std::false_type
    { };





  inline namespace literals
  {
  inline namespace string_literals
  {
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wliteral-suffix"
    __attribute ((__abi_tag__ ("cxx11")))
    inline basic_string<char>
    operator""s(const char* __str, size_t __len)
    { return basic_string<char>{__str, __len}; }


    __attribute ((__abi_tag__ ("cxx11")))
    inline basic_string<wchar_t>
    operator""s(const wchar_t* __str, size_t __len)
    { return basic_string<wchar_t>{__str, __len}; }
# 6914 "/usr/include/c++/10/bits/basic_string.h" 3
    __attribute ((__abi_tag__ ("cxx11")))
    inline basic_string<char16_t>
    operator""s(const char16_t* __str, size_t __len)
    { return basic_string<char16_t>{__str, __len}; }

    __attribute ((__abi_tag__ ("cxx11")))
    inline basic_string<char32_t>
    operator""s(const char32_t* __str, size_t __len)
    { return basic_string<char32_t>{__str, __len}; }

#pragma GCC diagnostic pop
  }
  }
# 6946 "/usr/include/c++/10/bits/basic_string.h" 3

}
# 56 "/usr/include/c++/10/string" 2 3
# 1 "/usr/include/c++/10/bits/basic_string.tcc" 1 3
# 42 "/usr/include/c++/10/bits/basic_string.tcc" 3
       
# 43 "/usr/include/c++/10/bits/basic_string.tcc" 3



namespace std __attribute__ ((__visibility__ ("default")))
{




  template<typename _CharT, typename _Traits, typename _Alloc>
    const typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::npos;

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    swap(basic_string& __s) noexcept
    {
      if (this == &__s)
 return;

      _Alloc_traits::_S_on_swap(_M_get_allocator(), __s._M_get_allocator());

      if (_M_is_local())
 if (__s._M_is_local())
   {
     if (length() && __s.length())
       {
  _CharT __tmp_data[_S_local_capacity + 1];
  traits_type::copy(__tmp_data, __s._M_local_buf,
      _S_local_capacity + 1);
  traits_type::copy(__s._M_local_buf, _M_local_buf,
      _S_local_capacity + 1);
  traits_type::copy(_M_local_buf, __tmp_data,
      _S_local_capacity + 1);
       }
     else if (__s.length())
       {
  traits_type::copy(_M_local_buf, __s._M_local_buf,
      _S_local_capacity + 1);
  _M_length(__s.length());
  __s._M_set_length(0);
  return;
       }
     else if (length())
       {
  traits_type::copy(__s._M_local_buf, _M_local_buf,
      _S_local_capacity + 1);
  __s._M_length(length());
  _M_set_length(0);
  return;
       }
   }
 else
   {
     const size_type __tmp_capacity = __s._M_allocated_capacity;
     traits_type::copy(__s._M_local_buf, _M_local_buf,
         _S_local_capacity + 1);
     _M_data(__s._M_data());
     __s._M_data(__s._M_local_buf);
     _M_capacity(__tmp_capacity);
   }
      else
 {
   const size_type __tmp_capacity = _M_allocated_capacity;
   if (__s._M_is_local())
     {
       traits_type::copy(_M_local_buf, __s._M_local_buf,
    _S_local_capacity + 1);
       __s._M_data(_M_data());
       _M_data(_M_local_buf);
     }
   else
     {
       pointer __tmp_ptr = _M_data();
       _M_data(__s._M_data());
       __s._M_data(__tmp_ptr);
       _M_capacity(__s._M_allocated_capacity);
     }
   __s._M_capacity(__tmp_capacity);
 }

      const size_type __tmp_length = length();
      _M_length(__s.length());
      __s._M_length(__tmp_length);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::pointer
    basic_string<_CharT, _Traits, _Alloc>::
    _M_create(size_type& __capacity, size_type __old_capacity)
    {


      if (__capacity > max_size())
 std::__throw_length_error(("basic_string::_M_create"));




      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
 {
   __capacity = 2 * __old_capacity;

   if (__capacity > max_size())
     __capacity = max_size();
 }



      return _Alloc_traits::allocate(_M_get_allocator(), __capacity + 1);
    }





  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
      _M_construct(_InIterator __beg, _InIterator __end,
     std::input_iterator_tag)
      {
 size_type __len = 0;
 size_type __capacity = size_type(_S_local_capacity);

 while (__beg != __end && __len < __capacity)
   {
     _M_data()[__len++] = *__beg;
     ++__beg;
   }

 try
   {
     while (__beg != __end)
       {
  if (__len == __capacity)
    {

      __capacity = __len + 1;
      pointer __another = _M_create(__capacity, __len);
      this->_S_copy(__another, _M_data(), __len);
      _M_dispose();
      _M_data(__another);
      _M_capacity(__capacity);
    }
  _M_data()[__len++] = *__beg;
  ++__beg;
       }
   }
 catch(...)
   {
     _M_dispose();
     throw;
   }

 _M_set_length(__len);
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
      _M_construct(_InIterator __beg, _InIterator __end,
     std::forward_iterator_tag)
      {

 if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
   std::__throw_logic_error(("basic_string::" "_M_construct null not valid")
                                         );

 size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));

 if (__dnew > size_type(_S_local_capacity))
   {
     _M_data(_M_create(__dnew, size_type(0)));
     _M_capacity(__dnew);
   }


 try
   { this->_S_copy_chars(_M_data(), __beg, __end); }
 catch(...)
   {
     _M_dispose();
     throw;
   }

 _M_set_length(__dnew);
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_construct(size_type __n, _CharT __c)
    {
      if (__n > size_type(_S_local_capacity))
 {
   _M_data(_M_create(__n, size_type(0)));
   _M_capacity(__n);
 }

      if (__n)
 this->_S_assign(_M_data(), __n, __c);

      _M_set_length(__n);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_assign(const basic_string& __str)
    {
      if (this != &__str)
 {
   const size_type __rsize = __str.length();
   const size_type __capacity = capacity();

   if (__rsize > __capacity)
     {
       size_type __new_capacity = __rsize;
       pointer __tmp = _M_create(__new_capacity, __capacity);
       _M_dispose();
       _M_data(__tmp);
       _M_capacity(__new_capacity);
     }

   if (__rsize)
     this->_S_copy(_M_data(), __str._M_data(), __rsize);

   _M_set_length(__rsize);
 }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    reserve(size_type __res)
    {

      if (__res < length())
 __res = length();

      const size_type __capacity = capacity();
      if (__res != __capacity)
 {
   if (__res > __capacity
       || __res > size_type(_S_local_capacity))
     {
       pointer __tmp = _M_create(__res, __capacity);
       this->_S_copy(__tmp, _M_data(), length() + 1);
       _M_dispose();
       _M_data(__tmp);
       _M_capacity(__res);
     }
   else if (!_M_is_local())
     {
       this->_S_copy(_M_local_data(), _M_data(), length() + 1);
       _M_destroy(__capacity);
       _M_data(_M_local_data());
     }
 }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,
       size_type __len2)
    {
      const size_type __how_much = length() - __pos - __len1;

      size_type __new_capacity = length() + __len2 - __len1;
      pointer __r = _M_create(__new_capacity, capacity());

      if (__pos)
 this->_S_copy(__r, _M_data(), __pos);
      if (__s && __len2)
 this->_S_copy(__r + __pos, __s, __len2);
      if (__how_much)
 this->_S_copy(__r + __pos + __len2,
        _M_data() + __pos + __len1, __how_much);

      _M_dispose();
      _M_data(__r);
      _M_capacity(__new_capacity);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_erase(size_type __pos, size_type __n)
    {
      const size_type __how_much = length() - __pos - __n;

      if (__how_much && __n)
 this->_S_move(_M_data() + __pos, _M_data() + __pos + __n, __how_much);

      _M_set_length(length() - __n);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    resize(size_type __n, _CharT __c)
    {
      const size_type __size = this->size();
      if (__size < __n)
 this->append(__n - __size, __c);
      else if (__n < __size)
 this->_M_set_length(__n);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_append(const _CharT* __s, size_type __n)
    {
      const size_type __len = __n + this->size();

      if (__len <= this->capacity())
 {
   if (__n)
     this->_S_copy(this->_M_data() + this->size(), __s, __n);
 }
      else
 this->_M_mutate(this->size(), size_type(0), __s, __n);

      this->_M_set_length(__len);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InputIterator>
      basic_string<_CharT, _Traits, _Alloc>&
      basic_string<_CharT, _Traits, _Alloc>::
      _M_replace_dispatch(const_iterator __i1, const_iterator __i2,
     _InputIterator __k1, _InputIterator __k2,
     std::__false_type)
      {


 const basic_string __s(__k1, __k2, this->get_allocator());
 const size_type __n1 = __i2 - __i1;
 return _M_replace(__i1 - begin(), __n1, __s._M_data(),
     __s.size());
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
     _CharT __c)
    {
      _M_check_length(__n1, __n2, "basic_string::_M_replace_aux");

      const size_type __old_size = this->size();
      const size_type __new_size = __old_size + __n2 - __n1;

      if (__new_size <= this->capacity())
 {
   pointer __p = this->_M_data() + __pos1;

   const size_type __how_much = __old_size - __pos1 - __n1;
   if (__how_much && __n1 != __n2)
     this->_S_move(__p + __n2, __p + __n1, __how_much);
 }
      else
 this->_M_mutate(__pos1, __n1, 0, __n2);

      if (__n2)
 this->_S_assign(this->_M_data() + __pos1, __n2, __c);

      this->_M_set_length(__new_size);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace(size_type __pos, size_type __len1, const _CharT* __s,
        const size_type __len2)
    {
      _M_check_length(__len1, __len2, "basic_string::_M_replace");

      const size_type __old_size = this->size();
      const size_type __new_size = __old_size + __len2 - __len1;

      if (__new_size <= this->capacity())
 {
   pointer __p = this->_M_data() + __pos;

   const size_type __how_much = __old_size - __pos - __len1;
   if (_M_disjunct(__s))
     {
       if (__how_much && __len1 != __len2)
  this->_S_move(__p + __len2, __p + __len1, __how_much);
       if (__len2)
  this->_S_copy(__p, __s, __len2);
     }
   else
     {

       if (__len2 && __len2 <= __len1)
  this->_S_move(__p, __s, __len2);
       if (__how_much && __len1 != __len2)
  this->_S_move(__p + __len2, __p + __len1, __how_much);
       if (__len2 > __len1)
  {
    if (__s + __len2 <= __p + __len1)
      this->_S_move(__p, __s, __len2);
    else if (__s >= __p + __len1)
      this->_S_copy(__p, __s + __len2 - __len1, __len2);
    else
      {
        const size_type __nleft = (__p + __len1) - __s;
        this->_S_move(__p, __s, __nleft);
        this->_S_copy(__p + __nleft, __p + __len2,
        __len2 - __nleft);
      }
  }
     }
 }
      else
 this->_M_mutate(__pos, __len1, __s, __len2);

      this->_M_set_length(__new_size);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    copy(_CharT* __s, size_type __n, size_type __pos) const
    {
      _M_check(__pos, "basic_string::copy");
      __n = _M_limit(__pos, __n);
      ;
      if (__n)
 _S_copy(__s, _M_data() + __pos, __n);

      return __n;
    }
# 1150 "/usr/include/c++/10/bits/basic_string.tcc" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      ;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 rebind<_CharT>::other _Char_alloc_type;
      typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;
      const __size_type __len = _Traits::length(__lhs);
      __string_type __str(_Alloc_traits::_S_select_on_copy(
          __rhs.get_allocator()));
      __str.reserve(__len + __rhs.size());
      __str.append(__lhs, __len);
      __str.append(__rhs);
      return __str;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 rebind<_CharT>::other _Char_alloc_type;
      typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;
      __string_type __str(_Alloc_traits::_S_select_on_copy(
          __rhs.get_allocator()));
      const __size_type __len = __rhs.size();
      __str.reserve(__len + 1);
      __str.append(__size_type(1), __lhs);
      __str.append(__rhs);
      return __str;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
      ;
      const size_type __size = this->size();

      if (__n == 0)
 return __pos <= __size ? __pos : npos;
      if (__pos >= __size)
 return npos;

      const _CharT __elem0 = __s[0];
      const _CharT* const __data = data();
      const _CharT* __first = __data + __pos;
      const _CharT* const __last = __data + __size;
      size_type __len = __size - __pos;

      while (__len >= __n)
 {

   __first = traits_type::find(__first, __len - __n + 1, __elem0);
   if (!__first)
     return npos;



   if (traits_type::compare(__first, __s, __n) == 0)
     return __first - __data;
   __len = __last - ++__first;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(_CharT __c, size_type __pos) const noexcept
    {
      size_type __ret = npos;
      const size_type __size = this->size();
      if (__pos < __size)
 {
   const _CharT* __data = _M_data();
   const size_type __n = __size - __pos;
   const _CharT* __p = traits_type::find(__data + __pos, __n, __c);
   if (__p)
     __ret = __p - __data;
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
      ;
      const size_type __size = this->size();
      if (__n <= __size)
 {
   __pos = std::min(size_type(__size - __n), __pos);
   const _CharT* __data = _M_data();
   do
     {
       if (traits_type::compare(__data + __pos, __s, __n) == 0)
  return __pos;
     }
   while (__pos-- > 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(_CharT __c, size_type __pos) const noexcept
    {
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   for (++__size; __size-- > 0; )
     if (traits_type::eq(_M_data()[__size], __c))
       return __size;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_of(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
      ;
      for (; __n && __pos < this->size(); ++__pos)
 {
   const _CharT* __p = traits_type::find(__s, __n, _M_data()[__pos]);
   if (__p)
     return __pos;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_of(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
      ;
      size_type __size = this->size();
      if (__size && __n)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (traits_type::find(__s, __n, _M_data()[__size]))
  return __size;
     }
   while (__size-- != 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
      ;
      for (; __pos < this->size(); ++__pos)
 if (!traits_type::find(__s, __n, _M_data()[__pos]))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(_CharT __c, size_type __pos) const noexcept
    {
      for (; __pos < this->size(); ++__pos)
 if (!traits_type::eq(_M_data()[__pos], __c))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
      ;
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::find(__s, __n, _M_data()[__size]))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(_CharT __c, size_type __pos) const noexcept
    {
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::eq(_M_data()[__size], __c))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n, const basic_string& __str) const
    {
      _M_check(__pos, "basic_string::compare");
      __n = _M_limit(__pos, __n);
      const size_type __osize = __str.size();
      const size_type __len = std::min(__n, __osize);
      int __r = traits_type::compare(_M_data() + __pos, __str.data(), __len);
      if (!__r)
 __r = _S_compare(__n, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(size_type __pos1, size_type __n1, const basic_string& __str,
     size_type __pos2, size_type __n2) const
    {
      _M_check(__pos1, "basic_string::compare");
      __str._M_check(__pos2, "basic_string::compare");
      __n1 = _M_limit(__pos1, __n1);
      __n2 = __str._M_limit(__pos2, __n2);
      const size_type __len = std::min(__n1, __n2);
      int __r = traits_type::compare(_M_data() + __pos1,
         __str.data() + __pos2, __len);
      if (!__r)
 __r = _S_compare(__n1, __n2);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(const _CharT* __s) const noexcept
    {
      ;
      const size_type __size = this->size();
      const size_type __osize = traits_type::length(__s);
      const size_type __len = std::min(__size, __osize);
      int __r = traits_type::compare(_M_data(), __s, __len);
      if (!__r)
 __r = _S_compare(__size, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string <_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n1, const _CharT* __s) const
    {
      ;
      _M_check(__pos, "basic_string::compare");
      __n1 = _M_limit(__pos, __n1);
      const size_type __osize = traits_type::length(__s);
      const size_type __len = std::min(__n1, __osize);
      int __r = traits_type::compare(_M_data() + __pos, __s, __len);
      if (!__r)
 __r = _S_compare(__n1, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string <_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n1, const _CharT* __s,
     size_type __n2) const
    {
      ;
      _M_check(__pos, "basic_string::compare");
      __n1 = _M_limit(__pos, __n1);
      const size_type __len = std::min(__n1, __n2);
      int __r = traits_type::compare(_M_data() + __pos, __s, __len);
      if (!__r)
 __r = _S_compare(__n1, __n2);
      return __r;
    }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in,
        basic_string<_CharT, _Traits, _Alloc>& __str)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __istream_type::ios_base __ios_base;
      typedef typename __istream_type::int_type __int_type;
      typedef typename __string_type::size_type __size_type;
      typedef ctype<_CharT> __ctype_type;
      typedef typename __ctype_type::ctype_base __ctype_base;

      __size_type __extracted = 0;
      typename __ios_base::iostate __err = __ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   try
     {

       __str.erase();
       _CharT __buf[128];
       __size_type __len = 0;
       const streamsize __w = __in.width();
       const __size_type __n = __w > 0 ? static_cast<__size_type>(__w)
                                : __str.max_size();
       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
       const __int_type __eof = _Traits::eof();
       __int_type __c = __in.rdbuf()->sgetc();

       while (__extracted < __n
       && !_Traits::eq_int_type(__c, __eof)
       && !__ct.is(__ctype_base::space,
     _Traits::to_char_type(__c)))
  {
    if (__len == sizeof(__buf) / sizeof(_CharT))
      {
        __str.append(__buf, sizeof(__buf) / sizeof(_CharT));
        __len = 0;
      }
    __buf[__len++] = _Traits::to_char_type(__c);
    ++__extracted;
    __c = __in.rdbuf()->snextc();
  }
       __str.append(__buf, __len);

       if (_Traits::eq_int_type(__c, __eof))
  __err |= __ios_base::eofbit;
       __in.width(0);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(__ios_base::badbit);
       throw;
     }
   catch(...)
     {



       __in._M_setstate(__ios_base::badbit);
     }
 }

      if (!__extracted)
 __err |= __ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __in,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __istream_type::ios_base __ios_base;
      typedef typename __istream_type::int_type __int_type;
      typedef typename __string_type::size_type __size_type;

      __size_type __extracted = 0;
      const __size_type __n = __str.max_size();
      typename __ios_base::iostate __err = __ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, true);
      if (__cerb)
 {
   try
     {
       __str.erase();
       const __int_type __idelim = _Traits::to_int_type(__delim);
       const __int_type __eof = _Traits::eof();
       __int_type __c = __in.rdbuf()->sgetc();

       while (__extracted < __n
       && !_Traits::eq_int_type(__c, __eof)
       && !_Traits::eq_int_type(__c, __idelim))
  {
    __str += _Traits::to_char_type(__c);
    ++__extracted;
    __c = __in.rdbuf()->snextc();
  }

       if (_Traits::eq_int_type(__c, __eof))
  __err |= __ios_base::eofbit;
       else if (_Traits::eq_int_type(__c, __idelim))
  {
    ++__extracted;
    __in.rdbuf()->sbumpc();
  }
       else
  __err |= __ios_base::failbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(__ios_base::badbit);
       throw;
     }
   catch(...)
     {



       __in._M_setstate(__ios_base::badbit);
     }
 }
      if (!__extracted)
 __err |= __ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }
# 1610 "/usr/include/c++/10/bits/basic_string.tcc" 3
  extern template class basic_string<char>;







  extern template
    basic_istream<char>&
    operator>>(basic_istream<char>&, string&);
  extern template
    basic_ostream<char>&
    operator<<(basic_ostream<char>&, const string&);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&, char);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&);



  extern template class basic_string<wchar_t>;





  extern template
    basic_istream<wchar_t>&
    operator>>(basic_istream<wchar_t>&, wstring&);
  extern template
    basic_ostream<wchar_t>&
    operator<<(basic_ostream<wchar_t>&, const wstring&);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&, wchar_t);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&);




}
# 57 "/usr/include/c++/10/string" 2 3
# 67 "/usr/include/wx-3.1-unofficial/wx/stringimpl.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/afterstd.h" 1
# 68 "/usr/include/wx-3.1-unofficial/wx/stringimpl.h" 2


    
# 70 "/usr/include/wx-3.1-unofficial/wx/stringimpl.h"
   typedef std::wstring wxStdWideString;





    typedef wxStdWideString wxStdString;
# 90 "/usr/include/wx-3.1-unofficial/wx/stringimpl.h"
    typedef wxStdString wxStringImpl;
# 16 "/usr/include/wx-3.1-unofficial/wx/unichar.h" 2





# 1 "/usr/include/c++/10/algorithm" 1 3
# 58 "/usr/include/c++/10/algorithm" 3
       
# 59 "/usr/include/c++/10/algorithm" 3

# 1 "/usr/include/c++/10/utility" 1 3
# 58 "/usr/include/c++/10/utility" 3
       
# 59 "/usr/include/c++/10/utility" 3
# 69 "/usr/include/c++/10/utility" 3
# 1 "/usr/include/c++/10/bits/stl_relops.h" 1 3
# 67 "/usr/include/c++/10/bits/stl_relops.h" 3

# 67 "/usr/include/c++/10/bits/stl_relops.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  namespace rel_ops
  {
# 85 "/usr/include/c++/10/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator!=(const _Tp& __x, const _Tp& __y)
      { return !(__x == __y); }
# 98 "/usr/include/c++/10/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator>(const _Tp& __x, const _Tp& __y)
      { return __y < __x; }
# 111 "/usr/include/c++/10/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator<=(const _Tp& __x, const _Tp& __y)
      { return !(__y < __x); }
# 124 "/usr/include/c++/10/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator>=(const _Tp& __x, const _Tp& __y)
      { return !(__x < __y); }
  }


}
# 70 "/usr/include/c++/10/utility" 2 3
# 82 "/usr/include/c++/10/utility" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Tp>
    struct tuple_size;





  template<typename _Tp,
    typename _Up = typename remove_cv<_Tp>::type,
    typename = typename enable_if<is_same<_Tp, _Up>::value>::type,
    size_t = tuple_size<_Tp>::value>
    using __enable_if_has_tuple_size = _Tp;

  template<typename _Tp>
    struct tuple_size<const __enable_if_has_tuple_size<_Tp>>
    : public tuple_size<_Tp> { };

  template<typename _Tp>
    struct tuple_size<volatile __enable_if_has_tuple_size<_Tp>>
    : public tuple_size<_Tp> { };

  template<typename _Tp>
    struct tuple_size<const volatile __enable_if_has_tuple_size<_Tp>>
    : public tuple_size<_Tp> { };


  template<std::size_t __i, typename _Tp>
    struct tuple_element;


  template<std::size_t __i, typename _Tp>
    using __tuple_element_t = typename tuple_element<__i, _Tp>::type;

  template<std::size_t __i, typename _Tp>
    struct tuple_element<__i, const _Tp>
    {
      typedef typename add_const<__tuple_element_t<__i, _Tp>>::type type;
    };

  template<std::size_t __i, typename _Tp>
    struct tuple_element<__i, volatile _Tp>
    {
      typedef typename add_volatile<__tuple_element_t<__i, _Tp>>::type type;
    };

  template<std::size_t __i, typename _Tp>
    struct tuple_element<__i, const volatile _Tp>
    {
      typedef typename add_cv<__tuple_element_t<__i, _Tp>>::type type;
    };







  template<std::size_t __i, typename _Tp>
    using tuple_element_t = typename tuple_element<__i, _Tp>::type;





  template<typename _T1, typename _T2>
    struct __is_tuple_like_impl<std::pair<_T1, _T2>> : true_type
    { };


  template<class _Tp1, class _Tp2>
    struct tuple_size<std::pair<_Tp1, _Tp2>>
    : public integral_constant<std::size_t, 2> { };


  template<class _Tp1, class _Tp2>
    struct tuple_element<0, std::pair<_Tp1, _Tp2>>
    { typedef _Tp1 type; };


  template<class _Tp1, class _Tp2>
    struct tuple_element<1, std::pair<_Tp1, _Tp2>>
    { typedef _Tp2 type; };

  template<std::size_t _Int>
    struct __pair_get;

  template<>
    struct __pair_get<0>
    {
      template<typename _Tp1, typename _Tp2>
        static constexpr _Tp1&
        __get(std::pair<_Tp1, _Tp2>& __pair) noexcept
        { return __pair.first; }

      template<typename _Tp1, typename _Tp2>
        static constexpr _Tp1&&
        __move_get(std::pair<_Tp1, _Tp2>&& __pair) noexcept
        { return std::forward<_Tp1>(__pair.first); }

      template<typename _Tp1, typename _Tp2>
        static constexpr const _Tp1&
        __const_get(const std::pair<_Tp1, _Tp2>& __pair) noexcept
        { return __pair.first; }

      template<typename _Tp1, typename _Tp2>
        static constexpr const _Tp1&&
        __const_move_get(const std::pair<_Tp1, _Tp2>&& __pair) noexcept
        { return std::forward<const _Tp1>(__pair.first); }
    };

  template<>
    struct __pair_get<1>
    {
      template<typename _Tp1, typename _Tp2>
        static constexpr _Tp2&
        __get(std::pair<_Tp1, _Tp2>& __pair) noexcept
        { return __pair.second; }

      template<typename _Tp1, typename _Tp2>
        static constexpr _Tp2&&
        __move_get(std::pair<_Tp1, _Tp2>&& __pair) noexcept
        { return std::forward<_Tp2>(__pair.second); }

      template<typename _Tp1, typename _Tp2>
        static constexpr const _Tp2&
        __const_get(const std::pair<_Tp1, _Tp2>& __pair) noexcept
        { return __pair.second; }

      template<typename _Tp1, typename _Tp2>
        static constexpr const _Tp2&&
        __const_move_get(const std::pair<_Tp1, _Tp2>&& __pair) noexcept
        { return std::forward<const _Tp2>(__pair.second); }
    };

  template<std::size_t _Int, class _Tp1, class _Tp2>
    constexpr typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&
    get(std::pair<_Tp1, _Tp2>& __in) noexcept
    { return __pair_get<_Int>::__get(__in); }

  template<std::size_t _Int, class _Tp1, class _Tp2>
    constexpr typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&&
    get(std::pair<_Tp1, _Tp2>&& __in) noexcept
    { return __pair_get<_Int>::__move_get(std::move(__in)); }

  template<std::size_t _Int, class _Tp1, class _Tp2>
    constexpr const typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&
    get(const std::pair<_Tp1, _Tp2>& __in) noexcept
    { return __pair_get<_Int>::__const_get(__in); }

  template<std::size_t _Int, class _Tp1, class _Tp2>
    constexpr const typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&&
    get(const std::pair<_Tp1, _Tp2>&& __in) noexcept
    { return __pair_get<_Int>::__const_move_get(std::move(__in)); }





  template <typename _Tp, typename _Up>
    constexpr _Tp&
    get(pair<_Tp, _Up>& __p) noexcept
    { return __p.first; }

  template <typename _Tp, typename _Up>
    constexpr const _Tp&
    get(const pair<_Tp, _Up>& __p) noexcept
    { return __p.first; }

  template <typename _Tp, typename _Up>
    constexpr _Tp&&
    get(pair<_Tp, _Up>&& __p) noexcept
    { return std::move(__p.first); }

  template <typename _Tp, typename _Up>
    constexpr const _Tp&&
    get(const pair<_Tp, _Up>&& __p) noexcept
    { return std::move(__p.first); }

  template <typename _Tp, typename _Up>
    constexpr _Tp&
    get(pair<_Up, _Tp>& __p) noexcept
    { return __p.second; }

  template <typename _Tp, typename _Up>
    constexpr const _Tp&
    get(const pair<_Up, _Tp>& __p) noexcept
    { return __p.second; }

  template <typename _Tp, typename _Up>
    constexpr _Tp&&
    get(pair<_Up, _Tp>&& __p) noexcept
    { return std::move(__p.second); }

  template <typename _Tp, typename _Up>
    constexpr const _Tp&&
    get(const pair<_Up, _Tp>&& __p) noexcept
    { return std::move(__p.second); }




  template <typename _Tp, typename _Up = _Tp>
   
    inline _Tp
    exchange(_Tp& __obj, _Up&& __new_val)
    { return std::__exchange(__obj, std::forward<_Up>(__new_val)); }





  template<size_t... _Indexes> struct _Index_tuple { };
# 307 "/usr/include/c++/10/utility" 3
  template<size_t _Num>
    struct _Build_index_tuple
    {






      using __type = _Index_tuple<__integer_pack(_Num)...>;

    };






  template<typename _Tp, _Tp... _Idx>
    struct integer_sequence
    {
      typedef _Tp value_type;
      static constexpr size_t size() noexcept { return sizeof...(_Idx); }
    };


  template<typename _Tp, _Tp _Num>
    using make_integer_sequence



      = integer_sequence<_Tp, __integer_pack(_Num)...>;





  template<size_t... _Idx>
    using index_sequence = integer_sequence<size_t, _Idx...>;


  template<size_t _Num>
    using make_index_sequence = make_integer_sequence<size_t, _Num>;


  template<typename... _Types>
    using index_sequence_for = make_index_sequence<sizeof...(_Types)>;
# 473 "/usr/include/c++/10/utility" 3

}
# 61 "/usr/include/c++/10/algorithm" 2 3

# 1 "/usr/include/c++/10/bits/stl_algo.h" 1 3
# 59 "/usr/include/c++/10/bits/stl_algo.h" 3
# 1 "/usr/include/c++/10/cstdlib" 1 3
# 39 "/usr/include/c++/10/cstdlib" 3
       
# 40 "/usr/include/c++/10/cstdlib" 3
# 60 "/usr/include/c++/10/bits/stl_algo.h" 2 3
# 1 "/usr/include/c++/10/bits/algorithmfwd.h" 1 3
# 33 "/usr/include/c++/10/bits/algorithmfwd.h" 3
       
# 34 "/usr/include/c++/10/bits/algorithmfwd.h" 3
# 42 "/usr/include/c++/10/bits/algorithmfwd.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 199 "/usr/include/c++/10/bits/algorithmfwd.h" 3
  template<typename _IIter, typename _Predicate>
   
    bool
    all_of(_IIter, _IIter, _Predicate);

  template<typename _IIter, typename _Predicate>
   
    bool
    any_of(_IIter, _IIter, _Predicate);


  template<typename _FIter, typename _Tp>
   
    bool
    binary_search(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
   
    bool
    binary_search(_FIter, _FIter, const _Tp&, _Compare);
# 232 "/usr/include/c++/10/bits/algorithmfwd.h" 3
  template<typename _IIter, typename _OIter>
   
    _OIter
    copy(_IIter, _IIter, _OIter);

  template<typename _BIter1, typename _BIter2>
   
    _BIter2
    copy_backward(_BIter1, _BIter1, _BIter2);


  template<typename _IIter, typename _OIter, typename _Predicate>
   
    _OIter
    copy_if(_IIter, _IIter, _OIter, _Predicate);

  template<typename _IIter, typename _Size, typename _OIter>
   
    _OIter
    copy_n(_IIter, _Size, _OIter);





  template<typename _FIter, typename _Tp>
   
    pair<_FIter, _FIter>
    equal_range(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
   
    pair<_FIter, _FIter>
    equal_range(_FIter, _FIter, const _Tp&, _Compare);

  template<typename _FIter, typename _Tp>
   
    void
    fill(_FIter, _FIter, const _Tp&);

  template<typename _OIter, typename _Size, typename _Tp>
   
    _OIter
    fill_n(_OIter, _Size, const _Tp&);



  template<typename _FIter1, typename _FIter2>
   
    _FIter1
    find_end(_FIter1, _FIter1, _FIter2, _FIter2);

  template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>
   
    _FIter1
    find_end(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);





  template<typename _IIter, typename _Predicate>
   
    _IIter
    find_if_not(_IIter, _IIter, _Predicate);






  template<typename _IIter1, typename _IIter2>
   
    bool
    includes(_IIter1, _IIter1, _IIter2, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _Compare>
   
    bool
    includes(_IIter1, _IIter1, _IIter2, _IIter2, _Compare);

  template<typename _BIter>
    void
    inplace_merge(_BIter, _BIter, _BIter);

  template<typename _BIter, typename _Compare>
    void
    inplace_merge(_BIter, _BIter, _BIter, _Compare);


  template<typename _RAIter>
   
    bool
    is_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
   
    bool
    is_heap(_RAIter, _RAIter, _Compare);

  template<typename _RAIter>
   
    _RAIter
    is_heap_until(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
   
    _RAIter
    is_heap_until(_RAIter, _RAIter, _Compare);

  template<typename _IIter, typename _Predicate>
   
    bool
    is_partitioned(_IIter, _IIter, _Predicate);

  template<typename _FIter1, typename _FIter2>
   
    bool
    is_permutation(_FIter1, _FIter1, _FIter2);

  template<typename _FIter1, typename _FIter2,
    typename _BinaryPredicate>
   
    bool
    is_permutation(_FIter1, _FIter1, _FIter2, _BinaryPredicate);

  template<typename _FIter>
   
    bool
    is_sorted(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
   
    bool
    is_sorted(_FIter, _FIter, _Compare);

  template<typename _FIter>
   
    _FIter
    is_sorted_until(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
   
    _FIter
    is_sorted_until(_FIter, _FIter, _Compare);


  template<typename _FIter1, typename _FIter2>
   
    void
    iter_swap(_FIter1, _FIter2);

  template<typename _FIter, typename _Tp>
   
    _FIter
    lower_bound(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
   
    _FIter
    lower_bound(_FIter, _FIter, const _Tp&, _Compare);

  template<typename _RAIter>
   
    void
    make_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
   
    void
    make_heap(_RAIter, _RAIter, _Compare);

  template<typename _Tp>
    constexpr
    const _Tp&
    max(const _Tp&, const _Tp&);

  template<typename _Tp, typename _Compare>
    constexpr
    const _Tp&
    max(const _Tp&, const _Tp&, _Compare);




  template<typename _Tp>
    constexpr
    const _Tp&
    min(const _Tp&, const _Tp&);

  template<typename _Tp, typename _Compare>
    constexpr
    const _Tp&
    min(const _Tp&, const _Tp&, _Compare);




  template<typename _Tp>
    constexpr
    pair<const _Tp&, const _Tp&>
    minmax(const _Tp&, const _Tp&);

  template<typename _Tp, typename _Compare>
    constexpr
    pair<const _Tp&, const _Tp&>
    minmax(const _Tp&, const _Tp&, _Compare);

  template<typename _FIter>
    constexpr
    pair<_FIter, _FIter>
    minmax_element(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
    constexpr
    pair<_FIter, _FIter>
    minmax_element(_FIter, _FIter, _Compare);

  template<typename _Tp>
    constexpr
    _Tp
    min(initializer_list<_Tp>);

  template<typename _Tp, typename _Compare>
    constexpr
    _Tp
    min(initializer_list<_Tp>, _Compare);

  template<typename _Tp>
    constexpr
    _Tp
    max(initializer_list<_Tp>);

  template<typename _Tp, typename _Compare>
    constexpr
    _Tp
    max(initializer_list<_Tp>, _Compare);

  template<typename _Tp>
    constexpr
    pair<_Tp, _Tp>
    minmax(initializer_list<_Tp>);

  template<typename _Tp, typename _Compare>
    constexpr
    pair<_Tp, _Tp>
    minmax(initializer_list<_Tp>, _Compare);




  template<typename _BIter>
   
    bool
    next_permutation(_BIter, _BIter);

  template<typename _BIter, typename _Compare>
   
    bool
    next_permutation(_BIter, _BIter, _Compare);


  template<typename _IIter, typename _Predicate>
   
    bool
    none_of(_IIter, _IIter, _Predicate);





  template<typename _IIter, typename _RAIter>
   
    _RAIter
    partial_sort_copy(_IIter, _IIter, _RAIter, _RAIter);

  template<typename _IIter, typename _RAIter, typename _Compare>
   
    _RAIter
    partial_sort_copy(_IIter, _IIter, _RAIter, _RAIter, _Compare);




  template<typename _IIter, typename _OIter1,
    typename _OIter2, typename _Predicate>
   
    pair<_OIter1, _OIter2>
    partition_copy(_IIter, _IIter, _OIter1, _OIter2, _Predicate);

  template<typename _FIter, typename _Predicate>
   
    _FIter
    partition_point(_FIter, _FIter, _Predicate);


  template<typename _RAIter>
   
    void
    pop_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
   
    void
    pop_heap(_RAIter, _RAIter, _Compare);

  template<typename _BIter>
   
    bool
    prev_permutation(_BIter, _BIter);

  template<typename _BIter, typename _Compare>
   
    bool
    prev_permutation(_BIter, _BIter, _Compare);

  template<typename _RAIter>
   
    void
    push_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
   
    void
    push_heap(_RAIter, _RAIter, _Compare);



  template<typename _FIter, typename _Tp>
   
    _FIter
    remove(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Predicate>
   
    _FIter
    remove_if(_FIter, _FIter, _Predicate);

  template<typename _IIter, typename _OIter, typename _Tp>
   
    _OIter
    remove_copy(_IIter, _IIter, _OIter, const _Tp&);

  template<typename _IIter, typename _OIter, typename _Predicate>
   
    _OIter
    remove_copy_if(_IIter, _IIter, _OIter, _Predicate);



  template<typename _IIter, typename _OIter, typename _Tp>
   
    _OIter
    replace_copy(_IIter, _IIter, _OIter, const _Tp&, const _Tp&);

  template<typename _Iter, typename _OIter, typename _Predicate, typename _Tp>
   
    _OIter
    replace_copy_if(_Iter, _Iter, _OIter, _Predicate, const _Tp&);



  template<typename _BIter>
   
    void
    reverse(_BIter, _BIter);

  template<typename _BIter, typename _OIter>
   
    _OIter
    reverse_copy(_BIter, _BIter, _OIter);

  inline namespace _V2
  {
    template<typename _FIter>
     
      _FIter
      rotate(_FIter, _FIter, _FIter);
  }

  template<typename _FIter, typename _OIter>
   
    _OIter
    rotate_copy(_FIter, _FIter, _FIter, _OIter);
# 625 "/usr/include/c++/10/bits/algorithmfwd.h" 3
  template<typename _RAIter, typename _UGenerator>
    void
    shuffle(_RAIter, _RAIter, _UGenerator&&);


  template<typename _RAIter>
   
    void
    sort_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
   
    void
    sort_heap(_RAIter, _RAIter, _Compare);

  template<typename _BIter, typename _Predicate>
    _BIter
    stable_partition(_BIter, _BIter, _Predicate);
# 658 "/usr/include/c++/10/bits/algorithmfwd.h" 3
  template<typename _FIter1, typename _FIter2>
   
    _FIter2
    swap_ranges(_FIter1, _FIter1, _FIter2);



  template<typename _FIter>
   
    _FIter
    unique(_FIter, _FIter);

  template<typename _FIter, typename _BinaryPredicate>
   
    _FIter
    unique(_FIter, _FIter, _BinaryPredicate);



  template<typename _FIter, typename _Tp>
   
    _FIter
    upper_bound(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
   
    _FIter
    upper_bound(_FIter, _FIter, const _Tp&, _Compare);



  template<typename _FIter>
   
    _FIter
    adjacent_find(_FIter, _FIter);

  template<typename _FIter, typename _BinaryPredicate>
   
    _FIter
    adjacent_find(_FIter, _FIter, _BinaryPredicate);

  template<typename _IIter, typename _Tp>
   
    typename iterator_traits<_IIter>::difference_type
    count(_IIter, _IIter, const _Tp&);

  template<typename _IIter, typename _Predicate>
   
    typename iterator_traits<_IIter>::difference_type
    count_if(_IIter, _IIter, _Predicate);

  template<typename _IIter1, typename _IIter2>
   
    bool
    equal(_IIter1, _IIter1, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
   
    bool
    equal(_IIter1, _IIter1, _IIter2, _BinaryPredicate);

  template<typename _IIter, typename _Tp>
   
    _IIter
    find(_IIter, _IIter, const _Tp&);

  template<typename _FIter1, typename _FIter2>
   
    _FIter1
    find_first_of(_FIter1, _FIter1, _FIter2, _FIter2);

  template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>
   
    _FIter1
    find_first_of(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);

  template<typename _IIter, typename _Predicate>
   
    _IIter
    find_if(_IIter, _IIter, _Predicate);

  template<typename _IIter, typename _Funct>
   
    _Funct
    for_each(_IIter, _IIter, _Funct);

  template<typename _FIter, typename _Generator>
   
    void
    generate(_FIter, _FIter, _Generator);

  template<typename _OIter, typename _Size, typename _Generator>
   
    _OIter
    generate_n(_OIter, _Size, _Generator);

  template<typename _IIter1, typename _IIter2>
   
    bool
    lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _Compare>
   
    bool
    lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2, _Compare);

  template<typename _FIter>
    constexpr
    _FIter
    max_element(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
    constexpr
    _FIter
    max_element(_FIter, _FIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
   
    _OIter
    merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
   
    _OIter
    merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _FIter>
    constexpr
    _FIter
    min_element(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
    constexpr
    _FIter
    min_element(_FIter, _FIter, _Compare);

  template<typename _IIter1, typename _IIter2>
   
    pair<_IIter1, _IIter2>
    mismatch(_IIter1, _IIter1, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
   
    pair<_IIter1, _IIter2>
    mismatch(_IIter1, _IIter1, _IIter2, _BinaryPredicate);

  template<typename _RAIter>
   
    void
    nth_element(_RAIter, _RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
   
    void
    nth_element(_RAIter, _RAIter, _RAIter, _Compare);

  template<typename _RAIter>
   
    void
    partial_sort(_RAIter, _RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
   
    void
    partial_sort(_RAIter, _RAIter, _RAIter, _Compare);

  template<typename _BIter, typename _Predicate>
   
    _BIter
    partition(_BIter, _BIter, _Predicate);

  template<typename _RAIter>
    void
    random_shuffle(_RAIter, _RAIter);

  template<typename _RAIter, typename _Generator>
    void
    random_shuffle(_RAIter, _RAIter,

     _Generator&&);




  template<typename _FIter, typename _Tp>
   
    void
    replace(_FIter, _FIter, const _Tp&, const _Tp&);

  template<typename _FIter, typename _Predicate, typename _Tp>
   
    void
    replace_if(_FIter, _FIter, _Predicate, const _Tp&);

  template<typename _FIter1, typename _FIter2>
   
    _FIter1
    search(_FIter1, _FIter1, _FIter2, _FIter2);

  template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>
   
    _FIter1
    search(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);

  template<typename _FIter, typename _Size, typename _Tp>
   
    _FIter
    search_n(_FIter, _FIter, _Size, const _Tp&);

  template<typename _FIter, typename _Size, typename _Tp,
    typename _BinaryPredicate>
   
    _FIter
    search_n(_FIter, _FIter, _Size, const _Tp&, _BinaryPredicate);

  template<typename _IIter1, typename _IIter2, typename _OIter>
   
    _OIter
    set_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
   
    _OIter
    set_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
   
    _OIter
    set_intersection(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
   
    _OIter
    set_intersection(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
   
    _OIter
    set_symmetric_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
   
    _OIter
    set_symmetric_difference(_IIter1, _IIter1, _IIter2, _IIter2,
        _OIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
   
    _OIter
    set_union(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
   
    _OIter
    set_union(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _RAIter>
   
    void
    sort(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
   
    void
    sort(_RAIter, _RAIter, _Compare);

  template<typename _RAIter>
    void
    stable_sort(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    stable_sort(_RAIter, _RAIter, _Compare);

  template<typename _IIter, typename _OIter, typename _UnaryOperation>
   
    _OIter
    transform(_IIter, _IIter, _OIter, _UnaryOperation);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _BinaryOperation>
   
    _OIter
    transform(_IIter1, _IIter1, _IIter2, _OIter, _BinaryOperation);

  template<typename _IIter, typename _OIter>
   
    _OIter
    unique_copy(_IIter, _IIter, _OIter);

  template<typename _IIter, typename _OIter, typename _BinaryPredicate>
   
    _OIter
    unique_copy(_IIter, _IIter, _OIter, _BinaryPredicate);



}
# 61 "/usr/include/c++/10/bits/stl_algo.h" 2 3
# 1 "/usr/include/c++/10/bits/stl_heap.h" 1 3
# 62 "/usr/include/c++/10/bits/stl_heap.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename _RandomAccessIterator, typename _Distance,
    typename _Compare>
   
    _Distance
    __is_heap_until(_RandomAccessIterator __first, _Distance __n,
      _Compare& __comp)
    {
      _Distance __parent = 0;
      for (_Distance __child = 1; __child < __n; ++__child)
 {
   if (__comp(__first + __parent, __first + __child))
     return __child;
   if ((__child & 1) == 0)
     ++__parent;
 }
      return __n;
    }



  template<typename _RandomAccessIterator, typename _Distance>
   
    inline bool
    __is_heap(_RandomAccessIterator __first, _Distance __n)
    {
      __gnu_cxx::__ops::_Iter_less_iter __comp;
      return std::__is_heap_until(__first, __n, __comp) == __n;
    }

  template<typename _RandomAccessIterator, typename _Compare,
    typename _Distance>
   
    inline bool
    __is_heap(_RandomAccessIterator __first, _Compare __comp, _Distance __n)
    {
      typedef __decltype(__comp) _Cmp;
      __gnu_cxx::__ops::_Iter_comp_iter<_Cmp> __cmp(std::move(__comp));
      return std::__is_heap_until(__first, __n, __cmp) == __n;
    }

  template<typename _RandomAccessIterator>
   
    inline bool
    __is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    { return std::__is_heap(__first, std::distance(__first, __last)); }

  template<typename _RandomAccessIterator, typename _Compare>
   
    inline bool
    __is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {
      return std::__is_heap(__first, std::move(__comp),
       std::distance(__first, __last));
    }




  template<typename _RandomAccessIterator, typename _Distance, typename _Tp,
    typename _Compare>
   
    void
    __push_heap(_RandomAccessIterator __first,
  _Distance __holeIndex, _Distance __topIndex, _Tp __value,
  _Compare& __comp)
    {
      _Distance __parent = (__holeIndex - 1) / 2;
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 {
   *(__first + __holeIndex) = std::move(*(__first + __parent));
   __holeIndex = __parent;
   __parent = (__holeIndex - 1) / 2;
 }
      *(__first + __holeIndex) = std::move(__value);
    }
# 158 "/usr/include/c++/10/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
   
    inline void
    push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;


     

     
      ;
      ;
      ;

      __gnu_cxx::__ops::_Iter_less_val __comp;
      _ValueType __value = std::move(*(__last - 1));
      std::__push_heap(__first, _DistanceType((__last - __first) - 1),
         _DistanceType(0), std::move(__value), __comp);
    }
# 194 "/usr/include/c++/10/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
   
    inline void
    push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;


     

      ;
      ;
      ;

      __decltype(__gnu_cxx::__ops::__iter_comp_val(std::move(__comp)))
 __cmp(std::move(__comp));
      _ValueType __value = std::move(*(__last - 1));
      std::__push_heap(__first, _DistanceType((__last - __first) - 1),
         _DistanceType(0), std::move(__value), __cmp);
    }

  template<typename _RandomAccessIterator, typename _Distance,
    typename _Tp, typename _Compare>
   
    void
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
    _Distance __len, _Tp __value, _Compare __comp)
    {
      const _Distance __topIndex = __holeIndex;
      _Distance __secondChild = __holeIndex;
      while (__secondChild < (__len - 1) / 2)
 {
   __secondChild = 2 * (__secondChild + 1);
   if (__comp(__first + __secondChild,
       __first + (__secondChild - 1)))
     __secondChild--;
   *(__first + __holeIndex) = std::move(*(__first + __secondChild));
   __holeIndex = __secondChild;
 }
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 {
   __secondChild = 2 * (__secondChild + 1);
   *(__first + __holeIndex) = std::move(*(__first + (__secondChild - 1)))
                                  ;
   __holeIndex = __secondChild - 1;
 }
      __decltype(__gnu_cxx::__ops::__iter_comp_val(std::move(__comp)))
 __cmp(std::move(__comp));
      std::__push_heap(__first, __holeIndex, __topIndex,
         std::move(__value), __cmp);
    }

  template<typename _RandomAccessIterator, typename _Compare>
   
    inline void
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
        _RandomAccessIterator __result, _Compare& __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;

      _ValueType __value = std::move(*__result);
      *__result = std::move(*__first);
      std::__adjust_heap(__first, _DistanceType(0),
    _DistanceType(__last - __first),
    std::move(__value), __comp);
    }
# 279 "/usr/include/c++/10/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
   
    inline void
    pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {

     

     

      ;
      ;
      ;
      ;

      if (__last - __first > 1)
 {
   --__last;
   __gnu_cxx::__ops::_Iter_less_iter __comp;
   std::__pop_heap(__first, __last, __last, __comp);
 }
    }
# 313 "/usr/include/c++/10/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
   
    inline void
    pop_heap(_RandomAccessIterator __first,
      _RandomAccessIterator __last, _Compare __comp)
    {

     

      ;
      ;
      ;
      ;

      if (__last - __first > 1)
 {
   typedef __decltype(__comp) _Cmp;
   __gnu_cxx::__ops::_Iter_comp_iter<_Cmp> __cmp(std::move(__comp));
   --__last;
   std::__pop_heap(__first, __last, __last, __cmp);
 }
    }

  template<typename _RandomAccessIterator, typename _Compare>
   
    void
    __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare& __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;

      if (__last - __first < 2)
 return;

      const _DistanceType __len = __last - __first;
      _DistanceType __parent = (__len - 2) / 2;
      while (true)
 {
   _ValueType __value = std::move(*(__first + __parent));
   std::__adjust_heap(__first, __parent, __len, std::move(__value),
        __comp);
   if (__parent == 0)
     return;
   __parent--;
 }
    }
# 371 "/usr/include/c++/10/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
   
    inline void
    make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {

     

     

      ;
      ;

      __gnu_cxx::__ops::_Iter_less_iter __comp;
      std::__make_heap(__first, __last, __comp);
    }
# 398 "/usr/include/c++/10/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
   
    inline void
    make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {

     

      ;
      ;

      typedef __decltype(__comp) _Cmp;
      __gnu_cxx::__ops::_Iter_comp_iter<_Cmp> __cmp(std::move(__comp));
      std::__make_heap(__first, __last, __cmp);
    }

  template<typename _RandomAccessIterator, typename _Compare>
   
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare& __comp)
    {
      while (__last - __first > 1)
 {
   --__last;
   std::__pop_heap(__first, __last, __last, __comp);
 }
    }
# 436 "/usr/include/c++/10/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
   
    inline void
    sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {

     

     

      ;
      ;
      ;

      __gnu_cxx::__ops::_Iter_less_iter __comp;
      std::__sort_heap(__first, __last, __comp);
    }
# 464 "/usr/include/c++/10/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
   
    inline void
    sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {

     

      ;
      ;
      ;

      typedef __decltype(__comp) _Cmp;
      __gnu_cxx::__ops::_Iter_comp_iter<_Cmp> __cmp(std::move(__comp));
      std::__sort_heap(__first, __last, __cmp);
    }
# 493 "/usr/include/c++/10/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
   
    inline _RandomAccessIterator
    is_heap_until(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {

     

     

      ;
      ;

      __gnu_cxx::__ops::_Iter_less_iter __comp;
      return __first +
 std::__is_heap_until(__first, std::distance(__first, __last), __comp);
    }
# 522 "/usr/include/c++/10/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
   
    inline _RandomAccessIterator
    is_heap_until(_RandomAccessIterator __first, _RandomAccessIterator __last,
    _Compare __comp)
    {

     

      ;
      ;

      typedef __decltype(__comp) _Cmp;
      __gnu_cxx::__ops::_Iter_comp_iter<_Cmp> __cmp(std::move(__comp));
      return __first
 + std::__is_heap_until(__first, std::distance(__first, __last), __cmp);
    }
# 547 "/usr/include/c++/10/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
   
    inline bool
    is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    { return std::is_heap_until(__first, __last) == __last; }
# 561 "/usr/include/c++/10/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
   
    inline bool
    is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
     _Compare __comp)
    {

     

      ;
      ;

      const auto __dist = std::distance(__first, __last);
      typedef __decltype(__comp) _Cmp;
      __gnu_cxx::__ops::_Iter_comp_iter<_Cmp> __cmp(std::move(__comp));
      return std::__is_heap_until(__first, __dist, __cmp) == __dist;
    }



}
# 62 "/usr/include/c++/10/bits/stl_algo.h" 2 3
# 1 "/usr/include/c++/10/bits/stl_tempbuf.h" 1 3
# 62 "/usr/include/c++/10/bits/stl_tempbuf.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  namespace __detail
  {
    template<typename _Tp>
      inline void
      __return_temporary_buffer(_Tp* __p,
    size_t __len __attribute__((__unused__)))
      {

 ::operator delete(__p, __len * sizeof(_Tp));



      }
  }
# 98 "/usr/include/c++/10/bits/stl_tempbuf.h" 3
  template<typename _Tp>
    pair<_Tp*, ptrdiff_t>
    get_temporary_buffer(ptrdiff_t __len) noexcept
    {
      const ptrdiff_t __max =
 __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
      if (__len > __max)
 __len = __max;

      while (__len > 0)
 {
   _Tp* __tmp = static_cast<_Tp*>(::operator new(__len * sizeof(_Tp),
       std::nothrow));
   if (__tmp != 0)
     return std::pair<_Tp*, ptrdiff_t>(__tmp, __len);
   __len /= 2;
 }
      return std::pair<_Tp*, ptrdiff_t>(static_cast<_Tp*>(0), 0);
    }
# 125 "/usr/include/c++/10/bits/stl_tempbuf.h" 3
  template<typename _Tp>
    inline void
    return_temporary_buffer(_Tp* __p)
    { ::operator delete(__p); }






  template<typename _ForwardIterator, typename _Tp>
    class _Temporary_buffer
    {

     

    public:
      typedef _Tp value_type;
      typedef value_type* pointer;
      typedef pointer iterator;
      typedef ptrdiff_t size_type;

    protected:
      size_type _M_original_len;
      size_type _M_len;
      pointer _M_buffer;

    public:

      size_type
      size() const
      { return _M_len; }


      size_type
      requested_size() const
      { return _M_original_len; }


      iterator
      begin()
      { return _M_buffer; }


      iterator
      end()
      { return _M_buffer + _M_len; }





      _Temporary_buffer(_ForwardIterator __seed, size_type __original_len);

      ~_Temporary_buffer()
      {
 std::_Destroy(_M_buffer, _M_buffer + _M_len);
 std::__detail::__return_temporary_buffer(_M_buffer, _M_len);
      }

    private:

      _Temporary_buffer(const _Temporary_buffer&);

      void
      operator=(const _Temporary_buffer&);
    };


  template<bool>
    struct __uninitialized_construct_buf_dispatch
    {
      template<typename _Pointer, typename _ForwardIterator>
        static void
        __ucr(_Pointer __first, _Pointer __last,
       _ForwardIterator __seed)
        {
   if (__first == __last)
     return;

   _Pointer __cur = __first;
   try
     {
       std::_Construct(std::__addressof(*__first),
         std::move(*__seed));
       _Pointer __prev = __cur;
       ++__cur;
       for(; __cur != __last; ++__cur, ++__prev)
  std::_Construct(std::__addressof(*__cur),
    std::move(*__prev));
       *__seed = std::move(*__prev);
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_construct_buf_dispatch<true>
    {
      template<typename _Pointer, typename _ForwardIterator>
        static void
        __ucr(_Pointer, _Pointer, _ForwardIterator) { }
    };
# 243 "/usr/include/c++/10/bits/stl_tempbuf.h" 3
  template<typename _Pointer, typename _ForwardIterator>
    inline void
    __uninitialized_construct_buf(_Pointer __first, _Pointer __last,
      _ForwardIterator __seed)
    {
      typedef typename std::iterator_traits<_Pointer>::value_type
 _ValueType;

      std::__uninitialized_construct_buf_dispatch<
        __has_trivial_constructor(_ValueType)>::
   __ucr(__first, __last, __seed);
    }

  template<typename _ForwardIterator, typename _Tp>
    _Temporary_buffer<_ForwardIterator, _Tp>::
    _Temporary_buffer(_ForwardIterator __seed, size_type __original_len)
    : _M_original_len(__original_len), _M_len(0), _M_buffer(0)
    {
      std::pair<pointer, size_type> __p(
  std::get_temporary_buffer<value_type>(_M_original_len));

      if (__p.first)
 {
   try
     {
       std::__uninitialized_construct_buf(__p.first, __p.first + __p.second,
       __seed);
       _M_buffer = __p.first;
       _M_len = __p.second;
     }
   catch(...)
     {
       std::__detail::__return_temporary_buffer(__p.first, __p.second);
       throw;
     }
 }
    }


}
# 63 "/usr/include/c++/10/bits/stl_algo.h" 2 3



# 1 "/usr/include/c++/10/bits/uniform_int_dist.h" 1 3
# 35 "/usr/include/c++/10/bits/uniform_int_dist.h" 3
# 1 "/usr/include/c++/10/limits" 1 3
# 40 "/usr/include/c++/10/limits" 3
       
# 41 "/usr/include/c++/10/limits" 3
# 158 "/usr/include/c++/10/limits" 3
namespace std __attribute__ ((__visibility__ ("default")))
{







  enum float_round_style
  {
    round_indeterminate = -1,
    round_toward_zero = 0,
    round_to_nearest = 1,
    round_toward_infinity = 2,
    round_toward_neg_infinity = 3
  };







  enum float_denorm_style
  {

    denorm_indeterminate = -1,

    denorm_absent = 0,

    denorm_present = 1
  };
# 202 "/usr/include/c++/10/limits" 3
  struct __numeric_limits_base
  {


    static constexpr bool is_specialized = false;




    static constexpr int digits = 0;


    static constexpr int digits10 = 0;




    static constexpr int max_digits10 = 0;



    static constexpr bool is_signed = false;


    static constexpr bool is_integer = false;




    static constexpr bool is_exact = false;



    static constexpr int radix = 0;



    static constexpr int min_exponent = 0;



    static constexpr int min_exponent10 = 0;




    static constexpr int max_exponent = 0;



    static constexpr int max_exponent10 = 0;


    static constexpr bool has_infinity = false;



    static constexpr bool has_quiet_NaN = false;



    static constexpr bool has_signaling_NaN = false;


    static constexpr float_denorm_style has_denorm = denorm_absent;



    static constexpr bool has_denorm_loss = false;



    static constexpr bool is_iec559 = false;




    static constexpr bool is_bounded = false;
# 288 "/usr/include/c++/10/limits" 3
    static constexpr bool is_modulo = false;


    static constexpr bool traps = false;


    static constexpr bool tinyness_before = false;




    static constexpr float_round_style round_style =
          round_toward_zero;
  };
# 311 "/usr/include/c++/10/limits" 3
  template<typename _Tp>
    struct numeric_limits : public __numeric_limits_base
    {


      static constexpr _Tp
      min() noexcept { return _Tp(); }


      static constexpr _Tp
      max() noexcept { return _Tp(); }




      static constexpr _Tp
      lowest() noexcept { return _Tp(); }




      static constexpr _Tp
      epsilon() noexcept { return _Tp(); }


      static constexpr _Tp
      round_error() noexcept { return _Tp(); }


      static constexpr _Tp
      infinity() noexcept { return _Tp(); }



      static constexpr _Tp
      quiet_NaN() noexcept { return _Tp(); }



      static constexpr _Tp
      signaling_NaN() noexcept { return _Tp(); }




      static constexpr _Tp
      denorm_min() noexcept { return _Tp(); }
    };




  template<typename _Tp>
    struct numeric_limits<const _Tp>
    : public numeric_limits<_Tp> { };

  template<typename _Tp>
    struct numeric_limits<volatile _Tp>
    : public numeric_limits<_Tp> { };

  template<typename _Tp>
    struct numeric_limits<const volatile _Tp>
    : public numeric_limits<_Tp> { };
# 383 "/usr/include/c++/10/limits" 3
  template<>
    struct numeric_limits<bool>
    {
      static constexpr bool is_specialized = true;

      static constexpr bool
      min() noexcept { return false; }

      static constexpr bool
      max() noexcept { return true; }


      static constexpr bool
      lowest() noexcept { return min(); }

      static constexpr int digits = 1;
      static constexpr int digits10 = 0;

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr bool
      epsilon() noexcept { return false; }

      static constexpr bool
      round_error() noexcept { return false; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr bool
      infinity() noexcept { return false; }

      static constexpr bool
      quiet_NaN() noexcept { return false; }

      static constexpr bool
      signaling_NaN() noexcept { return false; }

      static constexpr bool
      denorm_min() noexcept { return false; }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;




      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<char>
    {
      static constexpr bool is_specialized = true;

      static constexpr char
      min() noexcept { return (((char)(-1) < 0) ? -(((char)(-1) < 0) ? (((((char)1 << ((sizeof(char) * 8 - ((char)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char)0) - 1 : (char)0); }

      static constexpr char
      max() noexcept { return (((char)(-1) < 0) ? (((((char)1 << ((sizeof(char) * 8 - ((char)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char)0); }


      static constexpr char
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(char) * 8 - ((char)(-1) < 0));
      static constexpr int digits10 = ((sizeof(char) * 8 - ((char)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = ((char)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr char
      epsilon() noexcept { return 0; }

      static constexpr char
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr
      char infinity() noexcept { return char(); }

      static constexpr char
      quiet_NaN() noexcept { return char(); }

      static constexpr char
      signaling_NaN() noexcept { return char(); }

      static constexpr char
      denorm_min() noexcept { return static_cast<char>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = !is_signed;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<signed char>
    {
      static constexpr bool is_specialized = true;

      static constexpr signed char
      min() noexcept { return -0x7f - 1; }

      static constexpr signed char
      max() noexcept { return 0x7f; }


      static constexpr signed char
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(signed char) * 8 - ((signed char)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(signed char) * 8 - ((signed char)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr signed char
      epsilon() noexcept { return 0; }

      static constexpr signed char
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr signed char
      infinity() noexcept { return static_cast<signed char>(0); }

      static constexpr signed char
      quiet_NaN() noexcept { return static_cast<signed char>(0); }

      static constexpr signed char
      signaling_NaN() noexcept
      { return static_cast<signed char>(0); }

      static constexpr signed char
      denorm_min() noexcept
      { return static_cast<signed char>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned char>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned char
      min() noexcept { return 0; }

      static constexpr unsigned char
      max() noexcept { return 0x7f * 2U + 1; }


      static constexpr unsigned char
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(unsigned char) * 8 - ((unsigned char)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned char) * 8 - ((unsigned char)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned char
      epsilon() noexcept { return 0; }

      static constexpr unsigned char
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned char
      infinity() noexcept
      { return static_cast<unsigned char>(0); }

      static constexpr unsigned char
      quiet_NaN() noexcept
      { return static_cast<unsigned char>(0); }

      static constexpr unsigned char
      signaling_NaN() noexcept
      { return static_cast<unsigned char>(0); }

      static constexpr unsigned char
      denorm_min() noexcept
      { return static_cast<unsigned char>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<wchar_t>
    {
      static constexpr bool is_specialized = true;

      static constexpr wchar_t
      min() noexcept { return (((wchar_t)(-1) < 0) ? -(((wchar_t)(-1) < 0) ? (((((wchar_t)1 << ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(wchar_t)0) - 1 : (wchar_t)0); }

      static constexpr wchar_t
      max() noexcept { return (((wchar_t)(-1) < 0) ? (((((wchar_t)1 << ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(wchar_t)0); }


      static constexpr wchar_t
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = ((wchar_t)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr wchar_t
      epsilon() noexcept { return 0; }

      static constexpr wchar_t
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr wchar_t
      infinity() noexcept { return wchar_t(); }

      static constexpr wchar_t
      quiet_NaN() noexcept { return wchar_t(); }

      static constexpr wchar_t
      signaling_NaN() noexcept { return wchar_t(); }

      static constexpr wchar_t
      denorm_min() noexcept { return wchar_t(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = !is_signed;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };
# 796 "/usr/include/c++/10/limits" 3
  template<>
    struct numeric_limits<char16_t>
    {
      static constexpr bool is_specialized = true;

      static constexpr char16_t
      min() noexcept { return (((char16_t)(-1) < 0) ? -(((char16_t)(-1) < 0) ? (((((char16_t)1 << ((sizeof(char16_t) * 8 - ((char16_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char16_t)0) - 1 : (char16_t)0); }

      static constexpr char16_t
      max() noexcept { return (((char16_t)(-1) < 0) ? (((((char16_t)1 << ((sizeof(char16_t) * 8 - ((char16_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char16_t)0); }

      static constexpr char16_t
      lowest() noexcept { return min(); }

      static constexpr int digits = (sizeof(char16_t) * 8 - ((char16_t)(-1) < 0));
      static constexpr int digits10 = ((sizeof(char16_t) * 8 - ((char16_t)(-1) < 0)) * 643L / 2136);
      static constexpr int max_digits10 = 0;
      static constexpr bool is_signed = ((char16_t)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr char16_t
      epsilon() noexcept { return 0; }

      static constexpr char16_t
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr char16_t
      infinity() noexcept { return char16_t(); }

      static constexpr char16_t
      quiet_NaN() noexcept { return char16_t(); }

      static constexpr char16_t
      signaling_NaN() noexcept { return char16_t(); }

      static constexpr char16_t
      denorm_min() noexcept { return char16_t(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = !is_signed;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style = round_toward_zero;
    };


  template<>
    struct numeric_limits<char32_t>
    {
      static constexpr bool is_specialized = true;

      static constexpr char32_t
      min() noexcept { return (((char32_t)(-1) < 0) ? -(((char32_t)(-1) < 0) ? (((((char32_t)1 << ((sizeof(char32_t) * 8 - ((char32_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char32_t)0) - 1 : (char32_t)0); }

      static constexpr char32_t
      max() noexcept { return (((char32_t)(-1) < 0) ? (((((char32_t)1 << ((sizeof(char32_t) * 8 - ((char32_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char32_t)0); }

      static constexpr char32_t
      lowest() noexcept { return min(); }

      static constexpr int digits = (sizeof(char32_t) * 8 - ((char32_t)(-1) < 0));
      static constexpr int digits10 = ((sizeof(char32_t) * 8 - ((char32_t)(-1) < 0)) * 643L / 2136);
      static constexpr int max_digits10 = 0;
      static constexpr bool is_signed = ((char32_t)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr char32_t
      epsilon() noexcept { return 0; }

      static constexpr char32_t
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr char32_t
      infinity() noexcept { return char32_t(); }

      static constexpr char32_t
      quiet_NaN() noexcept { return char32_t(); }

      static constexpr char32_t
      signaling_NaN() noexcept { return char32_t(); }

      static constexpr char32_t
      denorm_min() noexcept { return char32_t(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = !is_signed;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style = round_toward_zero;
    };



  template<>
    struct numeric_limits<short>
    {
      static constexpr bool is_specialized = true;

      static constexpr short
      min() noexcept { return -0x7fff - 1; }

      static constexpr short
      max() noexcept { return 0x7fff; }


      static constexpr short
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(short) * 8 - ((short)(-1) < 0));
      static constexpr int digits10 = ((sizeof(short) * 8 - ((short)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr short
      epsilon() noexcept { return 0; }

      static constexpr short
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr short
      infinity() noexcept { return short(); }

      static constexpr short
      quiet_NaN() noexcept { return short(); }

      static constexpr short
      signaling_NaN() noexcept { return short(); }

      static constexpr short
      denorm_min() noexcept { return short(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned short>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned short
      min() noexcept { return 0; }

      static constexpr unsigned short
      max() noexcept { return 0x7fff * 2U + 1; }


      static constexpr unsigned short
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(unsigned short) * 8 - ((unsigned short)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned short) * 8 - ((unsigned short)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned short
      epsilon() noexcept { return 0; }

      static constexpr unsigned short
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned short
      infinity() noexcept
      { return static_cast<unsigned short>(0); }

      static constexpr unsigned short
      quiet_NaN() noexcept
      { return static_cast<unsigned short>(0); }

      static constexpr unsigned short
      signaling_NaN() noexcept
      { return static_cast<unsigned short>(0); }

      static constexpr unsigned short
      denorm_min() noexcept
      { return static_cast<unsigned short>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<int>
    {
      static constexpr bool is_specialized = true;

      static constexpr int
      min() noexcept { return -0x7fffffff - 1; }

      static constexpr int
      max() noexcept { return 0x7fffffff; }


      static constexpr int
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(int) * 8 - ((int)(-1) < 0));
      static constexpr int digits10 = ((sizeof(int) * 8 - ((int)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr int
      epsilon() noexcept { return 0; }

      static constexpr int
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr int
      infinity() noexcept { return static_cast<int>(0); }

      static constexpr int
      quiet_NaN() noexcept { return static_cast<int>(0); }

      static constexpr int
      signaling_NaN() noexcept { return static_cast<int>(0); }

      static constexpr int
      denorm_min() noexcept { return static_cast<int>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned int>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned int
      min() noexcept { return 0; }

      static constexpr unsigned int
      max() noexcept { return 0x7fffffff * 2U + 1; }


      static constexpr unsigned int
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(unsigned int) * 8 - ((unsigned int)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned int) * 8 - ((unsigned int)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned int
      epsilon() noexcept { return 0; }

      static constexpr unsigned int
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned int
      infinity() noexcept { return static_cast<unsigned int>(0); }

      static constexpr unsigned int
      quiet_NaN() noexcept
      { return static_cast<unsigned int>(0); }

      static constexpr unsigned int
      signaling_NaN() noexcept
      { return static_cast<unsigned int>(0); }

      static constexpr unsigned int
      denorm_min() noexcept
      { return static_cast<unsigned int>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<long>
    {
      static constexpr bool is_specialized = true;

      static constexpr long
      min() noexcept { return -0x7fffffffffffffffL - 1; }

      static constexpr long
      max() noexcept { return 0x7fffffffffffffffL; }


      static constexpr long
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(long) * 8 - ((long)(-1) < 0));
      static constexpr int digits10 = ((sizeof(long) * 8 - ((long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr long
      epsilon() noexcept { return 0; }

      static constexpr long
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr long
      infinity() noexcept { return static_cast<long>(0); }

      static constexpr long
      quiet_NaN() noexcept { return static_cast<long>(0); }

      static constexpr long
      signaling_NaN() noexcept { return static_cast<long>(0); }

      static constexpr long
      denorm_min() noexcept { return static_cast<long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned long>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned long
      min() noexcept { return 0; }

      static constexpr unsigned long
      max() noexcept { return 0x7fffffffffffffffL * 2UL + 1; }


      static constexpr unsigned long
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(unsigned long) * 8 - ((unsigned long)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned long) * 8 - ((unsigned long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned long
      epsilon() noexcept { return 0; }

      static constexpr unsigned long
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned long
      infinity() noexcept
      { return static_cast<unsigned long>(0); }

      static constexpr unsigned long
      quiet_NaN() noexcept
      { return static_cast<unsigned long>(0); }

      static constexpr unsigned long
      signaling_NaN() noexcept
      { return static_cast<unsigned long>(0); }

      static constexpr unsigned long
      denorm_min() noexcept
      { return static_cast<unsigned long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<long long>
    {
      static constexpr bool is_specialized = true;

      static constexpr long long
      min() noexcept { return -0x7fffffffffffffffLL - 1; }

      static constexpr long long
      max() noexcept { return 0x7fffffffffffffffLL; }


      static constexpr long long
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(long long) * 8 - ((long long)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(long long) * 8 - ((long long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr long long
      epsilon() noexcept { return 0; }

      static constexpr long long
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr long long
      infinity() noexcept { return static_cast<long long>(0); }

      static constexpr long long
      quiet_NaN() noexcept { return static_cast<long long>(0); }

      static constexpr long long
      signaling_NaN() noexcept
      { return static_cast<long long>(0); }

      static constexpr long long
      denorm_min() noexcept { return static_cast<long long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned long long>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned long long
      min() noexcept { return 0; }

      static constexpr unsigned long long
      max() noexcept { return 0x7fffffffffffffffLL * 2ULL + 1; }


      static constexpr unsigned long long
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(unsigned long long) * 8 - ((unsigned long long)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned long long) * 8 - ((unsigned long long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned long long
      epsilon() noexcept { return 0; }

      static constexpr unsigned long long
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned long long
      infinity() noexcept
      { return static_cast<unsigned long long>(0); }

      static constexpr unsigned long long
      quiet_NaN() noexcept
      { return static_cast<unsigned long long>(0); }

      static constexpr unsigned long long
      signaling_NaN() noexcept
      { return static_cast<unsigned long long>(0); }

      static constexpr unsigned long long
      denorm_min() noexcept
      { return static_cast<unsigned long long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };
# 1635 "/usr/include/c++/10/limits" 3
  template<> struct numeric_limits<__int128> { static constexpr bool is_specialized = true; static constexpr __int128 min() noexcept { return (((__int128)(-1) < 0) ? -(((__int128)(-1) < 0) ? (((((__int128)1 << ((128 - ((__int128)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(__int128)0) - 1 : (__int128)0); } static constexpr __int128 max() noexcept { return (((__int128)(-1) < 0) ? (((((__int128)1 << ((128 - ((__int128)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(__int128)0); } static constexpr int digits = 128 - 1; static constexpr int digits10 = (128 - 1) * 643L / 2136; static constexpr bool is_signed = true; static constexpr bool is_integer = true; static constexpr bool is_exact = true; static constexpr int radix = 2; static constexpr __int128 epsilon() noexcept { return 0; } static constexpr __int128 round_error() noexcept { return 0; } static constexpr __int128 lowest() noexcept { return min(); } static constexpr int max_digits10 = 0; static constexpr int min_exponent = 0; static constexpr int min_exponent10 = 0; static constexpr int max_exponent = 0; static constexpr int max_exponent10 = 0; static constexpr bool has_infinity = false; static constexpr bool has_quiet_NaN = false; static constexpr bool has_signaling_NaN = false; static constexpr float_denorm_style has_denorm = denorm_absent; static constexpr bool has_denorm_loss = false; static constexpr __int128 infinity() noexcept { return static_cast<__int128>(0); } static constexpr __int128 quiet_NaN() noexcept { return static_cast<__int128>(0); } static constexpr __int128 signaling_NaN() noexcept { return static_cast<__int128>(0); } static constexpr __int128 denorm_min() noexcept { return static_cast<__int128>(0); } static constexpr bool is_iec559 = false; static constexpr bool is_bounded = true; static constexpr bool is_modulo = false; static constexpr bool traps = true; static constexpr bool tinyness_before = false; static constexpr float_round_style round_style = round_toward_zero; }; template<> struct numeric_limits<unsigned __int128> { static constexpr bool is_specialized = true; static constexpr unsigned __int128 min() noexcept { return 0; } static constexpr unsigned __int128 max() noexcept { return (((unsigned __int128)(-1) < 0) ? (((((unsigned __int128)1 << ((128 - ((unsigned __int128)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(unsigned __int128)0); } static constexpr unsigned __int128 lowest() noexcept { return min(); } static constexpr int max_digits10 = 0; static constexpr int digits = 128; static constexpr int digits10 = 128 * 643L / 2136; static constexpr bool is_signed = false; static constexpr bool is_integer = true; static constexpr bool is_exact = true; static constexpr int radix = 2; static constexpr unsigned __int128 epsilon() noexcept { return 0; } static constexpr unsigned __int128 round_error() noexcept { return 0; } static constexpr int min_exponent = 0; static constexpr int min_exponent10 = 0; static constexpr int max_exponent = 0; static constexpr int max_exponent10 = 0; static constexpr bool has_infinity = false; static constexpr bool has_quiet_NaN = false; static constexpr bool has_signaling_NaN = false; static constexpr float_denorm_style has_denorm = denorm_absent; static constexpr bool has_denorm_loss = false; static constexpr unsigned __int128 infinity() noexcept { return static_cast<unsigned __int128>(0); } static constexpr unsigned __int128 quiet_NaN() noexcept { return static_cast<unsigned __int128>(0); } static constexpr unsigned __int128 signaling_NaN() noexcept { return static_cast<unsigned __int128>(0); } static constexpr unsigned __int128 denorm_min() noexcept { return static_cast<unsigned __int128>(0); } static constexpr bool is_iec559 = false; static constexpr bool is_bounded = true; static constexpr bool is_modulo = true; static constexpr bool traps = true; static constexpr bool tinyness_before = false; static constexpr float_round_style round_style = round_toward_zero; };
# 1663 "/usr/include/c++/10/limits" 3
  template<>
    struct numeric_limits<float>
    {
      static constexpr bool is_specialized = true;

      static constexpr float
      min() noexcept { return 1.17549435082228750796873653722224568e-38F; }

      static constexpr float
      max() noexcept { return 3.40282346638528859811704183484516925e+38F; }


      static constexpr float
      lowest() noexcept { return -3.40282346638528859811704183484516925e+38F; }


      static constexpr int digits = 24;
      static constexpr int digits10 = 6;

      static constexpr int max_digits10
  = (2 + (24) * 643L / 2136);

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = false;
      static constexpr bool is_exact = false;
      static constexpr int radix = 2;

      static constexpr float
      epsilon() noexcept { return 1.19209289550781250000000000000000000e-7F; }

      static constexpr float
      round_error() noexcept { return 0.5F; }

      static constexpr int min_exponent = (-125);
      static constexpr int min_exponent10 = (-37);
      static constexpr int max_exponent = 128;
      static constexpr int max_exponent10 = 38;

      static constexpr bool has_infinity = 1;
      static constexpr bool has_quiet_NaN = 1;
      static constexpr bool has_signaling_NaN = has_quiet_NaN;
      static constexpr float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static constexpr bool has_denorm_loss
       = false;

      static constexpr float
      infinity() noexcept { return __builtin_huge_valf(); }

      static constexpr float
      quiet_NaN() noexcept { return __builtin_nanf(""); }

      static constexpr float
      signaling_NaN() noexcept { return __builtin_nansf(""); }

      static constexpr float
      denorm_min() noexcept { return 1.40129846432481707092372958328991613e-45F; }

      static constexpr bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before
       = false;
      static constexpr float_round_style round_style
       = round_to_nearest;
    };






  template<>
    struct numeric_limits<double>
    {
      static constexpr bool is_specialized = true;

      static constexpr double
      min() noexcept { return double(2.22507385850720138309023271733240406e-308L); }

      static constexpr double
      max() noexcept { return double(1.79769313486231570814527423731704357e+308L); }


      static constexpr double
      lowest() noexcept { return -double(1.79769313486231570814527423731704357e+308L); }


      static constexpr int digits = 53;
      static constexpr int digits10 = 15;

      static constexpr int max_digits10
  = (2 + (53) * 643L / 2136);

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = false;
      static constexpr bool is_exact = false;
      static constexpr int radix = 2;

      static constexpr double
      epsilon() noexcept { return double(2.22044604925031308084726333618164062e-16L); }

      static constexpr double
      round_error() noexcept { return 0.5; }

      static constexpr int min_exponent = (-1021);
      static constexpr int min_exponent10 = (-307);
      static constexpr int max_exponent = 1024;
      static constexpr int max_exponent10 = 308;

      static constexpr bool has_infinity = 1;
      static constexpr bool has_quiet_NaN = 1;
      static constexpr bool has_signaling_NaN = has_quiet_NaN;
      static constexpr float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static constexpr bool has_denorm_loss
        = false;

      static constexpr double
      infinity() noexcept { return __builtin_huge_val(); }

      static constexpr double
      quiet_NaN() noexcept { return __builtin_nan(""); }

      static constexpr double
      signaling_NaN() noexcept { return __builtin_nans(""); }

      static constexpr double
      denorm_min() noexcept { return double(4.94065645841246544176568792868221372e-324L); }

      static constexpr bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before
       = false;
      static constexpr float_round_style round_style
       = round_to_nearest;
    };






  template<>
    struct numeric_limits<long double>
    {
      static constexpr bool is_specialized = true;

      static constexpr long double
      min() noexcept { return 3.36210314311209350626267781732175260e-4932L; }

      static constexpr long double
      max() noexcept { return 1.18973149535723176502126385303097021e+4932L; }


      static constexpr long double
      lowest() noexcept { return -1.18973149535723176502126385303097021e+4932L; }


      static constexpr int digits = 64;
      static constexpr int digits10 = 18;

      static constexpr int max_digits10
  = (2 + (64) * 643L / 2136);

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = false;
      static constexpr bool is_exact = false;
      static constexpr int radix = 2;

      static constexpr long double
      epsilon() noexcept { return 1.08420217248550443400745280086994171e-19L; }

      static constexpr long double
      round_error() noexcept { return 0.5L; }

      static constexpr int min_exponent = (-16381);
      static constexpr int min_exponent10 = (-4931);
      static constexpr int max_exponent = 16384;
      static constexpr int max_exponent10 = 4932;

      static constexpr bool has_infinity = 1;
      static constexpr bool has_quiet_NaN = 1;
      static constexpr bool has_signaling_NaN = has_quiet_NaN;
      static constexpr float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static constexpr bool has_denorm_loss
 = false;

      static constexpr long double
      infinity() noexcept { return __builtin_huge_vall(); }

      static constexpr long double
      quiet_NaN() noexcept { return __builtin_nanl(""); }

      static constexpr long double
      signaling_NaN() noexcept { return __builtin_nansl(""); }

      static constexpr long double
      denorm_min() noexcept { return 3.64519953188247460252840593361941982e-4951L; }

      static constexpr bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before =
      false;
      static constexpr float_round_style round_style =
            round_to_nearest;
    };






}
# 36 "/usr/include/c++/10/bits/uniform_int_dist.h" 2 3




namespace std __attribute__ ((__visibility__ ("default")))
{

# 57 "/usr/include/c++/10/bits/uniform_int_dist.h" 3
  namespace __detail
  {

    template<typename _Tp>
      inline bool
      _Power_of_2(_Tp __x)
      {
 return ((__x - 1) & __x) == 0;
      }
  }






  template<typename _IntType = int>
    class uniform_int_distribution
    {
      static_assert(std::is_integral<_IntType>::value,
      "template argument must be an integral type");

    public:

      typedef _IntType result_type;

      struct param_type
      {
 typedef uniform_int_distribution<_IntType> distribution_type;

 param_type() : param_type(0) { }

 explicit
 param_type(_IntType __a,
     _IntType __b = numeric_limits<_IntType>::max())
 : _M_a(__a), _M_b(__b)
 {
   ;
 }

 result_type
 a() const
 { return _M_a; }

 result_type
 b() const
 { return _M_b; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }

 friend bool
 operator!=(const param_type& __p1, const param_type& __p2)
 { return !(__p1 == __p2); }

      private:
 _IntType _M_a;
 _IntType _M_b;
      };

    public:



      uniform_int_distribution() : uniform_int_distribution(0) { }




      explicit
      uniform_int_distribution(_IntType __a,
          _IntType __b = numeric_limits<_IntType>::max())
      : _M_param(__a, __b)
      { }

      explicit
      uniform_int_distribution(const param_type& __p)
      : _M_param(__p)
      { }






      void
      reset() { }

      result_type
      a() const
      { return _M_param.a(); }

      result_type
      b() const
      { return _M_param.b(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return this->a(); }




      result_type
      max() const
      { return this->b(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
        { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }





      friend bool
      operator==(const uniform_int_distribution& __d1,
   const uniform_int_distribution& __d2)
      { return __d1._M_param == __d2._M_param; }

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;
    };

  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename uniform_int_distribution<_IntType>::result_type
      uniform_int_distribution<_IntType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 typedef typename _UniformRandomNumberGenerator::result_type
   _Gresult_type;
 typedef typename std::make_unsigned<result_type>::type __utype;
 typedef typename std::common_type<_Gresult_type, __utype>::type
   __uctype;

 const __uctype __urngmin = __urng.min();
 const __uctype __urngmax = __urng.max();
 const __uctype __urngrange = __urngmax - __urngmin;
 const __uctype __urange
   = __uctype(__param.b()) - __uctype(__param.a());

 __uctype __ret;

 if (__urngrange > __urange)
   {

     const __uctype __uerange = __urange + 1;
     const __uctype __scaling = __urngrange / __uerange;
     const __uctype __past = __uerange * __scaling;
     do
       __ret = __uctype(__urng()) - __urngmin;
     while (__ret >= __past);
     __ret /= __scaling;
   }
 else if (__urngrange < __urange)
   {
# 287 "/usr/include/c++/10/bits/uniform_int_dist.h" 3
     __uctype __tmp;
     do
       {
  const __uctype __uerngrange = __urngrange + 1;
  __tmp = (__uerngrange * operator()
    (__urng, param_type(0, __urange / __uerngrange)));
  __ret = __tmp + (__uctype(__urng()) - __urngmin);
       }
     while (__ret > __urange || __ret < __tmp);
   }
 else
   __ret = __uctype(__urng()) - __urngmin;

 return __ret + __param.a();
      }


  template<typename _IntType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      uniform_int_distribution<_IntType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __param)
      {

 typedef typename _UniformRandomNumberGenerator::result_type
   _Gresult_type;
 typedef typename std::make_unsigned<result_type>::type __utype;
 typedef typename std::common_type<_Gresult_type, __utype>::type
   __uctype;

 const __uctype __urngmin = __urng.min();
 const __uctype __urngmax = __urng.max();
 const __uctype __urngrange = __urngmax - __urngmin;
 const __uctype __urange
   = __uctype(__param.b()) - __uctype(__param.a());

 __uctype __ret;

 if (__urngrange > __urange)
   {
     if (__detail::_Power_of_2(__urngrange + 1)
  && __detail::_Power_of_2(__urange + 1))
       {
  while (__f != __t)
    {
      __ret = __uctype(__urng()) - __urngmin;
      *__f++ = (__ret & __urange) + __param.a();
    }
       }
     else
       {

  const __uctype __uerange = __urange + 1;
  const __uctype __scaling = __urngrange / __uerange;
  const __uctype __past = __uerange * __scaling;
  while (__f != __t)
    {
      do
        __ret = __uctype(__urng()) - __urngmin;
      while (__ret >= __past);
      *__f++ = __ret / __scaling + __param.a();
    }
       }
   }
 else if (__urngrange < __urange)
   {
# 371 "/usr/include/c++/10/bits/uniform_int_dist.h" 3
     __uctype __tmp;
     while (__f != __t)
       {
  do
    {
      const __uctype __uerngrange = __urngrange + 1;
      __tmp = (__uerngrange * operator()
        (__urng, param_type(0, __urange / __uerngrange)));
      __ret = __tmp + (__uctype(__urng()) - __urngmin);
    }
  while (__ret > __urange || __ret < __tmp);
  *__f++ = __ret;
       }
   }
 else
   while (__f != __t)
     *__f++ = __uctype(__urng()) - __urngmin + __param.a();
      }




}
# 67 "/usr/include/c++/10/bits/stl_algo.h" 2 3




namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Iterator, typename _Compare>
   
    void
    __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
      _Iterator __c, _Compare __comp)
    {
      if (__comp(__a, __b))
 {
   if (__comp(__b, __c))
     std::iter_swap(__result, __b);
   else if (__comp(__a, __c))
     std::iter_swap(__result, __c);
   else
     std::iter_swap(__result, __a);
 }
      else if (__comp(__a, __c))
 std::iter_swap(__result, __a);
      else if (__comp(__b, __c))
 std::iter_swap(__result, __c);
      else
 std::iter_swap(__result, __b);
    }


  template<typename _InputIterator, typename _Predicate>
   
    inline _InputIterator
    __find_if_not(_InputIterator __first, _InputIterator __last,
    _Predicate __pred)
    {
      return std::__find_if(__first, __last,
       __gnu_cxx::__ops::__negate(__pred),
       std::__iterator_category(__first));
    }




  template<typename _InputIterator, typename _Predicate, typename _Distance>
   
    _InputIterator
    __find_if_not_n(_InputIterator __first, _Distance& __len, _Predicate __pred)
    {
      for (; __len; --__len, (void) ++__first)
 if (!__pred(__first))
   break;
      return __first;
    }
# 138 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
   
    _ForwardIterator1
    __search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
      _ForwardIterator2 __first2, _ForwardIterator2 __last2,
      _BinaryPredicate __predicate)
    {

      if (__first1 == __last1 || __first2 == __last2)
 return __first1;


      _ForwardIterator2 __p1(__first2);
      if (++__p1 == __last2)
 return std::__find_if(__first1, __last1,
  __gnu_cxx::__ops::__iter_comp_iter(__predicate, __first2));


      _ForwardIterator1 __current = __first1;

      for (;;)
 {
   __first1 =
     std::__find_if(__first1, __last1,
  __gnu_cxx::__ops::__iter_comp_iter(__predicate, __first2));

   if (__first1 == __last1)
     return __last1;

   _ForwardIterator2 __p = __p1;
   __current = __first1;
   if (++__current == __last1)
     return __last1;

   while (__predicate(__current, __p))
     {
       if (++__p == __last2)
  return __first1;
       if (++__current == __last1)
  return __last1;
     }
   ++__first1;
 }
      return __first1;
    }






  template<typename _ForwardIterator, typename _Integer,
    typename _UnaryPredicate>
   
    _ForwardIterator
    __search_n_aux(_ForwardIterator __first, _ForwardIterator __last,
     _Integer __count, _UnaryPredicate __unary_pred,
     std::forward_iterator_tag)
    {
      __first = std::__find_if(__first, __last, __unary_pred);
      while (__first != __last)
 {
   typename iterator_traits<_ForwardIterator>::difference_type
     __n = __count;
   _ForwardIterator __i = __first;
   ++__i;
   while (__i != __last && __n != 1 && __unary_pred(__i))
     {
       ++__i;
       --__n;
     }
   if (__n == 1)
     return __first;
   if (__i == __last)
     return __last;
   __first = std::__find_if(++__i, __last, __unary_pred);
 }
      return __last;
    }





  template<typename _RandomAccessIter, typename _Integer,
    typename _UnaryPredicate>
   
    _RandomAccessIter
    __search_n_aux(_RandomAccessIter __first, _RandomAccessIter __last,
     _Integer __count, _UnaryPredicate __unary_pred,
     std::random_access_iterator_tag)
    {
      typedef typename std::iterator_traits<_RandomAccessIter>::difference_type
 _DistanceType;

      _DistanceType __tailSize = __last - __first;
      _DistanceType __remainder = __count;

      while (__remainder <= __tailSize)
 {
   __first += __remainder;
   __tailSize -= __remainder;


   _RandomAccessIter __backTrack = __first;
   while (__unary_pred(--__backTrack))
     {
       if (--__remainder == 0)
  return (__first - __count);
     }
   __remainder = __count + 1 - (__first - __backTrack);
 }
      return __last;
    }

  template<typename _ForwardIterator, typename _Integer,
    typename _UnaryPredicate>
   
    _ForwardIterator
    __search_n(_ForwardIterator __first, _ForwardIterator __last,
        _Integer __count,
        _UnaryPredicate __unary_pred)
    {
      if (__count <= 0)
 return __first;

      if (__count == 1)
 return std::__find_if(__first, __last, __unary_pred);

      return std::__search_n_aux(__first, __last, __count, __unary_pred,
     std::__iterator_category(__first));
    }


  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
   
    _ForwardIterator1
    __find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
        _ForwardIterator2 __first2, _ForwardIterator2 __last2,
        forward_iterator_tag, forward_iterator_tag,
        _BinaryPredicate __comp)
    {
      if (__first2 == __last2)
 return __last1;

      _ForwardIterator1 __result = __last1;
      while (1)
 {
   _ForwardIterator1 __new_result
     = std::__search(__first1, __last1, __first2, __last2, __comp);
   if (__new_result == __last1)
     return __result;
   else
     {
       __result = __new_result;
       __first1 = __new_result;
       ++__first1;
     }
 }
    }


  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _BinaryPredicate>
   
    _BidirectionalIterator1
    __find_end(_BidirectionalIterator1 __first1,
        _BidirectionalIterator1 __last1,
        _BidirectionalIterator2 __first2,
        _BidirectionalIterator2 __last2,
        bidirectional_iterator_tag, bidirectional_iterator_tag,
        _BinaryPredicate __comp)
    {

     

     


      typedef reverse_iterator<_BidirectionalIterator1> _RevIterator1;
      typedef reverse_iterator<_BidirectionalIterator2> _RevIterator2;

      _RevIterator1 __rlast1(__first1);
      _RevIterator2 __rlast2(__first2);
      _RevIterator1 __rresult = std::__search(_RevIterator1(__last1), __rlast1,
           _RevIterator2(__last2), __rlast2,
           __comp);

      if (__rresult == __rlast1)
 return __last1;
      else
 {
   _BidirectionalIterator1 __result = __rresult.base();
   std::advance(__result, -std::distance(__first2, __last2));
   return __result;
 }
    }
# 364 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
   
    inline _ForwardIterator1
    find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
      _ForwardIterator2 __first2, _ForwardIterator2 __last2)
    {

     
     
     


      ;
      ;

      return std::__find_end(__first1, __last1, __first2, __last2,
        std::__iterator_category(__first1),
        std::__iterator_category(__first2),
        __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 413 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
   
    inline _ForwardIterator1
    find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
      _ForwardIterator2 __first2, _ForwardIterator2 __last2,
      _BinaryPredicate __comp)
    {

     
     
     


      ;
      ;

      return std::__find_end(__first1, __last1, __first2, __last2,
        std::__iterator_category(__first1),
        std::__iterator_category(__first2),
        __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }
# 449 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
   
    inline bool
    all_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    { return __last == std::find_if_not(__first, __last, __pred); }
# 467 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
   
    inline bool
    none_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    { return __last == std::find_if(__first, __last, __pred); }
# 486 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
   
    inline bool
    any_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    { return !std::none_of(__first, __last, __pred); }
# 502 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
   
    inline _InputIterator
    find_if_not(_InputIterator __first, _InputIterator __last,
  _Predicate __pred)
    {

     
     

      ;
      return std::__find_if_not(__first, __last,
    __gnu_cxx::__ops::__pred_iter(__pred));
    }
# 527 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
   
    inline bool
    is_partitioned(_InputIterator __first, _InputIterator __last,
     _Predicate __pred)
    {
      __first = std::find_if_not(__first, __last, __pred);
      if (__first == __last)
 return true;
      ++__first;
      return std::none_of(__first, __last, __pred);
    }
# 549 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
   
    _ForwardIterator
    partition_point(_ForwardIterator __first, _ForwardIterator __last,
      _Predicate __pred)
    {

     
     



      ;

      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__pred(*__middle))
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else
     __len = __half;
 }
      return __first;
    }


  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate>
   
    _OutputIterator
    __remove_copy_if(_InputIterator __first, _InputIterator __last,
       _OutputIterator __result, _Predicate __pred)
    {
      for (; __first != __last; ++__first)
 if (!__pred(__first))
   {
     *__result = *__first;
     ++__result;
   }
      return __result;
    }
# 616 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator, typename _Tp>
   
    inline _OutputIterator
    remove_copy(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result, const _Tp& __value)
    {

     
     

     

      ;

      return std::__remove_copy_if(__first, __last, __result,
 __gnu_cxx::__ops::__iter_equals_val(__value));
    }
# 649 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate>
   
    inline _OutputIterator
    remove_copy_if(_InputIterator __first, _InputIterator __last,
     _OutputIterator __result, _Predicate __pred)
    {

     
     

     

      ;

      return std::__remove_copy_if(__first, __last, __result,
       __gnu_cxx::__ops::__pred_iter(__pred));
    }
# 684 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate>
   
    _OutputIterator
    copy_if(_InputIterator __first, _InputIterator __last,
     _OutputIterator __result, _Predicate __pred)
    {

     
     

     

      ;

      for (; __first != __last; ++__first)
 if (__pred(*__first))
   {
     *__result = *__first;
     ++__result;
   }
      return __result;
    }

  template<typename _InputIterator, typename _Size, typename _OutputIterator>
   
    _OutputIterator
    __copy_n_a(_InputIterator __first, _Size __n, _OutputIterator __result)
    {
      if (__n > 0)
 {
   while (true)
     {
       *__result = *__first;
       ++__result;
       if (--__n > 0)
  ++__first;
       else
  break;
     }
 }
      return __result;
    }

  template<typename _CharT, typename _Size>
    __enable_if_t<__is_char<_CharT>::__value, _CharT*>
    __copy_n_a(istreambuf_iterator<_CharT, char_traits<_CharT>>,
        _Size, _CharT*);

  template<typename _InputIterator, typename _Size, typename _OutputIterator>
   
    _OutputIterator
    __copy_n(_InputIterator __first, _Size __n,
      _OutputIterator __result, input_iterator_tag)
    {
      return std::__niter_wrap(__result,
          __copy_n_a(__first, __n,
       std::__niter_base(__result)));
    }

  template<typename _RandomAccessIterator, typename _Size,
    typename _OutputIterator>
   
    inline _OutputIterator
    __copy_n(_RandomAccessIterator __first, _Size __n,
      _OutputIterator __result, random_access_iterator_tag)
    { return std::copy(__first, __first + __n, __result); }
# 765 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Size, typename _OutputIterator>
   
    inline _OutputIterator
    copy_n(_InputIterator __first, _Size __n, _OutputIterator __result)
    {

     
     

      ;
      ;

      return std::__copy_n(__first, __n, __result,
      std::__iterator_category(__first));
    }
# 796 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator1,
    typename _OutputIterator2, typename _Predicate>
   
    pair<_OutputIterator1, _OutputIterator2>
    partition_copy(_InputIterator __first, _InputIterator __last,
     _OutputIterator1 __out_true, _OutputIterator2 __out_false,
     _Predicate __pred)
    {

     
     

     

     

      ;

      for (; __first != __last; ++__first)
 if (__pred(*__first))
   {
     *__out_true = *__first;
     ++__out_true;
   }
 else
   {
     *__out_false = *__first;
     ++__out_false;
   }

      return pair<_OutputIterator1, _OutputIterator2>(__out_true, __out_false);
    }


  template<typename _ForwardIterator, typename _Predicate>
   
    _ForwardIterator
    __remove_if(_ForwardIterator __first, _ForwardIterator __last,
  _Predicate __pred)
    {
      __first = std::__find_if(__first, __last, __pred);
      if (__first == __last)
 return __first;
      _ForwardIterator __result = __first;
      ++__first;
      for (; __first != __last; ++__first)
 if (!__pred(__first))
   {
     *__result = std::move(*__first);
     ++__result;
   }
      return __result;
    }
# 867 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
   
    inline _ForwardIterator
    remove(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __value)
    {

     

     

      ;

      return std::__remove_if(__first, __last,
  __gnu_cxx::__ops::__iter_equals_val(__value));
    }
# 901 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
   
    inline _ForwardIterator
    remove_if(_ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred)
    {

     

     

      ;

      return std::__remove_if(__first, __last,
         __gnu_cxx::__ops::__pred_iter(__pred));
    }

  template<typename _ForwardIterator, typename _BinaryPredicate>
   
    _ForwardIterator
    __adjacent_find(_ForwardIterator __first, _ForwardIterator __last,
      _BinaryPredicate __binary_pred)
    {
      if (__first == __last)
 return __last;
      _ForwardIterator __next = __first;
      while (++__next != __last)
 {
   if (__binary_pred(__first, __next))
     return __first;
   __first = __next;
 }
      return __last;
    }

  template<typename _ForwardIterator, typename _BinaryPredicate>
   
    _ForwardIterator
    __unique(_ForwardIterator __first, _ForwardIterator __last,
      _BinaryPredicate __binary_pred)
    {

      __first = std::__adjacent_find(__first, __last, __binary_pred);
      if (__first == __last)
 return __last;


      _ForwardIterator __dest = __first;
      ++__first;
      while (++__first != __last)
 if (!__binary_pred(__dest, __first))
   *++__dest = std::move(*__first);
      return ++__dest;
    }
# 970 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
   
    inline _ForwardIterator
    unique(_ForwardIterator __first, _ForwardIterator __last)
    {

     

     

      ;

      return std::__unique(__first, __last,
      __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 1001 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _BinaryPredicate>
   
    inline _ForwardIterator
    unique(_ForwardIterator __first, _ForwardIterator __last,
    _BinaryPredicate __binary_pred)
    {

     

     


      ;

      return std::__unique(__first, __last,
      __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
    }







  template<typename _ForwardIterator, typename _OutputIterator,
    typename _BinaryPredicate>
   
    _OutputIterator
    __unique_copy(_ForwardIterator __first, _ForwardIterator __last,
    _OutputIterator __result, _BinaryPredicate __binary_pred,
    forward_iterator_tag, output_iterator_tag)
    {

     



      _ForwardIterator __next = __first;
      *__result = *__first;
      while (++__next != __last)
 if (!__binary_pred(__first, __next))
   {
     __first = __next;
     *++__result = *__first;
   }
      return ++__result;
    }







  template<typename _InputIterator, typename _OutputIterator,
    typename _BinaryPredicate>
   
    _OutputIterator
    __unique_copy(_InputIterator __first, _InputIterator __last,
    _OutputIterator __result, _BinaryPredicate __binary_pred,
    input_iterator_tag, output_iterator_tag)
    {

     



      typename iterator_traits<_InputIterator>::value_type __value = *__first;
      __decltype(__gnu_cxx::__ops::__iter_comp_val(__binary_pred))
 __rebound_pred
 = __gnu_cxx::__ops::__iter_comp_val(__binary_pred);
      *__result = __value;
      while (++__first != __last)
 if (!__rebound_pred(__first, __value))
   {
     __value = *__first;
     *++__result = __value;
   }
      return ++__result;
    }







  template<typename _InputIterator, typename _ForwardIterator,
    typename _BinaryPredicate>
   
    _ForwardIterator
    __unique_copy(_InputIterator __first, _InputIterator __last,
    _ForwardIterator __result, _BinaryPredicate __binary_pred,
    input_iterator_tag, forward_iterator_tag)
    {

     


      *__result = *__first;
      while (++__first != __last)
 if (!__binary_pred(__result, __first))
   *++__result = *__first;
      return ++__result;
    }






  template<typename _BidirectionalIterator>
   
    void
    __reverse(_BidirectionalIterator __first, _BidirectionalIterator __last,
       bidirectional_iterator_tag)
    {
      while (true)
 if (__first == __last || __first == --__last)
   return;
 else
   {
     std::iter_swap(__first, __last);
     ++__first;
   }
    }






  template<typename _RandomAccessIterator>
   
    void
    __reverse(_RandomAccessIterator __first, _RandomAccessIterator __last,
       random_access_iterator_tag)
    {
      if (__first == __last)
 return;
      --__last;
      while (__first < __last)
 {
   std::iter_swap(__first, __last);
   ++__first;
   --__last;
 }
    }
# 1162 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
   
    inline void
    reverse(_BidirectionalIterator __first, _BidirectionalIterator __last)
    {

     

      ;
      std::__reverse(__first, __last, std::__iterator_category(__first));
    }
# 1190 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _OutputIterator>
   
    _OutputIterator
    reverse_copy(_BidirectionalIterator __first, _BidirectionalIterator __last,
   _OutputIterator __result)
    {

     

     

      ;

      while (__first != __last)
 {
   --__last;
   *__result = *__last;
   ++__result;
 }
      return __result;
    }





  template<typename _EuclideanRingElement>
   
    _EuclideanRingElement
    __gcd(_EuclideanRingElement __m, _EuclideanRingElement __n)
    {
      while (__n != 0)
 {
   _EuclideanRingElement __t = __m % __n;
   __m = __n;
   __n = __t;
 }
      return __m;
    }

  inline namespace _V2
  {


  template<typename _ForwardIterator>
   
    _ForwardIterator
    __rotate(_ForwardIterator __first,
      _ForwardIterator __middle,
      _ForwardIterator __last,
      forward_iterator_tag)
    {
      if (__first == __middle)
 return __last;
      else if (__last == __middle)
 return __first;

      _ForwardIterator __first2 = __middle;
      do
 {
   std::iter_swap(__first, __first2);
   ++__first;
   ++__first2;
   if (__first == __middle)
     __middle = __first2;
 }
      while (__first2 != __last);

      _ForwardIterator __ret = __first;

      __first2 = __middle;

      while (__first2 != __last)
 {
   std::iter_swap(__first, __first2);
   ++__first;
   ++__first2;
   if (__first == __middle)
     __middle = __first2;
   else if (__first2 == __last)
     __first2 = __middle;
 }
      return __ret;
    }


  template<typename _BidirectionalIterator>
   
    _BidirectionalIterator
    __rotate(_BidirectionalIterator __first,
      _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
       bidirectional_iterator_tag)
    {

     


      if (__first == __middle)
 return __last;
      else if (__last == __middle)
 return __first;

      std::__reverse(__first, __middle, bidirectional_iterator_tag());
      std::__reverse(__middle, __last, bidirectional_iterator_tag());

      while (__first != __middle && __middle != __last)
 {
   std::iter_swap(__first, --__last);
   ++__first;
 }

      if (__first == __middle)
 {
   std::__reverse(__middle, __last, bidirectional_iterator_tag());
   return __last;
 }
      else
 {
   std::__reverse(__first, __middle, bidirectional_iterator_tag());
   return __first;
 }
    }


  template<typename _RandomAccessIterator>
   
    _RandomAccessIterator
    __rotate(_RandomAccessIterator __first,
      _RandomAccessIterator __middle,
      _RandomAccessIterator __last,
      random_access_iterator_tag)
    {

     


      if (__first == __middle)
 return __last;
      else if (__last == __middle)
 return __first;

      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _Distance;
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;

      _Distance __n = __last - __first;
      _Distance __k = __middle - __first;

      if (__k == __n - __k)
 {
   std::swap_ranges(__first, __middle, __middle);
   return __middle;
 }

      _RandomAccessIterator __p = __first;
      _RandomAccessIterator __ret = __first + (__last - __middle);

      for (;;)
 {
   if (__k < __n - __k)
     {
       if (__is_pod(_ValueType) && __k == 1)
  {
    _ValueType __t = std::move(*__p);
    std::move(__p + 1, __p + __n, __p);
    *(__p + __n - 1) = std::move(__t);
    return __ret;
  }
       _RandomAccessIterator __q = __p + __k;
       for (_Distance __i = 0; __i < __n - __k; ++ __i)
  {
    std::iter_swap(__p, __q);
    ++__p;
    ++__q;
  }
       __n %= __k;
       if (__n == 0)
  return __ret;
       std::swap(__n, __k);
       __k = __n - __k;
     }
   else
     {
       __k = __n - __k;
       if (__is_pod(_ValueType) && __k == 1)
  {
    _ValueType __t = std::move(*(__p + __n - 1));
    std::move_backward(__p, __p + __n - 1, __p + __n);
    *__p = std::move(__t);
    return __ret;
  }
       _RandomAccessIterator __q = __p + __n;
       __p = __q - __k;
       for (_Distance __i = 0; __i < __n - __k; ++ __i)
  {
    --__p;
    --__q;
    std::iter_swap(__p, __q);
  }
       __n %= __k;
       if (__n == 0)
  return __ret;
       std::swap(__n, __k);
     }
 }
    }
# 1422 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
   
    inline _ForwardIterator
    rotate(_ForwardIterator __first, _ForwardIterator __middle,
    _ForwardIterator __last)
    {

     

      ;
      ;

      return std::__rotate(__first, __middle, __last,
      std::__iterator_category(__first));
    }

  }
# 1460 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _OutputIterator>
   
    inline _OutputIterator
    rotate_copy(_ForwardIterator __first, _ForwardIterator __middle,
  _ForwardIterator __last, _OutputIterator __result)
    {

     
     

      ;
      ;

      return std::copy(__first, __middle,
         std::copy(__middle, __last, __result));
    }


  template<typename _ForwardIterator, typename _Predicate>
   
    _ForwardIterator
    __partition(_ForwardIterator __first, _ForwardIterator __last,
  _Predicate __pred, forward_iterator_tag)
    {
      if (__first == __last)
 return __first;

      while (__pred(*__first))
 if (++__first == __last)
   return __first;

      _ForwardIterator __next = __first;

      while (++__next != __last)
 if (__pred(*__next))
   {
     std::iter_swap(__first, __next);
     ++__first;
   }

      return __first;
    }


  template<typename _BidirectionalIterator, typename _Predicate>
   
    _BidirectionalIterator
    __partition(_BidirectionalIterator __first, _BidirectionalIterator __last,
  _Predicate __pred, bidirectional_iterator_tag)
    {
      while (true)
 {
   while (true)
     if (__first == __last)
       return __first;
     else if (__pred(*__first))
       ++__first;
     else
       break;
   --__last;
   while (true)
     if (__first == __last)
       return __first;
     else if (!bool(__pred(*__last)))
       --__last;
     else
       break;
   std::iter_swap(__first, __last);
   ++__first;
 }
    }
# 1540 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Pointer, typename _Predicate,
    typename _Distance>
    _ForwardIterator
    __stable_partition_adaptive(_ForwardIterator __first,
    _ForwardIterator __last,
    _Predicate __pred, _Distance __len,
    _Pointer __buffer,
    _Distance __buffer_size)
    {
      if (__len == 1)
 return __first;

      if (__len <= __buffer_size)
 {
   _ForwardIterator __result1 = __first;
   _Pointer __result2 = __buffer;




   *__result2 = std::move(*__first);
   ++__result2;
   ++__first;
   for (; __first != __last; ++__first)
     if (__pred(__first))
       {
  *__result1 = std::move(*__first);
  ++__result1;
       }
     else
       {
  *__result2 = std::move(*__first);
  ++__result2;
       }

   std::move(__buffer, __result2, __result1);
   return __result1;
 }

      _ForwardIterator __middle = __first;
      std::advance(__middle, __len / 2);
      _ForwardIterator __left_split =
 std::__stable_partition_adaptive(__first, __middle, __pred,
      __len / 2, __buffer,
      __buffer_size);



      _Distance __right_len = __len - __len / 2;
      _ForwardIterator __right_split =
 std::__find_if_not_n(__middle, __right_len, __pred);

      if (__right_len)
 __right_split =
   std::__stable_partition_adaptive(__right_split, __last, __pred,
        __right_len,
        __buffer, __buffer_size);

      return std::rotate(__left_split, __middle, __right_split);
    }

  template<typename _ForwardIterator, typename _Predicate>
    _ForwardIterator
    __stable_partition(_ForwardIterator __first, _ForwardIterator __last,
         _Predicate __pred)
    {
      __first = std::__find_if_not(__first, __last, __pred);

      if (__first == __last)
 return __first;

      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;

      _Temporary_buffer<_ForwardIterator, _ValueType>
 __buf(__first, std::distance(__first, __last));
      return
 std::__stable_partition_adaptive(__first, __last, __pred,
      _DistanceType(__buf.requested_size()),
      __buf.begin(),
      _DistanceType(__buf.size()));
    }
# 1642 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
    inline _ForwardIterator
    stable_partition(_ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred)
    {

     

     

      ;

      return std::__stable_partition(__first, __last,
         __gnu_cxx::__ops::__pred_iter(__pred));
    }


  template<typename _RandomAccessIterator, typename _Compare>
   
    void
    __heap_select(_RandomAccessIterator __first,
    _RandomAccessIterator __middle,
    _RandomAccessIterator __last, _Compare __comp)
    {
      std::__make_heap(__first, __middle, __comp);
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 if (__comp(__i, __first))
   std::__pop_heap(__first, __middle, __i, __comp);
    }



  template<typename _InputIterator, typename _RandomAccessIterator,
    typename _Compare>
   
    _RandomAccessIterator
    __partial_sort_copy(_InputIterator __first, _InputIterator __last,
   _RandomAccessIterator __result_first,
   _RandomAccessIterator __result_last,
   _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _InputValueType;
      typedef iterator_traits<_RandomAccessIterator> _RItTraits;
      typedef typename _RItTraits::difference_type _DistanceType;

      if (__result_first == __result_last)
 return __result_last;
      _RandomAccessIterator __result_real_last = __result_first;
      while (__first != __last && __result_real_last != __result_last)
 {
   *__result_real_last = *__first;
   ++__result_real_last;
   ++__first;
 }

      std::__make_heap(__result_first, __result_real_last, __comp);
      while (__first != __last)
 {
   if (__comp(__first, __result_first))
     std::__adjust_heap(__result_first, _DistanceType(0),
          _DistanceType(__result_real_last
          - __result_first),
          _InputValueType(*__first), __comp);
   ++__first;
 }
      std::__sort_heap(__result_first, __result_real_last, __comp);
      return __result_real_last;
    }
# 1730 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _RandomAccessIterator>
   
    inline _RandomAccessIterator
    partial_sort_copy(_InputIterator __first, _InputIterator __last,
        _RandomAccessIterator __result_first,
        _RandomAccessIterator __result_last)
    {
# 1745 "/usr/include/c++/10/bits/stl_algo.h" 3
     
     

     

     
      ;
      ;
      ;

      return std::__partial_sort_copy(__first, __last,
          __result_first, __result_last,
          __gnu_cxx::__ops::__iter_less_iter());
    }
# 1780 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _RandomAccessIterator,
    typename _Compare>
   
    inline _RandomAccessIterator
    partial_sort_copy(_InputIterator __first, _InputIterator __last,
        _RandomAccessIterator __result_first,
        _RandomAccessIterator __result_last,
        _Compare __comp)
    {
# 1797 "/usr/include/c++/10/bits/stl_algo.h" 3
     
     

     

     

     

      ;
      ;
      ;

      return std::__partial_sort_copy(__first, __last,
          __result_first, __result_last,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }


  template<typename _RandomAccessIterator, typename _Compare>
   
    void
    __unguarded_linear_insert(_RandomAccessIterator __last,
         _Compare __comp)
    {
      typename iterator_traits<_RandomAccessIterator>::value_type
 __val = std::move(*__last);
      _RandomAccessIterator __next = __last;
      --__next;
      while (__comp(__val, __next))
 {
   *__last = std::move(*__next);
   __last = __next;
   --__next;
 }
      *__last = std::move(__val);
    }


  template<typename _RandomAccessIterator, typename _Compare>
   
    void
    __insertion_sort(_RandomAccessIterator __first,
       _RandomAccessIterator __last, _Compare __comp)
    {
      if (__first == __last) return;

      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 {
   if (__comp(__i, __first))
     {
       typename iterator_traits<_RandomAccessIterator>::value_type
  __val = std::move(*__i);
       std::move_backward(__first, __i, __i + 1);
       *__first = std::move(__val);
     }
   else
     std::__unguarded_linear_insert(__i,
    __gnu_cxx::__ops::__val_comp_iter(__comp));
 }
    }


  template<typename _RandomAccessIterator, typename _Compare>
   
    inline void
    __unguarded_insertion_sort(_RandomAccessIterator __first,
          _RandomAccessIterator __last, _Compare __comp)
    {
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 std::__unguarded_linear_insert(__i,
    __gnu_cxx::__ops::__val_comp_iter(__comp));
    }





  enum { _S_threshold = 16 };


  template<typename _RandomAccessIterator, typename _Compare>
   
    void
    __final_insertion_sort(_RandomAccessIterator __first,
      _RandomAccessIterator __last, _Compare __comp)
    {
      if (__last - __first > int(_S_threshold))
 {
   std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
   std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
       __comp);
 }
      else
 std::__insertion_sort(__first, __last, __comp);
    }


  template<typename _RandomAccessIterator, typename _Compare>
   
    _RandomAccessIterator
    __unguarded_partition(_RandomAccessIterator __first,
     _RandomAccessIterator __last,
     _RandomAccessIterator __pivot, _Compare __comp)
    {
      while (true)
 {
   while (__comp(__first, __pivot))
     ++__first;
   --__last;
   while (__comp(__pivot, __last))
     --__last;
   if (!(__first < __last))
     return __first;
   std::iter_swap(__first, __last);
   ++__first;
 }
    }


  template<typename _RandomAccessIterator, typename _Compare>
   
    inline _RandomAccessIterator
    __unguarded_partition_pivot(_RandomAccessIterator __first,
    _RandomAccessIterator __last, _Compare __comp)
    {
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
      __comp);
      return std::__unguarded_partition(__first + 1, __last, __first, __comp);
    }

  template<typename _RandomAccessIterator, typename _Compare>
   
    inline void
    __partial_sort(_RandomAccessIterator __first,
     _RandomAccessIterator __middle,
     _RandomAccessIterator __last,
     _Compare __comp)
    {
      std::__heap_select(__first, __middle, __last, __comp);
      std::__sort_heap(__first, __middle, __comp);
    }


  template<typename _RandomAccessIterator, typename _Size, typename _Compare>
   
    void
    __introsort_loop(_RandomAccessIterator __first,
       _RandomAccessIterator __last,
       _Size __depth_limit, _Compare __comp)
    {
      while (__last - __first > int(_S_threshold))
 {
   if (__depth_limit == 0)
     {
       std::__partial_sort(__first, __last, __last, __comp);
       return;
     }
   --__depth_limit;
   _RandomAccessIterator __cut =
     std::__unguarded_partition_pivot(__first, __last, __comp);
   std::__introsort_loop(__cut, __last, __depth_limit, __comp);
   __last = __cut;
 }
    }



  template<typename _RandomAccessIterator, typename _Compare>
   
    inline void
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
    _Compare __comp)
    {
      if (__first != __last)
 {
   std::__introsort_loop(__first, __last,
    std::__lg(__last - __first) * 2,
    __comp);
   std::__final_insertion_sort(__first, __last, __comp);
 }
    }

  template<typename _RandomAccessIterator, typename _Size, typename _Compare>
   
    void
    __introselect(_RandomAccessIterator __first, _RandomAccessIterator __nth,
    _RandomAccessIterator __last, _Size __depth_limit,
    _Compare __comp)
    {
      while (__last - __first > 3)
 {
   if (__depth_limit == 0)
     {
       std::__heap_select(__first, __nth + 1, __last, __comp);

       std::iter_swap(__first, __nth);
       return;
     }
   --__depth_limit;
   _RandomAccessIterator __cut =
     std::__unguarded_partition_pivot(__first, __last, __comp);
   if (__cut <= __nth)
     __first = __cut;
   else
     __last = __cut;
 }
      std::__insertion_sort(__first, __last, __comp);
    }
# 2028 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
   
    inline _ForwardIterator
    lower_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val, _Compare __comp)
    {

     
     

     
                    ;

      return std::__lower_bound(__first, __last, __val,
    __gnu_cxx::__ops::__iter_comp_val(__comp));
    }

  template<typename _ForwardIterator, typename _Tp, typename _Compare>
   
    _ForwardIterator
    __upper_bound(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__comp(__val, __middle))
     __len = __half;
   else
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
 }
      return __first;
    }
# 2084 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
   
    inline _ForwardIterator
    upper_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {

     
     

      ;

      return std::__upper_bound(__first, __last, __val,
    __gnu_cxx::__ops::__val_less_iter());
    }
# 2115 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
   
    inline _ForwardIterator
    upper_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val, _Compare __comp)
    {

     
     

     
                    ;

      return std::__upper_bound(__first, __last, __val,
    __gnu_cxx::__ops::__val_comp_iter(__comp));
    }

  template<typename _ForwardIterator, typename _Tp,
    typename _CompareItTp, typename _CompareTpIt>
   
    pair<_ForwardIterator, _ForwardIterator>
    __equal_range(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __val,
    _CompareItTp __comp_it_val, _CompareTpIt __comp_val_it)
    {
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__comp_it_val(__middle, __val))
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else if (__comp_val_it(__val, __middle))
     __len = __half;
   else
     {
       _ForwardIterator __left
  = std::__lower_bound(__first, __middle, __val, __comp_it_val);
       std::advance(__first, __len);
       _ForwardIterator __right
  = std::__upper_bound(++__middle, __first, __val, __comp_val_it);
       return pair<_ForwardIterator, _ForwardIterator>(__left, __right);
     }
 }
      return pair<_ForwardIterator, _ForwardIterator>(__first, __first);
    }
# 2188 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
   
    inline pair<_ForwardIterator, _ForwardIterator>
    equal_range(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {

     
     

     

      ;
      ;

      return std::__equal_range(__first, __last, __val,
    __gnu_cxx::__ops::__iter_less_val(),
    __gnu_cxx::__ops::__val_less_iter());
    }
# 2225 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
   
    inline pair<_ForwardIterator, _ForwardIterator>
    equal_range(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val, _Compare __comp)
    {

     
     

     

     
                    ;
     
                    ;

      return std::__equal_range(__first, __last, __val,
    __gnu_cxx::__ops::__iter_comp_val(__comp),
    __gnu_cxx::__ops::__val_comp_iter(__comp));
    }
# 2259 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
   
    bool
    binary_search(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __val)
    {

     
     

      ;
      ;

      _ForwardIterator __i
 = std::__lower_bound(__first, __last, __val,
        __gnu_cxx::__ops::__iter_less_val());
      return __i != __last && !(__val < *__i);
    }
# 2293 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
   
    bool
    binary_search(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __val, _Compare __comp)
    {

     
     

     
                    ;
     
                    ;

      _ForwardIterator __i
 = std::__lower_bound(__first, __last, __val,
        __gnu_cxx::__ops::__iter_comp_val(__comp));
      return __i != __last && !bool(__comp(__val, *__i));
    }




  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    void
    __move_merge_adaptive(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(__first2, __first1))
     {
       *__result = std::move(*__first2);
       ++__first2;
     }
   else
     {
       *__result = std::move(*__first1);
       ++__first1;
     }
   ++__result;
 }
      if (__first1 != __last1)
 std::move(__first1, __last1, __result);
    }


  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _BidirectionalIterator3, typename _Compare>
    void
    __move_merge_adaptive_backward(_BidirectionalIterator1 __first1,
       _BidirectionalIterator1 __last1,
       _BidirectionalIterator2 __first2,
       _BidirectionalIterator2 __last2,
       _BidirectionalIterator3 __result,
       _Compare __comp)
    {
      if (__first1 == __last1)
 {
   std::move_backward(__first2, __last2, __result);
   return;
 }
      else if (__first2 == __last2)
 return;

      --__last1;
      --__last2;
      while (true)
 {
   if (__comp(__last2, __last1))
     {
       *--__result = std::move(*__last1);
       if (__first1 == __last1)
  {
    std::move_backward(__first2, ++__last2, __result);
    return;
  }
       --__last1;
     }
   else
     {
       *--__result = std::move(*__last2);
       if (__first2 == __last2)
  return;
       --__last2;
     }
 }
    }


  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _Distance>
    _BidirectionalIterator1
    __rotate_adaptive(_BidirectionalIterator1 __first,
        _BidirectionalIterator1 __middle,
        _BidirectionalIterator1 __last,
        _Distance __len1, _Distance __len2,
        _BidirectionalIterator2 __buffer,
        _Distance __buffer_size)
    {
      _BidirectionalIterator2 __buffer_end;
      if (__len1 > __len2 && __len2 <= __buffer_size)
 {
   if (__len2)
     {
       __buffer_end = std::move(__middle, __last, __buffer);
       std::move_backward(__first, __middle, __last);
       return std::move(__buffer, __buffer_end, __first);
     }
   else
     return __first;
 }
      else if (__len1 <= __buffer_size)
 {
   if (__len1)
     {
       __buffer_end = std::move(__first, __middle, __buffer);
       std::move(__middle, __last, __first);
       return std::move_backward(__buffer, __buffer_end, __last);
     }
   else
     return __last;
 }
      else
 return std::rotate(__first, __middle, __last);
    }


  template<typename _BidirectionalIterator, typename _Distance,
    typename _Pointer, typename _Compare>
    void
    __merge_adaptive(_BidirectionalIterator __first,
       _BidirectionalIterator __middle,
       _BidirectionalIterator __last,
       _Distance __len1, _Distance __len2,
       _Pointer __buffer, _Distance __buffer_size,
       _Compare __comp)
    {
      if (__len1 <= __len2 && __len1 <= __buffer_size)
 {
   _Pointer __buffer_end = std::move(__first, __middle, __buffer);
   std::__move_merge_adaptive(__buffer, __buffer_end, __middle, __last,
         __first, __comp);
 }
      else if (__len2 <= __buffer_size)
 {
   _Pointer __buffer_end = std::move(__middle, __last, __buffer);
   std::__move_merge_adaptive_backward(__first, __middle, __buffer,
           __buffer_end, __last, __comp);
 }
      else
 {
   _BidirectionalIterator __first_cut = __first;
   _BidirectionalIterator __second_cut = __middle;
   _Distance __len11 = 0;
   _Distance __len22 = 0;
   if (__len1 > __len2)
     {
       __len11 = __len1 / 2;
       std::advance(__first_cut, __len11);
       __second_cut
  = std::__lower_bound(__middle, __last, *__first_cut,
         __gnu_cxx::__ops::__iter_comp_val(__comp));
       __len22 = std::distance(__middle, __second_cut);
     }
   else
     {
       __len22 = __len2 / 2;
       std::advance(__second_cut, __len22);
       __first_cut
  = std::__upper_bound(__first, __middle, *__second_cut,
         __gnu_cxx::__ops::__val_comp_iter(__comp));
       __len11 = std::distance(__first, __first_cut);
     }

   _BidirectionalIterator __new_middle
     = std::__rotate_adaptive(__first_cut, __middle, __second_cut,
         __len1 - __len11, __len22, __buffer,
         __buffer_size);
   std::__merge_adaptive(__first, __first_cut, __new_middle, __len11,
    __len22, __buffer, __buffer_size, __comp);
   std::__merge_adaptive(__new_middle, __second_cut, __last,
    __len1 - __len11,
    __len2 - __len22, __buffer,
    __buffer_size, __comp);
 }
    }


  template<typename _BidirectionalIterator, typename _Distance,
    typename _Compare>
    void
    __merge_without_buffer(_BidirectionalIterator __first,
      _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
      _Distance __len1, _Distance __len2,
      _Compare __comp)
    {
      if (__len1 == 0 || __len2 == 0)
 return;

      if (__len1 + __len2 == 2)
 {
   if (__comp(__middle, __first))
     std::iter_swap(__first, __middle);
   return;
 }

      _BidirectionalIterator __first_cut = __first;
      _BidirectionalIterator __second_cut = __middle;
      _Distance __len11 = 0;
      _Distance __len22 = 0;
      if (__len1 > __len2)
 {
   __len11 = __len1 / 2;
   std::advance(__first_cut, __len11);
   __second_cut
     = std::__lower_bound(__middle, __last, *__first_cut,
     __gnu_cxx::__ops::__iter_comp_val(__comp));
   __len22 = std::distance(__middle, __second_cut);
 }
      else
 {
   __len22 = __len2 / 2;
   std::advance(__second_cut, __len22);
   __first_cut
     = std::__upper_bound(__first, __middle, *__second_cut,
     __gnu_cxx::__ops::__val_comp_iter(__comp));
   __len11 = std::distance(__first, __first_cut);
 }

      _BidirectionalIterator __new_middle
 = std::rotate(__first_cut, __middle, __second_cut);
      std::__merge_without_buffer(__first, __first_cut, __new_middle,
      __len11, __len22, __comp);
      std::__merge_without_buffer(__new_middle, __second_cut, __last,
      __len1 - __len11, __len2 - __len22, __comp);
    }

  template<typename _BidirectionalIterator, typename _Compare>
    void
    __inplace_merge(_BidirectionalIterator __first,
      _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
      _Compare __comp)
    {
      typedef typename iterator_traits<_BidirectionalIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_BidirectionalIterator>::difference_type
   _DistanceType;

      if (__first == __middle || __middle == __last)
 return;

      const _DistanceType __len1 = std::distance(__first, __middle);
      const _DistanceType __len2 = std::distance(__middle, __last);

      typedef _Temporary_buffer<_BidirectionalIterator, _ValueType> _TmpBuf;
      _TmpBuf __buf(__first, __len1 + __len2);

      if (__buf.begin() == 0)
 std::__merge_without_buffer
   (__first, __middle, __last, __len1, __len2, __comp);
      else
 std::__merge_adaptive
   (__first, __middle, __last, __len1, __len2, __buf.begin(),
    _DistanceType(__buf.size()), __comp);
    }
# 2583 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
    inline void
    inplace_merge(_BidirectionalIterator __first,
    _BidirectionalIterator __middle,
    _BidirectionalIterator __last)
    {

     

     

      ;
      ;
      ;

      std::__inplace_merge(__first, __middle, __last,
      __gnu_cxx::__ops::__iter_less_iter());
    }
# 2624 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _Compare>
    inline void
    inplace_merge(_BidirectionalIterator __first,
    _BidirectionalIterator __middle,
    _BidirectionalIterator __last,
    _Compare __comp)
    {

     

     


      ;
      ;
      ;

      std::__inplace_merge(__first, __middle, __last,
      __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }



  template<typename _InputIterator, typename _OutputIterator,
    typename _Compare>
    _OutputIterator
    __move_merge(_InputIterator __first1, _InputIterator __last1,
   _InputIterator __first2, _InputIterator __last2,
   _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(__first2, __first1))
     {
       *__result = std::move(*__first2);
       ++__first2;
     }
   else
     {
       *__result = std::move(*__first1);
       ++__first1;
     }
   ++__result;
 }
      return std::move(__first2, __last2, std::move(__first1, __last1, __result))

                  ;
    }

  template<typename _RandomAccessIterator1, typename _RandomAccessIterator2,
    typename _Distance, typename _Compare>
    void
    __merge_sort_loop(_RandomAccessIterator1 __first,
        _RandomAccessIterator1 __last,
        _RandomAccessIterator2 __result, _Distance __step_size,
        _Compare __comp)
    {
      const _Distance __two_step = 2 * __step_size;

      while (__last - __first >= __two_step)
 {
   __result = std::__move_merge(__first, __first + __step_size,
           __first + __step_size,
           __first + __two_step,
           __result, __comp);
   __first += __two_step;
 }
      __step_size = std::min(_Distance(__last - __first), __step_size);

      std::__move_merge(__first, __first + __step_size,
   __first + __step_size, __last, __result, __comp);
    }

  template<typename _RandomAccessIterator, typename _Distance,
    typename _Compare>
   
    void
    __chunk_insertion_sort(_RandomAccessIterator __first,
      _RandomAccessIterator __last,
      _Distance __chunk_size, _Compare __comp)
    {
      while (__last - __first >= __chunk_size)
 {
   std::__insertion_sort(__first, __first + __chunk_size, __comp);
   __first += __chunk_size;
 }
      std::__insertion_sort(__first, __last, __comp);
    }

  enum { _S_chunk_size = 7 };

  template<typename _RandomAccessIterator, typename _Pointer, typename _Compare>
    void
    __merge_sort_with_buffer(_RandomAccessIterator __first,
        _RandomAccessIterator __last,
        _Pointer __buffer, _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _Distance;

      const _Distance __len = __last - __first;
      const _Pointer __buffer_last = __buffer + __len;

      _Distance __step_size = _S_chunk_size;
      std::__chunk_insertion_sort(__first, __last, __step_size, __comp);

      while (__step_size < __len)
 {
   std::__merge_sort_loop(__first, __last, __buffer,
     __step_size, __comp);
   __step_size *= 2;
   std::__merge_sort_loop(__buffer, __buffer_last, __first,
     __step_size, __comp);
   __step_size *= 2;
 }
    }

  template<typename _RandomAccessIterator, typename _Pointer,
    typename _Distance, typename _Compare>
    void
    __stable_sort_adaptive(_RandomAccessIterator __first,
      _RandomAccessIterator __last,
      _Pointer __buffer, _Distance __buffer_size,
      _Compare __comp)
    {
      const _Distance __len = (__last - __first + 1) / 2;
      const _RandomAccessIterator __middle = __first + __len;
      if (__len > __buffer_size)
 {
   std::__stable_sort_adaptive(__first, __middle, __buffer,
          __buffer_size, __comp);
   std::__stable_sort_adaptive(__middle, __last, __buffer,
          __buffer_size, __comp);
 }
      else
 {
   std::__merge_sort_with_buffer(__first, __middle, __buffer, __comp);
   std::__merge_sort_with_buffer(__middle, __last, __buffer, __comp);
 }
      std::__merge_adaptive(__first, __middle, __last,
       _Distance(__middle - __first),
       _Distance(__last - __middle),
       __buffer, __buffer_size,
       __comp);
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __inplace_stable_sort(_RandomAccessIterator __first,
     _RandomAccessIterator __last, _Compare __comp)
    {
      if (__last - __first < 15)
 {
   std::__insertion_sort(__first, __last, __comp);
   return;
 }
      _RandomAccessIterator __middle = __first + (__last - __first) / 2;
      std::__inplace_stable_sort(__first, __middle, __comp);
      std::__inplace_stable_sort(__middle, __last, __comp);
      std::__merge_without_buffer(__first, __middle, __last,
      __middle - __first,
      __last - __middle,
      __comp);
    }
# 2797 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _Compare>
   
    bool
    __includes(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(__first2, __first1))
   return false;
 else if (__comp(__first1, __first2))
   ++__first1;
 else
   {
     ++__first1;
     ++__first2;
   }

      return __first2 == __last2;
    }
# 2837 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2>
   
    inline bool
    includes(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2)
    {

     
     
     


     


      ;
      ;
      ;
      ;

      return std::__includes(__first1, __last1, __first2, __last2,
        __gnu_cxx::__ops::__iter_less_iter());
    }
# 2882 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _Compare>
   
    inline bool
    includes(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2,
      _Compare __comp)
    {

     
     
     


     


      ;
      ;
      ;
      ;

      return std::__includes(__first1, __last1, __first2, __last2,
        __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }
# 2918 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _Compare>
   
    bool
    __next_permutation(_BidirectionalIterator __first,
         _BidirectionalIterator __last, _Compare __comp)
    {
      if (__first == __last)
 return false;
      _BidirectionalIterator __i = __first;
      ++__i;
      if (__i == __last)
 return false;
      __i = __last;
      --__i;

      for(;;)
 {
   _BidirectionalIterator __ii = __i;
   --__i;
   if (__comp(__i, __ii))
     {
       _BidirectionalIterator __j = __last;
       while (!__comp(__i, --__j))
  {}
       std::iter_swap(__i, __j);
       std::__reverse(__ii, __last,
        std::__iterator_category(__first));
       return true;
     }
   if (__i == __first)
     {
       std::__reverse(__first, __last,
        std::__iterator_category(__first));
       return false;
     }
 }
    }
# 2968 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
   
    inline bool
    next_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last)
    {

     

     

      ;
      ;

      return std::__next_permutation
 (__first, __last, __gnu_cxx::__ops::__iter_less_iter());
    }
# 3001 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _Compare>
   
    inline bool
    next_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last, _Compare __comp)
    {

     

     


      ;
      ;

      return std::__next_permutation
 (__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _BidirectionalIterator, typename _Compare>
   
    bool
    __prev_permutation(_BidirectionalIterator __first,
         _BidirectionalIterator __last, _Compare __comp)
    {
      if (__first == __last)
 return false;
      _BidirectionalIterator __i = __first;
      ++__i;
      if (__i == __last)
 return false;
      __i = __last;
      --__i;

      for(;;)
 {
   _BidirectionalIterator __ii = __i;
   --__i;
   if (__comp(__ii, __i))
     {
       _BidirectionalIterator __j = __last;
       while (!__comp(--__j, __i))
  {}
       std::iter_swap(__i, __j);
       std::__reverse(__ii, __last,
        std::__iterator_category(__first));
       return true;
     }
   if (__i == __first)
     {
       std::__reverse(__first, __last,
        std::__iterator_category(__first));
       return false;
     }
 }
    }
# 3071 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
   
    inline bool
    prev_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last)
    {

     

     

      ;
      ;

      return std::__prev_permutation(__first, __last,
         __gnu_cxx::__ops::__iter_less_iter());
    }
# 3104 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _Compare>
   
    inline bool
    prev_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last, _Compare __comp)
    {

     

     


      ;
      ;

      return std::__prev_permutation(__first, __last,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }




  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate, typename _Tp>
   
    _OutputIterator
    __replace_copy_if(_InputIterator __first, _InputIterator __last,
        _OutputIterator __result,
        _Predicate __pred, const _Tp& __new_value)
    {
      for (; __first != __last; ++__first, (void)++__result)
 if (__pred(__first))
   *__result = __new_value;
 else
   *__result = *__first;
      return __result;
    }
# 3156 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator, typename _Tp>
   
    inline _OutputIterator
    replace_copy(_InputIterator __first, _InputIterator __last,
   _OutputIterator __result,
   const _Tp& __old_value, const _Tp& __new_value)
    {

     
     

     

      ;

      return std::__replace_copy_if(__first, __last, __result,
   __gnu_cxx::__ops::__iter_equals_val(__old_value),
           __new_value);
    }
# 3191 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate, typename _Tp>
   
    inline _OutputIterator
    replace_copy_if(_InputIterator __first, _InputIterator __last,
      _OutputIterator __result,
      _Predicate __pred, const _Tp& __new_value)
    {

     
     

     

      ;

      return std::__replace_copy_if(__first, __last, __result,
    __gnu_cxx::__ops::__pred_iter(__pred),
           __new_value);
    }
# 3220 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
   
    inline bool
    is_sorted(_ForwardIterator __first, _ForwardIterator __last)
    { return std::is_sorted_until(__first, __last) == __last; }
# 3235 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
   
    inline bool
    is_sorted(_ForwardIterator __first, _ForwardIterator __last,
       _Compare __comp)
    { return std::is_sorted_until(__first, __last, __comp) == __last; }

  template<typename _ForwardIterator, typename _Compare>
   
    _ForwardIterator
    __is_sorted_until(_ForwardIterator __first, _ForwardIterator __last,
        _Compare __comp)
    {
      if (__first == __last)
 return __last;

      _ForwardIterator __next = __first;
      for (++__next; __next != __last; __first = __next, (void)++__next)
 if (__comp(__next, __first))
   return __next;
      return __next;
    }
# 3266 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
   
    inline _ForwardIterator
    is_sorted_until(_ForwardIterator __first, _ForwardIterator __last)
    {

     
     

      ;
      ;

      return std::__is_sorted_until(__first, __last,
        __gnu_cxx::__ops::__iter_less_iter());
    }
# 3291 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
   
    inline _ForwardIterator
    is_sorted_until(_ForwardIterator __first, _ForwardIterator __last,
      _Compare __comp)
    {

     
     


      ;
      ;

      return std::__is_sorted_until(__first, __last,
        __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }
# 3317 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _Tp>
    constexpr
    inline pair<const _Tp&, const _Tp&>
    minmax(const _Tp& __a, const _Tp& __b)
    {

     

      return __b < __a ? pair<const _Tp&, const _Tp&>(__b, __a)
         : pair<const _Tp&, const _Tp&>(__a, __b);
    }
# 3338 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _Tp, typename _Compare>
    constexpr
    inline pair<const _Tp&, const _Tp&>
    minmax(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {
      return __comp(__b, __a) ? pair<const _Tp&, const _Tp&>(__b, __a)
         : pair<const _Tp&, const _Tp&>(__a, __b);
    }

  template<typename _ForwardIterator, typename _Compare>
    constexpr
    pair<_ForwardIterator, _ForwardIterator>
    __minmax_element(_ForwardIterator __first, _ForwardIterator __last,
       _Compare __comp)
    {
      _ForwardIterator __next = __first;
      if (__first == __last
   || ++__next == __last)
 return std::make_pair(__first, __first);

      _ForwardIterator __min{}, __max{};
      if (__comp(__next, __first))
 {
   __min = __next;
   __max = __first;
 }
      else
 {
   __min = __first;
   __max = __next;
 }

      __first = __next;
      ++__first;

      while (__first != __last)
 {
   __next = __first;
   if (++__next == __last)
     {
       if (__comp(__first, __min))
  __min = __first;
       else if (!__comp(__first, __max))
  __max = __first;
       break;
     }

   if (__comp(__next, __first))
     {
       if (__comp(__next, __min))
  __min = __next;
       if (!__comp(__first, __max))
  __max = __first;
     }
   else
     {
       if (__comp(__first, __min))
  __min = __first;
       if (!__comp(__next, __max))
  __max = __next;
     }

   __first = __next;
   ++__first;
 }

      return std::make_pair(__min, __max);
    }
# 3418 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    constexpr
    inline pair<_ForwardIterator, _ForwardIterator>
    minmax_element(_ForwardIterator __first, _ForwardIterator __last)
    {

     
     

      ;
      ;

      return std::__minmax_element(__first, __last,
       __gnu_cxx::__ops::__iter_less_iter());
    }
# 3446 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
    constexpr
    inline pair<_ForwardIterator, _ForwardIterator>
    minmax_element(_ForwardIterator __first, _ForwardIterator __last,
     _Compare __comp)
    {

     
     


      ;
      ;

      return std::__minmax_element(__first, __last,
       __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }


  template<typename _Tp>
    constexpr
    inline _Tp
    min(initializer_list<_Tp> __l)
    { return *std::min_element(__l.begin(), __l.end()); }

  template<typename _Tp, typename _Compare>
    constexpr
    inline _Tp
    min(initializer_list<_Tp> __l, _Compare __comp)
    { return *std::min_element(__l.begin(), __l.end(), __comp); }

  template<typename _Tp>
    constexpr
    inline _Tp
    max(initializer_list<_Tp> __l)
    { return *std::max_element(__l.begin(), __l.end()); }

  template<typename _Tp, typename _Compare>
    constexpr
    inline _Tp
    max(initializer_list<_Tp> __l, _Compare __comp)
    { return *std::max_element(__l.begin(), __l.end(), __comp); }

  template<typename _Tp>
    constexpr
    inline pair<_Tp, _Tp>
    minmax(initializer_list<_Tp> __l)
    {
      pair<const _Tp*, const _Tp*> __p =
 std::minmax_element(__l.begin(), __l.end());
      return std::make_pair(*__p.first, *__p.second);
    }

  template<typename _Tp, typename _Compare>
    constexpr
    inline pair<_Tp, _Tp>
    minmax(initializer_list<_Tp> __l, _Compare __comp)
    {
      pair<const _Tp*, const _Tp*> __p =
 std::minmax_element(__l.begin(), __l.end(), __comp);
      return std::make_pair(*__p.first, *__p.second);
    }
# 3523 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
   
    inline bool
    is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
     _ForwardIterator2 __first2, _BinaryPredicate __pred)
    {

     
     
     


      ;

      return std::__is_permutation(__first1, __last1, __first2,
       __gnu_cxx::__ops::__iter_comp_iter(__pred));
    }


  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
   
    bool
    __is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
       _ForwardIterator2 __first2, _ForwardIterator2 __last2,
       _BinaryPredicate __pred)
    {
      using _Cat1
 = typename iterator_traits<_ForwardIterator1>::iterator_category;
      using _Cat2
 = typename iterator_traits<_ForwardIterator2>::iterator_category;
      using _It1_is_RA = is_same<_Cat1, random_access_iterator_tag>;
      using _It2_is_RA = is_same<_Cat2, random_access_iterator_tag>;
      constexpr bool __ra_iters = _It1_is_RA() && _It2_is_RA();
      if (__ra_iters)
 {
   auto __d1 = std::distance(__first1, __last1);
   auto __d2 = std::distance(__first2, __last2);
   if (__d1 != __d2)
     return false;
 }



      for (; __first1 != __last1 && __first2 != __last2;
   ++__first1, (void)++__first2)
 if (!__pred(__first1, __first2))
   break;

      if (__ra_iters)
 {
   if (__first1 == __last1)
     return true;
 }
      else
 {
   auto __d1 = std::distance(__first1, __last1);
   auto __d2 = std::distance(__first2, __last2);
   if (__d1 == 0 && __d2 == 0)
     return true;
   if (__d1 != __d2)
     return false;
 }

      for (_ForwardIterator1 __scan = __first1; __scan != __last1; ++__scan)
 {
   if (__scan != std::__find_if(__first1, __scan,
   __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan)))
     continue;

   auto __matches = std::__count_if(__first2, __last2,
  __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan));
   if (0 == __matches
       || std::__count_if(__scan, __last1,
   __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan))
       != __matches)
     return false;
 }
      return true;
    }
# 3618 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
   
    inline bool
    is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
     _ForwardIterator2 __first2, _ForwardIterator2 __last2)
    {
      ;
      ;

      return
 std::__is_permutation(__first1, __last1, __first2, __last2,
         __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 3646 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
   
    inline bool
    is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
     _ForwardIterator2 __first2, _ForwardIterator2 __last2,
     _BinaryPredicate __pred)
    {
      ;
      ;

      return std::__is_permutation(__first1, __last1, __first2, __last2,
       __gnu_cxx::__ops::__iter_comp_iter(__pred));
    }
# 3723 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _IntType, typename _UniformRandomBitGenerator>
    pair<_IntType, _IntType>
    __gen_two_uniform_ints(_IntType __b0, _IntType __b1,
      _UniformRandomBitGenerator&& __g)
    {
      _IntType __x
 = uniform_int_distribution<_IntType>{0, (__b0 * __b1) - 1}(__g);
      return std::make_pair(__x / __b1, __x % __b1);
    }
# 3745 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator,
    typename _UniformRandomNumberGenerator>
    void
    shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last,
     _UniformRandomNumberGenerator&& __g)
    {

     

      ;

      if (__first == __last)
 return;

      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;

      typedef typename std::make_unsigned<_DistanceType>::type __ud_type;
      typedef typename std::uniform_int_distribution<__ud_type> __distr_type;
      typedef typename __distr_type::param_type __p_type;

      typedef typename remove_reference<_UniformRandomNumberGenerator>::type
 _Gen;
      typedef typename common_type<typename _Gen::result_type, __ud_type>::type
 __uc_type;

      const __uc_type __urngrange = __g.max() - __g.min();
      const __uc_type __urange = __uc_type(__last - __first);

      if (__urngrange / __urange >= __urange)

      {
 _RandomAccessIterator __i = __first + 1;





 if ((__urange % 2) == 0)
 {
   __distr_type __d{0, 1};
   std::iter_swap(__i++, __first + __d(__g));
 }





 while (__i != __last)
 {
   const __uc_type __swap_range = __uc_type(__i - __first) + 1;

   const pair<__uc_type, __uc_type> __pospos =
     __gen_two_uniform_ints(__swap_range, __swap_range + 1, __g);

   std::iter_swap(__i++, __first + __pospos.first);
   std::iter_swap(__i++, __first + __pospos.second);
 }

 return;
      }

      __distr_type __d;

      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 std::iter_swap(__i, __first + __d(__g, __p_type(0, __i - __first)));
    }





# 3830 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Function>
   
    _Function
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
    {

     
      ;
      for (; __first != __last; ++__first)
 __f(*__first);
      return __f;
    }
# 3892 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Tp>
   
    inline _InputIterator
    find(_InputIterator __first, _InputIterator __last,
  const _Tp& __val)
    {

     
     

      ;
      return std::__find_if(__first, __last,
       __gnu_cxx::__ops::__iter_equals_val(__val));
    }
# 3917 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
   
    inline _InputIterator
    find_if(_InputIterator __first, _InputIterator __last,
     _Predicate __pred)
    {

     
     

      ;

      return std::__find_if(__first, __last,
       __gnu_cxx::__ops::__pred_iter(__pred));
    }
# 3949 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _ForwardIterator>
   
    _InputIterator
    find_first_of(_InputIterator __first1, _InputIterator __last1,
    _ForwardIterator __first2, _ForwardIterator __last2)
    {

     
     
     


      ;
      ;

      for (; __first1 != __last1; ++__first1)
 for (_ForwardIterator __iter = __first2; __iter != __last2; ++__iter)
   if (*__first1 == *__iter)
     return __first1;
      return __last1;
    }
# 3990 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _ForwardIterator,
    typename _BinaryPredicate>
   
    _InputIterator
    find_first_of(_InputIterator __first1, _InputIterator __last1,
    _ForwardIterator __first2, _ForwardIterator __last2,
    _BinaryPredicate __comp)
    {

     
     
     


      ;
      ;

      for (; __first1 != __last1; ++__first1)
 for (_ForwardIterator __iter = __first2; __iter != __last2; ++__iter)
   if (__comp(*__first1, *__iter))
     return __first1;
      return __last1;
    }
# 4023 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
   
    inline _ForwardIterator
    adjacent_find(_ForwardIterator __first, _ForwardIterator __last)
    {

     
     

      ;

      return std::__adjacent_find(__first, __last,
      __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 4049 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _BinaryPredicate>
   
    inline _ForwardIterator
    adjacent_find(_ForwardIterator __first, _ForwardIterator __last,
    _BinaryPredicate __binary_pred)
    {

     
     


      ;

      return std::__adjacent_find(__first, __last,
   __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
    }
# 4075 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Tp>
   
    inline typename iterator_traits<_InputIterator>::difference_type
    count(_InputIterator __first, _InputIterator __last, const _Tp& __value)
    {

     
     

      ;

      return std::__count_if(__first, __last,
        __gnu_cxx::__ops::__iter_equals_val(__value));
    }
# 4099 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
   
    inline typename iterator_traits<_InputIterator>::difference_type
    count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    {

     
     

      ;

      return std::__count_if(__first, __last,
        __gnu_cxx::__ops::__pred_iter(__pred));
    }
# 4140 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
   
    inline _ForwardIterator1
    search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
    _ForwardIterator2 __first2, _ForwardIterator2 __last2)
    {

     
     
     


      ;
      ;

      return std::__search(__first1, __last1, __first2, __last2,
      __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 4180 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
   
    inline _ForwardIterator1
    search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
    _ForwardIterator2 __first2, _ForwardIterator2 __last2,
    _BinaryPredicate __predicate)
    {

     
     
     


      ;
      ;

      return std::__search(__first1, __last1, __first2, __last2,
      __gnu_cxx::__ops::__iter_comp_iter(__predicate));
    }
# 4216 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Integer, typename _Tp>
   
    inline _ForwardIterator
    search_n(_ForwardIterator __first, _ForwardIterator __last,
      _Integer __count, const _Tp& __val)
    {

     
     

      ;

      return std::__search_n(__first, __last, __count,
        __gnu_cxx::__ops::__iter_equals_val(__val));
    }
# 4250 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Integer, typename _Tp,
    typename _BinaryPredicate>
   
    inline _ForwardIterator
    search_n(_ForwardIterator __first, _ForwardIterator __last,
      _Integer __count, const _Tp& __val,
      _BinaryPredicate __binary_pred)
    {

     
     

      ;

      return std::__search_n(__first, __last, __count,
  __gnu_cxx::__ops::__iter_comp_val(__binary_pred, __val));
    }
# 4300 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _UnaryOperation>
   
    _OutputIterator
    transform(_InputIterator __first, _InputIterator __last,
       _OutputIterator __result, _UnaryOperation __unary_op)
    {

     
     


      ;

      for (; __first != __last; ++__first, (void)++__result)
 *__result = __unary_op(*__first);
      return __result;
    }
# 4338 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _BinaryOperation>
   
    _OutputIterator
    transform(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _OutputIterator __result,
       _BinaryOperation __binary_op)
    {

     
     
     


      ;

      for (; __first1 != __last1; ++__first1, (void)++__first2, ++__result)
 *__result = __binary_op(*__first1, *__first2);
      return __result;
    }
# 4372 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
   
    void
    replace(_ForwardIterator __first, _ForwardIterator __last,
     const _Tp& __old_value, const _Tp& __new_value)
    {

     

     

     

      ;

      for (; __first != __last; ++__first)
 if (*__first == __old_value)
   *__first = __new_value;
    }
# 4405 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate, typename _Tp>
   
    void
    replace_if(_ForwardIterator __first, _ForwardIterator __last,
        _Predicate __pred, const _Tp& __new_value)
    {

     

     

     

      ;

      for (; __first != __last; ++__first)
 if (__pred(*__first))
   *__first = __new_value;
    }
# 4438 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Generator>
   
    void
    generate(_ForwardIterator __first, _ForwardIterator __last,
      _Generator __gen)
    {

     
     

      ;

      for (; __first != __last; ++__first)
 *__first = __gen();
    }
# 4472 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _OutputIterator, typename _Size, typename _Generator>
   
    _OutputIterator
    generate_n(_OutputIterator __first, _Size __n, _Generator __gen)
    {

     



      typedef __decltype(std::__size_to_integer(__n)) _IntSize;
      for (_IntSize __niter = std::__size_to_integer(__n);
    __niter > 0; --__niter, (void) ++__first)
 *__first = __gen();
      return __first;
    }
# 4510 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator>
   
    inline _OutputIterator
    unique_copy(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result)
    {

     
     

     

      ;

      if (__first == __last)
 return __result;
      return std::__unique_copy(__first, __last, __result,
    __gnu_cxx::__ops::__iter_equal_to_iter(),
    std::__iterator_category(__first),
    std::__iterator_category(__result));
    }
# 4551 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _BinaryPredicate>
   
    inline _OutputIterator
    unique_copy(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result,
  _BinaryPredicate __binary_pred)
    {

     
     

      ;

      if (__first == __last)
 return __result;
      return std::__unique_copy(__first, __last, __result,
   __gnu_cxx::__ops::__iter_comp_iter(__binary_pred),
    std::__iterator_category(__first),
    std::__iterator_category(__result));
    }
# 4585 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {

     

      ;

      if (__first != __last)
 for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
   {

     _RandomAccessIterator __j = __first
     + std::rand() % ((__i - __first) + 1);
     if (__i != __j)
       std::iter_swap(__i, __j);
   }
    }
# 4620 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _RandomNumberGenerator>
    void
    random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last,

     _RandomNumberGenerator&& __rand)



    {

     

      ;

      if (__first == __last)
 return;
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 {
   _RandomAccessIterator __j = __first + __rand((__i - __first) + 1);
   if (__i != __j)
     std::iter_swap(__i, __j);
 }
    }
# 4660 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
   
    inline _ForwardIterator
    partition(_ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred)
    {

     

     

      ;

      return std::__partition(__first, __last, __pred,
         std::__iterator_category(__first));
    }
# 4694 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
   
    inline void
    partial_sort(_RandomAccessIterator __first,
   _RandomAccessIterator __middle,
   _RandomAccessIterator __last)
    {

     

     

      ;
      ;
      ;

      std::__partial_sort(__first, __middle, __last,
     __gnu_cxx::__ops::__iter_less_iter());
    }
# 4733 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
   
    inline void
    partial_sort(_RandomAccessIterator __first,
   _RandomAccessIterator __middle,
   _RandomAccessIterator __last,
   _Compare __comp)
    {

     

     


      ;
      ;
      ;

      std::__partial_sort(__first, __middle, __last,
     __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }
# 4770 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
   
    inline void
    nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth,
  _RandomAccessIterator __last)
    {

     

     

      ;
      ;
      ;

      if (__first == __last || __nth == __last)
 return;

      std::__introselect(__first, __nth, __last,
    std::__lg(__last - __first) * 2,
    __gnu_cxx::__ops::__iter_less_iter());
    }
# 4810 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
   
    inline void
    nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth,
  _RandomAccessIterator __last, _Compare __comp)
    {

     

     


      ;
      ;
      ;

      if (__first == __last || __nth == __last)
 return;

      std::__introselect(__first, __nth, __last,
    std::__lg(__last - __first) * 2,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }
# 4848 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
   
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {

     

     

      ;
      ;

      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_less_iter());
    }
# 4879 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
   
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare __comp)
    {

     

     


      ;
      ;

      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
   
    _OutputIterator
    __merge(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(__first2, __first1))
     {
       *__result = *__first2;
       ++__first2;
     }
   else
     {
       *__result = *__first1;
       ++__first1;
     }
   ++__result;
 }
      return std::copy(__first2, __last2,
         std::copy(__first1, __last1, __result));
    }
# 4942 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
   
    inline _OutputIterator
    merge(_InputIterator1 __first1, _InputIterator1 __last1,
   _InputIterator2 __first2, _InputIterator2 __last2,
   _OutputIterator __result)
    {

     
     
     

     

     


      ;
      ;
      ;
      ;

      return std::__merge(__first1, __last1,
         __first2, __last2, __result,
         __gnu_cxx::__ops::__iter_less_iter());
    }
# 4993 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
   
    inline _OutputIterator
    merge(_InputIterator1 __first1, _InputIterator1 __last1,
   _InputIterator2 __first2, _InputIterator2 __last2,
   _OutputIterator __result, _Compare __comp)
    {

     
     
     

     

     


      ;
      ;
      ;
      ;

      return std::__merge(__first1, __last1,
    __first2, __last2, __result,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    __stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
    _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;

      typedef _Temporary_buffer<_RandomAccessIterator, _ValueType> _TmpBuf;
      _TmpBuf __buf(__first, std::distance(__first, __last));

      if (__buf.begin() == 0)
 std::__inplace_stable_sort(__first, __last, __comp);
      else
 std::__stable_sort_adaptive(__first, __last, __buf.begin(),
        _DistanceType(__buf.size()), __comp);
    }
# 5058 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {

     

     

      ;
      ;

      std::__stable_sort(__first, __last,
        __gnu_cxx::__ops::__iter_less_iter());
    }
# 5092 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare __comp)
    {

     

     


      ;
      ;

      std::__stable_sort(__first, __last,
        __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator,
    typename _Compare>
   
    _OutputIterator
    __set_union(_InputIterator1 __first1, _InputIterator1 __last1,
  _InputIterator2 __first2, _InputIterator2 __last2,
  _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(__first1, __first2))
     {
       *__result = *__first1;
       ++__first1;
     }
   else if (__comp(__first2, __first1))
     {
       *__result = *__first2;
       ++__first2;
     }
   else
     {
       *__result = *__first1;
       ++__first1;
       ++__first2;
     }
   ++__result;
 }
      return std::copy(__first2, __last2,
         std::copy(__first1, __last1, __result));
    }
# 5162 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
   
    inline _OutputIterator
    set_union(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result)
    {

     
     
     

     

     


     


      ;
      ;
      ;
      ;

      return std::__set_union(__first1, __last1,
    __first2, __last2, __result,
    __gnu_cxx::__ops::__iter_less_iter());
    }
# 5213 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
   
    inline _OutputIterator
    set_union(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result, _Compare __comp)
    {

     
     
     

     

     


     


      ;
      ;
      ;
      ;

      return std::__set_union(__first1, __last1,
    __first2, __last2, __result,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator,
    typename _Compare>
   
    _OutputIterator
    __set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,
         _InputIterator2 __first2, _InputIterator2 __last2,
         _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(__first1, __first2))
   ++__first1;
 else if (__comp(__first2, __first1))
   ++__first2;
 else
   {
     *__result = *__first1;
     ++__first1;
     ++__first2;
     ++__result;
   }
      return __result;
    }
# 5286 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
   
    inline _OutputIterator
    set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result)
    {

     
     
     

     


     


      ;
      ;
      ;
      ;

      return std::__set_intersection(__first1, __last1,
         __first2, __last2, __result,
         __gnu_cxx::__ops::__iter_less_iter());
    }
# 5336 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
   
    inline _OutputIterator
    set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result, _Compare __comp)
    {

     
     
     

     


     


      ;
      ;
      ;
      ;

      return std::__set_intersection(__first1, __last1,
    __first2, __last2, __result,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator,
    typename _Compare>
   
    _OutputIterator
    __set_difference(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(__first1, __first2))
   {
     *__result = *__first1;
     ++__first1;
     ++__result;
   }
 else if (__comp(__first2, __first1))
   ++__first2;
 else
   {
     ++__first1;
     ++__first2;
   }
      return std::copy(__first1, __last1, __result);
    }
# 5411 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
   
    inline _OutputIterator
    set_difference(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result)
    {

     
     
     

     


     


      ;
      ;
      ;
      ;

      return std::__set_difference(__first1, __last1,
       __first2, __last2, __result,
       __gnu_cxx::__ops::__iter_less_iter());
    }
# 5463 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
   
    inline _OutputIterator
    set_difference(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result, _Compare __comp)
    {

     
     
     

     


     


      ;
      ;
      ;
      ;

      return std::__set_difference(__first1, __last1,
       __first2, __last2, __result,
       __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator,
    typename _Compare>
   
    _OutputIterator
    __set_symmetric_difference(_InputIterator1 __first1,
          _InputIterator1 __last1,
          _InputIterator2 __first2,
          _InputIterator2 __last2,
          _OutputIterator __result,
          _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(__first1, __first2))
   {
     *__result = *__first1;
     ++__first1;
     ++__result;
   }
 else if (__comp(__first2, __first1))
   {
     *__result = *__first2;
     ++__first2;
     ++__result;
   }
 else
   {
     ++__first1;
     ++__first2;
   }
      return std::copy(__first2, __last2,
         std::copy(__first1, __last1, __result));
    }
# 5544 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
   
    inline _OutputIterator
    set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _OutputIterator __result)
    {

     
     
     

     

     


     


      ;
      ;
      ;
      ;

      return std::__set_symmetric_difference(__first1, __last1,
     __first2, __last2, __result,
     __gnu_cxx::__ops::__iter_less_iter());
    }
# 5596 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
   
    inline _OutputIterator
    set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _OutputIterator __result,
        _Compare __comp)
    {

     
     
     

     

     


     


      ;
      ;
      ;
      ;

      return std::__set_symmetric_difference(__first1, __last1,
    __first2, __last2, __result,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _ForwardIterator, typename _Compare>
    constexpr
    _ForwardIterator
    __min_element(_ForwardIterator __first, _ForwardIterator __last,
    _Compare __comp)
    {
      if (__first == __last)
 return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
 if (__comp(__first, __result))
   __result = __first;
      return __result;
    }
# 5650 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    constexpr
    _ForwardIterator
    inline min_element(_ForwardIterator __first, _ForwardIterator __last)
    {

     
     

      ;
      ;

      return std::__min_element(__first, __last,
    __gnu_cxx::__ops::__iter_less_iter());
    }
# 5675 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
    constexpr
    inline _ForwardIterator
    min_element(_ForwardIterator __first, _ForwardIterator __last,
  _Compare __comp)
    {

     
     


      ;
      ;

      return std::__min_element(__first, __last,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _ForwardIterator, typename _Compare>
    constexpr
    _ForwardIterator
    __max_element(_ForwardIterator __first, _ForwardIterator __last,
    _Compare __comp)
    {
      if (__first == __last) return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
 if (__comp(__result, __first))
   __result = __first;
      return __result;
    }
# 5714 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    constexpr
    inline _ForwardIterator
    max_element(_ForwardIterator __first, _ForwardIterator __last)
    {

     
     

      ;
      ;

      return std::__max_element(__first, __last,
    __gnu_cxx::__ops::__iter_less_iter());
    }
# 5739 "/usr/include/c++/10/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
    constexpr
    inline _ForwardIterator
    max_element(_ForwardIterator __first, _ForwardIterator __last,
  _Compare __comp)
    {

     
     


      ;
      ;

      return std::__max_element(__first, __last,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }



  template<typename _InputIterator, typename _RandomAccessIterator,
           typename _Size, typename _UniformRandomBitGenerator>
    _RandomAccessIterator
    __sample(_InputIterator __first, _InputIterator __last, input_iterator_tag,
      _RandomAccessIterator __out, random_access_iterator_tag,
      _Size __n, _UniformRandomBitGenerator&& __g)
    {
      using __distrib_type = uniform_int_distribution<_Size>;
      using __param_type = typename __distrib_type::param_type;
      __distrib_type __d{};
      _Size __sample_sz = 0;
      while (__first != __last && __sample_sz != __n)
 {
   __out[__sample_sz++] = *__first;
   ++__first;
 }
      for (auto __pop_sz = __sample_sz; __first != __last;
   ++__first, (void) ++__pop_sz)
 {
   const auto __k = __d(__g, __param_type{0, __pop_sz});
   if (__k < __n)
     __out[__k] = *__first;
 }
      return __out + __sample_sz;
    }


  template<typename _ForwardIterator, typename _OutputIterator, typename _Cat,
           typename _Size, typename _UniformRandomBitGenerator>
    _OutputIterator
    __sample(_ForwardIterator __first, _ForwardIterator __last,
      forward_iterator_tag,
      _OutputIterator __out, _Cat,
      _Size __n, _UniformRandomBitGenerator&& __g)
    {
      using __distrib_type = uniform_int_distribution<_Size>;
      using __param_type = typename __distrib_type::param_type;
      using _USize = make_unsigned_t<_Size>;
      using _Gen = remove_reference_t<_UniformRandomBitGenerator>;
      using __uc_type = common_type_t<typename _Gen::result_type, _USize>;

      if (__first == __last)
 return __out;

      __distrib_type __d{};
      _Size __unsampled_sz = std::distance(__first, __last);
      __n = std::min(__n, __unsampled_sz);




      const __uc_type __urngrange = __g.max() - __g.min();
      if (__urngrange / __uc_type(__unsampled_sz) >= __uc_type(__unsampled_sz))


        {
   while (__n != 0 && __unsampled_sz >= 2)
     {
       const pair<_Size, _Size> __p =
  __gen_two_uniform_ints(__unsampled_sz, __unsampled_sz - 1, __g);

       --__unsampled_sz;
       if (__p.first < __n)
  {
    *__out++ = *__first;
    --__n;
  }

       ++__first;

       if (__n == 0) break;

       --__unsampled_sz;
       if (__p.second < __n)
  {
    *__out++ = *__first;
    --__n;
  }

       ++__first;
     }
        }



      for (; __n != 0; ++__first)
 if (__d(__g, __param_type{0, --__unsampled_sz}) < __n)
   {
     *__out++ = *__first;
     --__n;
   }
      return __out;
    }
# 5885 "/usr/include/c++/10/bits/stl_algo.h" 3


}
# 63 "/usr/include/c++/10/algorithm" 2 3
# 22 "/usr/include/wx-3.1-unofficial/wx/unichar.h" 2



# 24 "/usr/include/wx-3.1-unofficial/wx/unichar.h"
class wxUniCharRef;
class wxString;



class __attribute__ ((visibility("default"))) wxUniChar
{
public:



    typedef wxUint32 value_type;

    wxUniChar() : m_value(0) {}



    wxUniChar(char c) { m_value = From8bit(c); }
    wxUniChar(unsigned char c) { m_value = From8bit((char)c); }



    wxUniChar(short c) { m_value = (value_type)c; } wxUniChar(unsigned short c) { m_value = (value_type)c; } wxUniChar(int c) { m_value = (value_type)c; } wxUniChar(unsigned int c) { m_value = (value_type)c; } wxUniChar(long c) { m_value = (value_type)c; } wxUniChar(unsigned long c) { m_value = (value_type)c; } wxUniChar(long long c) { m_value = (value_type)c; } wxUniChar(unsigned long long c) { m_value = (value_type)c; } wxUniChar(wchar_t c) { m_value = (value_type)c; }


    wxUniChar(const wxUniCharRef& c);


    value_type GetValue() const { return m_value; }
# 68 "/usr/include/wx-3.1-unofficial/wx/unichar.h"
    bool IsAscii() const { return m_value < 0x80; }




    bool GetAsChar(char *c) const
    {

        if ( !IsAscii() )
        {

            if ( GetAsHi8bit(m_value, c) )
                return true;


            return false;
        }


        *c = ((char)(m_value));
        return true;
    }


    static bool IsBMP(wxUint32 value) { return value < 0x10000; }


    static bool IsSupplementary(wxUint32 value) { return 0x10000 <= value && value < 0x110000; }


    static wxUint16 HighSurrogate(wxUint32 value)
    {
        do { if ( IsSupplementary(value) ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/unichar.h", 100, __FUNCTION__, "IsSupplementary(value)", "wxUniChar::HighSurrogate() must be called on a supplementary character"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );
        return static_cast<wxUint16>(0xD800 | ((value - 0x10000) >> 10));
    }


    static wxUint16 LowSurrogate(wxUint32 value)
    {
        do { if ( IsSupplementary(value) ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/unichar.h", 107, __FUNCTION__, "IsSupplementary(value)", "wxUniChar::LowSurrogate() must be called on a supplementary character"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );
        return static_cast<wxUint16>(0xDC00 | ((value - 0x10000) & 0x03FF));
    }


    bool IsBMP() const { return IsBMP(m_value); }


    bool IsSupplementary() const { return IsSupplementary(m_value); }


    wxUint16 HighSurrogate() const { return HighSurrogate(m_value); }


    wxUint16 LowSurrogate() const { return LowSurrogate(m_value); }




    operator char() const { return To8bit(m_value); }
    operator unsigned char() const { return (unsigned char)To8bit(m_value); }



    operator short() const { return (short)m_value; } operator unsigned short() const { return (unsigned short)m_value; } operator int() const { return (int)m_value; } operator unsigned int() const { return (unsigned int)m_value; } operator long() const { return (long)m_value; } operator unsigned long() const { return (unsigned long)m_value; } operator long long() const { return (long long)m_value; } operator unsigned long long() const { return (unsigned long long)m_value; } operator wchar_t() const { return (wchar_t)m_value; }







    operator bool() const { return m_value != 0; }
    bool operator!() const { return !((bool)*this); }



    bool operator&&(bool v) const { return (bool)*this && v; }


    wxUniChar& operator=(const wxUniCharRef& c);
    wxUniChar& operator=(char c) { m_value = From8bit(c); return *this; }
    wxUniChar& operator=(unsigned char c) { m_value = From8bit((char)c); return *this; }



    wxUniChar& operator=(short c) { m_value = (value_type)c; return *this; } wxUniChar& operator=(unsigned short c) { m_value = (value_type)c; return *this; } wxUniChar& operator=(int c) { m_value = (value_type)c; return *this; } wxUniChar& operator=(unsigned int c) { m_value = (value_type)c; return *this; } wxUniChar& operator=(long c) { m_value = (value_type)c; return *this; } wxUniChar& operator=(unsigned long c) { m_value = (value_type)c; return *this; } wxUniChar& operator=(long long c) { m_value = (value_type)c; return *this; } wxUniChar& operator=(unsigned long long c) { m_value = (value_type)c; return *this; } wxUniChar& operator=(wchar_t c) { m_value = (value_type)c; return *this; }
# 167 "/usr/include/wx-3.1-unofficial/wx/unichar.h"
    bool operator ==(const wxUniChar& c) const { return m_value == c.m_value; } bool operator ==(char c) const { return m_value == From8bit(c); } bool operator ==(unsigned char c) const { return m_value == From8bit((char)c); } bool operator ==(short c) const { return m_value == (value_type)c; } bool operator ==(unsigned short c) const { return m_value == (value_type)c; } bool operator ==(int c) const { return m_value == (value_type)c; } bool operator ==(unsigned int c) const { return m_value == (value_type)c; } bool operator ==(long c) const { return m_value == (value_type)c; } bool operator ==(unsigned long c) const { return m_value == (value_type)c; } bool operator ==(long long c) const { return m_value == (value_type)c; } bool operator ==(unsigned long long c) const { return m_value == (value_type)c; } bool operator ==(wchar_t c) const { return m_value == (value_type)c; } bool operator !=(const wxUniChar& c) const { return m_value != c.m_value; } bool operator !=(char c) const { return m_value != From8bit(c); } bool operator !=(unsigned char c) const { return m_value != From8bit((char)c); } bool operator !=(short c) const { return m_value != (value_type)c; } bool operator !=(unsigned short c) const { return m_value != (value_type)c; } bool operator !=(int c) const { return m_value != (value_type)c; } bool operator !=(unsigned int c) const { return m_value != (value_type)c; } bool operator !=(long c) const { return m_value != (value_type)c; } bool operator !=(unsigned long c) const { return m_value != (value_type)c; } bool operator !=(long long c) const { return m_value != (value_type)c; } bool operator !=(unsigned long long c) const { return m_value != (value_type)c; } bool operator !=(wchar_t c) const { return m_value != (value_type)c; } bool operator >=(const wxUniChar& c) const { return m_value >= c.m_value; } bool operator >=(char c) const { return m_value >= From8bit(c); } bool operator >=(unsigned char c) const { return m_value >= From8bit((char)c); } bool operator >=(short c) const { return m_value >= (value_type)c; } bool operator >=(unsigned short c) const { return m_value >= (value_type)c; } bool operator >=(int c) const { return m_value >= (value_type)c; } bool operator >=(unsigned int c) const { return m_value >= (value_type)c; } bool operator >=(long c) const { return m_value >= (value_type)c; } bool operator >=(unsigned long c) const { return m_value >= (value_type)c; } bool operator >=(long long c) const { return m_value >= (value_type)c; } bool operator >=(unsigned long long c) const { return m_value >= (value_type)c; } bool operator >=(wchar_t c) const { return m_value >= (value_type)c; } bool operator <=(const wxUniChar& c) const { return m_value <= c.m_value; } bool operator <=(char c) const { return m_value <= From8bit(c); } bool operator <=(unsigned char c) const { return m_value <= From8bit((char)c); } bool operator <=(short c) const { return m_value <= (value_type)c; } bool operator <=(unsigned short c) const { return m_value <= (value_type)c; } bool operator <=(int c) const { return m_value <= (value_type)c; } bool operator <=(unsigned int c) const { return m_value <= (value_type)c; } bool operator <=(long c) const { return m_value <= (value_type)c; } bool operator <=(unsigned long c) const { return m_value <= (value_type)c; } bool operator <=(long long c) const { return m_value <= (value_type)c; } bool operator <=(unsigned long long c) const { return m_value <= (value_type)c; } bool operator <=(wchar_t c) const { return m_value <= (value_type)c; } bool operator >(const wxUniChar& c) const { return m_value > c.m_value; } bool operator >(char c) const { return m_value > From8bit(c); } bool operator >(unsigned char c) const { return m_value > From8bit((char)c); } bool operator >(short c) const { return m_value > (value_type)c; } bool operator >(unsigned short c) const { return m_value > (value_type)c; } bool operator >(int c) const { return m_value > (value_type)c; } bool operator >(unsigned int c) const { return m_value > (value_type)c; } bool operator >(long c) const { return m_value > (value_type)c; } bool operator >(unsigned long c) const { return m_value > (value_type)c; } bool operator >(long long c) const { return m_value > (value_type)c; } bool operator >(unsigned long long c) const { return m_value > (value_type)c; } bool operator >(wchar_t c) const { return m_value > (value_type)c; } bool operator <(const wxUniChar& c) const { return m_value < c.m_value; } bool operator <(char c) const { return m_value < From8bit(c); } bool operator <(unsigned char c) const { return m_value < From8bit((char)c); } bool operator <(short c) const { return m_value < (value_type)c; } bool operator <(unsigned short c) const { return m_value < (value_type)c; } bool operator <(int c) const { return m_value < (value_type)c; } bool operator <(unsigned int c) const { return m_value < (value_type)c; } bool operator <(long c) const { return m_value < (value_type)c; } bool operator <(unsigned long c) const { return m_value < (value_type)c; } bool operator <(long long c) const { return m_value < (value_type)c; } bool operator <(unsigned long long c) const { return m_value < (value_type)c; } bool operator <(wchar_t c) const { return m_value < (value_type)c; }





    int operator-(const wxUniChar& c) const { return m_value - c.m_value; }
    int operator-(char c) const { return m_value - From8bit(c); }
    int operator-(unsigned char c) const { return m_value - From8bit((char)c); }
    int operator-(wchar_t c) const { return m_value - (value_type)c; }


private:


    static value_type From8bit(char c)
    {

        if ( (unsigned char)c < 0x80 )
            return c;

        return FromHi8bit(c);



    }

    static char To8bit(value_type c)
    {

        if ( c < 0x80 )
            return ((char)(c));

        return ToHi8bit(c);



    }


    static value_type FromHi8bit(char c);
    static char ToHi8bit(value_type v);
    static bool GetAsHi8bit(value_type v, char *c);

private:
    value_type m_value;
};






class __attribute__ ((visibility("default"))) wxUniCharRef
{
private:
    typedef wxStringImpl::iterator iterator;





    wxUniCharRef(iterator pos) : m_pos(pos) {}


public:
# 242 "/usr/include/wx-3.1-unofficial/wx/unichar.h"
    static wxUniCharRef CreateForString(iterator pos)
        { return wxUniCharRef(pos); }


    wxUniChar::value_type GetValue() const { return UniChar().GetValue(); }





    bool IsAscii() const { return UniChar().IsAscii(); }
    bool GetAsChar(char *c) const { return UniChar().GetAsChar(c); }

    bool IsBMP() const { return UniChar().IsBMP(); }
    bool IsSupplementary() const { return UniChar().IsSupplementary(); }
    wxUint16 HighSurrogate() const { return UniChar().HighSurrogate(); }
    wxUint16 LowSurrogate() const { return UniChar().LowSurrogate(); }





    wxUniCharRef& operator=(const wxUniChar& c) { *m_pos = c; return *this; }


    wxUniCharRef& operator=(const wxUniCharRef& c)
        { if (&c != this) *this = c.UniChar(); return *this; }


    wxUniCharRef(const wxUniCharRef&) = default;




    wxUniCharRef& operator=(char c) { return *this = wxUniChar(c); } wxUniCharRef& operator=(unsigned char c) { return *this = wxUniChar(c); } wxUniCharRef& operator=(short c) { return *this = wxUniChar(c); } wxUniCharRef& operator=(unsigned short c) { return *this = wxUniChar(c); } wxUniCharRef& operator=(int c) { return *this = wxUniChar(c); } wxUniCharRef& operator=(unsigned int c) { return *this = wxUniChar(c); } wxUniCharRef& operator=(long c) { return *this = wxUniChar(c); } wxUniCharRef& operator=(unsigned long c) { return *this = wxUniChar(c); } wxUniCharRef& operator=(long long c) { return *this = wxUniChar(c); } wxUniCharRef& operator=(unsigned long long c) { return *this = wxUniChar(c); } wxUniCharRef& operator=(wchar_t c) { return *this = wxUniChar(c); }





    operator char() const { return UniChar(); } operator unsigned char() const { return UniChar(); } operator short() const { return UniChar(); } operator unsigned short() const { return UniChar(); } operator int() const { return UniChar(); } operator unsigned int() const { return UniChar(); } operator long() const { return UniChar(); } operator unsigned long() const { return UniChar(); } operator long long() const { return UniChar(); } operator unsigned long long() const { return UniChar(); } operator wchar_t() const { return UniChar(); }



    operator bool() const { return (bool)UniChar(); }
    bool operator!() const { return !UniChar(); }
    bool operator&&(bool v) const { return UniChar() && v; }
# 299 "/usr/include/wx-3.1-unofficial/wx/unichar.h"
    bool operator ==(const wxUniCharRef& c) const { return UniChar() == c.UniChar(); } bool operator ==(const wxUniChar& c) const { return UniChar() == c; } bool operator ==(char c) const { return UniChar() == c; } bool operator ==(unsigned char c) const { return UniChar() == c; } bool operator ==(short c) const { return UniChar() == c; } bool operator ==(unsigned short c) const { return UniChar() == c; } bool operator ==(int c) const { return UniChar() == c; } bool operator ==(unsigned int c) const { return UniChar() == c; } bool operator ==(long c) const { return UniChar() == c; } bool operator ==(unsigned long c) const { return UniChar() == c; } bool operator ==(long long c) const { return UniChar() == c; } bool operator ==(unsigned long long c) const { return UniChar() == c; } bool operator ==(wchar_t c) const { return UniChar() == c; } bool operator !=(const wxUniCharRef& c) const { return UniChar() != c.UniChar(); } bool operator !=(const wxUniChar& c) const { return UniChar() != c; } bool operator !=(char c) const { return UniChar() != c; } bool operator !=(unsigned char c) const { return UniChar() != c; } bool operator !=(short c) const { return UniChar() != c; } bool operator !=(unsigned short c) const { return UniChar() != c; } bool operator !=(int c) const { return UniChar() != c; } bool operator !=(unsigned int c) const { return UniChar() != c; } bool operator !=(long c) const { return UniChar() != c; } bool operator !=(unsigned long c) const { return UniChar() != c; } bool operator !=(long long c) const { return UniChar() != c; } bool operator !=(unsigned long long c) const { return UniChar() != c; } bool operator !=(wchar_t c) const { return UniChar() != c; } bool operator >=(const wxUniCharRef& c) const { return UniChar() >= c.UniChar(); } bool operator >=(const wxUniChar& c) const { return UniChar() >= c; } bool operator >=(char c) const { return UniChar() >= c; } bool operator >=(unsigned char c) const { return UniChar() >= c; } bool operator >=(short c) const { return UniChar() >= c; } bool operator >=(unsigned short c) const { return UniChar() >= c; } bool operator >=(int c) const { return UniChar() >= c; } bool operator >=(unsigned int c) const { return UniChar() >= c; } bool operator >=(long c) const { return UniChar() >= c; } bool operator >=(unsigned long c) const { return UniChar() >= c; } bool operator >=(long long c) const { return UniChar() >= c; } bool operator >=(unsigned long long c) const { return UniChar() >= c; } bool operator >=(wchar_t c) const { return UniChar() >= c; } bool operator <=(const wxUniCharRef& c) const { return UniChar() <= c.UniChar(); } bool operator <=(const wxUniChar& c) const { return UniChar() <= c; } bool operator <=(char c) const { return UniChar() <= c; } bool operator <=(unsigned char c) const { return UniChar() <= c; } bool operator <=(short c) const { return UniChar() <= c; } bool operator <=(unsigned short c) const { return UniChar() <= c; } bool operator <=(int c) const { return UniChar() <= c; } bool operator <=(unsigned int c) const { return UniChar() <= c; } bool operator <=(long c) const { return UniChar() <= c; } bool operator <=(unsigned long c) const { return UniChar() <= c; } bool operator <=(long long c) const { return UniChar() <= c; } bool operator <=(unsigned long long c) const { return UniChar() <= c; } bool operator <=(wchar_t c) const { return UniChar() <= c; } bool operator >(const wxUniCharRef& c) const { return UniChar() > c.UniChar(); } bool operator >(const wxUniChar& c) const { return UniChar() > c; } bool operator >(char c) const { return UniChar() > c; } bool operator >(unsigned char c) const { return UniChar() > c; } bool operator >(short c) const { return UniChar() > c; } bool operator >(unsigned short c) const { return UniChar() > c; } bool operator >(int c) const { return UniChar() > c; } bool operator >(unsigned int c) const { return UniChar() > c; } bool operator >(long c) const { return UniChar() > c; } bool operator >(unsigned long c) const { return UniChar() > c; } bool operator >(long long c) const { return UniChar() > c; } bool operator >(unsigned long long c) const { return UniChar() > c; } bool operator >(wchar_t c) const { return UniChar() > c; } bool operator <(const wxUniCharRef& c) const { return UniChar() < c.UniChar(); } bool operator <(const wxUniChar& c) const { return UniChar() < c; } bool operator <(char c) const { return UniChar() < c; } bool operator <(unsigned char c) const { return UniChar() < c; } bool operator <(short c) const { return UniChar() < c; } bool operator <(unsigned short c) const { return UniChar() < c; } bool operator <(int c) const { return UniChar() < c; } bool operator <(unsigned int c) const { return UniChar() < c; } bool operator <(long c) const { return UniChar() < c; } bool operator <(unsigned long c) const { return UniChar() < c; } bool operator <(long long c) const { return UniChar() < c; } bool operator <(unsigned long long c) const { return UniChar() < c; } bool operator <(wchar_t c) const { return UniChar() < c; }





    int operator-(const wxUniCharRef& c) const { return UniChar() - c.UniChar(); }
    int operator-(const wxUniChar& c) const { return UniChar() - c; }
    int operator-(char c) const { return UniChar() - c; }
    int operator-(unsigned char c) const { return UniChar() - c; }
    int operator-(wchar_t c) const { return UniChar() - c; }

private:



    wxUniChar UniChar() const { return *m_pos; }


    friend class wxUniChar;

private:




    iterator m_pos;
};

inline wxUniChar::wxUniChar(const wxUniCharRef& c)
{
    m_value = c.UniChar().m_value;
}

inline wxUniChar& wxUniChar::operator=(const wxUniCharRef& c)
{
    m_value = c.UniChar().m_value;
    return *this;
}







namespace std
{

template <>
inline
void swap<wxUniCharRef>(wxUniCharRef& lhs, wxUniCharRef& rhs)
{
    if ( &lhs != &rhs )
    {




        wxUniChar tmp = lhs;
        lhs = rhs;
        rhs = tmp;
    }
}

}
# 373 "/usr/include/wx-3.1-unofficial/wx/unichar.h"
inline
void swap(wxUniCharRef&& lhs, wxUniCharRef&& rhs)
{
    wxUniChar tmp = lhs;
    lhs = rhs;
    rhs = tmp;
}







inline bool operator ==(char x, const wxUniChar& y) { return y == x; } inline bool operator !=(char x, const wxUniChar& y) { return y != x; } inline bool operator >=(char x, const wxUniChar& y) { return y <= x; } inline bool operator <=(char x, const wxUniChar& y) { return y >= x; } inline bool operator >(char x, const wxUniChar& y) { return y < x; } inline bool operator <(char x, const wxUniChar& y) { return y > x; }
inline bool operator ==(char x, const wxUniCharRef& y) { return y == x; } inline bool operator !=(char x, const wxUniCharRef& y) { return y != x; } inline bool operator >=(char x, const wxUniCharRef& y) { return y <= x; } inline bool operator <=(char x, const wxUniCharRef& y) { return y >= x; } inline bool operator >(char x, const wxUniCharRef& y) { return y < x; } inline bool operator <(char x, const wxUniCharRef& y) { return y > x; }

inline bool operator ==(wchar_t x, const wxUniChar& y) { return y == x; } inline bool operator !=(wchar_t x, const wxUniChar& y) { return y != x; } inline bool operator >=(wchar_t x, const wxUniChar& y) { return y <= x; } inline bool operator <=(wchar_t x, const wxUniChar& y) { return y >= x; } inline bool operator >(wchar_t x, const wxUniChar& y) { return y < x; } inline bool operator <(wchar_t x, const wxUniChar& y) { return y > x; }
inline bool operator ==(wchar_t x, const wxUniCharRef& y) { return y == x; } inline bool operator !=(wchar_t x, const wxUniCharRef& y) { return y != x; } inline bool operator >=(wchar_t x, const wxUniCharRef& y) { return y <= x; } inline bool operator <=(wchar_t x, const wxUniCharRef& y) { return y >= x; } inline bool operator >(wchar_t x, const wxUniCharRef& y) { return y < x; } inline bool operator <(wchar_t x, const wxUniCharRef& y) { return y > x; }

inline bool operator ==(const wxUniChar& x, const wxUniCharRef& y) { return y == x; } inline bool operator !=(const wxUniChar& x, const wxUniCharRef& y) { return y != x; } inline bool operator >=(const wxUniChar& x, const wxUniCharRef& y) { return y <= x; } inline bool operator <=(const wxUniChar& x, const wxUniCharRef& y) { return y >= x; } inline bool operator >(const wxUniChar& x, const wxUniCharRef& y) { return y < x; } inline bool operator <(const wxUniChar& x, const wxUniCharRef& y) { return y > x; }


inline int operator-(char c1, const wxUniCharRef& c2) { return -(c2 - c1); }
inline int operator-(const wxUniChar& c1, const wxUniCharRef& c2) { return -(c2 - c1); }
inline int operator-(wchar_t c1, const wxUniCharRef& c2) { return -(c2 - c1); }
# 20 "/usr/include/wx-3.1-unofficial/wx/strvararg.h" 2
# 31 "/usr/include/wx-3.1-unofficial/wx/strvararg.h"
class wxCStrData;
class wxString;




# 36 "/usr/include/wx-3.1-unofficial/wx/strvararg.h"
#pragma GCC diagnostic push
# 36 "/usr/include/wx-3.1-unofficial/wx/strvararg.h"

# 36 "/usr/include/wx-3.1-unofficial/wx/strvararg.h"
#pragma GCC diagnostic ignored "-Wctor-dtor-privacy"
# 36 "/usr/include/wx-3.1-unofficial/wx/strvararg.h"

# 137 "/usr/include/wx-3.1-unofficial/wx/strvararg.h"
class __attribute__ ((visibility("default"))) wxFormatString
{
public:

    wxFormatString(const char *str)
        : m_char(wxScopedCharBuffer::CreateNonOwned(str)), m_str(
# 142 "/usr/include/wx-3.1-unofficial/wx/strvararg.h" 3 4
                                                                __null
# 142 "/usr/include/wx-3.1-unofficial/wx/strvararg.h"
                                                                    ), m_cstr(
# 142 "/usr/include/wx-3.1-unofficial/wx/strvararg.h" 3 4
                                                                              __null
# 142 "/usr/include/wx-3.1-unofficial/wx/strvararg.h"
                                                                                  ) {}

    wxFormatString(const wchar_t *str)
        : m_wchar(wxScopedWCharBuffer::CreateNonOwned(str)), m_str(
# 145 "/usr/include/wx-3.1-unofficial/wx/strvararg.h" 3 4
                                                                  __null
# 145 "/usr/include/wx-3.1-unofficial/wx/strvararg.h"
                                                                      ), m_cstr(
# 145 "/usr/include/wx-3.1-unofficial/wx/strvararg.h" 3 4
                                                                                __null
# 145 "/usr/include/wx-3.1-unofficial/wx/strvararg.h"
                                                                                    ) {}
    wxFormatString(const wxString& str)
        : m_str(&str), m_cstr(
# 147 "/usr/include/wx-3.1-unofficial/wx/strvararg.h" 3 4
                             __null
# 147 "/usr/include/wx-3.1-unofficial/wx/strvararg.h"
                                 ) {}
    wxFormatString(const wxCStrData& str)
        : m_str(
# 149 "/usr/include/wx-3.1-unofficial/wx/strvararg.h" 3 4
               __null
# 149 "/usr/include/wx-3.1-unofficial/wx/strvararg.h"
                   ), m_cstr(&str) {}

    wxFormatString(const wxScopedCharBuffer& str)
        : m_char(str), m_str(
# 152 "/usr/include/wx-3.1-unofficial/wx/strvararg.h" 3 4
                            __null
# 152 "/usr/include/wx-3.1-unofficial/wx/strvararg.h"
                                ), m_cstr(
# 152 "/usr/include/wx-3.1-unofficial/wx/strvararg.h" 3 4
                                          __null
# 152 "/usr/include/wx-3.1-unofficial/wx/strvararg.h"
                                              ) {}

    wxFormatString(const wxScopedWCharBuffer& str)
        : m_wchar(str), m_str(
# 155 "/usr/include/wx-3.1-unofficial/wx/strvararg.h" 3 4
                             __null
# 155 "/usr/include/wx-3.1-unofficial/wx/strvararg.h"
                                 ), m_cstr(
# 155 "/usr/include/wx-3.1-unofficial/wx/strvararg.h" 3 4
                                           __null
# 155 "/usr/include/wx-3.1-unofficial/wx/strvararg.h"
                                               ) {}





    enum ArgumentType
    {
        Arg_Unused = 0,


        Arg_Char = 0x0001,
        Arg_Pointer = 0x0002,
        Arg_String = 0x0004 | Arg_Pointer,

        Arg_Int = 0x0008 | Arg_Char,



        Arg_LongInt = 0x0010,


        Arg_LongLongInt = Arg_LongInt,




        Arg_Double = 0x0040,
        Arg_LongDouble = 0x0080,




        Arg_Size_t = Arg_LongInt,






        Arg_IntPtr = 0x0200,
        Arg_ShortIntPtr = 0x0400,
        Arg_LongIntPtr = 0x0800,

        Arg_Unknown = 0x8000
    };





    ArgumentType GetArgumentType(unsigned n) const;



    wxString InputAsString() const;
# 226 "/usr/include/wx-3.1-unofficial/wx/strvararg.h"
public:
    operator const wchar_t*() const
        { return const_cast<wxFormatString*>(this)->AsWChar(); }
private:
    const wchar_t* InputAsWChar();
    const wchar_t* AsWChar();
    wxScopedWCharBuffer m_convertedWChar;


private:
    wxScopedCharBuffer m_char;
    wxScopedWCharBuffer m_wchar;




    const wxString * const m_str;
    const wxCStrData * const m_cstr;

    private: wxFormatString& operator=(const wxFormatString&) = delete;
};



struct wxFormatStringArgument
{
    wxFormatStringArgument(const wxFormatString *s = 
# 252 "/usr/include/wx-3.1-unofficial/wx/strvararg.h" 3 4
                                                    __null
# 252 "/usr/include/wx-3.1-unofficial/wx/strvararg.h"
                                                        ) : m_str(s) {}
    const wxFormatString *m_str;


    wxFormatStringArgument operator,(const wxFormatStringArgument& a) const
    {
        do { if ( m_str == 
# 258 "/usr/include/wx-3.1-unofficial/wx/strvararg.h" 3 4
       __null 
# 258 "/usr/include/wx-3.1-unofficial/wx/strvararg.h"
       || a.m_str == 
# 258 "/usr/include/wx-3.1-unofficial/wx/strvararg.h" 3 4
       __null 
# 258 "/usr/include/wx-3.1-unofficial/wx/strvararg.h"
       ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/strvararg.h", 258, __FUNCTION__, "m_str == __null || a.m_str == __null", "can't have two format strings in vararg function"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 )
                                                                          ;
        return wxFormatStringArgument(m_str ? m_str : a.m_str);
    }

    operator const wxFormatString*() const { return m_str; }
};

template<typename T>
struct wxFormatStringArgumentFinder
{
    static wxFormatStringArgument find(T)
    {

        return wxFormatStringArgument();
    }
};

template<>
struct wxFormatStringArgumentFinder<const wxFormatString&>
{
    static wxFormatStringArgument find(const wxFormatString& arg)
        { return wxFormatStringArgument(&arg); }
};

template<>
struct wxFormatStringArgumentFinder<wxFormatString>
    : public wxFormatStringArgumentFinder<const wxFormatString&> {};



template<>
struct wxFormatStringArgumentFinder<wxString>
    : public wxFormatStringArgumentFinder<const wxString&> {};

template<>
struct wxFormatStringArgumentFinder<wxScopedCharBuffer>
    : public wxFormatStringArgumentFinder<const wxScopedCharBuffer&> {




};

template<>
struct wxFormatStringArgumentFinder<wxScopedWCharBuffer>
    : public wxFormatStringArgumentFinder<const wxScopedWCharBuffer&> {};

template<>
struct wxFormatStringArgumentFinder<wxCharBuffer>
    : public wxFormatStringArgumentFinder<const wxCharBuffer&> {




};

template<>
struct wxFormatStringArgumentFinder<wxWCharBuffer>
    : public wxFormatStringArgumentFinder<const wxWCharBuffer&> {};
# 350 "/usr/include/wx-3.1-unofficial/wx/strvararg.h"
template<bool IsEnum>
struct wxFormatStringSpecifierNonPodType {};

template<>
struct wxFormatStringSpecifierNonPodType<true>
{
    enum { value = wxFormatString::Arg_Int };
};

template<typename T>
struct wxFormatStringSpecifier
{

    typedef std::is_enum<T> is_enum;



    enum { value = wxFormatStringSpecifierNonPodType<is_enum::value>::value };
};
# 389 "/usr/include/wx-3.1-unofficial/wx/strvararg.h"
template<typename T>
struct wxFormatStringSpecifier<T*>
{
    enum { value = wxFormatString::Arg_Pointer };
};

template<typename T>
struct wxFormatStringSpecifier<const T*>
{
    enum { value = wxFormatString::Arg_Pointer };
};
# 415 "/usr/include/wx-3.1-unofficial/wx/strvararg.h"
template<> struct wxFormatStringSpecifier<bool> { enum { value = wxFormatString::Arg_Int }; };
template<> struct wxFormatStringSpecifier<int> { enum { value = wxFormatString::Arg_Int }; };
template<> struct wxFormatStringSpecifier<unsigned int> { enum { value = wxFormatString::Arg_Int }; };
template<> struct wxFormatStringSpecifier<short int> { enum { value = wxFormatString::Arg_Int }; };
template<> struct wxFormatStringSpecifier<short unsigned int> { enum { value = wxFormatString::Arg_Int }; };
template<> struct wxFormatStringSpecifier<long int> { enum { value = wxFormatString::Arg_LongInt }; };
template<> struct wxFormatStringSpecifier<long unsigned int> { enum { value = wxFormatString::Arg_LongInt }; };

template<> struct wxFormatStringSpecifier<long long> { enum { value = wxFormatString::Arg_LongLongInt }; };
template<> struct wxFormatStringSpecifier<unsigned long long> { enum { value = wxFormatString::Arg_LongLongInt }; };

template<> struct wxFormatStringSpecifier<float> { enum { value = wxFormatString::Arg_Double }; };
template<> struct wxFormatStringSpecifier<double> { enum { value = wxFormatString::Arg_Double }; };
template<> struct wxFormatStringSpecifier<long double> { enum { value = wxFormatString::Arg_LongDouble }; };


template<> struct wxFormatStringSpecifier<wchar_t> { enum { value = wxFormatString::Arg_Char | wxFormatString::Arg_Int }; };
# 441 "/usr/include/wx-3.1-unofficial/wx/strvararg.h"
template<> struct wxFormatStringSpecifier<char*> { enum { value = wxFormatString::Arg_String }; };
template<> struct wxFormatStringSpecifier<unsigned char*> { enum { value = wxFormatString::Arg_String }; };
template<> struct wxFormatStringSpecifier<signed char*> { enum { value = wxFormatString::Arg_String }; };
template<> struct wxFormatStringSpecifier<const char*> { enum { value = wxFormatString::Arg_String }; };
template<> struct wxFormatStringSpecifier<const unsigned char*> { enum { value = wxFormatString::Arg_String }; };
template<> struct wxFormatStringSpecifier<const signed char*> { enum { value = wxFormatString::Arg_String }; };
# 455 "/usr/include/wx-3.1-unofficial/wx/strvararg.h"
template<> struct wxFormatStringSpecifier<wchar_t*> { enum { value = wxFormatString::Arg_String }; };
template<> struct wxFormatStringSpecifier<const wchar_t*> { enum { value = wxFormatString::Arg_String }; };

template<> struct wxFormatStringSpecifier<int*> { enum { value = wxFormatString::Arg_IntPtr | wxFormatString::Arg_Pointer }; };
template<> struct wxFormatStringSpecifier<short int*> { enum { value = wxFormatString::Arg_ShortIntPtr | wxFormatString::Arg_Pointer }; };
template<> struct wxFormatStringSpecifier<long int*> { enum { value = wxFormatString::Arg_LongIntPtr | wxFormatString::Arg_Pointer }; };


template<> struct wxFormatStringSpecifier<std::nullptr_t> { enum { value = wxFormatString::Arg_Pointer }; };
# 473 "/usr/include/wx-3.1-unofficial/wx/strvararg.h"
template<typename T>
struct wxArgNormalizer
{




    wxArgNormalizer(T value,
                    const wxFormatString *fmt, unsigned index)
        : m_value(value)
    {
        do { if ( !fmt ) break; const int argtype = fmt->GetArgumentType(index); do { if ( (argtype & (wxFormatStringSpecifier<T>::value)) == argtype ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/strvararg.h", 484, __FUNCTION__, "(argtype & (wxFormatStringSpecifier<T>::value)) == argtype", "format specifier doesn't match argument type"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); } while ( (void)0, 0 );
    }




    T get() const { return m_value; }

    T m_value;
};





template<typename T>
struct wxArgNormalizerWchar : public wxArgNormalizer<T>
{
    wxArgNormalizerWchar(T value,
                         const wxFormatString *fmt, unsigned index)
        : wxArgNormalizer<T>(value, fmt, index) {}
};
# 532 "/usr/include/wx-3.1-unofficial/wx/strvararg.h"
template<typename CharType>
struct wxArgNormalizerWithBuffer
{
    typedef wxScopedCharTypeBuffer<CharType> CharBuffer;

    wxArgNormalizerWithBuffer() {}
    wxArgNormalizerWithBuffer(const CharBuffer& buf,
                              const wxFormatString *fmt,
                              unsigned index)
        : m_value(buf)
    {
        do { if ( !fmt ) break; const int argtype = fmt->GetArgumentType(index); do { if ( (argtype & (wxFormatString::Arg_String)) == argtype ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/strvararg.h", 543, __FUNCTION__, "(argtype & (wxFormatString::Arg_String)) == argtype", "format specifier doesn't match argument type"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); } while ( (void)0, 0 );
    }

    const CharType *get() const { return m_value; }

    CharBuffer m_value;
};


template<>
struct __attribute__ ((visibility("default"))) wxArgNormalizerWchar<const wxString&>
{
    wxArgNormalizerWchar(const wxString& s,
                          const wxFormatString *fmt,
                          unsigned index)
        : m_value(s)
    {
        do { if ( !fmt ) break; const int argtype = fmt->GetArgumentType(index); do { if ( (argtype & (wxFormatString::Arg_String)) == argtype ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/strvararg.h", 560, __FUNCTION__, "(argtype & (wxFormatString::Arg_String)) == argtype", "format specifier doesn't match argument type"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); } while ( (void)0, 0 );
    }

    const wxStringCharType *get() const;

    const wxString& m_value;
};


template<>
struct __attribute__ ((visibility("default"))) wxArgNormalizerWchar<const wxCStrData&>
{
    wxArgNormalizerWchar(const wxCStrData& value,
                          const wxFormatString *fmt,
                          unsigned index)
        : m_value(value)
    {
        do { if ( !fmt ) break; const int argtype = fmt->GetArgumentType(index); do { if ( (argtype & (wxFormatString::Arg_String)) == argtype ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/strvararg.h", 577, __FUNCTION__, "(argtype & (wxFormatString::Arg_String)) == argtype", "format specifier doesn't match argument type"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); } while ( (void)0, 0 );
    }

    const wxStringCharType *get() const;

    const wxCStrData& m_value;
};
# 610 "/usr/include/wx-3.1-unofficial/wx/strvararg.h"
template<>
struct wxArgNormalizerWchar<const char*>
    : public wxArgNormalizerWithBuffer<wchar_t>
{
    wxArgNormalizerWchar(const char* s,
                         const wxFormatString *fmt, unsigned index)
        : wxArgNormalizerWithBuffer<wchar_t>(wxGet_wxConvLibc().cMB2WC(s), fmt, index) {}
};
# 760 "/usr/include/wx-3.1-unofficial/wx/strvararg.h"
template<> struct wxArgNormalizerWchar<wxString> : public wxArgNormalizerWchar<const wxString&> { wxArgNormalizerWchar(const wxString& value, const wxFormatString *fmt, unsigned index) : wxArgNormalizerWchar<const wxString&>(value, fmt, index) {} };
template<> struct wxArgNormalizerWchar<wxCStrData> : public wxArgNormalizerWchar<const wxCStrData&> { wxArgNormalizerWchar(const wxCStrData& value, const wxFormatString *fmt, unsigned index) : wxArgNormalizerWchar<const wxCStrData&>(value, fmt, index) {} };



template<> struct wxArgNormalizerWchar<char*> : public wxArgNormalizerWchar<const char*> { wxArgNormalizerWchar(const char* value, const wxFormatString *fmt, unsigned index) : wxArgNormalizerWchar<const char*>(value, fmt, index) {} };

template<> struct wxArgNormalizerWchar<wchar_t*> : public wxArgNormalizerWchar<const wchar_t*> { wxArgNormalizerWchar(const wchar_t* value, const wxFormatString *fmt, unsigned index) : wxArgNormalizerWchar<const wchar_t*>(value, fmt, index) {} };



template<> struct wxArgNormalizerWchar<wxScopedCharBuffer> : public wxArgNormalizerWchar<const char*> { wxArgNormalizerWchar(const char* value, const wxFormatString *fmt, unsigned index) : wxArgNormalizerWchar<const char*>(value, fmt, index) {} };
template<> struct wxArgNormalizerWchar<const wxScopedCharBuffer&> : public wxArgNormalizerWchar<const char*> { wxArgNormalizerWchar(const char* value, const wxFormatString *fmt, unsigned index) : wxArgNormalizerWchar<const char*>(value, fmt, index) {} };

template<> struct wxArgNormalizerWchar<wxScopedWCharBuffer> : public wxArgNormalizerWchar<const wchar_t*> { wxArgNormalizerWchar(const wchar_t* value, const wxFormatString *fmt, unsigned index) : wxArgNormalizerWchar<const wchar_t*>(value, fmt, index) {} };
template<> struct wxArgNormalizerWchar<const wxScopedWCharBuffer&> : public wxArgNormalizerWchar<const wchar_t*> { wxArgNormalizerWchar(const wchar_t* value, const wxFormatString *fmt, unsigned index) : wxArgNormalizerWchar<const wchar_t*>(value, fmt, index) {} };

template<> struct wxArgNormalizerWchar<wxCharBuffer> : public wxArgNormalizerWchar<const char*> { wxArgNormalizerWchar(const char* value, const wxFormatString *fmt, unsigned index) : wxArgNormalizerWchar<const char*>(value, fmt, index) {} };
template<> struct wxArgNormalizerWchar<const wxCharBuffer&> : public wxArgNormalizerWchar<const char*> { wxArgNormalizerWchar(const char* value, const wxFormatString *fmt, unsigned index) : wxArgNormalizerWchar<const char*>(value, fmt, index) {} };

template<> struct wxArgNormalizerWchar<wxWCharBuffer> : public wxArgNormalizerWchar<const wchar_t*> { wxArgNormalizerWchar(const wchar_t* value, const wxFormatString *fmt, unsigned index) : wxArgNormalizerWchar<const wchar_t*>(value, fmt, index) {} };
template<> struct wxArgNormalizerWchar<const wxWCharBuffer&> : public wxArgNormalizerWchar<const wchar_t*> { wxArgNormalizerWchar(const wchar_t* value, const wxFormatString *fmt, unsigned index) : wxArgNormalizerWchar<const wchar_t*>(value, fmt, index) {} };
# 790 "/usr/include/wx-3.1-unofficial/wx/strvararg.h"
template<>
struct wxArgNormalizerWchar<const std::string&>
    : public wxArgNormalizerWchar<const char*>
{
    wxArgNormalizerWchar(const std::string& s,
                         const wxFormatString *fmt, unsigned index)
        : wxArgNormalizerWchar<const char*>(s.c_str(), fmt, index) {}
};


template<>
struct wxArgNormalizerWchar<const wxStdWideString&>
    : public wxArgNormalizerWchar<const wchar_t*>
{
    wxArgNormalizerWchar(const wxStdWideString& s,
                         const wxFormatString *fmt, unsigned index)
        : wxArgNormalizerWchar<const wchar_t*>(s.c_str(), fmt, index) {}
};
# 833 "/usr/include/wx-3.1-unofficial/wx/strvararg.h"
template<> struct wxArgNormalizerWchar<std::string> : public wxArgNormalizerWchar<const std::string&> { wxArgNormalizerWchar(const std::string& value, const wxFormatString *fmt, unsigned index) : wxArgNormalizerWchar<const std::string&>(value, fmt, index) {} };

template<> struct wxArgNormalizerWchar<wxStdWideString> : public wxArgNormalizerWchar<const wxStdWideString&> { wxArgNormalizerWchar(const wxStdWideString& value, const wxFormatString *fmt, unsigned index) : wxArgNormalizerWchar<const wxStdWideString&>(value, fmt, index) {} };






template<>
struct wxArgNormalizer<const wxUniChar&> : public wxArgNormalizer<wchar_t>
{
    wxArgNormalizer(const wxUniChar& s,
                    const wxFormatString *fmt, unsigned index)
        : wxArgNormalizer<wchar_t>(((wchar_t)(s.GetValue())), fmt, index) {}
};
# 858 "/usr/include/wx-3.1-unofficial/wx/strvararg.h"
template<typename T>
struct wxArgNormalizerNarrowChar
{
    wxArgNormalizerNarrowChar(T value,
                              const wxFormatString *fmt, unsigned index)
    {
        do { if ( !fmt ) break; const int argtype = fmt->GetArgumentType(index); do { if ( (argtype & (wxFormatString::Arg_Char | wxFormatString::Arg_Int)) == argtype ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/strvararg.h", 864, __FUNCTION__, "(argtype & (wxFormatString::Arg_Char | wxFormatString::Arg_Int)) == argtype", "format specifier doesn't match argument type"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); } while ( (void)0, 0 )
                                                                               ;



        if ( !fmt || fmt->GetArgumentType(index) == wxFormatString::Arg_Char )
            m_value = ((T)(wxUniChar(value).GetValue()));
        else
            m_value = value;
    }

    int get() const { return m_value; }

    T m_value;
};

template<>
struct wxArgNormalizer<char> : public wxArgNormalizerNarrowChar<char>
{
    wxArgNormalizer(char value,
                    const wxFormatString *fmt, unsigned index)
        : wxArgNormalizerNarrowChar<char>(value, fmt, index) {}
};

template<>
struct wxArgNormalizer<unsigned char>
    : public wxArgNormalizerNarrowChar<unsigned char>
{
    wxArgNormalizer(unsigned char value,
                    const wxFormatString *fmt, unsigned index)
        : wxArgNormalizerNarrowChar<unsigned char>(value, fmt, index) {}
};

template<>
struct wxArgNormalizer<signed char>
    : public wxArgNormalizerNarrowChar<signed char>
{
    wxArgNormalizer(signed char value,
                    const wxFormatString *fmt, unsigned index)
        : wxArgNormalizerNarrowChar<signed char>(value, fmt, index) {}
};




template<> struct wxArgNormalizerWchar<wxUniChar> : public wxArgNormalizerWchar<const wxUniChar&> { wxArgNormalizerWchar(const wxUniChar& value, const wxFormatString *fmt, unsigned index) : wxArgNormalizerWchar<const wxUniChar&>(value, fmt, index) {} };
template<> struct wxArgNormalizerWchar<const wxUniCharRef&> : public wxArgNormalizerWchar<const wxUniChar&> { wxArgNormalizerWchar(const wxUniChar& value, const wxFormatString *fmt, unsigned index) : wxArgNormalizerWchar<const wxUniChar&>(value, fmt, index) {} };
template<> struct wxArgNormalizerWchar<wxUniCharRef> : public wxArgNormalizerWchar<const wxUniChar&> { wxArgNormalizerWchar(const wxUniChar& value, const wxFormatString *fmt, unsigned index) : wxArgNormalizerWchar<const wxUniChar&>(value, fmt, index) {} };
template<> struct wxArgNormalizerWchar<const wchar_t&> : public wxArgNormalizerWchar<wchar_t> { wxArgNormalizerWchar(wchar_t value, const wxFormatString *fmt, unsigned index) : wxArgNormalizerWchar<wchar_t>(value, fmt, index) {} };

template<> struct wxArgNormalizerWchar<const char&> : public wxArgNormalizerWchar<char> { wxArgNormalizerWchar(char value, const wxFormatString *fmt, unsigned index) : wxArgNormalizerWchar<char>(value, fmt, index) {} };
template<> struct wxArgNormalizerWchar<const unsigned char&> : public wxArgNormalizerWchar<unsigned char> { wxArgNormalizerWchar(unsigned char value, const wxFormatString *fmt, unsigned index) : wxArgNormalizerWchar<unsigned char>(value, fmt, index) {} };
template<> struct wxArgNormalizerWchar<const signed char&> : public wxArgNormalizerWchar<signed char> { wxArgNormalizerWchar(signed char value, const wxFormatString *fmt, unsigned index) : wxArgNormalizerWchar<signed char>(value, fmt, index) {} };
# 931 "/usr/include/wx-3.1-unofficial/wx/strvararg.h"
struct __attribute__ ((visibility("default"))) wxArgNormalizedString
{
    wxArgNormalizedString(const void* ptr) : m_ptr(ptr) {}


    bool IsValid() const { return m_ptr != 
# 936 "/usr/include/wx-3.1-unofficial/wx/strvararg.h" 3 4
                                          __null
# 936 "/usr/include/wx-3.1-unofficial/wx/strvararg.h"
                                              ; }
    operator bool() const { return IsValid(); }


    wxString GetString() const;
    operator wxString() const;

private:
    const void *m_ptr;
};
# 1255 "/usr/include/wx-3.1-unofficial/wx/strvararg.h"

# 1255 "/usr/include/wx-3.1-unofficial/wx/strvararg.h"
#pragma GCC diagnostic pop
# 1255 "/usr/include/wx-3.1-unofficial/wx/strvararg.h"

# 38 "/usr/include/wx-3.1-unofficial/wx/string.h" 2



# 1 "/usr/include/wx-3.1-unofficial/wx/stringops.h" 1
# 27 "/usr/include/wx-3.1-unofficial/wx/stringops.h"
struct __attribute__ ((visibility("default"))) wxStringOperationsWchar
{

    template <typename Iterator>
    static void IncIter(Iterator& i) { ++i; }


    template <typename Iterator>
    static void DecIter(Iterator& i) { --i; }


    template <typename Iterator>
    static Iterator AddToIter(const Iterator& i, ptrdiff_t n)
        { return i + n; }


    template <typename Iterator>
    static ptrdiff_t DiffIters(const Iterator& i1, const Iterator& i2)
        { return i1 - i2; }
# 64 "/usr/include/wx-3.1-unofficial/wx/stringops.h"
    struct SingleCharBuffer
    {
        wxChar data[2];
        operator const wxChar*() const { return data; }
    };
    static SingleCharBuffer EncodeChar(const wxUniChar& ch)
    {
        SingleCharBuffer buf;
        buf.data[0] = (wxChar)ch;
        buf.data[1] = 0;
        return buf;
    }
    static wxWCharBuffer EncodeNChars(size_t n, const wxUniChar& ch);
    static bool IsSingleCodeUnitCharacter(const wxUniChar&) { return true; }


    static wxUniChar DecodeChar(const wxStringImpl::const_iterator& i)
        { return *i; }
};
# 201 "/usr/include/wx-3.1-unofficial/wx/stringops.h"
typedef wxStringOperationsWchar wxStringOperations;
# 42 "/usr/include/wx-3.1-unofficial/wx/string.h" 2
# 76 "/usr/include/wx-3.1-unofficial/wx/string.h"
class wxString;
# 97 "/usr/include/wx-3.1-unofficial/wx/string.h"
namespace wxPrivate
{
    template <typename T> struct wxStringAsBufHelper;
}
# 152 "/usr/include/wx-3.1-unofficial/wx/string.h"
class wxCStrData
{
private:

    wxCStrData(const wxString *str, size_t offset = 0, bool owned = false)
        : m_str(str), m_offset(offset), m_owned(owned) {}

public:



    inline wxCStrData(char *buf);

    inline wxCStrData(wchar_t *buf);
    inline wxCStrData(const wxCStrData& data);

    inline ~wxCStrData();
# 179 "/usr/include/wx-3.1-unofficial/wx/string.h"
    inline const wchar_t* AsWChar() const;
    operator const wchar_t*() const { return AsWChar(); }


    inline const char* AsChar() const;
    const unsigned char* AsUnsignedChar() const
        { return (const unsigned char *) AsChar(); }
    operator const char*() const { return AsChar(); }
    operator const unsigned char*() const { return AsUnsignedChar(); }

    operator const void*() const { return AsChar(); }


    const wxScopedCharBuffer AsCharBuf() const
    {
        return wxScopedCharBuffer::CreateNonOwned(AsChar());
    }


    const wxScopedWCharBuffer AsWCharBuf() const
    {
        return wxScopedWCharBuffer::CreateNonOwned(AsWChar());
    }

    inline wxString AsString() const;



    const wxStringCharType *AsInternal() const;


    inline wxUniChar operator[](size_t n) const;
    wxUniChar operator[](int n) const { return operator[](size_t(n)); }
    wxUniChar operator[](long n) const { return operator[](size_t(n)); }

    wxUniChar operator[](unsigned int n) const { return operator[](size_t(n)); }







    wxCStrData operator+(int n) const
        { return wxCStrData(m_str, m_offset + n, m_owned); }
    wxCStrData operator+(long n) const
        { return wxCStrData(m_str, m_offset + n, m_owned); }
    wxCStrData operator+(size_t n) const
        { return wxCStrData(m_str, m_offset + n, m_owned); }




    wxCStrData operator-(ptrdiff_t n) const
    {
        do { if ( n <= (ptrdiff_t)m_offset ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/string.h", 234, __FUNCTION__, "n <= (ptrdiff_t)m_offset", L"attempt to construct address before the beginning of the string"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 )
                                                                                              ;
        return wxCStrData(m_str, m_offset - n, m_owned);
    }



    inline wxUniChar operator*() const;

private:

    const wxString *m_str;






    size_t m_offset;

    bool m_owned;

    friend class wxString;
};
# 301 "/usr/include/wx-3.1-unofficial/wx/string.h"
class __attribute__ ((visibility("default"))) wxString
{



public:

  static const size_t npos;

private:







  wxString& operator=(int);





  wxString(int);
# 336 "/usr/include/wx-3.1-unofficial/wx/string.h"
  template<typename T>
  struct SubstrBufFromType
  {
      T data;
      size_t len;

      SubstrBufFromType(const T& data_, size_t len_)
          : data(data_), len(len_)
      {
          do { if ( len != npos ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/string.h", 345, __FUNCTION__, "len != npos", "must have real length"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );
      }
  };






  typedef SubstrBufFromType<const wchar_t*> SubstrBufFromWC;
  typedef SubstrBufFromType<wxScopedWCharBuffer> SubstrBufFromMB;
# 373 "/usr/include/wx-3.1-unofficial/wx/string.h"
  static SubstrBufFromMB ConvertStr(const char *psz, size_t nLength,
                                    const wxMBConv& conv);
# 383 "/usr/include/wx-3.1-unofficial/wx/string.h"
  static const wchar_t* ImplStr(const wchar_t* str)
    { return str ? str : L""; }
  static const SubstrBufFromWC ImplStr(const wchar_t* str, size_t n)
    { return SubstrBufFromWC(str, (str && n == npos) ? wcslen(str) : n); }
  static wxScopedWCharBuffer ImplStr(const char* str,
                                     const wxMBConv& conv = wxGet_wxConvLibc())
    { return ConvertStr(str, npos, conv).data; }
  static SubstrBufFromMB ImplStr(const char* str, size_t n,
                                 const wxMBConv& conv = wxGet_wxConvLibc())
    { return ConvertStr(str, n, conv); }
# 410 "/usr/include/wx-3.1-unofficial/wx/string.h"
  static size_t PosToImpl(size_t pos) { return pos; }
  static void PosLenToImpl(size_t pos, size_t len,
                           size_t *implPos, size_t *implLen)
    { *implPos = pos; *implLen = len; }
  static size_t LenToImpl(size_t len) { return len; }
  static size_t PosFromImpl(size_t pos) { return pos; }
# 744 "/usr/include/wx-3.1-unofficial/wx/string.h"
public:

  typedef wxUniChar value_type;
  typedef wxUniChar char_type;
  typedef wxUniCharRef reference;
  typedef wxChar* pointer;
  typedef const wxChar* const_pointer;

  typedef size_t size_type;
  typedef const wxUniChar const_reference;
# 837 "/usr/include/wx-3.1-unofficial/wx/string.h"
  class const_iterator;
# 963 "/usr/include/wx-3.1-unofficial/wx/string.h"
  class __attribute__ ((visibility("default"))) iterator
  {
      private: typedef wxStringImpl::iterator underlying_iterator; public: typedef std::random_access_iterator_tag iterator_category; typedef wxUniChar value_type; typedef ptrdiff_t difference_type; typedef wxUniCharRef reference; typedef wxChar* pointer; reference operator[](size_t n) const { return *(*this + n); } iterator& operator++() { wxStringOperations::IncIter(m_cur); return *this; } iterator& operator--() { wxStringOperations::DecIter(m_cur); return *this; } iterator operator++(int) { iterator tmp = *this; wxStringOperations::IncIter(m_cur); return tmp; } iterator operator--(int) { iterator tmp = *this; wxStringOperations::DecIter(m_cur); return tmp; } iterator& operator+=(ptrdiff_t n) { m_cur = wxStringOperations::AddToIter(m_cur, n); return *this; } iterator& operator-=(ptrdiff_t n) { m_cur = wxStringOperations::AddToIter(m_cur, -n); return *this; } difference_type operator-(const iterator& i) const { return wxStringOperations::DiffIters(m_cur, i.m_cur); } bool operator==(const iterator& i) const { return m_cur == i.m_cur; } bool operator!=(const iterator& i) const { return m_cur != i.m_cur; } bool operator<(const iterator& i) const { return m_cur < i.m_cur; } bool operator>(const iterator& i) const { return m_cur > i.m_cur; } bool operator<=(const iterator& i) const { return m_cur <= i.m_cur; } bool operator>=(const iterator& i) const { return m_cur >= i.m_cur; } private: underlying_iterator impl() const { return m_cur; } friend class wxString; friend class wxCStrData; private: underlying_iterator m_cur;

  public:
      iterator() {}
      reference operator*()
        { return wxUniCharRef::CreateForString(m_cur); }

      iterator operator+(ptrdiff_t n) const
        { return iterator(wxStringOperations::AddToIter(m_cur, n)); }
      iterator operator-(ptrdiff_t n) const
        { return iterator(wxStringOperations::AddToIter(m_cur, -n)); }



      bool operator==(const const_iterator& i) const;
      bool operator!=(const const_iterator& i) const;
      bool operator<(const const_iterator& i) const;
      bool operator>(const const_iterator& i) const;
      bool operator<=(const const_iterator& i) const;
      bool operator>=(const const_iterator& i) const;

  private:

      iterator(underlying_iterator ptr) : m_cur(ptr) {}
      iterator(wxString *, underlying_iterator ptr) : m_cur(ptr) {}

      friend class const_iterator;
  };

  class __attribute__ ((visibility("default"))) const_iterator
  {


      private: typedef wxStringImpl::const_iterator underlying_iterator; public: typedef std::random_access_iterator_tag iterator_category; typedef wxUniChar value_type; typedef ptrdiff_t difference_type; typedef wxUniChar reference; typedef const wxChar* pointer; reference operator[](size_t n) const { return *(*this + n); } const_iterator& operator++() { wxStringOperations::IncIter(m_cur); return *this; } const_iterator& operator--() { wxStringOperations::DecIter(m_cur); return *this; } const_iterator operator++(int) { const_iterator tmp = *this; wxStringOperations::IncIter(m_cur); return tmp; } const_iterator operator--(int) { const_iterator tmp = *this; wxStringOperations::DecIter(m_cur); return tmp; } const_iterator& operator+=(ptrdiff_t n) { m_cur = wxStringOperations::AddToIter(m_cur, n); return *this; } const_iterator& operator-=(ptrdiff_t n) { m_cur = wxStringOperations::AddToIter(m_cur, -n); return *this; } difference_type operator-(const const_iterator& i) const { return wxStringOperations::DiffIters(m_cur, i.m_cur); } bool operator==(const const_iterator& i) const { return m_cur == i.m_cur; } bool operator!=(const const_iterator& i) const { return m_cur != i.m_cur; } bool operator<(const const_iterator& i) const { return m_cur < i.m_cur; } bool operator>(const const_iterator& i) const { return m_cur > i.m_cur; } bool operator<=(const const_iterator& i) const { return m_cur <= i.m_cur; } bool operator>=(const const_iterator& i) const { return m_cur >= i.m_cur; } private: underlying_iterator impl() const { return m_cur; } friend class wxString; friend class wxCStrData; private: underlying_iterator m_cur;

  public:
      const_iterator() {}
      const_iterator(const iterator& i) : m_cur(i.m_cur) {}

      const_reference operator*() const
        { return wxStringOperations::DecodeChar(m_cur); }

      const_iterator operator+(ptrdiff_t n) const
        { return const_iterator(wxStringOperations::AddToIter(m_cur, n)); }
      const_iterator operator-(ptrdiff_t n) const
        { return const_iterator(wxStringOperations::AddToIter(m_cur, -n)); }


      bool operator==(const iterator& i) const;
      bool operator!=(const iterator& i) const;
      bool operator<(const iterator& i) const;
      bool operator>(const iterator& i) const;
      bool operator<=(const iterator& i) const;
      bool operator>=(const iterator& i) const;

  private:

      const_iterator(underlying_iterator ptr) : m_cur(ptr) {}
      const_iterator(const wxString *, underlying_iterator ptr)
          : m_cur(ptr) {}
  };

  iterator GetIterForNthChar(size_t n) { return begin() + n; }
  const_iterator GetIterForNthChar(size_t n) const { return begin() + n; }


  size_t IterToImplPos(wxString::iterator i) const
    { return wxStringImpl::const_iterator(i.impl()) - m_impl.begin(); }
# 1045 "/usr/include/wx-3.1-unofficial/wx/string.h"
  ptrdiff_t IterOffsetInMBStr(const const_iterator& i) const
  {
      const wxString str(begin(), i);




      const size_t ofs = wxGet_wxConvLibc().FromWChar(
# 1052 "/usr/include/wx-3.1-unofficial/wx/string.h" 3 4
                                             __null
# 1052 "/usr/include/wx-3.1-unofficial/wx/string.h"
                                                 , 0, str.wc_str(), str.length());
      return ofs == ((size_t)-1) ? 0 : static_cast<ptrdiff_t>(ofs);
  }

  friend class iterator;
  friend class const_iterator;

  template <typename T>
  class reverse_iterator_impl
  {
  public:
      typedef T iterator_type;

      typedef typename T::iterator_category iterator_category;
      typedef typename T::value_type value_type;
      typedef typename T::difference_type difference_type;
      typedef typename T::reference reference;
      typedef typename T::pointer *pointer;

      reverse_iterator_impl() {}
      reverse_iterator_impl(iterator_type i) : m_cur(i) {}

      iterator_type base() const { return m_cur; }

      reference operator*() const { return *(m_cur-1); }
      reference operator[](size_t n) const { return *(*this + n); }

      reverse_iterator_impl& operator++()
        { --m_cur; return *this; }
      reverse_iterator_impl operator++(int)
        { reverse_iterator_impl tmp = *this; --m_cur; return tmp; }
      reverse_iterator_impl& operator--()
        { ++m_cur; return *this; }
      reverse_iterator_impl operator--(int)
        { reverse_iterator_impl tmp = *this; ++m_cur; return tmp; }

      reverse_iterator_impl operator+(ptrdiff_t n) const
        { return reverse_iterator_impl(m_cur - n); }
      reverse_iterator_impl operator-(ptrdiff_t n) const
        { return reverse_iterator_impl(m_cur + n); }
      reverse_iterator_impl operator+=(ptrdiff_t n)
        { m_cur -= n; return *this; }
      reverse_iterator_impl operator-=(ptrdiff_t n)
        { m_cur += n; return *this; }

      difference_type operator-(const reverse_iterator_impl& i) const
        { return i.m_cur - m_cur; }

      bool operator==(const reverse_iterator_impl& ri) const
        { return m_cur == ri.m_cur; }
      bool operator!=(const reverse_iterator_impl& ri) const
        { return !(*this == ri); }

      bool operator<(const reverse_iterator_impl& i) const
        { return m_cur > i.m_cur; }
      bool operator>(const reverse_iterator_impl& i) const
        { return m_cur < i.m_cur; }
      bool operator<=(const reverse_iterator_impl& i) const
        { return m_cur >= i.m_cur; }
      bool operator>=(const reverse_iterator_impl& i) const
        { return m_cur <= i.m_cur; }

  private:
      iterator_type m_cur;
  };

  typedef reverse_iterator_impl<iterator> reverse_iterator;
  typedef reverse_iterator_impl<const_iterator> const_reverse_iterator;

private:


  static const_iterator CreateConstIterator(const wxCStrData& data)
  {
      return const_iterator(data.m_str,
                            (data.m_str->begin() + data.m_offset).impl());
  }
# 1148 "/usr/include/wx-3.1-unofficial/wx/string.h"
  static wxString FromImpl(const wxStringImpl& src) { return wxString(src); }


public:


  wxString() {}


  wxString(const wxString& stringSrc) : m_impl(stringSrc.m_impl) { }


  wxString(wxUniChar ch, size_t nRepeat = 1 )
    { assign(nRepeat, ch); }
  wxString(size_t nRepeat, wxUniChar ch)
    { assign(nRepeat, ch); }
  wxString(wxUniCharRef ch, size_t nRepeat = 1)
    { assign(nRepeat, ch); }
  wxString(size_t nRepeat, wxUniCharRef ch)
    { assign(nRepeat, ch); }
  wxString(char ch, size_t nRepeat = 1)
    { assign(nRepeat, ch); }
  wxString(size_t nRepeat, char ch)
    { assign(nRepeat, ch); }
  wxString(wchar_t ch, size_t nRepeat = 1)
    { assign(nRepeat, ch); }
  wxString(size_t nRepeat, wchar_t ch)
    { assign(nRepeat, ch); }



  wxString(const char *psz)
    : m_impl(ImplStr(psz)) {}

  wxString(const char *psz, const wxMBConv& conv)
    : m_impl(ImplStr(psz, conv)) {}

  wxString(const char *psz, size_t nLength)
    { assign(psz, nLength); }

  wxString(const char *psz, const wxMBConv& conv, size_t nLength)
  {
    SubstrBufFromMB str(ImplStr(psz, nLength, conv));
    m_impl.assign(str.data, str.len);
  }



  wxString(const unsigned char *psz)
    : m_impl(ImplStr((const char*)psz)) {}

  wxString(const unsigned char *psz, const wxMBConv& conv)
    : m_impl(ImplStr((const char*)psz, conv)) {}

  wxString(const unsigned char *psz, size_t nLength)
    { assign((const char*)psz, nLength); }

  wxString(const unsigned char *psz, const wxMBConv& conv, size_t nLength)
  {
    SubstrBufFromMB str(ImplStr((const char*)psz, nLength, conv));
    m_impl.assign(str.data, str.len);
  }


  wxString(const wchar_t *pwz)
    : m_impl(ImplStr(pwz)) {}
  wxString(const wchar_t *pwz, const wxMBConv& )
    : m_impl(ImplStr(pwz)) {}
  wxString(const wchar_t *pwz, size_t nLength)
    { assign(pwz, nLength); }
  wxString(const wchar_t *pwz, const wxMBConv& , size_t nLength)
    { assign(pwz, nLength); }


  wxString(const wxScopedCharBuffer& buf)
    { assign(buf.data(), buf.length()); }

  wxString(const wxScopedWCharBuffer& buf)
    { assign(buf.data(), buf.length()); }

  wxString(const wxScopedCharBuffer& buf, const wxMBConv& conv)
    { assign(buf, conv); }




  wxString(const wxCStrData& cstr)
      : m_impl(cstr.AsString().m_impl.c_str()) { }



  wxString(const wxCStrData& cstr, size_t nLength)
      : m_impl(cstr.AsString().Mid(0, nLength).m_impl) {}



  wxString(const wxString& str, size_t nLength)
    { assign(str, nLength); }
# 1267 "/usr/include/wx-3.1-unofficial/wx/string.h"
    wxString(const wxStdWideString& str) : m_impl(str) {}
# 1278 "/usr/include/wx-3.1-unofficial/wx/string.h"
    wxString(const std::string& str)
        { assign(str.c_str(), str.length()); }
# 1291 "/usr/include/wx-3.1-unofficial/wx/string.h"
    const wxStdWideString& ToStdWstring() const { return m_impl; }
# 1322 "/usr/include/wx-3.1-unofficial/wx/string.h"
    std::string ToStdString(const wxMBConv& conv = wxGet_wxConvLibc()) const
    {
        wxScopedCharBuffer buf(mb_str(conv));
        return std::string(buf.data(), buf.length());
    }
# 1345 "/usr/include/wx-3.1-unofficial/wx/string.h"
  wxString Clone() const
  {


      return wxString::FromImpl(wxStringImpl(m_impl.c_str(), m_impl.length()));
  }


  const_iterator begin() const { return const_iterator(this, m_impl.begin()); }
  iterator begin() { return iterator(this, m_impl.begin()); }
  const_iterator cbegin() const { return const_iterator(this, m_impl.begin()); }

  const_iterator end() const { return const_iterator(this, m_impl.end()); }
  iterator end() { return iterator(this, m_impl.end()); }
  const_iterator cend() const { return const_iterator(this, m_impl.end()); }


  const_reverse_iterator rbegin() const
    { return const_reverse_iterator(end()); }
  reverse_iterator rbegin()
    { return reverse_iterator(end()); }
  const_reverse_iterator crbegin() const
    { return const_reverse_iterator(end()); }

  const_reverse_iterator rend() const
    { return const_reverse_iterator(begin()); }
  reverse_iterator rend()
    { return reverse_iterator(begin()); }
  const_reverse_iterator crend() const
    { return const_reverse_iterator(begin()); }
# 1405 "/usr/include/wx-3.1-unofficial/wx/string.h"
  size_t length() const { return m_impl.length(); }


  size_type size() const { return length(); }
  size_type max_size() const { return npos; }

  bool empty() const { return m_impl.empty(); }


  size_type capacity() const { return m_impl.capacity(); }
  void reserve(size_t sz) { m_impl.reserve(sz); }

  void shrink_to_fit() { Shrink(); }

  void resize(size_t nSize, wxUniChar ch = L'\0')
  {
    const size_t len = length();
    if ( nSize == len)
        return;
# 1444 "/usr/include/wx-3.1-unofficial/wx/string.h"
    {
        ;

        m_impl.resize(nSize, (wxStringCharType)ch);
    }
  }

  wxString substr(size_t nStart = 0, size_t nLen = npos) const
  {
    size_t pos, len;
    PosLenToImpl(nStart, nLen, &pos, &len);
    return FromImpl(m_impl.substr(pos, len));
  }



  size_t Len() const { return length(); }

  bool IsEmpty() const { return empty(); }

  bool operator!() const { return empty(); }

  wxString& Truncate(size_t uiLen);

  void Empty() { clear(); }

  void Clear() { clear(); }



  bool IsAscii() const;

  bool IsNumber() const;

  bool IsWord() const;



    wxUniChar at(size_t n) const
      { return wxStringOperations::DecodeChar(m_impl.begin() + PosToImpl(n)); }
    wxUniChar GetChar(size_t n) const
      { return at(n); }

    wxUniCharRef at(size_t n)
      { return *GetIterForNthChar(n); }
    wxUniCharRef GetWritableChar(size_t n)
      { return at(n); }

    void SetChar(size_t n, wxUniChar ch)
      { at(n) = ch; }


    wxUniChar Last() const
    {
      do { if ( !empty() ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/string.h", 1498, __FUNCTION__, "!empty()", L"wxString: index out of bounds"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );
      return *rbegin();
    }


    wxUniCharRef Last()
    {
      do { if ( !empty() ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/string.h", 1505, __FUNCTION__, "!empty()", L"wxString: index out of bounds"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );
      return *rbegin();
    }





    wxUniChar operator[](int n) const
      { return at(n); }
    wxUniChar operator[](long n) const
      { return at(n); }
    wxUniChar operator[](size_t n) const
      { return at(n); }

    wxUniChar operator[](unsigned int n) const
      { return at(n); }



    wxUniCharRef operator[](int n)
      { return at(n); }
    wxUniCharRef operator[](long n)
      { return at(n); }
    wxUniCharRef operator[](size_t n)
      { return at(n); }

    wxUniCharRef operator[](unsigned int n)
      { return at(n); }
# 1579 "/usr/include/wx-3.1-unofficial/wx/string.h"
    wxCStrData c_str() const { return wxCStrData(this); }
    wxCStrData data() const { return c_str(); }


    operator wxCStrData() const { return c_str(); }
# 1592 "/usr/include/wx-3.1-unofficial/wx/string.h"
    operator const wchar_t*() const { return c_str(); }


    operator const char*() const { return c_str(); }



    operator const void*() const { return c_str(); }





    const wxCStrData GetData() const { return c_str(); }



    const wxStringCharType *wx_str() const { return m_impl.c_str(); }




    wxWritableCharBuffer char_str(const wxMBConv& conv = wxGet_wxConvLibc()) const
        { return mb_str(conv); }
    wxWritableWCharBuffer wchar_str() const { return wc_str(); }





    template <typename T>
    wxCharTypeBuffer<T> tchar_str(size_t *len = 
# 1623 "/usr/include/wx-3.1-unofficial/wx/string.h" 3 4
                                               __null
# 1623 "/usr/include/wx-3.1-unofficial/wx/string.h"
                                                   ) const
    {


        return wxPrivate::wxStringAsBufHelper<T>::Get(*this, len);







    }
# 1644 "/usr/include/wx-3.1-unofficial/wx/string.h"
    static wxString FromAscii(const char *ascii, size_t len);
    static wxString FromAscii(const char *ascii);
    static wxString FromAscii(char ascii);
    const wxScopedCharBuffer ToAscii(char replaceWith = '_') const;
# 1658 "/usr/include/wx-3.1-unofficial/wx/string.h"
    static wxString FromAscii(const unsigned char *ascii)
        { return FromAscii((const char *)ascii); }
    static wxString FromAscii(const unsigned char *ascii, size_t len)
        { return FromAscii((const char *)ascii, len); }
# 1729 "/usr/include/wx-3.1-unofficial/wx/string.h"
    static wxString FromUTF8(const char *utf8, size_t len = npos)
      { return wxString(utf8, wxMBConvUTF8(), len); }
    static wxString FromUTF8Unchecked(const char *utf8, size_t len = npos)
    {
        const wxString s(utf8, wxMBConvUTF8(), len);
        do { if ( !utf8 || !*utf8 || !s.empty() ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/string.h", 1734, __FUNCTION__, "!utf8 || !*utf8 || !s.empty()", "string must be valid UTF-8"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 )
                                                    ;
        return s;
    }

    static wxString FromUTF8(const std::string& utf8)
      { return FromUTF8(utf8.c_str(), utf8.length()); }
    static wxString FromUTF8Unchecked(const std::string& utf8)
      { return FromUTF8Unchecked(utf8.c_str(), utf8.length()); }

    std::string utf8_string() const { return ToStdString(wxMBConvUTF8()); }

    const wxScopedCharBuffer utf8_str() const { return mb_str(wxMBConvUTF8()); }
# 1789 "/usr/include/wx-3.1-unofficial/wx/string.h"
    const wxScopedCharBuffer ToUTF8() const { return utf8_str(); }



    static wxString From8BitData(const char *data, size_t len)
      { return wxString(data, wxGet_wxConvISO8859_1(), len); }

    static wxString From8BitData(const char *data)
      { return wxString(data, wxGet_wxConvISO8859_1()); }
    const wxScopedCharBuffer To8BitData() const
        { return mb_str(wxGet_wxConvISO8859_1()); }
# 1834 "/usr/include/wx-3.1-unofficial/wx/string.h"
    const wxScopedCharBuffer mb_str(const wxMBConv& conv = wxGet_wxConvLibc()) const
    {
        return AsCharBuf(conv);
    }


    const wxCharBuffer mbc_str() const { return mb_str(*wxConvCurrent); }


    const wchar_t* wc_str() const { return wx_str(); }





    const wxChar* wc_str(const wxMBConv& ) const
      { return wc_str(); }


    const wxScopedCharBuffer fn_str() const { return mb_str((*wxConvFileName)); }
# 1878 "/usr/include/wx-3.1-unofficial/wx/string.h"
    const wchar_t* t_str() const { return wx_str(); }







  wxString& operator=(const wxString& stringSrc)
  {
    if ( this != &stringSrc )
    {
        ;

        m_impl = stringSrc.m_impl;
    }

    return *this;
  }

  wxString& operator=(const wxCStrData& cstr)
    { return *this = cstr.AsString(); }

  wxString& operator=(wxUniChar ch)
  {
    ;

    if ( wxStringOperations::IsSingleCodeUnitCharacter(ch) )
        m_impl = (wxStringCharType)ch;
    else
        m_impl = wxStringOperations::EncodeChar(ch);

    return *this;
  }

  wxString& operator=(wxUniCharRef ch)
    { return operator=((wxUniChar)ch); }
  wxString& operator=(char ch)
    { return operator=(wxUniChar(ch)); }
  wxString& operator=(unsigned char ch)
    { return operator=(wxUniChar(ch)); }
  wxString& operator=(wchar_t ch)
    { return operator=(wxUniChar(ch)); }




  wxString& operator=(const char *psz)
  {
      ;

      if ( psz )
          m_impl = ImplStr(psz);
      else
          clear();

      return *this;
  }


  wxString& operator=(const wchar_t *pwz)
  {
      ;

      if ( pwz )
          m_impl = ImplStr(pwz);
      else
          clear();

      return *this;
  }
# 1972 "/usr/include/wx-3.1-unofficial/wx/string.h"
  wxString& operator=(const unsigned char *psz)
    { return operator=((const char*)psz); }



  wxString& operator=(const wxScopedWCharBuffer& s)
    { return assign(s); }


  wxString& operator=(const wxScopedCharBuffer& s)
    { return assign(s); }
# 1993 "/usr/include/wx-3.1-unofficial/wx/string.h"
  wxString& operator<<(const wxString& s)
  {





    append(s);
    return *this;
  }


  wxString& operator<<(const char *psz)
    { append(psz); return *this; }

  wxString& operator<<(const wchar_t *pwz)
    { append(pwz); return *this; }
  wxString& operator<<(const wxCStrData& psz)
    { append(psz.AsString()); return *this; }

  wxString& operator<<(wxUniChar ch) { append(1, ch); return *this; }
  wxString& operator<<(wxUniCharRef ch) { append(1, ch); return *this; }
  wxString& operator<<(char ch) { append(1, ch); return *this; }
  wxString& operator<<(unsigned char ch) { append(1, ch); return *this; }
  wxString& operator<<(wchar_t ch) { append(1, ch); return *this; }


  wxString& operator<<(const wxScopedWCharBuffer& s)
    { return append(s); }

  wxString& operator<<(const wxScopedCharBuffer& s)
    { return append(s); }



  wxString& Append(const wxString& s)
    {

        if ( empty() )
            *this = s;
        else
            append(s);
        return *this;
    }

  wxString& Append(const char* psz)
    { append(psz); return *this; }

  wxString& Append(const wchar_t* pwz)
    { append(pwz); return *this; }
  wxString& Append(const wxCStrData& psz)
    { append(psz); return *this; }

  wxString& Append(const wxScopedCharBuffer& psz)
    { append(psz); return *this; }

  wxString& Append(const wxScopedWCharBuffer& psz)
    { append(psz); return *this; }

  wxString& Append(const char* psz, size_t nLen)
    { append(psz, nLen); return *this; }

  wxString& Append(const wchar_t* pwz, size_t nLen)
    { append(pwz, nLen); return *this; }
  wxString& Append(const wxCStrData& psz, size_t nLen)
    { append(psz, nLen); return *this; }

  wxString& Append(const wxScopedCharBuffer& psz, size_t nLen)
    { append(psz, nLen); return *this; }

  wxString& Append(const wxScopedWCharBuffer& psz, size_t nLen)
    { append(psz, nLen); return *this; }

  wxString& Append(wxUniChar ch, size_t count = 1u)
    { append(count, ch); return *this; }
  wxString& Append(wxUniCharRef ch, size_t count = 1u)
    { append(count, ch); return *this; }
  wxString& Append(char ch, size_t count = 1u)
    { append(count, ch); return *this; }
  wxString& Append(unsigned char ch, size_t count = 1u)
    { append(count, ch); return *this; }
  wxString& Append(wchar_t ch, size_t count = 1u)
    { append(count, ch); return *this; }


  wxString& Prepend(const wxString& str)
    { *this = str + *this; return *this; }



  friend wxString __attribute__ ((visibility("default"))) operator+(const wxString& string1,
                                             const wxString& string2);

  friend wxString __attribute__ ((visibility("default"))) operator+(const wxString& string, wxUniChar ch);

  friend wxString __attribute__ ((visibility("default"))) operator+(wxUniChar ch, const wxString& string);


  friend wxString __attribute__ ((visibility("default"))) operator+(const wxString& string,
                                             const char *psz);

  friend wxString __attribute__ ((visibility("default"))) operator+(const wxString& string,
                                             const wchar_t *pwz);


  friend wxString __attribute__ ((visibility("default"))) operator+(const char *psz,
                                             const wxString& string);

  friend wxString __attribute__ ((visibility("default"))) operator+(const wchar_t *pwz,
                                             const wxString& string);



  wxString& operator<<(int i)
    { return (*this) << Format(L"%d", i); }

  wxString& operator<<(unsigned int ui)
    { return (*this) << Format(L"%u", ui); }

  wxString& operator<<(long l)
    { return (*this) << Format(L"%ld", l); }

  wxString& operator<<(unsigned long ul)
    { return (*this) << Format(L"%lu", ul); }


  wxString& operator<<(long long ll)
    {
      return (*this) << Format(wxString::FromAscii("%" "ll" "d"), ll);
    }

  wxString& operator<<(unsigned long long ull)
    {
      return (*this) << Format(wxString::FromAscii("%" "ll" "u") , ull);
    }


  wxString& operator<<(float f)
    { return *this << Format(L"%f", static_cast<double>(f)); }

  wxString& operator<<(double d)
    { return (*this) << Format(L"%g", d); }




  int Cmp(const char *psz) const
    { return compare(psz); }

  int Cmp(const wchar_t *pwz) const
    { return compare(pwz); }
  int Cmp(const wxString& s) const
    { return compare(s); }
  int Cmp(const wxCStrData& s) const
    { return compare(s); }

  int Cmp(const wxScopedCharBuffer& s) const
    { return compare(s); }

  int Cmp(const wxScopedWCharBuffer& s) const
    { return compare(s); }

  int CmpNoCase(const wxString& s) const;



  bool IsSameAs(const wxString& str, bool compareWithCase = true) const
  {


      if ( length() != str.length() )
          return false;

      return (compareWithCase ? Cmp(str) : CmpNoCase(str)) == 0;
  }

  bool IsSameAs(const char *str, bool compareWithCase = true) const
    { return (compareWithCase ? Cmp(str) : CmpNoCase(str)) == 0; }

  bool IsSameAs(const wchar_t *str, bool compareWithCase = true) const
    { return (compareWithCase ? Cmp(str) : CmpNoCase(str)) == 0; }

  bool IsSameAs(const wxCStrData& str, bool compareWithCase = true) const
    { return IsSameAs(str.AsString(), compareWithCase); }

  bool IsSameAs(const wxScopedCharBuffer& str, bool compareWithCase = true) const
    { return IsSameAs(str.data(), compareWithCase); }

  bool IsSameAs(const wxScopedWCharBuffer& str, bool compareWithCase = true) const
    { return IsSameAs(str.data(), compareWithCase); }

  bool IsSameAs(wxUniChar c, bool compareWithCase = true) const;

  bool IsSameAs(wxUniCharRef c, bool compareWithCase = true) const
    { return IsSameAs(wxUniChar(c), compareWithCase); }
  bool IsSameAs(char c, bool compareWithCase = true) const
    { return IsSameAs(wxUniChar(c), compareWithCase); }
  bool IsSameAs(unsigned char c, bool compareWithCase = true) const
    { return IsSameAs(wxUniChar(c), compareWithCase); }
  bool IsSameAs(wchar_t c, bool compareWithCase = true) const
    { return IsSameAs(wxUniChar(c), compareWithCase); }
  bool IsSameAs(int c, bool compareWithCase = true) const
    { return IsSameAs(wxUniChar(c), compareWithCase); }




  wxString Mid(size_t nFirst, size_t nCount = npos) const;


  wxString operator()(size_t start, size_t len) const
    { return Mid(start, len); }




  bool StartsWith(const wxString& prefix, wxString *rest = 
# 2209 "/usr/include/wx-3.1-unofficial/wx/string.h" 3 4
                                                          __null
# 2209 "/usr/include/wx-3.1-unofficial/wx/string.h"
                                                              ) const;



  bool EndsWith(const wxString& suffix, wxString *rest = 
# 2213 "/usr/include/wx-3.1-unofficial/wx/string.h" 3 4
                                                        __null
# 2213 "/usr/include/wx-3.1-unofficial/wx/string.h"
                                                            ) const;


  wxString Left(size_t nCount) const;

  wxString Right(size_t nCount) const;



  wxString BeforeFirst(wxUniChar ch, wxString *rest = 
# 2222 "/usr/include/wx-3.1-unofficial/wx/string.h" 3 4
                                                     __null
# 2222 "/usr/include/wx-3.1-unofficial/wx/string.h"
                                                         ) const;



  wxString BeforeLast(wxUniChar ch, wxString *rest = 
# 2226 "/usr/include/wx-3.1-unofficial/wx/string.h" 3 4
                                                    __null
# 2226 "/usr/include/wx-3.1-unofficial/wx/string.h"
                                                        ) const;


  wxString AfterFirst(wxUniChar ch) const;


  wxString AfterLast(wxUniChar ch) const;


  wxString Before(wxUniChar ch) const { return BeforeLast(ch); }
  wxString After(wxUniChar ch) const { return AfterFirst(ch); }



  wxString& MakeUpper();

  wxString Upper() const { return wxString(*this).MakeUpper(); }

  wxString& MakeLower();

  wxString Lower() const { return wxString(*this).MakeLower(); }


  wxString& MakeCapitalized();


  wxString Capitalize() const { return wxString(*this).MakeCapitalized(); }



  wxString& Trim(bool bFromRight = true);

  wxString& Pad(size_t nCount, wxUniChar chPad = L' ', bool bFromRight = true);



  int Find(wxUniChar ch, bool bFromEnd = false) const;
  int Find(wxUniCharRef ch, bool bFromEnd = false) const
    { return Find(wxUniChar(ch), bFromEnd); }
  int Find(char ch, bool bFromEnd = false) const
    { return Find(wxUniChar(ch), bFromEnd); }
  int Find(unsigned char ch, bool bFromEnd = false) const
    { return Find(wxUniChar(ch), bFromEnd); }
  int Find(wchar_t ch, bool bFromEnd = false) const
    { return Find(wxUniChar(ch), bFromEnd); }

  int Find(const wxString& sub) const
  {
    const size_type idx = find(sub);
    return (idx == npos) ? (-1) : (int)idx;
  }

  int Find(const char *sub) const
  {
    const size_type idx = find(sub);
    return (idx == npos) ? (-1) : (int)idx;
  }

  int Find(const wchar_t *sub) const
  {
    const size_type idx = find(sub);
    return (idx == npos) ? (-1) : (int)idx;
  }

  int Find(const wxCStrData& sub) const
    { return Find(sub.AsString()); }

  int Find(const wxScopedCharBuffer& sub) const
    { return Find(sub.data()); }

  int Find(const wxScopedWCharBuffer& sub) const
    { return Find(sub.data()); }



  size_t Replace(const wxString& strOld,
                 const wxString& strNew,
                 bool bReplaceAll = true);


  bool Matches(const wxString& mask) const;







  bool ToLong(long *val, int base = 10) const;

  bool ToULong(unsigned long *val, int base = 10) const;


  bool ToLongLong(long long *val, int base = 10) const;

  bool ToULongLong(unsigned long long *val, int base = 10) const;


  bool ToDouble(double *val) const;



  bool ToCLong(long *val, int base = 10) const;

  bool ToCULong(unsigned long *val, int base = 10) const;

  bool ToCDouble(double *val) const;




  static wxString FromDouble(double val, int precision = -1);

  static wxString FromCDouble(double val, int precision = -1);





  inline int Printf(const wxFormatString& f1) { return DoPrintfWchar(f1); } template<typename T1> int Printf(const wxFormatString& f1, T1 a1) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get()); } template<typename T1, typename T2> int Printf(const wxFormatString& f1, T1 a1, T2 a2) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get()); } template<typename T1, typename T2, typename T3> int Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get()); } template<typename T1, typename T2, typename T3, typename T4> int Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5> int Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> int Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> int Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8> int Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> int Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10> int Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11> int Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12> int Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13> int Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14> int Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15> int Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16> int Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17> int Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18> int Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19> int Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20> int Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21> int Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22> int Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23> int Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24> int Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25> int Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26> int Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27> int Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28> int Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29> int Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get(), wxArgNormalizerWchar<T29>(a29, fmt, 29).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29, typename T30> int Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29, T30 a30) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get(), wxArgNormalizerWchar<T29>(a29, fmt, 29).get(), wxArgNormalizerWchar<T30>(a30, fmt, 30).get()); }


  int PrintfV(const wxString& format, va_list argptr);



  inline static wxString Format(const wxFormatString& f1) { return DoFormatWchar(f1); } template<typename T1> static wxString Format(const wxFormatString& f1, T1 a1) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoFormatWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get()); } template<typename T1, typename T2> static wxString Format(const wxFormatString& f1, T1 a1, T2 a2) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoFormatWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get()); } template<typename T1, typename T2, typename T3> static wxString Format(const wxFormatString& f1, T1 a1, T2 a2, T3 a3) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoFormatWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get()); } template<typename T1, typename T2, typename T3, typename T4> static wxString Format(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoFormatWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5> static wxString Format(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoFormatWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> static wxString Format(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoFormatWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> static wxString Format(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoFormatWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8> static wxString Format(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoFormatWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> static wxString Format(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoFormatWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10> static wxString Format(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoFormatWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11> static wxString Format(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoFormatWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12> static wxString Format(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoFormatWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13> static wxString Format(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoFormatWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14> static wxString Format(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoFormatWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15> static wxString Format(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoFormatWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16> static wxString Format(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoFormatWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17> static wxString Format(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoFormatWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18> static wxString Format(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoFormatWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19> static wxString Format(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoFormatWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20> static wxString Format(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoFormatWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21> static wxString Format(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoFormatWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22> static wxString Format(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoFormatWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23> static wxString Format(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoFormatWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24> static wxString Format(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoFormatWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25> static wxString Format(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoFormatWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26> static wxString Format(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoFormatWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27> static wxString Format(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoFormatWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28> static wxString Format(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoFormatWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29> static wxString Format(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoFormatWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get(), wxArgNormalizerWchar<T29>(a29, fmt, 29).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29, typename T30> static wxString Format(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29, T30 a30) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoFormatWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get(), wxArgNormalizerWchar<T29>(a29, fmt, 29).get(), wxArgNormalizerWchar<T30>(a30, fmt, 30).get()); }


  static wxString FormatV(const wxString& format, va_list argptr);




  bool Alloc(size_t nLen) { reserve(nLen); return capacity() >= nLen; }


  bool Shrink();
# 2378 "/usr/include/wx-3.1-unofficial/wx/string.h"
  wxString SubString(size_t from, size_t to) const
      { return Mid(from, (to - from + 1)); }

  enum caseCompare {exact, ignoreCase};

  enum stripType {leading = 0x1, trailing = 0x2, both = 0x3};




  inline int sprintf(const wxFormatString& f1) { return DoPrintfWchar(f1); } template<typename T1> int sprintf(const wxFormatString& f1, T1 a1) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get()); } template<typename T1, typename T2> int sprintf(const wxFormatString& f1, T1 a1, T2 a2) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get()); } template<typename T1, typename T2, typename T3> int sprintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get()); } template<typename T1, typename T2, typename T3, typename T4> int sprintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5> int sprintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> int sprintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> int sprintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8> int sprintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> int sprintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10> int sprintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11> int sprintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12> int sprintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13> int sprintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14> int sprintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15> int sprintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16> int sprintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17> int sprintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18> int sprintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19> int sprintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20> int sprintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21> int sprintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22> int sprintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23> int sprintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24> int sprintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25> int sprintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26> int sprintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27> int sprintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28> int sprintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29> int sprintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get(), wxArgNormalizerWchar<T29>(a29, fmt, 29).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29, typename T30> int sprintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29, T30 a30) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get(), wxArgNormalizerWchar<T29>(a29, fmt, 29).get(), wxArgNormalizerWchar<T30>(a30, fmt, 30).get()); }



  int CompareTo(const wxChar* psz, caseCompare cmp = exact) const
    { return cmp == exact ? Cmp(psz) : CmpNoCase(psz); }


  size_t Length() const { return length(); }

  int Freq(wxUniChar ch) const;

  void LowerCase() { MakeLower(); }

  void UpperCase() { MakeUpper(); }

  wxString Strip(stripType w = trailing) const;


  size_t Index(const wxChar* psz) const { return Find(psz); }
  size_t Index(wxUniChar ch) const { return Find(ch); }

  wxString& Remove(size_t pos) { return Truncate(pos); }
  wxString& RemoveLast(size_t n = 1) { return Truncate(length() - n); }

  wxString& Remove(size_t nStart, size_t nLen)
      { return (wxString&)erase( nStart, nLen ); }


  int First( wxUniChar ch ) const { return Find(ch); }
  int First( wxUniCharRef ch ) const { return Find(ch); }
  int First( char ch ) const { return Find(ch); }
  int First( unsigned char ch ) const { return Find(ch); }
  int First( wchar_t ch ) const { return Find(ch); }
  int First( const wxString& str ) const { return Find(str); }
  int Last( wxUniChar ch ) const { return Find(ch, true); }
  bool Contains(const wxString& str) const { return Find(str) != (-1); }


  bool IsNull() const { return empty(); }




  wxString(const wxString& str, size_t nPos, size_t nLen)
      { assign(str, nPos, nLen); }

  wxString(const_iterator first, const_iterator last)
      : m_impl(first.impl(), last.impl()) { }




  wxString(const char *first, const char *last)
  {
      SubstrBufFromMB str(ImplStr(first, last - first));
      m_impl.assign(str.data, str.len);
  }

  wxString(const wchar_t *first, const wchar_t *last)
  {
      SubstrBufFromWC str(ImplStr(first, last - first));
      m_impl.assign(str.data, str.len);
  }

  wxString(const wxCStrData& first, const wxCStrData& last)
      : m_impl(CreateConstIterator(first).impl(),
               CreateConstIterator(last).impl())
  {
      do { if ( first.m_str == last.m_str ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/string.h", 2457, __FUNCTION__, "first.m_str == last.m_str", L"pointers must be into the same string"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 )
                                                                  ;
  }




  wxString& append(const wxString& str, size_t pos, size_t n)
  {
      ;

      size_t from, len;
      str.PosLenToImpl(pos, n, &from, &len);
      m_impl.append(str.m_impl, from, len);
      return *this;
  }

  wxString& append(const wxString& str)
  {
      ;

      m_impl.append(str.m_impl);
      return *this;
  }



  wxString& append(const char *sz)
  {
      ;

      m_impl.append(ImplStr(sz));
      return *this;
  }


  wxString& append(const wchar_t *sz)
  {
      ;

      m_impl.append(ImplStr(sz));
      return *this;
  }


  wxString& append(const char *sz, size_t n)
  {
      ;

      SubstrBufFromMB str(ImplStr(sz, n));
      m_impl.append(str.data, str.len);
      return *this;
  }

  wxString& append(const wchar_t *sz, size_t n)
  {
      ;

      SubstrBufFromWC str(ImplStr(sz, n));
      m_impl.append(str.data, str.len);
      return *this;
  }

  wxString& append(const wxCStrData& str)
    { return append(str.AsString()); }

  wxString& append(const wxScopedCharBuffer& str)
    { return append(str.data(), str.length()); }

  wxString& append(const wxScopedWCharBuffer& str)
    { return append(str.data(), str.length()); }
  wxString& append(const wxCStrData& str, size_t n)
    { return append(str.AsString(), 0, n); }

  wxString& append(const wxScopedCharBuffer& str, size_t n)
    { return append(str.data(), n); }

  wxString& append(const wxScopedWCharBuffer& str, size_t n)
    { return append(str.data(), n); }


  wxString& append(size_t n, wxUniChar ch)
  {
      if ( wxStringOperations::IsSingleCodeUnitCharacter(ch) )
      {
          ;

          m_impl.append(n, (wxStringCharType)ch);
      }
      else
      {
          ;

          m_impl.append(wxStringOperations::EncodeNChars(n, ch));
      }

      return *this;
  }

  wxString& append(size_t n, wxUniCharRef ch)
    { return append(n, wxUniChar(ch)); }
  wxString& append(size_t n, char ch)
    { return append(n, wxUniChar(ch)); }
  wxString& append(size_t n, unsigned char ch)
    { return append(n, wxUniChar(ch)); }
  wxString& append(size_t n, wchar_t ch)
    { return append(n, wxUniChar(ch)); }


  wxString& append(const_iterator first, const_iterator last)
  {
      ;

      m_impl.append(first.impl(), last.impl());
      return *this;
  }


  wxString& append(const char *first, const char *last)
    { return append(first, last - first); }

  wxString& append(const wchar_t *first, const wchar_t *last)
    { return append(first, last - first); }
  wxString& append(const wxCStrData& first, const wxCStrData& last)
    { return append(CreateConstIterator(first), CreateConstIterator(last)); }



  wxString& assign(const wxString& str)
  {
      ;

      m_impl = str.m_impl;

      return *this;
  }



  wxString& assign(const wxString& str, size_t len)
  {
# 2610 "/usr/include/wx-3.1-unofficial/wx/string.h"
      m_impl.assign(str.m_impl, 0, str.LenToImpl(len));

      return *this;
  }


  wxString& assign(const wxString& str, size_t pos, size_t n)
  {
      size_t from, len;
      str.PosLenToImpl(pos, n, &from, &len);
      m_impl.assign(str.m_impl, from, len);



      ;

      return *this;
  }



  wxString& assign(const char *sz)
  {
      ;

      m_impl.assign(ImplStr(sz));

      return *this;
  }


  wxString& assign(const wchar_t *sz)
  {
      ;

      m_impl.assign(ImplStr(sz));

      return *this;
  }


  wxString& assign(const char *sz, size_t n)
  {
      ;

      SubstrBufFromMB str(ImplStr(sz, n));
      m_impl.assign(str.data, str.len);

      return *this;
  }


  wxString& assign(const wchar_t *sz, size_t n)
  {
      ;

      SubstrBufFromWC str(ImplStr(sz, n));
      m_impl.assign(str.data, str.len);

      return *this;
  }

  wxString& assign(const wxCStrData& str)
    { return assign(str.AsString()); }

  wxString& assign(const wxScopedCharBuffer& str)
    { return assign(str.data(), str.length()); }

  wxString& assign(const wxScopedCharBuffer& buf, const wxMBConv& conv)
  {
      SubstrBufFromMB str(ImplStr(buf.data(), buf.length(), conv));
      m_impl.assign(str.data, str.len);

      return *this;
  }
  wxString& assign(const wxScopedWCharBuffer& str)
    { return assign(str.data(), str.length()); }
  wxString& assign(const wxCStrData& str, size_t len)
    { return assign(str.AsString(), len); }

  wxString& assign(const wxScopedCharBuffer& str, size_t len)
    { return assign(str.data(), len); }

  wxString& assign(const wxScopedWCharBuffer& str, size_t len)
    { return assign(str.data(), len); }


  wxString& assign(size_t n, wxUniChar ch)
  {
      ;

      if ( wxStringOperations::IsSingleCodeUnitCharacter(ch) )
          m_impl.assign(n, (wxStringCharType)ch);
      else
          m_impl.assign(wxStringOperations::EncodeNChars(n, ch));

      return *this;
  }

  wxString& assign(size_t n, wxUniCharRef ch)
    { return assign(n, wxUniChar(ch)); }
  wxString& assign(size_t n, char ch)
    { return assign(n, wxUniChar(ch)); }
  wxString& assign(size_t n, unsigned char ch)
    { return assign(n, wxUniChar(ch)); }
  wxString& assign(size_t n, wchar_t ch)
    { return assign(n, wxUniChar(ch)); }


  wxString& assign(const_iterator first, const_iterator last)
  {
      ;

      m_impl.assign(first.impl(), last.impl());

      return *this;
  }


  wxString& assign(const char *first, const char *last)
    { return assign(first, last - first); }

  wxString& assign(const wchar_t *first, const wchar_t *last)
    { return assign(first, last - first); }
  wxString& assign(const wxCStrData& first, const wxCStrData& last)
    { return assign(CreateConstIterator(first), CreateConstIterator(last)); }



  int compare(const wxString& str) const;

  int compare(const char* sz) const;

  int compare(const wchar_t* sz) const;
  int compare(const wxCStrData& str) const
    { return compare(str.AsString()); }

  int compare(const wxScopedCharBuffer& str) const
    { return compare(str.data()); }

  int compare(const wxScopedWCharBuffer& str) const
    { return compare(str.data()); }

  int compare(size_t nStart, size_t nLen, const wxString& str) const;

  int compare(size_t nStart, size_t nLen,
              const wxString& str, size_t nStart2, size_t nLen2) const;


  int compare(size_t nStart, size_t nLen,
              const char* sz, size_t nCount = npos) const;

  int compare(size_t nStart, size_t nLen,
              const wchar_t* sz, size_t nCount = npos) const;


  wxString& insert(size_t nPos, const wxString& str)
    { insert(GetIterForNthChar(nPos), str.begin(), str.end()); return *this; }

  wxString& insert(size_t nPos, const wxString& str, size_t nStart, size_t n)
  {
      ;

      size_t from, len;
      str.PosLenToImpl(nStart, n, &from, &len);
      m_impl.insert(PosToImpl(nPos), str.m_impl, from, len);

      return *this;
  }



  wxString& insert(size_t nPos, const char *sz)
  {
      ;

      m_impl.insert(PosToImpl(nPos), ImplStr(sz));

      return *this;
  }


  wxString& insert(size_t nPos, const wchar_t *sz)
  {
      ;

      m_impl.insert(PosToImpl(nPos), ImplStr(sz)); return *this;
  }


  wxString& insert(size_t nPos, const char *sz, size_t n)
  {
      ;

      SubstrBufFromMB str(ImplStr(sz, n));
      m_impl.insert(PosToImpl(nPos), str.data, str.len);

      return *this;
  }


  wxString& insert(size_t nPos, const wchar_t *sz, size_t n)
  {
      ;

      SubstrBufFromWC str(ImplStr(sz, n));
      m_impl.insert(PosToImpl(nPos), str.data, str.len);

      return *this;
  }


  wxString& insert(size_t nPos, size_t n, wxUniChar ch)
  {
      ;

      if ( wxStringOperations::IsSingleCodeUnitCharacter(ch) )
          m_impl.insert(PosToImpl(nPos), n, (wxStringCharType)ch);
      else
          m_impl.insert(PosToImpl(nPos), wxStringOperations::EncodeNChars(n, ch));

      return *this;
  }

  iterator insert(iterator it, wxUniChar ch)
  {
      ;

      if ( wxStringOperations::IsSingleCodeUnitCharacter(ch) )
          return iterator(this, m_impl.insert(it.impl(), (wxStringCharType)ch));
      else
      {
          size_t pos = IterToImplPos(it);
          m_impl.insert(pos, wxStringOperations::EncodeChar(ch));
          return iterator(this, m_impl.begin() + pos);
      }
  }

  void insert(iterator it, const_iterator first, const_iterator last)
  {
      ;

      m_impl.insert(it.impl(), first.impl(), last.impl());
  }



  void insert(iterator it, const char *first, const char *last)
    { insert(it - begin(), first, last - first); }

  void insert(iterator it, const wchar_t *first, const wchar_t *last)
    { insert(it - begin(), first, last - first); }
  void insert(iterator it, const wxCStrData& first, const wxCStrData& last)
    { insert(it, CreateConstIterator(first), CreateConstIterator(last)); }


  void insert(iterator it, size_type n, wxUniChar ch)
  {
      ;

      if ( wxStringOperations::IsSingleCodeUnitCharacter(ch) )
          m_impl.insert(it.impl(), n, (wxStringCharType)ch);
      else
          m_impl.insert(IterToImplPos(it), wxStringOperations::EncodeNChars(n, ch));
  }


  wxString& erase(size_type pos = 0, size_type n = npos)
  {
      ;

      size_t from, len;
      PosLenToImpl(pos, n, &from, &len);
      m_impl.erase(from, len);

      return *this;
  }


  iterator erase(iterator first, iterator last)
  {
      ;

      return iterator(this, m_impl.erase(first.impl(), last.impl()));
  }

  iterator erase(iterator first)
  {
      ;

      return iterator(this, m_impl.erase(first.impl()));
  }

  void clear()
  {
      ;

      m_impl.clear();
  }



  wxString& replace(size_t nStart, size_t nLen, const char* sz)
  {
      ;

      size_t from, len;
      PosLenToImpl(nStart, nLen, &from, &len);
      m_impl.replace(from, len, ImplStr(sz));

      return *this;
  }


  wxString& replace(size_t nStart, size_t nLen, const wchar_t* sz)
  {
      ;

      size_t from, len;
      PosLenToImpl(nStart, nLen, &from, &len);
      m_impl.replace(from, len, ImplStr(sz));

      return *this;
  }


  wxString& replace(size_t nStart, size_t nLen, const wxString& str)
  {
      ;

      size_t from, len;
      PosLenToImpl(nStart, nLen, &from, &len);
      m_impl.replace(from, len, str.m_impl);

      return *this;
  }


  wxString& replace(size_t nStart, size_t nLen, size_t nCount, wxUniChar ch)
  {
      ;

      size_t from, len;
      PosLenToImpl(nStart, nLen, &from, &len);

      if ( wxStringOperations::IsSingleCodeUnitCharacter(ch) )
          m_impl.replace(from, len, nCount, (wxStringCharType)ch);
      else
          m_impl.replace(from, len, wxStringOperations::EncodeNChars(nCount, ch));

      return *this;
  }


  wxString& replace(size_t nStart, size_t nLen,
                    const wxString& str, size_t nStart2, size_t nLen2)
  {
      ;

      size_t from, len;
      PosLenToImpl(nStart, nLen, &from, &len);

      size_t from2, len2;
      str.PosLenToImpl(nStart2, nLen2, &from2, &len2);

      m_impl.replace(from, len, str.m_impl, from2, len2);

      return *this;
  }



  wxString& replace(size_t nStart, size_t nLen,
                    const char* sz, size_t nCount)
  {
      ;

      size_t from, len;
      PosLenToImpl(nStart, nLen, &from, &len);

      SubstrBufFromMB str(ImplStr(sz, nCount));

      m_impl.replace(from, len, str.data, str.len);

      return *this;
  }


  wxString& replace(size_t nStart, size_t nLen,
                    const wchar_t* sz, size_t nCount)
  {
      ;

      size_t from, len;
      PosLenToImpl(nStart, nLen, &from, &len);

      SubstrBufFromWC str(ImplStr(sz, nCount));

      m_impl.replace(from, len, str.data, str.len);

      return *this;
  }

  wxString& replace(size_t nStart, size_t nLen,
                    const wxString& s, size_t nCount)
  {
      ;

      size_t from, len;
      PosLenToImpl(nStart, nLen, &from, &len);
      m_impl.replace(from, len, s.m_impl.c_str(), s.LenToImpl(nCount));

      return *this;
  }


  wxString& replace(iterator first, iterator last, const char* s)
  {
      ;

      m_impl.replace(first.impl(), last.impl(), ImplStr(s));

      return *this;
  }


  wxString& replace(iterator first, iterator last, const wchar_t* s)
  {
      ;

      m_impl.replace(first.impl(), last.impl(), ImplStr(s));

      return *this;
  }


  wxString& replace(iterator first, iterator last, const char* s, size_type n)
  {
      ;

      SubstrBufFromMB str(ImplStr(s, n));
      m_impl.replace(first.impl(), last.impl(), str.data, str.len);

      return *this;
  }


  wxString& replace(iterator first, iterator last, const wchar_t* s, size_type n)
  {
      ;

      SubstrBufFromWC str(ImplStr(s, n));
      m_impl.replace(first.impl(), last.impl(), str.data, str.len);

      return *this;
  }

  wxString& replace(iterator first, iterator last, const wxString& s)
  {
      ;

      m_impl.replace(first.impl(), last.impl(), s.m_impl);

      return *this;
  }

  wxString& replace(iterator first, iterator last, size_type n, wxUniChar ch)
  {
      ;

      if ( wxStringOperations::IsSingleCodeUnitCharacter(ch) )
          m_impl.replace(first.impl(), last.impl(), n, (wxStringCharType)ch);
      else
          m_impl.replace(first.impl(), last.impl(),
                  wxStringOperations::EncodeNChars(n, ch));

      return *this;
  }

  wxString& replace(iterator first, iterator last,
                    const_iterator first1, const_iterator last1)
  {
      ;

      m_impl.replace(first.impl(), last.impl(), first1.impl(), last1.impl());

      return *this;
  }


  wxString& replace(iterator first, iterator last,
                    const char *first1, const char *last1)
    { replace(first, last, first1, last1 - first1); return *this; }

  wxString& replace(iterator first, iterator last,
                    const wchar_t *first1, const wchar_t *last1)
    { replace(first, last, first1, last1 - first1); return *this; }


  void swap(wxString& str)
  {
# 3119 "/usr/include/wx-3.1-unofficial/wx/string.h"
      m_impl.swap(str.m_impl);
  }


  size_t find(const wxString& str, size_t nStart = 0) const
    { return PosFromImpl(m_impl.find(str.m_impl, PosToImpl(nStart))); }



  size_t find(const char* sz, size_t nStart = 0, size_t n = npos) const
  {
      SubstrBufFromMB str(ImplStr(sz, n));
      return PosFromImpl(m_impl.find(str.data, PosToImpl(nStart), str.len));
  }

  size_t find(const wchar_t* sz, size_t nStart = 0, size_t n = npos) const
  {
      SubstrBufFromWC str(ImplStr(sz, n));
      return PosFromImpl(m_impl.find(str.data, PosToImpl(nStart), str.len));
  }

  size_t find(const wxScopedCharBuffer& s, size_t nStart = 0, size_t n = npos) const
    { return find(s.data(), nStart, n); }

  size_t find(const wxScopedWCharBuffer& s, size_t nStart = 0, size_t n = npos) const
    { return find(s.data(), nStart, n); }
  size_t find(const wxCStrData& s, size_t nStart = 0, size_t n = npos) const
    { return find(s.AsWChar(), nStart, n); }


  size_t find(wxUniChar ch, size_t nStart = 0) const
  {
    if ( wxStringOperations::IsSingleCodeUnitCharacter(ch) )
        return PosFromImpl(m_impl.find((wxStringCharType)ch,
                                       PosToImpl(nStart)));
    else
        return PosFromImpl(m_impl.find(wxStringOperations::EncodeChar(ch),
                                       PosToImpl(nStart)));
  }
  size_t find(wxUniCharRef ch, size_t nStart = 0) const
    { return find(wxUniChar(ch), nStart); }
  size_t find(char ch, size_t nStart = 0) const
    { return find(wxUniChar(ch), nStart); }
  size_t find(unsigned char ch, size_t nStart = 0) const
    { return find(wxUniChar(ch), nStart); }
  size_t find(wchar_t ch, size_t nStart = 0) const
    { return find(wxUniChar(ch), nStart); }




  size_t rfind(const wxString& str, size_t nStart = npos) const
    { return PosFromImpl(m_impl.rfind(str.m_impl, PosToImpl(nStart))); }



  size_t rfind(const char* sz, size_t nStart = npos, size_t n = npos) const
  {
      SubstrBufFromMB str(ImplStr(sz, n));
      return PosFromImpl(m_impl.rfind(str.data, PosToImpl(nStart), str.len));
  }

  size_t rfind(const wchar_t* sz, size_t nStart = npos, size_t n = npos) const
  {
      SubstrBufFromWC str(ImplStr(sz, n));
      return PosFromImpl(m_impl.rfind(str.data, PosToImpl(nStart), str.len));
  }

  size_t rfind(const wxScopedCharBuffer& s, size_t nStart = npos, size_t n = npos) const
    { return rfind(s.data(), nStart, n); }

  size_t rfind(const wxScopedWCharBuffer& s, size_t nStart = npos, size_t n = npos) const
    { return rfind(s.data(), nStart, n); }
  size_t rfind(const wxCStrData& s, size_t nStart = npos, size_t n = npos) const
    { return rfind(s.AsWChar(), nStart, n); }

  size_t rfind(wxUniChar ch, size_t nStart = npos) const
  {
    if ( wxStringOperations::IsSingleCodeUnitCharacter(ch) )
        return PosFromImpl(m_impl.rfind((wxStringCharType)ch,
                                        PosToImpl(nStart)));
    else
        return PosFromImpl(m_impl.rfind(wxStringOperations::EncodeChar(ch),
                                        PosToImpl(nStart)));
  }
  size_t rfind(wxUniCharRef ch, size_t nStart = npos) const
    { return rfind(wxUniChar(ch), nStart); }
  size_t rfind(char ch, size_t nStart = npos) const
    { return rfind(wxUniChar(ch), nStart); }
  size_t rfind(unsigned char ch, size_t nStart = npos) const
    { return rfind(wxUniChar(ch), nStart); }
  size_t rfind(wchar_t ch, size_t nStart = npos) const
    { return rfind(wxUniChar(ch), nStart); }






  size_t find_first_of(const wxString& str, size_t nStart = 0) const
    { return m_impl.find_first_of(str.m_impl, nStart); }

  size_t find_first_of(const char* sz, size_t nStart = 0) const
    { return m_impl.find_first_of(ImplStr(sz), nStart); }

  size_t find_first_of(const wchar_t* sz, size_t nStart = 0) const
    { return m_impl.find_first_of(ImplStr(sz), nStart); }

  size_t find_first_of(const char* sz, size_t nStart, size_t n) const
    { return m_impl.find_first_of(ImplStr(sz), nStart, n); }

  size_t find_first_of(const wchar_t* sz, size_t nStart, size_t n) const
    { return m_impl.find_first_of(ImplStr(sz), nStart, n); }
  size_t find_first_of(wxUniChar c, size_t nStart = 0) const
    { return m_impl.find_first_of((wxChar)c, nStart); }

  size_t find_last_of(const wxString& str, size_t nStart = npos) const
    { return m_impl.find_last_of(str.m_impl, nStart); }

  size_t find_last_of(const char* sz, size_t nStart = npos) const
    { return m_impl.find_last_of(ImplStr(sz), nStart); }

  size_t find_last_of(const wchar_t* sz, size_t nStart = npos) const
    { return m_impl.find_last_of(ImplStr(sz), nStart); }

  size_t find_last_of(const char* sz, size_t nStart, size_t n) const
    { return m_impl.find_last_of(ImplStr(sz), nStart, n); }

  size_t find_last_of(const wchar_t* sz, size_t nStart, size_t n) const
    { return m_impl.find_last_of(ImplStr(sz), nStart, n); }
  size_t find_last_of(wxUniChar c, size_t nStart = npos) const
    { return m_impl.find_last_of((wxChar)c, nStart); }

  size_t find_first_not_of(const wxString& str, size_t nStart = 0) const
    { return m_impl.find_first_not_of(str.m_impl, nStart); }

  size_t find_first_not_of(const char* sz, size_t nStart = 0) const
    { return m_impl.find_first_not_of(ImplStr(sz), nStart); }

  size_t find_first_not_of(const wchar_t* sz, size_t nStart = 0) const
    { return m_impl.find_first_not_of(ImplStr(sz), nStart); }

  size_t find_first_not_of(const char* sz, size_t nStart, size_t n) const
    { return m_impl.find_first_not_of(ImplStr(sz), nStart, n); }

  size_t find_first_not_of(const wchar_t* sz, size_t nStart, size_t n) const
    { return m_impl.find_first_not_of(ImplStr(sz), nStart, n); }
  size_t find_first_not_of(wxUniChar c, size_t nStart = 0) const
    { return m_impl.find_first_not_of((wxChar)c, nStart); }

  size_t find_last_not_of(const wxString& str, size_t nStart = npos) const
    { return m_impl.find_last_not_of(str.m_impl, nStart); }

  size_t find_last_not_of(const char* sz, size_t nStart = npos) const
    { return m_impl.find_last_not_of(ImplStr(sz), nStart); }

  size_t find_last_not_of(const wchar_t* sz, size_t nStart = npos) const
    { return m_impl.find_last_not_of(ImplStr(sz), nStart); }

  size_t find_last_not_of(const char* sz, size_t nStart, size_t n) const
    { return m_impl.find_last_not_of(ImplStr(sz), nStart, n); }

  size_t find_last_not_of(const wchar_t* sz, size_t nStart, size_t n) const
    { return m_impl.find_last_not_of(ImplStr(sz), nStart, n); }
  size_t find_last_not_of(wxUniChar c, size_t nStart = npos) const
    { return m_impl.find_last_not_of((wxChar)c, nStart); }
# 3370 "/usr/include/wx-3.1-unofficial/wx/string.h"
  size_t find_first_of(wxUniCharRef ch, size_t nStart = 0) const
    { return find_first_of(wxUniChar(ch), nStart); }
  size_t find_first_of(char ch, size_t nStart = 0) const
    { return find_first_of(wxUniChar(ch), nStart); }
  size_t find_first_of(unsigned char ch, size_t nStart = 0) const
    { return find_first_of(wxUniChar(ch), nStart); }
  size_t find_first_of(wchar_t ch, size_t nStart = 0) const
    { return find_first_of(wxUniChar(ch), nStart); }
  size_t find_last_of(wxUniCharRef ch, size_t nStart = npos) const
    { return find_last_of(wxUniChar(ch), nStart); }
  size_t find_last_of(char ch, size_t nStart = npos) const
    { return find_last_of(wxUniChar(ch), nStart); }
  size_t find_last_of(unsigned char ch, size_t nStart = npos) const
    { return find_last_of(wxUniChar(ch), nStart); }
  size_t find_last_of(wchar_t ch, size_t nStart = npos) const
    { return find_last_of(wxUniChar(ch), nStart); }
  size_t find_first_not_of(wxUniCharRef ch, size_t nStart = 0) const
    { return find_first_not_of(wxUniChar(ch), nStart); }
  size_t find_first_not_of(char ch, size_t nStart = 0) const
    { return find_first_not_of(wxUniChar(ch), nStart); }
  size_t find_first_not_of(unsigned char ch, size_t nStart = 0) const
    { return find_first_not_of(wxUniChar(ch), nStart); }
  size_t find_first_not_of(wchar_t ch, size_t nStart = 0) const
    { return find_first_not_of(wxUniChar(ch), nStart); }
  size_t find_last_not_of(wxUniCharRef ch, size_t nStart = npos) const
    { return find_last_not_of(wxUniChar(ch), nStart); }
  size_t find_last_not_of(char ch, size_t nStart = npos) const
    { return find_last_not_of(wxUniChar(ch), nStart); }
  size_t find_last_not_of(unsigned char ch, size_t nStart = npos) const
    { return find_last_not_of(wxUniChar(ch), nStart); }
  size_t find_last_not_of(wchar_t ch, size_t nStart = npos) const
    { return find_last_not_of(wxUniChar(ch), nStart); }


  size_t find_first_of(const wxCStrData& sz, size_t nStart = 0) const
    { return find_first_of(sz.AsString(), nStart); }

  size_t find_first_of(const wxScopedCharBuffer& sz, size_t nStart = 0) const
    { return find_first_of(sz.data(), nStart); }

  size_t find_first_of(const wxScopedWCharBuffer& sz, size_t nStart = 0) const
    { return find_first_of(sz.data(), nStart); }
  size_t find_first_of(const wxCStrData& sz, size_t nStart, size_t n) const
    { return find_first_of(sz.AsWChar(), nStart, n); }

  size_t find_first_of(const wxScopedCharBuffer& sz, size_t nStart, size_t n) const
    { return find_first_of(sz.data(), nStart, n); }

  size_t find_first_of(const wxScopedWCharBuffer& sz, size_t nStart, size_t n) const
    { return find_first_of(sz.data(), nStart, n); }

  size_t find_last_of(const wxCStrData& sz, size_t nStart = 0) const
    { return find_last_of(sz.AsString(), nStart); }

  size_t find_last_of(const wxScopedCharBuffer& sz, size_t nStart = 0) const
    { return find_last_of(sz.data(), nStart); }

  size_t find_last_of(const wxScopedWCharBuffer& sz, size_t nStart = 0) const
    { return find_last_of(sz.data(), nStart); }
  size_t find_last_of(const wxCStrData& sz, size_t nStart, size_t n) const
    { return find_last_of(sz.AsWChar(), nStart, n); }

  size_t find_last_of(const wxScopedCharBuffer& sz, size_t nStart, size_t n) const
    { return find_last_of(sz.data(), nStart, n); }

  size_t find_last_of(const wxScopedWCharBuffer& sz, size_t nStart, size_t n) const
    { return find_last_of(sz.data(), nStart, n); }

  size_t find_first_not_of(const wxCStrData& sz, size_t nStart = 0) const
    { return find_first_not_of(sz.AsString(), nStart); }

  size_t find_first_not_of(const wxScopedCharBuffer& sz, size_t nStart = 0) const
    { return find_first_not_of(sz.data(), nStart); }

  size_t find_first_not_of(const wxScopedWCharBuffer& sz, size_t nStart = 0) const
    { return find_first_not_of(sz.data(), nStart); }
  size_t find_first_not_of(const wxCStrData& sz, size_t nStart, size_t n) const
    { return find_first_not_of(sz.AsWChar(), nStart, n); }

  size_t find_first_not_of(const wxScopedCharBuffer& sz, size_t nStart, size_t n) const
    { return find_first_not_of(sz.data(), nStart, n); }

  size_t find_first_not_of(const wxScopedWCharBuffer& sz, size_t nStart, size_t n) const
    { return find_first_not_of(sz.data(), nStart, n); }

  size_t find_last_not_of(const wxCStrData& sz, size_t nStart = 0) const
    { return find_last_not_of(sz.AsString(), nStart); }

  size_t find_last_not_of(const wxScopedCharBuffer& sz, size_t nStart = 0) const
    { return find_last_not_of(sz.data(), nStart); }

  size_t find_last_not_of(const wxScopedWCharBuffer& sz, size_t nStart = 0) const
    { return find_last_not_of(sz.data(), nStart); }
  size_t find_last_not_of(const wxCStrData& sz, size_t nStart, size_t n) const
    { return find_last_not_of(sz.AsWChar(), nStart, n); }

  size_t find_last_not_of(const wxScopedCharBuffer& sz, size_t nStart, size_t n) const
    { return find_last_not_of(sz.data(), nStart, n); }

  size_t find_last_not_of(const wxScopedWCharBuffer& sz, size_t nStart, size_t n) const
    { return find_last_not_of(sz.data(), nStart, n); }

  bool starts_with(const wxString &str) const
    { return StartsWith(str); }

  bool starts_with(const char *sz) const
    { return StartsWith(sz); }

  bool starts_with(const wchar_t *sz) const
    { return StartsWith(sz); }

  bool ends_with(const wxString &str) const
    { return EndsWith(str); }

  bool ends_with(const char *sz) const
    { return EndsWith(sz); }

  bool ends_with(const wchar_t *sz) const
    { return EndsWith(sz); }


  wxString& operator+=(const wxString& s)
  {
      ;

      m_impl += s.m_impl;
      return *this;
  }


  wxString& operator+=(const char *psz)
  {
      ;

      m_impl += ImplStr(psz);
      return *this;
  }

  wxString& operator+=(const wchar_t *pwz)
  {
      ;

      m_impl += ImplStr(pwz);
      return *this;
  }
  wxString& operator+=(const wxCStrData& s)
  {
      ;

      m_impl += s.AsString().m_impl;
      return *this;
  }

  wxString& operator+=(const wxScopedCharBuffer& s)
    { return append(s); }

  wxString& operator+=(const wxScopedWCharBuffer& s)
    { return append(s); }

  wxString& operator+=(wxUniChar ch)
  {
      ;

      if ( wxStringOperations::IsSingleCodeUnitCharacter(ch) )
          m_impl += (wxStringCharType)ch;
      else
          m_impl += wxStringOperations::EncodeChar(ch);

      return *this;
  }
  wxString& operator+=(wxUniCharRef ch) { return *this += wxUniChar(ch); }
  wxString& operator+=(int ch) { return *this += wxUniChar(ch); }
  wxString& operator+=(char ch) { return *this += wxUniChar(ch); }
  wxString& operator+=(unsigned char ch) { return *this += wxUniChar(ch); }
  wxString& operator+=(wchar_t ch) { return *this += wxUniChar(ch); }

private:
# 3570 "/usr/include/wx-3.1-unofficial/wx/string.h"
  int DoPrintfWchar(const wxChar *format, ...);
  static wxString DoFormatWchar(const wxChar *format, ...);
# 3583 "/usr/include/wx-3.1-unofficial/wx/string.h"
private:
  wxStringImpl m_impl;
# 3593 "/usr/include/wx-3.1-unofficial/wx/string.h"
  template<typename T>
  struct ConvertedBuffer
  {


      ConvertedBuffer() : m_str(
# 3598 "/usr/include/wx-3.1-unofficial/wx/string.h" 3 4
                               __null
# 3598 "/usr/include/wx-3.1-unofficial/wx/string.h"
                                   ), m_len(0) {}
      ~ConvertedBuffer()
          { free(m_str); }

      bool Extend(size_t len)
      {

          void * const str = realloc(m_str, sizeof(T)*(len + 1));
          if ( !str )
              return false;

          m_str = static_cast<T *>(str);
          m_len = len;

          return true;
      }

      const wxScopedCharTypeBuffer<T> AsScopedBuffer() const
      {
          return wxScopedCharTypeBuffer<T>::CreateNonOwned(m_str, m_len);
      }

      T *m_str;
      size_t m_len;
  };
# 3636 "/usr/include/wx-3.1-unofficial/wx/string.h"
  const char *AsChar(const wxMBConv& conv) const;


  wxScopedCharBuffer AsCharBuf(const wxMBConv& conv) const
  {
# 3656 "/usr/include/wx-3.1-unofficial/wx/string.h"
      if ( !AsChar(conv) )
      {
# 3666 "/usr/include/wx-3.1-unofficial/wx/string.h"
          return wxScopedCharBuffer::CreateNonOwned("", 0);
      }

      return m_convertedToChar.AsScopedBuffer();
  }

  ConvertedBuffer<char> m_convertedToChar;
# 3716 "/usr/include/wx-3.1-unofficial/wx/string.h"
  friend class wxCStrData;
  friend class wxStringInternalBuffer;
  friend class wxStringInternalBufferLength;
};



inline wxString::iterator operator+(ptrdiff_t n, wxString::iterator i)
  { return i + n; }
inline wxString::const_iterator operator+(ptrdiff_t n, wxString::const_iterator i)
  { return i + n; }
inline wxString::reverse_iterator operator+(ptrdiff_t n, wxString::reverse_iterator i)
  { return i + n; }
inline wxString::const_reverse_iterator operator+(ptrdiff_t n, wxString::const_reverse_iterator i)
  { return i + n; }





wxString __attribute__ ((visibility("default"))) operator+(const wxString& string1, const wxString& string2);

wxString __attribute__ ((visibility("default"))) operator+(const wxString& string, const char *psz);

wxString __attribute__ ((visibility("default"))) operator+(const wxString& string, const wchar_t *pwz);

wxString __attribute__ ((visibility("default"))) operator+(const char *psz, const wxString& string);

wxString __attribute__ ((visibility("default"))) operator+(const wchar_t *pwz, const wxString& string);

wxString __attribute__ ((visibility("default"))) operator+(const wxString& string, wxUniChar ch);
wxString __attribute__ ((visibility("default"))) operator+(wxUniChar ch, const wxString& string);

inline wxString operator+(const wxString& string, wxUniCharRef ch)
    { return string + (wxUniChar)ch; }
inline wxString operator+(const wxString& string, char ch)
    { return string + wxUniChar(ch); }
inline wxString operator+(const wxString& string, wchar_t ch)
    { return string + wxUniChar(ch); }
inline wxString operator+(wxUniCharRef ch, const wxString& string)
    { return (wxUniChar)ch + string; }
inline wxString operator+(char ch, const wxString& string)
    { return wxUniChar(ch) + string; }
inline wxString operator+(wchar_t ch, const wxString& string)
    { return wxUniChar(ch) + string; }
# 3769 "/usr/include/wx-3.1-unofficial/wx/string.h"
namespace wxPrivate
{



template <>
struct wxStringAsBufHelper<char>
{
    static wxScopedCharBuffer Get(const wxString& s, size_t *len)
    {
        wxScopedCharBuffer buf(s.mb_str(wxGet_wxConvUTF8()));
        if ( len )
            *len = buf ? strlen(buf) : 0;
        return buf;
    }
};

template <>
struct wxStringAsBufHelper<wchar_t>
{
    static wxScopedWCharBuffer Get(const wxString& s, size_t *len)
    {
        const size_t length = s.length();
        if ( len )
            *len = length;
        return wxScopedWCharBuffer::CreateNonOwned(s.wx_str(), length);
    }
};
# 3826 "/usr/include/wx-3.1-unofficial/wx/string.h"
}
# 3887 "/usr/include/wx-3.1-unofficial/wx/string.h"
template<typename T>
class wxStringTypeBufferBase
{
public:
    typedef T CharType;

    wxStringTypeBufferBase(wxString& str, size_t lenWanted = 1024)
        : m_str(str), m_buf(lenWanted)
    {




        size_t len;
        const wxCharTypeBuffer<CharType> buf(str.tchar_str<CharType>(&len));
        if ( buf )
        {
            if ( len > lenWanted )
            {


                m_buf.data()[lenWanted] = 0;
                len = lenWanted - 1;
            }

            memcpy(m_buf.data(), buf, (len + 1)*sizeof(CharType));
        }


    }

    operator CharType*() { return m_buf.data(); }

protected:
    wxString& m_str;
    wxCharTypeBuffer<CharType> m_buf;
};

template<typename T>
class wxStringTypeBufferLengthBase : public wxStringTypeBufferBase<T>
{
public:
    wxStringTypeBufferLengthBase(wxString& str, size_t lenWanted = 1024)
        : wxStringTypeBufferBase<T>(str, lenWanted),
          m_len(0),
          m_lenSet(false)
        { }

    ~wxStringTypeBufferLengthBase()
    {
        do { if ( this->m_lenSet ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/string.h", 3937, __FUNCTION__, "this->m_lenSet", "forgot to call SetLength()"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );
    }

    void SetLength(size_t length) { m_len = length; m_lenSet = true; }

protected:
    size_t m_len;
    bool m_lenSet;
};

template<typename T>
class wxStringTypeBuffer : public wxStringTypeBufferBase<T>
{
public:
    wxStringTypeBuffer(wxString& str, size_t lenWanted = 1024)
        : wxStringTypeBufferBase<T>(str, lenWanted)
        { }

    ~wxStringTypeBuffer()
    {
        this->m_str.assign(this->m_buf.data());
    }

    private: wxStringTypeBuffer(const wxStringTypeBuffer&) = delete; wxStringTypeBuffer& operator=(const wxStringTypeBuffer&) = delete;
};

template<typename T>
class wxStringTypeBufferLength : public wxStringTypeBufferLengthBase<T>
{
public:
    wxStringTypeBufferLength(wxString& str, size_t lenWanted = 1024)
        : wxStringTypeBufferLengthBase<T>(str, lenWanted)
        { }

    ~wxStringTypeBufferLength()
    {
        this->m_str.assign(this->m_buf.data(), this->m_len);
    }

    private: wxStringTypeBufferLength(const wxStringTypeBufferLength&) = delete; wxStringTypeBufferLength& operator=(const wxStringTypeBufferLength&) = delete;
};



class wxStringInternalBuffer : public wxStringTypeBufferBase<wxStringCharType>
{
public:
    wxStringInternalBuffer(wxString& str, size_t lenWanted = 1024)
        : wxStringTypeBufferBase<wxStringCharType>(str, lenWanted) {}
    ~wxStringInternalBuffer()
        { m_str.m_impl.assign(m_buf.data()); }

    private: wxStringInternalBuffer(const wxStringInternalBuffer&) = delete; wxStringInternalBuffer& operator=(const wxStringInternalBuffer&) = delete;
};

class wxStringInternalBufferLength
    : public wxStringTypeBufferLengthBase<wxStringCharType>
{
public:
    wxStringInternalBufferLength(wxString& str, size_t lenWanted = 1024)
        : wxStringTypeBufferLengthBase<wxStringCharType>(str, lenWanted) {}

    ~wxStringInternalBufferLength()
    {
        m_str.m_impl.assign(m_buf.data(), m_len);
    }

    private: wxStringInternalBufferLength(const wxStringInternalBufferLength&) = delete; wxStringInternalBufferLength& operator=(const wxStringInternalBufferLength&) = delete;
};





typedef wxStringTypeBuffer<wxChar> wxStringBuffer;
typedef wxStringTypeBufferLength<wxChar> wxStringBufferLength;
# 4037 "/usr/include/wx-3.1-unofficial/wx/string.h"
class wxUTF8StringBuffer : public wxStringTypeBufferBase<char>
{
public:
    wxUTF8StringBuffer(wxString& str, size_t lenWanted = 1024)
        : wxStringTypeBufferBase<char>(str, lenWanted) {}
    ~wxUTF8StringBuffer()
    {
        wxMBConvStrictUTF8 conv;
        size_t wlen = conv.ToWChar(
# 4045 "/usr/include/wx-3.1-unofficial/wx/string.h" 3 4
                                  __null
# 4045 "/usr/include/wx-3.1-unofficial/wx/string.h"
                                      , 0, m_buf);
        if ( wlen != ((size_t)-1) ) {} else { do { if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/string.h", 4046, __FUNCTION__, "\"wlen != ((size_t)-1)\"", "invalid UTF-8 data in string buffer?"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); return; } struct wxDummyCheckStruct4046;

        wxStringInternalBuffer wbuf(m_str, wlen);
        conv.ToWChar(wbuf, wlen, m_buf);
    }

    private: wxUTF8StringBuffer(const wxUTF8StringBuffer&) = delete; wxUTF8StringBuffer& operator=(const wxUTF8StringBuffer&) = delete;
};

class wxUTF8StringBufferLength : public wxStringTypeBufferLengthBase<char>
{
public:
    wxUTF8StringBufferLength(wxString& str, size_t lenWanted = 1024)
        : wxStringTypeBufferLengthBase<char>(str, lenWanted) {}
    ~wxUTF8StringBufferLength()
    {
        if ( m_lenSet ) {} else { do { if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/string.h", 4062, __FUNCTION__, "\"m_lenSet\"", "length not set"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); return; } struct wxDummyCheckStruct4062;

        wxMBConvStrictUTF8 conv;
        size_t wlen = conv.ToWChar(
# 4065 "/usr/include/wx-3.1-unofficial/wx/string.h" 3 4
                                  __null
# 4065 "/usr/include/wx-3.1-unofficial/wx/string.h"
                                      , 0, m_buf, m_len);
        if ( wlen != ((size_t)-1) ) {} else { do { if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/string.h", 4066, __FUNCTION__, "\"wlen != ((size_t)-1)\"", "invalid UTF-8 data in string buffer?"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); return; } struct wxDummyCheckStruct4066;

        wxStringInternalBufferLength wbuf(m_str, wlen);
        conv.ToWChar(wbuf, wlen, m_buf, m_len);
        wbuf.SetLength(wlen);
    }

    private: wxUTF8StringBufferLength(const wxUTF8StringBufferLength&) = delete; wxUTF8StringBufferLength& operator=(const wxUTF8StringBufferLength&) = delete;
};
# 4085 "/usr/include/wx-3.1-unofficial/wx/string.h"
inline bool operator ==(const wchar_t * x, const wxString& y) { return 0 == y.Cmp(x); } inline bool operator !=(const wchar_t * x, const wxString& y) { return 0 != y.Cmp(x); } inline bool operator >=(const wchar_t * x, const wxString& y) { return 0 >= y.Cmp(x); } inline bool operator <=(const wchar_t * x, const wxString& y) { return 0 <= y.Cmp(x); } inline bool operator >(const wchar_t * x, const wxString& y) { return 0 > y.Cmp(x); } inline bool operator <(const wchar_t * x, const wxString& y) { return 0 < y.Cmp(x); } inline bool operator ==(const wxString& y, const wchar_t * x) { return 0 == y.Cmp(x); } inline bool operator !=(const wxString& y, const wchar_t * x) { return 0 != y.Cmp(x); } inline bool operator >=(const wxString& y, const wchar_t * x) { return 0 <= y.Cmp(x); } inline bool operator <=(const wxString& y, const wchar_t * x) { return 0 >= y.Cmp(x); } inline bool operator >(const wxString& y, const wchar_t * x) { return 0 < y.Cmp(x); } inline bool operator <(const wxString& y, const wchar_t * x) { return 0 > y.Cmp(x); }

inline bool operator ==(const char * x, const wxString& y) { return 0 == y.Cmp(x); } inline bool operator !=(const char * x, const wxString& y) { return 0 != y.Cmp(x); } inline bool operator >=(const char * x, const wxString& y) { return 0 >= y.Cmp(x); } inline bool operator <=(const char * x, const wxString& y) { return 0 <= y.Cmp(x); } inline bool operator >(const char * x, const wxString& y) { return 0 > y.Cmp(x); } inline bool operator <(const char * x, const wxString& y) { return 0 < y.Cmp(x); } inline bool operator ==(const wxString& y, const char * x) { return 0 == y.Cmp(x); } inline bool operator !=(const wxString& y, const char * x) { return 0 != y.Cmp(x); } inline bool operator >=(const wxString& y, const char * x) { return 0 <= y.Cmp(x); } inline bool operator <=(const wxString& y, const char * x) { return 0 >= y.Cmp(x); } inline bool operator >(const wxString& y, const char * x) { return 0 < y.Cmp(x); } inline bool operator <(const wxString& y, const char * x) { return 0 > y.Cmp(x); }




inline bool operator==(const wxString& s1, const wxString& s2)
    { return s1.IsSameAs(s2); }
inline bool operator!=(const wxString& s1, const wxString& s2)
    { return !s1.IsSameAs(s2); }
inline bool operator< (const wxString& s1, const wxString& s2)
    { return s1.Cmp(s2) < 0; }
inline bool operator> (const wxString& s1, const wxString& s2)
    { return s1.Cmp(s2) > 0; }
inline bool operator<=(const wxString& s1, const wxString& s2)
    { return s1.Cmp(s2) <= 0; }
inline bool operator>=(const wxString& s1, const wxString& s2)
    { return s1.Cmp(s2) >= 0; }

inline bool operator==(const wxString& s1, const wxCStrData& s2)
    { return s1 == s2.AsString(); }
inline bool operator==(const wxCStrData& s1, const wxString& s2)
    { return s1.AsString() == s2; }
inline bool operator!=(const wxString& s1, const wxCStrData& s2)
    { return s1 != s2.AsString(); }
inline bool operator!=(const wxCStrData& s1, const wxString& s2)
    { return s1.AsString() != s2; }

inline bool operator==(const wxString& s1, const wxScopedWCharBuffer& s2)
    { return (s1.Cmp((const wchar_t *)s2) == 0); }
inline bool operator==(const wxScopedWCharBuffer& s1, const wxString& s2)
    { return (s2.Cmp((const wchar_t *)s1) == 0); }
inline bool operator!=(const wxString& s1, const wxScopedWCharBuffer& s2)
    { return (s1.Cmp((const wchar_t *)s2) != 0); }
inline bool operator!=(const wxScopedWCharBuffer& s1, const wxString& s2)
    { return (s2.Cmp((const wchar_t *)s1) != 0); }


inline bool operator==(const wxString& s1, const wxScopedCharBuffer& s2)
    { return (s1.Cmp((const char *)s2) == 0); }
inline bool operator==(const wxScopedCharBuffer& s1, const wxString& s2)
    { return (s2.Cmp((const char *)s1) == 0); }
inline bool operator!=(const wxString& s1, const wxScopedCharBuffer& s2)
    { return (s1.Cmp((const char *)s2) != 0); }
inline bool operator!=(const wxScopedCharBuffer& s1, const wxString& s2)
    { return (s2.Cmp((const char *)s1) != 0); }


inline wxString operator+(const wxString& string, const wxScopedWCharBuffer& buf)
    { return string + (const wchar_t *)buf; }
inline wxString operator+(const wxScopedWCharBuffer& buf, const wxString& string)
    { return (const wchar_t *)buf + string; }


inline wxString operator+(const wxString& string, const wxScopedCharBuffer& buf)
    { return string + (const char *)buf; }
inline wxString operator+(const wxScopedCharBuffer& buf, const wxString& string)
    { return (const char *)buf + string; }



inline bool operator==(const wxUniChar& c, const wxString& s) { return s.IsSameAs(c); }
inline bool operator==(const wxUniCharRef& c, const wxString& s) { return s.IsSameAs(c); }
inline bool operator==(char c, const wxString& s) { return s.IsSameAs(c); }
inline bool operator==(wchar_t c, const wxString& s) { return s.IsSameAs(c); }
inline bool operator==(int c, const wxString& s) { return s.IsSameAs(c); }
inline bool operator==(const wxString& s, const wxUniChar& c) { return s.IsSameAs(c); }
inline bool operator==(const wxString& s, const wxUniCharRef& c) { return s.IsSameAs(c); }
inline bool operator==(const wxString& s, char c) { return s.IsSameAs(c); }
inline bool operator==(const wxString& s, wchar_t c) { return s.IsSameAs(c); }
inline bool operator!=(const wxUniChar& c, const wxString& s) { return !s.IsSameAs(c); }
inline bool operator!=(const wxUniCharRef& c, const wxString& s) { return !s.IsSameAs(c); }
inline bool operator!=(char c, const wxString& s) { return !s.IsSameAs(c); }
inline bool operator!=(wchar_t c, const wxString& s) { return !s.IsSameAs(c); }
inline bool operator!=(int c, const wxString& s) { return !s.IsSameAs(c); }
inline bool operator!=(const wxString& s, const wxUniChar& c) { return !s.IsSameAs(c); }
inline bool operator!=(const wxString& s, const wxUniCharRef& c) { return !s.IsSameAs(c); }
inline bool operator!=(const wxString& s, char c) { return !s.IsSameAs(c); }
inline bool operator!=(const wxString& s, wchar_t c) { return !s.IsSameAs(c); }



inline bool wxString::const_iterator::operator==(const iterator& i) const
    { return *this == const_iterator(i); }
inline bool wxString::const_iterator::operator!=(const iterator& i) const
    { return *this != const_iterator(i); }
inline bool wxString::const_iterator::operator<(const iterator& i) const
    { return *this < const_iterator(i); }
inline bool wxString::const_iterator::operator>(const iterator& i) const
    { return *this > const_iterator(i); }
inline bool wxString::const_iterator::operator<=(const iterator& i) const
    { return *this <= const_iterator(i); }
inline bool wxString::const_iterator::operator>=(const iterator& i) const
    { return *this >= const_iterator(i); }

inline bool wxString::iterator::operator==(const const_iterator& i) const
    { return i == *this; }
inline bool wxString::iterator::operator!=(const const_iterator& i) const
    { return i != *this; }
inline bool wxString::iterator::operator<(const const_iterator& i) const
    { return i > *this; }
inline bool wxString::iterator::operator>(const const_iterator& i) const
    { return i < *this; }
inline bool wxString::iterator::operator<=(const const_iterator& i) const
    { return i >= *this; }
inline bool wxString::iterator::operator>=(const const_iterator& i) const
    { return i <= *this; }
# 4202 "/usr/include/wx-3.1-unofficial/wx/string.h"
inline bool operator ==(const wchar_t * x, const wxCStrData& y) { return x == y.AsWChar(); } inline bool operator !=(const wchar_t * x, const wxCStrData& y) { return x != y.AsWChar(); } inline bool operator >=(const wchar_t * x, const wxCStrData& y) { return x >= y.AsWChar(); } inline bool operator <=(const wchar_t * x, const wxCStrData& y) { return x <= y.AsWChar(); } inline bool operator >(const wchar_t * x, const wxCStrData& y) { return x > y.AsWChar(); } inline bool operator <(const wchar_t * x, const wxCStrData& y) { return x < y.AsWChar(); } inline bool operator ==(const wxCStrData& y, const wchar_t * x) { return x == y.AsWChar(); } inline bool operator !=(const wxCStrData& y, const wchar_t * x) { return x != y.AsWChar(); } inline bool operator >=(const wxCStrData& y, const wchar_t * x) { return x <= y.AsWChar(); } inline bool operator <=(const wxCStrData& y, const wchar_t * x) { return x >= y.AsWChar(); } inline bool operator >(const wxCStrData& y, const wchar_t * x) { return x < y.AsWChar(); } inline bool operator <(const wxCStrData& y, const wchar_t * x) { return x > y.AsWChar(); }

inline bool operator ==(const char * x, const wxCStrData& y) { return x == y.AsChar(); } inline bool operator !=(const char * x, const wxCStrData& y) { return x != y.AsChar(); } inline bool operator >=(const char * x, const wxCStrData& y) { return x >= y.AsChar(); } inline bool operator <=(const char * x, const wxCStrData& y) { return x <= y.AsChar(); } inline bool operator >(const char * x, const wxCStrData& y) { return x > y.AsChar(); } inline bool operator <(const char * x, const wxCStrData& y) { return x < y.AsChar(); } inline bool operator ==(const wxCStrData& y, const char * x) { return x == y.AsChar(); } inline bool operator !=(const wxCStrData& y, const char * x) { return x != y.AsChar(); } inline bool operator >=(const wxCStrData& y, const char * x) { return x <= y.AsChar(); } inline bool operator <=(const wxCStrData& y, const char * x) { return x >= y.AsChar(); } inline bool operator >(const wxCStrData& y, const char * x) { return x < y.AsChar(); } inline bool operator <(const wxCStrData& y, const char * x) { return x > y.AsChar(); }
# 4226 "/usr/include/wx-3.1-unofficial/wx/string.h"
# 1 "/usr/include/c++/10/functional" 1 3
# 46 "/usr/include/c++/10/functional" 3
       
# 47 "/usr/include/c++/10/functional" 3







# 1 "/usr/include/c++/10/tuple" 1 3
# 32 "/usr/include/c++/10/tuple" 3
       
# 33 "/usr/include/c++/10/tuple" 3






# 1 "/usr/include/c++/10/array" 1 3
# 32 "/usr/include/c++/10/array" 3
       
# 33 "/usr/include/c++/10/array" 3
# 43 "/usr/include/c++/10/array" 3

# 43 "/usr/include/c++/10/array" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Tp, std::size_t _Nm>
    struct __array_traits
    {
      typedef _Tp _Type[_Nm];
      typedef __is_swappable<_Tp> _Is_swappable;
      typedef __is_nothrow_swappable<_Tp> _Is_nothrow_swappable;

      static constexpr _Tp&
      _S_ref(const _Type& __t, std::size_t __n) noexcept
      { return const_cast<_Tp&>(__t[__n]); }

      static constexpr _Tp*
      _S_ptr(const _Type& __t) noexcept
      { return const_cast<_Tp*>(__t); }
    };

 template<typename _Tp>
   struct __array_traits<_Tp, 0>
   {
     struct _Type { };
     typedef true_type _Is_swappable;
     typedef true_type _Is_nothrow_swappable;

     static constexpr _Tp&
     _S_ref(const _Type&, std::size_t) noexcept
     { return *static_cast<_Tp*>(nullptr); }

     static constexpr _Tp*
     _S_ptr(const _Type&) noexcept
     { return nullptr; }
   };
# 93 "/usr/include/c++/10/array" 3
  template<typename _Tp, std::size_t _Nm>
    struct array
    {
      typedef _Tp value_type;
      typedef value_type* pointer;
      typedef const value_type* const_pointer;
      typedef value_type& reference;
      typedef const value_type& const_reference;
      typedef value_type* iterator;
      typedef const value_type* const_iterator;
      typedef std::size_t size_type;
      typedef std::ptrdiff_t difference_type;
      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;


      typedef std::__array_traits<_Tp, _Nm> _AT_Type;
      typename _AT_Type::_Type _M_elems;




      void
      fill(const value_type& __u)
      { std::fill_n(begin(), size(), __u); }

      void
      swap(array& __other)
      noexcept(_AT_Type::_Is_nothrow_swappable::value)
      { std::swap_ranges(begin(), end(), __other.begin()); }


      iterator
      begin() noexcept
      { return iterator(data()); }

      const_iterator
      begin() const noexcept
      { return const_iterator(data()); }

      iterator
      end() noexcept
      { return iterator(data() + _Nm); }

      const_iterator
      end() const noexcept
      { return const_iterator(data() + _Nm); }

      reverse_iterator
      rbegin() noexcept
      { return reverse_iterator(end()); }

      const_reverse_iterator
      rbegin() const noexcept
      { return const_reverse_iterator(end()); }

      reverse_iterator
      rend() noexcept
      { return reverse_iterator(begin()); }

      const_reverse_iterator
      rend() const noexcept
      { return const_reverse_iterator(begin()); }

      const_iterator
      cbegin() const noexcept
      { return const_iterator(data()); }

      const_iterator
      cend() const noexcept
      { return const_iterator(data() + _Nm); }

      const_reverse_iterator
      crbegin() const noexcept
      { return const_reverse_iterator(end()); }

      const_reverse_iterator
      crend() const noexcept
      { return const_reverse_iterator(begin()); }


      constexpr size_type
      size() const noexcept { return _Nm; }

      constexpr size_type
      max_size() const noexcept { return _Nm; }

      constexpr bool
      empty() const noexcept { return size() == 0; }


      reference
      operator[](size_type __n) noexcept
      { return _AT_Type::_S_ref(_M_elems, __n); }

      constexpr const_reference
      operator[](size_type __n) const noexcept
      { return _AT_Type::_S_ref(_M_elems, __n); }

      reference
      at(size_type __n)
      {
 if (__n >= _Nm)
   std::__throw_out_of_range_fmt(("array::at: __n (which is %zu) " ">= _Nm (which is %zu)")
                                 ,
     __n, _Nm);
 return _AT_Type::_S_ref(_M_elems, __n);
      }

      constexpr const_reference
      at(size_type __n) const
      {


 return __n < _Nm ? _AT_Type::_S_ref(_M_elems, __n)
   : (std::__throw_out_of_range_fmt(("array::at: __n (which is %zu) " ">= _Nm (which is %zu)")
                                    ,
        __n, _Nm),
      _AT_Type::_S_ref(_M_elems, 0));
      }

      reference
      front() noexcept
      { return *begin(); }

      constexpr const_reference
      front() const noexcept
      { return _AT_Type::_S_ref(_M_elems, 0); }

      reference
      back() noexcept
      { return _Nm ? *(end() - 1) : *end(); }

      constexpr const_reference
      back() const noexcept
      {
 return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
             : _AT_Type::_S_ref(_M_elems, 0);
      }

      pointer
      data() noexcept
      { return _AT_Type::_S_ptr(_M_elems); }

      const_pointer
      data() const noexcept
      { return _AT_Type::_S_ptr(_M_elems); }
    };
# 250 "/usr/include/c++/10/array" 3
  template<typename _Tp, std::size_t _Nm>
   
    inline bool
    operator==(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
    { return std::equal(__one.begin(), __one.end(), __two.begin()); }
# 279 "/usr/include/c++/10/array" 3
  template<typename _Tp, std::size_t _Nm>
   
    inline bool
    operator!=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
    { return !(__one == __two); }

  template<typename _Tp, std::size_t _Nm>
   
    inline bool
    operator<(const array<_Tp, _Nm>& __a, const array<_Tp, _Nm>& __b)
    {
      return std::lexicographical_compare(__a.begin(), __a.end(),
       __b.begin(), __b.end());
    }

  template<typename _Tp, std::size_t _Nm>
   
    inline bool
    operator>(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
    { return __two < __one; }

  template<typename _Tp, std::size_t _Nm>
   
    inline bool
    operator<=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
    { return !(__one > __two); }

  template<typename _Tp, std::size_t _Nm>
   
    inline bool
    operator>=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
    { return !(__one < __two); }



  template<typename _Tp, std::size_t _Nm>
   
    inline


    typename enable_if<
      std::__array_traits<_Tp, _Nm>::_Is_swappable::value
    >::type



    swap(array<_Tp, _Nm>& __one, array<_Tp, _Nm>& __two)
    noexcept(noexcept(__one.swap(__two)))
    { __one.swap(__two); }


  template<typename _Tp, std::size_t _Nm>
    typename enable_if<
      !std::__array_traits<_Tp, _Nm>::_Is_swappable::value>::type
    swap(array<_Tp, _Nm>&, array<_Tp, _Nm>&) = delete;


  template<std::size_t _Int, typename _Tp, std::size_t _Nm>
    constexpr _Tp&
    get(array<_Tp, _Nm>& __arr) noexcept
    {
      static_assert(_Int < _Nm, "array index is within bounds");
      return std::__array_traits<_Tp, _Nm>::
 _S_ref(__arr._M_elems, _Int);
    }

  template<std::size_t _Int, typename _Tp, std::size_t _Nm>
    constexpr _Tp&&
    get(array<_Tp, _Nm>&& __arr) noexcept
    {
      static_assert(_Int < _Nm, "array index is within bounds");
      return std::move(std::get<_Int>(__arr));
    }

  template<std::size_t _Int, typename _Tp, std::size_t _Nm>
    constexpr const _Tp&
    get(const array<_Tp, _Nm>& __arr) noexcept
    {
      static_assert(_Int < _Nm, "array index is within bounds");
      return std::__array_traits<_Tp, _Nm>::
 _S_ref(__arr._M_elems, _Int);
    }

  template<std::size_t _Int, typename _Tp, std::size_t _Nm>
    constexpr const _Tp&&
    get(const array<_Tp, _Nm>&& __arr) noexcept
    {
      static_assert(_Int < _Nm, "array index is within bounds");
      return std::move(std::get<_Int>(__arr));
    }
# 408 "/usr/include/c++/10/array" 3

}

namespace std __attribute__ ((__visibility__ ("default")))
{





  template<typename _Tp>
    struct tuple_size;


  template<typename _Tp, std::size_t _Nm>
    struct tuple_size<std::array<_Tp, _Nm>>
    : public integral_constant<std::size_t, _Nm> { };


  template<std::size_t _Int, typename _Tp>
    struct tuple_element;


  template<std::size_t _Int, typename _Tp, std::size_t _Nm>
    struct tuple_element<_Int, std::array<_Tp, _Nm>>
    {
      static_assert(_Int < _Nm, "index is out of bounds");
      typedef _Tp type;
    };

  template<typename _Tp, std::size_t _Nm>
    struct __is_tuple_like_impl<std::array<_Tp, _Nm>> : true_type
    { };


}
# 40 "/usr/include/c++/10/tuple" 2 3
# 1 "/usr/include/c++/10/bits/uses_allocator.h" 1 3
# 35 "/usr/include/c++/10/bits/uses_allocator.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  struct __erased_type { };




  template<typename _Alloc, typename _Tp>
    using __is_erased_or_convertible
      = __or_<is_convertible<_Alloc, _Tp>, is_same<_Tp, __erased_type>>;


  struct allocator_arg_t { explicit allocator_arg_t() = default; };

  constexpr allocator_arg_t allocator_arg =
    allocator_arg_t();

  template<typename _Tp, typename _Alloc, typename = __void_t<>>
    struct __uses_allocator_helper
    : false_type { };

  template<typename _Tp, typename _Alloc>
    struct __uses_allocator_helper<_Tp, _Alloc,
       __void_t<typename _Tp::allocator_type>>
    : __is_erased_or_convertible<_Alloc, typename _Tp::allocator_type>::type
    { };


  template<typename _Tp, typename _Alloc>
    struct uses_allocator
    : __uses_allocator_helper<_Tp, _Alloc>::type
    { };

  struct __uses_alloc_base { };

  struct __uses_alloc0 : __uses_alloc_base
  {
    struct _Sink { void operator=(const void*) { } } _M_a;
  };

  template<typename _Alloc>
    struct __uses_alloc1 : __uses_alloc_base { const _Alloc* _M_a; };

  template<typename _Alloc>
    struct __uses_alloc2 : __uses_alloc_base { const _Alloc* _M_a; };

  template<bool, typename _Tp, typename _Alloc, typename... _Args>
    struct __uses_alloc;

  template<typename _Tp, typename _Alloc, typename... _Args>
    struct __uses_alloc<true, _Tp, _Alloc, _Args...>
    : conditional<
        is_constructible<_Tp, allocator_arg_t, const _Alloc&, _Args...>::value,
        __uses_alloc1<_Alloc>,
        __uses_alloc2<_Alloc>>::type
    {


      static_assert(__or_<
   is_constructible<_Tp, allocator_arg_t, const _Alloc&, _Args...>,
   is_constructible<_Tp, _Args..., const _Alloc&>>::value,
   "construction with an allocator must be possible"
   " if uses_allocator is true");
    };

  template<typename _Tp, typename _Alloc, typename... _Args>
    struct __uses_alloc<false, _Tp, _Alloc, _Args...>
    : __uses_alloc0 { };

  template<typename _Tp, typename _Alloc, typename... _Args>
    using __uses_alloc_t =
      __uses_alloc<uses_allocator<_Tp, _Alloc>::value, _Tp, _Alloc, _Args...>;

  template<typename _Tp, typename _Alloc, typename... _Args>
   
    inline __uses_alloc_t<_Tp, _Alloc, _Args...>
    __use_alloc(const _Alloc& __a)
    {
      __uses_alloc_t<_Tp, _Alloc, _Args...> __ret;
      __ret._M_a = std::__addressof(__a);
      return __ret;
    }

  template<typename _Tp, typename _Alloc, typename... _Args>
    void
    __use_alloc(const _Alloc&&) = delete;







  template<template<typename...> class _Predicate,
    typename _Tp, typename _Alloc, typename... _Args>
    struct __is_uses_allocator_predicate
    : conditional<uses_allocator<_Tp, _Alloc>::value,
      __or_<_Predicate<_Tp, allocator_arg_t, _Alloc, _Args...>,
     _Predicate<_Tp, _Args..., _Alloc>>,
      _Predicate<_Tp, _Args...>>::type { };

  template<typename _Tp, typename _Alloc, typename... _Args>
    struct __is_uses_allocator_constructible
    : __is_uses_allocator_predicate<is_constructible, _Tp, _Alloc, _Args...>
    { };


  template<typename _Tp, typename _Alloc, typename... _Args>
    constexpr bool __is_uses_allocator_constructible_v =
      __is_uses_allocator_constructible<_Tp, _Alloc, _Args...>::value;


  template<typename _Tp, typename _Alloc, typename... _Args>
    struct __is_nothrow_uses_allocator_constructible
    : __is_uses_allocator_predicate<is_nothrow_constructible,
        _Tp, _Alloc, _Args...>
    { };



  template<typename _Tp, typename _Alloc, typename... _Args>
    constexpr bool
    __is_nothrow_uses_allocator_constructible_v =
      __is_nothrow_uses_allocator_constructible<_Tp, _Alloc, _Args...>::value;


  template<typename _Tp, typename... _Args>
    void __uses_allocator_construct_impl(__uses_alloc0 __a, _Tp* __ptr,
      _Args&&... __args)
    { ::new ((void*)__ptr) _Tp(std::forward<_Args>(__args)...); }

  template<typename _Tp, typename _Alloc, typename... _Args>
    void __uses_allocator_construct_impl(__uses_alloc1<_Alloc> __a, _Tp* __ptr,
      _Args&&... __args)
    {
      ::new ((void*)__ptr) _Tp(allocator_arg, *__a._M_a,
          std::forward<_Args>(__args)...);
    }

  template<typename _Tp, typename _Alloc, typename... _Args>
    void __uses_allocator_construct_impl(__uses_alloc2<_Alloc> __a, _Tp* __ptr,
      _Args&&... __args)
    { ::new ((void*)__ptr) _Tp(std::forward<_Args>(__args)..., *__a._M_a); }

  template<typename _Tp, typename _Alloc, typename... _Args>
    void __uses_allocator_construct(const _Alloc& __a, _Tp* __ptr,
        _Args&&... __args)
    {
      std::__uses_allocator_construct_impl(
   std::__use_alloc<_Tp, _Alloc, _Args...>(__a), __ptr,
   std::forward<_Args>(__args)...);
    }


}
# 41 "/usr/include/c++/10/tuple" 2 3
# 1 "/usr/include/c++/10/bits/invoke.h" 1 3
# 33 "/usr/include/c++/10/bits/invoke.h" 3
       
# 34 "/usr/include/c++/10/bits/invoke.h" 3







namespace std __attribute__ ((__visibility__ ("default")))
{

# 52 "/usr/include/c++/10/bits/invoke.h" 3
  template<typename _Tp, typename _Up = typename __inv_unwrap<_Tp>::type>
    constexpr _Up&&
    __invfwd(typename remove_reference<_Tp>::type& __t) noexcept
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
    _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
    _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
    }

  template<typename _Res, typename _MemPtr, typename _Tp>
    constexpr _Res
    __invoke_impl(__invoke_memobj_ref, _MemPtr&& __f, _Tp&& __t)
    { return __invfwd<_Tp>(__t).*__f; }

  template<typename _Res, typename _MemPtr, typename _Tp>
    constexpr _Res
    __invoke_impl(__invoke_memobj_deref, _MemPtr&& __f, _Tp&& __t)
    { return (*std::forward<_Tp>(__t)).*__f; }


  template<typename _Callable, typename... _Args>
    constexpr typename __invoke_result<_Callable, _Args...>::type
    __invoke(_Callable&& __fn, _Args&&... __args)
    noexcept(__is_nothrow_invocable<_Callable, _Args...>::value)
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
     std::forward<_Args>(__args)...);
    }
# 118 "/usr/include/c++/10/bits/invoke.h" 3
  template<typename _Res, typename _Callable, typename... _Args>
    using __can_invoke_as_void = __enable_if_t<
      __and_<is_void<_Res>, __is_invocable<_Callable, _Args...>>::value,
      _Res
    >;

  template<typename _Res, typename _Callable, typename... _Args>
    using __can_invoke_as_nonvoid = __enable_if_t<
      __and_<__not_<is_void<_Res>>,
      is_convertible<typename __invoke_result<_Callable, _Args...>::type,
       _Res>
      >::value,
      _Res
    >;


  template<typename _Res, typename _Callable, typename... _Args>
    constexpr __can_invoke_as_nonvoid<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
     std::forward<_Args>(__args)...);
    }


  template<typename _Res, typename _Callable, typename... _Args>
    constexpr __can_invoke_as_void<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
     std::forward<_Args>(__args)...);
    }



}
# 42 "/usr/include/c++/10/tuple" 2 3





namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename... _Elements>
    class tuple;

  template<typename _Tp>
    struct __is_empty_non_tuple : is_empty<_Tp> { };


  template<typename _El0, typename... _El>
    struct __is_empty_non_tuple<tuple<_El0, _El...>> : false_type { };


  template<typename _Tp>
    using __empty_not_final
    = typename conditional<__is_final(_Tp), false_type,
      __is_empty_non_tuple<_Tp>>::type;

  template<std::size_t _Idx, typename _Head,
    bool = __empty_not_final<_Head>::value>
    struct _Head_base;

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, true>
    : public _Head
    {
      constexpr _Head_base()
      : _Head() { }

      constexpr _Head_base(const _Head& __h)
      : _Head(__h) { }

      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
 : _Head(std::forward<_UHead>(__h)) { }

      _Head_base(allocator_arg_t, __uses_alloc0)
      : _Head() { }

      template<typename _Alloc>
 _Head_base(allocator_arg_t, __uses_alloc1<_Alloc> __a)
 : _Head(allocator_arg, *__a._M_a) { }

      template<typename _Alloc>
 _Head_base(allocator_arg_t, __uses_alloc2<_Alloc> __a)
 : _Head(*__a._M_a) { }

      template<typename _UHead>
 _Head_base(__uses_alloc0, _UHead&& __uhead)
 : _Head(std::forward<_UHead>(__uhead)) { }

      template<typename _Alloc, typename _UHead>
 _Head_base(__uses_alloc1<_Alloc> __a, _UHead&& __uhead)
 : _Head(allocator_arg, *__a._M_a, std::forward<_UHead>(__uhead)) { }

      template<typename _Alloc, typename _UHead>
 _Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
 : _Head(std::forward<_UHead>(__uhead), *__a._M_a) { }

      static constexpr _Head&
      _M_head(_Head_base& __b) noexcept { return __b; }

      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }

      constexpr _Head_base(const _Head& __h)
      : _M_head_impl(__h) { }

      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
 : _M_head_impl(std::forward<_UHead>(__h)) { }

     
      _Head_base(allocator_arg_t, __uses_alloc0)
      : _M_head_impl() { }

      template<typename _Alloc>
 _Head_base(allocator_arg_t, __uses_alloc1<_Alloc> __a)
 : _M_head_impl(allocator_arg, *__a._M_a) { }

      template<typename _Alloc>
 _Head_base(allocator_arg_t, __uses_alloc2<_Alloc> __a)
 : _M_head_impl(*__a._M_a) { }

      template<typename _UHead>

 _Head_base(__uses_alloc0, _UHead&& __uhead)
 : _M_head_impl(std::forward<_UHead>(__uhead)) { }

      template<typename _Alloc, typename _UHead>
 _Head_base(__uses_alloc1<_Alloc> __a, _UHead&& __uhead)
 : _M_head_impl(allocator_arg, *__a._M_a, std::forward<_UHead>(__uhead))
 { }

      template<typename _Alloc, typename _UHead>
 _Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
 : _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }

      static constexpr _Head&
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }

      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }

      _Head _M_head_impl;
    };
# 182 "/usr/include/c++/10/tuple" 3
  template<std::size_t _Idx, typename... _Elements>
    struct _Tuple_impl;






  template<std::size_t _Idx, typename _Head, typename... _Tail>
    struct _Tuple_impl<_Idx, _Head, _Tail...>
    : public _Tuple_impl<_Idx + 1, _Tail...>,
      private _Head_base<_Idx, _Head>
    {
      template<std::size_t, typename...> friend class _Tuple_impl;

      typedef _Tuple_impl<_Idx + 1, _Tail...> _Inherited;
      typedef _Head_base<_Idx, _Head> _Base;

      static constexpr _Head&
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }

      static constexpr const _Head&
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }

      static constexpr _Inherited&
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }

      static constexpr const _Inherited&
      _M_tail(const _Tuple_impl& __t) noexcept { return __t; }

      constexpr _Tuple_impl()
      : _Inherited(), _Base() { }

      explicit
      constexpr _Tuple_impl(const _Head& __head, const _Tail&... __tail)
      : _Inherited(__tail...), _Base(__head) { }

      template<typename _UHead, typename... _UTail, typename = typename
               enable_if<sizeof...(_Tail) == sizeof...(_UTail)>::type>
        explicit
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 : _Inherited(std::forward<_UTail>(__tail)...),
   _Base(std::forward<_UHead>(__head)) { }

      constexpr _Tuple_impl(const _Tuple_impl&) = default;



      _Tuple_impl& operator=(const _Tuple_impl&) = delete;

      constexpr
      _Tuple_impl(_Tuple_impl&& __in)
      noexcept(__and_<is_nothrow_move_constructible<_Head>,
               is_nothrow_move_constructible<_Inherited>>::value)
      : _Inherited(std::move(_M_tail(__in))),
 _Base(std::forward<_Head>(_M_head(__in))) { }

      template<typename... _UElements>
        constexpr _Tuple_impl(const _Tuple_impl<_Idx, _UElements...>& __in)
 : _Inherited(_Tuple_impl<_Idx, _UElements...>::_M_tail(__in)),
   _Base(_Tuple_impl<_Idx, _UElements...>::_M_head(__in)) { }

      template<typename _UHead, typename... _UTails>
        constexpr _Tuple_impl(_Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
 : _Inherited(std::move
       (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in))),
   _Base(std::forward<_UHead>
  (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in))) { }

      template<typename _Alloc>

 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a)
 : _Inherited(__tag, __a),
          _Base(__tag, __use_alloc<_Head>(__a)) { }

      template<typename _Alloc>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
      const _Head& __head, const _Tail&... __tail)
 : _Inherited(__tag, __a, __tail...),
          _Base(__use_alloc<_Head, _Alloc, _Head>(__a), __head) { }

      template<typename _Alloc, typename _UHead, typename... _UTail,
               typename = typename enable_if<sizeof...(_Tail)
          == sizeof...(_UTail)>::type>

 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             _UHead&& __head, _UTail&&... __tail)
 : _Inherited(__tag, __a, std::forward<_UTail>(__tail)...),
          _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),
         std::forward<_UHead>(__head)) { }

      template<typename _Alloc>

        _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             const _Tuple_impl& __in)
 : _Inherited(__tag, __a, _M_tail(__in)),
          _Base(__use_alloc<_Head, _Alloc, _Head>(__a), _M_head(__in)) { }

      template<typename _Alloc>

 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             _Tuple_impl&& __in)
 : _Inherited(__tag, __a, std::move(_M_tail(__in))),
   _Base(__use_alloc<_Head, _Alloc, _Head>(__a),
         std::forward<_Head>(_M_head(__in))) { }

      template<typename _Alloc, typename _UHead, typename... _UTails>

 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
      const _Tuple_impl<_Idx, _UHead, _UTails...>& __in)
 : _Inherited(__tag, __a,
       _Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in)),
   _Base(__use_alloc<_Head, _Alloc, const _UHead&>(__a),
  _Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in)) { }

      template<typename _Alloc, typename _UHead, typename... _UTails>

 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             _Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
 : _Inherited(__tag, __a, std::move
       (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in))),
   _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),
                std::forward<_UHead>
  (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in))) { }

      template<typename... _UElements>

        void
        _M_assign(const _Tuple_impl<_Idx, _UElements...>& __in)
        {
   _M_head(*this) = _Tuple_impl<_Idx, _UElements...>::_M_head(__in);
   _M_tail(*this)._M_assign(
       _Tuple_impl<_Idx, _UElements...>::_M_tail(__in));
 }

      template<typename _UHead, typename... _UTails>

        void
        _M_assign(_Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
        {
   _M_head(*this) = std::forward<_UHead>
     (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in));
   _M_tail(*this)._M_assign(
       std::move(_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in)));
 }

    protected:
     
      void
      _M_swap(_Tuple_impl& __in)
      {
 using std::swap;
 swap(_M_head(*this), _M_head(__in));
 _Inherited::_M_swap(_M_tail(__in));
      }
    };


  template<std::size_t _Idx, typename _Head>
    struct _Tuple_impl<_Idx, _Head>
    : private _Head_base<_Idx, _Head>
    {
      template<std::size_t, typename...> friend class _Tuple_impl;

      typedef _Head_base<_Idx, _Head> _Base;

      static constexpr _Head&
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }

      static constexpr const _Head&
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }

      constexpr _Tuple_impl()
      : _Base() { }

      explicit
      constexpr _Tuple_impl(const _Head& __head)
      : _Base(__head) { }

      template<typename _UHead>
        explicit
        constexpr _Tuple_impl(_UHead&& __head)
 : _Base(std::forward<_UHead>(__head)) { }

      constexpr _Tuple_impl(const _Tuple_impl&) = default;



      _Tuple_impl& operator=(const _Tuple_impl&) = delete;

      constexpr
      _Tuple_impl(_Tuple_impl&& __in)
      noexcept(is_nothrow_move_constructible<_Head>::value)
      : _Base(std::forward<_Head>(_M_head(__in))) { }

      template<typename _UHead>
        constexpr _Tuple_impl(const _Tuple_impl<_Idx, _UHead>& __in)
 : _Base(_Tuple_impl<_Idx, _UHead>::_M_head(__in)) { }

      template<typename _UHead>
        constexpr _Tuple_impl(_Tuple_impl<_Idx, _UHead>&& __in)
 : _Base(std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(__in)))
 { }

      template<typename _Alloc>

 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a)
 : _Base(__tag, __use_alloc<_Head>(__a)) { }

      template<typename _Alloc>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
      const _Head& __head)
 : _Base(__use_alloc<_Head, _Alloc, _Head>(__a), __head) { }

      template<typename _Alloc, typename _UHead>

 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             _UHead&& __head)
 : _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),
         std::forward<_UHead>(__head)) { }

      template<typename _Alloc>

        _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             const _Tuple_impl& __in)
 : _Base(__use_alloc<_Head, _Alloc, _Head>(__a), _M_head(__in)) { }

      template<typename _Alloc>

 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             _Tuple_impl&& __in)
 : _Base(__use_alloc<_Head, _Alloc, _Head>(__a),
         std::forward<_Head>(_M_head(__in))) { }

      template<typename _Alloc, typename _UHead>

 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             const _Tuple_impl<_Idx, _UHead>& __in)
 : _Base(__use_alloc<_Head, _Alloc, const _UHead&>(__a),
  _Tuple_impl<_Idx, _UHead>::_M_head(__in)) { }

      template<typename _Alloc, typename _UHead>

 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             _Tuple_impl<_Idx, _UHead>&& __in)
 : _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),
                std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(__in)))
 { }

      template<typename _UHead>

        void
        _M_assign(const _Tuple_impl<_Idx, _UHead>& __in)
        {
   _M_head(*this) = _Tuple_impl<_Idx, _UHead>::_M_head(__in);
 }

      template<typename _UHead>

        void
        _M_assign(_Tuple_impl<_Idx, _UHead>&& __in)
        {
   _M_head(*this)
     = std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(__in));
 }

    protected:
     
      void
      _M_swap(_Tuple_impl& __in)
      {
 using std::swap;
 swap(_M_head(*this), _M_head(__in));
      }
    };



  template<bool, typename... _Types>
    struct _TupleConstraints
    {



      template<typename... _UTypes>
 static constexpr bool __is_implicitly_constructible()
 {
   return __and_<is_constructible<_Types, _UTypes>...,
   is_convertible<_UTypes, _Types>...
   >::value;
 }




      template<typename... _UTypes>
 static constexpr bool __is_explicitly_constructible()
 {
   return __and_<is_constructible<_Types, _UTypes>...,
   __not_<__and_<is_convertible<_UTypes, _Types>...>>
   >::value;
 }

      static constexpr bool __is_implicitly_default_constructible()
      {
 return __and_<std::__is_implicitly_default_constructible<_Types>...
        >::value;
      }

      static constexpr bool __is_explicitly_default_constructible()
      {
 return __and_<is_default_constructible<_Types>...,
        __not_<__and_<
   std::__is_implicitly_default_constructible<_Types>...>
        >>::value;
      }
    };



  template<typename... _Types>
    struct _TupleConstraints<false, _Types...>
    {
      template<typename... _UTypes>
 static constexpr bool __is_implicitly_constructible()
 { return false; }

      template<typename... _UTypes>
 static constexpr bool __is_explicitly_constructible()
 { return false; }
    };


  template<typename... _Elements>
    class tuple : public _Tuple_impl<0, _Elements...>
    {
      typedef _Tuple_impl<0, _Elements...> _Inherited;

      template<bool _Cond>
 using _TCC = _TupleConstraints<_Cond, _Elements...>;


      template<bool _Dummy>
 using _ImplicitDefaultCtor = __enable_if_t<
   _TCC<_Dummy>::__is_implicitly_default_constructible(),
   bool>;


      template<bool _Dummy>
 using _ExplicitDefaultCtor = __enable_if_t<
   _TCC<_Dummy>::__is_explicitly_default_constructible(),
   bool>;


      template<bool _Cond, typename... _Args>
 using _ImplicitCtor = __enable_if_t<
   _TCC<_Cond>::template __is_implicitly_constructible<_Args...>(),
   bool>;


      template<bool _Cond, typename... _Args>
 using _ExplicitCtor = __enable_if_t<
   _TCC<_Cond>::template __is_explicitly_constructible<_Args...>(),
   bool>;

      template<typename... _UElements>
 static constexpr
 __enable_if_t<sizeof...(_UElements) == sizeof...(_Elements), bool>
 __assignable()
 { return __and_<is_assignable<_Elements&, _UElements>...>::value; }


      template<typename... _UElements>
 static constexpr bool __nothrow_assignable()
 {
   return
     __and_<is_nothrow_assignable<_Elements&, _UElements>...>::value;
 }


      template<typename... _UElements>
 static constexpr bool __nothrow_constructible()
 {
   return
     __and_<is_nothrow_constructible<_Elements, _UElements>...>::value;
 }


      template<typename _Up>
 static constexpr bool __valid_args()
 {
   return sizeof...(_Elements) == 1
     && !is_same<tuple, __remove_cvref_t<_Up>>::value;
 }


      template<typename, typename, typename... _Tail>
 static constexpr bool __valid_args()
 { return (sizeof...(_Tail) + 2) == sizeof...(_Elements); }
# 591 "/usr/include/c++/10/tuple" 3
      template<typename _Tuple, typename = tuple,
        typename = __remove_cvref_t<_Tuple>>
 struct _UseOtherCtor
 : false_type
 { };


      template<typename _Tuple, typename _Tp, typename _Up>
 struct _UseOtherCtor<_Tuple, tuple<_Tp>, tuple<_Up>>
 : __or_<is_convertible<_Tuple, _Tp>, is_constructible<_Tp, _Tuple>>
 { };


      template<typename _Tuple, typename _Tp>
 struct _UseOtherCtor<_Tuple, tuple<_Tp>, tuple<_Tp>>
 : true_type
 { };




      template<typename _Tuple>
 static constexpr bool __use_other_ctor()
 { return _UseOtherCtor<_Tuple>::value; }

    public:
      template<typename _Dummy = void,
        _ImplicitDefaultCtor<is_void<_Dummy>::value> = true>
 constexpr
 tuple()
 noexcept(__and_<is_nothrow_default_constructible<_Elements>...>::value)
 : _Inherited() { }

      template<typename _Dummy = void,
        _ExplicitDefaultCtor<is_void<_Dummy>::value> = false>
 explicit constexpr
 tuple()
 noexcept(__and_<is_nothrow_default_constructible<_Elements>...>::value)
 : _Inherited() { }

      template<bool _NotEmpty = (sizeof...(_Elements) >= 1),
        _ImplicitCtor<_NotEmpty, const _Elements&...> = true>
 constexpr
 tuple(const _Elements&... __elements)
 noexcept(__nothrow_constructible<const _Elements&...>())
 : _Inherited(__elements...) { }

      template<bool _NotEmpty = (sizeof...(_Elements) >= 1),
        _ExplicitCtor<_NotEmpty, const _Elements&...> = false>
 explicit constexpr
 tuple(const _Elements&... __elements)
 noexcept(__nothrow_constructible<const _Elements&...>())
 : _Inherited(__elements...) { }

      template<typename... _UElements,
        bool _Valid = __valid_args<_UElements...>(),
        _ImplicitCtor<_Valid, _UElements...> = true>
 constexpr
 tuple(_UElements&&... __elements)
 noexcept(__nothrow_constructible<_UElements...>())
 : _Inherited(std::forward<_UElements>(__elements)...) { }

      template<typename... _UElements,
        bool _Valid = __valid_args<_UElements...>(),
        _ExplicitCtor<_Valid, _UElements...> = false>
 explicit constexpr
 tuple(_UElements&&... __elements)
 noexcept(__nothrow_constructible<_UElements...>())
 : _Inherited(std::forward<_UElements>(__elements)...) { }

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;

      template<typename... _UElements,
        bool _Valid = (sizeof...(_Elements) == sizeof...(_UElements))
      && !__use_other_ctor<const tuple<_UElements...>&>(),
        _ImplicitCtor<_Valid, const _UElements&...> = true>
 constexpr
 tuple(const tuple<_UElements...>& __in)
 noexcept(__nothrow_constructible<const _UElements&...>())
 : _Inherited(static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
 { }

      template<typename... _UElements,
        bool _Valid = (sizeof...(_Elements) == sizeof...(_UElements))
      && !__use_other_ctor<const tuple<_UElements...>&>(),
        _ExplicitCtor<_Valid, const _UElements&...> = false>
 explicit constexpr
 tuple(const tuple<_UElements...>& __in)
 noexcept(__nothrow_constructible<const _UElements&...>())
 : _Inherited(static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
 { }

      template<typename... _UElements,
        bool _Valid = (sizeof...(_Elements) == sizeof...(_UElements))
        && !__use_other_ctor<tuple<_UElements...>&&>(),
        _ImplicitCtor<_Valid, _UElements...> = true>
 constexpr
 tuple(tuple<_UElements...>&& __in)
 noexcept(__nothrow_constructible<_UElements...>())
 : _Inherited(static_cast<_Tuple_impl<0, _UElements...>&&>(__in)) { }

      template<typename... _UElements,
        bool _Valid = (sizeof...(_Elements) == sizeof...(_UElements))
        && !__use_other_ctor<tuple<_UElements...>&&>(),
        _ExplicitCtor<_Valid, _UElements...> = false>
 explicit constexpr
 tuple(tuple<_UElements...>&& __in)
 noexcept(__nothrow_constructible<_UElements...>())
 : _Inherited(static_cast<_Tuple_impl<0, _UElements...>&&>(__in)) { }



      template<typename _Alloc,
        _ImplicitDefaultCtor<is_object<_Alloc>::value> = true>

 tuple(allocator_arg_t __tag, const _Alloc& __a)
 : _Inherited(__tag, __a) { }

      template<typename _Alloc, bool _NotEmpty = (sizeof...(_Elements) >= 1),
        _ImplicitCtor<_NotEmpty, const _Elements&...> = true>

 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const _Elements&... __elements)
 : _Inherited(__tag, __a, __elements...) { }

      template<typename _Alloc, bool _NotEmpty = (sizeof...(_Elements) >= 1),
        _ExplicitCtor<_NotEmpty, const _Elements&...> = false>

 explicit
 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const _Elements&... __elements)
 : _Inherited(__tag, __a, __elements...) { }

      template<typename _Alloc, typename... _UElements,
        bool _Valid = __valid_args<_UElements...>(),
        _ImplicitCtor<_Valid, _UElements...> = true>

 tuple(allocator_arg_t __tag, const _Alloc& __a,
       _UElements&&... __elements)
 : _Inherited(__tag, __a, std::forward<_UElements>(__elements)...)
 { }

      template<typename _Alloc, typename... _UElements,
   bool _Valid = __valid_args<_UElements...>(),
        _ExplicitCtor<_Valid, _UElements...> = false>

 explicit
 tuple(allocator_arg_t __tag, const _Alloc& __a,
       _UElements&&... __elements)
 : _Inherited(__tag, __a, std::forward<_UElements>(__elements)...)
 { }

      template<typename _Alloc>

 tuple(allocator_arg_t __tag, const _Alloc& __a, const tuple& __in)
 : _Inherited(__tag, __a, static_cast<const _Inherited&>(__in)) { }

      template<typename _Alloc>

 tuple(allocator_arg_t __tag, const _Alloc& __a, tuple&& __in)
 : _Inherited(__tag, __a, static_cast<_Inherited&&>(__in)) { }

      template<typename _Alloc, typename... _UElements,
        bool _Valid = (sizeof...(_Elements) == sizeof...(_UElements))
        && !__use_other_ctor<const tuple<_UElements...>&>(),
        _ImplicitCtor<_Valid, const _UElements&...> = true>

 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const tuple<_UElements...>& __in)
 : _Inherited(__tag, __a,
              static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
 { }

      template<typename _Alloc, typename... _UElements,
        bool _Valid = (sizeof...(_Elements) == sizeof...(_UElements))
        && !__use_other_ctor<const tuple<_UElements...>&>(),
        _ExplicitCtor<_Valid, const _UElements&...> = false>

 explicit
 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const tuple<_UElements...>& __in)
 : _Inherited(__tag, __a,
              static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
 { }

      template<typename _Alloc, typename... _UElements,
        bool _Valid = (sizeof...(_Elements) == sizeof...(_UElements))
        && !__use_other_ctor<tuple<_UElements...>&&>(),
        _ImplicitCtor<_Valid, _UElements...> = true>

 tuple(allocator_arg_t __tag, const _Alloc& __a,
       tuple<_UElements...>&& __in)
 : _Inherited(__tag, __a,
              static_cast<_Tuple_impl<0, _UElements...>&&>(__in))
 { }

      template<typename _Alloc, typename... _UElements,
        bool _Valid = (sizeof...(_Elements) == sizeof...(_UElements))
        && !__use_other_ctor<tuple<_UElements...>&&>(),
        _ExplicitCtor<_Valid, _UElements...> = false>

 explicit
 tuple(allocator_arg_t __tag, const _Alloc& __a,
       tuple<_UElements...>&& __in)
 : _Inherited(__tag, __a,
              static_cast<_Tuple_impl<0, _UElements...>&&>(__in))
 { }



     
      tuple&
      operator=(typename conditional<__assignable<const _Elements&...>(),
         const tuple&,
         const __nonesuch&>::type __in)
      noexcept(__nothrow_assignable<const _Elements&...>())
      {
 this->_M_assign(__in);
 return *this;
      }

     
      tuple&
      operator=(typename conditional<__assignable<_Elements...>(),
         tuple&&,
         __nonesuch&&>::type __in)
      noexcept(__nothrow_assignable<_Elements...>())
      {
 this->_M_assign(std::move(__in));
 return *this;
      }

      template<typename... _UElements>

 __enable_if_t<__assignable<const _UElements&...>(), tuple&>
 operator=(const tuple<_UElements...>& __in)
 noexcept(__nothrow_assignable<const _UElements&...>())
 {
   this->_M_assign(__in);
   return *this;
 }

      template<typename... _UElements>

 __enable_if_t<__assignable<_UElements...>(), tuple&>
 operator=(tuple<_UElements...>&& __in)
 noexcept(__nothrow_assignable<_UElements...>())
 {
   this->_M_assign(std::move(__in));
   return *this;
 }


     
      void
      swap(tuple& __in)
      noexcept(__and_<__is_nothrow_swappable<_Elements>...>::value)
      { _Inherited::_M_swap(__in); }
    };
# 867 "/usr/include/c++/10/tuple" 3
  template<>
    class tuple<>
    {
    public:
      void swap(tuple&) noexcept { }


      tuple() = default;

      template<typename _Alloc>

 tuple(allocator_arg_t, const _Alloc&) noexcept { }
      template<typename _Alloc>

 tuple(allocator_arg_t, const _Alloc&, const tuple&) noexcept { }
    };



  template<typename _T1, typename _T2>
    class tuple<_T1, _T2> : public _Tuple_impl<0, _T1, _T2>
    {
      typedef _Tuple_impl<0, _T1, _T2> _Inherited;


      template<bool _Dummy, typename _U1, typename _U2>
 using _ImplicitDefaultCtor = __enable_if_t<
   _TupleConstraints<_Dummy, _U1, _U2>::
     __is_implicitly_default_constructible(),
   bool>;


      template<bool _Dummy, typename _U1, typename _U2>
 using _ExplicitDefaultCtor = __enable_if_t<
   _TupleConstraints<_Dummy, _U1, _U2>::
     __is_explicitly_default_constructible(),
   bool>;

      template<bool _Dummy>
 using _TCC = _TupleConstraints<_Dummy, _T1, _T2>;


      template<bool _Cond, typename _U1, typename _U2>
 using _ImplicitCtor = __enable_if_t<
   _TCC<_Cond>::template __is_implicitly_constructible<_U1, _U2>(),
   bool>;


      template<bool _Cond, typename _U1, typename _U2>
 using _ExplicitCtor = __enable_if_t<
   _TCC<_Cond>::template __is_explicitly_constructible<_U1, _U2>(),
   bool>;

      template<typename _U1, typename _U2>
 static constexpr bool __assignable()
 {
   return __and_<is_assignable<_T1&, _U1>,
   is_assignable<_T2&, _U2>>::value;
 }

      template<typename _U1, typename _U2>
 static constexpr bool __nothrow_assignable()
 {
   return __and_<is_nothrow_assignable<_T1&, _U1>,
   is_nothrow_assignable<_T2&, _U2>>::value;
 }

      template<typename _U1, typename _U2>
 static constexpr bool __nothrow_constructible()
 {
   return __and_<is_nothrow_constructible<_T1, _U1>,
       is_nothrow_constructible<_T2, _U2>>::value;
 }

      static constexpr bool __nothrow_default_constructible()
      {
 return __and_<is_nothrow_default_constructible<_T1>,
        is_nothrow_default_constructible<_T2>>::value;
      }

      template<typename _U1>
 static constexpr bool __is_alloc_arg()
 { return is_same<__remove_cvref_t<_U1>, allocator_arg_t>::value; }

    public:
      template<bool _Dummy = true,
        _ImplicitDefaultCtor<_Dummy, _T1, _T2> = true>
 constexpr
 tuple()
 noexcept(__nothrow_default_constructible())
 : _Inherited() { }

      template<bool _Dummy = true,
        _ExplicitDefaultCtor<_Dummy, _T1, _T2> = false>
 explicit constexpr
 tuple()
 noexcept(__nothrow_default_constructible())
 : _Inherited() { }

      template<bool _Dummy = true,
        _ImplicitCtor<_Dummy, const _T1&, const _T2&> = true>
 constexpr
 tuple(const _T1& __a1, const _T2& __a2)
 noexcept(__nothrow_constructible<const _T1&, const _T2&>())
 : _Inherited(__a1, __a2) { }

      template<bool _Dummy = true,
        _ExplicitCtor<_Dummy, const _T1&, const _T2&> = false>
 explicit constexpr
 tuple(const _T1& __a1, const _T2& __a2)
 noexcept(__nothrow_constructible<const _T1&, const _T2&>())
 : _Inherited(__a1, __a2) { }

      template<typename _U1, typename _U2,
        _ImplicitCtor<!__is_alloc_arg<_U1>(), _U1, _U2> = true>
 constexpr
 tuple(_U1&& __a1, _U2&& __a2)
 noexcept(__nothrow_constructible<_U1, _U2>())
 : _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }

      template<typename _U1, typename _U2,
        _ExplicitCtor<!__is_alloc_arg<_U1>(), _U1, _U2> = false>
 explicit constexpr
 tuple(_U1&& __a1, _U2&& __a2)
 noexcept(__nothrow_constructible<_U1, _U2>())
 : _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;

      template<typename _U1, typename _U2,
        _ImplicitCtor<true, const _U1&, const _U2&> = true>
 constexpr
 tuple(const tuple<_U1, _U2>& __in)
 noexcept(__nothrow_constructible<const _U1&, const _U2&>())
 : _Inherited(static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in)) { }

      template<typename _U1, typename _U2,
        _ExplicitCtor<true, const _U1&, const _U2&> = false>
 explicit constexpr
 tuple(const tuple<_U1, _U2>& __in)
 noexcept(__nothrow_constructible<const _U1&, const _U2&>())
 : _Inherited(static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in)) { }

      template<typename _U1, typename _U2,
        _ImplicitCtor<true, _U1, _U2> = true>
 constexpr
 tuple(tuple<_U1, _U2>&& __in)
 noexcept(__nothrow_constructible<_U1, _U2>())
 : _Inherited(static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in)) { }

      template<typename _U1, typename _U2,
        _ExplicitCtor<true, _U1, _U2> = false>
 explicit constexpr
 tuple(tuple<_U1, _U2>&& __in)
 noexcept(__nothrow_constructible<_U1, _U2>())
 : _Inherited(static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in)) { }

      template<typename _U1, typename _U2,
        _ImplicitCtor<true, const _U1&, const _U2&> = true>
 constexpr
 tuple(const pair<_U1, _U2>& __in)
 noexcept(__nothrow_constructible<const _U1&, const _U2&>())
 : _Inherited(__in.first, __in.second) { }

      template<typename _U1, typename _U2,
        _ExplicitCtor<true, const _U1&, const _U2&> = false>
 explicit constexpr
 tuple(const pair<_U1, _U2>& __in)
 noexcept(__nothrow_constructible<const _U1&, const _U2&>())
 : _Inherited(__in.first, __in.second) { }

      template<typename _U1, typename _U2,
        _ImplicitCtor<true, _U1, _U2> = true>
 constexpr
 tuple(pair<_U1, _U2>&& __in)
 noexcept(__nothrow_constructible<_U1, _U2>())
 : _Inherited(std::forward<_U1>(__in.first),
       std::forward<_U2>(__in.second)) { }

      template<typename _U1, typename _U2,
        _ExplicitCtor<true, _U1, _U2> = false>
 explicit constexpr
 tuple(pair<_U1, _U2>&& __in)
 noexcept(__nothrow_constructible<_U1, _U2>())
 : _Inherited(std::forward<_U1>(__in.first),
       std::forward<_U2>(__in.second)) { }



      template<typename _Alloc,
        _ImplicitDefaultCtor<is_object<_Alloc>::value, _T1, _T2> = true>

 tuple(allocator_arg_t __tag, const _Alloc& __a)
 : _Inherited(__tag, __a) { }

      template<typename _Alloc, bool _Dummy = true,
        _ImplicitCtor<_Dummy, const _T1&, const _T2&> = true>

 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const _T1& __a1, const _T2& __a2)
 : _Inherited(__tag, __a, __a1, __a2) { }

      template<typename _Alloc, bool _Dummy = true,
        _ExplicitCtor<_Dummy, const _T1&, const _T2&> = false>
 explicit

 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const _T1& __a1, const _T2& __a2)
 : _Inherited(__tag, __a, __a1, __a2) { }

      template<typename _Alloc, typename _U1, typename _U2,
        _ImplicitCtor<true, _U1, _U2> = true>

 tuple(allocator_arg_t __tag, const _Alloc& __a, _U1&& __a1, _U2&& __a2)
 : _Inherited(__tag, __a, std::forward<_U1>(__a1),
              std::forward<_U2>(__a2)) { }

      template<typename _Alloc, typename _U1, typename _U2,
        _ExplicitCtor<true, _U1, _U2> = false>
 explicit

 tuple(allocator_arg_t __tag, const _Alloc& __a,
       _U1&& __a1, _U2&& __a2)
 : _Inherited(__tag, __a, std::forward<_U1>(__a1),
              std::forward<_U2>(__a2)) { }

      template<typename _Alloc>

 tuple(allocator_arg_t __tag, const _Alloc& __a, const tuple& __in)
 : _Inherited(__tag, __a, static_cast<const _Inherited&>(__in)) { }

      template<typename _Alloc>

 tuple(allocator_arg_t __tag, const _Alloc& __a, tuple&& __in)
 : _Inherited(__tag, __a, static_cast<_Inherited&&>(__in)) { }

      template<typename _Alloc, typename _U1, typename _U2,
        _ImplicitCtor<true, const _U1&, const _U2&> = true>

 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const tuple<_U1, _U2>& __in)
 : _Inherited(__tag, __a,
              static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in))
 { }

      template<typename _Alloc, typename _U1, typename _U2,
        _ExplicitCtor<true, const _U1&, const _U2&> = false>
 explicit

 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const tuple<_U1, _U2>& __in)
 : _Inherited(__tag, __a,
              static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in))
 { }

      template<typename _Alloc, typename _U1, typename _U2,
        _ImplicitCtor<true, _U1, _U2> = true>

 tuple(allocator_arg_t __tag, const _Alloc& __a, tuple<_U1, _U2>&& __in)
 : _Inherited(__tag, __a, static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in))
 { }

      template<typename _Alloc, typename _U1, typename _U2,
        _ExplicitCtor<true, _U1, _U2> = false>
 explicit

 tuple(allocator_arg_t __tag, const _Alloc& __a, tuple<_U1, _U2>&& __in)
 : _Inherited(__tag, __a, static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in))
 { }

      template<typename _Alloc, typename _U1, typename _U2,
        _ImplicitCtor<true, const _U1&, const _U2&> = true>

 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const pair<_U1, _U2>& __in)
 : _Inherited(__tag, __a, __in.first, __in.second) { }

      template<typename _Alloc, typename _U1, typename _U2,
        _ExplicitCtor<true, const _U1&, const _U2&> = false>
 explicit

 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const pair<_U1, _U2>& __in)
 : _Inherited(__tag, __a, __in.first, __in.second) { }

      template<typename _Alloc, typename _U1, typename _U2,
        _ImplicitCtor<true, _U1, _U2> = true>

 tuple(allocator_arg_t __tag, const _Alloc& __a, pair<_U1, _U2>&& __in)
 : _Inherited(__tag, __a, std::forward<_U1>(__in.first),
       std::forward<_U2>(__in.second)) { }

      template<typename _Alloc, typename _U1, typename _U2,
        _ExplicitCtor<true, _U1, _U2> = false>
 explicit

 tuple(allocator_arg_t __tag, const _Alloc& __a, pair<_U1, _U2>&& __in)
 : _Inherited(__tag, __a, std::forward<_U1>(__in.first),
       std::forward<_U2>(__in.second)) { }



     
      tuple&
      operator=(typename conditional<__assignable<const _T1&, const _T2&>(),
         const tuple&,
         const __nonesuch&>::type __in)
      noexcept(__nothrow_assignable<const _T1&, const _T2&>())
      {
 this->_M_assign(__in);
 return *this;
      }

     
      tuple&
      operator=(typename conditional<__assignable<_T1, _T2>(),
         tuple&&,
         __nonesuch&&>::type __in)
      noexcept(__nothrow_assignable<_T1, _T2>())
      {
 this->_M_assign(std::move(__in));
 return *this;
      }

      template<typename _U1, typename _U2>

 __enable_if_t<__assignable<const _U1&, const _U2&>(), tuple&>
 operator=(const tuple<_U1, _U2>& __in)
 noexcept(__nothrow_assignable<const _U1&, const _U2&>())
 {
   this->_M_assign(__in);
   return *this;
 }

      template<typename _U1, typename _U2>

 __enable_if_t<__assignable<_U1, _U2>(), tuple&>
 operator=(tuple<_U1, _U2>&& __in)
 noexcept(__nothrow_assignable<_U1, _U2>())
 {
   this->_M_assign(std::move(__in));
   return *this;
 }

      template<typename _U1, typename _U2>

 __enable_if_t<__assignable<const _U1&, const _U2&>(), tuple&>
 operator=(const pair<_U1, _U2>& __in)
 noexcept(__nothrow_assignable<const _U1&, const _U2&>())
 {
   this->_M_head(*this) = __in.first;
   this->_M_tail(*this)._M_head(*this) = __in.second;
   return *this;
 }

      template<typename _U1, typename _U2>

 __enable_if_t<__assignable<_U1, _U2>(), tuple&>
 operator=(pair<_U1, _U2>&& __in)
 noexcept(__nothrow_assignable<_U1, _U2>())
 {
   this->_M_head(*this) = std::forward<_U1>(__in.first);
   this->_M_tail(*this)._M_head(*this) = std::forward<_U2>(__in.second);
   return *this;
 }

     
      void
      swap(tuple& __in)
      noexcept(__and_<__is_nothrow_swappable<_T1>,
        __is_nothrow_swappable<_T2>>::value)
      { _Inherited::_M_swap(__in); }
    };



  template<typename... _Elements>
    struct tuple_size<tuple<_Elements...>>
    : public integral_constant<std::size_t, sizeof...(_Elements)> { };
# 1258 "/usr/include/c++/10/tuple" 3
  template<std::size_t __i, typename _Head, typename... _Tail>
    struct tuple_element<__i, tuple<_Head, _Tail...> >
    : tuple_element<__i - 1, tuple<_Tail...> > { };




  template<typename _Head, typename... _Tail>
    struct tuple_element<0, tuple<_Head, _Tail...> >
    {
      typedef _Head type;
    };




  template<size_t __i>
    struct tuple_element<__i, tuple<>>
    {
      static_assert(__i < tuple_size<tuple<>>::value,
   "tuple index is in range");
    };

  template<std::size_t __i, typename _Head, typename... _Tail>
    constexpr _Head&
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  template<std::size_t __i, typename _Head, typename... _Tail>
    constexpr const _Head&
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }


  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
    { return std::__get_helper<__i>(__t); }


  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
    { return std::__get_helper<__i>(__t); }


  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&&
    get(tuple<_Elements...>&& __t) noexcept
    {
      typedef __tuple_element_t<__i, tuple<_Elements...>> __element_type;
      return std::forward<__element_type&&>(std::get<__i>(__t));
    }


  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&&
    get(const tuple<_Elements...>&& __t) noexcept
    {
      typedef __tuple_element_t<__i, tuple<_Elements...>> __element_type;
      return std::forward<const __element_type&&>(std::get<__i>(__t));
    }





  template<typename _Head, size_t __i, typename... _Tail>
    constexpr _Head&
    __get_helper2(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  template<typename _Head, size_t __i, typename... _Tail>
    constexpr const _Head&
    __get_helper2(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }


  template <typename _Tp, typename... _Types>
    constexpr _Tp&
    get(tuple<_Types...>& __t) noexcept
    { return std::__get_helper2<_Tp>(__t); }


  template <typename _Tp, typename... _Types>
    constexpr _Tp&&
    get(tuple<_Types...>&& __t) noexcept
    { return std::forward<_Tp&&>(std::__get_helper2<_Tp>(__t)); }


  template <typename _Tp, typename... _Types>
    constexpr const _Tp&
    get(const tuple<_Types...>& __t) noexcept
    { return std::__get_helper2<_Tp>(__t); }



  template <typename _Tp, typename... _Types>
    constexpr const _Tp&&
    get(const tuple<_Types...>&& __t) noexcept
    { return std::forward<const _Tp&&>(std::__get_helper2<_Tp>(__t)); }



  template<typename _Tp, typename _Up, size_t __i, size_t __size>
    struct __tuple_compare
    {
      static constexpr bool
      __eq(const _Tp& __t, const _Up& __u)
      {
 return bool(std::get<__i>(__t) == std::get<__i>(__u))
   && __tuple_compare<_Tp, _Up, __i + 1, __size>::__eq(__t, __u);
      }

      static constexpr bool
      __less(const _Tp& __t, const _Up& __u)
      {
 return bool(std::get<__i>(__t) < std::get<__i>(__u))
   || (!bool(std::get<__i>(__u) < std::get<__i>(__t))
       && __tuple_compare<_Tp, _Up, __i + 1, __size>::__less(__t, __u));
      }
    };

  template<typename _Tp, typename _Up, size_t __size>
    struct __tuple_compare<_Tp, _Up, __size, __size>
    {
      static constexpr bool
      __eq(const _Tp&, const _Up&) { return true; }

      static constexpr bool
      __less(const _Tp&, const _Up&) { return false; }
    };

  template<typename... _TElements, typename... _UElements>
    constexpr bool
    operator==(const tuple<_TElements...>& __t,
        const tuple<_UElements...>& __u)
    {
      static_assert(sizeof...(_TElements) == sizeof...(_UElements),
   "tuple objects can only be compared if they have equal sizes.");
      using __compare = __tuple_compare<tuple<_TElements...>,
     tuple<_UElements...>,
     0, sizeof...(_TElements)>;
      return __compare::__eq(__t, __u);
    }
# 1433 "/usr/include/c++/10/tuple" 3
  template<typename... _TElements, typename... _UElements>
    constexpr bool
    operator<(const tuple<_TElements...>& __t,
       const tuple<_UElements...>& __u)
    {
      static_assert(sizeof...(_TElements) == sizeof...(_UElements),
   "tuple objects can only be compared if they have equal sizes.");
      using __compare = __tuple_compare<tuple<_TElements...>,
     tuple<_UElements...>,
     0, sizeof...(_TElements)>;
      return __compare::__less(__t, __u);
    }

  template<typename... _TElements, typename... _UElements>
    constexpr bool
    operator!=(const tuple<_TElements...>& __t,
        const tuple<_UElements...>& __u)
    { return !(__t == __u); }

  template<typename... _TElements, typename... _UElements>
    constexpr bool
    operator>(const tuple<_TElements...>& __t,
       const tuple<_UElements...>& __u)
    { return __u < __t; }

  template<typename... _TElements, typename... _UElements>
    constexpr bool
    operator<=(const tuple<_TElements...>& __t,
        const tuple<_UElements...>& __u)
    { return !(__u < __t); }

  template<typename... _TElements, typename... _UElements>
    constexpr bool
    operator>=(const tuple<_TElements...>& __t,
        const tuple<_UElements...>& __u)
    { return !(__t < __u); }



  template<typename... _Elements>
    constexpr tuple<typename __decay_and_strip<_Elements>::__type...>
    make_tuple(_Elements&&... __args)
    {
      typedef tuple<typename __decay_and_strip<_Elements>::__type...>
 __result_type;
      return __result_type(std::forward<_Elements>(__args)...);
    }




  template<typename... _Elements>
    constexpr tuple<_Elements&&...>
    forward_as_tuple(_Elements&&... __args) noexcept
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }

  template<size_t, typename, typename, size_t>
    struct __make_tuple_impl;

  template<size_t _Idx, typename _Tuple, typename... _Tp, size_t _Nm>
    struct __make_tuple_impl<_Idx, tuple<_Tp...>, _Tuple, _Nm>
    : __make_tuple_impl<_Idx + 1,
   tuple<_Tp..., __tuple_element_t<_Idx, _Tuple>>,
   _Tuple, _Nm>
    { };

  template<std::size_t _Nm, typename _Tuple, typename... _Tp>
    struct __make_tuple_impl<_Nm, tuple<_Tp...>, _Tuple, _Nm>
    {
      typedef tuple<_Tp...> __type;
    };

  template<typename _Tuple>
    struct __do_make_tuple
    : __make_tuple_impl<0, tuple<>, _Tuple, std::tuple_size<_Tuple>::value>
    { };


  template<typename _Tuple>
    struct __make_tuple
    : public __do_make_tuple<__remove_cvref_t<_Tuple>>
    { };


  template<typename...>
    struct __combine_tuples;

  template<>
    struct __combine_tuples<>
    {
      typedef tuple<> __type;
    };

  template<typename... _Ts>
    struct __combine_tuples<tuple<_Ts...>>
    {
      typedef tuple<_Ts...> __type;
    };

  template<typename... _T1s, typename... _T2s, typename... _Rem>
    struct __combine_tuples<tuple<_T1s...>, tuple<_T2s...>, _Rem...>
    {
      typedef typename __combine_tuples<tuple<_T1s..., _T2s...>,
     _Rem...>::__type __type;
    };


  template<typename... _Tpls>
    struct __tuple_cat_result
    {
      typedef typename __combine_tuples
        <typename __make_tuple<_Tpls>::__type...>::__type __type;
    };



  template<typename...>
    struct __make_1st_indices;

  template<>
    struct __make_1st_indices<>
    {
      typedef std::_Index_tuple<> __type;
    };

  template<typename _Tp, typename... _Tpls>
    struct __make_1st_indices<_Tp, _Tpls...>
    {
      typedef typename std::_Build_index_tuple<std::tuple_size<
 typename std::remove_reference<_Tp>::type>::value>::__type __type;
    };




  template<typename _Ret, typename _Indices, typename... _Tpls>
    struct __tuple_concater;

  template<typename _Ret, std::size_t... _Is, typename _Tp, typename... _Tpls>
    struct __tuple_concater<_Ret, std::_Index_tuple<_Is...>, _Tp, _Tpls...>
    {
      template<typename... _Us>
        static constexpr _Ret
        _S_do(_Tp&& __tp, _Tpls&&... __tps, _Us&&... __us)
        {
   typedef typename __make_1st_indices<_Tpls...>::__type __idx;
   typedef __tuple_concater<_Ret, __idx, _Tpls...> __next;
   return __next::_S_do(std::forward<_Tpls>(__tps)...,
          std::forward<_Us>(__us)...,
          std::get<_Is>(std::forward<_Tp>(__tp))...);
 }
    };

  template<typename _Ret>
    struct __tuple_concater<_Ret, std::_Index_tuple<>>
    {
      template<typename... _Us>
 static constexpr _Ret
 _S_do(_Us&&... __us)
        {
   return _Ret(std::forward<_Us>(__us)...);
 }
    };


  template<typename... _Tpls, typename = typename
           enable_if<__and_<__is_tuple_like<_Tpls>...>::value>::type>
    constexpr auto
    tuple_cat(_Tpls&&... __tpls)
    -> typename __tuple_cat_result<_Tpls...>::__type
    {
      typedef typename __tuple_cat_result<_Tpls...>::__type __ret;
      typedef typename __make_1st_indices<_Tpls...>::__type __idx;
      typedef __tuple_concater<__ret, __idx, _Tpls...> __concater;
      return __concater::_S_do(std::forward<_Tpls>(__tpls)...);
    }




  template<typename... _Elements>
    constexpr tuple<_Elements&...>
    tie(_Elements&... __args) noexcept
    { return tuple<_Elements&...>(__args...); }


  template<typename... _Elements>
   
    inline


    typename enable_if<__and_<__is_swappable<_Elements>...>::value
      >::type



    swap(tuple<_Elements...>& __x, tuple<_Elements...>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }


  template<typename... _Elements>
   
    typename enable_if<!__and_<__is_swappable<_Elements>...>::value>::type
    swap(tuple<_Elements...>&, tuple<_Elements...>&) = delete;






  struct _Swallow_assign
  {
    template<class _Tp>
      constexpr const _Swallow_assign&
      operator=(const _Tp&) const
      { return *this; }
  };



  constexpr _Swallow_assign ignore{};


  template<typename... _Types, typename _Alloc>
    struct uses_allocator<tuple<_Types...>, _Alloc> : true_type { };
# 1669 "/usr/include/c++/10/tuple" 3
  template<class _T1, class _T2>
    template<typename... _Args1, typename... _Args2>
     
      inline
      pair<_T1, _T2>::
      pair(piecewise_construct_t,
    tuple<_Args1...> __first, tuple<_Args2...> __second)
      : pair(__first, __second,
      typename _Build_index_tuple<sizeof...(_Args1)>::__type(),
      typename _Build_index_tuple<sizeof...(_Args2)>::__type())
      { }

  template<class _T1, class _T2>
    template<typename... _Args1, std::size_t... _Indexes1,
             typename... _Args2, std::size_t... _Indexes2>
      inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
    _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
      { }
# 1759 "/usr/include/c++/10/tuple" 3

}
# 55 "/usr/include/c++/10/functional" 2 3



# 1 "/usr/include/c++/10/bits/refwrap.h" 1 3
# 33 "/usr/include/c++/10/bits/refwrap.h" 3
       
# 34 "/usr/include/c++/10/bits/refwrap.h" 3
# 43 "/usr/include/c++/10/bits/refwrap.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 54 "/usr/include/c++/10/bits/refwrap.h" 3
  template<typename _Res, typename... _ArgTypes>
    struct _Maybe_unary_or_binary_function { };


  template<typename _Res, typename _T1>
    struct _Maybe_unary_or_binary_function<_Res, _T1>
    : std::unary_function<_T1, _Res> { };


  template<typename _Res, typename _T1, typename _T2>
    struct _Maybe_unary_or_binary_function<_Res, _T1, _T2>
    : std::binary_function<_T1, _T2, _Res> { };

  template<typename _Signature>
    struct _Mem_fn_traits;

  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Mem_fn_traits_base
    {
      using __result_type = _Res;
      using __maybe_type
 = _Maybe_unary_or_binary_function<_Res, _Class*, _ArgTypes...>;
      using __arity = integral_constant<size_t, sizeof...(_ArgTypes)>;
    };
# 99 "/usr/include/c++/10/bits/refwrap.h" 3
template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) > : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) > : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const > : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) const > : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) volatile > : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) volatile > : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const volatile > : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) const volatile > : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...> { using __vararg = true_type; };
template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) &> : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) &> : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const &> : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) const &> : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) volatile &> : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) volatile &> : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const volatile &> : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) const volatile &> : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...> { using __vararg = true_type; };
template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) &&> : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) &&> : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const &&> : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) const &&> : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) volatile &&> : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) volatile &&> : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const volatile &&> : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) const volatile &&> : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...> { using __vararg = true_type; };
# 113 "/usr/include/c++/10/bits/refwrap.h" 3
  template<typename _Functor, typename = __void_t<>>
    struct _Maybe_get_result_type
    { };

  template<typename _Functor>
    struct _Maybe_get_result_type<_Functor,
      __void_t<typename _Functor::result_type>>
    { typedef typename _Functor::result_type result_type; };





  template<typename _Functor>
    struct _Weak_result_type_impl
    : _Maybe_get_result_type<_Functor>
    { };


  template<typename _Res, typename... _ArgTypes >
    struct _Weak_result_type_impl<_Res(_ArgTypes...) >
    { typedef _Res result_type; };


  template<typename _Res, typename... _ArgTypes >
    struct _Weak_result_type_impl<_Res(_ArgTypes......) >
    { typedef _Res result_type; };


  template<typename _Res, typename... _ArgTypes >
    struct _Weak_result_type_impl<_Res(*)(_ArgTypes...) >
    { typedef _Res result_type; };


  template<typename _Res, typename... _ArgTypes >
    struct
    _Weak_result_type_impl<_Res(*)(_ArgTypes......) >
    { typedef _Res result_type; };


  template<typename _Functor,
    bool = is_member_function_pointer<_Functor>::value>
    struct _Weak_result_type_memfun
    : _Weak_result_type_impl<_Functor>
    { };


  template<typename _MemFunPtr>
    struct _Weak_result_type_memfun<_MemFunPtr, true>
    {
      using result_type = typename _Mem_fn_traits<_MemFunPtr>::__result_type;
    };


  template<typename _Func, typename _Class>
    struct _Weak_result_type_memfun<_Func _Class::*, false>
    { };





  template<typename _Functor>
    struct _Weak_result_type
    : _Weak_result_type_memfun<typename remove_cv<_Functor>::type>
    { };



  template<typename _Tp, typename = __void_t<>>
    struct _Refwrap_base_arg1
    { };


  template<typename _Tp>
    struct _Refwrap_base_arg1<_Tp,
         __void_t<typename _Tp::argument_type>>
    {
      typedef typename _Tp::argument_type argument_type;
    };


  template<typename _Tp, typename = __void_t<>>
    struct _Refwrap_base_arg2
    { };


  template<typename _Tp>
    struct _Refwrap_base_arg2<_Tp,
         __void_t<typename _Tp::first_argument_type,
           typename _Tp::second_argument_type>>
    {
      typedef typename _Tp::first_argument_type first_argument_type;
      typedef typename _Tp::second_argument_type second_argument_type;
    };







  template<typename _Tp>
    struct _Reference_wrapper_base
    : _Weak_result_type<_Tp>, _Refwrap_base_arg1<_Tp>, _Refwrap_base_arg2<_Tp>
    { };


  template<typename _Res, typename _T1 >
    struct _Reference_wrapper_base<_Res(_T1) >
    : unary_function<_T1, _Res>
    { };

  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res(_T1) const>
    : unary_function<_T1, _Res>
    { };

  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res(_T1) volatile>
    : unary_function<_T1, _Res>
    { };

  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res(_T1) const volatile>
    : unary_function<_T1, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2 >
    struct _Reference_wrapper_base<_Res(_T1, _T2) >
    : binary_function<_T1, _T2, _Res>
    { };

  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res(_T1, _T2) const>
    : binary_function<_T1, _T2, _Res>
    { };

  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res(_T1, _T2) volatile>
    : binary_function<_T1, _T2, _Res>
    { };

  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res(_T1, _T2) const volatile>
    : binary_function<_T1, _T2, _Res>
    { };


  template<typename _Res, typename _T1 >
    struct _Reference_wrapper_base<_Res(*)(_T1) >
    : unary_function<_T1, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2 >
    struct _Reference_wrapper_base<_Res(*)(_T1, _T2) >
    : binary_function<_T1, _T2, _Res>
    { };

  template<typename _Tp, bool = is_member_function_pointer<_Tp>::value>
    struct _Reference_wrapper_base_memfun
    : _Reference_wrapper_base<_Tp>
    { };

  template<typename _MemFunPtr>
    struct _Reference_wrapper_base_memfun<_MemFunPtr, true>
    : _Mem_fn_traits<_MemFunPtr>::__maybe_type
    {
      using result_type = typename _Mem_fn_traits<_MemFunPtr>::__result_type;
    };
# 293 "/usr/include/c++/10/bits/refwrap.h" 3
  template<typename _Tp>
    class reference_wrapper



    : public _Reference_wrapper_base_memfun<typename remove_cv<_Tp>::type>

    {
      _Tp* _M_data;

     
      static _Tp* _S_fun(_Tp& __r) noexcept { return std::__addressof(__r); }

      static void _S_fun(_Tp&&) = delete;

      template<typename _Up, typename _Up2 = __remove_cvref_t<_Up>>
 using __not_same
   = typename enable_if<!is_same<reference_wrapper, _Up2>::value>::type;

    public:
      typedef _Tp type;




      template<typename _Up, typename = __not_same<_Up>, typename
  = decltype(reference_wrapper::_S_fun(std::declval<_Up>()))>

 reference_wrapper(_Up&& __uref)
 noexcept(noexcept(reference_wrapper::_S_fun(std::declval<_Up>())))
 : _M_data(reference_wrapper::_S_fun(std::forward<_Up>(__uref)))
 { }

      reference_wrapper(const reference_wrapper&) = default;

      reference_wrapper&
      operator=(const reference_wrapper&) = default;

     
      operator _Tp&() const noexcept
      { return this->get(); }

     
      _Tp&
      get() const noexcept
      { return *_M_data; }

      template<typename... _Args>

 typename result_of<_Tp&(_Args&&...)>::type
 operator()(_Args&&... __args) const
 {




   return std::__invoke(get(), std::forward<_Args>(__args)...);
 }
    };
# 361 "/usr/include/c++/10/bits/refwrap.h" 3
  template<typename _Tp>
   
    inline reference_wrapper<_Tp>
    ref(_Tp& __t) noexcept
    { return reference_wrapper<_Tp>(__t); }


  template<typename _Tp>
   
    inline reference_wrapper<const _Tp>
    cref(const _Tp& __t) noexcept
    { return reference_wrapper<const _Tp>(__t); }

  template<typename _Tp>
    void ref(const _Tp&&) = delete;

  template<typename _Tp>
    void cref(const _Tp&&) = delete;


  template<typename _Tp>
   
    inline reference_wrapper<_Tp>
    ref(reference_wrapper<_Tp> __t) noexcept
    { return __t; }


  template<typename _Tp>
   
    inline reference_wrapper<const _Tp>
    cref(reference_wrapper<_Tp> __t) noexcept
    { return { __t.get() }; }




}
# 59 "/usr/include/c++/10/functional" 2 3
# 1 "/usr/include/c++/10/bits/std_function.h" 1 3
# 33 "/usr/include/c++/10/bits/std_function.h" 3
       
# 34 "/usr/include/c++/10/bits/std_function.h" 3
# 47 "/usr/include/c++/10/bits/std_function.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{







  class bad_function_call : public std::exception
  {
  public:
    virtual ~bad_function_call() noexcept;

    const char* what() const noexcept;
  };







  template<typename _Tp>
    struct __is_location_invariant
    : is_trivially_copyable<_Tp>::type
    { };

  class _Undefined_class;

  union _Nocopy_types
  {
    void* _M_object;
    const void* _M_const_object;
    void (*_M_function_pointer)();
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void* _M_access() { return &_M_pod_data[0]; }
    const void* _M_access() const { return &_M_pod_data[0]; }

    template<typename _Tp>
      _Tp&
      _M_access()
      { return *static_cast<_Tp*>(_M_access()); }

    template<typename _Tp>
      const _Tp&
      _M_access() const
      { return *static_cast<const _Tp*>(_M_access()); }

    _Nocopy_types _M_unused;
    char _M_pod_data[sizeof(_Nocopy_types)];
  };

  enum _Manager_operation
  {
    __get_type_info,
    __get_functor_ptr,
    __clone_functor,
    __destroy_functor
  };

  template<typename _Signature>
    class function;


  class _Function_base
  {
  public:
    static const size_t _M_max_size = sizeof(_Nocopy_types);
    static const size_t _M_max_align = __alignof__(_Nocopy_types);

    template<typename _Functor>
      class _Base_manager
      {
      protected:
 static const bool __stored_locally =
 (__is_location_invariant<_Functor>::value
  && sizeof(_Functor) <= _M_max_size
  && __alignof__(_Functor) <= _M_max_align
  && (_M_max_align % __alignof__(_Functor) == 0));

 typedef integral_constant<bool, __stored_locally> _Local_storage;


 static _Functor*
 _M_get_pointer(const _Any_data& __source)
 {
   if (__stored_locally)
     {
       const _Functor& __f = __source._M_access<_Functor>();
       return const_cast<_Functor*>(std::__addressof(__f));
     }
   else
     return __source._M_access<_Functor*>();
 }



 static void
 _M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 {
   ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 }



 static void
 _M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
 {
   __dest._M_access<_Functor*>() =
     new _Functor(*__source._M_access<const _Functor*>());
 }



 static void
 _M_destroy(_Any_data& __victim, true_type)
 {
   __victim._M_access<_Functor>().~_Functor();
 }


 static void
 _M_destroy(_Any_data& __victim, false_type)
 {
   delete __victim._M_access<_Functor*>();
 }

      public:
 static bool
 _M_manager(_Any_data& __dest, const _Any_data& __source,
     _Manager_operation __op)
 {
   switch (__op)
     {

     case __get_type_info:
       __dest._M_access<const type_info*>() = &typeid(_Functor);
       break;

     case __get_functor_ptr:
       __dest._M_access<_Functor*>() = _M_get_pointer(__source);
       break;

     case __clone_functor:
       _M_clone(__dest, __source, _Local_storage());
       break;

     case __destroy_functor:
       _M_destroy(__dest, _Local_storage());
       break;
     }
   return false;
 }

 static void
 _M_init_functor(_Any_data& __functor, _Functor&& __f)
 { _M_init_functor(__functor, std::move(__f), _Local_storage()); }

 template<typename _Signature>
   static bool
   _M_not_empty_function(const function<_Signature>& __f)
   { return static_cast<bool>(__f); }

 template<typename _Tp>
   static bool
   _M_not_empty_function(_Tp* __fp)
   { return __fp != nullptr; }

 template<typename _Class, typename _Tp>
   static bool
   _M_not_empty_function(_Tp _Class::* __mp)
   { return __mp != nullptr; }

 template<typename _Tp>
   static bool
   _M_not_empty_function(const _Tp&)
   { return true; }

      private:
 static void
 _M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 { ::new (__functor._M_access()) _Functor(std::move(__f)); }

 static void
 _M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
 { __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 _M_manager(_M_functor, _M_functor, __destroy_functor);
    }

    bool _M_empty() const { return !_M_manager; }

    typedef bool (*_Manager_type)(_Any_data&, const _Any_data&,
      _Manager_operation);

    _Any_data _M_functor;
    _Manager_type _M_manager;
  };

  template<typename _Signature, typename _Functor>
    class _Function_handler;

  template<typename _Res, typename _Functor, typename... _ArgTypes>
    class _Function_handler<_Res(_ArgTypes...), _Functor>
    : public _Function_base::_Base_manager<_Functor>
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

    public:
      static bool
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   _Manager_operation __op)
      {
 switch (__op)
   {

   case __get_type_info:
     __dest._M_access<const type_info*>() = &typeid(_Functor);
     break;

   case __get_functor_ptr:
     __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
     break;

   default:
     _Base::_M_manager(__dest, __source, __op);
   }
 return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
 return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
         std::forward<_ArgTypes>(__args)...);
      }
    };







  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
    : public _Maybe_unary_or_binary_function<_Res, _ArgTypes...>,
      private _Function_base
    {
      template<typename _Func,
        typename _Res2 = __invoke_result<_Func&, _ArgTypes...>>
 struct _Callable
 : __is_invocable_impl<_Res2, _Res>::type
 { };



      template<typename _Tp>
 struct _Callable<function, _Tp> : false_type { };

      template<typename _Cond, typename _Tp>
 using _Requires = typename enable_if<_Cond::value, _Tp>::type;

    public:
      typedef _Res result_type;







      function() noexcept
      : _Function_base() { }





      function(nullptr_t) noexcept
      : _Function_base() { }
# 348 "/usr/include/c++/10/bits/std_function.h" 3
      function(const function& __x);
# 357 "/usr/include/c++/10/bits/std_function.h" 3
      function(function&& __x) noexcept : _Function_base()
      {
 __x.swap(*this);
      }
# 378 "/usr/include/c++/10/bits/std_function.h" 3
      template<typename _Functor,
        typename = _Requires<__not_<is_same<_Functor, function>>, void>,
        typename = _Requires<_Callable<_Functor>, void>>
 function(_Functor);
# 395 "/usr/include/c++/10/bits/std_function.h" 3
      function&
      operator=(const function& __x)
      {
 function(__x).swap(*this);
 return *this;
      }
# 413 "/usr/include/c++/10/bits/std_function.h" 3
      function&
      operator=(function&& __x) noexcept
      {
 function(std::move(__x)).swap(*this);
 return *this;
      }
# 427 "/usr/include/c++/10/bits/std_function.h" 3
      function&
      operator=(nullptr_t) noexcept
      {
 if (_M_manager)
   {
     _M_manager(_M_functor, _M_functor, __destroy_functor);
     _M_manager = nullptr;
     _M_invoker = nullptr;
   }
 return *this;
      }
# 455 "/usr/include/c++/10/bits/std_function.h" 3
      template<typename _Functor>
 _Requires<_Callable<typename decay<_Functor>::type>, function&>
 operator=(_Functor&& __f)
 {
   function(std::forward<_Functor>(__f)).swap(*this);
   return *this;
 }


      template<typename _Functor>
 function&
 operator=(reference_wrapper<_Functor> __f) noexcept
 {
   function(__f).swap(*this);
   return *this;
 }
# 481 "/usr/include/c++/10/bits/std_function.h" 3
      void swap(function& __x) noexcept
      {
 std::swap(_M_functor, __x._M_functor);
 std::swap(_M_manager, __x._M_manager);
 std::swap(_M_invoker, __x._M_invoker);
      }
# 498 "/usr/include/c++/10/bits/std_function.h" 3
      explicit operator bool() const noexcept
      { return !_M_empty(); }
# 511 "/usr/include/c++/10/bits/std_function.h" 3
      _Res operator()(_ArgTypes... __args) const;
# 524 "/usr/include/c++/10/bits/std_function.h" 3
      const type_info& target_type() const noexcept;
# 537 "/usr/include/c++/10/bits/std_function.h" 3
      template<typename _Functor> _Functor* target() noexcept;

      template<typename _Functor> const _Functor* target() const noexcept;



    private:
      using _Invoker_type = _Res (*)(const _Any_data&, _ArgTypes&&...);
      _Invoker_type _M_invoker;
  };
# 586 "/usr/include/c++/10/bits/std_function.h" 3
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 {
   __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   _M_invoker = __x._M_invoker;
   _M_manager = __x._M_manager;
 }
    }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor, typename, typename>
      function<_Res(_ArgTypes...)>::
      function(_Functor __f)
      : _Function_base()
      {
 typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

 if (_My_handler::_M_not_empty_function(__f))
   {
     _My_handler::_M_init_functor(_M_functor, std::move(__f));
     _M_invoker = &_My_handler::_M_invoke;
     _M_manager = &_My_handler::_M_manager;
   }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 __throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }


  template<typename _Res, typename... _ArgTypes>
    const type_info&
    function<_Res(_ArgTypes...)>::
    target_type() const noexcept
    {
      if (_M_manager)
 {
   _Any_data __typeinfo_result;
   _M_manager(__typeinfo_result, _M_functor, __get_type_info);
   return *__typeinfo_result._M_access<const type_info*>();
 }
      else
 return typeid(void);
    }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor>
      _Functor*
      function<_Res(_ArgTypes...)>::
      target() noexcept
      {
 const function* __const_this = this;
 const _Functor* __func = __const_this->template target<_Functor>();
 return const_cast<_Functor*>(__func);
      }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor>
      const _Functor*
      function<_Res(_ArgTypes...)>::
      target() const noexcept
      {
 if (typeid(_Functor) == target_type() && _M_manager)
   {
     _Any_data __ptr;
     _M_manager(__ptr, _M_functor, __get_functor_ptr);
     return __ptr._M_access<const _Functor*>();
   }
 else
   return nullptr;
      }
# 678 "/usr/include/c++/10/bits/std_function.h" 3
  template<typename _Res, typename... _Args>
    inline bool
    operator==(const function<_Res(_Args...)>& __f, nullptr_t) noexcept
    { return !static_cast<bool>(__f); }



  template<typename _Res, typename... _Args>
    inline bool
    operator==(nullptr_t, const function<_Res(_Args...)>& __f) noexcept
    { return !static_cast<bool>(__f); }
# 697 "/usr/include/c++/10/bits/std_function.h" 3
  template<typename _Res, typename... _Args>
    inline bool
    operator!=(const function<_Res(_Args...)>& __f, nullptr_t) noexcept
    { return static_cast<bool>(__f); }


  template<typename _Res, typename... _Args>
    inline bool
    operator!=(nullptr_t, const function<_Res(_Args...)>& __f) noexcept
    { return static_cast<bool>(__f); }
# 718 "/usr/include/c++/10/bits/std_function.h" 3
  template<typename _Res, typename... _Args>
    inline void
    swap(function<_Res(_Args...)>& __x, function<_Res(_Args...)>& __y) noexcept
    { __x.swap(__y); }
# 737 "/usr/include/c++/10/bits/std_function.h" 3

}
# 60 "/usr/include/c++/10/functional" 2 3
# 72 "/usr/include/c++/10/functional" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 93 "/usr/include/c++/10/functional" 3
  template<typename _MemFunPtr,
    bool __is_mem_fn = is_member_function_pointer<_MemFunPtr>::value>
    class _Mem_fn_base
    : public _Mem_fn_traits<_MemFunPtr>::__maybe_type
    {
      using _Traits = _Mem_fn_traits<_MemFunPtr>;

      using _Arity = typename _Traits::__arity;
      using _Varargs = typename _Traits::__vararg;

      template<typename _Func, typename... _BoundArgs>
 friend struct _Bind_check_arity;

      _MemFunPtr _M_pmf;

    public:

      using result_type = typename _Traits::__result_type;

      explicit constexpr
      _Mem_fn_base(_MemFunPtr __pmf) noexcept : _M_pmf(__pmf) { }

      template<typename... _Args>

 auto
 operator()(_Args&&... __args) const
 noexcept(noexcept(
       std::__invoke(_M_pmf, std::forward<_Args>(__args)...)))
 -> decltype(std::__invoke(_M_pmf, std::forward<_Args>(__args)...))
 { return std::__invoke(_M_pmf, std::forward<_Args>(__args)...); }
    };


  template<typename _MemObjPtr>
    class _Mem_fn_base<_MemObjPtr, false>
    {
      using _Arity = integral_constant<size_t, 0>;
      using _Varargs = false_type;

      template<typename _Func, typename... _BoundArgs>
 friend struct _Bind_check_arity;

      _MemObjPtr _M_pm;

    public:
      explicit constexpr
      _Mem_fn_base(_MemObjPtr __pm) noexcept : _M_pm(__pm) { }

      template<typename _Tp>

 auto
 operator()(_Tp&& __obj) const
 noexcept(noexcept(std::__invoke(_M_pm, std::forward<_Tp>(__obj))))
 -> decltype(std::__invoke(_M_pm, std::forward<_Tp>(__obj)))
 { return std::__invoke(_M_pm, std::forward<_Tp>(__obj)); }
    };

  template<typename _MemberPointer>
    struct _Mem_fn;

  template<typename _Res, typename _Class>
    struct _Mem_fn<_Res _Class::*>
    : _Mem_fn_base<_Res _Class::*>
    {
      using _Mem_fn_base<_Res _Class::*>::_Mem_fn_base;
    };
# 167 "/usr/include/c++/10/functional" 3
  template<typename _Tp, typename _Class>
   
    inline _Mem_fn<_Tp _Class::*>
    mem_fn(_Tp _Class::* __pm) noexcept
    {
      return _Mem_fn<_Tp _Class::*>(__pm);
    }
# 183 "/usr/include/c++/10/functional" 3
  template<typename _Tp>
    struct is_bind_expression
    : public false_type { };
# 194 "/usr/include/c++/10/functional" 3
  template<typename _Tp>
    struct is_placeholder
    : public integral_constant<int, 0>
    { };
# 209 "/usr/include/c++/10/functional" 3
  template<int _Num> struct _Placeholder { };





  namespace placeholders
  {




    extern const _Placeholder<1> _1;
    extern const _Placeholder<2> _2;
    extern const _Placeholder<3> _3;
    extern const _Placeholder<4> _4;
    extern const _Placeholder<5> _5;
    extern const _Placeholder<6> _6;
    extern const _Placeholder<7> _7;
    extern const _Placeholder<8> _8;
    extern const _Placeholder<9> _9;
    extern const _Placeholder<10> _10;
    extern const _Placeholder<11> _11;
    extern const _Placeholder<12> _12;
    extern const _Placeholder<13> _13;
    extern const _Placeholder<14> _14;
    extern const _Placeholder<15> _15;
    extern const _Placeholder<16> _16;
    extern const _Placeholder<17> _17;
    extern const _Placeholder<18> _18;
    extern const _Placeholder<19> _19;
    extern const _Placeholder<20> _20;
    extern const _Placeholder<21> _21;
    extern const _Placeholder<22> _22;
    extern const _Placeholder<23> _23;
    extern const _Placeholder<24> _24;
    extern const _Placeholder<25> _25;
    extern const _Placeholder<26> _26;
    extern const _Placeholder<27> _27;
    extern const _Placeholder<28> _28;
    extern const _Placeholder<29> _29;
  }






  template<int _Num>
    struct is_placeholder<_Placeholder<_Num> >
    : public integral_constant<int, _Num>
    { };

  template<int _Num>
    struct is_placeholder<const _Placeholder<_Num> >
    : public integral_constant<int, _Num>
    { };



  template<std::size_t __i, typename _Tuple>
    using _Safe_tuple_element_t
      = typename enable_if<(__i < tuple_size<_Tuple>::value),
      tuple_element<__i, _Tuple>>::type::type;
# 285 "/usr/include/c++/10/functional" 3
  template<typename _Arg,
    bool _IsBindExp = is_bind_expression<_Arg>::value,
    bool _IsPlaceholder = (is_placeholder<_Arg>::value > 0)>
    class _Mu;






  template<typename _Tp>
    class _Mu<reference_wrapper<_Tp>, false, false>
    {
    public:




      template<typename _CVRef, typename _Tuple>

 _Tp&
 operator()(_CVRef& __arg, _Tuple&) const volatile
 { return __arg.get(); }
    };







  template<typename _Arg>
    class _Mu<_Arg, true, false>
    {
    public:
      template<typename _CVArg, typename... _Args>

 auto
 operator()(_CVArg& __arg,
     tuple<_Args...>& __tuple) const volatile
 -> decltype(__arg(declval<_Args>()...))
 {

   typedef typename _Build_index_tuple<sizeof...(_Args)>::__type
     _Indexes;
   return this->__call(__arg, __tuple, _Indexes());
 }

    private:


      template<typename _CVArg, typename... _Args, std::size_t... _Indexes>

 auto
 __call(_CVArg& __arg, tuple<_Args...>& __tuple,
        const _Index_tuple<_Indexes...>&) const volatile
 -> decltype(__arg(declval<_Args>()...))
 {
   return __arg(std::get<_Indexes>(std::move(__tuple))...);
 }
    };






  template<typename _Arg>
    class _Mu<_Arg, false, true>
    {
    public:
      template<typename _Tuple>

 _Safe_tuple_element_t<(is_placeholder<_Arg>::value - 1), _Tuple>&&
 operator()(const volatile _Arg&, _Tuple& __tuple) const volatile
 {
   return
     ::std::get<(is_placeholder<_Arg>::value - 1)>(std::move(__tuple));
 }
    };






  template<typename _Arg>
    class _Mu<_Arg, false, false>
    {
    public:
      template<typename _CVArg, typename _Tuple>

 _CVArg&&
 operator()(_CVArg&& __arg, _Tuple&) const volatile
 { return std::forward<_CVArg>(__arg); }
    };


  template<std::size_t _Ind, typename... _Tp>
    inline auto
    __volget(volatile tuple<_Tp...>& __tuple)
    -> __tuple_element_t<_Ind, tuple<_Tp...>> volatile&
    { return std::get<_Ind>(const_cast<tuple<_Tp...>&>(__tuple)); }


  template<std::size_t _Ind, typename... _Tp>
    inline auto
    __volget(const volatile tuple<_Tp...>& __tuple)
    -> __tuple_element_t<_Ind, tuple<_Tp...>> const volatile&
    { return std::get<_Ind>(const_cast<const tuple<_Tp...>&>(__tuple)); }


  template<typename _Signature>
    struct _Bind;

   template<typename _Functor, typename... _Bound_args>
    class _Bind<_Functor(_Bound_args...)>
    : public _Weak_result_type<_Functor>
    {
      typedef typename _Build_index_tuple<sizeof...(_Bound_args)>::__type
 _Bound_indexes;

      _Functor _M_f;
      tuple<_Bound_args...> _M_bound_args;


      template<typename _Result, typename... _Args, std::size_t... _Indexes>

 _Result
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
 {
   return std::__invoke(_M_f,
       _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
       );
 }


      template<typename _Result, typename... _Args, std::size_t... _Indexes>

 _Result
 __call_c(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>) const
 {
   return std::__invoke(_M_f,
       _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
       );
 }


      template<typename _Result, typename... _Args, std::size_t... _Indexes>
 _Result
 __call_v(tuple<_Args...>&& __args,
   _Index_tuple<_Indexes...>) volatile
 {
   return std::__invoke(_M_f,
       _Mu<_Bound_args>()(__volget<_Indexes>(_M_bound_args), __args)...
       );
 }


      template<typename _Result, typename... _Args, std::size_t... _Indexes>
 _Result
 __call_c_v(tuple<_Args...>&& __args,
     _Index_tuple<_Indexes...>) const volatile
 {
   return std::__invoke(_M_f,
       _Mu<_Bound_args>()(__volget<_Indexes>(_M_bound_args), __args)...
       );
 }

      template<typename _BoundArg, typename _CallArgs>
 using _Mu_type = decltype(
     _Mu<typename remove_cv<_BoundArg>::type>()(
       std::declval<_BoundArg&>(), std::declval<_CallArgs&>()) );

      template<typename _Fn, typename _CallArgs, typename... _BArgs>
 using _Res_type_impl
   = typename result_of< _Fn&(_Mu_type<_BArgs, _CallArgs>&&...) >::type;

      template<typename _CallArgs>
 using _Res_type = _Res_type_impl<_Functor, _CallArgs, _Bound_args...>;

      template<typename _CallArgs>
 using __dependent = typename
   enable_if<bool(tuple_size<_CallArgs>::value+1), _Functor>::type;

      template<typename _CallArgs, template<class> class __cv_quals>
 using _Res_type_cv = _Res_type_impl<
   typename __cv_quals<__dependent<_CallArgs>>::type,
   _CallArgs,
   typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
 explicit
 _Bind(const _Functor& __f, _Args&&... __args)
 : _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 { }

      template<typename... _Args>
 explicit
 _Bind(_Functor&& __f, _Args&&... __args)
 : _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
 { }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;


      template<typename... _Args,
        typename _Result = _Res_type<tuple<_Args...>>>

 _Result
 operator()(_Args&&... __args)
 {
   return this->__call<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }


      template<typename... _Args,
        typename _Result = _Res_type_cv<tuple<_Args...>, add_const>>

 _Result
 operator()(_Args&&... __args) const
 {
   return this->__call_c<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }
# 523 "/usr/include/c++/10/functional" 3
      template<typename... _Args,
        typename _Result = _Res_type_cv<tuple<_Args...>, add_volatile>>

 _Result
 operator()(_Args&&... __args) volatile
 {
   return this->__call_v<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }


      template<typename... _Args,
        typename _Result = _Res_type_cv<tuple<_Args...>, add_cv>>

 _Result
 operator()(_Args&&... __args) const volatile
 {
   return this->__call_c_v<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }
    };


  template<typename _Result, typename _Signature>
    struct _Bind_result;

  template<typename _Result, typename _Functor, typename... _Bound_args>
    class _Bind_result<_Result, _Functor(_Bound_args...)>
    {
      typedef typename _Build_index_tuple<sizeof...(_Bound_args)>::__type
 _Bound_indexes;

      _Functor _M_f;
      tuple<_Bound_args...> _M_bound_args;


      template<typename _Res, typename... _Args, std::size_t... _Indexes>

 _Res
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
 {
   return std::__invoke_r<_Res>(_M_f, _Mu<_Bound_args>()
        (std::get<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, std::size_t... _Indexes>

 _Res
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>) const
 {
   return std::__invoke_r<_Res>(_M_f, _Mu<_Bound_args>()
        (std::get<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, std::size_t... _Indexes>

 _Res
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>) volatile
 {
   return std::__invoke_r<_Res>(_M_f, _Mu<_Bound_args>()
        (__volget<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, std::size_t... _Indexes>

 _Res
 __call(tuple<_Args...>&& __args,
        _Index_tuple<_Indexes...>) const volatile
 {
   return std::__invoke_r<_Res>(_M_f, _Mu<_Bound_args>()
        (__volget<_Indexes>(_M_bound_args), __args)...);
 }

    public:
      typedef _Result result_type;

      template<typename... _Args>
 explicit
 _Bind_result(const _Functor& __f, _Args&&... __args)
 : _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 { }

      template<typename... _Args>
 explicit
 _Bind_result(_Functor&& __f, _Args&&... __args)
 : _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
 { }

      _Bind_result(const _Bind_result&) = default;
      _Bind_result(_Bind_result&&) = default;


      template<typename... _Args>

 result_type
 operator()(_Args&&... __args)
 {
   return this->__call<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }


      template<typename... _Args>

 result_type
 operator()(_Args&&... __args) const
 {
   return this->__call<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }


      template<typename... _Args>

 result_type
 operator()(_Args&&... __args) volatile
 {
   return this->__call<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }


      template<typename... _Args>

 result_type
 operator()(_Args&&... __args) const volatile
 {
   return this->__call<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }
    };






  template<typename _Signature>
    struct is_bind_expression<_Bind<_Signature> >
    : public true_type { };





  template<typename _Signature>
    struct is_bind_expression<const _Bind<_Signature> >
    : public true_type { };





  template<typename _Signature>
    struct is_bind_expression<volatile _Bind<_Signature> >
    : public true_type { };





  template<typename _Signature>
    struct is_bind_expression<const volatile _Bind<_Signature>>
    : public true_type { };





  template<typename _Result, typename _Signature>
    struct is_bind_expression<_Bind_result<_Result, _Signature>>
    : public true_type { };





  template<typename _Result, typename _Signature>
    struct is_bind_expression<const _Bind_result<_Result, _Signature>>
    : public true_type { };





  template<typename _Result, typename _Signature>
    struct is_bind_expression<volatile _Bind_result<_Result, _Signature>>
    : public true_type { };





  template<typename _Result, typename _Signature>
    struct is_bind_expression<const volatile _Bind_result<_Result, _Signature>>
    : public true_type { };

  template<typename _Func, typename... _BoundArgs>
    struct _Bind_check_arity { };

  template<typename _Ret, typename... _Args, typename... _BoundArgs>
    struct _Bind_check_arity<_Ret (*)(_Args...), _BoundArgs...>
    {
      static_assert(sizeof...(_BoundArgs) == sizeof...(_Args),
                   "Wrong number of arguments for function");
    };

  template<typename _Ret, typename... _Args, typename... _BoundArgs>
    struct _Bind_check_arity<_Ret (*)(_Args......), _BoundArgs...>
    {
      static_assert(sizeof...(_BoundArgs) >= sizeof...(_Args),
                   "Wrong number of arguments for function");
    };

  template<typename _Tp, typename _Class, typename... _BoundArgs>
    struct _Bind_check_arity<_Tp _Class::*, _BoundArgs...>
    {
      using _Arity = typename _Mem_fn<_Tp _Class::*>::_Arity;
      using _Varargs = typename _Mem_fn<_Tp _Class::*>::_Varargs;
      static_assert(_Varargs::value
      ? sizeof...(_BoundArgs) >= _Arity::value + 1
      : sizeof...(_BoundArgs) == _Arity::value + 1,
      "Wrong number of arguments for pointer-to-member");
    };




  template<typename _Tp, typename _Tp2 = typename decay<_Tp>::type>
    using __is_socketlike = __or_<is_integral<_Tp2>, is_enum<_Tp2>>;

  template<bool _SocketLike, typename _Func, typename... _BoundArgs>
    struct _Bind_helper
    : _Bind_check_arity<typename decay<_Func>::type, _BoundArgs...>
    {
      typedef typename decay<_Func>::type __func_type;
      typedef _Bind<__func_type(typename decay<_BoundArgs>::type...)> type;
    };




  template<typename _Func, typename... _BoundArgs>
    struct _Bind_helper<true, _Func, _BoundArgs...>
    { };





  template<typename _Func, typename... _BoundArgs>
    inline typename
    _Bind_helper<__is_socketlike<_Func>::value, _Func, _BoundArgs...>::type
    bind(_Func&& __f, _BoundArgs&&... __args)
    {
      typedef _Bind_helper<false, _Func, _BoundArgs...> __helper_type;
      return typename __helper_type::type(std::forward<_Func>(__f),
       std::forward<_BoundArgs>(__args)...);
    }

  template<typename _Result, typename _Func, typename... _BoundArgs>
    struct _Bindres_helper
    : _Bind_check_arity<typename decay<_Func>::type, _BoundArgs...>
    {
      typedef typename decay<_Func>::type __functor_type;
      typedef _Bind_result<_Result,
      __functor_type(typename decay<_BoundArgs>::type...)>
 type;
    };





  template<typename _Result, typename _Func, typename... _BoundArgs>
    inline
    typename _Bindres_helper<_Result, _Func, _BoundArgs...>::type
    bind(_Func&& __f, _BoundArgs&&... __args)
    {
      typedef _Bindres_helper<_Result, _Func, _BoundArgs...> __helper_type;
      return typename __helper_type::type(std::forward<_Func>(__f),
       std::forward<_BoundArgs>(__args)...);
    }
# 918 "/usr/include/c++/10/functional" 3
  template<typename _Fn>
    class _Not_fn
    {
      template<typename _Fn2, typename... _Args>
 using __inv_res_t = typename __invoke_result<_Fn2, _Args...>::type;

      template<typename _Tp>
 static decltype(!std::declval<_Tp>())
 _S_not() noexcept(noexcept(!std::declval<_Tp>()));

    public:
      template<typename _Fn2>
 constexpr
 _Not_fn(_Fn2&& __fn, int)
 : _M_fn(std::forward<_Fn2>(__fn)) { }

      _Not_fn(const _Not_fn& __fn) = default;
      _Not_fn(_Not_fn&& __fn) = default;
      ~_Not_fn() = default;
# 952 "/usr/include/c++/10/functional" 3
      template<typename... _Args> decltype(_S_not<__inv_res_t<_Fn &, _Args...>>()) operator()(_Args&&... __args) & noexcept(__is_nothrow_invocable<_Fn &, _Args...>::value && noexcept(_S_not<__inv_res_t<_Fn &, _Args...>>())) { return !std::__invoke(std::forward< _Fn & >(_M_fn), std::forward<_Args>(__args)...); }
      template<typename... _Args> decltype(_S_not<__inv_res_t<_Fn const &, _Args...>>()) operator()(_Args&&... __args) const & noexcept(__is_nothrow_invocable<_Fn const &, _Args...>::value && noexcept(_S_not<__inv_res_t<_Fn const &, _Args...>>())) { return !std::__invoke(std::forward< _Fn const & >(_M_fn), std::forward<_Args>(__args)...); }
      template<typename... _Args> decltype(_S_not<__inv_res_t<_Fn &&, _Args...>>()) operator()(_Args&&... __args) && noexcept(__is_nothrow_invocable<_Fn &&, _Args...>::value && noexcept(_S_not<__inv_res_t<_Fn &&, _Args...>>())) { return !std::__invoke(std::forward< _Fn && >(_M_fn), std::forward<_Args>(__args)...); }
      template<typename... _Args> decltype(_S_not<__inv_res_t<_Fn const &&, _Args...>>()) operator()(_Args&&... __args) const && noexcept(__is_nothrow_invocable<_Fn const &&, _Args...>::value && noexcept(_S_not<__inv_res_t<_Fn const &&, _Args...>>())) { return !std::__invoke(std::forward< _Fn const && >(_M_fn), std::forward<_Args>(__args)...); }


    private:
      _Fn _M_fn;
    };

  template<typename _Tp, typename _Pred>
    struct __is_byte_like : false_type { };

  template<typename _Tp>
    struct __is_byte_like<_Tp, equal_to<_Tp>>
    : __bool_constant<sizeof(_Tp) == 1 && is_integral<_Tp>::value> { };

  template<typename _Tp>
    struct __is_byte_like<_Tp, equal_to<void>>
    : __bool_constant<sizeof(_Tp) == 1 && is_integral<_Tp>::value> { };
# 1275 "/usr/include/c++/10/functional" 3

}
# 4227 "/usr/include/wx-3.1-unofficial/wx/string.h" 2


# 4228 "/usr/include/wx-3.1-unofficial/wx/string.h"
namespace std
{
    template<>
    struct hash<wxString>
    {
        size_t operator()(const wxString& s) const
        {
            return std::hash<std::wstring>()(s.ToStdWstring());
        }
    };
}
# 4250 "/usr/include/wx-3.1-unofficial/wx/string.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/iosfwrap.h" 1
# 4251 "/usr/include/wx-3.1-unofficial/wx/string.h" 2

__attribute__ ((visibility("default"))) std:: ostream& operator<<(std:: ostream&, const wxString&);
__attribute__ ((visibility("default"))) std:: ostream& operator<<(std:: ostream&, const wxCStrData&);

__attribute__ ((visibility("default"))) std:: ostream& operator<<(std:: ostream&, const wxScopedCharBuffer&);

__attribute__ ((visibility("default"))) std:: ostream& operator<<(std:: ostream&, const wxScopedWCharBuffer&);



__attribute__ ((visibility("default"))) std:: wostream& operator<<(std:: wostream&, const wxString&);
__attribute__ ((visibility("default"))) std:: wostream& operator<<(std:: wostream&, const wxCStrData&);
__attribute__ ((visibility("default"))) std:: wostream& operator<<(std:: wostream&, const wxScopedWCharBuffer&);
# 4274 "/usr/include/wx-3.1-unofficial/wx/string.h"
inline wxCStrData::wxCStrData(char *buf)
    : m_str(new wxString(buf)), m_offset(0), m_owned(true) {}

inline wxCStrData::wxCStrData(wchar_t *buf)
    : m_str(new wxString(buf)), m_offset(0), m_owned(true) {}

inline wxCStrData::wxCStrData(const wxCStrData& data)
    : m_str(data.m_owned ? new wxString(*data.m_str) : data.m_str),
      m_offset(data.m_offset),
      m_owned(data.m_owned)
{
}

inline wxCStrData::~wxCStrData()
{
    if ( m_owned )
        delete const_cast<wxString*>(m_str);
}



inline const wchar_t* wxCStrData::AsWChar() const
{
    const wchar_t * const p =

        m_str->wc_str();
# 4326 "/usr/include/wx-3.1-unofficial/wx/string.h"
    return p + m_offset;
}


inline const char* wxCStrData::AsChar() const
{

    const char * const p = m_str->AsChar(wxGet_wxConvLibc());
    if ( !p )
        return "";




    return p + m_offset;
}


inline wxString wxCStrData::AsString() const
{
    if ( m_offset == 0 )
        return *m_str;
    else
        return m_str->Mid(m_offset);
}

inline const wxStringCharType *wxCStrData::AsInternal() const
{



    return m_str->wx_str() + m_offset;

}

inline wxUniChar wxCStrData::operator*() const
{
    if ( m_str->empty() )
        return wxUniChar(L'\0');
    else
        return (*m_str)[m_offset];
}

inline wxUniChar wxCStrData::operator[](size_t n) const
{


    return (*m_str)[m_offset + n];
}
# 4383 "/usr/include/wx-3.1-unofficial/wx/string.h"
inline size_t operator-(const char *p, const wxCStrData& cs)
{
    return p - cs.AsChar();
}


inline size_t operator-(const wchar_t *p, const wxCStrData& cs)
{
    return p - cs.AsWChar();
}







inline wxCharBuffer::wxCharBuffer(const wxCStrData& cstr)
                    : wxCharTypeBufferBase(cstr.AsCharBuf())
{
}


inline wxWCharBuffer::wxWCharBuffer(const wxCStrData& cstr)
                    : wxCharTypeBufferBase(cstr.AsWCharBuf())
{
}
# 4465 "/usr/include/wx-3.1-unofficial/wx/string.h"
template<bool (T)(const wxUniChar& c)>
    inline bool wxStringCheck(const wxString& val)
    {
        for ( wxString::const_iterator i = val.begin();
              i != val.end();
              ++i )
            if (T(*i) == 0)
                return false;
        return true;
    }
# 16 "/usr/include/wx-3.1-unofficial/wx/memory.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/msgout.h" 1
# 18 "/usr/include/wx-3.1-unofficial/wx/msgout.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 19 "/usr/include/wx-3.1-unofficial/wx/msgout.h" 2
# 27 "/usr/include/wx-3.1-unofficial/wx/msgout.h"
class __attribute__ ((visibility("default"))) wxMessageOutput
{
public:
    virtual ~wxMessageOutput() { }



    static wxMessageOutput* Get();


    static wxMessageOutput* Set(wxMessageOutput* msgout);



    inline void Printf(const wxFormatString& f1) { DoPrintfWchar(f1); } template<typename T1> void Printf(const wxFormatString& f1, T1 a1) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get()); } template<typename T1, typename T2> void Printf(const wxFormatString& f1, T1 a1, T2 a2) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get()); } template<typename T1, typename T2, typename T3> void Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get()); } template<typename T1, typename T2, typename T3, typename T4> void Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5> void Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8> void Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> void Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10> void Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11> void Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12> void Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13> void Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14> void Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15> void Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16> void Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17> void Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18> void Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19> void Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20> void Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21> void Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22> void Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23> void Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24> void Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25> void Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26> void Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27> void Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28> void Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29> void Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get(), wxArgNormalizerWchar<T29>(a29, fmt, 29).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29, typename T30> void Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29, T30 a30) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get(), wxArgNormalizerWchar<T29>(a29, fmt, 29).get(), wxArgNormalizerWchar<T30>(a30, fmt, 30).get()); }




    virtual void Output(const wxString& str) = 0;

protected:

    void DoPrintfWchar(const wxChar *format, ...);





private:
    static wxMessageOutput* ms_msgOut;
};





class __attribute__ ((visibility("default"))) wxMessageOutputWithConv
{
protected:
    explicit wxMessageOutputWithConv(const wxMBConv& conv)
        : m_conv(conv.Clone())
    {
    }

    ~wxMessageOutputWithConv()
    {
        delete m_conv;
    }



    wxString AppendLineFeedIfNeeded(const wxString& str);




    wxCharBuffer PrepareForOutput(const wxString& str);

    const wxMBConv* const m_conv;
};





class __attribute__ ((visibility("default"))) wxMessageOutputStderr : public wxMessageOutput,
                                               protected wxMessageOutputWithConv
{
public:
    wxMessageOutputStderr(FILE *fp = 
# 97 "/usr/include/wx-3.1-unofficial/wx/msgout.h" 3 4
                                    stderr
# 97 "/usr/include/wx-3.1-unofficial/wx/msgout.h"
                                          ,
                          const wxMBConv &conv = wxGet_wxConvWhateverWorks());

    virtual void Output(const wxString& str) override;

protected:
    FILE *m_fp;

    private: wxMessageOutputStderr(const wxMessageOutputStderr&) = delete; wxMessageOutputStderr& operator=(const wxMessageOutputStderr&) = delete;
};






enum wxMessageOutputFlags
{
    wxMSGOUT_PREFER_STDERR = 0,
    wxMSGOUT_PREFER_MSGBOX = 1
};

class __attribute__ ((visibility("default"))) wxMessageOutputBest : public wxMessageOutputStderr
{
public:
    wxMessageOutputBest(wxMessageOutputFlags flags = wxMSGOUT_PREFER_STDERR)
        : m_flags(flags) { }

    virtual void Output(const wxString& str) override;

private:
    wxMessageOutputFlags m_flags;
};







class __attribute__ ((visibility("default"))) wxMessageOutputMessageBox : public wxMessageOutput
{
public:
    wxMessageOutputMessageBox() { }

    virtual void Output(const wxString& str) override;
};







class __attribute__ ((visibility("default"))) wxMessageOutputDebug : public wxMessageOutputStderr
{
public:
    wxMessageOutputDebug() { }

    virtual void Output(const wxString& str) override;
};





class __attribute__ ((visibility("default"))) wxMessageOutputLog : public wxMessageOutput
{
public:
    wxMessageOutputLog() { }

    virtual void Output(const wxString& str) override;
};
# 17 "/usr/include/wx-3.1-unofficial/wx/memory.h" 2
# 20 "/usr/include/wx-3.1-unofficial/wx/object.h" 2
# 56 "/usr/include/wx-3.1-unofficial/wx/object.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/xti.h" 1
# 34 "/usr/include/wx-3.1-unofficial/wx/xti.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 35 "/usr/include/wx-3.1-unofficial/wx/xti.h" 2
# 57 "/usr/include/wx-3.1-unofficial/wx/object.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/rtti.h" 1
# 27 "/usr/include/wx-3.1-unofficial/wx/rtti.h"
class wxObject;
class wxString;
class wxClassInfo;
class wxHashTable;
class wxObject;
class wxPluginLibrary;
class wxHashTable_Node;





typedef wxObject *(*wxObjectConstructorFn)(void);

class __attribute__ ((visibility("default"))) wxClassInfo
{
    friend class wxObject;
    friend __attribute__ ((visibility("default"))) wxObject *wxCreateDynamicObject(const wxString& name);
public:
    wxClassInfo( const wxChar *className,
                 const wxClassInfo *baseInfo1,
                 const wxClassInfo *baseInfo2,
                 int size,
                 wxObjectConstructorFn ctor )
        : m_className(className)
        , m_objectSize(size)
        , m_objectConstructor(ctor)
        , m_baseInfo1(baseInfo1)
        , m_baseInfo2(baseInfo2)
        , m_next(sm_first)
        {
            sm_first = this;
            Register();
        }

    ~wxClassInfo();

    wxObject *CreateObject() const
        { return m_objectConstructor ? (*m_objectConstructor)() : 
# 65 "/usr/include/wx-3.1-unofficial/wx/rtti.h" 3 4
                                                                 __null
# 65 "/usr/include/wx-3.1-unofficial/wx/rtti.h"
                                                                     ; }
    bool IsDynamic() const { return (
# 66 "/usr/include/wx-3.1-unofficial/wx/rtti.h" 3 4
                                    __null 
# 66 "/usr/include/wx-3.1-unofficial/wx/rtti.h"
                                         != m_objectConstructor); }

    const wxChar *GetClassName() const { return m_className; }
    const wxChar *GetBaseClassName1() const
        { return m_baseInfo1 ? m_baseInfo1->GetClassName() : 
# 70 "/usr/include/wx-3.1-unofficial/wx/rtti.h" 3 4
                                                            __null
# 70 "/usr/include/wx-3.1-unofficial/wx/rtti.h"
                                                                ; }
    const wxChar *GetBaseClassName2() const
        { return m_baseInfo2 ? m_baseInfo2->GetClassName() : 
# 72 "/usr/include/wx-3.1-unofficial/wx/rtti.h" 3 4
                                                            __null
# 72 "/usr/include/wx-3.1-unofficial/wx/rtti.h"
                                                                ; }
    const wxClassInfo *GetBaseClass1() const { return m_baseInfo1; }
    const wxClassInfo *GetBaseClass2() const { return m_baseInfo2; }
    int GetSize() const { return m_objectSize; }

    wxObjectConstructorFn GetConstructor() const
        { return m_objectConstructor; }
    static const wxClassInfo *GetFirst() { return sm_first; }
    const wxClassInfo *GetNext() const { return m_next; }
    static wxClassInfo *FindClass(const wxString& className);




    bool IsKindOf(const wxClassInfo *info) const
    {
        if ( info == this )
            return true;

        if ( m_baseInfo1 )
        {
            if ( m_baseInfo1->IsKindOf(info) )
                return true;
        }

        if ( m_baseInfo2 )
        {
            if ( m_baseInfo2->IsKindOf(info) )
                return true;
        }

        return false;
    }

    class __attribute__ ((visibility("default"))) const_iterator { typedef wxHashTable_Node Node; public: typedef const wxClassInfo* value_type; typedef const value_type& const_reference; typedef const_iterator itor; typedef value_type* ptr_type; Node* m_node; wxHashTable* m_table; public: typedef const_reference reference_type; typedef ptr_type pointer_type; const_iterator(Node* node, wxHashTable* table) : m_node(node), m_table(table) { } const_iterator() : m_node(
# 106 "/usr/include/wx-3.1-unofficial/wx/rtti.h" 3 4
   __null
# 106 "/usr/include/wx-3.1-unofficial/wx/rtti.h"
   ), m_table(
# 106 "/usr/include/wx-3.1-unofficial/wx/rtti.h" 3 4
   __null
# 106 "/usr/include/wx-3.1-unofficial/wx/rtti.h"
   ) { } value_type operator*() const; itor& operator++(); const itor operator++(int); bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; static const_iterator begin_classinfo(); static const_iterator end_classinfo();

private:
    const wxChar *m_className;
    int m_objectSize;
    wxObjectConstructorFn m_objectConstructor;



    const wxClassInfo *m_baseInfo1;
    const wxClassInfo *m_baseInfo2;




    static wxClassInfo *sm_first;
    wxClassInfo *m_next;

    static wxHashTable *sm_classTable;

protected:

    void Register();
    void Unregister();

    private: wxClassInfo(const wxClassInfo&) = delete; wxClassInfo& operator=(const wxClassInfo&) = delete;
};

__attribute__ ((visibility("default"))) wxObject *wxCreateDynamicObject(const wxString& name);
# 213 "/usr/include/wx-3.1-unofficial/wx/rtti.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/flags.h" 1
# 20 "/usr/include/wx-3.1-unofficial/wx/flags.h"
template <class T> class wxBitset
{
    friend class wxEnumData ;
public:

    wxBitset() { m_data = 0; }



    wxBitset(unsigned long val) { m_data = val ; }


    wxBitset(const wxBitset &src) { m_data = src.m_data; }


    wxBitset(const T el) { m_data |= 1 << el; }


    unsigned long to_ulong() const { return m_data ; }


    wxBitset &operator =(const wxBitset &rhs)
    {
        m_data = rhs.m_data;
        return *this;
    }



    wxBitset &operator |=(const wxBitset &rhs)
    {
        m_data |= rhs.m_data;
        return *this;
    }



    wxBitset &operator ^=(const wxBitset &rhs)
    {
        m_data ^= rhs.m_data;
        return *this;
    }



    wxBitset &operator &=(const wxBitset &rhs)
    {
        m_data &= rhs.m_data;
        return *this;
    }



    wxBitset operator |(const wxBitset &bitset2) const
    {
        wxBitset<T> s;
        s.m_data = m_data | bitset2.m_data;
        return s;
    }



    wxBitset operator ^(const wxBitset &bitset2) const
    {
        wxBitset<T> s;
        s.m_data = m_data ^ bitset2.m_data;
        return s;
    }



    wxBitset operator &(const wxBitset &bitset2) const
    {
        wxBitset<T> s;
        s.m_data = m_data & bitset2.m_data;
        return s;
    }


    wxBitset& set(const T el)
    {
        m_data |= 1 << el;
        return *this;
    }


    wxBitset& reset(const T el)
    {
        m_data &= ~(1 << el);
        return *this;
    }


    wxBitset& reset()
    {
        m_data = 0;
        return *this;
    }


    bool test(const T el) const
    {
        return (m_data & (1 << el)) ? true : false;
    }


    bool none() const
    {
        return m_data == 0;
    }


    bool any() const
    {
        return m_data != 0;
    }


    bool operator ==(const wxBitset &rhs) const
    {
        return m_data == rhs.m_data;
    }


    bool operator !=(const wxBitset &rhs) const
    {
        return !operator==(rhs);
    }

    bool operator[] (const T el) const { return test(el) ; }

private :
    unsigned long m_data;
};
# 214 "/usr/include/wx-3.1-unofficial/wx/rtti.h" 2
# 58 "/usr/include/wx-3.1-unofficial/wx/object.h" 2
# 155 "/usr/include/wx-3.1-unofficial/wx/object.h"
template <class T>
inline T *wxCheckCast(const void *ptr)
{
    do { if ( ((T *) wxCheckDynamicCast( const_cast<wxObject *>(static_cast<const wxObject *>( const_cast<T *>(static_cast<const T *>(ptr)))), &T::ms_classInfo)) ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/object.h", 158, __FUNCTION__, "((T *) wxCheckDynamicCast( const_cast<wxObject *>(static_cast<const wxObject *>( const_cast<T *>(static_cast<const T *>(ptr)))), &T::ms_classInfo))", "wxStaticCast() used incorrectly"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );
    return const_cast<T *>(static_cast<const T *>(ptr));
}
# 228 "/usr/include/wx-3.1-unofficial/wx/object.h"
class __attribute__ ((visibility("default"))) wxRefCounter
{
public:
    wxRefCounter() { m_count = 1; }

    int GetRefCount() const { return m_count; }

    void IncRef() { m_count++; }
    void DecRef();

protected:


    virtual ~wxRefCounter() { }

private:

    int m_count;





    private: wxRefCounter(const wxRefCounter&) = delete; wxRefCounter& operator=(const wxRefCounter&) = delete;
};





typedef wxRefCounter wxObjectRefData;






template <class T>
class wxObjectDataPtr
{
public:
    typedef T element_type;

    explicit wxObjectDataPtr(T *ptr = 
# 271 "/usr/include/wx-3.1-unofficial/wx/object.h" 3 4
                                     __null
# 271 "/usr/include/wx-3.1-unofficial/wx/object.h"
                                         ) : m_ptr(ptr) {}


    wxObjectDataPtr(const wxObjectDataPtr<T> &tocopy)
        : m_ptr(tocopy.m_ptr)
    {
        if (m_ptr)
            m_ptr->IncRef();
    }


    template <typename U>
    wxObjectDataPtr(const wxObjectDataPtr<U> &tocopy)
        : m_ptr(tocopy.get())
    {
        if (m_ptr)
            m_ptr->IncRef();
    }

    ~wxObjectDataPtr()
    {
        if (m_ptr)
            m_ptr->DecRef();
    }

    T *get() const { return m_ptr; }



    typedef T *(wxObjectDataPtr<T>::*unspecified_bool_type)() const;
    operator unspecified_bool_type() const
    {
        return m_ptr ? &wxObjectDataPtr<T>::get : 
# 303 "/usr/include/wx-3.1-unofficial/wx/object.h" 3 4
                                                 __null
# 303 "/usr/include/wx-3.1-unofficial/wx/object.h"
                                                     ;
    }

    T& operator*() const
    {
        do { if ( m_ptr != 
# 308 "/usr/include/wx-3.1-unofficial/wx/object.h" 3 4
       __null 
# 308 "/usr/include/wx-3.1-unofficial/wx/object.h"
       ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/object.h", 308, __FUNCTION__, "m_ptr != __null", (const char*)
# 308 "/usr/include/wx-3.1-unofficial/wx/object.h" 3 4
       __null
# 308 "/usr/include/wx-3.1-unofficial/wx/object.h"
       ), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );
        return *(m_ptr);
    }

    T *operator->() const
    {
        do { if ( m_ptr != 
# 314 "/usr/include/wx-3.1-unofficial/wx/object.h" 3 4
       __null 
# 314 "/usr/include/wx-3.1-unofficial/wx/object.h"
       ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/object.h", 314, __FUNCTION__, "m_ptr != __null", (const char*)
# 314 "/usr/include/wx-3.1-unofficial/wx/object.h" 3 4
       __null
# 314 "/usr/include/wx-3.1-unofficial/wx/object.h"
       ), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );
        return get();
    }

    void reset(T *ptr)
    {
        if (m_ptr)
            m_ptr->DecRef();
        m_ptr = ptr;
    }

    T* release()
    {
        T* const ptr = m_ptr;
        m_ptr = 
# 328 "/usr/include/wx-3.1-unofficial/wx/object.h" 3 4
               __null
# 328 "/usr/include/wx-3.1-unofficial/wx/object.h"
                   ;
        return ptr;
    }

    wxObjectDataPtr& operator=(const wxObjectDataPtr &tocopy)
    {
        if (m_ptr)
            m_ptr->DecRef();
        m_ptr = tocopy.m_ptr;
        if (m_ptr)
            m_ptr->IncRef();
        return *this;
    }

    template <typename U>
    wxObjectDataPtr& operator=(const wxObjectDataPtr<U> &tocopy)
    {
        if (m_ptr)
            m_ptr->DecRef();
        m_ptr = tocopy.get();
        if (m_ptr)
            m_ptr->IncRef();
        return *this;
    }

    wxObjectDataPtr& operator=(T *ptr)
    {
        if (m_ptr)
            m_ptr->DecRef();
        m_ptr = ptr;
        return *this;
    }

private:
    T *m_ptr;
};





class __attribute__ ((visibility("default"))) wxObject
{
    public:
# 371 "/usr/include/wx-3.1-unofficial/wx/object.h"
#pragma GCC diagnostic push
# 371 "/usr/include/wx-3.1-unofficial/wx/object.h"
   
# 371 "/usr/include/wx-3.1-unofficial/wx/object.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 371 "/usr/include/wx-3.1-unofficial/wx/object.h"
    virtual wxClassInfo *GetClassInfo() const;
# 371 "/usr/include/wx-3.1-unofficial/wx/object.h"
#pragma GCC diagnostic pop
# 371 "/usr/include/wx-3.1-unofficial/wx/object.h"
    static wxClassInfo ms_classInfo;

public:
    wxObject() { m_refData = 
# 374 "/usr/include/wx-3.1-unofficial/wx/object.h" 3 4
                            __null
# 374 "/usr/include/wx-3.1-unofficial/wx/object.h"
                                ; }
    virtual ~wxObject() { UnRef(); }

    wxObject(const wxObject& other)
    {
         m_refData = other.m_refData;
         if (m_refData)
             m_refData->IncRef();
    }

    wxObject& operator=(const wxObject& other)
    {
        if ( this != &other )
        {
            Ref(other);
        }
        return *this;
    }

    bool IsKindOf(const wxClassInfo *info) const;
# 425 "/usr/include/wx-3.1-unofficial/wx/object.h"
    wxObjectRefData *GetRefData() const { return m_refData; }
    void SetRefData(wxObjectRefData *data) { m_refData = data; }


    void Ref(const wxObject& clone);


    void UnRef();


    void UnShare() { AllocExclusive(); }


    bool IsSameAs(const wxObject& o) const { return m_refData == o.m_refData; }

protected:



    void AllocExclusive();





    virtual wxObjectRefData *CreateRefData() const;


    virtual wxObjectRefData *CloneRefData(const wxObjectRefData *data) const;

    wxObjectRefData *m_refData;
};

inline wxObject *wxCheckDynamicCast(wxObject *obj, wxClassInfo *classInfo)
{
    return obj && obj->GetClassInfo()->IsKindOf(classInfo) ? obj : 
# 460 "/usr/include/wx-3.1-unofficial/wx/object.h" 3 4
                                                                  __null
# 460 "/usr/include/wx-3.1-unofficial/wx/object.h"
                                                                      ;
}

# 1 "/usr/include/wx-3.1-unofficial/wx/xti2.h" 1
# 464 "/usr/include/wx-3.1-unofficial/wx/object.h" 2
# 17 "/usr/include/wx-3.1-unofficial/wx/event.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/clntdata.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/clntdata.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/clntdata.h" 2

# 1 "/usr/include/wx-3.1-unofficial/wx/hashmap.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/hashmap.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h" 1
# 30 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h"
inline bool wxIsEmpty(const char *s) { return !s || !*s; }
inline bool wxIsEmpty(const wchar_t *s) { return !s || !*s; }
inline bool wxIsEmpty(const wxScopedCharBuffer& s) { return wxIsEmpty(s.data()); }
inline bool wxIsEmpty(const wxScopedWCharBuffer& s) { return wxIsEmpty(s.data()); }
inline bool wxIsEmpty(const wxString& s) { return s.empty(); }
inline bool wxIsEmpty(const wxCStrData& s) { return s.AsString().empty(); }






__attribute__ ((visibility("default"))) size_t wxMB2WC(wchar_t *buf, const char *psz, size_t n);
__attribute__ ((visibility("default"))) size_t wxWC2MB(char *buf, const wchar_t *psz, size_t n);
# 69 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h"
    inline wxChar* wxTmemchr(const wxChar* s, wxChar c, size_t l)
    {
        for(;l && *s != c;--l, ++s) {}

        if(l)
            return const_cast<wxChar*>(s);
        return 
# 75 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h" 3 4
              __null
# 75 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h"
                  ;
    }

    inline int wxTmemcmp(const wxChar* sz1, const wxChar* sz2, size_t len)
    {
        for(; *sz1 == *sz2 && len; --len, ++sz1, ++sz2) {}

        if(len)
            return *sz1 < *sz2 ? -1 : *sz1 > *sz2;
        else
            return 0;
    }

    inline wxChar* wxTmemcpy(wxChar* szOut, const wxChar* szIn, size_t len)
    {
        return (wxChar*) memcpy(szOut, szIn, len * sizeof(wxChar));
    }

    inline wxChar* wxTmemmove(wxChar* szOut, const wxChar* szIn, size_t len)
    {
        return (wxChar*) memmove(szOut, szIn, len * sizeof(wxChar));
    }

    inline wxChar* wxTmemset(wxChar* szOut, wxChar cIn, size_t len)
    {
        wxChar* szRet = szOut;

        while (len--)
            *szOut++ = cIn;

        return szRet;
    }





inline char* wxTmemchr(const char* s, char c, size_t len)
    { return const_cast<char*>(static_cast<const char*>(memchr(s, c, len))); }
inline int wxTmemcmp(const char* sz1, const char* sz2, size_t len)
    { return memcmp(sz1, sz2, len); }
inline char* wxTmemcpy(char* szOut, const char* szIn, size_t len)
    { return (char*)memcpy(szOut, szIn, len); }
inline char* wxTmemmove(char* szOut, const char* szIn, size_t len)
    { return (char*)memmove(szOut, szIn, len); }
inline char* wxTmemset(char* szOut, char cIn, size_t len)
    { return (char*)memset(szOut, cIn, len); }
# 149 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h"
__attribute__ ((visibility("default"))) char* wxSetlocale(int category, const char *locale);
inline char* wxSetlocale(int category, const wxScopedCharBuffer& locale)
    { return wxSetlocale(category, locale.data()); }

inline char* wxSetlocale(int category, const wxString& locale)
    { return wxSetlocale(category, locale.mb_str()); }
inline char* wxSetlocale(int category, const wxCStrData& locale)
    { return wxSetlocale(category, locale.AsCharBuf()); }
# 167 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h"
inline size_t wxStrlen(const wxScopedCharBuffer& s) { return wxStrlen(s.data()); }
inline size_t wxStrlen(const wxScopedWCharBuffer& s) { return wxStrlen(s.data()); }
inline size_t wxStrlen(const wxString& s) { return s.length(); }
inline size_t wxStrlen(const wxCStrData& s) { return s.AsString().length(); }




inline size_t wxStrnlen(const char *str, size_t maxlen) { return strnlen(str, maxlen); }
# 189 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h"
inline size_t wxStrnlen(const wchar_t *str, size_t maxlen) { return wcsnlen(str, maxlen); }
# 205 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h"
inline char* wxStrdup(const wxScopedCharBuffer& s) { return wxStrdup(s.data()); }
inline wchar_t* wxStrdup(const wxScopedWCharBuffer& s) { return wxStrdup(s.data()); }

inline char* wxStrdup(const wxString& s) { return wxStrdup(s.mb_str()); }
inline char* wxStrdup(const wxCStrData& s) { return wxStrdup(s.AsCharBuf()); }


inline char *wxStrcpy(char *dest, const char *src)
    { return strcpy(dest, src); }
inline wchar_t *wxStrcpy(wchar_t *dest, const wchar_t *src)
    { return wcscpy(dest, src); }

inline char *wxStrcpy(char *dest, const wxString& src)
    { return strcpy(dest, src.mb_str()); }
inline char *wxStrcpy(char *dest, const wxCStrData& src)
    { return strcpy(dest, src.AsCharBuf()); }

inline char *wxStrcpy(char *dest, const wxScopedCharBuffer& src)
    { return strcpy(dest, src.data()); }
inline wchar_t *wxStrcpy(wchar_t *dest, const wxString& src)
    { return wcscpy(dest, src.wc_str()); }
inline wchar_t *wxStrcpy(wchar_t *dest, const wxCStrData& src)
    { return wcscpy(dest, src.AsWCharBuf()); }
inline wchar_t *wxStrcpy(wchar_t *dest, const wxScopedWCharBuffer& src)
    { return wcscpy(dest, src.data()); }

inline char *wxStrcpy(char *dest, const wchar_t *src)
    { return strcpy(dest, wxGet_wxConvLibc().cWC2MB(src)); }
inline wchar_t *wxStrcpy(wchar_t *dest, const char *src)
    { return wcscpy(dest, wxGet_wxConvLibc().cMB2WC(src)); }


inline char *wxStrncpy(char *dest, const char *src, size_t n)
    { return strncpy(dest, src, n); }
inline wchar_t *wxStrncpy(wchar_t *dest, const wchar_t *src, size_t n)
    { return wcsncpy(dest, src, n); }

inline char *wxStrncpy(char *dest, const wxString& src, size_t n)
    { return strncpy(dest, src.mb_str(), n); }
inline char *wxStrncpy(char *dest, const wxCStrData& src, size_t n)
    { return strncpy(dest, src.AsCharBuf(), n); }

inline char *wxStrncpy(char *dest, const wxScopedCharBuffer& src, size_t n)
    { return strncpy(dest, src.data(), n); }
inline wchar_t *wxStrncpy(wchar_t *dest, const wxString& src, size_t n)
    { return wcsncpy(dest, src.wc_str(), n); }
inline wchar_t *wxStrncpy(wchar_t *dest, const wxCStrData& src, size_t n)
    { return wcsncpy(dest, src.AsWCharBuf(), n); }
inline wchar_t *wxStrncpy(wchar_t *dest, const wxScopedWCharBuffer& src, size_t n)
    { return wcsncpy(dest, src.data(), n); }

inline char *wxStrncpy(char *dest, const wchar_t *src, size_t n)
    { return strncpy(dest, wxGet_wxConvLibc().cWC2MB(src), n); }
inline wchar_t *wxStrncpy(wchar_t *dest, const char *src, size_t n)
    { return wcsncpy(dest, wxGet_wxConvLibc().cMB2WC(src), n); }




inline size_t wxStrlcpy(char *dest, const char *src, size_t n)
{
    const size_t len = strlen(src);

    if ( n )
    {
        if ( n-- > len )
            n = len;
        memcpy(dest, src, n);
        dest[n] = '\0';
    }

    return len;
}
inline size_t wxStrlcpy(wchar_t *dest, const wchar_t *src, size_t n)
{
    const size_t len = wcslen(src);
    if ( n )
    {
        if ( n-- > len )
            n = len;
        memcpy(dest, src, n * sizeof(wchar_t));
        dest[n] = L'\0';
    }

    return len;
}

inline char *wxStrcat(char *dest, const char *src)
    { return strcat(dest, src); }
inline wchar_t *wxStrcat(wchar_t *dest, const wchar_t *src)
    { return wcscat(dest, src); }

inline char *wxStrcat(char *dest, const wxString& src)
    { return strcat(dest, src.mb_str()); }
inline char *wxStrcat(char *dest, const wxCStrData& src)
    { return strcat(dest, src.AsCharBuf()); }

inline char *wxStrcat(char *dest, const wxScopedCharBuffer& src)
    { return strcat(dest, src.data()); }
inline wchar_t *wxStrcat(wchar_t *dest, const wxString& src)
    { return wcscat(dest, src.wc_str()); }
inline wchar_t *wxStrcat(wchar_t *dest, const wxCStrData& src)
    { return wcscat(dest, src.AsWCharBuf()); }
inline wchar_t *wxStrcat(wchar_t *dest, const wxScopedWCharBuffer& src)
    { return wcscat(dest, src.data()); }

inline char *wxStrcat(char *dest, const wchar_t *src)
    { return strcat(dest, wxGet_wxConvLibc().cWC2MB(src)); }
inline wchar_t *wxStrcat(wchar_t *dest, const char *src)
    { return wcscat(dest, wxGet_wxConvLibc().cMB2WC(src)); }


inline char *wxStrncat(char *dest, const char *src, size_t n)
    { return strncat(dest, src, n); }
inline wchar_t *wxStrncat(wchar_t *dest, const wchar_t *src, size_t n)
    { return wcsncat(dest, src, n); }

inline char *wxStrncat(char *dest, const wxString& src, size_t n)
    { return strncat(dest, src.mb_str(), n); }
inline char *wxStrncat(char *dest, const wxCStrData& src, size_t n)
    { return strncat(dest, src.AsCharBuf(), n); }

inline char *wxStrncat(char *dest, const wxScopedCharBuffer& src, size_t n)
    { return strncat(dest, src.data(), n); }
inline wchar_t *wxStrncat(wchar_t *dest, const wxString& src, size_t n)
    { return wcsncat(dest, src.wc_str(), n); }
inline wchar_t *wxStrncat(wchar_t *dest, const wxCStrData& src, size_t n)
    { return wcsncat(dest, src.AsWCharBuf(), n); }
inline wchar_t *wxStrncat(wchar_t *dest, const wxScopedWCharBuffer& src, size_t n)
    { return wcsncat(dest, src.data(), n); }

inline char *wxStrncat(char *dest, const wchar_t *src, size_t n)
    { return strncat(dest, wxGet_wxConvLibc().cWC2MB(src), n); }
inline wchar_t *wxStrncat(wchar_t *dest, const char *src, size_t n)
    { return wcsncat(dest, wxGet_wxConvLibc().cMB2WC(src), n); }
# 540 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h"
template<typename T>
inline int wxStrcmp_String(const wxString& s1, const T& s2)
    { return s1.compare(s2); }
inline int wxStrcmp(const char * s1, const char * s2) { return strcmp(s1, s2); } inline int wxStrcmp(const char * s1, const wchar_t * s2) { return wxStrcmp_String(wxString(s1), wxString(s2)); } inline int wxStrcmp(const char * s1, const wxScopedCharBuffer& s2) { return strcmp(s1, s2.data()); } inline int wxStrcmp(const char * s1, const wxScopedWCharBuffer& s2) { return wxStrcmp_String(wxString(s1), s2.data()); } inline int wxStrcmp(const wchar_t * s1, const wchar_t * s2) { return wcscmp(s1, s2); } inline int wxStrcmp(const wchar_t * s1, const char * s2) { return wxStrcmp_String(wxString(s1), wxString(s2)); } inline int wxStrcmp(const wchar_t * s1, const wxScopedWCharBuffer& s2) { return wcscmp(s1, s2.data()); } inline int wxStrcmp(const wchar_t * s1, const wxScopedCharBuffer& s2) { return wxStrcmp_String(wxString(s1), s2.data()); } inline int wxStrcmp(const wxScopedCharBuffer& s1, const char * s2) { return strcmp(s1.data(), s2); } inline int wxStrcmp(const wxScopedCharBuffer& s1, const wchar_t * s2) { return wxStrcmp_String(wxString(s1), wxString(s2)); } inline int wxStrcmp(const wxScopedCharBuffer& s1, const wxScopedCharBuffer& s2) { return strcmp(s1.data(), s2.data()); } inline int wxStrcmp(const wxScopedCharBuffer& s1, const wxScopedWCharBuffer& s2) { return wxStrcmp_String(wxString(s1), wxString(s2)); } inline int wxStrcmp(const wxScopedWCharBuffer& s1, const wchar_t * s2) { return wcscmp(s1.data(), s2); } inline int wxStrcmp(const wxScopedWCharBuffer& s1, const char * s2) { return wxStrcmp_String(wxString(s1), wxString(s2)); } inline int wxStrcmp(const wxScopedWCharBuffer& s1, const wxScopedWCharBuffer& s2) { return wcscmp(s1.data(), s2.data()); } inline int wxStrcmp(const wxScopedWCharBuffer& s1, const wxScopedCharBuffer& s2) { return wxStrcmp_String(wxString(s1), wxString(s2)); } inline int wxStrcmp(const wxString& s1, const char* s2) { return wxStrcmp_String(s1, s2); } inline int wxStrcmp(const wxString& s1, const wchar_t* s2) { return wxStrcmp_String(s1, s2); } inline int wxStrcmp(const wxString& s1, const wxScopedCharBuffer& s2) { return wxStrcmp_String(s1, s2); } inline int wxStrcmp(const wxString& s1, const wxScopedWCharBuffer& s2) { return wxStrcmp_String(s1, s2); } inline int wxStrcmp(const wxString& s1, const wxString& s2) { return wxStrcmp_String(s1, s2); } inline int wxStrcmp(const wxString& s1, const wxCStrData& s2) { return wxStrcmp_String(s1, s2); } inline int wxStrcmp(const wxCStrData& s1, const char* s2) { return wxStrcmp_String(s1.AsString(), s2); } inline int wxStrcmp(const wxCStrData& s1, const wchar_t* s2) { return wxStrcmp_String(s1.AsString(), s2); } inline int wxStrcmp(const wxCStrData& s1, const wxScopedCharBuffer& s2) { return wxStrcmp_String(s1.AsString(), s2); } inline int wxStrcmp(const wxCStrData& s1, const wxScopedWCharBuffer& s2) { return wxStrcmp_String(s1.AsString(), s2); } inline int wxStrcmp(const wxCStrData& s1, const wxString& s2) { return wxStrcmp_String(s1.AsString(), s2); } inline int wxStrcmp(const wxCStrData& s1, const wxCStrData& s2) { return wxStrcmp_String(s1.AsString(), s2); } inline int wxStrcmp(const char * s1, const wxCStrData& s2) { return -wxStrcmp_String(s2.AsString(), s1); } inline int wxStrcmp(const char * s1, const wxString& s2) { return -wxStrcmp_String(s2, s1); } inline int wxStrcmp(const wchar_t * s1, const wxCStrData& s2) { return -wxStrcmp_String(s2.AsString(), s1); } inline int wxStrcmp(const wchar_t * s1, const wxString& s2) { return -wxStrcmp_String(s2, s1); } inline int wxStrcmp(const wxScopedCharBuffer& s1, const wxCStrData& s2) { return -wxStrcmp_String(s2.AsString(), s1.data()); } inline int wxStrcmp(const wxScopedCharBuffer& s1, const wxString& s2) { return -wxStrcmp_String(s2, s1.data()); } inline int wxStrcmp(const wxScopedWCharBuffer& s1, const wxCStrData& s2) { return -wxStrcmp_String(s2.AsString(), s1.data()); } inline int wxStrcmp(const wxScopedWCharBuffer& s1, const wxString& s2) { return -wxStrcmp_String(s2, s1.data()); }

template<typename T>
inline int wxStricmp_String(const wxString& s1, const T& s2)
    { return s1.CmpNoCase(s2); }
inline int wxStricmp(const char * s1, const char * s2) { return strcasecmp(s1, s2); } inline int wxStricmp(const char * s1, const wchar_t * s2) { return wxStricmp_String(wxString(s1), wxString(s2)); } inline int wxStricmp(const char * s1, const wxScopedCharBuffer& s2) { return strcasecmp(s1, s2.data()); } inline int wxStricmp(const char * s1, const wxScopedWCharBuffer& s2) { return wxStricmp_String(wxString(s1), s2.data()); } inline int wxStricmp(const wchar_t * s1, const wchar_t * s2) { return wcscasecmp(s1, s2); } inline int wxStricmp(const wchar_t * s1, const char * s2) { return wxStricmp_String(wxString(s1), wxString(s2)); } inline int wxStricmp(const wchar_t * s1, const wxScopedWCharBuffer& s2) { return wcscasecmp(s1, s2.data()); } inline int wxStricmp(const wchar_t * s1, const wxScopedCharBuffer& s2) { return wxStricmp_String(wxString(s1), s2.data()); } inline int wxStricmp(const wxScopedCharBuffer& s1, const char * s2) { return strcasecmp(s1.data(), s2); } inline int wxStricmp(const wxScopedCharBuffer& s1, const wchar_t * s2) { return wxStricmp_String(wxString(s1), wxString(s2)); } inline int wxStricmp(const wxScopedCharBuffer& s1, const wxScopedCharBuffer& s2) { return strcasecmp(s1.data(), s2.data()); } inline int wxStricmp(const wxScopedCharBuffer& s1, const wxScopedWCharBuffer& s2) { return wxStricmp_String(wxString(s1), wxString(s2)); } inline int wxStricmp(const wxScopedWCharBuffer& s1, const wchar_t * s2) { return wcscasecmp(s1.data(), s2); } inline int wxStricmp(const wxScopedWCharBuffer& s1, const char * s2) { return wxStricmp_String(wxString(s1), wxString(s2)); } inline int wxStricmp(const wxScopedWCharBuffer& s1, const wxScopedWCharBuffer& s2) { return wcscasecmp(s1.data(), s2.data()); } inline int wxStricmp(const wxScopedWCharBuffer& s1, const wxScopedCharBuffer& s2) { return wxStricmp_String(wxString(s1), wxString(s2)); } inline int wxStricmp(const wxString& s1, const char* s2) { return wxStricmp_String(s1, s2); } inline int wxStricmp(const wxString& s1, const wchar_t* s2) { return wxStricmp_String(s1, s2); } inline int wxStricmp(const wxString& s1, const wxScopedCharBuffer& s2) { return wxStricmp_String(s1, s2); } inline int wxStricmp(const wxString& s1, const wxScopedWCharBuffer& s2) { return wxStricmp_String(s1, s2); } inline int wxStricmp(const wxString& s1, const wxString& s2) { return wxStricmp_String(s1, s2); } inline int wxStricmp(const wxString& s1, const wxCStrData& s2) { return wxStricmp_String(s1, s2); } inline int wxStricmp(const wxCStrData& s1, const char* s2) { return wxStricmp_String(s1.AsString(), s2); } inline int wxStricmp(const wxCStrData& s1, const wchar_t* s2) { return wxStricmp_String(s1.AsString(), s2); } inline int wxStricmp(const wxCStrData& s1, const wxScopedCharBuffer& s2) { return wxStricmp_String(s1.AsString(), s2); } inline int wxStricmp(const wxCStrData& s1, const wxScopedWCharBuffer& s2) { return wxStricmp_String(s1.AsString(), s2); } inline int wxStricmp(const wxCStrData& s1, const wxString& s2) { return wxStricmp_String(s1.AsString(), s2); } inline int wxStricmp(const wxCStrData& s1, const wxCStrData& s2) { return wxStricmp_String(s1.AsString(), s2); } inline int wxStricmp(const char * s1, const wxCStrData& s2) { return -wxStricmp_String(s2.AsString(), s1); } inline int wxStricmp(const char * s1, const wxString& s2) { return -wxStricmp_String(s2, s1); } inline int wxStricmp(const wchar_t * s1, const wxCStrData& s2) { return -wxStricmp_String(s2.AsString(), s1); } inline int wxStricmp(const wchar_t * s1, const wxString& s2) { return -wxStricmp_String(s2, s1); } inline int wxStricmp(const wxScopedCharBuffer& s1, const wxCStrData& s2) { return -wxStricmp_String(s2.AsString(), s1.data()); } inline int wxStricmp(const wxScopedCharBuffer& s1, const wxString& s2) { return -wxStricmp_String(s2, s1.data()); } inline int wxStricmp(const wxScopedWCharBuffer& s1, const wxCStrData& s2) { return -wxStricmp_String(s2.AsString(), s1.data()); } inline int wxStricmp(const wxScopedWCharBuffer& s1, const wxString& s2) { return -wxStricmp_String(s2, s1.data()); }



template<typename T>
inline int wxStrcoll_String(const wxString& s1, const T& s2);
inline int wxStrcoll(const char * s1, const char * s2) { return strcoll(s1, s2); } inline int wxStrcoll(const char * s1, const wchar_t * s2) { return wxStrcoll_String(wxString(s1), wxString(s2)); } inline int wxStrcoll(const char * s1, const wxScopedCharBuffer& s2) { return strcoll(s1, s2.data()); } inline int wxStrcoll(const char * s1, const wxScopedWCharBuffer& s2) { return wxStrcoll_String(wxString(s1), s2.data()); } inline int wxStrcoll(const wchar_t * s1, const wchar_t * s2) { return wcscoll(s1, s2); } inline int wxStrcoll(const wchar_t * s1, const char * s2) { return wxStrcoll_String(wxString(s1), wxString(s2)); } inline int wxStrcoll(const wchar_t * s1, const wxScopedWCharBuffer& s2) { return wcscoll(s1, s2.data()); } inline int wxStrcoll(const wchar_t * s1, const wxScopedCharBuffer& s2) { return wxStrcoll_String(wxString(s1), s2.data()); } inline int wxStrcoll(const wxScopedCharBuffer& s1, const char * s2) { return strcoll(s1.data(), s2); } inline int wxStrcoll(const wxScopedCharBuffer& s1, const wchar_t * s2) { return wxStrcoll_String(wxString(s1), wxString(s2)); } inline int wxStrcoll(const wxScopedCharBuffer& s1, const wxScopedCharBuffer& s2) { return strcoll(s1.data(), s2.data()); } inline int wxStrcoll(const wxScopedCharBuffer& s1, const wxScopedWCharBuffer& s2) { return wxStrcoll_String(wxString(s1), wxString(s2)); } inline int wxStrcoll(const wxScopedWCharBuffer& s1, const wchar_t * s2) { return wcscoll(s1.data(), s2); } inline int wxStrcoll(const wxScopedWCharBuffer& s1, const char * s2) { return wxStrcoll_String(wxString(s1), wxString(s2)); } inline int wxStrcoll(const wxScopedWCharBuffer& s1, const wxScopedWCharBuffer& s2) { return wcscoll(s1.data(), s2.data()); } inline int wxStrcoll(const wxScopedWCharBuffer& s1, const wxScopedCharBuffer& s2) { return wxStrcoll_String(wxString(s1), wxString(s2)); } inline int wxStrcoll(const wxString& s1, const char* s2) { return wxStrcoll_String(s1, s2); } inline int wxStrcoll(const wxString& s1, const wchar_t* s2) { return wxStrcoll_String(s1, s2); } inline int wxStrcoll(const wxString& s1, const wxScopedCharBuffer& s2) { return wxStrcoll_String(s1, s2); } inline int wxStrcoll(const wxString& s1, const wxScopedWCharBuffer& s2) { return wxStrcoll_String(s1, s2); } inline int wxStrcoll(const wxString& s1, const wxString& s2) { return wxStrcoll_String(s1, s2); } inline int wxStrcoll(const wxString& s1, const wxCStrData& s2) { return wxStrcoll_String(s1, s2); } inline int wxStrcoll(const wxCStrData& s1, const char* s2) { return wxStrcoll_String(s1.AsString(), s2); } inline int wxStrcoll(const wxCStrData& s1, const wchar_t* s2) { return wxStrcoll_String(s1.AsString(), s2); } inline int wxStrcoll(const wxCStrData& s1, const wxScopedCharBuffer& s2) { return wxStrcoll_String(s1.AsString(), s2); } inline int wxStrcoll(const wxCStrData& s1, const wxScopedWCharBuffer& s2) { return wxStrcoll_String(s1.AsString(), s2); } inline int wxStrcoll(const wxCStrData& s1, const wxString& s2) { return wxStrcoll_String(s1.AsString(), s2); } inline int wxStrcoll(const wxCStrData& s1, const wxCStrData& s2) { return wxStrcoll_String(s1.AsString(), s2); } inline int wxStrcoll(const char * s1, const wxCStrData& s2) { return -wxStrcoll_String(s2.AsString(), s1); } inline int wxStrcoll(const char * s1, const wxString& s2) { return -wxStrcoll_String(s2, s1); } inline int wxStrcoll(const wchar_t * s1, const wxCStrData& s2) { return -wxStrcoll_String(s2.AsString(), s1); } inline int wxStrcoll(const wchar_t * s1, const wxString& s2) { return -wxStrcoll_String(s2, s1); } inline int wxStrcoll(const wxScopedCharBuffer& s1, const wxCStrData& s2) { return -wxStrcoll_String(s2.AsString(), s1.data()); } inline int wxStrcoll(const wxScopedCharBuffer& s1, const wxString& s2) { return -wxStrcoll_String(s2, s1.data()); } inline int wxStrcoll(const wxScopedWCharBuffer& s1, const wxCStrData& s2) { return -wxStrcoll_String(s2.AsString(), s1.data()); } inline int wxStrcoll(const wxScopedWCharBuffer& s1, const wxString& s2) { return -wxStrcoll_String(s2, s1.data()); }

template<typename T>
inline int wxStrcoll_String(const wxString& s1, const T& s2)
{





    return wxStrcoll((const wchar_t*)s1.wc_str(), s2);



}



template<typename T>
inline size_t wxStrspn_String(const wxString& s1, const T& s2)
{
    size_t pos = s1.find_first_not_of(s2);
    return pos == wxString::npos ? s1.length() : pos;
}
inline size_t wxStrspn(const char * s1, const char * s2) { return strspn(s1, s2); } inline size_t wxStrspn(const char * s1, const wchar_t * s2) { return wxStrspn_String(wxString(s1), wxString(s2)); } inline size_t wxStrspn(const char * s1, const wxScopedCharBuffer& s2) { return strspn(s1, s2.data()); } inline size_t wxStrspn(const char * s1, const wxScopedWCharBuffer& s2) { return wxStrspn_String(wxString(s1), s2.data()); } inline size_t wxStrspn(const wchar_t * s1, const wchar_t * s2) { return wcsspn(s1, s2); } inline size_t wxStrspn(const wchar_t * s1, const char * s2) { return wxStrspn_String(wxString(s1), wxString(s2)); } inline size_t wxStrspn(const wchar_t * s1, const wxScopedWCharBuffer& s2) { return wcsspn(s1, s2.data()); } inline size_t wxStrspn(const wchar_t * s1, const wxScopedCharBuffer& s2) { return wxStrspn_String(wxString(s1), s2.data()); } inline size_t wxStrspn(const wxScopedCharBuffer& s1, const char * s2) { return strspn(s1.data(), s2); } inline size_t wxStrspn(const wxScopedCharBuffer& s1, const wchar_t * s2) { return wxStrspn_String(wxString(s1), wxString(s2)); } inline size_t wxStrspn(const wxScopedCharBuffer& s1, const wxScopedCharBuffer& s2) { return strspn(s1.data(), s2.data()); } inline size_t wxStrspn(const wxScopedCharBuffer& s1, const wxScopedWCharBuffer& s2) { return wxStrspn_String(wxString(s1), wxString(s2)); } inline size_t wxStrspn(const wxScopedWCharBuffer& s1, const wchar_t * s2) { return wcsspn(s1.data(), s2); } inline size_t wxStrspn(const wxScopedWCharBuffer& s1, const char * s2) { return wxStrspn_String(wxString(s1), wxString(s2)); } inline size_t wxStrspn(const wxScopedWCharBuffer& s1, const wxScopedWCharBuffer& s2) { return wcsspn(s1.data(), s2.data()); } inline size_t wxStrspn(const wxScopedWCharBuffer& s1, const wxScopedCharBuffer& s2) { return wxStrspn_String(wxString(s1), wxString(s2)); } inline size_t wxStrspn(const wxString& s1, const char* s2) { return wxStrspn_String(s1, s2); } inline size_t wxStrspn(const wxString& s1, const wchar_t* s2) { return wxStrspn_String(s1, s2); } inline size_t wxStrspn(const wxString& s1, const wxScopedCharBuffer& s2) { return wxStrspn_String(s1, s2); } inline size_t wxStrspn(const wxString& s1, const wxScopedWCharBuffer& s2) { return wxStrspn_String(s1, s2); } inline size_t wxStrspn(const wxString& s1, const wxString& s2) { return wxStrspn_String(s1, s2); } inline size_t wxStrspn(const wxString& s1, const wxCStrData& s2) { return wxStrspn_String(s1, s2); } inline size_t wxStrspn(const wxCStrData& s1, const char* s2) { return wxStrspn_String(s1.AsString(), s2); } inline size_t wxStrspn(const wxCStrData& s1, const wchar_t* s2) { return wxStrspn_String(s1.AsString(), s2); } inline size_t wxStrspn(const wxCStrData& s1, const wxScopedCharBuffer& s2) { return wxStrspn_String(s1.AsString(), s2); } inline size_t wxStrspn(const wxCStrData& s1, const wxScopedWCharBuffer& s2) { return wxStrspn_String(s1.AsString(), s2); } inline size_t wxStrspn(const wxCStrData& s1, const wxString& s2) { return wxStrspn_String(s1.AsString(), s2); } inline size_t wxStrspn(const wxCStrData& s1, const wxCStrData& s2) { return wxStrspn_String(s1.AsString(), s2); } inline size_t wxStrspn(const char * s1, const wxCStrData& s2) { return strspn(s1, s2.AsCharBuf()); } inline size_t wxStrspn(const char * s1, const wxString& s2) { return strspn(s1, s2.mb_str()); } inline size_t wxStrspn(const wchar_t * s1, const wxCStrData& s2) { return wcsspn(s1, s2.AsWCharBuf()); } inline size_t wxStrspn(const wchar_t * s1, const wxString& s2) { return wcsspn(s1, s2.wc_str()); } inline size_t wxStrspn(const wxScopedCharBuffer& s1, const wxCStrData& s2) { return strspn(s1.data(), s2.AsCharBuf()); } inline size_t wxStrspn(const wxScopedCharBuffer& s1, const wxString& s2) { return strspn(s1.data(), s2.mb_str()); } inline size_t wxStrspn(const wxScopedWCharBuffer& s1, const wxCStrData& s2) { return wcsspn(s1.data(), s2.AsWCharBuf()); } inline size_t wxStrspn(const wxScopedWCharBuffer& s1, const wxString& s2) { return wcsspn(s1.data(), s2.wc_str()); }

template<typename T>
inline size_t wxStrcspn_String(const wxString& s1, const T& s2)
{
    size_t pos = s1.find_first_of(s2);
    return pos == wxString::npos ? s1.length() : pos;
}
inline size_t wxStrcspn(const char * s1, const char * s2) { return strcspn(s1, s2); } inline size_t wxStrcspn(const char * s1, const wchar_t * s2) { return wxStrcspn_String(wxString(s1), wxString(s2)); } inline size_t wxStrcspn(const char * s1, const wxScopedCharBuffer& s2) { return strcspn(s1, s2.data()); } inline size_t wxStrcspn(const char * s1, const wxScopedWCharBuffer& s2) { return wxStrcspn_String(wxString(s1), s2.data()); } inline size_t wxStrcspn(const wchar_t * s1, const wchar_t * s2) { return wcscspn(s1, s2); } inline size_t wxStrcspn(const wchar_t * s1, const char * s2) { return wxStrcspn_String(wxString(s1), wxString(s2)); } inline size_t wxStrcspn(const wchar_t * s1, const wxScopedWCharBuffer& s2) { return wcscspn(s1, s2.data()); } inline size_t wxStrcspn(const wchar_t * s1, const wxScopedCharBuffer& s2) { return wxStrcspn_String(wxString(s1), s2.data()); } inline size_t wxStrcspn(const wxScopedCharBuffer& s1, const char * s2) { return strcspn(s1.data(), s2); } inline size_t wxStrcspn(const wxScopedCharBuffer& s1, const wchar_t * s2) { return wxStrcspn_String(wxString(s1), wxString(s2)); } inline size_t wxStrcspn(const wxScopedCharBuffer& s1, const wxScopedCharBuffer& s2) { return strcspn(s1.data(), s2.data()); } inline size_t wxStrcspn(const wxScopedCharBuffer& s1, const wxScopedWCharBuffer& s2) { return wxStrcspn_String(wxString(s1), wxString(s2)); } inline size_t wxStrcspn(const wxScopedWCharBuffer& s1, const wchar_t * s2) { return wcscspn(s1.data(), s2); } inline size_t wxStrcspn(const wxScopedWCharBuffer& s1, const char * s2) { return wxStrcspn_String(wxString(s1), wxString(s2)); } inline size_t wxStrcspn(const wxScopedWCharBuffer& s1, const wxScopedWCharBuffer& s2) { return wcscspn(s1.data(), s2.data()); } inline size_t wxStrcspn(const wxScopedWCharBuffer& s1, const wxScopedCharBuffer& s2) { return wxStrcspn_String(wxString(s1), wxString(s2)); } inline size_t wxStrcspn(const wxString& s1, const char* s2) { return wxStrcspn_String(s1, s2); } inline size_t wxStrcspn(const wxString& s1, const wchar_t* s2) { return wxStrcspn_String(s1, s2); } inline size_t wxStrcspn(const wxString& s1, const wxScopedCharBuffer& s2) { return wxStrcspn_String(s1, s2); } inline size_t wxStrcspn(const wxString& s1, const wxScopedWCharBuffer& s2) { return wxStrcspn_String(s1, s2); } inline size_t wxStrcspn(const wxString& s1, const wxString& s2) { return wxStrcspn_String(s1, s2); } inline size_t wxStrcspn(const wxString& s1, const wxCStrData& s2) { return wxStrcspn_String(s1, s2); } inline size_t wxStrcspn(const wxCStrData& s1, const char* s2) { return wxStrcspn_String(s1.AsString(), s2); } inline size_t wxStrcspn(const wxCStrData& s1, const wchar_t* s2) { return wxStrcspn_String(s1.AsString(), s2); } inline size_t wxStrcspn(const wxCStrData& s1, const wxScopedCharBuffer& s2) { return wxStrcspn_String(s1.AsString(), s2); } inline size_t wxStrcspn(const wxCStrData& s1, const wxScopedWCharBuffer& s2) { return wxStrcspn_String(s1.AsString(), s2); } inline size_t wxStrcspn(const wxCStrData& s1, const wxString& s2) { return wxStrcspn_String(s1.AsString(), s2); } inline size_t wxStrcspn(const wxCStrData& s1, const wxCStrData& s2) { return wxStrcspn_String(s1.AsString(), s2); } inline size_t wxStrcspn(const char * s1, const wxCStrData& s2) { return strcspn(s1, s2.AsCharBuf()); } inline size_t wxStrcspn(const char * s1, const wxString& s2) { return strcspn(s1, s2.mb_str()); } inline size_t wxStrcspn(const wchar_t * s1, const wxCStrData& s2) { return wcscspn(s1, s2.AsWCharBuf()); } inline size_t wxStrcspn(const wchar_t * s1, const wxString& s2) { return wcscspn(s1, s2.wc_str()); } inline size_t wxStrcspn(const wxScopedCharBuffer& s1, const wxCStrData& s2) { return strcspn(s1.data(), s2.AsCharBuf()); } inline size_t wxStrcspn(const wxScopedCharBuffer& s1, const wxString& s2) { return strcspn(s1.data(), s2.mb_str()); } inline size_t wxStrcspn(const wxScopedWCharBuffer& s1, const wxCStrData& s2) { return wcscspn(s1.data(), s2.AsWCharBuf()); } inline size_t wxStrcspn(const wxScopedWCharBuffer& s1, const wxString& s2) { return wcscspn(s1.data(), s2.wc_str()); }






template<typename T>
inline int wxStrncmp_String(const wxString& s1, const T& s2, size_t n)
    { return s1.compare(0, n, s2, 0, n); }
inline int wxStrncmp(const char * s1, const char * s2, size_t n) { return strncmp(s1, s2, n); } inline int wxStrncmp(const char * s1, const wchar_t * s2, size_t n) { return wxStrncmp_String(wxString(s1), wxString(s2), n); } inline int wxStrncmp(const char * s1, const wxScopedCharBuffer& s2, size_t n) { return strncmp(s1, s2.data(), n); } inline int wxStrncmp(const char * s1, const wxScopedWCharBuffer& s2, size_t n) { return wxStrncmp_String(wxString(s1), s2.data(), n); } inline int wxStrncmp(const wchar_t * s1, const wchar_t * s2, size_t n) { return wcsncmp(s1, s2, n); } inline int wxStrncmp(const wchar_t * s1, const char * s2, size_t n) { return wxStrncmp_String(wxString(s1), wxString(s2), n); } inline int wxStrncmp(const wchar_t * s1, const wxScopedWCharBuffer& s2, size_t n) { return wcsncmp(s1, s2.data(), n); } inline int wxStrncmp(const wchar_t * s1, const wxScopedCharBuffer& s2, size_t n) { return wxStrncmp_String(wxString(s1), s2.data(), n); } inline int wxStrncmp(const wxScopedCharBuffer& s1, const char * s2, size_t n) { return strncmp(s1.data(), s2, n); } inline int wxStrncmp(const wxScopedCharBuffer& s1, const wchar_t * s2, size_t n) { return wxStrncmp_String(wxString(s1), wxString(s2), n); } inline int wxStrncmp(const wxScopedCharBuffer& s1, const wxScopedCharBuffer& s2, size_t n) { return strncmp(s1.data(), s2.data(), n); } inline int wxStrncmp(const wxScopedCharBuffer& s1, const wxScopedWCharBuffer& s2, size_t n) { return wxStrncmp_String(wxString(s1), wxString(s2), n); } inline int wxStrncmp(const wxScopedWCharBuffer& s1, const wchar_t * s2, size_t n) { return wcsncmp(s1.data(), s2, n); } inline int wxStrncmp(const wxScopedWCharBuffer& s1, const char * s2, size_t n) { return wxStrncmp_String(wxString(s1), wxString(s2), n); } inline int wxStrncmp(const wxScopedWCharBuffer& s1, const wxScopedWCharBuffer& s2, size_t n) { return wcsncmp(s1.data(), s2.data(), n); } inline int wxStrncmp(const wxScopedWCharBuffer& s1, const wxScopedCharBuffer& s2, size_t n) { return wxStrncmp_String(wxString(s1), wxString(s2), n); } inline int wxStrncmp(const wxString& s1, const char* s2, size_t n) { return wxStrncmp_String(s1, s2, n); } inline int wxStrncmp(const wxString& s1, const wchar_t* s2, size_t n) { return wxStrncmp_String(s1, s2, n); } inline int wxStrncmp(const wxString& s1, const wxScopedCharBuffer& s2, size_t n) { return wxStrncmp_String(s1, s2, n); } inline int wxStrncmp(const wxString& s1, const wxScopedWCharBuffer& s2, size_t n) { return wxStrncmp_String(s1, s2, n); } inline int wxStrncmp(const wxString& s1, const wxString& s2, size_t n) { return wxStrncmp_String(s1, s2, n); } inline int wxStrncmp(const wxString& s1, const wxCStrData& s2, size_t n) { return wxStrncmp_String(s1, s2, n); } inline int wxStrncmp(const wxCStrData& s1, const char* s2, size_t n) { return wxStrncmp_String(s1.AsString(), s2, n); } inline int wxStrncmp(const wxCStrData& s1, const wchar_t* s2, size_t n) { return wxStrncmp_String(s1.AsString(), s2, n); } inline int wxStrncmp(const wxCStrData& s1, const wxScopedCharBuffer& s2, size_t n) { return wxStrncmp_String(s1.AsString(), s2, n); } inline int wxStrncmp(const wxCStrData& s1, const wxScopedWCharBuffer& s2, size_t n) { return wxStrncmp_String(s1.AsString(), s2, n); } inline int wxStrncmp(const wxCStrData& s1, const wxString& s2, size_t n) { return wxStrncmp_String(s1.AsString(), s2, n); } inline int wxStrncmp(const wxCStrData& s1, const wxCStrData& s2, size_t n) { return wxStrncmp_String(s1.AsString(), s2, n); } inline int wxStrncmp(const char * s1, const wxCStrData& s2, size_t n) { return -wxStrncmp_String(s2.AsString(), s1, n); } inline int wxStrncmp(const char * s1, const wxString& s2, size_t n) { return -wxStrncmp_String(s2, s1, n); } inline int wxStrncmp(const wchar_t * s1, const wxCStrData& s2, size_t n) { return -wxStrncmp_String(s2.AsString(), s1, n); } inline int wxStrncmp(const wchar_t * s1, const wxString& s2, size_t n) { return -wxStrncmp_String(s2, s1, n); } inline int wxStrncmp(const wxScopedCharBuffer& s1, const wxCStrData& s2, size_t n) { return -wxStrncmp_String(s2.AsString(), s1.data(), n); } inline int wxStrncmp(const wxScopedCharBuffer& s1, const wxString& s2, size_t n) { return -wxStrncmp_String(s2, s1.data(), n); } inline int wxStrncmp(const wxScopedWCharBuffer& s1, const wxCStrData& s2, size_t n) { return -wxStrncmp_String(s2.AsString(), s1.data(), n); } inline int wxStrncmp(const wxScopedWCharBuffer& s1, const wxString& s2, size_t n) { return -wxStrncmp_String(s2, s1.data(), n); }

template<typename T>
inline int wxStrnicmp_String(const wxString& s1, const T& s2, size_t n)
    { return s1.substr(0, n).CmpNoCase(wxString(s2).substr(0, n)); }
inline int wxStrnicmp(const char * s1, const char * s2, size_t n) { return strncasecmp(s1, s2, n); } inline int wxStrnicmp(const char * s1, const wchar_t * s2, size_t n) { return wxStrnicmp_String(wxString(s1), wxString(s2), n); } inline int wxStrnicmp(const char * s1, const wxScopedCharBuffer& s2, size_t n) { return strncasecmp(s1, s2.data(), n); } inline int wxStrnicmp(const char * s1, const wxScopedWCharBuffer& s2, size_t n) { return wxStrnicmp_String(wxString(s1), s2.data(), n); } inline int wxStrnicmp(const wchar_t * s1, const wchar_t * s2, size_t n) { return wcsncasecmp(s1, s2, n); } inline int wxStrnicmp(const wchar_t * s1, const char * s2, size_t n) { return wxStrnicmp_String(wxString(s1), wxString(s2), n); } inline int wxStrnicmp(const wchar_t * s1, const wxScopedWCharBuffer& s2, size_t n) { return wcsncasecmp(s1, s2.data(), n); } inline int wxStrnicmp(const wchar_t * s1, const wxScopedCharBuffer& s2, size_t n) { return wxStrnicmp_String(wxString(s1), s2.data(), n); } inline int wxStrnicmp(const wxScopedCharBuffer& s1, const char * s2, size_t n) { return strncasecmp(s1.data(), s2, n); } inline int wxStrnicmp(const wxScopedCharBuffer& s1, const wchar_t * s2, size_t n) { return wxStrnicmp_String(wxString(s1), wxString(s2), n); } inline int wxStrnicmp(const wxScopedCharBuffer& s1, const wxScopedCharBuffer& s2, size_t n) { return strncasecmp(s1.data(), s2.data(), n); } inline int wxStrnicmp(const wxScopedCharBuffer& s1, const wxScopedWCharBuffer& s2, size_t n) { return wxStrnicmp_String(wxString(s1), wxString(s2), n); } inline int wxStrnicmp(const wxScopedWCharBuffer& s1, const wchar_t * s2, size_t n) { return wcsncasecmp(s1.data(), s2, n); } inline int wxStrnicmp(const wxScopedWCharBuffer& s1, const char * s2, size_t n) { return wxStrnicmp_String(wxString(s1), wxString(s2), n); } inline int wxStrnicmp(const wxScopedWCharBuffer& s1, const wxScopedWCharBuffer& s2, size_t n) { return wcsncasecmp(s1.data(), s2.data(), n); } inline int wxStrnicmp(const wxScopedWCharBuffer& s1, const wxScopedCharBuffer& s2, size_t n) { return wxStrnicmp_String(wxString(s1), wxString(s2), n); } inline int wxStrnicmp(const wxString& s1, const char* s2, size_t n) { return wxStrnicmp_String(s1, s2, n); } inline int wxStrnicmp(const wxString& s1, const wchar_t* s2, size_t n) { return wxStrnicmp_String(s1, s2, n); } inline int wxStrnicmp(const wxString& s1, const wxScopedCharBuffer& s2, size_t n) { return wxStrnicmp_String(s1, s2, n); } inline int wxStrnicmp(const wxString& s1, const wxScopedWCharBuffer& s2, size_t n) { return wxStrnicmp_String(s1, s2, n); } inline int wxStrnicmp(const wxString& s1, const wxString& s2, size_t n) { return wxStrnicmp_String(s1, s2, n); } inline int wxStrnicmp(const wxString& s1, const wxCStrData& s2, size_t n) { return wxStrnicmp_String(s1, s2, n); } inline int wxStrnicmp(const wxCStrData& s1, const char* s2, size_t n) { return wxStrnicmp_String(s1.AsString(), s2, n); } inline int wxStrnicmp(const wxCStrData& s1, const wchar_t* s2, size_t n) { return wxStrnicmp_String(s1.AsString(), s2, n); } inline int wxStrnicmp(const wxCStrData& s1, const wxScopedCharBuffer& s2, size_t n) { return wxStrnicmp_String(s1.AsString(), s2, n); } inline int wxStrnicmp(const wxCStrData& s1, const wxScopedWCharBuffer& s2, size_t n) { return wxStrnicmp_String(s1.AsString(), s2, n); } inline int wxStrnicmp(const wxCStrData& s1, const wxString& s2, size_t n) { return wxStrnicmp_String(s1.AsString(), s2, n); } inline int wxStrnicmp(const wxCStrData& s1, const wxCStrData& s2, size_t n) { return wxStrnicmp_String(s1.AsString(), s2, n); } inline int wxStrnicmp(const char * s1, const wxCStrData& s2, size_t n) { return -wxStrnicmp_String(s2.AsString(), s1, n); } inline int wxStrnicmp(const char * s1, const wxString& s2, size_t n) { return -wxStrnicmp_String(s2, s1, n); } inline int wxStrnicmp(const wchar_t * s1, const wxCStrData& s2, size_t n) { return -wxStrnicmp_String(s2.AsString(), s1, n); } inline int wxStrnicmp(const wchar_t * s1, const wxString& s2, size_t n) { return -wxStrnicmp_String(s2, s1, n); } inline int wxStrnicmp(const wxScopedCharBuffer& s1, const wxCStrData& s2, size_t n) { return -wxStrnicmp_String(s2.AsString(), s1.data(), n); } inline int wxStrnicmp(const wxScopedCharBuffer& s1, const wxString& s2, size_t n) { return -wxStrnicmp_String(s2, s1.data(), n); } inline int wxStrnicmp(const wxScopedWCharBuffer& s1, const wxCStrData& s2, size_t n) { return -wxStrnicmp_String(s2.AsString(), s1.data(), n); } inline int wxStrnicmp(const wxScopedWCharBuffer& s1, const wxString& s2, size_t n) { return -wxStrnicmp_String(s2, s1.data(), n); }
# 611 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h"
inline size_t wxStrxfrm(char *dest, const char *src, size_t n)
    { return strxfrm(dest, src, n); }
inline size_t wxStrxfrm(wchar_t *dest, const wchar_t *src, size_t n)
    { return wcsxfrm(dest, src, n); }
template<typename T>
inline size_t wxStrxfrm(T *dest, const wxScopedCharTypeBuffer<T>& src, size_t n)
    { return wxStrxfrm(dest, src.data(), n); }

inline size_t wxStrxfrm(char *dest, const wxString& src, size_t n)
    { return strxfrm(dest, src.mb_str(), n); }

inline size_t wxStrxfrm(wchar_t *dest, const wxString& src, size_t n)
    { return wcsxfrm(dest, src.wc_str(), n); }

inline size_t wxStrxfrm(char *dest, const wxCStrData& src, size_t n)
    { return strxfrm(dest, src.AsCharBuf(), n); }

inline size_t wxStrxfrm(wchar_t *dest, const wxCStrData& src, size_t n)
    { return wcsxfrm(dest, src.AsWCharBuf(), n); }



inline char *wxStrtok(char *str, const char *delim, char **saveptr)
    { return strtok_r(str, delim, saveptr); }
inline wchar_t *wxStrtok(wchar_t *str, const wchar_t *delim, wchar_t **saveptr)
    { return wxCRT_StrtokW(str, delim, saveptr); }
template<typename T>
inline T *wxStrtok(T *str, const wxScopedCharTypeBuffer<T>& delim, T **saveptr)
    { return wxStrtok(str, delim.data(), saveptr); }

inline char *wxStrtok(char *str, const wxCStrData& delim, char **saveptr)
    { return strtok_r(str, delim.AsCharBuf(), saveptr); }

inline wchar_t *wxStrtok(wchar_t *str, const wxCStrData& delim, wchar_t **saveptr)
    { return wxCRT_StrtokW(str, delim.AsWCharBuf(), saveptr); }

inline char *wxStrtok(char *str, const wxString& delim, char **saveptr)
    { return strtok_r(str, delim.mb_str(), saveptr); }

inline wchar_t *wxStrtok(wchar_t *str, const wxString& delim, wchar_t **saveptr)
    { return wxCRT_StrtokW(str, delim.wc_str(), saveptr); }

inline const char *wxStrstr(const char *haystack, const char *needle)
    { return strstr(haystack, needle); }
inline const wchar_t *wxStrstr(const wchar_t *haystack, const wchar_t *needle)
    { return wcsstr(haystack, needle); }

inline const char *wxStrstr(const char *haystack, const wxString& needle)
    { return strstr(haystack, needle.mb_str()); }

inline const wchar_t *wxStrstr(const wchar_t *haystack, const wxString& needle)
    { return wcsstr(haystack, needle.wc_str()); }



inline const char *wxStrstr(const wxString& haystack, const wxString& needle)
    { return strstr(haystack.c_str(), needle.mb_str()); }
inline const char *wxStrstr(const wxCStrData& haystack, const wxString& needle)
    { return strstr(haystack, needle.mb_str()); }
inline const char *wxStrstr(const wxCStrData& haystack, const wxCStrData& needle)
    { return strstr(haystack, needle.AsCharBuf()); }



inline const char *wxStrstr(const wxString& haystack, const char *needle)
    { return strstr(haystack.c_str(), needle); }
inline const char *wxStrstr(const wxCStrData& haystack, const char *needle)
    { return strstr(haystack, needle); }

inline const wchar_t *wxStrstr(const wxString& haystack, const wchar_t *needle)
    { return wcsstr(haystack.c_str(), needle); }
inline const wchar_t *wxStrstr(const wxCStrData& haystack, const wchar_t *needle)
    { return wcsstr(haystack, needle); }

inline const char *wxStrchr(const char *s, char c)
    { return strchr(s, c); }
inline const wchar_t *wxStrchr(const wchar_t *s, wchar_t c)
    { return wcschr(s, c); }
inline const char *wxStrrchr(const char *s, char c)
    { return strrchr(s, c); }
inline const wchar_t *wxStrrchr(const wchar_t *s, wchar_t c)
    { return wcsrchr(s, c); }
inline const char *wxStrchr(const char *s, const wxUniChar& uc)
    { char c; return uc.GetAsChar(&c) ? strchr(s, c) : 
# 694 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h" 3 4
                                                             __null
# 694 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h"
                                                                 ; }
inline const wchar_t *wxStrchr(const wchar_t *s, const wxUniChar& c)
    { return wcschr(s, (wchar_t)c); }
inline const char *wxStrrchr(const char *s, const wxUniChar& uc)
    { char c; return uc.GetAsChar(&c) ? strrchr(s, c) : 
# 698 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h" 3 4
                                                              __null
# 698 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h"
                                                                  ; }
inline const wchar_t *wxStrrchr(const wchar_t *s, const wxUniChar& c)
    { return wcsrchr(s, (wchar_t)c); }
inline const char *wxStrchr(const char *s, const wxUniCharRef& uc)
    { char c; return uc.GetAsChar(&c) ? strchr(s, c) : 
# 702 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h" 3 4
                                                             __null
# 702 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h"
                                                                 ; }
inline const wchar_t *wxStrchr(const wchar_t *s, const wxUniCharRef& c)
    { return wcschr(s, (wchar_t)c); }
inline const char *wxStrrchr(const char *s, const wxUniCharRef& uc)
    { char c; return uc.GetAsChar(&c) ? strrchr(s, c) : 
# 706 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h" 3 4
                                                              __null
# 706 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h"
                                                                  ; }
inline const wchar_t *wxStrrchr(const wchar_t *s, const wxUniCharRef& c)
    { return wcsrchr(s, (wchar_t)c); }
template<typename T>
inline const T* wxStrchr(const wxScopedCharTypeBuffer<T>& s, T c)
    { return wxStrchr(s.data(), c); }
template<typename T>
inline const T* wxStrrchr(const wxScopedCharTypeBuffer<T>& s, T c)
    { return wxStrrchr(s.data(), c); }
template<typename T>
inline const T* wxStrchr(const wxScopedCharTypeBuffer<T>& s, const wxUniChar& c)
    { return wxStrchr(s.data(), (T)c); }
template<typename T>
inline const T* wxStrrchr(const wxScopedCharTypeBuffer<T>& s, const wxUniChar& c)
    { return wxStrrchr(s.data(), (T)c); }
template<typename T>
inline const T* wxStrchr(const wxScopedCharTypeBuffer<T>& s, const wxUniCharRef& c)
    { return wxStrchr(s.data(), (T)c); }
template<typename T>
inline const T* wxStrrchr(const wxScopedCharTypeBuffer<T>& s, const wxUniCharRef& c)
    { return wxStrrchr(s.data(), (T)c); }



inline const char* wxStrchr(const wxString& s, char c)
    { return strchr((const char*)s.c_str(), c); }
inline const char* wxStrrchr(const wxString& s, char c)
    { return strrchr((const char*)s.c_str(), c); }
inline const char* wxStrchr(const wxString& s, int c)
    { return strchr((const char*)s.c_str(), c); }
inline const char* wxStrrchr(const wxString& s, int c)
    { return strrchr((const char*)s.c_str(), c); }
inline const char* wxStrchr(const wxString& s, const wxUniChar& uc)
    { char c; return uc.GetAsChar(&c) ? strchr(s.c_str(), c) : 
# 739 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h" 3 4
                                                                     __null
# 739 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h"
                                                                         ; }
inline const char* wxStrrchr(const wxString& s, const wxUniChar& uc)
    { char c; return uc.GetAsChar(&c) ? strrchr(s.c_str(), c) : 
# 741 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h" 3 4
                                                                      __null
# 741 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h"
                                                                          ; }
inline const char* wxStrchr(const wxString& s, const wxUniCharRef& uc)
    { char c; return uc.GetAsChar(&c) ? strchr(s.c_str(), c) : 
# 743 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h" 3 4
                                                                     __null
# 743 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h"
                                                                         ; }
inline const char* wxStrrchr(const wxString& s, const wxUniCharRef& uc)
    { char c; return uc.GetAsChar(&c) ? strrchr(s.c_str(), c) : 
# 745 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h" 3 4
                                                                      __null
# 745 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h"
                                                                          ; }

inline const wchar_t* wxStrchr(const wxString& s, wchar_t c)
    { return wcschr((const wchar_t*)s.c_str(), c); }
inline const wchar_t* wxStrrchr(const wxString& s, wchar_t c)
    { return wcsrchr((const wchar_t*)s.c_str(), c); }

inline const char* wxStrchr(const wxCStrData& s, char c)
    { return strchr(s.AsChar(), c); }
inline const char* wxStrrchr(const wxCStrData& s, char c)
    { return strrchr(s.AsChar(), c); }
inline const char* wxStrchr(const wxCStrData& s, int c)
    { return strchr(s.AsChar(), c); }
inline const char* wxStrrchr(const wxCStrData& s, int c)
    { return strrchr(s.AsChar(), c); }
inline const char* wxStrchr(const wxCStrData& s, const wxUniChar& uc)
    { char c; return uc.GetAsChar(&c) ? strchr(s, c) : 
# 761 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h" 3 4
                                                             __null
# 761 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h"
                                                                 ; }
inline const char* wxStrrchr(const wxCStrData& s, const wxUniChar& uc)
    { char c; return uc.GetAsChar(&c) ? strrchr(s, c) : 
# 763 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h" 3 4
                                                              __null
# 763 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h"
                                                                  ; }
inline const char* wxStrchr(const wxCStrData& s, const wxUniCharRef& uc)
    { char c; return uc.GetAsChar(&c) ? strchr(s, c) : 
# 765 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h" 3 4
                                                             __null
# 765 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h"
                                                                 ; }
inline const char* wxStrrchr(const wxCStrData& s, const wxUniCharRef& uc)
    { char c; return uc.GetAsChar(&c) ? strrchr(s, c) : 
# 767 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h" 3 4
                                                              __null
# 767 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h"
                                                                  ; }

inline const wchar_t* wxStrchr(const wxCStrData& s, wchar_t c)
    { return wcschr(s.AsWChar(), c); }
inline const wchar_t* wxStrrchr(const wxCStrData& s, wchar_t c)
    { return wcsrchr(s.AsWChar(), c); }

inline const char *wxStrpbrk(const char *s, const char *accept)
    { return strpbrk(s, accept); }
inline const wchar_t *wxStrpbrk(const wchar_t *s, const wchar_t *accept)
    { return wcspbrk(s, accept); }

inline const char *wxStrpbrk(const char *s, const wxString& accept)
    { return strpbrk(s, accept.mb_str()); }
inline const char *wxStrpbrk(const char *s, const wxCStrData& accept)
    { return strpbrk(s, accept.AsCharBuf()); }

inline const wchar_t *wxStrpbrk(const wchar_t *s, const wxString& accept)
    { return wcspbrk(s, accept.wc_str()); }
inline const wchar_t *wxStrpbrk(const wchar_t *s, const wxCStrData& accept)
    { return wcspbrk(s, accept.AsWCharBuf()); }

inline const char *wxStrpbrk(const wxString& s, const wxString& accept)
    { return strpbrk(s.c_str(), accept.mb_str()); }
inline const char *wxStrpbrk(const wxString& s, const char *accept)
    { return strpbrk(s.c_str(), accept); }

inline const wchar_t *wxStrpbrk(const wxString& s, const wchar_t *accept)
    { return wcspbrk(s.wc_str(), accept); }

inline const char *wxStrpbrk(const wxString& s, const wxCStrData& accept)
    { return strpbrk(s.c_str(), accept.AsCharBuf()); }
inline const char *wxStrpbrk(const wxCStrData& s, const wxString& accept)
    { return strpbrk(s.AsChar(), accept.mb_str()); }
inline const char *wxStrpbrk(const wxCStrData& s, const char *accept)
    { return strpbrk(s.AsChar(), accept); }

inline const wchar_t *wxStrpbrk(const wxCStrData& s, const wchar_t *accept)
    { return wcspbrk(s.AsWChar(), accept); }

inline const char *wxStrpbrk(const wxCStrData& s, const wxCStrData& accept)
    { return strpbrk(s.AsChar(), accept.AsCharBuf()); }

template <typename S, typename T>
inline const T *wxStrpbrk(const S& s, const wxScopedCharTypeBuffer<T>& accept)
    { return wxStrpbrk(s, accept.data()); }



template <typename T>
inline char *wxStrstr(char *haystack, T needle)
    { return const_cast<char*>(wxStrstr(const_cast<const char*>(haystack), needle)); }
template <typename T>
inline wchar_t *wxStrstr(wchar_t *haystack, T needle)
    { return const_cast<wchar_t*>(wxStrstr(const_cast<const wchar_t*>(haystack), needle)); }

template <typename T>
inline char * wxStrchr(char *s, T c)
    { return const_cast<char*>(wxStrchr(const_cast<const char*>(s), c)); }
template <typename T>
inline wchar_t * wxStrchr(wchar_t *s, T c)
    { return const_cast<wchar_t*>(wxStrchr(const_cast<const wchar_t*>(s), c)); }
template <typename T>
inline char * wxStrrchr(char *s, T c)
    { return const_cast<char*>(wxStrrchr(const_cast<const char*>(s), c)); }
template <typename T>
inline wchar_t * wxStrrchr(wchar_t *s, T c)
    { return const_cast<wchar_t*>(wxStrrchr(const_cast<const wchar_t*>(s), c)); }

template <typename T>
inline char * wxStrpbrk(char *s, T accept)
    { return const_cast<char*>(wxStrpbrk(const_cast<const char*>(s), accept)); }
template <typename T>
inline wchar_t * wxStrpbrk(wchar_t *s, T accept)
    { return const_cast<wchar_t*>(wxStrpbrk(const_cast<const wchar_t*>(s), accept)); }
# 850 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h"
inline FILE *wxFopen(const wxString& path, const wxString& mode)
    { return fopen(path.fn_str(), mode.fn_str()); }
inline FILE *wxFreopen(const wxString& path, const wxString& mode, FILE *stream)
    { return freopen(path.fn_str(), mode.fn_str(), stream); }
inline int wxRemove(const wxString& path)
    { return remove(path.fn_str()); }
inline int wxRename(const wxString& oldpath, const wxString& newpath)
    { return rename(oldpath.fn_str(), newpath.fn_str()); }

extern __attribute__ ((visibility("default"))) int wxPuts(const wxString& s);
extern __attribute__ ((visibility("default"))) int wxFputs(const wxString& s, FILE *stream);
extern __attribute__ ((visibility("default"))) void wxPerror(const wxString& s);

extern __attribute__ ((visibility("default"))) int wxFputc(const wxUniChar& c, FILE *stream);







inline char *wxFgets(char *s, int size, FILE *stream)
    { return fgets(s, size, stream); }

extern __attribute__ ((visibility("default"))) wchar_t *wxFgets(wchar_t *s, int size, FILE *stream);





inline int wxFgetc(FILE *stream) { return fgetc(stream); }
inline int wxUngetc(int c, FILE *stream) { return ungetc(c, stream); }
# 899 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h"
inline int wxAtoi(const wxString& str) { return atoi(str.mb_str(wxGet_wxConvLibc())); }



inline long wxAtol(const wxString& str) { return wcstol(str.wc_str(), 
# 903 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h" 3 4
                                                __null
# 903 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h"
                                                , 10); }





inline double wxAtof(const wxString& str) { return wcstod(str.wc_str(), 
# 909 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h" 3 4
                                                  __null
# 909 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h"
                                                  ); }




inline double wxStrtod(const char *nptr, char **endptr)
    { return strtod(nptr, endptr); }
inline double wxStrtod(const wchar_t *nptr, wchar_t **endptr)
    { return wcstod(nptr, endptr); }
template<typename T>
inline double wxStrtod(const wxScopedCharTypeBuffer<T>& nptr, T **endptr)
    { return wxStrtod(nptr.data(), endptr); }
# 930 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h"
template<typename T> struct wxStrtoxCharType {};
template<> struct wxStrtoxCharType<char**>
{
    typedef const char* Type;
    static char** AsPointer(char **p) { return p; }
};
template<> struct wxStrtoxCharType<wchar_t**>
{
    typedef const wchar_t* Type;
    static wchar_t** AsPointer(wchar_t **p) { return p; }
};
template<> struct wxStrtoxCharType<int>
{
    typedef const char* Type;
    static char** AsPointer(int p)
    {
        do { if ( p == 0 ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/wxcrt.h", 946, __FUNCTION__, "p == 0", "passing non-NULL int is invalid"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );
        return 
# 947 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h" 3 4
              __null
# 947 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h"
                  ;
    }
};

template<typename T>
inline double wxStrtod(const wxString& nptr, T endptr)
{
    if (!endptr)
    {



        wxStringCharType** p = 
# 959 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h" 3 4
                              __null
# 959 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h"
                                  ;
        return wxStrtod(nptr.wx_str(), p);
    }



    typedef typename wxStrtoxCharType<T>::Type CharType;
    return wxStrtod((CharType)nptr.c_str(),
                    wxStrtoxCharType<T>::AsPointer(endptr));
}
template<typename T>
inline double wxStrtod(const wxCStrData& nptr, T endptr)
    { return wxStrtod(nptr.AsString(), endptr); }



inline double wxStrtod(const wxString& nptr, std::nullptr_t)
    { return wxStrtod(nptr.wx_str(), static_cast<wxStringCharType**>(
# 976 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h" 3 4
                                                                    __null
# 976 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h"
                                                                        )); }
inline double wxStrtod(const wxCStrData& nptr, std::nullptr_t)
    { return wxStrtod(nptr.AsString(), static_cast<wxStringCharType**>(
# 978 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h" 3 4
                                                                      __null
# 978 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h"
                                                                          )); }
# 1020 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h"
inline long wxStrtol(const char *nptr, char **endptr, int base) { return strtol(nptr, endptr, base); } inline long wxStrtol(const wchar_t *nptr, wchar_t **endptr, int base) { return wcstol(nptr, endptr, base); } template<typename T> inline long wxStrtol(const wxScopedCharTypeBuffer<T>& nptr, T **endptr, int) { return wxStrtol(nptr.data(), endptr); } template<typename T> inline long wxStrtol(const wxString& nptr, T endptr, int base) { if (!endptr) { wxStringCharType** p = 
# 1020 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h" 3 4
__null
# 1020 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h"
; return wxStrtol(nptr.wx_str(), p, base); } typedef typename wxStrtoxCharType<T>::Type CharType; return wxStrtol((CharType)nptr.c_str(), wxStrtoxCharType<T>::AsPointer(endptr), base); } template<typename T> inline long wxStrtol(const wxCStrData& nptr, T endptr, int base) { return wxStrtol(nptr.AsString(), endptr, base); } inline long wxStrtol(const wxString& nptr, std::nullptr_t, int base) { return wxStrtol(nptr.wx_str(), static_cast<wxStringCharType**>(
# 1020 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h" 3 4
__null
# 1020 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h"
), base); } inline long wxStrtol(const wxCStrData& nptr, std::nullptr_t, int base) { return wxStrtol(nptr.AsString(), static_cast<wxStringCharType**>(
# 1020 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h" 3 4
__null
# 1020 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h"
), base); }
inline unsigned long wxStrtoul(const char *nptr, char **endptr, int base) { return strtoul(nptr, endptr, base); } inline unsigned long wxStrtoul(const wchar_t *nptr, wchar_t **endptr, int base) { return wcstoul(nptr, endptr, base); } template<typename T> inline unsigned long wxStrtoul(const wxScopedCharTypeBuffer<T>& nptr, T **endptr, int) { return wxStrtoul(nptr.data(), endptr); } template<typename T> inline unsigned long wxStrtoul(const wxString& nptr, T endptr, int base) { if (!endptr) { wxStringCharType** p = 
# 1021 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h" 3 4
__null
# 1021 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h"
; return wxStrtoul(nptr.wx_str(), p, base); } typedef typename wxStrtoxCharType<T>::Type CharType; return wxStrtoul((CharType)nptr.c_str(), wxStrtoxCharType<T>::AsPointer(endptr), base); } template<typename T> inline unsigned long wxStrtoul(const wxCStrData& nptr, T endptr, int base) { return wxStrtoul(nptr.AsString(), endptr, base); } inline unsigned long wxStrtoul(const wxString& nptr, std::nullptr_t, int base) { return wxStrtoul(nptr.wx_str(), static_cast<wxStringCharType**>(
# 1021 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h" 3 4
__null
# 1021 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h"
), base); } inline unsigned long wxStrtoul(const wxCStrData& nptr, std::nullptr_t, int base) { return wxStrtoul(nptr.AsString(), static_cast<wxStringCharType**>(
# 1021 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h" 3 4
__null
# 1021 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h"
), base); }

inline long long wxStrtoll(const char *nptr, char **endptr, int base) { return strtoll(nptr, endptr, base); } inline long long wxStrtoll(const wchar_t *nptr, wchar_t **endptr, int base) { return wcstoll(nptr, endptr, base); } template<typename T> inline long long wxStrtoll(const wxScopedCharTypeBuffer<T>& nptr, T **endptr, int) { return wxStrtoll(nptr.data(), endptr); } template<typename T> inline long long wxStrtoll(const wxString& nptr, T endptr, int base) { if (!endptr) { wxStringCharType** p = 
# 1023 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h" 3 4
__null
# 1023 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h"
; return wxStrtoll(nptr.wx_str(), p, base); } typedef typename wxStrtoxCharType<T>::Type CharType; return wxStrtoll((CharType)nptr.c_str(), wxStrtoxCharType<T>::AsPointer(endptr), base); } template<typename T> inline long long wxStrtoll(const wxCStrData& nptr, T endptr, int base) { return wxStrtoll(nptr.AsString(), endptr, base); } inline long long wxStrtoll(const wxString& nptr, std::nullptr_t, int base) { return wxStrtoll(nptr.wx_str(), static_cast<wxStringCharType**>(
# 1023 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h" 3 4
__null
# 1023 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h"
), base); } inline long long wxStrtoll(const wxCStrData& nptr, std::nullptr_t, int base) { return wxStrtoll(nptr.AsString(), static_cast<wxStringCharType**>(
# 1023 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h" 3 4
__null
# 1023 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h"
), base); }
inline unsigned long long wxStrtoull(const char *nptr, char **endptr, int base) { return strtoull(nptr, endptr, base); } inline unsigned long long wxStrtoull(const wchar_t *nptr, wchar_t **endptr, int base) { return wcstoull(nptr, endptr, base); } template<typename T> inline unsigned long long wxStrtoull(const wxScopedCharTypeBuffer<T>& nptr, T **endptr, int) { return wxStrtoull(nptr.data(), endptr); } template<typename T> inline unsigned long long wxStrtoull(const wxString& nptr, T endptr, int base) { if (!endptr) { wxStringCharType** p = 
# 1024 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h" 3 4
__null
# 1024 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h"
; return wxStrtoull(nptr.wx_str(), p, base); } typedef typename wxStrtoxCharType<T>::Type CharType; return wxStrtoull((CharType)nptr.c_str(), wxStrtoxCharType<T>::AsPointer(endptr), base); } template<typename T> inline unsigned long long wxStrtoull(const wxCStrData& nptr, T endptr, int base) { return wxStrtoull(nptr.AsString(), endptr, base); } inline unsigned long long wxStrtoull(const wxString& nptr, std::nullptr_t, int base) { return wxStrtoull(nptr.wx_str(), static_cast<wxStringCharType**>(
# 1024 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h" 3 4
__null
# 1024 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h"
), base); } inline unsigned long long wxStrtoull(const wxCStrData& nptr, std::nullptr_t, int base) { return wxStrtoull(nptr.AsString(), static_cast<wxStringCharType**>(
# 1024 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h" 3 4
__null
# 1024 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h"
), base); }
# 1037 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h"
inline int wxSystem(const wxString& str) { return system(str.mb_str()); }



inline char* wxGetenv(const char *name) { return getenv(name); }
inline wchar_t* wxGetenv(const wchar_t *name) { return wxCRT_GetenvW(name); }

inline char* wxGetenv(const wxString& name) { return getenv(name.mb_str()); }
inline char* wxGetenv(const wxCStrData& name) { return getenv(name.AsCharBuf()); }

inline char* wxGetenv(const wxScopedCharBuffer& name) { return getenv(name.data()); }
inline wchar_t* wxGetenv(const wxScopedWCharBuffer& name) { return wxCRT_GetenvW(name.data()); }






inline size_t wxStrftime(char *s, size_t max,
                         const wxString& format, const struct tm *tm)
    {
       
# 1058 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h"
#pragma GCC diagnostic push
# 1058 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h"
       
# 1058 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h"
#pragma GCC diagnostic ignored "-Wformat-nonliteral"
# 1058 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h"
       

        return strftime(s, max, format.mb_str(), tm);

       
# 1062 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h"
#pragma GCC diagnostic pop
# 1062 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h"
       
    }


inline size_t wxStrftime(wchar_t *s, size_t max,
                         const wxString& format, const struct tm *tm)
    { return wcsftime(s, max, format.wc_str(), tm); }
# 1088 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h"
inline bool wxIsalnum(const wxUniChar& c) { return iswalnum(c) != 0; }
inline bool wxIsalpha(const wxUniChar& c) { return iswalpha(c) != 0; }
inline bool wxIscntrl(const wxUniChar& c) { return iswcntrl(c) != 0; }
inline bool wxIsdigit(const wxUniChar& c) { return iswdigit(c) != 0; }
inline bool wxIsgraph(const wxUniChar& c) { return iswgraph(c) != 0; }
inline bool wxIslower(const wxUniChar& c) { return iswlower(c) != 0; }
inline bool wxIsprint(const wxUniChar& c) { return iswprint(c) != 0; }
inline bool wxIspunct(const wxUniChar& c) { return iswpunct(c) != 0; }
inline bool wxIsspace(const wxUniChar& c) { return iswspace(c) != 0; }
inline bool wxIsupper(const wxUniChar& c) { return iswupper(c) != 0; }
inline bool wxIsxdigit(const wxUniChar& c) { return iswxdigit(c) != 0; }

inline wxUniChar wxTolower(const wxUniChar& c) { return towlower(c); }
inline wxUniChar wxToupper(const wxUniChar& c) { return towupper(c); }
# 1112 "/usr/include/wx-3.1-unofficial/wx/wxcrt.h"
inline bool wxIsascii(const wxUniChar& c) { return c.IsAscii(); }
# 16 "/usr/include/wx-3.1-unofficial/wx/hashmap.h" 2
# 65 "/usr/include/wx-3.1-unofficial/wx/hashmap.h"
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 66 "/usr/include/wx-3.1-unofficial/wx/hashmap.h" 2


struct __attribute__ ((visibility("default"))) _wxHashTable_NodeBase
{
    _wxHashTable_NodeBase() : m_next(
# 70 "/usr/include/wx-3.1-unofficial/wx/hashmap.h" 3 4
                                    __null
# 70 "/usr/include/wx-3.1-unofficial/wx/hashmap.h"
                                        ) {}

    _wxHashTable_NodeBase* m_next;




};


class __attribute__ ((visibility("default"))) _wxHashTableBase2
{
public:
    typedef void (*NodeDtor)(_wxHashTable_NodeBase*);
    typedef size_t (*BucketFromNode)(_wxHashTableBase2*,_wxHashTable_NodeBase*);
    typedef _wxHashTable_NodeBase* (*ProcessNode)(_wxHashTable_NodeBase*);
protected:
    static _wxHashTable_NodeBase* DummyProcessNode(_wxHashTable_NodeBase* node);
    static void DeleteNodes( size_t buckets, _wxHashTable_NodeBase** table,
                             NodeDtor dtor );
    static _wxHashTable_NodeBase* GetFirstNode( size_t buckets,
                                                _wxHashTable_NodeBase** table )
    {
        for( size_t i = 0; i < buckets; ++i )
            if( table[i] )
                return table[i];
        return 
# 96 "/usr/include/wx-3.1-unofficial/wx/hashmap.h" 3 4
              __null
# 96 "/usr/include/wx-3.1-unofficial/wx/hashmap.h"
                  ;
    }


    enum { prime_count = 31 };
    static const unsigned long ms_primes[prime_count];


    static unsigned long GetNextPrime( unsigned long n );



    static unsigned long GetPreviousPrime( unsigned long n );

    static void CopyHashTable( _wxHashTable_NodeBase** srcTable,
                               size_t srcBuckets, _wxHashTableBase2* dst,
                               _wxHashTable_NodeBase** dstTable,
                               BucketFromNode func, ProcessNode proc );

    static void** AllocTable( size_t sz )
    {
        return (void **)calloc(sz, sizeof(void*));
    }
    static void FreeTable(void *table)
    {
        free(table);
    }
};
# 456 "/usr/include/wx-3.1-unofficial/wx/hashmap.h"
inline bool never_grow( size_t, size_t ) { return false; }
inline bool never_shrink( size_t, size_t ) { return false; }
inline bool grow_lf70( size_t buckets, size_t items )
{
    return float(items)/float(buckets) >= 0.85f;
}
# 515 "/usr/include/wx-3.1-unofficial/wx/hashmap.h"
struct __attribute__ ((visibility("default"))) wxIntegerHash
{
    wxIntegerHash() { }
    unsigned long operator()( long x ) const noexcept { return (unsigned long)x; }
    unsigned long operator()( unsigned long x ) const noexcept { return x; }
    unsigned long operator()( int x ) const noexcept { return (unsigned long)x; }
    unsigned long operator()( unsigned int x ) const noexcept { return x; }
    unsigned long operator()( short x ) const noexcept { return (unsigned long)x; }
    unsigned long operator()( unsigned short x ) const noexcept { return x; }

    unsigned long long operator()( long long x ) const noexcept { return static_cast<unsigned long long>(x); }
    unsigned long long operator()( unsigned long long x ) const noexcept { return x; }

};



struct __attribute__ ((visibility("default"))) wxIntegerEqual
{
    wxIntegerEqual() { }
    bool operator()( long a, long b ) const { return a == b; }
    bool operator()( unsigned long a, unsigned long b ) const { return a == b; }
    bool operator()( int a, int b ) const { return a == b; }
    bool operator()( unsigned int a, unsigned int b ) const { return a == b; }
    bool operator()( short a, short b ) const { return a == b; }
    bool operator()( unsigned short a, unsigned short b ) const { return a == b; }

    bool operator()( long long a, long long b ) const { return a == b; }
    bool operator()( unsigned long long a, unsigned long long b ) const { return a == b; }

};


struct __attribute__ ((visibility("default"))) wxPointerHash
{
    wxPointerHash() { }


    wxUIntPtr operator()( const void* k ) const noexcept { return wxPtrToUInt(k); }



};

struct __attribute__ ((visibility("default"))) wxPointerEqual
{
    wxPointerEqual() { }
    bool operator()( const void* a, const void* b ) const noexcept { return a == b; }
};


struct __attribute__ ((visibility("default"))) wxStringHash
{
    wxStringHash() {}
    unsigned long operator()( const wxString& x ) const noexcept
        { return stringHash( x.wx_str() ); }
    unsigned long operator()( const wchar_t* x ) const noexcept
        { return stringHash( x ); }
    unsigned long operator()( const char* x ) const noexcept
        { return stringHash( x ); }
# 585 "/usr/include/wx-3.1-unofficial/wx/hashmap.h"
    static unsigned long stringHash( const wchar_t* );
    static unsigned long stringHash( const char* );
};

struct __attribute__ ((visibility("default"))) wxStringEqual
{
    wxStringEqual() {}
    bool operator()( const wxString& a, const wxString& b ) const noexcept
        { return a == b; }
    bool operator()( const wxChar* a, const wxChar* b ) const noexcept
        { return wxStrcmp( a, b ) == 0; }

    bool operator()( const char* a, const char* b ) const noexcept
        { return strcmp( a, b ) == 0; }

};
# 722 "/usr/include/wx-3.1-unofficial/wx/hashmap.h"
class wxLongToLongHashMap_wxImplementation_Pair { public: typedef long first_type; typedef long second_type; typedef long t1; typedef long t2; typedef const long const_t1; typedef const long const_t2; wxLongToLongHashMap_wxImplementation_Pair(const const_t1& f, const const_t2& s) : first(const_cast<t1&>(f)), second(const_cast<t2&>(s)) {} t1 first; t2 second; }; class wxLongToLongHashMap_wxImplementation_KeyEx { typedef long key_type; typedef wxLongToLongHashMap_wxImplementation_Pair pair_type; typedef const key_type const_key_type; typedef const pair_type const_pair_type; typedef const_key_type& const_key_reference; typedef const_pair_type& const_pair_reference; public: wxLongToLongHashMap_wxImplementation_KeyEx() { } const_key_reference operator()( const_pair_reference pair ) const { return pair.first; }}; class wxLongToLongHashMap_wxImplementation_HashTable : protected _wxHashTableBase2 { public: typedef long key_type; typedef wxLongToLongHashMap_wxImplementation_Pair value_type; typedef wxIntegerHash hasher; typedef wxIntegerEqual key_equal; typedef size_t size_type; typedef ptrdiff_t difference_type; typedef value_type* pointer; typedef const value_type* const_pointer; typedef value_type& reference; typedef const value_type& const_reference; typedef const long const_key_type; typedef const wxLongToLongHashMap_wxImplementation_Pair const_mapped_type; public: typedef wxLongToLongHashMap_wxImplementation_KeyEx key_extractor; typedef wxLongToLongHashMap_wxImplementation_HashTable Self; protected: _wxHashTable_NodeBase** m_table; size_t m_tableBuckets; size_t m_items; hasher m_hasher; key_equal m_equals; key_extractor m_getKey; public: struct Node:public _wxHashTable_NodeBase { public: Node( const value_type& value ) : m_value( value ) {} Node* next() { return static_cast<Node*>(m_next); } value_type m_value; }; protected: static void DeleteNode( _wxHashTable_NodeBase* node ) { delete static_cast<Node*>(node); } public: class Iterator { public: Node* m_node; Self* m_ht; Iterator() : m_node(
# 722 "/usr/include/wx-3.1-unofficial/wx/hashmap.h" 3 4
__null
# 722 "/usr/include/wx-3.1-unofficial/wx/hashmap.h"
), m_ht(
# 722 "/usr/include/wx-3.1-unofficial/wx/hashmap.h" 3 4
__null
# 722 "/usr/include/wx-3.1-unofficial/wx/hashmap.h"
) {} Iterator( Node* node, const Self* ht ) : m_node(node), m_ht(const_cast<Self*>(ht)) {} bool operator ==( const Iterator& it ) const { return m_node == it.m_node; } bool operator !=( const Iterator& it ) const { return m_node != it.m_node; } protected: Node* GetNextNode() { size_type bucket = GetBucketForNode(m_ht,m_node); for( size_type i = bucket + 1; i < m_ht->m_tableBuckets; ++i ) { if( m_ht->m_table[i] ) return static_cast<Node*>(m_ht->m_table[i]); } return 
# 722 "/usr/include/wx-3.1-unofficial/wx/hashmap.h" 3 4
__null
# 722 "/usr/include/wx-3.1-unofficial/wx/hashmap.h"
; } void PlusPlus() { Node* next = m_node->next(); m_node = next ? next : GetNextNode(); } }; friend class Iterator; public: class iterator : public Iterator { public: iterator() : Iterator() {} iterator( Node* node, Self* ht ) : Iterator( node, ht ) {} iterator& operator++() { PlusPlus(); return *this; } iterator operator++(int) { iterator it=*this;PlusPlus();return it; } reference operator *() const { return m_node->m_value; } pointer operator ->() const { return &(m_node->m_value); } }; class const_iterator : public Iterator { public: const_iterator() : Iterator() {} const_iterator(iterator i) : Iterator(i) {} const_iterator( Node* node, const Self* ht ) : Iterator(node, const_cast<Self*>(ht)) {} const_iterator& operator++() { PlusPlus();return *this; } const_iterator operator++(int) { const_iterator it=*this;PlusPlus();return it; } const_reference operator *() const { return m_node->m_value; } const_pointer operator ->() const { return &(m_node->m_value); } }; wxLongToLongHashMap_wxImplementation_HashTable( size_type sz = 10, const hasher& hfun = hasher(), const key_equal& k_eq = key_equal(), const key_extractor& k_ex = key_extractor() ) : m_tableBuckets( GetNextPrime( (unsigned long) sz ) ), m_items( 0 ), m_hasher( hfun ), m_equals( k_eq ), m_getKey( k_ex ) { m_table = (_wxHashTable_NodeBase**)AllocTable(m_tableBuckets); } wxLongToLongHashMap_wxImplementation_HashTable( const Self& ht ) : m_table(
# 722 "/usr/include/wx-3.1-unofficial/wx/hashmap.h" 3 4
__null
# 722 "/usr/include/wx-3.1-unofficial/wx/hashmap.h"
), m_tableBuckets( 0 ), m_items( ht.m_items ), m_hasher( ht.m_hasher ), m_equals( ht.m_equals ), m_getKey( ht.m_getKey ) { HashCopy( ht ); } const Self& operator=( const Self& ht ) { if (&ht != this) { clear(); m_hasher = ht.m_hasher; m_equals = ht.m_equals; m_getKey = ht.m_getKey; m_items = ht.m_items; HashCopy( ht ); } return *this; } ~wxLongToLongHashMap_wxImplementation_HashTable() { clear(); FreeTable(m_table); } hasher hash_funct() { return m_hasher; } key_equal key_eq() { return m_equals; } void clear() { DeleteNodes(m_tableBuckets, m_table, DeleteNode); m_items = 0; } size_type size() const { return m_items; } size_type max_size() const { return size_type(-1); } bool empty() const { return size() == 0; } const_iterator end() const { return const_iterator(
# 722 "/usr/include/wx-3.1-unofficial/wx/hashmap.h" 3 4
__null
# 722 "/usr/include/wx-3.1-unofficial/wx/hashmap.h"
, this); } iterator end() { return iterator(
# 722 "/usr/include/wx-3.1-unofficial/wx/hashmap.h" 3 4
__null
# 722 "/usr/include/wx-3.1-unofficial/wx/hashmap.h"
, this); } const_iterator begin() const { return const_iterator(static_cast<Node*>(GetFirstNode(m_tableBuckets, m_table)), this); } iterator begin() { return iterator(static_cast<Node*>(GetFirstNode(m_tableBuckets, m_table)), this); } size_type erase( const const_key_type& key ) { _wxHashTable_NodeBase** node = GetNodePtr(key); if( !node ) return 0; --m_items; _wxHashTable_NodeBase* temp = (*node)->m_next; delete static_cast<Node*>(*node); (*node) = temp; if( never_shrink( m_tableBuckets, m_items ) ) ResizeTable( GetPreviousPrime( (unsigned long) m_tableBuckets ) - 1 ); return 1; } protected: static size_type GetBucketForNode( Self* ht, Node* node ) { return ht->m_hasher( ht->m_getKey( node->m_value ) ) % ht->m_tableBuckets; } static Node* CopyNode( Node* node ) { return new Node( *node ); } Node* GetOrCreateNode( const value_type& value, bool& created ) { const const_key_type& key = m_getKey( value ); size_t bucket = m_hasher( key ) % m_tableBuckets; Node* node = static_cast<Node*>(m_table[bucket]); while( node ) { if( m_equals( m_getKey( node->m_value ), key ) ) { created = false; return node; } node = node->next(); } created = true; return CreateNode( value, bucket); } Node * CreateNode( const value_type& value, size_t bucket ) { Node* node = new Node( value ); node->m_next = m_table[bucket]; m_table[bucket] = node; ++m_items; if( grow_lf70( m_tableBuckets, m_items ) ) ResizeTable( m_tableBuckets ); return node; } void CreateNode( const value_type& value ) { CreateNode(value, m_hasher( m_getKey(value) ) % m_tableBuckets ); } _wxHashTable_NodeBase** GetNodePtr(const const_key_type& key) const { size_t bucket = m_hasher( key ) % m_tableBuckets; _wxHashTable_NodeBase** node = &m_table[bucket]; while( *node ) { if (m_equals(m_getKey(static_cast<Node*>(*node)->m_value), key)) return node; node = &(*node)->m_next; } return 
# 722 "/usr/include/wx-3.1-unofficial/wx/hashmap.h" 3 4
__null
# 722 "/usr/include/wx-3.1-unofficial/wx/hashmap.h"
; } Node* GetNode( const const_key_type& key ) const { size_t bucket = m_hasher( key ) % m_tableBuckets; Node* node = static_cast<Node*>(m_table[bucket]); while( node ) { if( m_equals( m_getKey( node->m_value ), key ) ) return node; node = node->next(); } return 
# 722 "/usr/include/wx-3.1-unofficial/wx/hashmap.h" 3 4
__null
# 722 "/usr/include/wx-3.1-unofficial/wx/hashmap.h"
; } void ResizeTable( size_t newSize ) { newSize = GetNextPrime( (unsigned long)newSize ); _wxHashTable_NodeBase** srcTable = m_table; size_t srcBuckets = m_tableBuckets; m_table = (_wxHashTable_NodeBase**)AllocTable( newSize ); m_tableBuckets = newSize; CopyHashTable( srcTable, srcBuckets, this, m_table, (BucketFromNode)GetBucketForNode, (ProcessNode)&DummyProcessNode ); FreeTable(srcTable); } void HashCopy( const Self& ht ) { ResizeTable( ht.size() ); CopyHashTable( ht.m_table, ht.m_tableBuckets, (_wxHashTableBase2*)this, m_table, (BucketFromNode)GetBucketForNode, (ProcessNode)CopyNode ); } }; class wxLongToLongHashMap:public wxLongToLongHashMap_wxImplementation_HashTable { public: typedef long mapped_type; class Insert_Result { public: typedef iterator first_type; typedef bool second_type; typedef iterator t1; typedef bool t2; typedef const iterator const_t1; typedef const bool const_t2; Insert_Result(const const_t1& f, const const_t2& s) : first(const_cast<t1&>(f)), second(const_cast<t2&>(s)) {} t1 first; t2 second; }; explicit wxLongToLongHashMap( size_type hint = 100, hasher hf = hasher(), key_equal eq = key_equal() ) : wxLongToLongHashMap_wxImplementation_HashTable( hint, hf, eq, wxLongToLongHashMap_wxImplementation_KeyEx() ) {} mapped_type& operator[]( const const_key_type& key ) { bool created; return GetOrCreateNode( wxLongToLongHashMap_wxImplementation_Pair( key, mapped_type() ), created)->m_value.second; } const_iterator find( const const_key_type& key ) const { return const_iterator( GetNode( key ), this ); } iterator find( const const_key_type& key ) { return iterator( GetNode( key ), this ); } Insert_Result insert( const value_type& v ) { bool created; Node *node = GetOrCreateNode( wxLongToLongHashMap_wxImplementation_Pair( v.first, v.second ), created); return Insert_Result(iterator(node, this), created); } size_type erase( const key_type& k ) { return wxLongToLongHashMap_wxImplementation_HashTable::erase( k ); } void erase( const iterator& it ) { erase( (*it).first ); } size_type count( const const_key_type& key ) { return GetNode( key ) ? 1u : 0u; } }
                                                                            ;

class wxStringToStringHashMap_wxImplementation_Pair { public: typedef wxString first_type; typedef wxString second_type; typedef wxString t1; typedef wxString t2; typedef const wxString const_t1; typedef const wxString const_t2; wxStringToStringHashMap_wxImplementation_Pair(const const_t1& f, const const_t2& s) : first(const_cast<t1&>(f)), second(const_cast<t2&>(s)) {} t1 first; t2 second; }; class wxStringToStringHashMap_wxImplementation_KeyEx { typedef wxString key_type; typedef wxStringToStringHashMap_wxImplementation_Pair pair_type; typedef const key_type const_key_type; typedef const pair_type const_pair_type; typedef const_key_type& const_key_reference; typedef const_pair_type& const_pair_reference; public: wxStringToStringHashMap_wxImplementation_KeyEx() { } const_key_reference operator()( const_pair_reference pair ) const { return pair.first; }}; class wxStringToStringHashMap_wxImplementation_HashTable : protected _wxHashTableBase2 { public: typedef wxString key_type; typedef wxStringToStringHashMap_wxImplementation_Pair value_type; typedef wxStringHash hasher; typedef wxStringEqual key_equal; typedef size_t size_type; typedef ptrdiff_t difference_type; typedef value_type* pointer; typedef const value_type* const_pointer; typedef value_type& reference; typedef const value_type& const_reference; typedef const wxString const_key_type; typedef const wxStringToStringHashMap_wxImplementation_Pair const_mapped_type; public: typedef wxStringToStringHashMap_wxImplementation_KeyEx key_extractor; typedef wxStringToStringHashMap_wxImplementation_HashTable Self; protected: _wxHashTable_NodeBase** m_table; size_t m_tableBuckets; size_t m_items; hasher m_hasher; key_equal m_equals; key_extractor m_getKey; public: struct Node:public _wxHashTable_NodeBase { public: Node( const value_type& value ) : m_value( value ) {} Node* next() { return static_cast<Node*>(m_next); } value_type m_value; }; protected: static void DeleteNode( _wxHashTable_NodeBase* node ) { delete static_cast<Node*>(node); } public: class Iterator { public: Node* m_node; Self* m_ht; Iterator() : m_node(
# 725 "/usr/include/wx-3.1-unofficial/wx/hashmap.h" 3 4
__null
# 725 "/usr/include/wx-3.1-unofficial/wx/hashmap.h"
), m_ht(
# 725 "/usr/include/wx-3.1-unofficial/wx/hashmap.h" 3 4
__null
# 725 "/usr/include/wx-3.1-unofficial/wx/hashmap.h"
) {} Iterator( Node* node, const Self* ht ) : m_node(node), m_ht(const_cast<Self*>(ht)) {} bool operator ==( const Iterator& it ) const { return m_node == it.m_node; } bool operator !=( const Iterator& it ) const { return m_node != it.m_node; } protected: Node* GetNextNode() { size_type bucket = GetBucketForNode(m_ht,m_node); for( size_type i = bucket + 1; i < m_ht->m_tableBuckets; ++i ) { if( m_ht->m_table[i] ) return static_cast<Node*>(m_ht->m_table[i]); } return 
# 725 "/usr/include/wx-3.1-unofficial/wx/hashmap.h" 3 4
__null
# 725 "/usr/include/wx-3.1-unofficial/wx/hashmap.h"
; } void PlusPlus() { Node* next = m_node->next(); m_node = next ? next : GetNextNode(); } }; friend class Iterator; public: class iterator : public Iterator { public: iterator() : Iterator() {} iterator( Node* node, Self* ht ) : Iterator( node, ht ) {} iterator& operator++() { PlusPlus(); return *this; } iterator operator++(int) { iterator it=*this;PlusPlus();return it; } reference operator *() const { return m_node->m_value; } pointer operator ->() const { return &(m_node->m_value); } }; class const_iterator : public Iterator { public: const_iterator() : Iterator() {} const_iterator(iterator i) : Iterator(i) {} const_iterator( Node* node, const Self* ht ) : Iterator(node, const_cast<Self*>(ht)) {} const_iterator& operator++() { PlusPlus();return *this; } const_iterator operator++(int) { const_iterator it=*this;PlusPlus();return it; } const_reference operator *() const { return m_node->m_value; } const_pointer operator ->() const { return &(m_node->m_value); } }; wxStringToStringHashMap_wxImplementation_HashTable( size_type sz = 10, const hasher& hfun = hasher(), const key_equal& k_eq = key_equal(), const key_extractor& k_ex = key_extractor() ) : m_tableBuckets( GetNextPrime( (unsigned long) sz ) ), m_items( 0 ), m_hasher( hfun ), m_equals( k_eq ), m_getKey( k_ex ) { m_table = (_wxHashTable_NodeBase**)AllocTable(m_tableBuckets); } wxStringToStringHashMap_wxImplementation_HashTable( const Self& ht ) : m_table(
# 725 "/usr/include/wx-3.1-unofficial/wx/hashmap.h" 3 4
__null
# 725 "/usr/include/wx-3.1-unofficial/wx/hashmap.h"
), m_tableBuckets( 0 ), m_items( ht.m_items ), m_hasher( ht.m_hasher ), m_equals( ht.m_equals ), m_getKey( ht.m_getKey ) { HashCopy( ht ); } const Self& operator=( const Self& ht ) { if (&ht != this) { clear(); m_hasher = ht.m_hasher; m_equals = ht.m_equals; m_getKey = ht.m_getKey; m_items = ht.m_items; HashCopy( ht ); } return *this; } ~wxStringToStringHashMap_wxImplementation_HashTable() { clear(); FreeTable(m_table); } hasher hash_funct() { return m_hasher; } key_equal key_eq() { return m_equals; } void clear() { DeleteNodes(m_tableBuckets, m_table, DeleteNode); m_items = 0; } size_type size() const { return m_items; } size_type max_size() const { return size_type(-1); } bool empty() const { return size() == 0; } const_iterator end() const { return const_iterator(
# 725 "/usr/include/wx-3.1-unofficial/wx/hashmap.h" 3 4
__null
# 725 "/usr/include/wx-3.1-unofficial/wx/hashmap.h"
, this); } iterator end() { return iterator(
# 725 "/usr/include/wx-3.1-unofficial/wx/hashmap.h" 3 4
__null
# 725 "/usr/include/wx-3.1-unofficial/wx/hashmap.h"
, this); } const_iterator begin() const { return const_iterator(static_cast<Node*>(GetFirstNode(m_tableBuckets, m_table)), this); } iterator begin() { return iterator(static_cast<Node*>(GetFirstNode(m_tableBuckets, m_table)), this); } size_type erase( const const_key_type& key ) { _wxHashTable_NodeBase** node = GetNodePtr(key); if( !node ) return 0; --m_items; _wxHashTable_NodeBase* temp = (*node)->m_next; delete static_cast<Node*>(*node); (*node) = temp; if( never_shrink( m_tableBuckets, m_items ) ) ResizeTable( GetPreviousPrime( (unsigned long) m_tableBuckets ) - 1 ); return 1; } protected: static size_type GetBucketForNode( Self* ht, Node* node ) { return ht->m_hasher( ht->m_getKey( node->m_value ) ) % ht->m_tableBuckets; } static Node* CopyNode( Node* node ) { return new Node( *node ); } Node* GetOrCreateNode( const value_type& value, bool& created ) { const const_key_type& key = m_getKey( value ); size_t bucket = m_hasher( key ) % m_tableBuckets; Node* node = static_cast<Node*>(m_table[bucket]); while( node ) { if( m_equals( m_getKey( node->m_value ), key ) ) { created = false; return node; } node = node->next(); } created = true; return CreateNode( value, bucket); } Node * CreateNode( const value_type& value, size_t bucket ) { Node* node = new Node( value ); node->m_next = m_table[bucket]; m_table[bucket] = node; ++m_items; if( grow_lf70( m_tableBuckets, m_items ) ) ResizeTable( m_tableBuckets ); return node; } void CreateNode( const value_type& value ) { CreateNode(value, m_hasher( m_getKey(value) ) % m_tableBuckets ); } _wxHashTable_NodeBase** GetNodePtr(const const_key_type& key) const { size_t bucket = m_hasher( key ) % m_tableBuckets; _wxHashTable_NodeBase** node = &m_table[bucket]; while( *node ) { if (m_equals(m_getKey(static_cast<Node*>(*node)->m_value), key)) return node; node = &(*node)->m_next; } return 
# 725 "/usr/include/wx-3.1-unofficial/wx/hashmap.h" 3 4
__null
# 725 "/usr/include/wx-3.1-unofficial/wx/hashmap.h"
; } Node* GetNode( const const_key_type& key ) const { size_t bucket = m_hasher( key ) % m_tableBuckets; Node* node = static_cast<Node*>(m_table[bucket]); while( node ) { if( m_equals( m_getKey( node->m_value ), key ) ) return node; node = node->next(); } return 
# 725 "/usr/include/wx-3.1-unofficial/wx/hashmap.h" 3 4
__null
# 725 "/usr/include/wx-3.1-unofficial/wx/hashmap.h"
; } void ResizeTable( size_t newSize ) { newSize = GetNextPrime( (unsigned long)newSize ); _wxHashTable_NodeBase** srcTable = m_table; size_t srcBuckets = m_tableBuckets; m_table = (_wxHashTable_NodeBase**)AllocTable( newSize ); m_tableBuckets = newSize; CopyHashTable( srcTable, srcBuckets, this, m_table, (BucketFromNode)GetBucketForNode, (ProcessNode)&DummyProcessNode ); FreeTable(srcTable); } void HashCopy( const Self& ht ) { ResizeTable( ht.size() ); CopyHashTable( ht.m_table, ht.m_tableBuckets, (_wxHashTableBase2*)this, m_table, (BucketFromNode)GetBucketForNode, (ProcessNode)CopyNode ); } }; class wxStringToStringHashMap:public wxStringToStringHashMap_wxImplementation_HashTable { public: typedef wxString mapped_type; class Insert_Result { public: typedef iterator first_type; typedef bool second_type; typedef iterator t1; typedef bool t2; typedef const iterator const_t1; typedef const bool const_t2; Insert_Result(const const_t1& f, const const_t2& s) : first(const_cast<t1&>(f)), second(const_cast<t2&>(s)) {} t1 first; t2 second; }; explicit wxStringToStringHashMap( size_type hint = 100, hasher hf = hasher(), key_equal eq = key_equal() ) : wxStringToStringHashMap_wxImplementation_HashTable( hint, hf, eq, wxStringToStringHashMap_wxImplementation_KeyEx() ) {} mapped_type& operator[]( const const_key_type& key ) { bool created; return GetOrCreateNode( wxStringToStringHashMap_wxImplementation_Pair( key, mapped_type() ), created)->m_value.second; } const_iterator find( const const_key_type& key ) const { return const_iterator( GetNode( key ), this ); } iterator find( const const_key_type& key ) { return iterator( GetNode( key ), this ); } Insert_Result insert( const value_type& v ) { bool created; Node *node = GetOrCreateNode( wxStringToStringHashMap_wxImplementation_Pair( v.first, v.second ), created); return Insert_Result(iterator(node, this), created); } size_type erase( const key_type& k ) { return wxStringToStringHashMap_wxImplementation_HashTable::erase( k ); } void erase( const iterator& it ) { erase( (*it).first ); } size_type count( const const_key_type& key ) { return GetNode( key ) ? 1u : 0u; } }
                                                              ;

class wxStringToNumHashMap_wxImplementation_Pair { public: typedef wxString first_type; typedef wxUIntPtr second_type; typedef wxString t1; typedef wxUIntPtr t2; typedef const wxString const_t1; typedef const wxUIntPtr const_t2; wxStringToNumHashMap_wxImplementation_Pair(const const_t1& f, const const_t2& s) : first(const_cast<t1&>(f)), second(const_cast<t2&>(s)) {} t1 first; t2 second; }; class wxStringToNumHashMap_wxImplementation_KeyEx { typedef wxString key_type; typedef wxStringToNumHashMap_wxImplementation_Pair pair_type; typedef const key_type const_key_type; typedef const pair_type const_pair_type; typedef const_key_type& const_key_reference; typedef const_pair_type& const_pair_reference; public: wxStringToNumHashMap_wxImplementation_KeyEx() { } const_key_reference operator()( const_pair_reference pair ) const { return pair.first; }}; class wxStringToNumHashMap_wxImplementation_HashTable : protected _wxHashTableBase2 { public: typedef wxString key_type; typedef wxStringToNumHashMap_wxImplementation_Pair value_type; typedef wxStringHash hasher; typedef wxStringEqual key_equal; typedef size_t size_type; typedef ptrdiff_t difference_type; typedef value_type* pointer; typedef const value_type* const_pointer; typedef value_type& reference; typedef const value_type& const_reference; typedef const wxString const_key_type; typedef const wxStringToNumHashMap_wxImplementation_Pair const_mapped_type; public: typedef wxStringToNumHashMap_wxImplementation_KeyEx key_extractor; typedef wxStringToNumHashMap_wxImplementation_HashTable Self; protected: _wxHashTable_NodeBase** m_table; size_t m_tableBuckets; size_t m_items; hasher m_hasher; key_equal m_equals; key_extractor m_getKey; public: struct Node:public _wxHashTable_NodeBase { public: Node( const value_type& value ) : m_value( value ) {} Node* next() { return static_cast<Node*>(m_next); } value_type m_value; }; protected: static void DeleteNode( _wxHashTable_NodeBase* node ) { delete static_cast<Node*>(node); } public: class Iterator { public: Node* m_node; Self* m_ht; Iterator() : m_node(
# 728 "/usr/include/wx-3.1-unofficial/wx/hashmap.h" 3 4
__null
# 728 "/usr/include/wx-3.1-unofficial/wx/hashmap.h"
), m_ht(
# 728 "/usr/include/wx-3.1-unofficial/wx/hashmap.h" 3 4
__null
# 728 "/usr/include/wx-3.1-unofficial/wx/hashmap.h"
) {} Iterator( Node* node, const Self* ht ) : m_node(node), m_ht(const_cast<Self*>(ht)) {} bool operator ==( const Iterator& it ) const { return m_node == it.m_node; } bool operator !=( const Iterator& it ) const { return m_node != it.m_node; } protected: Node* GetNextNode() { size_type bucket = GetBucketForNode(m_ht,m_node); for( size_type i = bucket + 1; i < m_ht->m_tableBuckets; ++i ) { if( m_ht->m_table[i] ) return static_cast<Node*>(m_ht->m_table[i]); } return 
# 728 "/usr/include/wx-3.1-unofficial/wx/hashmap.h" 3 4
__null
# 728 "/usr/include/wx-3.1-unofficial/wx/hashmap.h"
; } void PlusPlus() { Node* next = m_node->next(); m_node = next ? next : GetNextNode(); } }; friend class Iterator; public: class iterator : public Iterator { public: iterator() : Iterator() {} iterator( Node* node, Self* ht ) : Iterator( node, ht ) {} iterator& operator++() { PlusPlus(); return *this; } iterator operator++(int) { iterator it=*this;PlusPlus();return it; } reference operator *() const { return m_node->m_value; } pointer operator ->() const { return &(m_node->m_value); } }; class const_iterator : public Iterator { public: const_iterator() : Iterator() {} const_iterator(iterator i) : Iterator(i) {} const_iterator( Node* node, const Self* ht ) : Iterator(node, const_cast<Self*>(ht)) {} const_iterator& operator++() { PlusPlus();return *this; } const_iterator operator++(int) { const_iterator it=*this;PlusPlus();return it; } const_reference operator *() const { return m_node->m_value; } const_pointer operator ->() const { return &(m_node->m_value); } }; wxStringToNumHashMap_wxImplementation_HashTable( size_type sz = 10, const hasher& hfun = hasher(), const key_equal& k_eq = key_equal(), const key_extractor& k_ex = key_extractor() ) : m_tableBuckets( GetNextPrime( (unsigned long) sz ) ), m_items( 0 ), m_hasher( hfun ), m_equals( k_eq ), m_getKey( k_ex ) { m_table = (_wxHashTable_NodeBase**)AllocTable(m_tableBuckets); } wxStringToNumHashMap_wxImplementation_HashTable( const Self& ht ) : m_table(
# 728 "/usr/include/wx-3.1-unofficial/wx/hashmap.h" 3 4
__null
# 728 "/usr/include/wx-3.1-unofficial/wx/hashmap.h"
), m_tableBuckets( 0 ), m_items( ht.m_items ), m_hasher( ht.m_hasher ), m_equals( ht.m_equals ), m_getKey( ht.m_getKey ) { HashCopy( ht ); } const Self& operator=( const Self& ht ) { if (&ht != this) { clear(); m_hasher = ht.m_hasher; m_equals = ht.m_equals; m_getKey = ht.m_getKey; m_items = ht.m_items; HashCopy( ht ); } return *this; } ~wxStringToNumHashMap_wxImplementation_HashTable() { clear(); FreeTable(m_table); } hasher hash_funct() { return m_hasher; } key_equal key_eq() { return m_equals; } void clear() { DeleteNodes(m_tableBuckets, m_table, DeleteNode); m_items = 0; } size_type size() const { return m_items; } size_type max_size() const { return size_type(-1); } bool empty() const { return size() == 0; } const_iterator end() const { return const_iterator(
# 728 "/usr/include/wx-3.1-unofficial/wx/hashmap.h" 3 4
__null
# 728 "/usr/include/wx-3.1-unofficial/wx/hashmap.h"
, this); } iterator end() { return iterator(
# 728 "/usr/include/wx-3.1-unofficial/wx/hashmap.h" 3 4
__null
# 728 "/usr/include/wx-3.1-unofficial/wx/hashmap.h"
, this); } const_iterator begin() const { return const_iterator(static_cast<Node*>(GetFirstNode(m_tableBuckets, m_table)), this); } iterator begin() { return iterator(static_cast<Node*>(GetFirstNode(m_tableBuckets, m_table)), this); } size_type erase( const const_key_type& key ) { _wxHashTable_NodeBase** node = GetNodePtr(key); if( !node ) return 0; --m_items; _wxHashTable_NodeBase* temp = (*node)->m_next; delete static_cast<Node*>(*node); (*node) = temp; if( never_shrink( m_tableBuckets, m_items ) ) ResizeTable( GetPreviousPrime( (unsigned long) m_tableBuckets ) - 1 ); return 1; } protected: static size_type GetBucketForNode( Self* ht, Node* node ) { return ht->m_hasher( ht->m_getKey( node->m_value ) ) % ht->m_tableBuckets; } static Node* CopyNode( Node* node ) { return new Node( *node ); } Node* GetOrCreateNode( const value_type& value, bool& created ) { const const_key_type& key = m_getKey( value ); size_t bucket = m_hasher( key ) % m_tableBuckets; Node* node = static_cast<Node*>(m_table[bucket]); while( node ) { if( m_equals( m_getKey( node->m_value ), key ) ) { created = false; return node; } node = node->next(); } created = true; return CreateNode( value, bucket); } Node * CreateNode( const value_type& value, size_t bucket ) { Node* node = new Node( value ); node->m_next = m_table[bucket]; m_table[bucket] = node; ++m_items; if( grow_lf70( m_tableBuckets, m_items ) ) ResizeTable( m_tableBuckets ); return node; } void CreateNode( const value_type& value ) { CreateNode(value, m_hasher( m_getKey(value) ) % m_tableBuckets ); } _wxHashTable_NodeBase** GetNodePtr(const const_key_type& key) const { size_t bucket = m_hasher( key ) % m_tableBuckets; _wxHashTable_NodeBase** node = &m_table[bucket]; while( *node ) { if (m_equals(m_getKey(static_cast<Node*>(*node)->m_value), key)) return node; node = &(*node)->m_next; } return 
# 728 "/usr/include/wx-3.1-unofficial/wx/hashmap.h" 3 4
__null
# 728 "/usr/include/wx-3.1-unofficial/wx/hashmap.h"
; } Node* GetNode( const const_key_type& key ) const { size_t bucket = m_hasher( key ) % m_tableBuckets; Node* node = static_cast<Node*>(m_table[bucket]); while( node ) { if( m_equals( m_getKey( node->m_value ), key ) ) return node; node = node->next(); } return 
# 728 "/usr/include/wx-3.1-unofficial/wx/hashmap.h" 3 4
__null
# 728 "/usr/include/wx-3.1-unofficial/wx/hashmap.h"
; } void ResizeTable( size_t newSize ) { newSize = GetNextPrime( (unsigned long)newSize ); _wxHashTable_NodeBase** srcTable = m_table; size_t srcBuckets = m_tableBuckets; m_table = (_wxHashTable_NodeBase**)AllocTable( newSize ); m_tableBuckets = newSize; CopyHashTable( srcTable, srcBuckets, this, m_table, (BucketFromNode)GetBucketForNode, (ProcessNode)&DummyProcessNode ); FreeTable(srcTable); } void HashCopy( const Self& ht ) { ResizeTable( ht.size() ); CopyHashTable( ht.m_table, ht.m_tableBuckets, (_wxHashTableBase2*)this, m_table, (BucketFromNode)GetBucketForNode, (ProcessNode)CopyNode ); } }; class wxStringToNumHashMap:public wxStringToNumHashMap_wxImplementation_HashTable { public: typedef wxUIntPtr mapped_type; class Insert_Result { public: typedef iterator first_type; typedef bool second_type; typedef iterator t1; typedef bool t2; typedef const iterator const_t1; typedef const bool const_t2; Insert_Result(const const_t1& f, const const_t2& s) : first(const_cast<t1&>(f)), second(const_cast<t2&>(s)) {} t1 first; t2 second; }; explicit wxStringToNumHashMap( size_type hint = 100, hasher hf = hasher(), key_equal eq = key_equal() ) : wxStringToNumHashMap_wxImplementation_HashTable( hint, hf, eq, wxStringToNumHashMap_wxImplementation_KeyEx() ) {} mapped_type& operator[]( const const_key_type& key ) { bool created; return GetOrCreateNode( wxStringToNumHashMap_wxImplementation_Pair( key, mapped_type() ), created)->m_value.second; } const_iterator find( const const_key_type& key ) const { return const_iterator( GetNode( key ), this ); } iterator find( const const_key_type& key ) { return iterator( GetNode( key ), this ); } Insert_Result insert( const value_type& v ) { bool created; Node *node = GetOrCreateNode( wxStringToNumHashMap_wxImplementation_Pair( v.first, v.second ), created); return Insert_Result(iterator(node, this), created); } size_type erase( const key_type& k ) { return wxStringToNumHashMap_wxImplementation_HashTable::erase( k ); } void erase( const iterator& it ) { erase( (*it).first ); } size_type count( const const_key_type& key ) { return GetNode( key ) ? 1u : 0u; } }
                                                              ;
# 17 "/usr/include/wx-3.1-unofficial/wx/clntdata.h" 2

typedef int (*wxShadowObjectMethod)(void*, void*);
class wxShadowObjectMethods_wxImplementation_Pair { public: typedef wxString first_type; typedef wxShadowObjectMethod second_type; typedef wxString t1; typedef wxShadowObjectMethod t2; typedef const wxString const_t1; typedef const wxShadowObjectMethod const_t2; wxShadowObjectMethods_wxImplementation_Pair(const const_t1& f, const const_t2& s) : first(const_cast<t1&>(f)), second(const_cast<t2&>(s)) {} t1 first; t2 second; }; class wxShadowObjectMethods_wxImplementation_KeyEx { typedef wxString key_type; typedef wxShadowObjectMethods_wxImplementation_Pair pair_type; typedef const key_type const_key_type; typedef const pair_type const_pair_type; typedef const_key_type& const_key_reference; typedef const_pair_type& const_pair_reference; public: wxShadowObjectMethods_wxImplementation_KeyEx() { } const_key_reference operator()( const_pair_reference pair ) const { return pair.first; }}; class wxShadowObjectMethods_wxImplementation_HashTable : protected _wxHashTableBase2 { public: typedef wxString key_type; typedef wxShadowObjectMethods_wxImplementation_Pair value_type; typedef wxStringHash hasher; typedef wxStringEqual key_equal; typedef size_t size_type; typedef ptrdiff_t difference_type; typedef value_type* pointer; typedef const value_type* const_pointer; typedef value_type& reference; typedef const value_type& const_reference; typedef const wxString const_key_type; typedef const wxShadowObjectMethods_wxImplementation_Pair const_mapped_type; public: typedef wxShadowObjectMethods_wxImplementation_KeyEx key_extractor; typedef wxShadowObjectMethods_wxImplementation_HashTable Self; protected: _wxHashTable_NodeBase** m_table; size_t m_tableBuckets; size_t m_items; hasher m_hasher; key_equal m_equals; key_extractor m_getKey; public: struct Node:public _wxHashTable_NodeBase { public: Node( const value_type& value ) : m_value( value ) {} Node* next() { return static_cast<Node*>(m_next); } value_type m_value; }; protected: static void DeleteNode( _wxHashTable_NodeBase* node ) { delete static_cast<Node*>(node); } public: class Iterator { public: Node* m_node; Self* m_ht; Iterator() : m_node(
# 19 "/usr/include/wx-3.1-unofficial/wx/clntdata.h" 3 4
__null
# 19 "/usr/include/wx-3.1-unofficial/wx/clntdata.h"
), m_ht(
# 19 "/usr/include/wx-3.1-unofficial/wx/clntdata.h" 3 4
__null
# 19 "/usr/include/wx-3.1-unofficial/wx/clntdata.h"
) {} Iterator( Node* node, const Self* ht ) : m_node(node), m_ht(const_cast<Self*>(ht)) {} bool operator ==( const Iterator& it ) const { return m_node == it.m_node; } bool operator !=( const Iterator& it ) const { return m_node != it.m_node; } protected: Node* GetNextNode() { size_type bucket = GetBucketForNode(m_ht,m_node); for( size_type i = bucket + 1; i < m_ht->m_tableBuckets; ++i ) { if( m_ht->m_table[i] ) return static_cast<Node*>(m_ht->m_table[i]); } return 
# 19 "/usr/include/wx-3.1-unofficial/wx/clntdata.h" 3 4
__null
# 19 "/usr/include/wx-3.1-unofficial/wx/clntdata.h"
; } void PlusPlus() { Node* next = m_node->next(); m_node = next ? next : GetNextNode(); } }; friend class Iterator; public: class iterator : public Iterator { public: iterator() : Iterator() {} iterator( Node* node, Self* ht ) : Iterator( node, ht ) {} iterator& operator++() { PlusPlus(); return *this; } iterator operator++(int) { iterator it=*this;PlusPlus();return it; } reference operator *() const { return m_node->m_value; } pointer operator ->() const { return &(m_node->m_value); } }; class const_iterator : public Iterator { public: const_iterator() : Iterator() {} const_iterator(iterator i) : Iterator(i) {} const_iterator( Node* node, const Self* ht ) : Iterator(node, const_cast<Self*>(ht)) {} const_iterator& operator++() { PlusPlus();return *this; } const_iterator operator++(int) { const_iterator it=*this;PlusPlus();return it; } const_reference operator *() const { return m_node->m_value; } const_pointer operator ->() const { return &(m_node->m_value); } }; wxShadowObjectMethods_wxImplementation_HashTable( size_type sz = 10, const hasher& hfun = hasher(), const key_equal& k_eq = key_equal(), const key_extractor& k_ex = key_extractor() ) : m_tableBuckets( GetNextPrime( (unsigned long) sz ) ), m_items( 0 ), m_hasher( hfun ), m_equals( k_eq ), m_getKey( k_ex ) { m_table = (_wxHashTable_NodeBase**)AllocTable(m_tableBuckets); } wxShadowObjectMethods_wxImplementation_HashTable( const Self& ht ) : m_table(
# 19 "/usr/include/wx-3.1-unofficial/wx/clntdata.h" 3 4
__null
# 19 "/usr/include/wx-3.1-unofficial/wx/clntdata.h"
), m_tableBuckets( 0 ), m_items( ht.m_items ), m_hasher( ht.m_hasher ), m_equals( ht.m_equals ), m_getKey( ht.m_getKey ) { HashCopy( ht ); } const Self& operator=( const Self& ht ) { if (&ht != this) { clear(); m_hasher = ht.m_hasher; m_equals = ht.m_equals; m_getKey = ht.m_getKey; m_items = ht.m_items; HashCopy( ht ); } return *this; } ~wxShadowObjectMethods_wxImplementation_HashTable() { clear(); FreeTable(m_table); } hasher hash_funct() { return m_hasher; } key_equal key_eq() { return m_equals; } void clear() { DeleteNodes(m_tableBuckets, m_table, DeleteNode); m_items = 0; } size_type size() const { return m_items; } size_type max_size() const { return size_type(-1); } bool empty() const { return size() == 0; } const_iterator end() const { return const_iterator(
# 19 "/usr/include/wx-3.1-unofficial/wx/clntdata.h" 3 4
__null
# 19 "/usr/include/wx-3.1-unofficial/wx/clntdata.h"
, this); } iterator end() { return iterator(
# 19 "/usr/include/wx-3.1-unofficial/wx/clntdata.h" 3 4
__null
# 19 "/usr/include/wx-3.1-unofficial/wx/clntdata.h"
, this); } const_iterator begin() const { return const_iterator(static_cast<Node*>(GetFirstNode(m_tableBuckets, m_table)), this); } iterator begin() { return iterator(static_cast<Node*>(GetFirstNode(m_tableBuckets, m_table)), this); } size_type erase( const const_key_type& key ) { _wxHashTable_NodeBase** node = GetNodePtr(key); if( !node ) return 0; --m_items; _wxHashTable_NodeBase* temp = (*node)->m_next; delete static_cast<Node*>(*node); (*node) = temp; if( never_shrink( m_tableBuckets, m_items ) ) ResizeTable( GetPreviousPrime( (unsigned long) m_tableBuckets ) - 1 ); return 1; } protected: static size_type GetBucketForNode( Self* ht, Node* node ) { return ht->m_hasher( ht->m_getKey( node->m_value ) ) % ht->m_tableBuckets; } static Node* CopyNode( Node* node ) { return new Node( *node ); } Node* GetOrCreateNode( const value_type& value, bool& created ) { const const_key_type& key = m_getKey( value ); size_t bucket = m_hasher( key ) % m_tableBuckets; Node* node = static_cast<Node*>(m_table[bucket]); while( node ) { if( m_equals( m_getKey( node->m_value ), key ) ) { created = false; return node; } node = node->next(); } created = true; return CreateNode( value, bucket); } Node * CreateNode( const value_type& value, size_t bucket ) { Node* node = new Node( value ); node->m_next = m_table[bucket]; m_table[bucket] = node; ++m_items; if( grow_lf70( m_tableBuckets, m_items ) ) ResizeTable( m_tableBuckets ); return node; } void CreateNode( const value_type& value ) { CreateNode(value, m_hasher( m_getKey(value) ) % m_tableBuckets ); } _wxHashTable_NodeBase** GetNodePtr(const const_key_type& key) const { size_t bucket = m_hasher( key ) % m_tableBuckets; _wxHashTable_NodeBase** node = &m_table[bucket]; while( *node ) { if (m_equals(m_getKey(static_cast<Node*>(*node)->m_value), key)) return node; node = &(*node)->m_next; } return 
# 19 "/usr/include/wx-3.1-unofficial/wx/clntdata.h" 3 4
__null
# 19 "/usr/include/wx-3.1-unofficial/wx/clntdata.h"
; } Node* GetNode( const const_key_type& key ) const { size_t bucket = m_hasher( key ) % m_tableBuckets; Node* node = static_cast<Node*>(m_table[bucket]); while( node ) { if( m_equals( m_getKey( node->m_value ), key ) ) return node; node = node->next(); } return 
# 19 "/usr/include/wx-3.1-unofficial/wx/clntdata.h" 3 4
__null
# 19 "/usr/include/wx-3.1-unofficial/wx/clntdata.h"
; } void ResizeTable( size_t newSize ) { newSize = GetNextPrime( (unsigned long)newSize ); _wxHashTable_NodeBase** srcTable = m_table; size_t srcBuckets = m_tableBuckets; m_table = (_wxHashTable_NodeBase**)AllocTable( newSize ); m_tableBuckets = newSize; CopyHashTable( srcTable, srcBuckets, this, m_table, (BucketFromNode)GetBucketForNode, (ProcessNode)&DummyProcessNode ); FreeTable(srcTable); } void HashCopy( const Self& ht ) { ResizeTable( ht.size() ); CopyHashTable( ht.m_table, ht.m_tableBuckets, (_wxHashTableBase2*)this, m_table, (BucketFromNode)GetBucketForNode, (ProcessNode)CopyNode ); } }; class wxShadowObjectMethods:public wxShadowObjectMethods_wxImplementation_HashTable { public: typedef wxShadowObjectMethod mapped_type; class Insert_Result { public: typedef iterator first_type; typedef bool second_type; typedef iterator t1; typedef bool t2; typedef const iterator const_t1; typedef const bool const_t2; Insert_Result(const const_t1& f, const const_t2& s) : first(const_cast<t1&>(f)), second(const_cast<t2&>(s)) {} t1 first; t2 second; }; explicit wxShadowObjectMethods( size_type hint = 100, hasher hf = hasher(), key_equal eq = key_equal() ) : wxShadowObjectMethods_wxImplementation_HashTable( hint, hf, eq, wxShadowObjectMethods_wxImplementation_KeyEx() ) {} mapped_type& operator[]( const const_key_type& key ) { bool created; return GetOrCreateNode( wxShadowObjectMethods_wxImplementation_Pair( key, mapped_type() ), created)->m_value.second; } const_iterator find( const const_key_type& key ) const { return const_iterator( GetNode( key ), this ); } iterator find( const const_key_type& key ) { return iterator( GetNode( key ), this ); } Insert_Result insert( const value_type& v ) { bool created; Node *node = GetOrCreateNode( wxShadowObjectMethods_wxImplementation_Pair( v.first, v.second ), created); return Insert_Result(iterator(node, this), created); } size_type erase( const key_type& k ) { return wxShadowObjectMethods_wxImplementation_HashTable::erase( k ); } void erase( const iterator& it ) { erase( (*it).first ); } size_type count( const const_key_type& key ) { return GetNode( key ) ? 1u : 0u; } }



 ;
class wxShadowObjectFields_wxImplementation_Pair { public: typedef wxString first_type; typedef void * second_type; typedef wxString t1; typedef void * t2; typedef const wxString const_t1; typedef const void * const_t2; wxShadowObjectFields_wxImplementation_Pair(const const_t1& f, const const_t2& s) : first(const_cast<t1&>(f)), second(const_cast<t2&>(s)) {} t1 first; t2 second; }; class wxShadowObjectFields_wxImplementation_KeyEx { typedef wxString key_type; typedef wxShadowObjectFields_wxImplementation_Pair pair_type; typedef const key_type const_key_type; typedef const pair_type const_pair_type; typedef const_key_type& const_key_reference; typedef const_pair_type& const_pair_reference; public: wxShadowObjectFields_wxImplementation_KeyEx() { } const_key_reference operator()( const_pair_reference pair ) const { return pair.first; }}; class wxShadowObjectFields_wxImplementation_HashTable : protected _wxHashTableBase2 { public: typedef wxString key_type; typedef wxShadowObjectFields_wxImplementation_Pair value_type; typedef wxStringHash hasher; typedef wxStringEqual key_equal; typedef size_t size_type; typedef ptrdiff_t difference_type; typedef value_type* pointer; typedef const value_type* const_pointer; typedef value_type& reference; typedef const value_type& const_reference; typedef const wxString const_key_type; typedef const wxShadowObjectFields_wxImplementation_Pair const_mapped_type; public: typedef wxShadowObjectFields_wxImplementation_KeyEx key_extractor; typedef wxShadowObjectFields_wxImplementation_HashTable Self; protected: _wxHashTable_NodeBase** m_table; size_t m_tableBuckets; size_t m_items; hasher m_hasher; key_equal m_equals; key_extractor m_getKey; public: struct Node:public _wxHashTable_NodeBase { public: Node( const value_type& value ) : m_value( value ) {} Node* next() { return static_cast<Node*>(m_next); } value_type m_value; }; protected: static void DeleteNode( _wxHashTable_NodeBase* node ) { delete static_cast<Node*>(node); } public: class Iterator { public: Node* m_node; Self* m_ht; Iterator() : m_node(
# 24 "/usr/include/wx-3.1-unofficial/wx/clntdata.h" 3 4
__null
# 24 "/usr/include/wx-3.1-unofficial/wx/clntdata.h"
), m_ht(
# 24 "/usr/include/wx-3.1-unofficial/wx/clntdata.h" 3 4
__null
# 24 "/usr/include/wx-3.1-unofficial/wx/clntdata.h"
) {} Iterator( Node* node, const Self* ht ) : m_node(node), m_ht(const_cast<Self*>(ht)) {} bool operator ==( const Iterator& it ) const { return m_node == it.m_node; } bool operator !=( const Iterator& it ) const { return m_node != it.m_node; } protected: Node* GetNextNode() { size_type bucket = GetBucketForNode(m_ht,m_node); for( size_type i = bucket + 1; i < m_ht->m_tableBuckets; ++i ) { if( m_ht->m_table[i] ) return static_cast<Node*>(m_ht->m_table[i]); } return 
# 24 "/usr/include/wx-3.1-unofficial/wx/clntdata.h" 3 4
__null
# 24 "/usr/include/wx-3.1-unofficial/wx/clntdata.h"
; } void PlusPlus() { Node* next = m_node->next(); m_node = next ? next : GetNextNode(); } }; friend class Iterator; public: class iterator : public Iterator { public: iterator() : Iterator() {} iterator( Node* node, Self* ht ) : Iterator( node, ht ) {} iterator& operator++() { PlusPlus(); return *this; } iterator operator++(int) { iterator it=*this;PlusPlus();return it; } reference operator *() const { return m_node->m_value; } pointer operator ->() const { return &(m_node->m_value); } }; class const_iterator : public Iterator { public: const_iterator() : Iterator() {} const_iterator(iterator i) : Iterator(i) {} const_iterator( Node* node, const Self* ht ) : Iterator(node, const_cast<Self*>(ht)) {} const_iterator& operator++() { PlusPlus();return *this; } const_iterator operator++(int) { const_iterator it=*this;PlusPlus();return it; } const_reference operator *() const { return m_node->m_value; } const_pointer operator ->() const { return &(m_node->m_value); } }; wxShadowObjectFields_wxImplementation_HashTable( size_type sz = 10, const hasher& hfun = hasher(), const key_equal& k_eq = key_equal(), const key_extractor& k_ex = key_extractor() ) : m_tableBuckets( GetNextPrime( (unsigned long) sz ) ), m_items( 0 ), m_hasher( hfun ), m_equals( k_eq ), m_getKey( k_ex ) { m_table = (_wxHashTable_NodeBase**)AllocTable(m_tableBuckets); } wxShadowObjectFields_wxImplementation_HashTable( const Self& ht ) : m_table(
# 24 "/usr/include/wx-3.1-unofficial/wx/clntdata.h" 3 4
__null
# 24 "/usr/include/wx-3.1-unofficial/wx/clntdata.h"
), m_tableBuckets( 0 ), m_items( ht.m_items ), m_hasher( ht.m_hasher ), m_equals( ht.m_equals ), m_getKey( ht.m_getKey ) { HashCopy( ht ); } const Self& operator=( const Self& ht ) { if (&ht != this) { clear(); m_hasher = ht.m_hasher; m_equals = ht.m_equals; m_getKey = ht.m_getKey; m_items = ht.m_items; HashCopy( ht ); } return *this; } ~wxShadowObjectFields_wxImplementation_HashTable() { clear(); FreeTable(m_table); } hasher hash_funct() { return m_hasher; } key_equal key_eq() { return m_equals; } void clear() { DeleteNodes(m_tableBuckets, m_table, DeleteNode); m_items = 0; } size_type size() const { return m_items; } size_type max_size() const { return size_type(-1); } bool empty() const { return size() == 0; } const_iterator end() const { return const_iterator(
# 24 "/usr/include/wx-3.1-unofficial/wx/clntdata.h" 3 4
__null
# 24 "/usr/include/wx-3.1-unofficial/wx/clntdata.h"
, this); } iterator end() { return iterator(
# 24 "/usr/include/wx-3.1-unofficial/wx/clntdata.h" 3 4
__null
# 24 "/usr/include/wx-3.1-unofficial/wx/clntdata.h"
, this); } const_iterator begin() const { return const_iterator(static_cast<Node*>(GetFirstNode(m_tableBuckets, m_table)), this); } iterator begin() { return iterator(static_cast<Node*>(GetFirstNode(m_tableBuckets, m_table)), this); } size_type erase( const const_key_type& key ) { _wxHashTable_NodeBase** node = GetNodePtr(key); if( !node ) return 0; --m_items; _wxHashTable_NodeBase* temp = (*node)->m_next; delete static_cast<Node*>(*node); (*node) = temp; if( never_shrink( m_tableBuckets, m_items ) ) ResizeTable( GetPreviousPrime( (unsigned long) m_tableBuckets ) - 1 ); return 1; } protected: static size_type GetBucketForNode( Self* ht, Node* node ) { return ht->m_hasher( ht->m_getKey( node->m_value ) ) % ht->m_tableBuckets; } static Node* CopyNode( Node* node ) { return new Node( *node ); } Node* GetOrCreateNode( const value_type& value, bool& created ) { const const_key_type& key = m_getKey( value ); size_t bucket = m_hasher( key ) % m_tableBuckets; Node* node = static_cast<Node*>(m_table[bucket]); while( node ) { if( m_equals( m_getKey( node->m_value ), key ) ) { created = false; return node; } node = node->next(); } created = true; return CreateNode( value, bucket); } Node * CreateNode( const value_type& value, size_t bucket ) { Node* node = new Node( value ); node->m_next = m_table[bucket]; m_table[bucket] = node; ++m_items; if( grow_lf70( m_tableBuckets, m_items ) ) ResizeTable( m_tableBuckets ); return node; } void CreateNode( const value_type& value ) { CreateNode(value, m_hasher( m_getKey(value) ) % m_tableBuckets ); } _wxHashTable_NodeBase** GetNodePtr(const const_key_type& key) const { size_t bucket = m_hasher( key ) % m_tableBuckets; _wxHashTable_NodeBase** node = &m_table[bucket]; while( *node ) { if (m_equals(m_getKey(static_cast<Node*>(*node)->m_value), key)) return node; node = &(*node)->m_next; } return 
# 24 "/usr/include/wx-3.1-unofficial/wx/clntdata.h" 3 4
__null
# 24 "/usr/include/wx-3.1-unofficial/wx/clntdata.h"
; } Node* GetNode( const const_key_type& key ) const { size_t bucket = m_hasher( key ) % m_tableBuckets; Node* node = static_cast<Node*>(m_table[bucket]); while( node ) { if( m_equals( m_getKey( node->m_value ), key ) ) return node; node = node->next(); } return 
# 24 "/usr/include/wx-3.1-unofficial/wx/clntdata.h" 3 4
__null
# 24 "/usr/include/wx-3.1-unofficial/wx/clntdata.h"
; } void ResizeTable( size_t newSize ) { newSize = GetNextPrime( (unsigned long)newSize ); _wxHashTable_NodeBase** srcTable = m_table; size_t srcBuckets = m_tableBuckets; m_table = (_wxHashTable_NodeBase**)AllocTable( newSize ); m_tableBuckets = newSize; CopyHashTable( srcTable, srcBuckets, this, m_table, (BucketFromNode)GetBucketForNode, (ProcessNode)&DummyProcessNode ); FreeTable(srcTable); } void HashCopy( const Self& ht ) { ResizeTable( ht.size() ); CopyHashTable( ht.m_table, ht.m_tableBuckets, (_wxHashTableBase2*)this, m_table, (BucketFromNode)GetBucketForNode, (ProcessNode)CopyNode ); } }; class wxShadowObjectFields:public wxShadowObjectFields_wxImplementation_HashTable { public: typedef void * mapped_type; class Insert_Result { public: typedef iterator first_type; typedef bool second_type; typedef iterator t1; typedef bool t2; typedef const iterator const_t1; typedef const bool const_t2; Insert_Result(const const_t1& f, const const_t2& s) : first(const_cast<t1&>(f)), second(const_cast<t2&>(s)) {} t1 first; t2 second; }; explicit wxShadowObjectFields( size_type hint = 100, hasher hf = hasher(), key_equal eq = key_equal() ) : wxShadowObjectFields_wxImplementation_HashTable( hint, hf, eq, wxShadowObjectFields_wxImplementation_KeyEx() ) {} mapped_type& operator[]( const const_key_type& key ) { bool created; return GetOrCreateNode( wxShadowObjectFields_wxImplementation_Pair( key, mapped_type() ), created)->m_value.second; } const_iterator find( const const_key_type& key ) const { return const_iterator( GetNode( key ), this ); } iterator find( const const_key_type& key ) { return iterator( GetNode( key ), this ); } Insert_Result insert( const value_type& v ) { bool created; Node *node = GetOrCreateNode( wxShadowObjectFields_wxImplementation_Pair( v.first, v.second ), created); return Insert_Result(iterator(node, this), created); } size_type erase( const key_type& k ) { return wxShadowObjectFields_wxImplementation_HashTable::erase( k ); } void erase( const iterator& it ) { erase( (*it).first ); } size_type count( const const_key_type& key ) { return GetNode( key ) ? 1u : 0u; } }



 ;

class __attribute__ ((visibility("default"))) wxShadowObject
{
public:
    wxShadowObject() { }

    void AddMethod( const wxString &name, wxShadowObjectMethod method )
    {
        wxShadowObjectMethods::iterator it = m_methods.find( name );
        if (it == m_methods.end())
            m_methods[ name ] = method;
        else
            it->second = method;
    }

    bool InvokeMethod( const wxString &name, void* window, void* param, int* returnValue )
    {
        wxShadowObjectMethods::iterator it = m_methods.find( name );
        if (it == m_methods.end())
            return false;
        wxShadowObjectMethod method = it->second;
        const int ret = (*method)(window, param);
        if (returnValue)
            *returnValue = ret;
        return true;
    }

    void AddField( const wxString &name, void* initialValue = 
# 56 "/usr/include/wx-3.1-unofficial/wx/clntdata.h" 3 4
                                                             __null 
# 56 "/usr/include/wx-3.1-unofficial/wx/clntdata.h"
                                                                  )
    {
        wxShadowObjectFields::iterator it = m_fields.find( name );
        if (it == m_fields.end())
            m_fields[ name ] = initialValue;
        else
            it->second = initialValue;
    }

    void SetField( const wxString &name, void* value )
    {
        wxShadowObjectFields::iterator it = m_fields.find( name );
        if (it == m_fields.end())
            return;
        it->second = value;
    }

    void* GetField( const wxString &name, void *defaultValue = 
# 73 "/usr/include/wx-3.1-unofficial/wx/clntdata.h" 3 4
                                                              __null 
# 73 "/usr/include/wx-3.1-unofficial/wx/clntdata.h"
                                                                   )
    {
        wxShadowObjectFields::iterator it = m_fields.find( name );
        if (it == m_fields.end())
            return defaultValue;
        return it->second;
    }

private:
    wxShadowObjectMethods m_methods;
    wxShadowObjectFields m_fields;
};





enum wxClientDataType
{
    wxClientData_None,
    wxClientData_Object,
    wxClientData_Void
};

class __attribute__ ((visibility("default"))) wxClientData
{
public:
    wxClientData() { }
    virtual ~wxClientData() { }
};

class __attribute__ ((visibility("default"))) wxStringClientData : public wxClientData
{
public:
    wxStringClientData() : m_data() { }
    wxStringClientData( const wxString &data ) : m_data(data) { }
    void SetData( const wxString &data ) { m_data = data; }
    const wxString& GetData() const { return m_data; }

private:
    wxString m_data;
};
# 125 "/usr/include/wx-3.1-unofficial/wx/clntdata.h"
class __attribute__ ((visibility("default"))) wxClientDataContainer
{
public:
    wxClientDataContainer();
    virtual ~wxClientDataContainer();

    void SetClientObject( wxClientData *data ) { DoSetClientObject(data); }
    wxClientData *GetClientObject() const { return DoGetClientObject(); }

    void SetClientData( void *data ) { DoSetClientData(data); }
    void *GetClientData() const { return DoGetClientData(); }

protected:





    union
    {
        wxClientData *m_clientObject;
        void *m_clientData;
    };


    virtual void DoSetClientObject( wxClientData *data );
    virtual wxClientData *DoGetClientObject() const;

    virtual void DoSetClientData( void *data );
    virtual void *DoGetClientData() const;


    wxClientDataType m_clientDataType;

};
# 18 "/usr/include/wx-3.1-unofficial/wx/event.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/math.h" 1
# 16 "/usr/include/wx-3.1-unofficial/wx/math.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 17 "/usr/include/wx-3.1-unofficial/wx/math.h" 2

# 1 "/usr/include/c++/10/math.h" 1 3
# 36 "/usr/include/c++/10/math.h" 3
# 1 "/usr/include/c++/10/cmath" 1 3
# 39 "/usr/include/c++/10/cmath" 3
       
# 40 "/usr/include/c++/10/cmath" 3





# 1 "/usr/include/math.h" 1 3 4
# 27 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 28 "/usr/include/math.h" 2 3 4







# 34 "/usr/include/math.h" 3 4
extern "C" {





# 1 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libm-simd-decl-stubs.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 2 3 4
# 41 "/usr/include/math.h" 2 3 4
# 138 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/flt-eval-method.h" 1 3 4
# 139 "/usr/include/math.h" 2 3 4
# 149 "/usr/include/math.h" 3 4
typedef float float_t;
typedef double double_t;
# 190 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/fp-logb.h" 1 3 4
# 191 "/usr/include/math.h" 2 3 4
# 233 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/fp-fast.h" 1 3 4
# 234 "/usr/include/math.h" 2 3 4



enum
  {
    FP_INT_UPWARD =

      0,
    FP_INT_DOWNWARD =

      1,
    FP_INT_TOWARDZERO =

      2,
    FP_INT_TONEARESTFROMZERO =

      3,
    FP_INT_TONEAREST =

      4,
  };
# 289 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassify (double __value) throw ()
     __attribute__ ((__const__));


extern int __signbit (double __value) throw ()
     __attribute__ ((__const__));



extern int __isinf (double __value) throw () __attribute__ ((__const__));


extern int __finite (double __value) throw () __attribute__ ((__const__));


extern int __isnan (double __value) throw () __attribute__ ((__const__));


extern int __iseqsig (double __x, double __y) throw ();


extern int __issignaling (double __value) throw ()
     __attribute__ ((__const__));
# 290 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern double acos (double __x) throw (); extern double __acos (double __x) throw ();

extern double asin (double __x) throw (); extern double __asin (double __x) throw ();

extern double atan (double __x) throw (); extern double __atan (double __x) throw ();

extern double atan2 (double __y, double __x) throw (); extern double __atan2 (double __y, double __x) throw ();


 extern double cos (double __x) throw (); extern double __cos (double __x) throw ();

 extern double sin (double __x) throw (); extern double __sin (double __x) throw ();

extern double tan (double __x) throw (); extern double __tan (double __x) throw ();




extern double cosh (double __x) throw (); extern double __cosh (double __x) throw ();

extern double sinh (double __x) throw (); extern double __sinh (double __x) throw ();

extern double tanh (double __x) throw (); extern double __tanh (double __x) throw ();



 extern void sincos (double __x, double *__sinx, double *__cosx) throw (); extern void __sincos (double __x, double *__sinx, double *__cosx) throw ()
                                                        ;




extern double acosh (double __x) throw (); extern double __acosh (double __x) throw ();

extern double asinh (double __x) throw (); extern double __asinh (double __x) throw ();

extern double atanh (double __x) throw (); extern double __atanh (double __x) throw ();





 extern double exp (double __x) throw (); extern double __exp (double __x) throw ();


extern double frexp (double __x, int *__exponent) throw (); extern double __frexp (double __x, int *__exponent) throw ();


extern double ldexp (double __x, int __exponent) throw (); extern double __ldexp (double __x, int __exponent) throw ();


 extern double log (double __x) throw (); extern double __log (double __x) throw ();


extern double log10 (double __x) throw (); extern double __log10 (double __x) throw ();


extern double modf (double __x, double *__iptr) throw (); extern double __modf (double __x, double *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern double exp10 (double __x) throw (); extern double __exp10 (double __x) throw ();




extern double expm1 (double __x) throw (); extern double __expm1 (double __x) throw ();


extern double log1p (double __x) throw (); extern double __log1p (double __x) throw ();


extern double logb (double __x) throw (); extern double __logb (double __x) throw ();




extern double exp2 (double __x) throw (); extern double __exp2 (double __x) throw ();


extern double log2 (double __x) throw (); extern double __log2 (double __x) throw ();






 extern double pow (double __x, double __y) throw (); extern double __pow (double __x, double __y) throw ();


extern double sqrt (double __x) throw (); extern double __sqrt (double __x) throw ();



extern double hypot (double __x, double __y) throw (); extern double __hypot (double __x, double __y) throw ();




extern double cbrt (double __x) throw (); extern double __cbrt (double __x) throw ();






extern double ceil (double __x) throw () __attribute__ ((__const__)); extern double __ceil (double __x) throw () __attribute__ ((__const__));


extern double fabs (double __x) throw () __attribute__ ((__const__)); extern double __fabs (double __x) throw () __attribute__ ((__const__));


extern double floor (double __x) throw () __attribute__ ((__const__)); extern double __floor (double __x) throw () __attribute__ ((__const__));


extern double fmod (double __x, double __y) throw (); extern double __fmod (double __x, double __y) throw ();
# 182 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int finite (double __value) throw () __attribute__ ((__const__));


extern double drem (double __x, double __y) throw (); extern double __drem (double __x, double __y) throw ();



extern double significand (double __x) throw (); extern double __significand (double __x) throw ();






extern double copysign (double __x, double __y) throw () __attribute__ ((__const__)); extern double __copysign (double __x, double __y) throw () __attribute__ ((__const__));




extern double nan (const char *__tagb) throw (); extern double __nan (const char *__tagb) throw ();
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern double j0 (double) throw (); extern double __j0 (double) throw ();
extern double j1 (double) throw (); extern double __j1 (double) throw ();
extern double jn (int, double) throw (); extern double __jn (int, double) throw ();
extern double y0 (double) throw (); extern double __y0 (double) throw ();
extern double y1 (double) throw (); extern double __y1 (double) throw ();
extern double yn (int, double) throw (); extern double __yn (int, double) throw ();





extern double erf (double) throw (); extern double __erf (double) throw ();
extern double erfc (double) throw (); extern double __erfc (double) throw ();
extern double lgamma (double) throw (); extern double __lgamma (double) throw ();




extern double tgamma (double) throw (); extern double __tgamma (double) throw ();





extern double gamma (double) throw (); extern double __gamma (double) throw ();







extern double lgamma_r (double, int *__signgamp) throw (); extern double __lgamma_r (double, int *__signgamp) throw ();






extern double rint (double __x) throw (); extern double __rint (double __x) throw ();


extern double nextafter (double __x, double __y) throw (); extern double __nextafter (double __x, double __y) throw ();

extern double nexttoward (double __x, long double __y) throw (); extern double __nexttoward (double __x, long double __y) throw ();




extern double nextdown (double __x) throw (); extern double __nextdown (double __x) throw ();

extern double nextup (double __x) throw (); extern double __nextup (double __x) throw ();



extern double remainder (double __x, double __y) throw (); extern double __remainder (double __x, double __y) throw ();



extern double scalbn (double __x, int __n) throw (); extern double __scalbn (double __x, int __n) throw ();



extern int ilogb (double __x) throw (); extern int __ilogb (double __x) throw ();




extern long int llogb (double __x) throw (); extern long int __llogb (double __x) throw ();




extern double scalbln (double __x, long int __n) throw (); extern double __scalbln (double __x, long int __n) throw ();



extern double nearbyint (double __x) throw (); extern double __nearbyint (double __x) throw ();



extern double round (double __x) throw () __attribute__ ((__const__)); extern double __round (double __x) throw () __attribute__ ((__const__));



extern double trunc (double __x) throw () __attribute__ ((__const__)); extern double __trunc (double __x) throw () __attribute__ ((__const__));




extern double remquo (double __x, double __y, int *__quo) throw (); extern double __remquo (double __x, double __y, int *__quo) throw ();






extern long int lrint (double __x) throw (); extern long int __lrint (double __x) throw ();
__extension__
extern long long int llrint (double __x) throw (); extern long long int __llrint (double __x) throw ();



extern long int lround (double __x) throw (); extern long int __lround (double __x) throw ();
__extension__
extern long long int llround (double __x) throw (); extern long long int __llround (double __x) throw ();



extern double fdim (double __x, double __y) throw (); extern double __fdim (double __x, double __y) throw ();


extern double fmax (double __x, double __y) throw () __attribute__ ((__const__)); extern double __fmax (double __x, double __y) throw () __attribute__ ((__const__));


extern double fmin (double __x, double __y) throw () __attribute__ ((__const__)); extern double __fmin (double __x, double __y) throw () __attribute__ ((__const__));


extern double fma (double __x, double __y, double __z) throw (); extern double __fma (double __x, double __y, double __z) throw ();




extern double roundeven (double __x) throw () __attribute__ ((__const__)); extern double __roundeven (double __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfp (double __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfp (double __x, int __round, unsigned int __width) throw ()
                            ;



extern __uintmax_t ufromfp (double __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfp (double __x, int __round, unsigned int __width) throw ()
                              ;




extern __intmax_t fromfpx (double __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpx (double __x, int __round, unsigned int __width) throw ()
                             ;




extern __uintmax_t ufromfpx (double __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpx (double __x, int __round, unsigned int __width) throw ()
                               ;


extern double fmaxmag (double __x, double __y) throw () __attribute__ ((__const__)); extern double __fmaxmag (double __x, double __y) throw () __attribute__ ((__const__));


extern double fminmag (double __x, double __y) throw () __attribute__ ((__const__)); extern double __fminmag (double __x, double __y) throw () __attribute__ ((__const__));


extern int canonicalize (double *__cx, const double *__x) throw ();




extern int totalorder (const double *__x, const double *__y) throw ()

     __attribute__ ((__pure__));


extern int totalordermag (const double *__x, const double *__y) throw ()

     __attribute__ ((__pure__));


extern double getpayload (const double *__x) throw (); extern double __getpayload (const double *__x) throw ();


extern int setpayload (double *__x, double __payload) throw ();


extern int setpayloadsig (double *__x, double __payload) throw ();







extern double scalb (double __x, double __n) throw (); extern double __scalb (double __x, double __n) throw ();
# 291 "/usr/include/math.h" 2 3 4
# 306 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassifyf (float __value) throw ()
     __attribute__ ((__const__));


extern int __signbitf (float __value) throw ()
     __attribute__ ((__const__));



extern int __isinff (float __value) throw () __attribute__ ((__const__));


extern int __finitef (float __value) throw () __attribute__ ((__const__));


extern int __isnanf (float __value) throw () __attribute__ ((__const__));


extern int __iseqsigf (float __x, float __y) throw ();


extern int __issignalingf (float __value) throw ()
     __attribute__ ((__const__));
# 307 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern float acosf (float __x) throw (); extern float __acosf (float __x) throw ();

extern float asinf (float __x) throw (); extern float __asinf (float __x) throw ();

extern float atanf (float __x) throw (); extern float __atanf (float __x) throw ();

extern float atan2f (float __y, float __x) throw (); extern float __atan2f (float __y, float __x) throw ();


 extern float cosf (float __x) throw (); extern float __cosf (float __x) throw ();

 extern float sinf (float __x) throw (); extern float __sinf (float __x) throw ();

extern float tanf (float __x) throw (); extern float __tanf (float __x) throw ();




extern float coshf (float __x) throw (); extern float __coshf (float __x) throw ();

extern float sinhf (float __x) throw (); extern float __sinhf (float __x) throw ();

extern float tanhf (float __x) throw (); extern float __tanhf (float __x) throw ();



 extern void sincosf (float __x, float *__sinx, float *__cosx) throw (); extern void __sincosf (float __x, float *__sinx, float *__cosx) throw ()
                                                        ;




extern float acoshf (float __x) throw (); extern float __acoshf (float __x) throw ();

extern float asinhf (float __x) throw (); extern float __asinhf (float __x) throw ();

extern float atanhf (float __x) throw (); extern float __atanhf (float __x) throw ();





 extern float expf (float __x) throw (); extern float __expf (float __x) throw ();


extern float frexpf (float __x, int *__exponent) throw (); extern float __frexpf (float __x, int *__exponent) throw ();


extern float ldexpf (float __x, int __exponent) throw (); extern float __ldexpf (float __x, int __exponent) throw ();


 extern float logf (float __x) throw (); extern float __logf (float __x) throw ();


extern float log10f (float __x) throw (); extern float __log10f (float __x) throw ();


extern float modff (float __x, float *__iptr) throw (); extern float __modff (float __x, float *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern float exp10f (float __x) throw (); extern float __exp10f (float __x) throw ();




extern float expm1f (float __x) throw (); extern float __expm1f (float __x) throw ();


extern float log1pf (float __x) throw (); extern float __log1pf (float __x) throw ();


extern float logbf (float __x) throw (); extern float __logbf (float __x) throw ();




extern float exp2f (float __x) throw (); extern float __exp2f (float __x) throw ();


extern float log2f (float __x) throw (); extern float __log2f (float __x) throw ();






 extern float powf (float __x, float __y) throw (); extern float __powf (float __x, float __y) throw ();


extern float sqrtf (float __x) throw (); extern float __sqrtf (float __x) throw ();



extern float hypotf (float __x, float __y) throw (); extern float __hypotf (float __x, float __y) throw ();




extern float cbrtf (float __x) throw (); extern float __cbrtf (float __x) throw ();






extern float ceilf (float __x) throw () __attribute__ ((__const__)); extern float __ceilf (float __x) throw () __attribute__ ((__const__));


extern float fabsf (float __x) throw () __attribute__ ((__const__)); extern float __fabsf (float __x) throw () __attribute__ ((__const__));


extern float floorf (float __x) throw () __attribute__ ((__const__)); extern float __floorf (float __x) throw () __attribute__ ((__const__));


extern float fmodf (float __x, float __y) throw (); extern float __fmodf (float __x, float __y) throw ();
# 177 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isinff (float __value) throw () __attribute__ ((__const__));




extern int finitef (float __value) throw () __attribute__ ((__const__));


extern float dremf (float __x, float __y) throw (); extern float __dremf (float __x, float __y) throw ();



extern float significandf (float __x) throw (); extern float __significandf (float __x) throw ();






extern float copysignf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __copysignf (float __x, float __y) throw () __attribute__ ((__const__));




extern float nanf (const char *__tagb) throw (); extern float __nanf (const char *__tagb) throw ();
# 211 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isnanf (float __value) throw () __attribute__ ((__const__));





extern float j0f (float) throw (); extern float __j0f (float) throw ();
extern float j1f (float) throw (); extern float __j1f (float) throw ();
extern float jnf (int, float) throw (); extern float __jnf (int, float) throw ();
extern float y0f (float) throw (); extern float __y0f (float) throw ();
extern float y1f (float) throw (); extern float __y1f (float) throw ();
extern float ynf (int, float) throw (); extern float __ynf (int, float) throw ();





extern float erff (float) throw (); extern float __erff (float) throw ();
extern float erfcf (float) throw (); extern float __erfcf (float) throw ();
extern float lgammaf (float) throw (); extern float __lgammaf (float) throw ();




extern float tgammaf (float) throw (); extern float __tgammaf (float) throw ();





extern float gammaf (float) throw (); extern float __gammaf (float) throw ();







extern float lgammaf_r (float, int *__signgamp) throw (); extern float __lgammaf_r (float, int *__signgamp) throw ();






extern float rintf (float __x) throw (); extern float __rintf (float __x) throw ();


extern float nextafterf (float __x, float __y) throw (); extern float __nextafterf (float __x, float __y) throw ();

extern float nexttowardf (float __x, long double __y) throw (); extern float __nexttowardf (float __x, long double __y) throw ();




extern float nextdownf (float __x) throw (); extern float __nextdownf (float __x) throw ();

extern float nextupf (float __x) throw (); extern float __nextupf (float __x) throw ();



extern float remainderf (float __x, float __y) throw (); extern float __remainderf (float __x, float __y) throw ();



extern float scalbnf (float __x, int __n) throw (); extern float __scalbnf (float __x, int __n) throw ();



extern int ilogbf (float __x) throw (); extern int __ilogbf (float __x) throw ();




extern long int llogbf (float __x) throw (); extern long int __llogbf (float __x) throw ();




extern float scalblnf (float __x, long int __n) throw (); extern float __scalblnf (float __x, long int __n) throw ();



extern float nearbyintf (float __x) throw (); extern float __nearbyintf (float __x) throw ();



extern float roundf (float __x) throw () __attribute__ ((__const__)); extern float __roundf (float __x) throw () __attribute__ ((__const__));



extern float truncf (float __x) throw () __attribute__ ((__const__)); extern float __truncf (float __x) throw () __attribute__ ((__const__));




extern float remquof (float __x, float __y, int *__quo) throw (); extern float __remquof (float __x, float __y, int *__quo) throw ();






extern long int lrintf (float __x) throw (); extern long int __lrintf (float __x) throw ();
__extension__
extern long long int llrintf (float __x) throw (); extern long long int __llrintf (float __x) throw ();



extern long int lroundf (float __x) throw (); extern long int __lroundf (float __x) throw ();
__extension__
extern long long int llroundf (float __x) throw (); extern long long int __llroundf (float __x) throw ();



extern float fdimf (float __x, float __y) throw (); extern float __fdimf (float __x, float __y) throw ();


extern float fmaxf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __fmaxf (float __x, float __y) throw () __attribute__ ((__const__));


extern float fminf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __fminf (float __x, float __y) throw () __attribute__ ((__const__));


extern float fmaf (float __x, float __y, float __z) throw (); extern float __fmaf (float __x, float __y, float __z) throw ();




extern float roundevenf (float __x) throw () __attribute__ ((__const__)); extern float __roundevenf (float __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfpf (float __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpf (float __x, int __round, unsigned int __width) throw ()
                            ;



extern __uintmax_t ufromfpf (float __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpf (float __x, int __round, unsigned int __width) throw ()
                              ;




extern __intmax_t fromfpxf (float __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpxf (float __x, int __round, unsigned int __width) throw ()
                             ;




extern __uintmax_t ufromfpxf (float __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpxf (float __x, int __round, unsigned int __width) throw ()
                               ;


extern float fmaxmagf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __fmaxmagf (float __x, float __y) throw () __attribute__ ((__const__));


extern float fminmagf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __fminmagf (float __x, float __y) throw () __attribute__ ((__const__));


extern int canonicalizef (float *__cx, const float *__x) throw ();




extern int totalorderf (const float *__x, const float *__y) throw ()

     __attribute__ ((__pure__));


extern int totalordermagf (const float *__x, const float *__y) throw ()

     __attribute__ ((__pure__));


extern float getpayloadf (const float *__x) throw (); extern float __getpayloadf (const float *__x) throw ();


extern int setpayloadf (float *__x, float __payload) throw ();


extern int setpayloadsigf (float *__x, float __payload) throw ();







extern float scalbf (float __x, float __n) throw (); extern float __scalbf (float __x, float __n) throw ();
# 308 "/usr/include/math.h" 2 3 4
# 349 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassifyl (long double __value) throw ()
     __attribute__ ((__const__));


extern int __signbitl (long double __value) throw ()
     __attribute__ ((__const__));



extern int __isinfl (long double __value) throw () __attribute__ ((__const__));


extern int __finitel (long double __value) throw () __attribute__ ((__const__));


extern int __isnanl (long double __value) throw () __attribute__ ((__const__));


extern int __iseqsigl (long double __x, long double __y) throw ();


extern int __issignalingl (long double __value) throw ()
     __attribute__ ((__const__));
# 350 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern long double acosl (long double __x) throw (); extern long double __acosl (long double __x) throw ();

extern long double asinl (long double __x) throw (); extern long double __asinl (long double __x) throw ();

extern long double atanl (long double __x) throw (); extern long double __atanl (long double __x) throw ();

extern long double atan2l (long double __y, long double __x) throw (); extern long double __atan2l (long double __y, long double __x) throw ();


 extern long double cosl (long double __x) throw (); extern long double __cosl (long double __x) throw ();

 extern long double sinl (long double __x) throw (); extern long double __sinl (long double __x) throw ();

extern long double tanl (long double __x) throw (); extern long double __tanl (long double __x) throw ();




extern long double coshl (long double __x) throw (); extern long double __coshl (long double __x) throw ();

extern long double sinhl (long double __x) throw (); extern long double __sinhl (long double __x) throw ();

extern long double tanhl (long double __x) throw (); extern long double __tanhl (long double __x) throw ();



 extern void sincosl (long double __x, long double *__sinx, long double *__cosx) throw (); extern void __sincosl (long double __x, long double *__sinx, long double *__cosx) throw ()
                                                        ;




extern long double acoshl (long double __x) throw (); extern long double __acoshl (long double __x) throw ();

extern long double asinhl (long double __x) throw (); extern long double __asinhl (long double __x) throw ();

extern long double atanhl (long double __x) throw (); extern long double __atanhl (long double __x) throw ();





 extern long double expl (long double __x) throw (); extern long double __expl (long double __x) throw ();


extern long double frexpl (long double __x, int *__exponent) throw (); extern long double __frexpl (long double __x, int *__exponent) throw ();


extern long double ldexpl (long double __x, int __exponent) throw (); extern long double __ldexpl (long double __x, int __exponent) throw ();


 extern long double logl (long double __x) throw (); extern long double __logl (long double __x) throw ();


extern long double log10l (long double __x) throw (); extern long double __log10l (long double __x) throw ();


extern long double modfl (long double __x, long double *__iptr) throw (); extern long double __modfl (long double __x, long double *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern long double exp10l (long double __x) throw (); extern long double __exp10l (long double __x) throw ();




extern long double expm1l (long double __x) throw (); extern long double __expm1l (long double __x) throw ();


extern long double log1pl (long double __x) throw (); extern long double __log1pl (long double __x) throw ();


extern long double logbl (long double __x) throw (); extern long double __logbl (long double __x) throw ();




extern long double exp2l (long double __x) throw (); extern long double __exp2l (long double __x) throw ();


extern long double log2l (long double __x) throw (); extern long double __log2l (long double __x) throw ();






 extern long double powl (long double __x, long double __y) throw (); extern long double __powl (long double __x, long double __y) throw ();


extern long double sqrtl (long double __x) throw (); extern long double __sqrtl (long double __x) throw ();



extern long double hypotl (long double __x, long double __y) throw (); extern long double __hypotl (long double __x, long double __y) throw ();




extern long double cbrtl (long double __x) throw (); extern long double __cbrtl (long double __x) throw ();






extern long double ceill (long double __x) throw () __attribute__ ((__const__)); extern long double __ceill (long double __x) throw () __attribute__ ((__const__));


extern long double fabsl (long double __x) throw () __attribute__ ((__const__)); extern long double __fabsl (long double __x) throw () __attribute__ ((__const__));


extern long double floorl (long double __x) throw () __attribute__ ((__const__)); extern long double __floorl (long double __x) throw () __attribute__ ((__const__));


extern long double fmodl (long double __x, long double __y) throw (); extern long double __fmodl (long double __x, long double __y) throw ();
# 177 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isinfl (long double __value) throw () __attribute__ ((__const__));




extern int finitel (long double __value) throw () __attribute__ ((__const__));


extern long double dreml (long double __x, long double __y) throw (); extern long double __dreml (long double __x, long double __y) throw ();



extern long double significandl (long double __x) throw (); extern long double __significandl (long double __x) throw ();






extern long double copysignl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __copysignl (long double __x, long double __y) throw () __attribute__ ((__const__));




extern long double nanl (const char *__tagb) throw (); extern long double __nanl (const char *__tagb) throw ();
# 211 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isnanl (long double __value) throw () __attribute__ ((__const__));





extern long double j0l (long double) throw (); extern long double __j0l (long double) throw ();
extern long double j1l (long double) throw (); extern long double __j1l (long double) throw ();
extern long double jnl (int, long double) throw (); extern long double __jnl (int, long double) throw ();
extern long double y0l (long double) throw (); extern long double __y0l (long double) throw ();
extern long double y1l (long double) throw (); extern long double __y1l (long double) throw ();
extern long double ynl (int, long double) throw (); extern long double __ynl (int, long double) throw ();





extern long double erfl (long double) throw (); extern long double __erfl (long double) throw ();
extern long double erfcl (long double) throw (); extern long double __erfcl (long double) throw ();
extern long double lgammal (long double) throw (); extern long double __lgammal (long double) throw ();




extern long double tgammal (long double) throw (); extern long double __tgammal (long double) throw ();





extern long double gammal (long double) throw (); extern long double __gammal (long double) throw ();







extern long double lgammal_r (long double, int *__signgamp) throw (); extern long double __lgammal_r (long double, int *__signgamp) throw ();






extern long double rintl (long double __x) throw (); extern long double __rintl (long double __x) throw ();


extern long double nextafterl (long double __x, long double __y) throw (); extern long double __nextafterl (long double __x, long double __y) throw ();

extern long double nexttowardl (long double __x, long double __y) throw (); extern long double __nexttowardl (long double __x, long double __y) throw ();




extern long double nextdownl (long double __x) throw (); extern long double __nextdownl (long double __x) throw ();

extern long double nextupl (long double __x) throw (); extern long double __nextupl (long double __x) throw ();



extern long double remainderl (long double __x, long double __y) throw (); extern long double __remainderl (long double __x, long double __y) throw ();



extern long double scalbnl (long double __x, int __n) throw (); extern long double __scalbnl (long double __x, int __n) throw ();



extern int ilogbl (long double __x) throw (); extern int __ilogbl (long double __x) throw ();




extern long int llogbl (long double __x) throw (); extern long int __llogbl (long double __x) throw ();




extern long double scalblnl (long double __x, long int __n) throw (); extern long double __scalblnl (long double __x, long int __n) throw ();



extern long double nearbyintl (long double __x) throw (); extern long double __nearbyintl (long double __x) throw ();



extern long double roundl (long double __x) throw () __attribute__ ((__const__)); extern long double __roundl (long double __x) throw () __attribute__ ((__const__));



extern long double truncl (long double __x) throw () __attribute__ ((__const__)); extern long double __truncl (long double __x) throw () __attribute__ ((__const__));




extern long double remquol (long double __x, long double __y, int *__quo) throw (); extern long double __remquol (long double __x, long double __y, int *__quo) throw ();






extern long int lrintl (long double __x) throw (); extern long int __lrintl (long double __x) throw ();
__extension__
extern long long int llrintl (long double __x) throw (); extern long long int __llrintl (long double __x) throw ();



extern long int lroundl (long double __x) throw (); extern long int __lroundl (long double __x) throw ();
__extension__
extern long long int llroundl (long double __x) throw (); extern long long int __llroundl (long double __x) throw ();



extern long double fdiml (long double __x, long double __y) throw (); extern long double __fdiml (long double __x, long double __y) throw ();


extern long double fmaxl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __fmaxl (long double __x, long double __y) throw () __attribute__ ((__const__));


extern long double fminl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __fminl (long double __x, long double __y) throw () __attribute__ ((__const__));


extern long double fmal (long double __x, long double __y, long double __z) throw (); extern long double __fmal (long double __x, long double __y, long double __z) throw ();




extern long double roundevenl (long double __x) throw () __attribute__ ((__const__)); extern long double __roundevenl (long double __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfpl (long double __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpl (long double __x, int __round, unsigned int __width) throw ()
                            ;



extern __uintmax_t ufromfpl (long double __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpl (long double __x, int __round, unsigned int __width) throw ()
                              ;




extern __intmax_t fromfpxl (long double __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpxl (long double __x, int __round, unsigned int __width) throw ()
                             ;




extern __uintmax_t ufromfpxl (long double __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpxl (long double __x, int __round, unsigned int __width) throw ()
                               ;


extern long double fmaxmagl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __fmaxmagl (long double __x, long double __y) throw () __attribute__ ((__const__));


extern long double fminmagl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __fminmagl (long double __x, long double __y) throw () __attribute__ ((__const__));


extern int canonicalizel (long double *__cx, const long double *__x) throw ();




extern int totalorderl (const long double *__x, const long double *__y) throw ()

     __attribute__ ((__pure__));


extern int totalordermagl (const long double *__x, const long double *__y) throw ()

     __attribute__ ((__pure__));


extern long double getpayloadl (const long double *__x) throw (); extern long double __getpayloadl (const long double *__x) throw ();


extern int setpayloadl (long double *__x, long double __payload) throw ();


extern int setpayloadsigl (long double *__x, long double __payload) throw ();







extern long double scalbl (long double __x, long double __n) throw (); extern long double __scalbl (long double __x, long double __n) throw ();
# 351 "/usr/include/math.h" 2 3 4
# 389 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32 acosf32 (_Float32 __x) throw (); extern _Float32 __acosf32 (_Float32 __x) throw ();

extern _Float32 asinf32 (_Float32 __x) throw (); extern _Float32 __asinf32 (_Float32 __x) throw ();

extern _Float32 atanf32 (_Float32 __x) throw (); extern _Float32 __atanf32 (_Float32 __x) throw ();

extern _Float32 atan2f32 (_Float32 __y, _Float32 __x) throw (); extern _Float32 __atan2f32 (_Float32 __y, _Float32 __x) throw ();


 extern _Float32 cosf32 (_Float32 __x) throw (); extern _Float32 __cosf32 (_Float32 __x) throw ();

 extern _Float32 sinf32 (_Float32 __x) throw (); extern _Float32 __sinf32 (_Float32 __x) throw ();

extern _Float32 tanf32 (_Float32 __x) throw (); extern _Float32 __tanf32 (_Float32 __x) throw ();




extern _Float32 coshf32 (_Float32 __x) throw (); extern _Float32 __coshf32 (_Float32 __x) throw ();

extern _Float32 sinhf32 (_Float32 __x) throw (); extern _Float32 __sinhf32 (_Float32 __x) throw ();

extern _Float32 tanhf32 (_Float32 __x) throw (); extern _Float32 __tanhf32 (_Float32 __x) throw ();



 extern void sincosf32 (_Float32 __x, _Float32 *__sinx, _Float32 *__cosx) throw (); extern void __sincosf32 (_Float32 __x, _Float32 *__sinx, _Float32 *__cosx) throw ()
                                                        ;




extern _Float32 acoshf32 (_Float32 __x) throw (); extern _Float32 __acoshf32 (_Float32 __x) throw ();

extern _Float32 asinhf32 (_Float32 __x) throw (); extern _Float32 __asinhf32 (_Float32 __x) throw ();

extern _Float32 atanhf32 (_Float32 __x) throw (); extern _Float32 __atanhf32 (_Float32 __x) throw ();





 extern _Float32 expf32 (_Float32 __x) throw (); extern _Float32 __expf32 (_Float32 __x) throw ();


extern _Float32 frexpf32 (_Float32 __x, int *__exponent) throw (); extern _Float32 __frexpf32 (_Float32 __x, int *__exponent) throw ();


extern _Float32 ldexpf32 (_Float32 __x, int __exponent) throw (); extern _Float32 __ldexpf32 (_Float32 __x, int __exponent) throw ();


 extern _Float32 logf32 (_Float32 __x) throw (); extern _Float32 __logf32 (_Float32 __x) throw ();


extern _Float32 log10f32 (_Float32 __x) throw (); extern _Float32 __log10f32 (_Float32 __x) throw ();


extern _Float32 modff32 (_Float32 __x, _Float32 *__iptr) throw (); extern _Float32 __modff32 (_Float32 __x, _Float32 *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern _Float32 exp10f32 (_Float32 __x) throw (); extern _Float32 __exp10f32 (_Float32 __x) throw ();




extern _Float32 expm1f32 (_Float32 __x) throw (); extern _Float32 __expm1f32 (_Float32 __x) throw ();


extern _Float32 log1pf32 (_Float32 __x) throw (); extern _Float32 __log1pf32 (_Float32 __x) throw ();


extern _Float32 logbf32 (_Float32 __x) throw (); extern _Float32 __logbf32 (_Float32 __x) throw ();




extern _Float32 exp2f32 (_Float32 __x) throw (); extern _Float32 __exp2f32 (_Float32 __x) throw ();


extern _Float32 log2f32 (_Float32 __x) throw (); extern _Float32 __log2f32 (_Float32 __x) throw ();






 extern _Float32 powf32 (_Float32 __x, _Float32 __y) throw (); extern _Float32 __powf32 (_Float32 __x, _Float32 __y) throw ();


extern _Float32 sqrtf32 (_Float32 __x) throw (); extern _Float32 __sqrtf32 (_Float32 __x) throw ();



extern _Float32 hypotf32 (_Float32 __x, _Float32 __y) throw (); extern _Float32 __hypotf32 (_Float32 __x, _Float32 __y) throw ();




extern _Float32 cbrtf32 (_Float32 __x) throw (); extern _Float32 __cbrtf32 (_Float32 __x) throw ();






extern _Float32 ceilf32 (_Float32 __x) throw () __attribute__ ((__const__)); extern _Float32 __ceilf32 (_Float32 __x) throw () __attribute__ ((__const__));


extern _Float32 fabsf32 (_Float32 __x) throw () __attribute__ ((__const__)); extern _Float32 __fabsf32 (_Float32 __x) throw () __attribute__ ((__const__));


extern _Float32 floorf32 (_Float32 __x) throw () __attribute__ ((__const__)); extern _Float32 __floorf32 (_Float32 __x) throw () __attribute__ ((__const__));


extern _Float32 fmodf32 (_Float32 __x, _Float32 __y) throw (); extern _Float32 __fmodf32 (_Float32 __x, _Float32 __y) throw ();
# 196 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32 copysignf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__)); extern _Float32 __copysignf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__));




extern _Float32 nanf32 (const char *__tagb) throw (); extern _Float32 __nanf32 (const char *__tagb) throw ();
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32 j0f32 (_Float32) throw (); extern _Float32 __j0f32 (_Float32) throw ();
extern _Float32 j1f32 (_Float32) throw (); extern _Float32 __j1f32 (_Float32) throw ();
extern _Float32 jnf32 (int, _Float32) throw (); extern _Float32 __jnf32 (int, _Float32) throw ();
extern _Float32 y0f32 (_Float32) throw (); extern _Float32 __y0f32 (_Float32) throw ();
extern _Float32 y1f32 (_Float32) throw (); extern _Float32 __y1f32 (_Float32) throw ();
extern _Float32 ynf32 (int, _Float32) throw (); extern _Float32 __ynf32 (int, _Float32) throw ();





extern _Float32 erff32 (_Float32) throw (); extern _Float32 __erff32 (_Float32) throw ();
extern _Float32 erfcf32 (_Float32) throw (); extern _Float32 __erfcf32 (_Float32) throw ();
extern _Float32 lgammaf32 (_Float32) throw (); extern _Float32 __lgammaf32 (_Float32) throw ();




extern _Float32 tgammaf32 (_Float32) throw (); extern _Float32 __tgammaf32 (_Float32) throw ();
# 249 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32 lgammaf32_r (_Float32, int *__signgamp) throw (); extern _Float32 __lgammaf32_r (_Float32, int *__signgamp) throw ();






extern _Float32 rintf32 (_Float32 __x) throw (); extern _Float32 __rintf32 (_Float32 __x) throw ();


extern _Float32 nextafterf32 (_Float32 __x, _Float32 __y) throw (); extern _Float32 __nextafterf32 (_Float32 __x, _Float32 __y) throw ();






extern _Float32 nextdownf32 (_Float32 __x) throw (); extern _Float32 __nextdownf32 (_Float32 __x) throw ();

extern _Float32 nextupf32 (_Float32 __x) throw (); extern _Float32 __nextupf32 (_Float32 __x) throw ();



extern _Float32 remainderf32 (_Float32 __x, _Float32 __y) throw (); extern _Float32 __remainderf32 (_Float32 __x, _Float32 __y) throw ();



extern _Float32 scalbnf32 (_Float32 __x, int __n) throw (); extern _Float32 __scalbnf32 (_Float32 __x, int __n) throw ();



extern int ilogbf32 (_Float32 __x) throw (); extern int __ilogbf32 (_Float32 __x) throw ();




extern long int llogbf32 (_Float32 __x) throw (); extern long int __llogbf32 (_Float32 __x) throw ();




extern _Float32 scalblnf32 (_Float32 __x, long int __n) throw (); extern _Float32 __scalblnf32 (_Float32 __x, long int __n) throw ();



extern _Float32 nearbyintf32 (_Float32 __x) throw (); extern _Float32 __nearbyintf32 (_Float32 __x) throw ();



extern _Float32 roundf32 (_Float32 __x) throw () __attribute__ ((__const__)); extern _Float32 __roundf32 (_Float32 __x) throw () __attribute__ ((__const__));



extern _Float32 truncf32 (_Float32 __x) throw () __attribute__ ((__const__)); extern _Float32 __truncf32 (_Float32 __x) throw () __attribute__ ((__const__));




extern _Float32 remquof32 (_Float32 __x, _Float32 __y, int *__quo) throw (); extern _Float32 __remquof32 (_Float32 __x, _Float32 __y, int *__quo) throw ();






extern long int lrintf32 (_Float32 __x) throw (); extern long int __lrintf32 (_Float32 __x) throw ();
__extension__
extern long long int llrintf32 (_Float32 __x) throw (); extern long long int __llrintf32 (_Float32 __x) throw ();



extern long int lroundf32 (_Float32 __x) throw (); extern long int __lroundf32 (_Float32 __x) throw ();
__extension__
extern long long int llroundf32 (_Float32 __x) throw (); extern long long int __llroundf32 (_Float32 __x) throw ();



extern _Float32 fdimf32 (_Float32 __x, _Float32 __y) throw (); extern _Float32 __fdimf32 (_Float32 __x, _Float32 __y) throw ();


extern _Float32 fmaxf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__)); extern _Float32 __fmaxf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__));


extern _Float32 fminf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__)); extern _Float32 __fminf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__));


extern _Float32 fmaf32 (_Float32 __x, _Float32 __y, _Float32 __z) throw (); extern _Float32 __fmaf32 (_Float32 __x, _Float32 __y, _Float32 __z) throw ();




extern _Float32 roundevenf32 (_Float32 __x) throw () __attribute__ ((__const__)); extern _Float32 __roundevenf32 (_Float32 __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfpf32 (_Float32 __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpf32 (_Float32 __x, int __round, unsigned int __width) throw ()
                            ;



extern __uintmax_t ufromfpf32 (_Float32 __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpf32 (_Float32 __x, int __round, unsigned int __width) throw ()
                              ;




extern __intmax_t fromfpxf32 (_Float32 __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpxf32 (_Float32 __x, int __round, unsigned int __width) throw ()
                             ;




extern __uintmax_t ufromfpxf32 (_Float32 __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpxf32 (_Float32 __x, int __round, unsigned int __width) throw ()
                               ;


extern _Float32 fmaxmagf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__)); extern _Float32 __fmaxmagf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__));


extern _Float32 fminmagf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__)); extern _Float32 __fminmagf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__));


extern int canonicalizef32 (_Float32 *__cx, const _Float32 *__x) throw ();




extern int totalorderf32 (const _Float32 *__x, const _Float32 *__y) throw ()

     __attribute__ ((__pure__));


extern int totalordermagf32 (const _Float32 *__x, const _Float32 *__y) throw ()

     __attribute__ ((__pure__));


extern _Float32 getpayloadf32 (const _Float32 *__x) throw (); extern _Float32 __getpayloadf32 (const _Float32 *__x) throw ();


extern int setpayloadf32 (_Float32 *__x, _Float32 __payload) throw ();


extern int setpayloadsigf32 (_Float32 *__x, _Float32 __payload) throw ();
# 390 "/usr/include/math.h" 2 3 4
# 406 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64 acosf64 (_Float64 __x) throw (); extern _Float64 __acosf64 (_Float64 __x) throw ();

extern _Float64 asinf64 (_Float64 __x) throw (); extern _Float64 __asinf64 (_Float64 __x) throw ();

extern _Float64 atanf64 (_Float64 __x) throw (); extern _Float64 __atanf64 (_Float64 __x) throw ();

extern _Float64 atan2f64 (_Float64 __y, _Float64 __x) throw (); extern _Float64 __atan2f64 (_Float64 __y, _Float64 __x) throw ();


 extern _Float64 cosf64 (_Float64 __x) throw (); extern _Float64 __cosf64 (_Float64 __x) throw ();

 extern _Float64 sinf64 (_Float64 __x) throw (); extern _Float64 __sinf64 (_Float64 __x) throw ();

extern _Float64 tanf64 (_Float64 __x) throw (); extern _Float64 __tanf64 (_Float64 __x) throw ();




extern _Float64 coshf64 (_Float64 __x) throw (); extern _Float64 __coshf64 (_Float64 __x) throw ();

extern _Float64 sinhf64 (_Float64 __x) throw (); extern _Float64 __sinhf64 (_Float64 __x) throw ();

extern _Float64 tanhf64 (_Float64 __x) throw (); extern _Float64 __tanhf64 (_Float64 __x) throw ();



 extern void sincosf64 (_Float64 __x, _Float64 *__sinx, _Float64 *__cosx) throw (); extern void __sincosf64 (_Float64 __x, _Float64 *__sinx, _Float64 *__cosx) throw ()
                                                        ;




extern _Float64 acoshf64 (_Float64 __x) throw (); extern _Float64 __acoshf64 (_Float64 __x) throw ();

extern _Float64 asinhf64 (_Float64 __x) throw (); extern _Float64 __asinhf64 (_Float64 __x) throw ();

extern _Float64 atanhf64 (_Float64 __x) throw (); extern _Float64 __atanhf64 (_Float64 __x) throw ();





 extern _Float64 expf64 (_Float64 __x) throw (); extern _Float64 __expf64 (_Float64 __x) throw ();


extern _Float64 frexpf64 (_Float64 __x, int *__exponent) throw (); extern _Float64 __frexpf64 (_Float64 __x, int *__exponent) throw ();


extern _Float64 ldexpf64 (_Float64 __x, int __exponent) throw (); extern _Float64 __ldexpf64 (_Float64 __x, int __exponent) throw ();


 extern _Float64 logf64 (_Float64 __x) throw (); extern _Float64 __logf64 (_Float64 __x) throw ();


extern _Float64 log10f64 (_Float64 __x) throw (); extern _Float64 __log10f64 (_Float64 __x) throw ();


extern _Float64 modff64 (_Float64 __x, _Float64 *__iptr) throw (); extern _Float64 __modff64 (_Float64 __x, _Float64 *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern _Float64 exp10f64 (_Float64 __x) throw (); extern _Float64 __exp10f64 (_Float64 __x) throw ();




extern _Float64 expm1f64 (_Float64 __x) throw (); extern _Float64 __expm1f64 (_Float64 __x) throw ();


extern _Float64 log1pf64 (_Float64 __x) throw (); extern _Float64 __log1pf64 (_Float64 __x) throw ();


extern _Float64 logbf64 (_Float64 __x) throw (); extern _Float64 __logbf64 (_Float64 __x) throw ();




extern _Float64 exp2f64 (_Float64 __x) throw (); extern _Float64 __exp2f64 (_Float64 __x) throw ();


extern _Float64 log2f64 (_Float64 __x) throw (); extern _Float64 __log2f64 (_Float64 __x) throw ();






 extern _Float64 powf64 (_Float64 __x, _Float64 __y) throw (); extern _Float64 __powf64 (_Float64 __x, _Float64 __y) throw ();


extern _Float64 sqrtf64 (_Float64 __x) throw (); extern _Float64 __sqrtf64 (_Float64 __x) throw ();



extern _Float64 hypotf64 (_Float64 __x, _Float64 __y) throw (); extern _Float64 __hypotf64 (_Float64 __x, _Float64 __y) throw ();




extern _Float64 cbrtf64 (_Float64 __x) throw (); extern _Float64 __cbrtf64 (_Float64 __x) throw ();






extern _Float64 ceilf64 (_Float64 __x) throw () __attribute__ ((__const__)); extern _Float64 __ceilf64 (_Float64 __x) throw () __attribute__ ((__const__));


extern _Float64 fabsf64 (_Float64 __x) throw () __attribute__ ((__const__)); extern _Float64 __fabsf64 (_Float64 __x) throw () __attribute__ ((__const__));


extern _Float64 floorf64 (_Float64 __x) throw () __attribute__ ((__const__)); extern _Float64 __floorf64 (_Float64 __x) throw () __attribute__ ((__const__));


extern _Float64 fmodf64 (_Float64 __x, _Float64 __y) throw (); extern _Float64 __fmodf64 (_Float64 __x, _Float64 __y) throw ();
# 196 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64 copysignf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__)); extern _Float64 __copysignf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__));




extern _Float64 nanf64 (const char *__tagb) throw (); extern _Float64 __nanf64 (const char *__tagb) throw ();
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64 j0f64 (_Float64) throw (); extern _Float64 __j0f64 (_Float64) throw ();
extern _Float64 j1f64 (_Float64) throw (); extern _Float64 __j1f64 (_Float64) throw ();
extern _Float64 jnf64 (int, _Float64) throw (); extern _Float64 __jnf64 (int, _Float64) throw ();
extern _Float64 y0f64 (_Float64) throw (); extern _Float64 __y0f64 (_Float64) throw ();
extern _Float64 y1f64 (_Float64) throw (); extern _Float64 __y1f64 (_Float64) throw ();
extern _Float64 ynf64 (int, _Float64) throw (); extern _Float64 __ynf64 (int, _Float64) throw ();





extern _Float64 erff64 (_Float64) throw (); extern _Float64 __erff64 (_Float64) throw ();
extern _Float64 erfcf64 (_Float64) throw (); extern _Float64 __erfcf64 (_Float64) throw ();
extern _Float64 lgammaf64 (_Float64) throw (); extern _Float64 __lgammaf64 (_Float64) throw ();




extern _Float64 tgammaf64 (_Float64) throw (); extern _Float64 __tgammaf64 (_Float64) throw ();
# 249 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64 lgammaf64_r (_Float64, int *__signgamp) throw (); extern _Float64 __lgammaf64_r (_Float64, int *__signgamp) throw ();






extern _Float64 rintf64 (_Float64 __x) throw (); extern _Float64 __rintf64 (_Float64 __x) throw ();


extern _Float64 nextafterf64 (_Float64 __x, _Float64 __y) throw (); extern _Float64 __nextafterf64 (_Float64 __x, _Float64 __y) throw ();






extern _Float64 nextdownf64 (_Float64 __x) throw (); extern _Float64 __nextdownf64 (_Float64 __x) throw ();

extern _Float64 nextupf64 (_Float64 __x) throw (); extern _Float64 __nextupf64 (_Float64 __x) throw ();



extern _Float64 remainderf64 (_Float64 __x, _Float64 __y) throw (); extern _Float64 __remainderf64 (_Float64 __x, _Float64 __y) throw ();



extern _Float64 scalbnf64 (_Float64 __x, int __n) throw (); extern _Float64 __scalbnf64 (_Float64 __x, int __n) throw ();



extern int ilogbf64 (_Float64 __x) throw (); extern int __ilogbf64 (_Float64 __x) throw ();




extern long int llogbf64 (_Float64 __x) throw (); extern long int __llogbf64 (_Float64 __x) throw ();




extern _Float64 scalblnf64 (_Float64 __x, long int __n) throw (); extern _Float64 __scalblnf64 (_Float64 __x, long int __n) throw ();



extern _Float64 nearbyintf64 (_Float64 __x) throw (); extern _Float64 __nearbyintf64 (_Float64 __x) throw ();



extern _Float64 roundf64 (_Float64 __x) throw () __attribute__ ((__const__)); extern _Float64 __roundf64 (_Float64 __x) throw () __attribute__ ((__const__));



extern _Float64 truncf64 (_Float64 __x) throw () __attribute__ ((__const__)); extern _Float64 __truncf64 (_Float64 __x) throw () __attribute__ ((__const__));




extern _Float64 remquof64 (_Float64 __x, _Float64 __y, int *__quo) throw (); extern _Float64 __remquof64 (_Float64 __x, _Float64 __y, int *__quo) throw ();






extern long int lrintf64 (_Float64 __x) throw (); extern long int __lrintf64 (_Float64 __x) throw ();
__extension__
extern long long int llrintf64 (_Float64 __x) throw (); extern long long int __llrintf64 (_Float64 __x) throw ();



extern long int lroundf64 (_Float64 __x) throw (); extern long int __lroundf64 (_Float64 __x) throw ();
__extension__
extern long long int llroundf64 (_Float64 __x) throw (); extern long long int __llroundf64 (_Float64 __x) throw ();



extern _Float64 fdimf64 (_Float64 __x, _Float64 __y) throw (); extern _Float64 __fdimf64 (_Float64 __x, _Float64 __y) throw ();


extern _Float64 fmaxf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__)); extern _Float64 __fmaxf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__));


extern _Float64 fminf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__)); extern _Float64 __fminf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__));


extern _Float64 fmaf64 (_Float64 __x, _Float64 __y, _Float64 __z) throw (); extern _Float64 __fmaf64 (_Float64 __x, _Float64 __y, _Float64 __z) throw ();




extern _Float64 roundevenf64 (_Float64 __x) throw () __attribute__ ((__const__)); extern _Float64 __roundevenf64 (_Float64 __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfpf64 (_Float64 __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpf64 (_Float64 __x, int __round, unsigned int __width) throw ()
                            ;



extern __uintmax_t ufromfpf64 (_Float64 __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpf64 (_Float64 __x, int __round, unsigned int __width) throw ()
                              ;




extern __intmax_t fromfpxf64 (_Float64 __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpxf64 (_Float64 __x, int __round, unsigned int __width) throw ()
                             ;




extern __uintmax_t ufromfpxf64 (_Float64 __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpxf64 (_Float64 __x, int __round, unsigned int __width) throw ()
                               ;


extern _Float64 fmaxmagf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__)); extern _Float64 __fmaxmagf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__));


extern _Float64 fminmagf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__)); extern _Float64 __fminmagf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__));


extern int canonicalizef64 (_Float64 *__cx, const _Float64 *__x) throw ();




extern int totalorderf64 (const _Float64 *__x, const _Float64 *__y) throw ()

     __attribute__ ((__pure__));


extern int totalordermagf64 (const _Float64 *__x, const _Float64 *__y) throw ()

     __attribute__ ((__pure__));


extern _Float64 getpayloadf64 (const _Float64 *__x) throw (); extern _Float64 __getpayloadf64 (const _Float64 *__x) throw ();


extern int setpayloadf64 (_Float64 *__x, _Float64 __payload) throw ();


extern int setpayloadsigf64 (_Float64 *__x, _Float64 __payload) throw ();
# 407 "/usr/include/math.h" 2 3 4
# 420 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassifyf128 (_Float128 __value) throw ()
     __attribute__ ((__const__));


extern int __signbitf128 (_Float128 __value) throw ()
     __attribute__ ((__const__));



extern int __isinff128 (_Float128 __value) throw () __attribute__ ((__const__));


extern int __finitef128 (_Float128 __value) throw () __attribute__ ((__const__));


extern int __isnanf128 (_Float128 __value) throw () __attribute__ ((__const__));


extern int __iseqsigf128 (_Float128 __x, _Float128 __y) throw ();


extern int __issignalingf128 (_Float128 __value) throw ()
     __attribute__ ((__const__));
# 421 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float128 acosf128 (_Float128 __x) throw (); extern _Float128 __acosf128 (_Float128 __x) throw ();

extern _Float128 asinf128 (_Float128 __x) throw (); extern _Float128 __asinf128 (_Float128 __x) throw ();

extern _Float128 atanf128 (_Float128 __x) throw (); extern _Float128 __atanf128 (_Float128 __x) throw ();

extern _Float128 atan2f128 (_Float128 __y, _Float128 __x) throw (); extern _Float128 __atan2f128 (_Float128 __y, _Float128 __x) throw ();


 extern _Float128 cosf128 (_Float128 __x) throw (); extern _Float128 __cosf128 (_Float128 __x) throw ();

 extern _Float128 sinf128 (_Float128 __x) throw (); extern _Float128 __sinf128 (_Float128 __x) throw ();

extern _Float128 tanf128 (_Float128 __x) throw (); extern _Float128 __tanf128 (_Float128 __x) throw ();




extern _Float128 coshf128 (_Float128 __x) throw (); extern _Float128 __coshf128 (_Float128 __x) throw ();

extern _Float128 sinhf128 (_Float128 __x) throw (); extern _Float128 __sinhf128 (_Float128 __x) throw ();

extern _Float128 tanhf128 (_Float128 __x) throw (); extern _Float128 __tanhf128 (_Float128 __x) throw ();



 extern void sincosf128 (_Float128 __x, _Float128 *__sinx, _Float128 *__cosx) throw (); extern void __sincosf128 (_Float128 __x, _Float128 *__sinx, _Float128 *__cosx) throw ()
                                                        ;




extern _Float128 acoshf128 (_Float128 __x) throw (); extern _Float128 __acoshf128 (_Float128 __x) throw ();

extern _Float128 asinhf128 (_Float128 __x) throw (); extern _Float128 __asinhf128 (_Float128 __x) throw ();

extern _Float128 atanhf128 (_Float128 __x) throw (); extern _Float128 __atanhf128 (_Float128 __x) throw ();





 extern _Float128 expf128 (_Float128 __x) throw (); extern _Float128 __expf128 (_Float128 __x) throw ();


extern _Float128 frexpf128 (_Float128 __x, int *__exponent) throw (); extern _Float128 __frexpf128 (_Float128 __x, int *__exponent) throw ();


extern _Float128 ldexpf128 (_Float128 __x, int __exponent) throw (); extern _Float128 __ldexpf128 (_Float128 __x, int __exponent) throw ();


 extern _Float128 logf128 (_Float128 __x) throw (); extern _Float128 __logf128 (_Float128 __x) throw ();


extern _Float128 log10f128 (_Float128 __x) throw (); extern _Float128 __log10f128 (_Float128 __x) throw ();


extern _Float128 modff128 (_Float128 __x, _Float128 *__iptr) throw (); extern _Float128 __modff128 (_Float128 __x, _Float128 *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern _Float128 exp10f128 (_Float128 __x) throw (); extern _Float128 __exp10f128 (_Float128 __x) throw ();




extern _Float128 expm1f128 (_Float128 __x) throw (); extern _Float128 __expm1f128 (_Float128 __x) throw ();


extern _Float128 log1pf128 (_Float128 __x) throw (); extern _Float128 __log1pf128 (_Float128 __x) throw ();


extern _Float128 logbf128 (_Float128 __x) throw (); extern _Float128 __logbf128 (_Float128 __x) throw ();




extern _Float128 exp2f128 (_Float128 __x) throw (); extern _Float128 __exp2f128 (_Float128 __x) throw ();


extern _Float128 log2f128 (_Float128 __x) throw (); extern _Float128 __log2f128 (_Float128 __x) throw ();






 extern _Float128 powf128 (_Float128 __x, _Float128 __y) throw (); extern _Float128 __powf128 (_Float128 __x, _Float128 __y) throw ();


extern _Float128 sqrtf128 (_Float128 __x) throw (); extern _Float128 __sqrtf128 (_Float128 __x) throw ();



extern _Float128 hypotf128 (_Float128 __x, _Float128 __y) throw (); extern _Float128 __hypotf128 (_Float128 __x, _Float128 __y) throw ();




extern _Float128 cbrtf128 (_Float128 __x) throw (); extern _Float128 __cbrtf128 (_Float128 __x) throw ();






extern _Float128 ceilf128 (_Float128 __x) throw () __attribute__ ((__const__)); extern _Float128 __ceilf128 (_Float128 __x) throw () __attribute__ ((__const__));


extern _Float128 fabsf128 (_Float128 __x) throw () __attribute__ ((__const__)); extern _Float128 __fabsf128 (_Float128 __x) throw () __attribute__ ((__const__));


extern _Float128 floorf128 (_Float128 __x) throw () __attribute__ ((__const__)); extern _Float128 __floorf128 (_Float128 __x) throw () __attribute__ ((__const__));


extern _Float128 fmodf128 (_Float128 __x, _Float128 __y) throw (); extern _Float128 __fmodf128 (_Float128 __x, _Float128 __y) throw ();
# 196 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float128 copysignf128 (_Float128 __x, _Float128 __y) throw () __attribute__ ((__const__)); extern _Float128 __copysignf128 (_Float128 __x, _Float128 __y) throw () __attribute__ ((__const__));




extern _Float128 nanf128 (const char *__tagb) throw (); extern _Float128 __nanf128 (const char *__tagb) throw ();
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float128 j0f128 (_Float128) throw (); extern _Float128 __j0f128 (_Float128) throw ();
extern _Float128 j1f128 (_Float128) throw (); extern _Float128 __j1f128 (_Float128) throw ();
extern _Float128 jnf128 (int, _Float128) throw (); extern _Float128 __jnf128 (int, _Float128) throw ();
extern _Float128 y0f128 (_Float128) throw (); extern _Float128 __y0f128 (_Float128) throw ();
extern _Float128 y1f128 (_Float128) throw (); extern _Float128 __y1f128 (_Float128) throw ();
extern _Float128 ynf128 (int, _Float128) throw (); extern _Float128 __ynf128 (int, _Float128) throw ();





extern _Float128 erff128 (_Float128) throw (); extern _Float128 __erff128 (_Float128) throw ();
extern _Float128 erfcf128 (_Float128) throw (); extern _Float128 __erfcf128 (_Float128) throw ();
extern _Float128 lgammaf128 (_Float128) throw (); extern _Float128 __lgammaf128 (_Float128) throw ();




extern _Float128 tgammaf128 (_Float128) throw (); extern _Float128 __tgammaf128 (_Float128) throw ();
# 249 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float128 lgammaf128_r (_Float128, int *__signgamp) throw (); extern _Float128 __lgammaf128_r (_Float128, int *__signgamp) throw ();






extern _Float128 rintf128 (_Float128 __x) throw (); extern _Float128 __rintf128 (_Float128 __x) throw ();


extern _Float128 nextafterf128 (_Float128 __x, _Float128 __y) throw (); extern _Float128 __nextafterf128 (_Float128 __x, _Float128 __y) throw ();






extern _Float128 nextdownf128 (_Float128 __x) throw (); extern _Float128 __nextdownf128 (_Float128 __x) throw ();

extern _Float128 nextupf128 (_Float128 __x) throw (); extern _Float128 __nextupf128 (_Float128 __x) throw ();



extern _Float128 remainderf128 (_Float128 __x, _Float128 __y) throw (); extern _Float128 __remainderf128 (_Float128 __x, _Float128 __y) throw ();



extern _Float128 scalbnf128 (_Float128 __x, int __n) throw (); extern _Float128 __scalbnf128 (_Float128 __x, int __n) throw ();



extern int ilogbf128 (_Float128 __x) throw (); extern int __ilogbf128 (_Float128 __x) throw ();




extern long int llogbf128 (_Float128 __x) throw (); extern long int __llogbf128 (_Float128 __x) throw ();




extern _Float128 scalblnf128 (_Float128 __x, long int __n) throw (); extern _Float128 __scalblnf128 (_Float128 __x, long int __n) throw ();



extern _Float128 nearbyintf128 (_Float128 __x) throw (); extern _Float128 __nearbyintf128 (_Float128 __x) throw ();



extern _Float128 roundf128 (_Float128 __x) throw () __attribute__ ((__const__)); extern _Float128 __roundf128 (_Float128 __x) throw () __attribute__ ((__const__));



extern _Float128 truncf128 (_Float128 __x) throw () __attribute__ ((__const__)); extern _Float128 __truncf128 (_Float128 __x) throw () __attribute__ ((__const__));




extern _Float128 remquof128 (_Float128 __x, _Float128 __y, int *__quo) throw (); extern _Float128 __remquof128 (_Float128 __x, _Float128 __y, int *__quo) throw ();






extern long int lrintf128 (_Float128 __x) throw (); extern long int __lrintf128 (_Float128 __x) throw ();
__extension__
extern long long int llrintf128 (_Float128 __x) throw (); extern long long int __llrintf128 (_Float128 __x) throw ();



extern long int lroundf128 (_Float128 __x) throw (); extern long int __lroundf128 (_Float128 __x) throw ();
__extension__
extern long long int llroundf128 (_Float128 __x) throw (); extern long long int __llroundf128 (_Float128 __x) throw ();



extern _Float128 fdimf128 (_Float128 __x, _Float128 __y) throw (); extern _Float128 __fdimf128 (_Float128 __x, _Float128 __y) throw ();


extern _Float128 fmaxf128 (_Float128 __x, _Float128 __y) throw () __attribute__ ((__const__)); extern _Float128 __fmaxf128 (_Float128 __x, _Float128 __y) throw () __attribute__ ((__const__));


extern _Float128 fminf128 (_Float128 __x, _Float128 __y) throw () __attribute__ ((__const__)); extern _Float128 __fminf128 (_Float128 __x, _Float128 __y) throw () __attribute__ ((__const__));


extern _Float128 fmaf128 (_Float128 __x, _Float128 __y, _Float128 __z) throw (); extern _Float128 __fmaf128 (_Float128 __x, _Float128 __y, _Float128 __z) throw ();




extern _Float128 roundevenf128 (_Float128 __x) throw () __attribute__ ((__const__)); extern _Float128 __roundevenf128 (_Float128 __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfpf128 (_Float128 __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpf128 (_Float128 __x, int __round, unsigned int __width) throw ()
                            ;



extern __uintmax_t ufromfpf128 (_Float128 __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpf128 (_Float128 __x, int __round, unsigned int __width) throw ()
                              ;




extern __intmax_t fromfpxf128 (_Float128 __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpxf128 (_Float128 __x, int __round, unsigned int __width) throw ()
                             ;




extern __uintmax_t ufromfpxf128 (_Float128 __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpxf128 (_Float128 __x, int __round, unsigned int __width) throw ()
                               ;


extern _Float128 fmaxmagf128 (_Float128 __x, _Float128 __y) throw () __attribute__ ((__const__)); extern _Float128 __fmaxmagf128 (_Float128 __x, _Float128 __y) throw () __attribute__ ((__const__));


extern _Float128 fminmagf128 (_Float128 __x, _Float128 __y) throw () __attribute__ ((__const__)); extern _Float128 __fminmagf128 (_Float128 __x, _Float128 __y) throw () __attribute__ ((__const__));


extern int canonicalizef128 (_Float128 *__cx, const _Float128 *__x) throw ();




extern int totalorderf128 (const _Float128 *__x, const _Float128 *__y) throw ()

     __attribute__ ((__pure__));


extern int totalordermagf128 (const _Float128 *__x, const _Float128 *__y) throw ()

     __attribute__ ((__pure__));


extern _Float128 getpayloadf128 (const _Float128 *__x) throw (); extern _Float128 __getpayloadf128 (const _Float128 *__x) throw ();


extern int setpayloadf128 (_Float128 *__x, _Float128 __payload) throw ();


extern int setpayloadsigf128 (_Float128 *__x, _Float128 __payload) throw ();
# 424 "/usr/include/math.h" 2 3 4
# 440 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32x acosf32x (_Float32x __x) throw (); extern _Float32x __acosf32x (_Float32x __x) throw ();

extern _Float32x asinf32x (_Float32x __x) throw (); extern _Float32x __asinf32x (_Float32x __x) throw ();

extern _Float32x atanf32x (_Float32x __x) throw (); extern _Float32x __atanf32x (_Float32x __x) throw ();

extern _Float32x atan2f32x (_Float32x __y, _Float32x __x) throw (); extern _Float32x __atan2f32x (_Float32x __y, _Float32x __x) throw ();


 extern _Float32x cosf32x (_Float32x __x) throw (); extern _Float32x __cosf32x (_Float32x __x) throw ();

 extern _Float32x sinf32x (_Float32x __x) throw (); extern _Float32x __sinf32x (_Float32x __x) throw ();

extern _Float32x tanf32x (_Float32x __x) throw (); extern _Float32x __tanf32x (_Float32x __x) throw ();




extern _Float32x coshf32x (_Float32x __x) throw (); extern _Float32x __coshf32x (_Float32x __x) throw ();

extern _Float32x sinhf32x (_Float32x __x) throw (); extern _Float32x __sinhf32x (_Float32x __x) throw ();

extern _Float32x tanhf32x (_Float32x __x) throw (); extern _Float32x __tanhf32x (_Float32x __x) throw ();



 extern void sincosf32x (_Float32x __x, _Float32x *__sinx, _Float32x *__cosx) throw (); extern void __sincosf32x (_Float32x __x, _Float32x *__sinx, _Float32x *__cosx) throw ()
                                                        ;




extern _Float32x acoshf32x (_Float32x __x) throw (); extern _Float32x __acoshf32x (_Float32x __x) throw ();

extern _Float32x asinhf32x (_Float32x __x) throw (); extern _Float32x __asinhf32x (_Float32x __x) throw ();

extern _Float32x atanhf32x (_Float32x __x) throw (); extern _Float32x __atanhf32x (_Float32x __x) throw ();





 extern _Float32x expf32x (_Float32x __x) throw (); extern _Float32x __expf32x (_Float32x __x) throw ();


extern _Float32x frexpf32x (_Float32x __x, int *__exponent) throw (); extern _Float32x __frexpf32x (_Float32x __x, int *__exponent) throw ();


extern _Float32x ldexpf32x (_Float32x __x, int __exponent) throw (); extern _Float32x __ldexpf32x (_Float32x __x, int __exponent) throw ();


 extern _Float32x logf32x (_Float32x __x) throw (); extern _Float32x __logf32x (_Float32x __x) throw ();


extern _Float32x log10f32x (_Float32x __x) throw (); extern _Float32x __log10f32x (_Float32x __x) throw ();


extern _Float32x modff32x (_Float32x __x, _Float32x *__iptr) throw (); extern _Float32x __modff32x (_Float32x __x, _Float32x *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern _Float32x exp10f32x (_Float32x __x) throw (); extern _Float32x __exp10f32x (_Float32x __x) throw ();




extern _Float32x expm1f32x (_Float32x __x) throw (); extern _Float32x __expm1f32x (_Float32x __x) throw ();


extern _Float32x log1pf32x (_Float32x __x) throw (); extern _Float32x __log1pf32x (_Float32x __x) throw ();


extern _Float32x logbf32x (_Float32x __x) throw (); extern _Float32x __logbf32x (_Float32x __x) throw ();




extern _Float32x exp2f32x (_Float32x __x) throw (); extern _Float32x __exp2f32x (_Float32x __x) throw ();


extern _Float32x log2f32x (_Float32x __x) throw (); extern _Float32x __log2f32x (_Float32x __x) throw ();






 extern _Float32x powf32x (_Float32x __x, _Float32x __y) throw (); extern _Float32x __powf32x (_Float32x __x, _Float32x __y) throw ();


extern _Float32x sqrtf32x (_Float32x __x) throw (); extern _Float32x __sqrtf32x (_Float32x __x) throw ();



extern _Float32x hypotf32x (_Float32x __x, _Float32x __y) throw (); extern _Float32x __hypotf32x (_Float32x __x, _Float32x __y) throw ();




extern _Float32x cbrtf32x (_Float32x __x) throw (); extern _Float32x __cbrtf32x (_Float32x __x) throw ();






extern _Float32x ceilf32x (_Float32x __x) throw () __attribute__ ((__const__)); extern _Float32x __ceilf32x (_Float32x __x) throw () __attribute__ ((__const__));


extern _Float32x fabsf32x (_Float32x __x) throw () __attribute__ ((__const__)); extern _Float32x __fabsf32x (_Float32x __x) throw () __attribute__ ((__const__));


extern _Float32x floorf32x (_Float32x __x) throw () __attribute__ ((__const__)); extern _Float32x __floorf32x (_Float32x __x) throw () __attribute__ ((__const__));


extern _Float32x fmodf32x (_Float32x __x, _Float32x __y) throw (); extern _Float32x __fmodf32x (_Float32x __x, _Float32x __y) throw ();
# 196 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32x copysignf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__)); extern _Float32x __copysignf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__));




extern _Float32x nanf32x (const char *__tagb) throw (); extern _Float32x __nanf32x (const char *__tagb) throw ();
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32x j0f32x (_Float32x) throw (); extern _Float32x __j0f32x (_Float32x) throw ();
extern _Float32x j1f32x (_Float32x) throw (); extern _Float32x __j1f32x (_Float32x) throw ();
extern _Float32x jnf32x (int, _Float32x) throw (); extern _Float32x __jnf32x (int, _Float32x) throw ();
extern _Float32x y0f32x (_Float32x) throw (); extern _Float32x __y0f32x (_Float32x) throw ();
extern _Float32x y1f32x (_Float32x) throw (); extern _Float32x __y1f32x (_Float32x) throw ();
extern _Float32x ynf32x (int, _Float32x) throw (); extern _Float32x __ynf32x (int, _Float32x) throw ();





extern _Float32x erff32x (_Float32x) throw (); extern _Float32x __erff32x (_Float32x) throw ();
extern _Float32x erfcf32x (_Float32x) throw (); extern _Float32x __erfcf32x (_Float32x) throw ();
extern _Float32x lgammaf32x (_Float32x) throw (); extern _Float32x __lgammaf32x (_Float32x) throw ();




extern _Float32x tgammaf32x (_Float32x) throw (); extern _Float32x __tgammaf32x (_Float32x) throw ();
# 249 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32x lgammaf32x_r (_Float32x, int *__signgamp) throw (); extern _Float32x __lgammaf32x_r (_Float32x, int *__signgamp) throw ();






extern _Float32x rintf32x (_Float32x __x) throw (); extern _Float32x __rintf32x (_Float32x __x) throw ();


extern _Float32x nextafterf32x (_Float32x __x, _Float32x __y) throw (); extern _Float32x __nextafterf32x (_Float32x __x, _Float32x __y) throw ();






extern _Float32x nextdownf32x (_Float32x __x) throw (); extern _Float32x __nextdownf32x (_Float32x __x) throw ();

extern _Float32x nextupf32x (_Float32x __x) throw (); extern _Float32x __nextupf32x (_Float32x __x) throw ();



extern _Float32x remainderf32x (_Float32x __x, _Float32x __y) throw (); extern _Float32x __remainderf32x (_Float32x __x, _Float32x __y) throw ();



extern _Float32x scalbnf32x (_Float32x __x, int __n) throw (); extern _Float32x __scalbnf32x (_Float32x __x, int __n) throw ();



extern int ilogbf32x (_Float32x __x) throw (); extern int __ilogbf32x (_Float32x __x) throw ();




extern long int llogbf32x (_Float32x __x) throw (); extern long int __llogbf32x (_Float32x __x) throw ();




extern _Float32x scalblnf32x (_Float32x __x, long int __n) throw (); extern _Float32x __scalblnf32x (_Float32x __x, long int __n) throw ();



extern _Float32x nearbyintf32x (_Float32x __x) throw (); extern _Float32x __nearbyintf32x (_Float32x __x) throw ();



extern _Float32x roundf32x (_Float32x __x) throw () __attribute__ ((__const__)); extern _Float32x __roundf32x (_Float32x __x) throw () __attribute__ ((__const__));



extern _Float32x truncf32x (_Float32x __x) throw () __attribute__ ((__const__)); extern _Float32x __truncf32x (_Float32x __x) throw () __attribute__ ((__const__));




extern _Float32x remquof32x (_Float32x __x, _Float32x __y, int *__quo) throw (); extern _Float32x __remquof32x (_Float32x __x, _Float32x __y, int *__quo) throw ();






extern long int lrintf32x (_Float32x __x) throw (); extern long int __lrintf32x (_Float32x __x) throw ();
__extension__
extern long long int llrintf32x (_Float32x __x) throw (); extern long long int __llrintf32x (_Float32x __x) throw ();



extern long int lroundf32x (_Float32x __x) throw (); extern long int __lroundf32x (_Float32x __x) throw ();
__extension__
extern long long int llroundf32x (_Float32x __x) throw (); extern long long int __llroundf32x (_Float32x __x) throw ();



extern _Float32x fdimf32x (_Float32x __x, _Float32x __y) throw (); extern _Float32x __fdimf32x (_Float32x __x, _Float32x __y) throw ();


extern _Float32x fmaxf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__)); extern _Float32x __fmaxf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__));


extern _Float32x fminf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__)); extern _Float32x __fminf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__));


extern _Float32x fmaf32x (_Float32x __x, _Float32x __y, _Float32x __z) throw (); extern _Float32x __fmaf32x (_Float32x __x, _Float32x __y, _Float32x __z) throw ();




extern _Float32x roundevenf32x (_Float32x __x) throw () __attribute__ ((__const__)); extern _Float32x __roundevenf32x (_Float32x __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfpf32x (_Float32x __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpf32x (_Float32x __x, int __round, unsigned int __width) throw ()
                            ;



extern __uintmax_t ufromfpf32x (_Float32x __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpf32x (_Float32x __x, int __round, unsigned int __width) throw ()
                              ;




extern __intmax_t fromfpxf32x (_Float32x __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpxf32x (_Float32x __x, int __round, unsigned int __width) throw ()
                             ;




extern __uintmax_t ufromfpxf32x (_Float32x __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpxf32x (_Float32x __x, int __round, unsigned int __width) throw ()
                               ;


extern _Float32x fmaxmagf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__)); extern _Float32x __fmaxmagf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__));


extern _Float32x fminmagf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__)); extern _Float32x __fminmagf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__));


extern int canonicalizef32x (_Float32x *__cx, const _Float32x *__x) throw ();




extern int totalorderf32x (const _Float32x *__x, const _Float32x *__y) throw ()

     __attribute__ ((__pure__));


extern int totalordermagf32x (const _Float32x *__x, const _Float32x *__y) throw ()

     __attribute__ ((__pure__));


extern _Float32x getpayloadf32x (const _Float32x *__x) throw (); extern _Float32x __getpayloadf32x (const _Float32x *__x) throw ();


extern int setpayloadf32x (_Float32x *__x, _Float32x __payload) throw ();


extern int setpayloadsigf32x (_Float32x *__x, _Float32x __payload) throw ();
# 441 "/usr/include/math.h" 2 3 4
# 457 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64x acosf64x (_Float64x __x) throw (); extern _Float64x __acosf64x (_Float64x __x) throw ();

extern _Float64x asinf64x (_Float64x __x) throw (); extern _Float64x __asinf64x (_Float64x __x) throw ();

extern _Float64x atanf64x (_Float64x __x) throw (); extern _Float64x __atanf64x (_Float64x __x) throw ();

extern _Float64x atan2f64x (_Float64x __y, _Float64x __x) throw (); extern _Float64x __atan2f64x (_Float64x __y, _Float64x __x) throw ();


 extern _Float64x cosf64x (_Float64x __x) throw (); extern _Float64x __cosf64x (_Float64x __x) throw ();

 extern _Float64x sinf64x (_Float64x __x) throw (); extern _Float64x __sinf64x (_Float64x __x) throw ();

extern _Float64x tanf64x (_Float64x __x) throw (); extern _Float64x __tanf64x (_Float64x __x) throw ();




extern _Float64x coshf64x (_Float64x __x) throw (); extern _Float64x __coshf64x (_Float64x __x) throw ();

extern _Float64x sinhf64x (_Float64x __x) throw (); extern _Float64x __sinhf64x (_Float64x __x) throw ();

extern _Float64x tanhf64x (_Float64x __x) throw (); extern _Float64x __tanhf64x (_Float64x __x) throw ();



 extern void sincosf64x (_Float64x __x, _Float64x *__sinx, _Float64x *__cosx) throw (); extern void __sincosf64x (_Float64x __x, _Float64x *__sinx, _Float64x *__cosx) throw ()
                                                        ;




extern _Float64x acoshf64x (_Float64x __x) throw (); extern _Float64x __acoshf64x (_Float64x __x) throw ();

extern _Float64x asinhf64x (_Float64x __x) throw (); extern _Float64x __asinhf64x (_Float64x __x) throw ();

extern _Float64x atanhf64x (_Float64x __x) throw (); extern _Float64x __atanhf64x (_Float64x __x) throw ();





 extern _Float64x expf64x (_Float64x __x) throw (); extern _Float64x __expf64x (_Float64x __x) throw ();


extern _Float64x frexpf64x (_Float64x __x, int *__exponent) throw (); extern _Float64x __frexpf64x (_Float64x __x, int *__exponent) throw ();


extern _Float64x ldexpf64x (_Float64x __x, int __exponent) throw (); extern _Float64x __ldexpf64x (_Float64x __x, int __exponent) throw ();


 extern _Float64x logf64x (_Float64x __x) throw (); extern _Float64x __logf64x (_Float64x __x) throw ();


extern _Float64x log10f64x (_Float64x __x) throw (); extern _Float64x __log10f64x (_Float64x __x) throw ();


extern _Float64x modff64x (_Float64x __x, _Float64x *__iptr) throw (); extern _Float64x __modff64x (_Float64x __x, _Float64x *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern _Float64x exp10f64x (_Float64x __x) throw (); extern _Float64x __exp10f64x (_Float64x __x) throw ();




extern _Float64x expm1f64x (_Float64x __x) throw (); extern _Float64x __expm1f64x (_Float64x __x) throw ();


extern _Float64x log1pf64x (_Float64x __x) throw (); extern _Float64x __log1pf64x (_Float64x __x) throw ();


extern _Float64x logbf64x (_Float64x __x) throw (); extern _Float64x __logbf64x (_Float64x __x) throw ();




extern _Float64x exp2f64x (_Float64x __x) throw (); extern _Float64x __exp2f64x (_Float64x __x) throw ();


extern _Float64x log2f64x (_Float64x __x) throw (); extern _Float64x __log2f64x (_Float64x __x) throw ();






 extern _Float64x powf64x (_Float64x __x, _Float64x __y) throw (); extern _Float64x __powf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float64x sqrtf64x (_Float64x __x) throw (); extern _Float64x __sqrtf64x (_Float64x __x) throw ();



extern _Float64x hypotf64x (_Float64x __x, _Float64x __y) throw (); extern _Float64x __hypotf64x (_Float64x __x, _Float64x __y) throw ();




extern _Float64x cbrtf64x (_Float64x __x) throw (); extern _Float64x __cbrtf64x (_Float64x __x) throw ();






extern _Float64x ceilf64x (_Float64x __x) throw () __attribute__ ((__const__)); extern _Float64x __ceilf64x (_Float64x __x) throw () __attribute__ ((__const__));


extern _Float64x fabsf64x (_Float64x __x) throw () __attribute__ ((__const__)); extern _Float64x __fabsf64x (_Float64x __x) throw () __attribute__ ((__const__));


extern _Float64x floorf64x (_Float64x __x) throw () __attribute__ ((__const__)); extern _Float64x __floorf64x (_Float64x __x) throw () __attribute__ ((__const__));


extern _Float64x fmodf64x (_Float64x __x, _Float64x __y) throw (); extern _Float64x __fmodf64x (_Float64x __x, _Float64x __y) throw ();
# 196 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64x copysignf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__)); extern _Float64x __copysignf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__));




extern _Float64x nanf64x (const char *__tagb) throw (); extern _Float64x __nanf64x (const char *__tagb) throw ();
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64x j0f64x (_Float64x) throw (); extern _Float64x __j0f64x (_Float64x) throw ();
extern _Float64x j1f64x (_Float64x) throw (); extern _Float64x __j1f64x (_Float64x) throw ();
extern _Float64x jnf64x (int, _Float64x) throw (); extern _Float64x __jnf64x (int, _Float64x) throw ();
extern _Float64x y0f64x (_Float64x) throw (); extern _Float64x __y0f64x (_Float64x) throw ();
extern _Float64x y1f64x (_Float64x) throw (); extern _Float64x __y1f64x (_Float64x) throw ();
extern _Float64x ynf64x (int, _Float64x) throw (); extern _Float64x __ynf64x (int, _Float64x) throw ();





extern _Float64x erff64x (_Float64x) throw (); extern _Float64x __erff64x (_Float64x) throw ();
extern _Float64x erfcf64x (_Float64x) throw (); extern _Float64x __erfcf64x (_Float64x) throw ();
extern _Float64x lgammaf64x (_Float64x) throw (); extern _Float64x __lgammaf64x (_Float64x) throw ();




extern _Float64x tgammaf64x (_Float64x) throw (); extern _Float64x __tgammaf64x (_Float64x) throw ();
# 249 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64x lgammaf64x_r (_Float64x, int *__signgamp) throw (); extern _Float64x __lgammaf64x_r (_Float64x, int *__signgamp) throw ();






extern _Float64x rintf64x (_Float64x __x) throw (); extern _Float64x __rintf64x (_Float64x __x) throw ();


extern _Float64x nextafterf64x (_Float64x __x, _Float64x __y) throw (); extern _Float64x __nextafterf64x (_Float64x __x, _Float64x __y) throw ();






extern _Float64x nextdownf64x (_Float64x __x) throw (); extern _Float64x __nextdownf64x (_Float64x __x) throw ();

extern _Float64x nextupf64x (_Float64x __x) throw (); extern _Float64x __nextupf64x (_Float64x __x) throw ();



extern _Float64x remainderf64x (_Float64x __x, _Float64x __y) throw (); extern _Float64x __remainderf64x (_Float64x __x, _Float64x __y) throw ();



extern _Float64x scalbnf64x (_Float64x __x, int __n) throw (); extern _Float64x __scalbnf64x (_Float64x __x, int __n) throw ();



extern int ilogbf64x (_Float64x __x) throw (); extern int __ilogbf64x (_Float64x __x) throw ();




extern long int llogbf64x (_Float64x __x) throw (); extern long int __llogbf64x (_Float64x __x) throw ();




extern _Float64x scalblnf64x (_Float64x __x, long int __n) throw (); extern _Float64x __scalblnf64x (_Float64x __x, long int __n) throw ();



extern _Float64x nearbyintf64x (_Float64x __x) throw (); extern _Float64x __nearbyintf64x (_Float64x __x) throw ();



extern _Float64x roundf64x (_Float64x __x) throw () __attribute__ ((__const__)); extern _Float64x __roundf64x (_Float64x __x) throw () __attribute__ ((__const__));



extern _Float64x truncf64x (_Float64x __x) throw () __attribute__ ((__const__)); extern _Float64x __truncf64x (_Float64x __x) throw () __attribute__ ((__const__));




extern _Float64x remquof64x (_Float64x __x, _Float64x __y, int *__quo) throw (); extern _Float64x __remquof64x (_Float64x __x, _Float64x __y, int *__quo) throw ();






extern long int lrintf64x (_Float64x __x) throw (); extern long int __lrintf64x (_Float64x __x) throw ();
__extension__
extern long long int llrintf64x (_Float64x __x) throw (); extern long long int __llrintf64x (_Float64x __x) throw ();



extern long int lroundf64x (_Float64x __x) throw (); extern long int __lroundf64x (_Float64x __x) throw ();
__extension__
extern long long int llroundf64x (_Float64x __x) throw (); extern long long int __llroundf64x (_Float64x __x) throw ();



extern _Float64x fdimf64x (_Float64x __x, _Float64x __y) throw (); extern _Float64x __fdimf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float64x fmaxf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__)); extern _Float64x __fmaxf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__));


extern _Float64x fminf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__)); extern _Float64x __fminf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__));


extern _Float64x fmaf64x (_Float64x __x, _Float64x __y, _Float64x __z) throw (); extern _Float64x __fmaf64x (_Float64x __x, _Float64x __y, _Float64x __z) throw ();




extern _Float64x roundevenf64x (_Float64x __x) throw () __attribute__ ((__const__)); extern _Float64x __roundevenf64x (_Float64x __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfpf64x (_Float64x __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpf64x (_Float64x __x, int __round, unsigned int __width) throw ()
                            ;



extern __uintmax_t ufromfpf64x (_Float64x __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpf64x (_Float64x __x, int __round, unsigned int __width) throw ()
                              ;




extern __intmax_t fromfpxf64x (_Float64x __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpxf64x (_Float64x __x, int __round, unsigned int __width) throw ()
                             ;




extern __uintmax_t ufromfpxf64x (_Float64x __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpxf64x (_Float64x __x, int __round, unsigned int __width) throw ()
                               ;


extern _Float64x fmaxmagf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__)); extern _Float64x __fmaxmagf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__));


extern _Float64x fminmagf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__)); extern _Float64x __fminmagf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__));


extern int canonicalizef64x (_Float64x *__cx, const _Float64x *__x) throw ();




extern int totalorderf64x (const _Float64x *__x, const _Float64x *__y) throw ()

     __attribute__ ((__pure__));


extern int totalordermagf64x (const _Float64x *__x, const _Float64x *__y) throw ()

     __attribute__ ((__pure__));


extern _Float64x getpayloadf64x (const _Float64x *__x) throw (); extern _Float64x __getpayloadf64x (const _Float64x *__x) throw ();


extern int setpayloadf64x (_Float64x *__x, _Float64x __payload) throw ();


extern int setpayloadsigf64x (_Float64x *__x, _Float64x __payload) throw ();
# 458 "/usr/include/math.h" 2 3 4
# 503 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern float fadd (double __x, double __y) throw ();


extern float fdiv (double __x, double __y) throw ();


extern float fmul (double __x, double __y) throw ();


extern float fsub (double __x, double __y) throw ();
# 504 "/usr/include/math.h" 2 3 4
# 517 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern float faddl (long double __x, long double __y) throw ();


extern float fdivl (long double __x, long double __y) throw ();


extern float fmull (long double __x, long double __y) throw ();


extern float fsubl (long double __x, long double __y) throw ();
# 518 "/usr/include/math.h" 2 3 4
# 537 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern double daddl (long double __x, long double __y) throw ();


extern double ddivl (long double __x, long double __y) throw ();


extern double dmull (long double __x, long double __y) throw ();


extern double dsubl (long double __x, long double __y) throw ();
# 538 "/usr/include/math.h" 2 3 4
# 616 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float32 f32addf32x (_Float32x __x, _Float32x __y) throw ();


extern _Float32 f32divf32x (_Float32x __x, _Float32x __y) throw ();


extern _Float32 f32mulf32x (_Float32x __x, _Float32x __y) throw ();


extern _Float32 f32subf32x (_Float32x __x, _Float32x __y) throw ();
# 617 "/usr/include/math.h" 2 3 4
# 626 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float32 f32addf64 (_Float64 __x, _Float64 __y) throw ();


extern _Float32 f32divf64 (_Float64 __x, _Float64 __y) throw ();


extern _Float32 f32mulf64 (_Float64 __x, _Float64 __y) throw ();


extern _Float32 f32subf64 (_Float64 __x, _Float64 __y) throw ();
# 627 "/usr/include/math.h" 2 3 4
# 636 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float32 f32addf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float32 f32divf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float32 f32mulf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float32 f32subf64x (_Float64x __x, _Float64x __y) throw ();
# 637 "/usr/include/math.h" 2 3 4
# 646 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float32 f32addf128 (_Float128 __x, _Float128 __y) throw ();


extern _Float32 f32divf128 (_Float128 __x, _Float128 __y) throw ();


extern _Float32 f32mulf128 (_Float128 __x, _Float128 __y) throw ();


extern _Float32 f32subf128 (_Float128 __x, _Float128 __y) throw ();
# 647 "/usr/include/math.h" 2 3 4
# 666 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float32x f32xaddf64 (_Float64 __x, _Float64 __y) throw ();


extern _Float32x f32xdivf64 (_Float64 __x, _Float64 __y) throw ();


extern _Float32x f32xmulf64 (_Float64 __x, _Float64 __y) throw ();


extern _Float32x f32xsubf64 (_Float64 __x, _Float64 __y) throw ();
# 667 "/usr/include/math.h" 2 3 4
# 676 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float32x f32xaddf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float32x f32xdivf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float32x f32xmulf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float32x f32xsubf64x (_Float64x __x, _Float64x __y) throw ();
# 677 "/usr/include/math.h" 2 3 4
# 686 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float32x f32xaddf128 (_Float128 __x, _Float128 __y) throw ();


extern _Float32x f32xdivf128 (_Float128 __x, _Float128 __y) throw ();


extern _Float32x f32xmulf128 (_Float128 __x, _Float128 __y) throw ();


extern _Float32x f32xsubf128 (_Float128 __x, _Float128 __y) throw ();
# 687 "/usr/include/math.h" 2 3 4
# 706 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float64 f64addf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float64 f64divf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float64 f64mulf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float64 f64subf64x (_Float64x __x, _Float64x __y) throw ();
# 707 "/usr/include/math.h" 2 3 4
# 716 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float64 f64addf128 (_Float128 __x, _Float128 __y) throw ();


extern _Float64 f64divf128 (_Float128 __x, _Float128 __y) throw ();


extern _Float64 f64mulf128 (_Float128 __x, _Float128 __y) throw ();


extern _Float64 f64subf128 (_Float128 __x, _Float128 __y) throw ();
# 717 "/usr/include/math.h" 2 3 4
# 736 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float64x f64xaddf128 (_Float128 __x, _Float128 __y) throw ();


extern _Float64x f64xdivf128 (_Float128 __x, _Float128 __y) throw ();


extern _Float64x f64xmulf128 (_Float128 __x, _Float128 __y) throw ();


extern _Float64x f64xsubf128 (_Float128 __x, _Float128 __y) throw ();
# 737 "/usr/include/math.h" 2 3 4
# 773 "/usr/include/math.h" 3 4
extern int signgam;
# 853 "/usr/include/math.h" 3 4
enum
  {
    FP_NAN =

      0,
    FP_INFINITE =

      1,
    FP_ZERO =

      2,
    FP_SUBNORMAL =

      3,
    FP_NORMAL =

      4
  };
# 973 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/iscanonical.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/iscanonical.h" 3 4
extern int __iscanonicall (long double __x)
     throw () __attribute__ ((__const__));
# 46 "/usr/include/x86_64-linux-gnu/bits/iscanonical.h" 3 4
extern "C++" {
inline int iscanonical (float __val) { return ((void) (__typeof (__val)) (__val), 1); }
inline int iscanonical (double __val) { return ((void) (__typeof (__val)) (__val), 1); }
inline int iscanonical (long double __val) { return __iscanonicall (__val); }

inline int iscanonical (_Float128 __val) { return ((void) (__typeof (__val)) (__val), 1); }

}
# 974 "/usr/include/math.h" 2 3 4
# 985 "/usr/include/math.h" 3 4
extern "C++" {
inline int issignaling (float __val) { return __issignalingf (__val); }
inline int issignaling (double __val) { return __issignaling (__val); }
inline int
issignaling (long double __val)
{



  return __issignalingl (__val);

}



inline int issignaling (_Float128 __val) { return __issignalingf128 (__val); }

}
# 1016 "/usr/include/math.h" 3 4
extern "C++" {
# 1047 "/usr/include/math.h" 3 4
template <class __T> inline bool
iszero (__T __val)
{
  return __val == 0;
}

}
# 1278 "/usr/include/math.h" 3 4
extern "C++" {
template<typename> struct __iseqsig_type;

template<> struct __iseqsig_type<float>
{
  static int __call (float __x, float __y) throw ()
  {
    return __iseqsigf (__x, __y);
  }
};

template<> struct __iseqsig_type<double>
{
  static int __call (double __x, double __y) throw ()
  {
    return __iseqsig (__x, __y);
  }
};

template<> struct __iseqsig_type<long double>
{
  static int __call (long double __x, long double __y) throw ()
  {

    return __iseqsigl (__x, __y);



  }
};




template<> struct __iseqsig_type<_Float128>
{
  static int __call (_Float128 __x, _Float128 __y) throw ()
  {
    return __iseqsigf128 (__x, __y);
  }
};


template<typename _T1, typename _T2>
inline int
iseqsig (_T1 __x, _T2 __y) throw ()
{

  typedef decltype (((__x) + (__y) + 0.0f)) _T3;



  return __iseqsig_type<_T3>::__call (__x, __y);
}

}




}
# 46 "/usr/include/c++/10/cmath" 2 3
# 77 "/usr/include/c++/10/cmath" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::acos;


  inline constexpr float
  acos(float __x)
  { return __builtin_acosf(__x); }

  inline constexpr long double
  acos(long double __x)
  { return __builtin_acosl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    acos(_Tp __x)
    { return __builtin_acos(__x); }

  using ::asin;


  inline constexpr float
  asin(float __x)
  { return __builtin_asinf(__x); }

  inline constexpr long double
  asin(long double __x)
  { return __builtin_asinl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    asin(_Tp __x)
    { return __builtin_asin(__x); }

  using ::atan;


  inline constexpr float
  atan(float __x)
  { return __builtin_atanf(__x); }

  inline constexpr long double
  atan(long double __x)
  { return __builtin_atanl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    atan(_Tp __x)
    { return __builtin_atan(__x); }

  using ::atan2;


  inline constexpr float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }

  inline constexpr long double
  atan2(long double __y, long double __x)
  { return __builtin_atan2l(__y, __x); }


  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    atan2(_Tp __y, _Up __x)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return atan2(__type(__y), __type(__x));
    }

  using ::ceil;


  inline constexpr float
  ceil(float __x)
  { return __builtin_ceilf(__x); }

  inline constexpr long double
  ceil(long double __x)
  { return __builtin_ceill(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    ceil(_Tp __x)
    { return __builtin_ceil(__x); }

  using ::cos;


  inline constexpr float
  cos(float __x)
  { return __builtin_cosf(__x); }

  inline constexpr long double
  cos(long double __x)
  { return __builtin_cosl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    cos(_Tp __x)
    { return __builtin_cos(__x); }

  using ::cosh;


  inline constexpr float
  cosh(float __x)
  { return __builtin_coshf(__x); }

  inline constexpr long double
  cosh(long double __x)
  { return __builtin_coshl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    cosh(_Tp __x)
    { return __builtin_cosh(__x); }

  using ::exp;


  inline constexpr float
  exp(float __x)
  { return __builtin_expf(__x); }

  inline constexpr long double
  exp(long double __x)
  { return __builtin_expl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    exp(_Tp __x)
    { return __builtin_exp(__x); }

  using ::fabs;


  inline constexpr float
  fabs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  fabs(long double __x)
  { return __builtin_fabsl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    fabs(_Tp __x)
    { return __builtin_fabs(__x); }

  using ::floor;


  inline constexpr float
  floor(float __x)
  { return __builtin_floorf(__x); }

  inline constexpr long double
  floor(long double __x)
  { return __builtin_floorl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    floor(_Tp __x)
    { return __builtin_floor(__x); }

  using ::fmod;


  inline constexpr float
  fmod(float __x, float __y)
  { return __builtin_fmodf(__x, __y); }

  inline constexpr long double
  fmod(long double __x, long double __y)
  { return __builtin_fmodl(__x, __y); }


  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmod(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmod(__type(__x), __type(__y));
    }

  using ::frexp;


  inline float
  frexp(float __x, int* __exp)
  { return __builtin_frexpf(__x, __exp); }

  inline long double
  frexp(long double __x, int* __exp)
  { return __builtin_frexpl(__x, __exp); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    frexp(_Tp __x, int* __exp)
    { return __builtin_frexp(__x, __exp); }

  using ::ldexp;


  inline constexpr float
  ldexp(float __x, int __exp)
  { return __builtin_ldexpf(__x, __exp); }

  inline constexpr long double
  ldexp(long double __x, int __exp)
  { return __builtin_ldexpl(__x, __exp); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    ldexp(_Tp __x, int __exp)
    { return __builtin_ldexp(__x, __exp); }

  using ::log;


  inline constexpr float
  log(float __x)
  { return __builtin_logf(__x); }

  inline constexpr long double
  log(long double __x)
  { return __builtin_logl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    log(_Tp __x)
    { return __builtin_log(__x); }

  using ::log10;


  inline constexpr float
  log10(float __x)
  { return __builtin_log10f(__x); }

  inline constexpr long double
  log10(long double __x)
  { return __builtin_log10l(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    log10(_Tp __x)
    { return __builtin_log10(__x); }

  using ::modf;


  inline float
  modf(float __x, float* __iptr)
  { return __builtin_modff(__x, __iptr); }

  inline long double
  modf(long double __x, long double* __iptr)
  { return __builtin_modfl(__x, __iptr); }


  using ::pow;


  inline constexpr float
  pow(float __x, float __y)
  { return __builtin_powf(__x, __y); }

  inline constexpr long double
  pow(long double __x, long double __y)
  { return __builtin_powl(__x, __y); }
# 412 "/usr/include/c++/10/cmath" 3
  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
    }

  using ::sin;


  inline constexpr float
  sin(float __x)
  { return __builtin_sinf(__x); }

  inline constexpr long double
  sin(long double __x)
  { return __builtin_sinl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sin(_Tp __x)
    { return __builtin_sin(__x); }

  using ::sinh;


  inline constexpr float
  sinh(float __x)
  { return __builtin_sinhf(__x); }

  inline constexpr long double
  sinh(long double __x)
  { return __builtin_sinhl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sinh(_Tp __x)
    { return __builtin_sinh(__x); }

  using ::sqrt;


  inline constexpr float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }

  inline constexpr long double
  sqrt(long double __x)
  { return __builtin_sqrtl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sqrt(_Tp __x)
    { return __builtin_sqrt(__x); }

  using ::tan;


  inline constexpr float
  tan(float __x)
  { return __builtin_tanf(__x); }

  inline constexpr long double
  tan(long double __x)
  { return __builtin_tanl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    tan(_Tp __x)
    { return __builtin_tan(__x); }

  using ::tanh;


  inline constexpr float
  tanh(float __x)
  { return __builtin_tanhf(__x); }

  inline constexpr long double
  tanh(long double __x)
  { return __builtin_tanhl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    tanh(_Tp __x)
    { return __builtin_tanh(__x); }
# 536 "/usr/include/c++/10/cmath" 3
  constexpr int
  fpclassify(float __x)
  { return __builtin_fpclassify(0, 1, 4,
    3, 2, __x); }

  constexpr int
  fpclassify(double __x)
  { return __builtin_fpclassify(0, 1, 4,
    3, 2, __x); }

  constexpr int
  fpclassify(long double __x)
  { return __builtin_fpclassify(0, 1, 4,
    3, 2, __x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              int>::__type
    fpclassify(_Tp __x)
    { return __x != 0 ? 4 : 2; }



  constexpr bool
  isfinite(float __x)
  { return __builtin_isfinite(__x); }

  constexpr bool
  isfinite(double __x)
  { return __builtin_isfinite(__x); }

  constexpr bool
  isfinite(long double __x)
  { return __builtin_isfinite(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isfinite(_Tp __x)
    { return true; }



  constexpr bool
  isinf(float __x)
  { return __builtin_isinf(__x); }





  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }


  constexpr bool
  isinf(long double __x)
  { return __builtin_isinf(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isinf(_Tp __x)
    { return false; }



  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }





  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }


  constexpr bool
  isnan(long double __x)
  { return __builtin_isnan(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isnan(_Tp __x)
    { return false; }



  constexpr bool
  isnormal(float __x)
  { return __builtin_isnormal(__x); }

  constexpr bool
  isnormal(double __x)
  { return __builtin_isnormal(__x); }

  constexpr bool
  isnormal(long double __x)
  { return __builtin_isnormal(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isnormal(_Tp __x)
    { return __x != 0 ? true : false; }




  constexpr bool
  signbit(float __x)
  { return __builtin_signbit(__x); }

  constexpr bool
  signbit(double __x)
  { return __builtin_signbit(__x); }

  constexpr bool
  signbit(long double __x)
  { return __builtin_signbit(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    signbit(_Tp __x)
    { return __x < 0 ? true : false; }



  constexpr bool
  isgreater(float __x, float __y)
  { return __builtin_isgreater(__x, __y); }

  constexpr bool
  isgreater(double __x, double __y)
  { return __builtin_isgreater(__x, __y); }

  constexpr bool
  isgreater(long double __x, long double __y)
  { return __builtin_isgreater(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isgreater(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isgreater(__type(__x), __type(__y));
    }



  constexpr bool
  isgreaterequal(float __x, float __y)
  { return __builtin_isgreaterequal(__x, __y); }

  constexpr bool
  isgreaterequal(double __x, double __y)
  { return __builtin_isgreaterequal(__x, __y); }

  constexpr bool
  isgreaterequal(long double __x, long double __y)
  { return __builtin_isgreaterequal(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isgreaterequal(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isgreaterequal(__type(__x), __type(__y));
    }



  constexpr bool
  isless(float __x, float __y)
  { return __builtin_isless(__x, __y); }

  constexpr bool
  isless(double __x, double __y)
  { return __builtin_isless(__x, __y); }

  constexpr bool
  isless(long double __x, long double __y)
  { return __builtin_isless(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isless(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isless(__type(__x), __type(__y));
    }



  constexpr bool
  islessequal(float __x, float __y)
  { return __builtin_islessequal(__x, __y); }

  constexpr bool
  islessequal(double __x, double __y)
  { return __builtin_islessequal(__x, __y); }

  constexpr bool
  islessequal(long double __x, long double __y)
  { return __builtin_islessequal(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    islessequal(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_islessequal(__type(__x), __type(__y));
    }



  constexpr bool
  islessgreater(float __x, float __y)
  { return __builtin_islessgreater(__x, __y); }

  constexpr bool
  islessgreater(double __x, double __y)
  { return __builtin_islessgreater(__x, __y); }

  constexpr bool
  islessgreater(long double __x, long double __y)
  { return __builtin_islessgreater(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    islessgreater(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_islessgreater(__type(__x), __type(__y));
    }



  constexpr bool
  isunordered(float __x, float __y)
  { return __builtin_isunordered(__x, __y); }

  constexpr bool
  isunordered(double __x, double __y)
  { return __builtin_isunordered(__x, __y); }

  constexpr bool
  isunordered(long double __x, long double __y)
  { return __builtin_isunordered(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isunordered(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isunordered(__type(__x), __type(__y));
    }
# 1065 "/usr/include/c++/10/cmath" 3
  using ::double_t;
  using ::float_t;


  using ::acosh;
  using ::acoshf;
  using ::acoshl;

  using ::asinh;
  using ::asinhf;
  using ::asinhl;

  using ::atanh;
  using ::atanhf;
  using ::atanhl;

  using ::cbrt;
  using ::cbrtf;
  using ::cbrtl;

  using ::copysign;
  using ::copysignf;
  using ::copysignl;

  using ::erf;
  using ::erff;
  using ::erfl;

  using ::erfc;
  using ::erfcf;
  using ::erfcl;

  using ::exp2;
  using ::exp2f;
  using ::exp2l;

  using ::expm1;
  using ::expm1f;
  using ::expm1l;

  using ::fdim;
  using ::fdimf;
  using ::fdiml;

  using ::fma;
  using ::fmaf;
  using ::fmal;

  using ::fmax;
  using ::fmaxf;
  using ::fmaxl;

  using ::fmin;
  using ::fminf;
  using ::fminl;

  using ::hypot;
  using ::hypotf;
  using ::hypotl;

  using ::ilogb;
  using ::ilogbf;
  using ::ilogbl;

  using ::lgamma;
  using ::lgammaf;
  using ::lgammal;


  using ::llrint;
  using ::llrintf;
  using ::llrintl;

  using ::llround;
  using ::llroundf;
  using ::llroundl;


  using ::log1p;
  using ::log1pf;
  using ::log1pl;

  using ::log2;
  using ::log2f;
  using ::log2l;

  using ::logb;
  using ::logbf;
  using ::logbl;

  using ::lrint;
  using ::lrintf;
  using ::lrintl;

  using ::lround;
  using ::lroundf;
  using ::lroundl;

  using ::nan;
  using ::nanf;
  using ::nanl;

  using ::nearbyint;
  using ::nearbyintf;
  using ::nearbyintl;

  using ::nextafter;
  using ::nextafterf;
  using ::nextafterl;

  using ::nexttoward;
  using ::nexttowardf;
  using ::nexttowardl;

  using ::remainder;
  using ::remainderf;
  using ::remainderl;

  using ::remquo;
  using ::remquof;
  using ::remquol;

  using ::rint;
  using ::rintf;
  using ::rintl;

  using ::round;
  using ::roundf;
  using ::roundl;

  using ::scalbln;
  using ::scalblnf;
  using ::scalblnl;

  using ::scalbn;
  using ::scalbnf;
  using ::scalbnl;

  using ::tgamma;
  using ::tgammaf;
  using ::tgammal;

  using ::trunc;
  using ::truncf;
  using ::truncl;



  constexpr float
  acosh(float __x)
  { return __builtin_acoshf(__x); }

  constexpr long double
  acosh(long double __x)
  { return __builtin_acoshl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    acosh(_Tp __x)
    { return __builtin_acosh(__x); }



  constexpr float
  asinh(float __x)
  { return __builtin_asinhf(__x); }

  constexpr long double
  asinh(long double __x)
  { return __builtin_asinhl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    asinh(_Tp __x)
    { return __builtin_asinh(__x); }



  constexpr float
  atanh(float __x)
  { return __builtin_atanhf(__x); }

  constexpr long double
  atanh(long double __x)
  { return __builtin_atanhl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    atanh(_Tp __x)
    { return __builtin_atanh(__x); }



  constexpr float
  cbrt(float __x)
  { return __builtin_cbrtf(__x); }

  constexpr long double
  cbrt(long double __x)
  { return __builtin_cbrtl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    cbrt(_Tp __x)
    { return __builtin_cbrt(__x); }



  constexpr float
  copysign(float __x, float __y)
  { return __builtin_copysignf(__x, __y); }

  constexpr long double
  copysign(long double __x, long double __y)
  { return __builtin_copysignl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    copysign(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return copysign(__type(__x), __type(__y));
    }



  constexpr float
  erf(float __x)
  { return __builtin_erff(__x); }

  constexpr long double
  erf(long double __x)
  { return __builtin_erfl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    erf(_Tp __x)
    { return __builtin_erf(__x); }



  constexpr float
  erfc(float __x)
  { return __builtin_erfcf(__x); }

  constexpr long double
  erfc(long double __x)
  { return __builtin_erfcl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    erfc(_Tp __x)
    { return __builtin_erfc(__x); }



  constexpr float
  exp2(float __x)
  { return __builtin_exp2f(__x); }

  constexpr long double
  exp2(long double __x)
  { return __builtin_exp2l(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    exp2(_Tp __x)
    { return __builtin_exp2(__x); }



  constexpr float
  expm1(float __x)
  { return __builtin_expm1f(__x); }

  constexpr long double
  expm1(long double __x)
  { return __builtin_expm1l(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    expm1(_Tp __x)
    { return __builtin_expm1(__x); }



  constexpr float
  fdim(float __x, float __y)
  { return __builtin_fdimf(__x, __y); }

  constexpr long double
  fdim(long double __x, long double __y)
  { return __builtin_fdiml(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fdim(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fdim(__type(__x), __type(__y));
    }



  constexpr float
  fma(float __x, float __y, float __z)
  { return __builtin_fmaf(__x, __y, __z); }

  constexpr long double
  fma(long double __x, long double __y, long double __z)
  { return __builtin_fmal(__x, __y, __z); }



  template<typename _Tp, typename _Up, typename _Vp>
    constexpr typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type
    fma(_Tp __x, _Up __y, _Vp __z)
    {
      typedef typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type __type;
      return fma(__type(__x), __type(__y), __type(__z));
    }



  constexpr float
  fmax(float __x, float __y)
  { return __builtin_fmaxf(__x, __y); }

  constexpr long double
  fmax(long double __x, long double __y)
  { return __builtin_fmaxl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmax(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmax(__type(__x), __type(__y));
    }



  constexpr float
  fmin(float __x, float __y)
  { return __builtin_fminf(__x, __y); }

  constexpr long double
  fmin(long double __x, long double __y)
  { return __builtin_fminl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmin(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmin(__type(__x), __type(__y));
    }



  constexpr float
  hypot(float __x, float __y)
  { return __builtin_hypotf(__x, __y); }

  constexpr long double
  hypot(long double __x, long double __y)
  { return __builtin_hypotl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    hypot(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return hypot(__type(__x), __type(__y));
    }



  constexpr int
  ilogb(float __x)
  { return __builtin_ilogbf(__x); }

  constexpr int
  ilogb(long double __x)
  { return __builtin_ilogbl(__x); }



  template<typename _Tp>
    constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    int>::__type
    ilogb(_Tp __x)
    { return __builtin_ilogb(__x); }



  constexpr float
  lgamma(float __x)
  { return __builtin_lgammaf(__x); }

  constexpr long double
  lgamma(long double __x)
  { return __builtin_lgammal(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    lgamma(_Tp __x)
    { return __builtin_lgamma(__x); }



  constexpr long long
  llrint(float __x)
  { return __builtin_llrintf(__x); }

  constexpr long long
  llrint(long double __x)
  { return __builtin_llrintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long long>::__type
    llrint(_Tp __x)
    { return __builtin_llrint(__x); }



  constexpr long long
  llround(float __x)
  { return __builtin_llroundf(__x); }

  constexpr long long
  llround(long double __x)
  { return __builtin_llroundl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long long>::__type
    llround(_Tp __x)
    { return __builtin_llround(__x); }



  constexpr float
  log1p(float __x)
  { return __builtin_log1pf(__x); }

  constexpr long double
  log1p(long double __x)
  { return __builtin_log1pl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    log1p(_Tp __x)
    { return __builtin_log1p(__x); }




  constexpr float
  log2(float __x)
  { return __builtin_log2f(__x); }

  constexpr long double
  log2(long double __x)
  { return __builtin_log2l(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    log2(_Tp __x)
    { return __builtin_log2(__x); }



  constexpr float
  logb(float __x)
  { return __builtin_logbf(__x); }

  constexpr long double
  logb(long double __x)
  { return __builtin_logbl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    logb(_Tp __x)
    { return __builtin_logb(__x); }



  constexpr long
  lrint(float __x)
  { return __builtin_lrintf(__x); }

  constexpr long
  lrint(long double __x)
  { return __builtin_lrintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long>::__type
    lrint(_Tp __x)
    { return __builtin_lrint(__x); }



  constexpr long
  lround(float __x)
  { return __builtin_lroundf(__x); }

  constexpr long
  lround(long double __x)
  { return __builtin_lroundl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long>::__type
    lround(_Tp __x)
    { return __builtin_lround(__x); }



  constexpr float
  nearbyint(float __x)
  { return __builtin_nearbyintf(__x); }

  constexpr long double
  nearbyint(long double __x)
  { return __builtin_nearbyintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    nearbyint(_Tp __x)
    { return __builtin_nearbyint(__x); }



  constexpr float
  nextafter(float __x, float __y)
  { return __builtin_nextafterf(__x, __y); }

  constexpr long double
  nextafter(long double __x, long double __y)
  { return __builtin_nextafterl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    nextafter(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return nextafter(__type(__x), __type(__y));
    }



  constexpr float
  nexttoward(float __x, long double __y)
  { return __builtin_nexttowardf(__x, __y); }

  constexpr long double
  nexttoward(long double __x, long double __y)
  { return __builtin_nexttowardl(__x, __y); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    nexttoward(_Tp __x, long double __y)
    { return __builtin_nexttoward(__x, __y); }



  constexpr float
  remainder(float __x, float __y)
  { return __builtin_remainderf(__x, __y); }

  constexpr long double
  remainder(long double __x, long double __y)
  { return __builtin_remainderl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    remainder(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return remainder(__type(__x), __type(__y));
    }



  inline float
  remquo(float __x, float __y, int* __pquo)
  { return __builtin_remquof(__x, __y, __pquo); }

  inline long double
  remquo(long double __x, long double __y, int* __pquo)
  { return __builtin_remquol(__x, __y, __pquo); }



  template<typename _Tp, typename _Up>
    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    remquo(_Tp __x, _Up __y, int* __pquo)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return remquo(__type(__x), __type(__y), __pquo);
    }



  constexpr float
  rint(float __x)
  { return __builtin_rintf(__x); }

  constexpr long double
  rint(long double __x)
  { return __builtin_rintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    rint(_Tp __x)
    { return __builtin_rint(__x); }



  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }

  constexpr long double
  round(long double __x)
  { return __builtin_roundl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    round(_Tp __x)
    { return __builtin_round(__x); }



  constexpr float
  scalbln(float __x, long __ex)
  { return __builtin_scalblnf(__x, __ex); }

  constexpr long double
  scalbln(long double __x, long __ex)
  { return __builtin_scalblnl(__x, __ex); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    scalbln(_Tp __x, long __ex)
    { return __builtin_scalbln(__x, __ex); }



  constexpr float
  scalbn(float __x, int __ex)
  { return __builtin_scalbnf(__x, __ex); }

  constexpr long double
  scalbn(long double __x, int __ex)
  { return __builtin_scalbnl(__x, __ex); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    scalbn(_Tp __x, int __ex)
    { return __builtin_scalbn(__x, __ex); }



  constexpr float
  tgamma(float __x)
  { return __builtin_tgammaf(__x); }

  constexpr long double
  tgamma(long double __x)
  { return __builtin_tgammal(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    tgamma(_Tp __x)
    { return __builtin_tgamma(__x); }



  constexpr float
  trunc(float __x)
  { return __builtin_truncf(__x); }

  constexpr long double
  trunc(long double __x)
  { return __builtin_truncl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    trunc(_Tp __x)
    { return __builtin_trunc(__x); }
# 1923 "/usr/include/c++/10/cmath" 3

}





}
# 37 "/usr/include/c++/10/math.h" 2 3

using std::abs;
using std::acos;
using std::asin;
using std::atan;
using std::atan2;
using std::cos;
using std::sin;
using std::tan;
using std::cosh;
using std::sinh;
using std::tanh;
using std::exp;
using std::frexp;
using std::ldexp;
using std::log;
using std::log10;
using std::modf;
using std::pow;
using std::sqrt;
using std::ceil;
using std::fabs;
using std::floor;
using std::fmod;


using std::fpclassify;
using std::isfinite;
using std::isinf;
using std::isnan;
using std::isnormal;
using std::signbit;
using std::isgreater;
using std::isgreaterequal;
using std::isless;
using std::islessequal;
using std::islessgreater;
using std::isunordered;



using std::acosh;
using std::asinh;
using std::atanh;
using std::cbrt;
using std::copysign;
using std::erf;
using std::erfc;
using std::exp2;
using std::expm1;
using std::fdim;
using std::fma;
using std::fmax;
using std::fmin;
using std::hypot;
using std::ilogb;
using std::lgamma;
using std::llrint;
using std::llround;
using std::log1p;
using std::log2;
using std::logb;
using std::lrint;
using std::lround;
using std::nearbyint;
using std::nextafter;
using std::nexttoward;
using std::remainder;
using std::remquo;
using std::rint;
using std::round;
using std::scalbln;
using std::scalbn;
using std::tgamma;
using std::trunc;
# 19 "/usr/include/wx-3.1-unofficial/wx/math.h" 2
# 56 "/usr/include/wx-3.1-unofficial/wx/math.h"
# 1 "/usr/include/c++/10/cmath" 1 3
# 39 "/usr/include/c++/10/cmath" 3
       
# 40 "/usr/include/c++/10/cmath" 3
# 57 "/usr/include/wx-3.1-unofficial/wx/math.h" 2
# 129 "/usr/include/wx-3.1-unofficial/wx/math.h"
   
# 129 "/usr/include/wx-3.1-unofficial/wx/math.h"
#pragma GCC diagnostic push
# 129 "/usr/include/wx-3.1-unofficial/wx/math.h"
   
# 129 "/usr/include/wx-3.1-unofficial/wx/math.h"
#pragma GCC diagnostic ignored "-Wfloat-equal"
# 129 "/usr/include/wx-3.1-unofficial/wx/math.h"
   
    
# 130 "/usr/include/wx-3.1-unofficial/wx/math.h"
   inline bool wxIsSameDouble(double x, double y) { return x == y; }
   
# 131 "/usr/include/wx-3.1-unofficial/wx/math.h"
#pragma GCC diagnostic pop
# 131 "/usr/include/wx-3.1-unofficial/wx/math.h"
   



inline bool wxIsNullDouble(double x) { return wxIsSameDouble(x, 0.); }

inline int wxRound(double x)
{
    do { if ( x > double(
# 139 "/usr/include/wx-3.1-unofficial/wx/math.h" 3 4
   (-0x7fffffff - 1)
# 139 "/usr/include/wx-3.1-unofficial/wx/math.h"
   ) - 0.5 && x < double(0x7fffffff) + 0.5 ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/math.h", 139, __FUNCTION__, "x > double((-0x7fffffff - 1)) - 0.5 && x < double(0x7fffffff) + 0.5", "argument out of supported range"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 )
                                          ;


        return int(std::lround(x));





}

inline int wxRound(float x)
{
    do { if ( x > float(
# 153 "/usr/include/wx-3.1-unofficial/wx/math.h" 3 4
   (-0x7fffffff - 1)
# 153 "/usr/include/wx-3.1-unofficial/wx/math.h"
   ) && x < float(0x7fffffff) ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/math.h", 153, __FUNCTION__, "x > float((-0x7fffffff - 1)) && x < float(0x7fffffff)", "argument out of supported range"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 )
                                          ;


        return int(std::lround(x));





}

inline int wxRound(long double x) { return wxRound(double(x)); }





template <typename T>
__attribute__((deprecated("rounding an integer is useless")))
inline int wxRound(T x)
{



   
# 178 "/usr/include/wx-3.1-unofficial/wx/math.h"
#pragma GCC diagnostic push
# 178 "/usr/include/wx-3.1-unofficial/wx/math.h"
   
# 178 "/usr/include/wx-3.1-unofficial/wx/math.h"
#pragma GCC diagnostic ignored "-Wsign-compare"
# 178 "/usr/include/wx-3.1-unofficial/wx/math.h"
   

    do { if ( (x > 0 || x > 
# 180 "/usr/include/wx-3.1-unofficial/wx/math.h" 3 4
   (-0x7fffffff - 1)
# 180 "/usr/include/wx-3.1-unofficial/wx/math.h"
   ) && x < 0x7fffffff ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/math.h", 180, __FUNCTION__, "(x > 0 || x > (-0x7fffffff - 1)) && x < 0x7fffffff", "argument out of supported range"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 )
                                          ;

   
# 183 "/usr/include/wx-3.1-unofficial/wx/math.h"
#pragma GCC diagnostic pop
# 183 "/usr/include/wx-3.1-unofficial/wx/math.h"
   

    return int(x);
}




inline double wxDegToRad(double deg) { return (deg * 
# 191 "/usr/include/wx-3.1-unofficial/wx/math.h" 3 4
                                                    3.14159265358979323846
# 191 "/usr/include/wx-3.1-unofficial/wx/math.h"
                                                        ) / 180.0; }
inline double wxRadToDeg(double rad) { return (rad * 180.0) / 
# 192 "/usr/include/wx-3.1-unofficial/wx/math.h" 3 4
                                                             3.14159265358979323846
# 192 "/usr/include/wx-3.1-unofficial/wx/math.h"
                                                                 ; }


__attribute__ ((visibility("default"))) unsigned int wxCTZ(wxUint32 x);
# 208 "/usr/include/wx-3.1-unofficial/wx/math.h"
    extern "C" {


    __attribute__ ((visibility("default"))) wxFloat64 wxConvertFromIeeeExtended(const wxInt8 *bytes);
    __attribute__ ((visibility("default"))) void wxConvertToIeeeExtended(wxFloat64 num, wxInt8 *bytes);
# 221 "/usr/include/wx-3.1-unofficial/wx/math.h"
    }




__attribute__ ((visibility("default"))) unsigned int wxGCD(unsigned int u, unsigned int v);
# 19 "/usr/include/wx-3.1-unofficial/wx/event.h" 2


# 1 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h" 1
# 18 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 19 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/list.h" 1
# 31 "/usr/include/wx-3.1-unofficial/wx/list.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 32 "/usr/include/wx-3.1-unofficial/wx/list.h" 2


# 1 "/usr/include/wx-3.1-unofficial/wx/vector.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/vector.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 16 "/usr/include/wx-3.1-unofficial/wx/vector.h" 2
# 37 "/usr/include/wx-3.1-unofficial/wx/vector.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/scopeguard.h" 1
# 21 "/usr/include/wx-3.1-unofficial/wx/scopeguard.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 22 "/usr/include/wx-3.1-unofficial/wx/scopeguard.h" 2

# 1 "/usr/include/wx-3.1-unofficial/wx/except.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/except.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/except.h" 2
# 24 "/usr/include/wx-3.1-unofficial/wx/scopeguard.h" 2





namespace wxPrivate
{



    template <class ScopeGuardImpl>
    void OnScopeExit(ScopeGuardImpl& guard)
    {
        if ( !guard.WasDismissed() )
        {

            try
            {
                guard.Execute();
            }
            catch ( ... ) { ; }
        }
    }


    template <class T>
    void Use(const T& )
    {
    }
}
# 66 "/usr/include/wx-3.1-unofficial/wx/scopeguard.h"
class wxScopeGuardImplBase
{
public:
    wxScopeGuardImplBase() : m_wasDismissed(false) { }

    wxScopeGuardImplBase(const wxScopeGuardImplBase& other)
        : m_wasDismissed(other.m_wasDismissed)
    {
        other.Dismiss();
    }

    void Dismiss() const { m_wasDismissed = true; }


    bool WasDismissed() const { return m_wasDismissed; }

protected:
    ~wxScopeGuardImplBase() { }


    mutable bool m_wasDismissed;

private:
    wxScopeGuardImplBase& operator=(const wxScopeGuardImplBase&);
};


typedef const wxScopeGuardImplBase& wxScopeGuard;





template <class F>
class wxScopeGuardImpl0 : public wxScopeGuardImplBase
{
public:
    static wxScopeGuardImpl0<F> MakeGuard(F fun)
    {
        return wxScopeGuardImpl0<F>(fun);
    }

    ~wxScopeGuardImpl0() { wxPrivate::OnScopeExit(*this); }

    void Execute() { m_fun(); }

protected:
    wxScopeGuardImpl0(F fun) : m_fun(fun) { }

    F m_fun;

    wxScopeGuardImpl0& operator=(const wxScopeGuardImpl0&);
};

template <class F>
inline wxScopeGuardImpl0<F> wxMakeGuard(F fun)
{
    return wxScopeGuardImpl0<F>::MakeGuard(fun);
}





template <class F, class P1>
class wxScopeGuardImpl1 : public wxScopeGuardImplBase
{
public:
    static wxScopeGuardImpl1<F, P1> MakeGuard(F fun, P1 p1)
    {
        return wxScopeGuardImpl1<F, P1>(fun, p1);
    }

    ~wxScopeGuardImpl1() { wxPrivate::OnScopeExit(* this); }

    void Execute() { m_fun(m_p1); }

protected:
    wxScopeGuardImpl1(F fun, P1 p1) : m_fun(fun), m_p1(p1) { }

    F m_fun;
    const P1 m_p1;

    wxScopeGuardImpl1& operator=(const wxScopeGuardImpl1&);
};

template <class F, class P1>
inline wxScopeGuardImpl1<F, P1> wxMakeGuard(F fun, P1 p1)
{
    return wxScopeGuardImpl1<F, P1>::MakeGuard(fun, p1);
}





template <class F, class P1, class P2>
class wxScopeGuardImpl2 : public wxScopeGuardImplBase
{
public:
    static wxScopeGuardImpl2<F, P1, P2> MakeGuard(F fun, P1 p1, P2 p2)
    {
        return wxScopeGuardImpl2<F, P1, P2>(fun, p1, p2);
    }

    ~wxScopeGuardImpl2() { wxPrivate::OnScopeExit(*this); }

    void Execute() { m_fun(m_p1, m_p2); }

protected:
    wxScopeGuardImpl2(F fun, P1 p1, P2 p2) : m_fun(fun), m_p1(p1), m_p2(p2) { }

    F m_fun;
    const P1 m_p1;
    const P2 m_p2;

    wxScopeGuardImpl2& operator=(const wxScopeGuardImpl2&);
};

template <class F, class P1, class P2>
inline wxScopeGuardImpl2<F, P1, P2> wxMakeGuard(F fun, P1 p1, P2 p2)
{
    return wxScopeGuardImpl2<F, P1, P2>::MakeGuard(fun, p1, p2);
}





template <class F, class P1, class P2, class P3>
class wxScopeGuardImpl3 : public wxScopeGuardImplBase
{
public:
    static wxScopeGuardImpl3<F, P1, P2, P3> MakeGuard(F fun, P1 p1, P2 p2, P3 p3)
    {
        return wxScopeGuardImpl3<F, P1, P2, P3>(fun, p1, p2, p3);
    }

    ~wxScopeGuardImpl3() { wxPrivate::OnScopeExit(*this); }

    void Execute() { m_fun(m_p1, m_p2, m_p3); }

protected:
    wxScopeGuardImpl3(F fun, P1 p1, P2 p2, P3 p3)
        : m_fun(fun), m_p1(p1), m_p2(p2), m_p3(p3) { }

    F m_fun;
    const P1 m_p1;
    const P2 m_p2;
    const P3 m_p3;

    wxScopeGuardImpl3& operator=(const wxScopeGuardImpl3&);
};

template <class F, class P1, class P2, class P3>
inline wxScopeGuardImpl3<F, P1, P2, P3> wxMakeGuard(F fun, P1 p1, P2 p2, P3 p3)
{
    return wxScopeGuardImpl3<F, P1, P2, P3>::MakeGuard(fun, p1, p2, p3);
}
# 234 "/usr/include/wx-3.1-unofficial/wx/scopeguard.h"
template <class Obj, class MemFun>
class wxObjScopeGuardImpl0 : public wxScopeGuardImplBase
{
public:
    static wxObjScopeGuardImpl0<Obj, MemFun>
        MakeObjGuard(Obj& obj, MemFun memFun)
    {
        return wxObjScopeGuardImpl0<Obj, MemFun>(obj, memFun);
    }

    ~wxObjScopeGuardImpl0() { wxPrivate::OnScopeExit(*this); }

    void Execute() { (m_obj.*m_memfun)(); }

protected:
    wxObjScopeGuardImpl0(Obj& obj, MemFun memFun)
        : m_obj(obj), m_memfun(memFun) { }

    Obj& m_obj;
    MemFun m_memfun;
};

template <class Obj, class MemFun>
inline wxObjScopeGuardImpl0<Obj, MemFun> wxMakeObjGuard(Obj& obj, MemFun memFun)
{
    return wxObjScopeGuardImpl0<Obj, MemFun>::MakeObjGuard(obj, memFun);
}

template <class Obj, class MemFun, class P1>
class wxObjScopeGuardImpl1 : public wxScopeGuardImplBase
{
public:
    static wxObjScopeGuardImpl1<Obj, MemFun, P1>
        MakeObjGuard(Obj& obj, MemFun memFun, P1 p1)
    {
        return wxObjScopeGuardImpl1<Obj, MemFun, P1>(obj, memFun, p1);
    }

    ~wxObjScopeGuardImpl1() { wxPrivate::OnScopeExit(*this); }

    void Execute() { (m_obj.*m_memfun)(m_p1); }

protected:
    wxObjScopeGuardImpl1(Obj& obj, MemFun memFun, P1 p1)
        : m_obj(obj), m_memfun(memFun), m_p1(p1) { }

    Obj& m_obj;
    MemFun m_memfun;
    const P1 m_p1;
};

template <class Obj, class MemFun, class P1>
inline wxObjScopeGuardImpl1<Obj, MemFun, P1>
wxMakeObjGuard(Obj& obj, MemFun memFun, P1 p1)
{
    return wxObjScopeGuardImpl1<Obj, MemFun, P1>::MakeObjGuard(obj, memFun, p1);
}

template <class Obj, class MemFun, class P1, class P2>
class wxObjScopeGuardImpl2 : public wxScopeGuardImplBase
{
public:
    static wxObjScopeGuardImpl2<Obj, MemFun, P1, P2>
        MakeObjGuard(Obj& obj, MemFun memFun, P1 p1, P2 p2)
    {
        return wxObjScopeGuardImpl2<Obj, MemFun, P1, P2>(obj, memFun, p1, p2);
    }

    ~wxObjScopeGuardImpl2() { wxPrivate::OnScopeExit(*this); }

    void Execute() { (m_obj.*m_memfun)(m_p1, m_p2); }

protected:
    wxObjScopeGuardImpl2(Obj& obj, MemFun memFun, P1 p1, P2 p2)
        : m_obj(obj), m_memfun(memFun), m_p1(p1), m_p2(p2) { }

    Obj& m_obj;
    MemFun m_memfun;
    const P1 m_p1;
    const P2 m_p2;
};

template <class Obj, class MemFun, class P1, class P2>
inline wxObjScopeGuardImpl2<Obj, MemFun, P1, P2>
wxMakeObjGuard(Obj& obj, MemFun memFun, P1 p1, P2 p2)
{
    return wxObjScopeGuardImpl2<Obj, MemFun, P1, P2>::
                                            MakeObjGuard(obj, memFun, p1, p2);
}

template <class Obj, class MemFun, class P1, class P2, class P3>
class wxObjScopeGuardImpl3 : public wxScopeGuardImplBase
{
public:
    static wxObjScopeGuardImpl3<Obj, MemFun, P1, P2, P3>
        MakeObjGuard(Obj& obj, MemFun memFun, P1 p1, P2 p2, P3 p3)
    {
        return wxObjScopeGuardImpl3<Obj, MemFun, P1, P2, P3>(obj, memFun, p1, p2, p3);
    }

    ~wxObjScopeGuardImpl3() { wxPrivate::OnScopeExit(*this); }

    void Execute() { (m_obj.*m_memfun)(m_p1, m_p2, m_p3); }

protected:
    wxObjScopeGuardImpl3(Obj& obj, MemFun memFun, P1 p1, P2 p2, P3 p3)
        : m_obj(obj), m_memfun(memFun), m_p1(p1), m_p2(p2), m_p3(p3) { }

    Obj& m_obj;
    MemFun m_memfun;
    const P1 m_p1;
    const P2 m_p2;
    const P3 m_p3;
};

template <class Obj, class MemFun, class P1, class P2, class P3>
inline wxObjScopeGuardImpl3<Obj, MemFun, P1, P2, P3>
wxMakeObjGuard(Obj& obj, MemFun memFun, P1 p1, P2 p2, P3 p3)
{
    return wxObjScopeGuardImpl3<Obj, MemFun, P1, P2, P3>::
                                        MakeObjGuard(obj, memFun, p1, p2, p3);
}






namespace wxPrivate
{


class VariableSetterBase : public wxScopeGuardImplBase { };

typedef const VariableSetterBase& VariableSetter;

template <typename T, typename U>
class VariableSetterImpl : public VariableSetterBase
{
public:
    VariableSetterImpl(T& var, U value)
        : m_var(var),
          m_value(value)
    {
    }

    ~VariableSetterImpl() { wxPrivate::OnScopeExit(*this); }

    void Execute() { m_var = m_value; }

private:
    T& m_var;
    const U m_value;


    VariableSetterImpl<T, U>& operator=(const VariableSetterImpl<T, U>&);
};

template <typename T>
class VariableNullerImpl : public VariableSetterBase
{
public:
    VariableNullerImpl(T& var)
        : m_var(var)
    {
    }

    ~VariableNullerImpl() { wxPrivate::OnScopeExit(*this); }

    void Execute() { m_var = 
# 403 "/usr/include/wx-3.1-unofficial/wx/scopeguard.h" 3 4
                            __null
# 403 "/usr/include/wx-3.1-unofficial/wx/scopeguard.h"
                                ; }

private:
    T& m_var;

    VariableNullerImpl<T>& operator=(const VariableNullerImpl<T>&);
};

}

template <typename T, typename U>
inline
wxPrivate::VariableSetterImpl<T, U> wxMakeVarSetter(T& var, U value)
{
      return wxPrivate::VariableSetterImpl<T, U>(var, value);
}




template <typename T>
inline
wxPrivate::VariableNullerImpl<T> wxMakeVarNuller(T& var)
{
    return wxPrivate::VariableNullerImpl<T>(var);
}
# 38 "/usr/include/wx-3.1-unofficial/wx/vector.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/meta/movable.h" 1
# 13 "/usr/include/wx-3.1-unofficial/wx/meta/movable.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/meta/pod.h" 1
# 13 "/usr/include/wx-3.1-unofficial/wx/meta/pod.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/meta/pod.h" 2
# 22 "/usr/include/wx-3.1-unofficial/wx/meta/pod.h"
template<typename T>
struct wxIsPod
{
    static const bool value = false;
};
# 36 "/usr/include/wx-3.1-unofficial/wx/meta/pod.h"
template<> struct wxIsPod<bool> { static const bool value = true; };
template<> struct wxIsPod<unsigned char> { static const bool value = true; };
template<> struct wxIsPod<signed char> { static const bool value = true; };
template<> struct wxIsPod<unsigned int> { static const bool value = true; };
template<> struct wxIsPod<signed int> { static const bool value = true; };
template<> struct wxIsPod<unsigned short int> { static const bool value = true; };
template<> struct wxIsPod<signed short int> { static const bool value = true; };
template<> struct wxIsPod<signed long int> { static const bool value = true; };
template<> struct wxIsPod<unsigned long int> { static const bool value = true; };
template<> struct wxIsPod<float> { static const bool value = true; };
template<> struct wxIsPod<double> { static const bool value = true; };
template<> struct wxIsPod<long double> { static const bool value = true; };

template<> struct wxIsPod<wchar_t> { static const bool value = true; };


template<> struct wxIsPod<long long> { static const bool value = true; };
template<> struct wxIsPod<unsigned long long> { static const bool value = true; };



template<typename T>
struct wxIsPod<T*>
{
    static const bool value = true;
};

template<typename T>
struct wxIsPod<const T*>
{
    static const bool value = true;
};
# 14 "/usr/include/wx-3.1-unofficial/wx/meta/movable.h" 2






template<typename T>
struct wxIsMovable
{
    static const bool value = wxIsPod<T>::value;
};
# 39 "/usr/include/wx-3.1-unofficial/wx/vector.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/meta/if.h" 1
# 13 "/usr/include/wx-3.1-unofficial/wx/meta/if.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/meta/if.h" 2

namespace wxPrivate
{

template <bool Cond>
struct wxIfImpl;


template <>
struct wxIfImpl<true>
{
    template<typename TTrue, typename TFalse> struct Result
    {
        typedef TTrue value;
    };
};


template<>
struct wxIfImpl<false>
{
    template<typename TTrue, typename TFalse> struct Result
    {
        typedef TFalse value;
    };
};

}






template<bool Cond, typename TTrue, typename TFalse>
struct wxIf
{
    typedef typename wxPrivate::wxIfImpl<Cond>
                     ::template Result<TTrue, TFalse>::value
            value;
};
# 40 "/usr/include/wx-3.1-unofficial/wx/vector.h" 2

# 1 "/usr/include/wx-3.1-unofficial/wx/beforestd.h" 1
# 42 "/usr/include/wx-3.1-unofficial/wx/vector.h" 2

# 1 "/usr/include/c++/10/iterator" 1 3
# 58 "/usr/include/c++/10/iterator" 3
       
# 59 "/usr/include/c++/10/iterator" 3






# 1 "/usr/include/c++/10/bits/stream_iterator.h" 1 3
# 33 "/usr/include/c++/10/bits/stream_iterator.h" 3
       
# 34 "/usr/include/c++/10/bits/stream_iterator.h" 3




# 37 "/usr/include/c++/10/bits/stream_iterator.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{








  template<typename _Tp, typename _CharT = char,
           typename _Traits = char_traits<_CharT>, typename _Dist = ptrdiff_t>
    class istream_iterator
    : public iterator<input_iterator_tag, _Tp, _Dist, const _Tp*, const _Tp&>
    {
    public:
      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef basic_istream<_CharT, _Traits> istream_type;

    private:
      istream_type* _M_stream;
      _Tp _M_value;



      bool _M_ok;

    public:

      constexpr istream_iterator()
      : _M_stream(0), _M_value(), _M_ok(false) {}


      istream_iterator(istream_type& __s)
      : _M_stream(std::__addressof(__s)), _M_ok(true)
      { _M_read(); }

      istream_iterator(const istream_iterator& __obj)
      : _M_stream(__obj._M_stream), _M_value(__obj._M_value),
        _M_ok(__obj._M_ok)
      { }
# 88 "/usr/include/c++/10/bits/stream_iterator.h" 3
      istream_iterator& operator=(const istream_iterator&) = default;
      ~istream_iterator() = default;


      const _Tp&
      operator*() const
      {


                        ;
 return _M_value;
      }

      const _Tp*
      operator->() const { return std::__addressof((operator*())); }

      istream_iterator&
      operator++()
      {


                        ;
 _M_read();
 return *this;
      }

      istream_iterator
      operator++(int)
      {


                        ;
 istream_iterator __tmp = *this;
 _M_read();
 return __tmp;
      }

    private:
      bool
      _M_equal(const istream_iterator& __x) const
      {


 return (_M_ok == __x._M_ok) && (!_M_ok || _M_stream == __x._M_stream);
      }

      void
      _M_read()
      {
        if (_M_stream && !(*_M_stream >> _M_value))
          {
            _M_stream = 0;
            _M_ok = false;
          }
      }



      friend bool
      operator==(const istream_iterator& __x, const istream_iterator& __y)
      { return __x._M_equal(__y); }



      friend bool
      operator!=(const istream_iterator& __x, const istream_iterator& __y)
      { return !__x._M_equal(__y); }






    };
# 174 "/usr/include/c++/10/bits/stream_iterator.h" 3
  template<typename _Tp, typename _CharT = char,
           typename _Traits = char_traits<_CharT> >
    class ostream_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    public:





      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef basic_ostream<_CharT, _Traits> ostream_type;


    private:
      ostream_type* _M_stream;
      const _CharT* _M_string;

    public:






      ostream_iterator(ostream_type& __s)
      : _M_stream(std::__addressof(__s)), _M_string(0) {}
# 214 "/usr/include/c++/10/bits/stream_iterator.h" 3
      ostream_iterator(ostream_type& __s, const _CharT* __c)
      : _M_stream(std::__addressof(__s)), _M_string(__c) { }


      ostream_iterator(const ostream_iterator& __obj)
      : _M_stream(__obj._M_stream), _M_string(__obj._M_string) { }


      ostream_iterator& operator=(const ostream_iterator&) = default;




      ostream_iterator&
      operator=(const _Tp& __value)
      {


                        ;
 *_M_stream << __value;
 if (_M_string)
          *_M_stream << _M_string;
 return *this;
      }

      ostream_iterator&
      operator*()
      { return *this; }

      ostream_iterator&
      operator++()
      { return *this; }

      ostream_iterator&
      operator++(int)
      { return *this; }
    };




}
# 66 "/usr/include/c++/10/iterator" 2 3
# 1 "/usr/include/c++/10/bits/streambuf_iterator.h" 1 3
# 33 "/usr/include/c++/10/bits/streambuf_iterator.h" 3
       
# 34 "/usr/include/c++/10/bits/streambuf_iterator.h" 3

# 1 "/usr/include/c++/10/streambuf" 1 3
# 36 "/usr/include/c++/10/streambuf" 3
       
# 37 "/usr/include/c++/10/streambuf" 3




# 1 "/usr/include/c++/10/bits/ios_base.h" 1 3
# 37 "/usr/include/c++/10/bits/ios_base.h" 3
       
# 38 "/usr/include/c++/10/bits/ios_base.h" 3



# 1 "/usr/include/c++/10/bits/locale_classes.h" 1 3
# 37 "/usr/include/c++/10/bits/locale_classes.h" 3
       
# 38 "/usr/include/c++/10/bits/locale_classes.h" 3





namespace std __attribute__ ((__visibility__ ("default")))
{

# 62 "/usr/include/c++/10/bits/locale_classes.h" 3
  class locale
  {
  public:


    typedef int category;


    class facet;
    class id;
    class _Impl;

    friend class facet;
    friend class _Impl;

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Cache>
      friend struct __use_cache;
# 98 "/usr/include/c++/10/bits/locale_classes.h" 3
    static const category none = 0;
    static const category ctype = 1L << 0;
    static const category numeric = 1L << 1;
    static const category collate = 1L << 2;
    static const category time = 1L << 3;
    static const category monetary = 1L << 4;
    static const category messages = 1L << 5;
    static const category all = (ctype | numeric | collate |
        time | monetary | messages);
# 117 "/usr/include/c++/10/bits/locale_classes.h" 3
    locale() throw();
# 126 "/usr/include/c++/10/bits/locale_classes.h" 3
    locale(const locale& __other) throw();
# 136 "/usr/include/c++/10/bits/locale_classes.h" 3
    explicit
    locale(const char* __s);
# 151 "/usr/include/c++/10/bits/locale_classes.h" 3
    locale(const locale& __base, const char* __s, category __cat);
# 162 "/usr/include/c++/10/bits/locale_classes.h" 3
    explicit
    locale(const std::string& __s) : locale(__s.c_str()) { }
# 177 "/usr/include/c++/10/bits/locale_classes.h" 3
    locale(const locale& __base, const std::string& __s, category __cat)
    : locale(__base, __s.c_str(), __cat) { }
# 192 "/usr/include/c++/10/bits/locale_classes.h" 3
    locale(const locale& __base, const locale& __add, category __cat);
# 205 "/usr/include/c++/10/bits/locale_classes.h" 3
    template<typename _Facet>
      locale(const locale& __other, _Facet* __f);


    ~locale() throw();
# 219 "/usr/include/c++/10/bits/locale_classes.h" 3
    const locale&
    operator=(const locale& __other) throw();
# 234 "/usr/include/c++/10/bits/locale_classes.h" 3
    template<typename _Facet>
      locale
      combine(const locale& __other) const;






    __attribute ((__abi_tag__ ("cxx11")))
    string
    name() const;
# 254 "/usr/include/c++/10/bits/locale_classes.h" 3
    bool
    operator==(const locale& __other) const throw();
# 264 "/usr/include/c++/10/bits/locale_classes.h" 3
    bool
    operator!=(const locale& __other) const throw()
    { return !(this->operator==(__other)); }
# 284 "/usr/include/c++/10/bits/locale_classes.h" 3
    template<typename _Char, typename _Traits, typename _Alloc>
      bool
      operator()(const basic_string<_Char, _Traits, _Alloc>& __s1,
   const basic_string<_Char, _Traits, _Alloc>& __s2) const;
# 300 "/usr/include/c++/10/bits/locale_classes.h" 3
    static locale
    global(const locale& __loc);




    static const locale&
    classic();

  private:

    _Impl* _M_impl;


    static _Impl* _S_classic;


    static _Impl* _S_global;





    static const char* const* const _S_categories;
# 335 "/usr/include/c++/10/bits/locale_classes.h" 3
    enum { _S_categories_size = 6 + 6 };


    static __gthread_once_t _S_once;


    explicit
    locale(_Impl*) throw();

    static void
    _S_initialize();

    static void
    _S_initialize_once() throw();

    static category
    _S_normalize_category(category);

    void
    _M_coalesce(const locale& __base, const locale& __add, category __cat);


    static const id* const _S_twinned_facets[];

  };
# 373 "/usr/include/c++/10/bits/locale_classes.h" 3
  class locale::facet
  {
  private:
    friend class locale;
    friend class locale::_Impl;

    mutable _Atomic_word _M_refcount;


    static __c_locale _S_c_locale;


    static const char _S_c_name[2];


    static __gthread_once_t _S_once;


    static void
    _S_initialize_once();

  protected:
# 404 "/usr/include/c++/10/bits/locale_classes.h" 3
    explicit
    facet(size_t __refs = 0) throw() : _M_refcount(__refs ? 1 : 0)
    { }


    virtual
    ~facet();

    static void
    _S_create_c_locale(__c_locale& __cloc, const char* __s,
         __c_locale __old = 0);

    static __c_locale
    _S_clone_c_locale(__c_locale& __cloc) throw();

    static void
    _S_destroy_c_locale(__c_locale& __cloc);

    static __c_locale
    _S_lc_ctype_c_locale(__c_locale __cloc, const char* __s);



    static __c_locale
    _S_get_c_locale();

    __attribute__ ((__const__)) static const char*
    _S_get_c_name() throw();
# 440 "/usr/include/c++/10/bits/locale_classes.h" 3
    facet(const facet&) = delete;

    facet&
    operator=(const facet&) = delete;


  private:
    void
    _M_add_reference() const throw()
    { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }

    void
    _M_remove_reference() const throw()
    {

      ;
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)
 {
          ;
   try
     { delete this; }
   catch(...)
     { }
 }
    }

    const facet* _M_sso_shim(const id*) const;
    const facet* _M_cow_shim(const id*) const;

  protected:
    class __shim;
  };
# 485 "/usr/include/c++/10/bits/locale_classes.h" 3
  class locale::id
  {
  private:
    friend class locale;
    friend class locale::_Impl;

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();




    mutable size_t _M_index;


    static _Atomic_word _S_refcount;

    void
    operator=(const id&);

    id(const id&);

  public:



    id() { }

    size_t
    _M_id() const throw();
  };



  class locale::_Impl
  {
  public:

    friend class locale;
    friend class locale::facet;

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Cache>
      friend struct __use_cache;

  private:

    _Atomic_word _M_refcount;
    const facet** _M_facets;
    size_t _M_facets_size;
    const facet** _M_caches;
    char** _M_names;
    static const locale::id* const _S_id_ctype[];
    static const locale::id* const _S_id_numeric[];
    static const locale::id* const _S_id_collate[];
    static const locale::id* const _S_id_time[];
    static const locale::id* const _S_id_monetary[];
    static const locale::id* const _S_id_messages[];
    static const locale::id* const* const _S_facet_categories[];

    void
    _M_add_reference() throw()
    { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }

    void
    _M_remove_reference() throw()
    {

      ;
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)
 {
          ;
   try
     { delete this; }
   catch(...)
     { }
 }
    }

    _Impl(const _Impl&, size_t);
    _Impl(const char*, size_t);
    _Impl(size_t) throw();

   ~_Impl() throw();

    _Impl(const _Impl&);

    void
    operator=(const _Impl&);

    bool
    _M_check_same_name()
    {
      bool __ret = true;
      if (_M_names[1])

 for (size_t __i = 0; __ret && __i < _S_categories_size - 1; ++__i)
   __ret = __builtin_strcmp(_M_names[__i], _M_names[__i + 1]) == 0;
      return __ret;
    }

    void
    _M_replace_categories(const _Impl*, category);

    void
    _M_replace_category(const _Impl*, const locale::id* const*);

    void
    _M_replace_facet(const _Impl*, const locale::id*);

    void
    _M_install_facet(const locale::id*, const facet*);

    template<typename _Facet>
      void
      _M_init_facet(_Facet* __facet)
      { _M_install_facet(&_Facet::id, __facet); }

    template<typename _Facet>
      void
      _M_init_facet_unchecked(_Facet* __facet)
      {
 __facet->_M_add_reference();
 _M_facets[_Facet::id._M_id()] = __facet;
      }

    void
    _M_install_cache(const facet*, size_t);

    void _M_init_extra(facet**);
    void _M_init_extra(void*, void*, const char*, const char*);
  };
# 643 "/usr/include/c++/10/bits/locale_classes.h" 3
  template<typename _CharT>
    class __cxx11:: collate : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;


    protected:


      __c_locale _M_c_locale_collate;

    public:

      static locale::id id;
# 670 "/usr/include/c++/10/bits/locale_classes.h" 3
      explicit
      collate(size_t __refs = 0)
      : facet(__refs), _M_c_locale_collate(_S_get_c_locale())
      { }
# 684 "/usr/include/c++/10/bits/locale_classes.h" 3
      explicit
      collate(__c_locale __cloc, size_t __refs = 0)
      : facet(__refs), _M_c_locale_collate(_S_clone_c_locale(__cloc))
      { }
# 701 "/usr/include/c++/10/bits/locale_classes.h" 3
      int
      compare(const _CharT* __lo1, const _CharT* __hi1,
       const _CharT* __lo2, const _CharT* __hi2) const
      { return this->do_compare(__lo1, __hi1, __lo2, __hi2); }
# 720 "/usr/include/c++/10/bits/locale_classes.h" 3
      string_type
      transform(const _CharT* __lo, const _CharT* __hi) const
      { return this->do_transform(__lo, __hi); }
# 734 "/usr/include/c++/10/bits/locale_classes.h" 3
      long
      hash(const _CharT* __lo, const _CharT* __hi) const
      { return this->do_hash(__lo, __hi); }


      int
      _M_compare(const _CharT*, const _CharT*) const throw();

      size_t
      _M_transform(_CharT*, const _CharT*, size_t) const throw();

  protected:

      virtual
      ~collate()
      { _S_destroy_c_locale(_M_c_locale_collate); }
# 763 "/usr/include/c++/10/bits/locale_classes.h" 3
      virtual int
      do_compare(const _CharT* __lo1, const _CharT* __hi1,
   const _CharT* __lo2, const _CharT* __hi2) const;
# 777 "/usr/include/c++/10/bits/locale_classes.h" 3
      virtual string_type
      do_transform(const _CharT* __lo, const _CharT* __hi) const;
# 790 "/usr/include/c++/10/bits/locale_classes.h" 3
      virtual long
      do_hash(const _CharT* __lo, const _CharT* __hi) const;
    };

  template<typename _CharT>
    locale::id collate<_CharT>::id;


  template<>
    int
    collate<char>::_M_compare(const char*, const char*) const throw();

  template<>
    size_t
    collate<char>::_M_transform(char*, const char*, size_t) const throw();


  template<>
    int
    collate<wchar_t>::_M_compare(const wchar_t*, const wchar_t*) const throw();

  template<>
    size_t
    collate<wchar_t>::_M_transform(wchar_t*, const wchar_t*, size_t) const throw();



  template<typename _CharT>
    class __cxx11:: collate_byname : public collate<_CharT>
    {
    public:


      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;


      explicit
      collate_byname(const char* __s, size_t __refs = 0)
      : collate<_CharT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     this->_S_destroy_c_locale(this->_M_c_locale_collate);
     this->_S_create_c_locale(this->_M_c_locale_collate, __s);
   }
      }


      explicit
      collate_byname(const string& __s, size_t __refs = 0)
      : collate_byname(__s.c_str(), __refs) { }


    protected:
      virtual
      ~collate_byname() { }
    };


}

# 1 "/usr/include/c++/10/bits/locale_classes.tcc" 1 3
# 37 "/usr/include/c++/10/bits/locale_classes.tcc" 3
       
# 38 "/usr/include/c++/10/bits/locale_classes.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Facet>
    locale::
    locale(const locale& __other, _Facet* __f)
    {
      _M_impl = new _Impl(*__other._M_impl, 1);

      try
 { _M_impl->_M_install_facet(&_Facet::id, __f); }
      catch(...)
 {
   _M_impl->_M_remove_reference();
   throw;
 }
      delete [] _M_impl->_M_names[0];
      _M_impl->_M_names[0] = 0;
    }

  template<typename _Facet>
    locale
    locale::
    combine(const locale& __other) const
    {
      _Impl* __tmp = new _Impl(*_M_impl, 1);
      try
 {
   __tmp->_M_replace_facet(__other._M_impl, &_Facet::id);
 }
      catch(...)
 {
   __tmp->_M_remove_reference();
   throw;
 }
      return locale(__tmp);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    bool
    locale::
    operator()(const basic_string<_CharT, _Traits, _Alloc>& __s1,
        const basic_string<_CharT, _Traits, _Alloc>& __s2) const
    {
      typedef std::collate<_CharT> __collate_type;
      const __collate_type& __collate = use_facet<__collate_type>(*this);
      return (__collate.compare(__s1.data(), __s1.data() + __s1.length(),
    __s2.data(), __s2.data() + __s2.length()) < 0);
    }
# 102 "/usr/include/c++/10/bits/locale_classes.tcc" 3
  template<typename _Facet>
    bool
    has_facet(const locale& __loc) throw()
    {
      const size_t __i = _Facet::id._M_id();
      const locale::facet** __facets = __loc._M_impl->_M_facets;
      return (__i < __loc._M_impl->_M_facets_size

       && dynamic_cast<const _Facet*>(__facets[__i]));



    }
# 130 "/usr/include/c++/10/bits/locale_classes.tcc" 3
  template<typename _Facet>
    const _Facet&
    use_facet(const locale& __loc)
    {
      const size_t __i = _Facet::id._M_id();
      const locale::facet** __facets = __loc._M_impl->_M_facets;
      if (__i >= __loc._M_impl->_M_facets_size || !__facets[__i])
        __throw_bad_cast();

      return dynamic_cast<const _Facet&>(*__facets[__i]);



    }



  template<typename _CharT>
    int
    collate<_CharT>::_M_compare(const _CharT*, const _CharT*) const throw ()
    { return 0; }


  template<typename _CharT>
    size_t
    collate<_CharT>::_M_transform(_CharT*, const _CharT*, size_t) const throw ()
    { return 0; }

  template<typename _CharT>
    int
    collate<_CharT>::
    do_compare(const _CharT* __lo1, const _CharT* __hi1,
        const _CharT* __lo2, const _CharT* __hi2) const
    {


      const string_type __one(__lo1, __hi1);
      const string_type __two(__lo2, __hi2);

      const _CharT* __p = __one.c_str();
      const _CharT* __pend = __one.data() + __one.length();
      const _CharT* __q = __two.c_str();
      const _CharT* __qend = __two.data() + __two.length();




      for (;;)
 {
   const int __res = _M_compare(__p, __q);
   if (__res)
     return __res;

   __p += char_traits<_CharT>::length(__p);
   __q += char_traits<_CharT>::length(__q);
   if (__p == __pend && __q == __qend)
     return 0;
   else if (__p == __pend)
     return -1;
   else if (__q == __qend)
     return 1;

   __p++;
   __q++;
 }
    }

  template<typename _CharT>
    typename collate<_CharT>::string_type
    collate<_CharT>::
    do_transform(const _CharT* __lo, const _CharT* __hi) const
    {
      string_type __ret;


      const string_type __str(__lo, __hi);

      const _CharT* __p = __str.c_str();
      const _CharT* __pend = __str.data() + __str.length();

      size_t __len = (__hi - __lo) * 2;

      _CharT* __c = new _CharT[__len];

      try
 {



   for (;;)
     {

       size_t __res = _M_transform(__c, __p, __len);


       if (__res >= __len)
  {
    __len = __res + 1;
    delete [] __c, __c = 0;
    __c = new _CharT[__len];
    __res = _M_transform(__c, __p, __len);
  }

       __ret.append(__c, __res);
       __p += char_traits<_CharT>::length(__p);
       if (__p == __pend)
  break;

       __p++;
       __ret.push_back(_CharT());
     }
 }
      catch(...)
 {
   delete [] __c;
   throw;
 }

      delete [] __c;

      return __ret;
    }

  template<typename _CharT>
    long
    collate<_CharT>::
    do_hash(const _CharT* __lo, const _CharT* __hi) const
    {
      unsigned long __val = 0;
      for (; __lo < __hi; ++__lo)
 __val =
   *__lo + ((__val << 7)
     | (__val >> (__gnu_cxx::__numeric_traits<unsigned long>::
    __digits - 7)));
      return static_cast<long>(__val);
    }




  extern template class collate<char>;
  extern template class collate_byname<char>;

  extern template
    const collate<char>&
    use_facet<collate<char> >(const locale&);

  extern template
    bool
    has_facet<collate<char> >(const locale&);


  extern template class collate<wchar_t>;
  extern template class collate_byname<wchar_t>;

  extern template
    const collate<wchar_t>&
    use_facet<collate<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<collate<wchar_t> >(const locale&);




}
# 854 "/usr/include/c++/10/bits/locale_classes.h" 2 3
# 42 "/usr/include/c++/10/bits/ios_base.h" 2 3




# 1 "/usr/include/c++/10/system_error" 1 3
# 32 "/usr/include/c++/10/system_error" 3
       
# 33 "/usr/include/c++/10/system_error" 3






# 1 "/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h" 1 3
# 34 "/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h" 3
# 1 "/usr/include/c++/10/cerrno" 1 3
# 39 "/usr/include/c++/10/cerrno" 3
       
# 40 "/usr/include/c++/10/cerrno" 3
# 35 "/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  enum class errc
    {
      address_family_not_supported = 97,
      address_in_use = 98,
      address_not_available = 99,
      already_connected = 106,
      argument_list_too_long = 7,
      argument_out_of_domain = 33,
      bad_address = 14,
      bad_file_descriptor = 9,


      bad_message = 74,


      broken_pipe = 32,
      connection_aborted = 103,
      connection_already_in_progress = 114,
      connection_refused = 111,
      connection_reset = 104,
      cross_device_link = 18,
      destination_address_required = 89,
      device_or_resource_busy = 16,
      directory_not_empty = 39,
      executable_format_error = 8,
      file_exists = 17,
      file_too_large = 27,
      filename_too_long = 36,
      function_not_supported = 38,
      host_unreachable = 113,


      identifier_removed = 43,


      illegal_byte_sequence = 84,
      inappropriate_io_control_operation = 25,
      interrupted = 4,
      invalid_argument = 22,
      invalid_seek = 29,
      io_error = 5,
      is_a_directory = 21,
      message_size = 90,
      network_down = 100,
      network_reset = 102,
      network_unreachable = 101,
      no_buffer_space = 105,
      no_child_process = 10,


      no_link = 67,


      no_lock_available = 37,


      no_message_available = 61,


      no_message = 42,
      no_protocol_option = 92,
      no_space_on_device = 28,


      no_stream_resources = 63,


      no_such_device_or_address = 6,
      no_such_device = 19,
      no_such_file_or_directory = 2,
      no_such_process = 3,
      not_a_directory = 20,
      not_a_socket = 88,


      not_a_stream = 60,


      not_connected = 107,
      not_enough_memory = 12,


      not_supported = 95,



      operation_canceled = 125,


      operation_in_progress = 115,
      operation_not_permitted = 1,
      operation_not_supported = 95,
      operation_would_block = 11,


      owner_dead = 130,


      permission_denied = 13,


      protocol_error = 71,


      protocol_not_supported = 93,
      read_only_file_system = 30,
      resource_deadlock_would_occur = 35,
      resource_unavailable_try_again = 11,
      result_out_of_range = 34,


      state_not_recoverable = 131,



      stream_timeout = 62,



      text_file_busy = 26,


      timed_out = 110,
      too_many_files_open_in_system = 23,
      too_many_files_open = 24,
      too_many_links = 31,
      too_many_symbolic_link_levels = 40,


      value_too_large = 75,


      wrong_protocol_type = 91
    };


}
# 40 "/usr/include/c++/10/system_error" 2 3

# 1 "/usr/include/c++/10/stdexcept" 1 3
# 36 "/usr/include/c++/10/stdexcept" 3
       
# 37 "/usr/include/c++/10/stdexcept" 3




namespace std __attribute__ ((__visibility__ ("default")))
{





  struct __cow_string
  {
    union {
      const char* _M_p;
      char _M_bytes[sizeof(const char*)];
    };

    __cow_string();
    __cow_string(const std::string&);
    __cow_string(const char*, size_t);
    __cow_string(const __cow_string&) noexcept;
    __cow_string& operator=(const __cow_string&) noexcept;
    ~__cow_string();

    __cow_string(__cow_string&&) noexcept;
    __cow_string& operator=(__cow_string&&) noexcept;

  };

  typedef basic_string<char> __sso_string;
# 113 "/usr/include/c++/10/stdexcept" 3
  class logic_error : public exception
  {
    __cow_string _M_msg;

  public:

    explicit
    logic_error(const string& __arg) ;


    explicit
    logic_error(const char*) ;

    logic_error(logic_error&&) noexcept;
    logic_error& operator=(logic_error&&) noexcept;



    logic_error(const logic_error&) noexcept;
    logic_error& operator=(const logic_error&) noexcept;





    virtual ~logic_error() noexcept;



    virtual const char*
    what() const noexcept;





  };



  class domain_error : public logic_error
  {
  public:
    explicit domain_error(const string& __arg) ;

    explicit domain_error(const char*) ;
    domain_error(const domain_error&) = default;
    domain_error& operator=(const domain_error&) = default;
    domain_error(domain_error&&) = default;
    domain_error& operator=(domain_error&&) = default;

    virtual ~domain_error() noexcept;
  };


  class invalid_argument : public logic_error
  {
  public:
    explicit invalid_argument(const string& __arg) ;

    explicit invalid_argument(const char*) ;
    invalid_argument(const invalid_argument&) = default;
    invalid_argument& operator=(const invalid_argument&) = default;
    invalid_argument(invalid_argument&&) = default;
    invalid_argument& operator=(invalid_argument&&) = default;

    virtual ~invalid_argument() noexcept;
  };



  class length_error : public logic_error
  {
  public:
    explicit length_error(const string& __arg) ;

    explicit length_error(const char*) ;
    length_error(const length_error&) = default;
    length_error& operator=(const length_error&) = default;
    length_error(length_error&&) = default;
    length_error& operator=(length_error&&) = default;

    virtual ~length_error() noexcept;
  };



  class out_of_range : public logic_error
  {
  public:
    explicit out_of_range(const string& __arg) ;

    explicit out_of_range(const char*) ;
    out_of_range(const out_of_range&) = default;
    out_of_range& operator=(const out_of_range&) = default;
    out_of_range(out_of_range&&) = default;
    out_of_range& operator=(out_of_range&&) = default;

    virtual ~out_of_range() noexcept;
  };






  class runtime_error : public exception
  {
    __cow_string _M_msg;

  public:

    explicit
    runtime_error(const string& __arg) ;


    explicit
    runtime_error(const char*) ;

    runtime_error(runtime_error&&) noexcept;
    runtime_error& operator=(runtime_error&&) noexcept;



    runtime_error(const runtime_error&) noexcept;
    runtime_error& operator=(const runtime_error&) noexcept;





    virtual ~runtime_error() noexcept;



    virtual const char*
    what() const noexcept;





  };


  class range_error : public runtime_error
  {
  public:
    explicit range_error(const string& __arg) ;

    explicit range_error(const char*) ;
    range_error(const range_error&) = default;
    range_error& operator=(const range_error&) = default;
    range_error(range_error&&) = default;
    range_error& operator=(range_error&&) = default;

    virtual ~range_error() noexcept;
  };


  class overflow_error : public runtime_error
  {
  public:
    explicit overflow_error(const string& __arg) ;

    explicit overflow_error(const char*) ;
    overflow_error(const overflow_error&) = default;
    overflow_error& operator=(const overflow_error&) = default;
    overflow_error(overflow_error&&) = default;
    overflow_error& operator=(overflow_error&&) = default;

    virtual ~overflow_error() noexcept;
  };


  class underflow_error : public runtime_error
  {
  public:
    explicit underflow_error(const string& __arg) ;

    explicit underflow_error(const char*) ;
    underflow_error(const underflow_error&) = default;
    underflow_error& operator=(const underflow_error&) = default;
    underflow_error(underflow_error&&) = default;
    underflow_error& operator=(underflow_error&&) = default;

    virtual ~underflow_error() noexcept;
  };




}
# 42 "/usr/include/c++/10/system_error" 2 3




namespace std __attribute__ ((__visibility__ ("default")))
{






  class error_code;
  class error_condition;
  class system_error;


  template<typename _Tp>
    struct is_error_code_enum : public false_type { };


  template<typename _Tp>
    struct is_error_condition_enum : public false_type { };

  template<>
    struct is_error_condition_enum<errc>
    : public true_type { };
# 78 "/usr/include/c++/10/system_error" 3
  inline namespace _V2 {
# 89 "/usr/include/c++/10/system_error" 3
  class error_category
  {
  public:
    constexpr error_category() noexcept = default;

    virtual ~error_category();

    error_category(const error_category&) = delete;
    error_category& operator=(const error_category&) = delete;

    virtual const char*
    name() const noexcept = 0;






  private:
    __attribute ((__abi_tag__ ("cxx11")))
    virtual __cow_string
    _M_message(int) const;

  public:
    __attribute ((__abi_tag__ ("cxx11")))
    virtual string
    message(int) const = 0;
# 125 "/usr/include/c++/10/system_error" 3
  public:
    virtual error_condition
    default_error_condition(int __i) const noexcept;

    virtual bool
    equivalent(int __i, const error_condition& __cond) const noexcept;

    virtual bool
    equivalent(const error_code& __code, int __i) const noexcept;

    bool
    operator==(const error_category& __other) const noexcept
    { return this == &__other; }






    bool
    operator!=(const error_category& __other) const noexcept
    { return this != &__other; }

    bool
    operator<(const error_category& __other) const noexcept
    { return less<const error_category*>()(this, &__other); }

  };




  __attribute__ ((__const__)) const error_category& generic_category() noexcept;


  __attribute__ ((__const__)) const error_category& system_category() noexcept;

  }

  error_code make_error_code(errc) noexcept;
# 180 "/usr/include/c++/10/system_error" 3
  struct error_code
  {
    error_code() noexcept
    : _M_value(0), _M_cat(&system_category()) { }

    error_code(int __v, const error_category& __cat) noexcept
    : _M_value(__v), _M_cat(&__cat) { }

    template<typename _ErrorCodeEnum, typename = typename
      enable_if<is_error_code_enum<_ErrorCodeEnum>::value>::type>
      error_code(_ErrorCodeEnum __e) noexcept
      { *this = make_error_code(__e); }

    void
    assign(int __v, const error_category& __cat) noexcept
    {
      _M_value = __v;
      _M_cat = &__cat;
    }

    void
    clear() noexcept
    { assign(0, system_category()); }


    template<typename _ErrorCodeEnum>
      typename enable_if<is_error_code_enum<_ErrorCodeEnum>::value,
    error_code&>::type
      operator=(_ErrorCodeEnum __e) noexcept
      { return *this = make_error_code(__e); }

    int
    value() const noexcept { return _M_value; }

    const error_category&
    category() const noexcept { return *_M_cat; }

    error_condition
    default_error_condition() const noexcept;

    __attribute ((__abi_tag__ ("cxx11")))
    string
    message() const
    { return category().message(value()); }

    explicit operator bool() const noexcept
    { return _M_value != 0; }


  private:
    int _M_value;
    const error_category* _M_cat;
  };





  inline error_code
  make_error_code(errc __e) noexcept
  { return error_code(static_cast<int>(__e), generic_category()); }
# 251 "/usr/include/c++/10/system_error" 3
  inline bool
  operator<(const error_code& __lhs, const error_code& __rhs) noexcept
  {
    return (__lhs.category() < __rhs.category()
     || (__lhs.category() == __rhs.category()
  && __lhs.value() < __rhs.value()));
  }


  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os, const error_code& __e)
    { return (__os << __e.category().name() << ':' << __e.value()); }



  error_condition make_error_condition(errc) noexcept;
# 278 "/usr/include/c++/10/system_error" 3
  struct error_condition
  {
    error_condition() noexcept
    : _M_value(0), _M_cat(&generic_category()) { }

    error_condition(int __v, const error_category& __cat) noexcept
    : _M_value(__v), _M_cat(&__cat) { }

    template<typename _ErrorConditionEnum, typename = typename
  enable_if<is_error_condition_enum<_ErrorConditionEnum>::value>::type>
      error_condition(_ErrorConditionEnum __e) noexcept
      { *this = make_error_condition(__e); }

    void
    assign(int __v, const error_category& __cat) noexcept
    {
      _M_value = __v;
      _M_cat = &__cat;
    }


    template<typename _ErrorConditionEnum>
      typename enable_if<is_error_condition_enum
    <_ErrorConditionEnum>::value, error_condition&>::type
      operator=(_ErrorConditionEnum __e) noexcept
      { return *this = make_error_condition(__e); }

    void
    clear() noexcept
    { assign(0, generic_category()); }


    int
    value() const noexcept { return _M_value; }

    const error_category&
    category() const noexcept { return *_M_cat; }

    __attribute ((__abi_tag__ ("cxx11")))
    string
    message() const
    { return category().message(value()); }

    explicit operator bool() const noexcept
    { return _M_value != 0; }


  private:
    int _M_value;
    const error_category* _M_cat;
  };





  inline error_condition
  make_error_condition(errc __e) noexcept
  { return error_condition(static_cast<int>(__e), generic_category()); }




  inline bool
  operator==(const error_code& __lhs, const error_code& __rhs) noexcept
  { return (__lhs.category() == __rhs.category()
     && __lhs.value() == __rhs.value()); }



  inline bool
  operator==(const error_code& __lhs, const error_condition& __rhs) noexcept
  {
    return (__lhs.category().equivalent(__lhs.value(), __rhs)
     || __rhs.category().equivalent(__lhs, __rhs.value()));
  }


  inline bool
  operator==(const error_condition& __lhs,
      const error_condition& __rhs) noexcept
  {
    return (__lhs.category() == __rhs.category()
     && __lhs.value() == __rhs.value());
  }
# 378 "/usr/include/c++/10/system_error" 3
  inline bool
  operator<(const error_condition& __lhs,
     const error_condition& __rhs) noexcept
  {
    return (__lhs.category() < __rhs.category()
     || (__lhs.category() == __rhs.category()
  && __lhs.value() < __rhs.value()));
  }



  inline bool
  operator==(const error_condition& __lhs, const error_code& __rhs) noexcept
  {
    return (__rhs.category().equivalent(__rhs.value(), __lhs)
     || __lhs.category().equivalent(__rhs, __lhs.value()));
  }


  inline bool
  operator!=(const error_code& __lhs, const error_code& __rhs) noexcept
  { return !(__lhs == __rhs); }



  inline bool
  operator!=(const error_code& __lhs, const error_condition& __rhs) noexcept
  { return !(__lhs == __rhs); }



  inline bool
  operator!=(const error_condition& __lhs, const error_code& __rhs) noexcept
  { return !(__lhs == __rhs); }


  inline bool
  operator!=(const error_condition& __lhs,
      const error_condition& __rhs) noexcept
  { return !(__lhs == __rhs); }
# 428 "/usr/include/c++/10/system_error" 3
  class system_error : public std::runtime_error
  {
  private:
    error_code _M_code;

  public:
    system_error(error_code __ec = error_code())
    : runtime_error(__ec.message()), _M_code(__ec) { }

    system_error(error_code __ec, const string& __what)
    : runtime_error(__what + ": " + __ec.message()), _M_code(__ec) { }

    system_error(error_code __ec, const char* __what)
    : runtime_error(__what + (": " + __ec.message())), _M_code(__ec) { }

    system_error(int __v, const error_category& __ecat, const char* __what)
    : system_error(error_code(__v, __ecat), __what) { }

    system_error(int __v, const error_category& __ecat)
    : runtime_error(error_code(__v, __ecat).message()),
      _M_code(__v, __ecat) { }

    system_error(int __v, const error_category& __ecat, const string& __what)
    : runtime_error(__what + ": " + error_code(__v, __ecat).message()),
      _M_code(__v, __ecat) { }


    system_error (const system_error &) = default;
    system_error &operator= (const system_error &) = default;


    virtual ~system_error() noexcept;

    const error_code&
    code() const noexcept { return _M_code; }
  };


}



namespace std __attribute__ ((__visibility__ ("default")))
{






  template<>
    struct hash<error_code>
    : public __hash_base<size_t, error_code>
    {
      size_t
      operator()(const error_code& __e) const noexcept
      {
 const size_t __tmp = std::_Hash_impl::hash(__e.value());
 return std::_Hash_impl::__hash_combine(&__e.category(), __tmp);
      }
    };
# 508 "/usr/include/c++/10/system_error" 3

}
# 47 "/usr/include/c++/10/bits/ios_base.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{






  enum _Ios_Fmtflags
    {
      _S_boolalpha = 1L << 0,
      _S_dec = 1L << 1,
      _S_fixed = 1L << 2,
      _S_hex = 1L << 3,
      _S_internal = 1L << 4,
      _S_left = 1L << 5,
      _S_oct = 1L << 6,
      _S_right = 1L << 7,
      _S_scientific = 1L << 8,
      _S_showbase = 1L << 9,
      _S_showpoint = 1L << 10,
      _S_showpos = 1L << 11,
      _S_skipws = 1L << 12,
      _S_unitbuf = 1L << 13,
      _S_uppercase = 1L << 14,
      _S_adjustfield = _S_left | _S_right | _S_internal,
      _S_basefield = _S_dec | _S_oct | _S_hex,
      _S_floatfield = _S_scientific | _S_fixed,
      _S_ios_fmtflags_end = 1L << 16,
      _S_ios_fmtflags_max = 0x7fffffff,
      _S_ios_fmtflags_min = ~0x7fffffff
    };

  inline constexpr _Ios_Fmtflags
  operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline constexpr _Ios_Fmtflags
  operator|(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline constexpr _Ios_Fmtflags
  operator^(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline constexpr _Ios_Fmtflags
  operator~(_Ios_Fmtflags __a)
  { return _Ios_Fmtflags(~static_cast<int>(__a)); }

  inline const _Ios_Fmtflags&
  operator|=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a | __b; }

  inline const _Ios_Fmtflags&
  operator&=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a & __b; }

  inline const _Ios_Fmtflags&
  operator^=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a ^ __b; }


  enum _Ios_Openmode
    {
      _S_app = 1L << 0,
      _S_ate = 1L << 1,
      _S_bin = 1L << 2,
      _S_in = 1L << 3,
      _S_out = 1L << 4,
      _S_trunc = 1L << 5,
      _S_ios_openmode_end = 1L << 16,
      _S_ios_openmode_max = 0x7fffffff,
      _S_ios_openmode_min = ~0x7fffffff
    };

  inline constexpr _Ios_Openmode
  operator&(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline constexpr _Ios_Openmode
  operator|(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline constexpr _Ios_Openmode
  operator^(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline constexpr _Ios_Openmode
  operator~(_Ios_Openmode __a)
  { return _Ios_Openmode(~static_cast<int>(__a)); }

  inline const _Ios_Openmode&
  operator|=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a | __b; }

  inline const _Ios_Openmode&
  operator&=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a & __b; }

  inline const _Ios_Openmode&
  operator^=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a ^ __b; }


  enum _Ios_Iostate
    {
      _S_goodbit = 0,
      _S_badbit = 1L << 0,
      _S_eofbit = 1L << 1,
      _S_failbit = 1L << 2,
      _S_ios_iostate_end = 1L << 16,
      _S_ios_iostate_max = 0x7fffffff,
      _S_ios_iostate_min = ~0x7fffffff
    };

  inline constexpr _Ios_Iostate
  operator&(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline constexpr _Ios_Iostate
  operator|(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline constexpr _Ios_Iostate
  operator^(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline constexpr _Ios_Iostate
  operator~(_Ios_Iostate __a)
  { return _Ios_Iostate(~static_cast<int>(__a)); }

  inline const _Ios_Iostate&
  operator|=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a | __b; }

  inline const _Ios_Iostate&
  operator&=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a & __b; }

  inline const _Ios_Iostate&
  operator^=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a ^ __b; }


  enum _Ios_Seekdir
    {
      _S_beg = 0,
      _S_cur = 1,
      _S_end = 2,
      _S_ios_seekdir_end = 1L << 16
    };



  enum class io_errc { stream = 1 };

  template <> struct is_error_code_enum<io_errc> : public true_type { };

  const error_category& iostream_category() noexcept;

  inline error_code
  make_error_code(io_errc __e) noexcept
  { return error_code(static_cast<int>(__e), iostream_category()); }

  inline error_condition
  make_error_condition(io_errc __e) noexcept
  { return error_condition(static_cast<int>(__e), iostream_category()); }
# 228 "/usr/include/c++/10/bits/ios_base.h" 3
  class ios_base
  {
# 246 "/usr/include/c++/10/bits/ios_base.h" 3
  public:
# 255 "/usr/include/c++/10/bits/ios_base.h" 3
    class __attribute ((__abi_tag__ ("cxx11"))) failure : public system_error
    {
    public:
      explicit
      failure(const string& __str);


      explicit
      failure(const string&, const error_code&);

      explicit
      failure(const char*, const error_code& = io_errc::stream);


      virtual
      ~failure() throw();

      virtual const char*
      what() const throw();
    };
# 341 "/usr/include/c++/10/bits/ios_base.h" 3
    typedef _Ios_Fmtflags fmtflags;


    static const fmtflags boolalpha = _S_boolalpha;


    static const fmtflags dec = _S_dec;


    static const fmtflags fixed = _S_fixed;


    static const fmtflags hex = _S_hex;




    static const fmtflags internal = _S_internal;



    static const fmtflags left = _S_left;


    static const fmtflags oct = _S_oct;



    static const fmtflags right = _S_right;


    static const fmtflags scientific = _S_scientific;



    static const fmtflags showbase = _S_showbase;



    static const fmtflags showpoint = _S_showpoint;


    static const fmtflags showpos = _S_showpos;


    static const fmtflags skipws = _S_skipws;


    static const fmtflags unitbuf = _S_unitbuf;



    static const fmtflags uppercase = _S_uppercase;


    static const fmtflags adjustfield = _S_adjustfield;


    static const fmtflags basefield = _S_basefield;


    static const fmtflags floatfield = _S_floatfield;
# 416 "/usr/include/c++/10/bits/ios_base.h" 3
    typedef _Ios_Iostate iostate;



    static const iostate badbit = _S_badbit;


    static const iostate eofbit = _S_eofbit;




    static const iostate failbit = _S_failbit;


    static const iostate goodbit = _S_goodbit;
# 447 "/usr/include/c++/10/bits/ios_base.h" 3
    typedef _Ios_Openmode openmode;


    static const openmode app = _S_app;


    static const openmode ate = _S_ate;




    static const openmode binary = _S_bin;


    static const openmode in = _S_in;


    static const openmode out = _S_out;


    static const openmode trunc = _S_trunc;
# 479 "/usr/include/c++/10/bits/ios_base.h" 3
    typedef _Ios_Seekdir seekdir;


    static const seekdir beg = _S_beg;


    static const seekdir cur = _S_cur;


    static const seekdir end = _S_end;



    typedef int io_state
      __attribute__ ((__deprecated__ ("use '" "std::iostate" "' instead")));
    typedef int open_mode
      __attribute__ ((__deprecated__ ("use '" "std::openmode" "' instead")));
    typedef int seek_dir
      __attribute__ ((__deprecated__ ("use '" "std::seekdir" "' instead")));

    typedef std::streampos streampos
      __attribute__ ((__deprecated__ ("use '" "std::streampos" "' instead")));
    typedef std::streamoff streamoff
      __attribute__ ((__deprecated__ ("use '" "std::streamoff" "' instead")));
# 512 "/usr/include/c++/10/bits/ios_base.h" 3
    enum event
    {
      erase_event,
      imbue_event,
      copyfmt_event
    };
# 529 "/usr/include/c++/10/bits/ios_base.h" 3
    typedef void (*event_callback) (event __e, ios_base& __b, int __i);
# 541 "/usr/include/c++/10/bits/ios_base.h" 3
    void
    register_callback(event_callback __fn, int __index);

  protected:
    streamsize _M_precision;
    streamsize _M_width;
    fmtflags _M_flags;
    iostate _M_exception;
    iostate _M_streambuf_state;



    struct _Callback_list
    {

      _Callback_list* _M_next;
      ios_base::event_callback _M_fn;
      int _M_index;
      _Atomic_word _M_refcount;

      _Callback_list(ios_base::event_callback __fn, int __index,
       _Callback_list* __cb)
      : _M_next(__cb), _M_fn(__fn), _M_index(__index), _M_refcount(0) { }

      void
      _M_add_reference() { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }


      int
      _M_remove_reference()
      {

        ;
        int __res = __gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1);
        if (__res == 0)
          {
            ;
          }
        return __res;
      }
    };

     _Callback_list* _M_callbacks;

    void
    _M_call_callbacks(event __ev) throw();

    void
    _M_dispose_callbacks(void) throw();


    struct _Words
    {
      void* _M_pword;
      long _M_iword;
      _Words() : _M_pword(0), _M_iword(0) { }
    };


    _Words _M_word_zero;



    enum { _S_local_word_size = 8 };
    _Words _M_local_word[_S_local_word_size];


    int _M_word_size;
    _Words* _M_word;

    _Words&
    _M_grow_words(int __index, bool __iword);


    locale _M_ios_locale;

    void
    _M_init() throw();

  public:





    class Init
    {
      friend class ios_base;
    public:
      Init();
      ~Init();


      Init(const Init&) = default;
      Init& operator=(const Init&) = default;


    private:
      static _Atomic_word _S_refcount;
      static bool _S_synced_with_stdio;
    };






    fmtflags
    flags() const
    { return _M_flags; }
# 659 "/usr/include/c++/10/bits/ios_base.h" 3
    fmtflags
    flags(fmtflags __fmtfl)
    {
      fmtflags __old = _M_flags;
      _M_flags = __fmtfl;
      return __old;
    }
# 675 "/usr/include/c++/10/bits/ios_base.h" 3
    fmtflags
    setf(fmtflags __fmtfl)
    {
      fmtflags __old = _M_flags;
      _M_flags |= __fmtfl;
      return __old;
    }
# 692 "/usr/include/c++/10/bits/ios_base.h" 3
    fmtflags
    setf(fmtflags __fmtfl, fmtflags __mask)
    {
      fmtflags __old = _M_flags;
      _M_flags &= ~__mask;
      _M_flags |= (__fmtfl & __mask);
      return __old;
    }







    void
    unsetf(fmtflags __mask)
    { _M_flags &= ~__mask; }
# 718 "/usr/include/c++/10/bits/ios_base.h" 3
    streamsize
    precision() const
    { return _M_precision; }






    streamsize
    precision(streamsize __prec)
    {
      streamsize __old = _M_precision;
      _M_precision = __prec;
      return __old;
    }







    streamsize
    width() const
    { return _M_width; }






    streamsize
    width(streamsize __wide)
    {
      streamsize __old = _M_width;
      _M_width = __wide;
      return __old;
    }
# 769 "/usr/include/c++/10/bits/ios_base.h" 3
    static bool
    sync_with_stdio(bool __sync = true);
# 781 "/usr/include/c++/10/bits/ios_base.h" 3
    locale
    imbue(const locale& __loc) throw();
# 792 "/usr/include/c++/10/bits/ios_base.h" 3
    locale
    getloc() const
    { return _M_ios_locale; }
# 803 "/usr/include/c++/10/bits/ios_base.h" 3
    const locale&
    _M_getloc() const
    { return _M_ios_locale; }
# 822 "/usr/include/c++/10/bits/ios_base.h" 3
    static int
    xalloc() throw();
# 838 "/usr/include/c++/10/bits/ios_base.h" 3
    long&
    iword(int __ix)
    {
      _Words& __word = ((unsigned)__ix < (unsigned)_M_word_size)
   ? _M_word[__ix] : _M_grow_words(__ix, true);
      return __word._M_iword;
    }
# 859 "/usr/include/c++/10/bits/ios_base.h" 3
    void*&
    pword(int __ix)
    {
      _Words& __word = ((unsigned)__ix < (unsigned)_M_word_size)
   ? _M_word[__ix] : _M_grow_words(__ix, false);
      return __word._M_pword;
    }
# 876 "/usr/include/c++/10/bits/ios_base.h" 3
    virtual ~ios_base();

  protected:
    ios_base() throw ();
# 890 "/usr/include/c++/10/bits/ios_base.h" 3
  public:
    ios_base(const ios_base&) = delete;

    ios_base&
    operator=(const ios_base&) = delete;

  protected:
    void
    _M_move(ios_base&) noexcept;

    void
    _M_swap(ios_base& __rhs) noexcept;

  };



  inline ios_base&
  boolalpha(ios_base& __base)
  {
    __base.setf(ios_base::boolalpha);
    return __base;
  }


  inline ios_base&
  noboolalpha(ios_base& __base)
  {
    __base.unsetf(ios_base::boolalpha);
    return __base;
  }


  inline ios_base&
  showbase(ios_base& __base)
  {
    __base.setf(ios_base::showbase);
    return __base;
  }


  inline ios_base&
  noshowbase(ios_base& __base)
  {
    __base.unsetf(ios_base::showbase);
    return __base;
  }


  inline ios_base&
  showpoint(ios_base& __base)
  {
    __base.setf(ios_base::showpoint);
    return __base;
  }


  inline ios_base&
  noshowpoint(ios_base& __base)
  {
    __base.unsetf(ios_base::showpoint);
    return __base;
  }


  inline ios_base&
  showpos(ios_base& __base)
  {
    __base.setf(ios_base::showpos);
    return __base;
  }


  inline ios_base&
  noshowpos(ios_base& __base)
  {
    __base.unsetf(ios_base::showpos);
    return __base;
  }


  inline ios_base&
  skipws(ios_base& __base)
  {
    __base.setf(ios_base::skipws);
    return __base;
  }


  inline ios_base&
  noskipws(ios_base& __base)
  {
    __base.unsetf(ios_base::skipws);
    return __base;
  }


  inline ios_base&
  uppercase(ios_base& __base)
  {
    __base.setf(ios_base::uppercase);
    return __base;
  }


  inline ios_base&
  nouppercase(ios_base& __base)
  {
    __base.unsetf(ios_base::uppercase);
    return __base;
  }


  inline ios_base&
  unitbuf(ios_base& __base)
  {
     __base.setf(ios_base::unitbuf);
     return __base;
  }


  inline ios_base&
  nounitbuf(ios_base& __base)
  {
     __base.unsetf(ios_base::unitbuf);
     return __base;
  }



  inline ios_base&
  internal(ios_base& __base)
  {
     __base.setf(ios_base::internal, ios_base::adjustfield);
     return __base;
  }


  inline ios_base&
  left(ios_base& __base)
  {
    __base.setf(ios_base::left, ios_base::adjustfield);
    return __base;
  }


  inline ios_base&
  right(ios_base& __base)
  {
    __base.setf(ios_base::right, ios_base::adjustfield);
    return __base;
  }



  inline ios_base&
  dec(ios_base& __base)
  {
    __base.setf(ios_base::dec, ios_base::basefield);
    return __base;
  }


  inline ios_base&
  hex(ios_base& __base)
  {
    __base.setf(ios_base::hex, ios_base::basefield);
    return __base;
  }


  inline ios_base&
  oct(ios_base& __base)
  {
    __base.setf(ios_base::oct, ios_base::basefield);
    return __base;
  }



  inline ios_base&
  fixed(ios_base& __base)
  {
    __base.setf(ios_base::fixed, ios_base::floatfield);
    return __base;
  }


  inline ios_base&
  scientific(ios_base& __base)
  {
    __base.setf(ios_base::scientific, ios_base::floatfield);
    return __base;
  }






  inline ios_base&
  hexfloat(ios_base& __base)
  {
    __base.setf(ios_base::fixed | ios_base::scientific, ios_base::floatfield);
    return __base;
  }


  inline ios_base&
  defaultfloat(ios_base& __base)
  {
    __base.unsetf(ios_base::floatfield);
    return __base;
  }



}
# 42 "/usr/include/c++/10/streambuf" 2 3



namespace std __attribute__ ((__visibility__ ("default")))
{




  template<typename _CharT, typename _Traits>
    streamsize
    __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>*,
     basic_streambuf<_CharT, _Traits>*, bool&);
# 121 "/usr/include/c++/10/streambuf" 3
  template<typename _CharT, typename _Traits>
    class basic_streambuf
    {
    public:






      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;




      typedef basic_streambuf<char_type, traits_type> __streambuf_type;


      friend class basic_ios<char_type, traits_type>;
      friend class basic_istream<char_type, traits_type>;
      friend class basic_ostream<char_type, traits_type>;
      friend class istreambuf_iterator<char_type, traits_type>;
      friend class ostreambuf_iterator<char_type, traits_type>;

      friend streamsize
      __copy_streambufs_eof<>(basic_streambuf*, basic_streambuf*, bool&);

      template<bool _IsMove, typename _CharT2>
        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            _CharT2*>::__type
        __copy_move_a2(istreambuf_iterator<_CharT2>,
         istreambuf_iterator<_CharT2>, _CharT2*);

      template<typename _CharT2>
        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
      istreambuf_iterator<_CharT2> >::__type
        find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      const _CharT2&);

      template<typename _CharT2, typename _Distance>
        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            void>::__type
        advance(istreambuf_iterator<_CharT2>&, _Distance);

      template<typename _CharT2, typename _Traits2>
        friend basic_istream<_CharT2, _Traits2>&
        operator>>(basic_istream<_CharT2, _Traits2>&, _CharT2*);

      template<typename _CharT2, typename _Traits2, typename _Alloc>
        friend basic_istream<_CharT2, _Traits2>&
        operator>>(basic_istream<_CharT2, _Traits2>&,
     basic_string<_CharT2, _Traits2, _Alloc>&);

      template<typename _CharT2, typename _Traits2, typename _Alloc>
        friend basic_istream<_CharT2, _Traits2>&
        getline(basic_istream<_CharT2, _Traits2>&,
  basic_string<_CharT2, _Traits2, _Alloc>&, _CharT2);

    protected:







      char_type* _M_in_beg;
      char_type* _M_in_cur;
      char_type* _M_in_end;
      char_type* _M_out_beg;
      char_type* _M_out_cur;
      char_type* _M_out_end;


      locale _M_buf_locale;

  public:

      virtual
      ~basic_streambuf()
      { }
# 215 "/usr/include/c++/10/streambuf" 3
      locale
      pubimbue(const locale& __loc)
      {
 locale __tmp(this->getloc());
 this->imbue(__loc);
 _M_buf_locale = __loc;
 return __tmp;
      }
# 232 "/usr/include/c++/10/streambuf" 3
      locale
      getloc() const
      { return _M_buf_locale; }
# 245 "/usr/include/c++/10/streambuf" 3
      basic_streambuf*
      pubsetbuf(char_type* __s, streamsize __n)
      { return this->setbuf(__s, __n); }
# 257 "/usr/include/c++/10/streambuf" 3
      pos_type
      pubseekoff(off_type __off, ios_base::seekdir __way,
   ios_base::openmode __mode = ios_base::in | ios_base::out)
      { return this->seekoff(__off, __way, __mode); }
# 269 "/usr/include/c++/10/streambuf" 3
      pos_type
      pubseekpos(pos_type __sp,
   ios_base::openmode __mode = ios_base::in | ios_base::out)
      { return this->seekpos(__sp, __mode); }




      int
      pubsync() { return this->sync(); }
# 290 "/usr/include/c++/10/streambuf" 3
      streamsize
      in_avail()
      {
 const streamsize __ret = this->egptr() - this->gptr();
 return __ret ? __ret : this->showmanyc();
      }
# 304 "/usr/include/c++/10/streambuf" 3
      int_type
      snextc()
      {
 int_type __ret = traits_type::eof();
 if (__builtin_expect(!traits_type::eq_int_type(this->sbumpc(),
             __ret), true))
   __ret = this->sgetc();
 return __ret;
      }
# 322 "/usr/include/c++/10/streambuf" 3
      int_type
      sbumpc()
      {
 int_type __ret;
 if (__builtin_expect(this->gptr() < this->egptr(), true))
   {
     __ret = traits_type::to_int_type(*this->gptr());
     this->gbump(1);
   }
 else
   __ret = this->uflow();
 return __ret;
      }
# 344 "/usr/include/c++/10/streambuf" 3
      int_type
      sgetc()
      {
 int_type __ret;
 if (__builtin_expect(this->gptr() < this->egptr(), true))
   __ret = traits_type::to_int_type(*this->gptr());
 else
   __ret = this->underflow();
 return __ret;
      }
# 363 "/usr/include/c++/10/streambuf" 3
      streamsize
      sgetn(char_type* __s, streamsize __n)
      { return this->xsgetn(__s, __n); }
# 378 "/usr/include/c++/10/streambuf" 3
      int_type
      sputbackc(char_type __c)
      {
 int_type __ret;
 const bool __testpos = this->eback() < this->gptr();
 if (__builtin_expect(!__testpos ||
        !traits_type::eq(__c, this->gptr()[-1]), false))
   __ret = this->pbackfail(traits_type::to_int_type(__c));
 else
   {
     this->gbump(-1);
     __ret = traits_type::to_int_type(*this->gptr());
   }
 return __ret;
      }
# 403 "/usr/include/c++/10/streambuf" 3
      int_type
      sungetc()
      {
 int_type __ret;
 if (__builtin_expect(this->eback() < this->gptr(), true))
   {
     this->gbump(-1);
     __ret = traits_type::to_int_type(*this->gptr());
   }
 else
   __ret = this->pbackfail();
 return __ret;
      }
# 430 "/usr/include/c++/10/streambuf" 3
      int_type
      sputc(char_type __c)
      {
 int_type __ret;
 if (__builtin_expect(this->pptr() < this->epptr(), true))
   {
     *this->pptr() = __c;
     this->pbump(1);
     __ret = traits_type::to_int_type(__c);
   }
 else
   __ret = this->overflow(traits_type::to_int_type(__c));
 return __ret;
      }
# 456 "/usr/include/c++/10/streambuf" 3
      streamsize
      sputn(const char_type* __s, streamsize __n)
      { return this->xsputn(__s, __n); }

    protected:
# 470 "/usr/include/c++/10/streambuf" 3
      basic_streambuf()
      : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
      _M_out_beg(0), _M_out_cur(0), _M_out_end(0),
      _M_buf_locale(locale())
      { }
# 488 "/usr/include/c++/10/streambuf" 3
      char_type*
      eback() const { return _M_in_beg; }

      char_type*
      gptr() const { return _M_in_cur; }

      char_type*
      egptr() const { return _M_in_end; }
# 504 "/usr/include/c++/10/streambuf" 3
      void
      gbump(int __n) { _M_in_cur += __n; }
# 515 "/usr/include/c++/10/streambuf" 3
      void
      setg(char_type* __gbeg, char_type* __gnext, char_type* __gend)
      {
 _M_in_beg = __gbeg;
 _M_in_cur = __gnext;
 _M_in_end = __gend;
      }
# 535 "/usr/include/c++/10/streambuf" 3
      char_type*
      pbase() const { return _M_out_beg; }

      char_type*
      pptr() const { return _M_out_cur; }

      char_type*
      epptr() const { return _M_out_end; }
# 551 "/usr/include/c++/10/streambuf" 3
      void
      pbump(int __n) { _M_out_cur += __n; }
# 561 "/usr/include/c++/10/streambuf" 3
      void
      setp(char_type* __pbeg, char_type* __pend)
      {
 _M_out_beg = _M_out_cur = __pbeg;
 _M_out_end = __pend;
      }
# 582 "/usr/include/c++/10/streambuf" 3
      virtual void
      imbue(const locale& __loc __attribute__ ((__unused__)))
      { }
# 597 "/usr/include/c++/10/streambuf" 3
      virtual basic_streambuf<char_type,_Traits>*
      setbuf(char_type*, streamsize)
      { return this; }
# 608 "/usr/include/c++/10/streambuf" 3
      virtual pos_type
      seekoff(off_type, ios_base::seekdir,
       ios_base::openmode = ios_base::in | ios_base::out)
      { return pos_type(off_type(-1)); }
# 620 "/usr/include/c++/10/streambuf" 3
      virtual pos_type
      seekpos(pos_type,
       ios_base::openmode = ios_base::in | ios_base::out)
      { return pos_type(off_type(-1)); }
# 633 "/usr/include/c++/10/streambuf" 3
      virtual int
      sync() { return 0; }
# 655 "/usr/include/c++/10/streambuf" 3
      virtual streamsize
      showmanyc() { return 0; }
# 671 "/usr/include/c++/10/streambuf" 3
      virtual streamsize
      xsgetn(char_type* __s, streamsize __n);
# 693 "/usr/include/c++/10/streambuf" 3
      virtual int_type
      underflow()
      { return traits_type::eof(); }
# 706 "/usr/include/c++/10/streambuf" 3
      virtual int_type
      uflow()
      {
 int_type __ret = traits_type::eof();
 const bool __testeof = traits_type::eq_int_type(this->underflow(),
       __ret);
 if (!__testeof)
   {
     __ret = traits_type::to_int_type(*this->gptr());
     this->gbump(1);
   }
 return __ret;
      }
# 730 "/usr/include/c++/10/streambuf" 3
      virtual int_type
      pbackfail(int_type __c __attribute__ ((__unused__)) = traits_type::eof())
      { return traits_type::eof(); }
# 748 "/usr/include/c++/10/streambuf" 3
      virtual streamsize
      xsputn(const char_type* __s, streamsize __n);
# 774 "/usr/include/c++/10/streambuf" 3
      virtual int_type
      overflow(int_type __c __attribute__ ((__unused__)) = traits_type::eof())
      { return traits_type::eof(); }



    public:
# 789 "/usr/include/c++/10/streambuf" 3
      __attribute__ ((__deprecated__ ("use '" "std::basic_streambuf::sbumpc" "' instead")))
      void
      stossc()
      {
 if (this->gptr() < this->egptr())
   this->gbump(1);
 else
   this->uflow();
      }



      void
      __safe_gbump(streamsize __n) { _M_in_cur += __n; }

      void
      __safe_pbump(streamsize __n) { _M_out_cur += __n; }




    protected:

      basic_streambuf(const basic_streambuf&);

      basic_streambuf&
      operator=(const basic_streambuf&);


      void
      swap(basic_streambuf& __sb)
      {
 std::swap(_M_in_beg, __sb._M_in_beg);
 std::swap(_M_in_cur, __sb._M_in_cur);
 std::swap(_M_in_end, __sb._M_in_end);
 std::swap(_M_out_beg, __sb._M_out_beg);
 std::swap(_M_out_cur, __sb._M_out_cur);
 std::swap(_M_out_end, __sb._M_out_end);
 std::swap(_M_buf_locale, __sb._M_buf_locale);
      }

    };


  template<typename _CharT, typename _Traits>
    std::basic_streambuf<_CharT, _Traits>::
    basic_streambuf(const basic_streambuf&) = default;

  template<typename _CharT, typename _Traits>
    std::basic_streambuf<_CharT, _Traits>&
    std::basic_streambuf<_CharT, _Traits>::
    operator=(const basic_streambuf&) = default;



  template<>
    streamsize
    __copy_streambufs_eof(basic_streambuf<char>* __sbin,
     basic_streambuf<char>* __sbout, bool& __ineof);

  template<>
    streamsize
    __copy_streambufs_eof(basic_streambuf<wchar_t>* __sbin,
     basic_streambuf<wchar_t>* __sbout, bool& __ineof);





}

# 1 "/usr/include/c++/10/bits/streambuf.tcc" 1 3
# 37 "/usr/include/c++/10/bits/streambuf.tcc" 3
       
# 38 "/usr/include/c++/10/bits/streambuf.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    streamsize
    basic_streambuf<_CharT, _Traits>::
    xsgetn(char_type* __s, streamsize __n)
    {
      streamsize __ret = 0;
      while (__ret < __n)
 {
   const streamsize __buf_len = this->egptr() - this->gptr();
   if (__buf_len)
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std::min(__buf_len, __remaining);
       traits_type::copy(__s, this->gptr(), __len);
       __ret += __len;
       __s += __len;
       this->__safe_gbump(__len);
     }

   if (__ret < __n)
     {
       const int_type __c = this->uflow();
       if (!traits_type::eq_int_type(__c, traits_type::eof()))
  {
    traits_type::assign(*__s++, traits_type::to_char_type(__c));
    ++__ret;
  }
       else
  break;
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_streambuf<_CharT, _Traits>::
    xsputn(const char_type* __s, streamsize __n)
    {
      streamsize __ret = 0;
      while (__ret < __n)
 {
   const streamsize __buf_len = this->epptr() - this->pptr();
   if (__buf_len)
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std::min(__buf_len, __remaining);
       traits_type::copy(this->pptr(), __s, __len);
       __ret += __len;
       __s += __len;
       this->__safe_pbump(__len);
     }

   if (__ret < __n)
     {
       int_type __c = this->overflow(traits_type::to_int_type(*__s));
       if (!traits_type::eq_int_type(__c, traits_type::eof()))
  {
    ++__ret;
    ++__s;
  }
       else
  break;
     }
 }
      return __ret;
    }




  template<typename _CharT, typename _Traits>
    streamsize
    __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>* __sbin,
     basic_streambuf<_CharT, _Traits>* __sbout,
     bool& __ineof)
    {
      streamsize __ret = 0;
      __ineof = true;
      typename _Traits::int_type __c = __sbin->sgetc();
      while (!_Traits::eq_int_type(__c, _Traits::eof()))
 {
   __c = __sbout->sputc(_Traits::to_char_type(__c));
   if (_Traits::eq_int_type(__c, _Traits::eof()))
     {
       __ineof = false;
       break;
     }
   ++__ret;
   __c = __sbin->snextc();
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    inline streamsize
    __copy_streambufs(basic_streambuf<_CharT, _Traits>* __sbin,
        basic_streambuf<_CharT, _Traits>* __sbout)
    {
      bool __ineof;
      return __copy_streambufs_eof(__sbin, __sbout, __ineof);
    }




  extern template class basic_streambuf<char>;
  extern template
    streamsize
    __copy_streambufs(basic_streambuf<char>*,
        basic_streambuf<char>*);
  extern template
    streamsize
    __copy_streambufs_eof(basic_streambuf<char>*,
     basic_streambuf<char>*, bool&);


  extern template class basic_streambuf<wchar_t>;
  extern template
    streamsize
    __copy_streambufs(basic_streambuf<wchar_t>*,
        basic_streambuf<wchar_t>*);
  extern template
    streamsize
    __copy_streambufs_eof(basic_streambuf<wchar_t>*,
     basic_streambuf<wchar_t>*, bool&);




}
# 861 "/usr/include/c++/10/streambuf" 2 3
# 36 "/usr/include/c++/10/bits/streambuf_iterator.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{

# 49 "/usr/include/c++/10/bits/streambuf_iterator.h" 3
  template<typename _CharT, typename _Traits>
    class istreambuf_iterator
    : public iterator<input_iterator_tag, _CharT, typename _Traits::off_type,
        _CharT*, _CharT>
    {
    public:
# 66 "/usr/include/c++/10/bits/streambuf_iterator.h" 3
      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename _Traits::int_type int_type;
      typedef basic_streambuf<_CharT, _Traits> streambuf_type;
      typedef basic_istream<_CharT, _Traits> istream_type;


      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
        ostreambuf_iterator<_CharT2> >::__type
 copy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      ostreambuf_iterator<_CharT2>);

      template<bool _IsMove, typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            _CharT2*>::__type
 __copy_move_a2(istreambuf_iterator<_CharT2>,
         istreambuf_iterator<_CharT2>, _CharT2*);


      template<typename _CharT2, typename _Size>
 friend __enable_if_t<__is_char<_CharT2>::__value, _CharT2*>
 __copy_n_a(istreambuf_iterator<_CharT2>, _Size, _CharT2*);


      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
        istreambuf_iterator<_CharT2> >::__type
 find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      const _CharT2&);

      template<typename _CharT2, typename _Distance>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            void>::__type
 advance(istreambuf_iterator<_CharT2>&, _Distance);

    private:







      mutable streambuf_type* _M_sbuf;
      int_type _M_c;

    public:

      constexpr istreambuf_iterator() noexcept
      : _M_sbuf(0), _M_c(traits_type::eof()) { }







      istreambuf_iterator(const istreambuf_iterator&) noexcept = default;

      ~istreambuf_iterator() = default;



      istreambuf_iterator(istream_type& __s) noexcept
      : _M_sbuf(__s.rdbuf()), _M_c(traits_type::eof()) { }


      istreambuf_iterator(streambuf_type* __s) noexcept
      : _M_sbuf(__s), _M_c(traits_type::eof()) { }


      istreambuf_iterator&
      operator=(const istreambuf_iterator&) noexcept = default;





      char_type
      operator*() const
      {
 int_type __c = _M_get();
# 157 "/usr/include/c++/10/bits/streambuf_iterator.h" 3
 return traits_type::to_char_type(__c);
      }


      istreambuf_iterator&
      operator++()
      {



                        ;

 _M_sbuf->sbumpc();
 _M_c = traits_type::eof();
 return *this;
      }


      istreambuf_iterator
      operator++(int)
      {



                        ;

 istreambuf_iterator __old = *this;
 __old._M_c = _M_sbuf->sbumpc();
 _M_c = traits_type::eof();
 return __old;
      }





      bool
      equal(const istreambuf_iterator& __b) const
      { return _M_at_eof() == __b._M_at_eof(); }

    private:
      int_type
      _M_get() const
      {
 int_type __ret = _M_c;
 if (_M_sbuf && _S_is_eof(__ret) && _S_is_eof(__ret = _M_sbuf->sgetc()))
   _M_sbuf = 0;
 return __ret;
      }

      bool
      _M_at_eof() const
      { return _S_is_eof(_M_get()); }

      static bool
      _S_is_eof(int_type __c)
      {
 const int_type __eof = traits_type::eof();
 return traits_type::eq_int_type(__c, __eof);
      }






    };

  template<typename _CharT, typename _Traits>
    inline bool
    operator==(const istreambuf_iterator<_CharT, _Traits>& __a,
        const istreambuf_iterator<_CharT, _Traits>& __b)
    { return __a.equal(__b); }

  template<typename _CharT, typename _Traits>
    inline bool
    operator!=(const istreambuf_iterator<_CharT, _Traits>& __a,
        const istreambuf_iterator<_CharT, _Traits>& __b)
    { return !__a.equal(__b); }


  template<typename _CharT, typename _Traits>
    class ostreambuf_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    public:






      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef basic_streambuf<_CharT, _Traits> streambuf_type;
      typedef basic_ostream<_CharT, _Traits> ostream_type;


      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
        ostreambuf_iterator<_CharT2> >::__type
 copy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      ostreambuf_iterator<_CharT2>);

    private:
      streambuf_type* _M_sbuf;
      bool _M_failed;

    public:
# 274 "/usr/include/c++/10/bits/streambuf_iterator.h" 3
      ostreambuf_iterator(ostream_type& __s) noexcept
      : _M_sbuf(__s.rdbuf()), _M_failed(!_M_sbuf) { }


      ostreambuf_iterator(streambuf_type* __s) noexcept
      : _M_sbuf(__s), _M_failed(!_M_sbuf) { }


      ostreambuf_iterator&
      operator=(_CharT __c)
      {
 if (!_M_failed &&
     _Traits::eq_int_type(_M_sbuf->sputc(__c), _Traits::eof()))
   _M_failed = true;
 return *this;
      }


      ostreambuf_iterator&
      operator*()
      { return *this; }


      ostreambuf_iterator&
      operator++(int)
      { return *this; }


      ostreambuf_iterator&
      operator++()
      { return *this; }


      bool
      failed() const noexcept
      { return _M_failed; }

      ostreambuf_iterator&
      _M_put(const _CharT* __ws, streamsize __len)
      {
 if (__builtin_expect(!_M_failed, true)
     && __builtin_expect(this->_M_sbuf->sputn(__ws, __len) != __len,
    false))
   _M_failed = true;
 return *this;
      }
    };


  template<typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        ostreambuf_iterator<_CharT> >::__type
    copy(istreambuf_iterator<_CharT> __first,
  istreambuf_iterator<_CharT> __last,
  ostreambuf_iterator<_CharT> __result)
    {
      if (__first._M_sbuf && !__last._M_sbuf && !__result._M_failed)
 {
   bool __ineof;
   __copy_streambufs_eof(__first._M_sbuf, __result._M_sbuf, __ineof);
   if (!__ineof)
     __result._M_failed = true;
 }
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        ostreambuf_iterator<_CharT> >::__type
    __copy_move_a2(_CharT* __first, _CharT* __last,
     ostreambuf_iterator<_CharT> __result)
    {
      const streamsize __num = __last - __first;
      if (__num > 0)
 __result._M_put(__first, __num);
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        ostreambuf_iterator<_CharT> >::__type
    __copy_move_a2(const _CharT* __first, const _CharT* __last,
     ostreambuf_iterator<_CharT> __result)
    {
      const streamsize __num = __last - __first;
      if (__num > 0)
 __result._M_put(__first, __num);
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        _CharT*>::__type
    __copy_move_a2(istreambuf_iterator<_CharT> __first,
     istreambuf_iterator<_CharT> __last, _CharT* __result)
    {
      typedef istreambuf_iterator<_CharT> __is_iterator_type;
      typedef typename __is_iterator_type::traits_type traits_type;
      typedef typename __is_iterator_type::streambuf_type streambuf_type;
      typedef typename traits_type::int_type int_type;

      if (__first._M_sbuf && !__last._M_sbuf)
 {
   streambuf_type* __sb = __first._M_sbuf;
   int_type __c = __sb->sgetc();
   while (!traits_type::eq_int_type(__c, traits_type::eof()))
     {
       const streamsize __n = __sb->egptr() - __sb->gptr();
       if (__n > 1)
  {
    traits_type::copy(__result, __sb->gptr(), __n);
    __sb->__safe_gbump(__n);
    __result += __n;
    __c = __sb->underflow();
  }
       else
  {
    *__result++ = traits_type::to_char_type(__c);
    __c = __sb->snextc();
  }
     }
 }
      return __result;
    }


  template<typename _CharT, typename _Size>
    __enable_if_t<__is_char<_CharT>::__value, _CharT*>
    __copy_n_a(istreambuf_iterator<_CharT> __it, _Size __n, _CharT* __result)
    {
      if (__n == 0)
 return __result;

     

                            ;
      _CharT* __beg = __result;
      __result += __it._M_sbuf->sgetn(__beg, __n);
     

                            ;
      return __result;
    }


  template<typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
          istreambuf_iterator<_CharT> >::__type
    find(istreambuf_iterator<_CharT> __first,
  istreambuf_iterator<_CharT> __last, const _CharT& __val)
    {
      typedef istreambuf_iterator<_CharT> __is_iterator_type;
      typedef typename __is_iterator_type::traits_type traits_type;
      typedef typename __is_iterator_type::streambuf_type streambuf_type;
      typedef typename traits_type::int_type int_type;
      const int_type __eof = traits_type::eof();

      if (__first._M_sbuf && !__last._M_sbuf)
 {
   const int_type __ival = traits_type::to_int_type(__val);
   streambuf_type* __sb = __first._M_sbuf;
   int_type __c = __sb->sgetc();
   while (!traits_type::eq_int_type(__c, __eof)
   && !traits_type::eq_int_type(__c, __ival))
     {
       streamsize __n = __sb->egptr() - __sb->gptr();
       if (__n > 1)
  {
    const _CharT* __p = traits_type::find(__sb->gptr(),
       __n, __val);
    if (__p)
      __n = __p - __sb->gptr();
    __sb->__safe_gbump(__n);
    __c = __sb->sgetc();
  }
       else
  __c = __sb->snextc();
     }

   __first._M_c = __eof;
 }

      return __first;
    }

  template<typename _CharT, typename _Distance>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        void>::__type
    advance(istreambuf_iterator<_CharT>& __i, _Distance __n)
    {
      if (__n == 0)
 return;

      ;
     

                           ;

      typedef istreambuf_iterator<_CharT> __is_iterator_type;
      typedef typename __is_iterator_type::traits_type traits_type;
      typedef typename __is_iterator_type::streambuf_type streambuf_type;
      typedef typename traits_type::int_type int_type;
      const int_type __eof = traits_type::eof();

      streambuf_type* __sb = __i._M_sbuf;
      while (__n > 0)
 {
   streamsize __size = __sb->egptr() - __sb->gptr();
   if (__size > __n)
     {
       __sb->__safe_gbump(__n);
       break;
     }

   __sb->__safe_gbump(__size);
   __n -= __size;
   if (traits_type::eq_int_type(__sb->underflow(), __eof))
     {
      

                      ;
       break;
     }
 }

      __i._M_c = __eof;
    }




}
# 67 "/usr/include/c++/10/iterator" 2 3
# 44 "/usr/include/wx-3.1-unofficial/wx/vector.h" 2


# 1 "/usr/include/wx-3.1-unofficial/wx/afterstd.h" 1
# 47 "/usr/include/wx-3.1-unofficial/wx/vector.h" 2
# 57 "/usr/include/wx-3.1-unofficial/wx/vector.h"

# 57 "/usr/include/wx-3.1-unofficial/wx/vector.h"
typedef int (*wxSortCallback)(const void* pItem1,
                              const void* pItem2,
                              const void* user_data);
__attribute__ ((visibility("default"))) void wxQsort(void* pbase, size_t total_elems,
                              size_t size, wxSortCallback cmp,
                              const void* user_data);



namespace wxPrivate
{






template<typename T>
struct wxVectorMemOpsMovable
{
    static void Free(T* array)
        { free(array); }

    static T* Realloc(T* old, size_t newCapacity, size_t )
        { return (T*)realloc(old, newCapacity * sizeof(T)); }

    static void MemmoveBackward(T* dest, T* source, size_t count)
        { memmove(dest, source, count * sizeof(T)); }

    static void MemmoveForward(T* dest, T* source, size_t count)
        { memmove(dest, source, count * sizeof(T)); }
};


template<typename T>
struct wxVectorMemOpsGeneric
{
    static void Free(T* array)
        { ::operator delete(array); }

    static T* Realloc(T* old, size_t newCapacity, size_t occupiedSize)
    {
        T *mem = (T*)::operator new(newCapacity * sizeof(T));
        for ( size_t i = 0; i < occupiedSize; i++ )
        {
            ::new(mem + i) T(old[i]);
            old[i].~T();
        }
        ::operator delete(old);
        return mem;
    }

    static void MemmoveBackward(T* dest, T* source, size_t count)
    {
        do { if ( dest < source ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/vector.h", 111, __FUNCTION__, "dest < source", (const char*)
# 111 "/usr/include/wx-3.1-unofficial/wx/vector.h" 3 4
       __null
# 111 "/usr/include/wx-3.1-unofficial/wx/vector.h"
       ), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );
        T* destptr = dest;
        T* sourceptr = source;
        for ( size_t i = count; i > 0; --i, ++destptr, ++sourceptr )
        {
            ::new(destptr) T(*sourceptr);
            sourceptr->~T();
        }
    }

    static void MemmoveForward(T* dest, T* source, size_t count)
    {
        do { if ( dest > source ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/vector.h", 123, __FUNCTION__, "dest > source", (const char*)
# 123 "/usr/include/wx-3.1-unofficial/wx/vector.h" 3 4
       __null
# 123 "/usr/include/wx-3.1-unofficial/wx/vector.h"
       ), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );
        T* destptr = dest + count - 1;
        T* sourceptr = source + count - 1;
        for ( size_t i = count; i > 0; --i, --destptr, --sourceptr )
        {
            ::new(destptr) T(*sourceptr);
            sourceptr->~T();
        }
    }
};







struct IsIntType {};
struct IsNotIntType {};

template <typename T> struct IsInt : IsNotIntType {};




template <> struct IsInt<unsigned char> : IsIntType {};
template <> struct IsInt<signed char> : IsIntType {};
template <> struct IsInt<unsigned short int> : IsIntType {};
template <> struct IsInt<signed short int> : IsIntType {};
template <> struct IsInt<unsigned int> : IsIntType {};
template <> struct IsInt<signed int> : IsIntType {};
template <> struct IsInt<unsigned long int> : IsIntType {};
template <> struct IsInt<signed long int> : IsIntType {};

template <> struct IsInt<long long> : IsIntType {};
template <> struct IsInt<unsigned long long> : IsIntType {};




}

template<typename T>
class wxVector
{
private:




    typedef typename wxIf< wxIsMovable<T>::value,
                           wxPrivate::wxVectorMemOpsMovable<T>,
                           wxPrivate::wxVectorMemOpsGeneric<T> >::value
            Ops;

public:
    typedef size_t size_type;
    typedef ptrdiff_t difference_type;
    typedef T value_type;
    typedef value_type* pointer;
    typedef const value_type* const_pointer;
    typedef value_type* iterator;
    typedef const value_type* const_iterator;
    typedef value_type& reference;
    typedef const value_type& const_reference;

    class reverse_iterator
    {
    public:

        typedef std::random_access_iterator_tag iterator_category;

        typedef ptrdiff_t difference_type;
        typedef T value_type;
        typedef value_type* pointer;
        typedef value_type& reference;

        reverse_iterator() : m_ptr(
# 200 "/usr/include/wx-3.1-unofficial/wx/vector.h" 3 4
                                  __null
# 200 "/usr/include/wx-3.1-unofficial/wx/vector.h"
                                      ) { }
        explicit reverse_iterator(iterator it) : m_ptr(it) { }

        reference operator*() const { return *m_ptr; }
        pointer operator->() const { return m_ptr; }

        iterator base() const { return m_ptr + 1; }

        reverse_iterator& operator++()
            { --m_ptr; return *this; }
        reverse_iterator operator++(int)
            { reverse_iterator tmp = *this; --m_ptr; return tmp; }
        reverse_iterator& operator--()
            { ++m_ptr; return *this; }
        reverse_iterator operator--(int)
            { reverse_iterator tmp = *this; ++m_ptr; return tmp; }

        reverse_iterator operator+(difference_type n) const
            { return reverse_iterator(m_ptr - n); }
        reverse_iterator& operator+=(difference_type n)
            { m_ptr -= n; return *this; }
        reverse_iterator operator-(difference_type n) const
            { return reverse_iterator(m_ptr + n); }
        reverse_iterator& operator-=(difference_type n)
            { m_ptr += n; return *this; }
        difference_type operator-(const reverse_iterator& it) const
            { return it.m_ptr - m_ptr; }

        reference operator[](difference_type n) const
            { return *(*this + n); }

        bool operator ==(const reverse_iterator& it) const
            { return m_ptr == it.m_ptr; }
        bool operator !=(const reverse_iterator& it) const
            { return m_ptr != it.m_ptr; }
        bool operator<(const reverse_iterator& it) const
            { return m_ptr > it.m_ptr; }
        bool operator>(const reverse_iterator& it) const
            { return m_ptr < it.m_ptr; }
        bool operator<=(const reverse_iterator& it) const
            { return m_ptr >= it.m_ptr; }
        bool operator>=(const reverse_iterator& it) const
            { return m_ptr <= it.m_ptr; }

    private:
        value_type *m_ptr;

        friend class const_reverse_iterator;
    };

    class const_reverse_iterator
    {
    public:

        typedef std::random_access_iterator_tag iterator_category;

        typedef ptrdiff_t difference_type;
        typedef T value_type;
        typedef const value_type* pointer;
        typedef const value_type& reference;

        const_reverse_iterator() : m_ptr(
# 261 "/usr/include/wx-3.1-unofficial/wx/vector.h" 3 4
                                        __null
# 261 "/usr/include/wx-3.1-unofficial/wx/vector.h"
                                            ) { }
        explicit const_reverse_iterator(const_iterator it) : m_ptr(it) { }
        const_reverse_iterator(const reverse_iterator& it) : m_ptr(it.m_ptr) { }
        const_reverse_iterator(const const_reverse_iterator& it) : m_ptr(it.m_ptr) { }

        const_reference operator*() const { return *m_ptr; }
        const_pointer operator->() const { return m_ptr; }

        const_iterator base() const { return m_ptr + 1; }

        const_reverse_iterator& operator++()
            { --m_ptr; return *this; }
        const_reverse_iterator operator++(int)
            { const_reverse_iterator tmp = *this; --m_ptr; return tmp; }
        const_reverse_iterator& operator--()
            { ++m_ptr; return *this; }
        const_reverse_iterator operator--(int)
            { const_reverse_iterator tmp = *this; ++m_ptr; return tmp; }

        const_reverse_iterator operator+(difference_type n) const
            { return const_reverse_iterator(m_ptr - n); }
        const_reverse_iterator& operator+=(difference_type n)
            { m_ptr -= n; return *this; }
        const_reverse_iterator operator-(difference_type n) const
            { return const_reverse_iterator(m_ptr + n); }
        const_reverse_iterator& operator-=(difference_type n)
            { m_ptr += n; return *this; }
        difference_type operator-(const const_reverse_iterator& it) const
            { return it.m_ptr - m_ptr; }

        const_reference operator[](difference_type n) const
            { return *(*this + n); }

        bool operator ==(const const_reverse_iterator& it) const
            { return m_ptr == it.m_ptr; }
        bool operator !=(const const_reverse_iterator& it) const
            { return m_ptr != it.m_ptr; }
        bool operator<(const const_reverse_iterator& it) const
            { return m_ptr > it.m_ptr; }
        bool operator>(const const_reverse_iterator& it) const
            { return m_ptr < it.m_ptr; }
        bool operator<=(const const_reverse_iterator& it) const
            { return m_ptr >= it.m_ptr; }
        bool operator>=(const const_reverse_iterator& it) const
            { return m_ptr <= it.m_ptr; }

    protected:
        const value_type *m_ptr;
    };

    wxVector() : m_size(0), m_capacity(0), m_values(
# 311 "/usr/include/wx-3.1-unofficial/wx/vector.h" 3 4
                                                   __null
# 311 "/usr/include/wx-3.1-unofficial/wx/vector.h"
                                                       ) {}

    wxVector(size_type p_size)
        : m_size(0), m_capacity(0), m_values(
# 314 "/usr/include/wx-3.1-unofficial/wx/vector.h" 3 4
                                            __null
# 314 "/usr/include/wx-3.1-unofficial/wx/vector.h"
                                                )
    {
        reserve(p_size);
        for ( size_t n = 0; n < p_size; n++ )
            push_back(value_type());
    }

    wxVector(size_type p_size, const value_type& v)
        : m_size(0), m_capacity(0), m_values(
# 322 "/usr/include/wx-3.1-unofficial/wx/vector.h" 3 4
                                            __null
# 322 "/usr/include/wx-3.1-unofficial/wx/vector.h"
                                                )
    {
        reserve(p_size);
        for ( size_t n = 0; n < p_size; n++ )
            push_back(v);
    }

    wxVector(const wxVector& c) : m_size(0), m_capacity(0), m_values(
# 329 "/usr/include/wx-3.1-unofficial/wx/vector.h" 3 4
                                                                    __null
# 329 "/usr/include/wx-3.1-unofficial/wx/vector.h"
                                                                        )
    {
        Copy(c);
    }

    template <class InputIterator>
    wxVector(InputIterator first, InputIterator last)
        : m_size(0), m_capacity(0), m_values(
# 336 "/usr/include/wx-3.1-unofficial/wx/vector.h" 3 4
                                            __null
# 336 "/usr/include/wx-3.1-unofficial/wx/vector.h"
                                                )
    {
        assign(first, last);
    }

    ~wxVector()
    {
        clear();
    }

    void assign(size_type p_size, const value_type& v)
    {
        AssignFromValue(p_size, v);
    }

    template <typename InputIterator>
    void assign(InputIterator first, InputIterator last)
    {
        AssignDispatch(first, last, typename wxPrivate::IsInt<InputIterator>());
    }

    void swap(wxVector& v)
    {
        wxSwap(m_size, v.m_size);
        wxSwap(m_capacity, v.m_capacity);
        wxSwap(m_values, v.m_values);
    }

    void clear()
    {

        for ( size_type i = 0; i < m_size; i++ )
        {
            m_values[i].~T();
        }

        Ops::Free(m_values);
        m_values = 
# 373 "/usr/include/wx-3.1-unofficial/wx/vector.h" 3 4
                  __null
# 373 "/usr/include/wx-3.1-unofficial/wx/vector.h"
                      ;
        m_size =
        m_capacity = 0;
    }

    void reserve(size_type n)
    {
        if ( n <= m_capacity )
            return;






        const size_type increment = m_size > ALLOC_INITIAL_SIZE
                                     ? m_size
                                     : (size_type)ALLOC_INITIAL_SIZE;
        if ( m_capacity + increment > n )
            n = m_capacity + increment;

        m_values = Ops::Realloc(m_values, n, m_size);
        m_capacity = n;
    }

    void resize(size_type n)
    {
        if ( n < m_size )
            Shrink(n);
        else if ( n > m_size )
            Extend(n, value_type());
    }

    void resize(size_type n, const value_type& v)
    {
        if ( n < m_size )
            Shrink(n);
        else if ( n > m_size )
            Extend(n, v);
    }

    size_type size() const
    {
        return m_size;
    }

    size_type capacity() const
    {
        return m_capacity;
    }

    void shrink_to_fit()
    {
        m_values = Ops::Realloc(m_values, m_size, m_size);
        m_capacity = m_size;
    }

    bool empty() const
    {
        return size() == 0;
    }

    wxVector& operator=(const wxVector& vb)
    {
        if (this != &vb)
        {
            clear();
            Copy(vb);
        }
        return *this;
    }

    bool operator==(const wxVector& vb) const
    {
        if ( vb.m_size != m_size )
            return false;

        for ( size_type i = 0; i < m_size; i++ )
        {
            if ( vb.m_values[i] != m_values[i] )
                return false;
        }

        return true;
    }

    bool operator!=(const wxVector& vb) const
    {
        return !(*this == vb);
    }

    void push_back(const value_type& v)
    {
        reserve(size() + 1);



        void* const place = m_values + m_size;
        ::new(place) value_type(v);





        m_size++;
    }

    void pop_back()
    {
        erase(end() - 1);
    }

    const value_type& at(size_type idx) const
    {
        do { if ( idx < m_size ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/vector.h", 487, __FUNCTION__, "idx < m_size", (const char*)
# 487 "/usr/include/wx-3.1-unofficial/wx/vector.h" 3 4
       __null
# 487 "/usr/include/wx-3.1-unofficial/wx/vector.h"
       ), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );
        return m_values[idx];
    }

    value_type& at(size_type idx)
    {
        do { if ( idx < m_size ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/vector.h", 493, __FUNCTION__, "idx < m_size", (const char*)
# 493 "/usr/include/wx-3.1-unofficial/wx/vector.h" 3 4
       __null
# 493 "/usr/include/wx-3.1-unofficial/wx/vector.h"
       ), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );
        return m_values[idx];
    }

    const value_type& operator[](size_type idx) const { return at(idx); }
    value_type& operator[](size_type idx) { return at(idx); }
    const value_type& front() const { return at(0); }
    value_type& front() { return at(0); }
    const value_type& back() const { return at(size() - 1); }
    value_type& back() { return at(size() - 1); }

    const_iterator begin() const { return m_values; }
    iterator begin() { return m_values; }
    const_iterator end() const { return m_values + size(); }
    iterator end() { return m_values + size(); }

    reverse_iterator rbegin() { return reverse_iterator(end() - 1); }
    reverse_iterator rend() { return reverse_iterator(begin() - 1); }

    const_reverse_iterator rbegin() const { return const_reverse_iterator(end() - 1); }
    const_reverse_iterator rend() const { return const_reverse_iterator(begin() - 1); }

    iterator insert(iterator it, size_type count, const value_type& v)
    {


        const size_t idx = it - begin();
        const size_t after = end() - it;

        reserve(size() + count);


        value_type * const place = m_values + idx;



        if ( after > 0 )
            Ops::MemmoveForward(place + count, place, after);



        wxScopeGuard moveBack = wxMakeGuard(
                Ops::MemmoveBackward, place, place + count, after);
        if ( !after )
            moveBack.Dismiss();



        for ( size_type i = 0; i < count; i++ )
            ::new(place + i) value_type(v);



        moveBack.Dismiss();
        m_size += count;

        return begin() + idx;
    }

    iterator insert(iterator it, const value_type& v = value_type())
    {
        return insert(it, 1, v);
    }

    iterator erase(iterator it)
    {
        return erase(it, it + 1);
    }

    iterator erase(iterator first, iterator last)
    {
        if ( first == last )
            return first;
        do { if ( first < end() && last <= end() ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/vector.h", 566, __FUNCTION__, "first < end() && last <= end()", (const char*)
# 566 "/usr/include/wx-3.1-unofficial/wx/vector.h" 3 4
       __null
# 566 "/usr/include/wx-3.1-unofficial/wx/vector.h"
       ), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );

        const size_type idx = first - begin();
        const size_type count = last - first;
        const size_type after = end() - last;


        for ( iterator i = first; i < last; ++i )
            i->~T();


        if ( after > 0 )
        {
            Ops::MemmoveBackward(m_values + idx, m_values + idx + count, after);
        }

        m_size -= count;

        return begin() + idx;
    }





private:
    static const size_type ALLOC_INITIAL_SIZE = 16;

    void Copy(const wxVector& vb)
    {
        reserve(vb.size());

        for ( const_iterator i = vb.begin(); i != vb.end(); ++i )
            push_back(*i);
    }

private:
    void Shrink(size_type n)
    {
        for ( size_type i = n; i < m_size; i++ )
            m_values[i].~T();
        m_size = n;
    }

    void Extend(size_type n, const value_type& v)
    {
        reserve(n);
        for ( size_type i = m_size; i < n; i++ )
            push_back(v);
    }

    void AssignFromValue(size_type p_size, const value_type& v)
    {
        clear();
        reserve(p_size);
        for ( size_t n = 0; n < p_size; n++ )
            push_back(v);
    }

    template <typename InputIterator>
    void AssignDispatch(InputIterator first, InputIterator last,
                        wxPrivate::IsIntType)
    {
        AssignFromValue(static_cast<size_type>(first),
                        static_cast<const value_type&>(last));
    }

    template <typename InputIterator>
    void AssignDispatch(InputIterator first, InputIterator last,
                        wxPrivate::IsNotIntType)
    {
        clear();





        for ( InputIterator it = first; it != last; ++it )
            push_back(*it);
    }

    size_type m_size,
              m_capacity;
    value_type *m_values;
};
# 663 "/usr/include/wx-3.1-unofficial/wx/vector.h"
namespace wxPrivate
{



template<typename T>
struct wxVectorComparator
{
    static int
    Compare(const void* pitem1, const void* pitem2, const void* )
    {
        const T& item1 = *reinterpret_cast<const T*>(pitem1);
        const T& item2 = *reinterpret_cast<const T*>(pitem2);

        if (item1 < item2)
            return -1;
        else if (item2 < item1)
            return 1;
        else
            return 0;
    }
};

}



template<typename T>
void wxVectorSort(wxVector<T>& v)
{
    wxQsort(v.begin(), v.size(), sizeof(T),
            wxPrivate::wxVectorComparator<T>::Compare, 
# 694 "/usr/include/wx-3.1-unofficial/wx/vector.h" 3 4
                                                      __null
# 694 "/usr/include/wx-3.1-unofficial/wx/vector.h"
                                                          );
}

template<typename T>
inline bool wxVectorContains(const wxVector<T>& v, const T& obj)
{
    for ( size_t n = 0; n < v.size(); ++n )
    {
        if ( v[n] == obj )
            return true;
    }

    return false;
}





template<typename T>
inline void wxShrinkToFit(wxVector<T>& v)
{

    v.shrink_to_fit();




}
# 35 "/usr/include/wx-3.1-unofficial/wx/list.h" 2
# 48 "/usr/include/wx-3.1-unofficial/wx/list.h"
class wxObjectListNode;
typedef wxObjectListNode wxNode;
# 319 "/usr/include/wx-3.1-unofficial/wx/list.h"
union wxListKeyValue
{
    long integer;
    wxString *string;
};







class __attribute__ ((visibility("default"))) wxListKey
{
public:

    wxListKey() : m_keyType(wxKEY_NONE)
        { m_key.integer = 0; }
    wxListKey(long i) : m_keyType(wxKEY_INTEGER)
        { m_key.integer = i; }
    wxListKey(const wxString& s) : m_keyType(wxKEY_STRING)
        { m_key.string = new wxString(s); }

    wxListKey(const char *s) : m_keyType(wxKEY_STRING)
        { m_key.string = new wxString(s); }

    wxListKey(const wchar_t *s) : m_keyType(wxKEY_STRING)
        { m_key.string = new wxString(s); }


    wxKeyType GetKeyType() const { return m_keyType; }
    const wxString GetString() const
        { do { if ( m_keyType == wxKEY_STRING ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/list.h", 351, __FUNCTION__, "m_keyType == wxKEY_STRING", (const char*)
# 351 "/usr/include/wx-3.1-unofficial/wx/list.h" 3 4
         __null
# 351 "/usr/include/wx-3.1-unofficial/wx/list.h"
         ), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); return *m_key.string; }
    long GetNumber() const
        { do { if ( m_keyType == wxKEY_INTEGER ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/list.h", 353, __FUNCTION__, "m_keyType == wxKEY_INTEGER", (const char*)
# 353 "/usr/include/wx-3.1-unofficial/wx/list.h" 3 4
         __null
# 353 "/usr/include/wx-3.1-unofficial/wx/list.h"
         ), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); return m_key.integer; }




    bool operator==(wxListKeyValue value) const ;


    ~wxListKey()
    {
        if ( m_keyType == wxKEY_STRING )
            delete m_key.string;
    }

private:
    wxKeyType m_keyType;
    wxListKeyValue m_key;
};





extern __attribute__ ((visibility("default"))) wxListKey wxDefaultListKey;

class wxListBase;

class __attribute__ ((visibility("default"))) wxNodeBase
{
friend class wxListBase;
public:

    wxNodeBase(wxListBase *list = 
# 385 "/usr/include/wx-3.1-unofficial/wx/list.h" 3 4
                                 __null
# 385 "/usr/include/wx-3.1-unofficial/wx/list.h"
                                     ,
               wxNodeBase *previous = 
# 386 "/usr/include/wx-3.1-unofficial/wx/list.h" 3 4
                                     __null
# 386 "/usr/include/wx-3.1-unofficial/wx/list.h"
                                         ,
               wxNodeBase *next = 
# 387 "/usr/include/wx-3.1-unofficial/wx/list.h" 3 4
                                 __null
# 387 "/usr/include/wx-3.1-unofficial/wx/list.h"
                                     ,
               void *data = 
# 388 "/usr/include/wx-3.1-unofficial/wx/list.h" 3 4
                           __null
# 388 "/usr/include/wx-3.1-unofficial/wx/list.h"
                               ,
               const wxListKey& key = wxDefaultListKey);

    virtual ~wxNodeBase();


    wxString GetKeyString() const { return *m_key.string; }
    long GetKeyInteger() const { return m_key.integer; }


    void SetKeyString(const wxString& s) { m_key.string = new wxString(s); }
    void SetKeyInteger(long i) { m_key.integer = i; }



    __attribute__((deprecated)) wxNode *Next() const;
    __attribute__((deprecated)) wxNode *Previous() const;
    __attribute__((deprecated)) wxObject *Data() const;


protected:

    wxNodeBase *GetNext() const { return m_next; }
    wxNodeBase *GetPrevious() const { return m_previous; }

    void *GetData() const { return m_data; }
    void SetData(void *data) { m_data = data; }


    int IndexOf() const;

    virtual void DeleteData() { }
public:

    void** GetDataPtr() const { return &(const_cast<wxNodeBase*>(this)->m_data); }
private:

    wxListKeyValue m_key;

    void *m_data;
    wxNodeBase *m_next,
                *m_previous;

    wxListBase *m_list;

    private: wxNodeBase(const wxNodeBase&) = delete; wxNodeBase& operator=(const wxNodeBase&) = delete;
};





class wxList;

class __attribute__ ((visibility("default"))) wxListBase
{
friend class wxNodeBase;
friend class wxHashTableBase;

public:

    wxListBase(wxKeyType keyType = wxKEY_NONE)
        { Init(keyType); }
    virtual ~wxListBase();



    size_t GetCount() const { return m_count; }


    bool IsEmpty() const { return m_count == 0; }




    void Clear();


    void DeleteContents(bool destroy) { m_destroy = destroy; }


    bool GetDeleteContents() const
        { return m_destroy; }


    wxKeyType GetKeyType() const
        { return m_keyType; }


    void SetKeyType(wxKeyType keyType)
        { do { if ( m_count==0 ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/list.h", 478, __FUNCTION__, "m_count==0", (const char*)
# 478 "/usr/include/wx-3.1-unofficial/wx/list.h" 3 4
         __null
# 478 "/usr/include/wx-3.1-unofficial/wx/list.h"
         ), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); m_keyType = keyType; }



    __attribute__((deprecated)) int Number() const;
    __attribute__((deprecated)) wxNode *First() const;
    __attribute__((deprecated)) wxNode *Last() const;
    __attribute__((deprecated)) wxNode *Nth(size_t n) const;


    __attribute__((deprecated)) operator wxList&();
    __attribute__((deprecated)) operator const wxList&() const;


protected:





    virtual wxNodeBase *CreateNode(wxNodeBase *prev, wxNodeBase *next,
                                   void *data,
                                   const wxListKey& key = wxDefaultListKey) = 0;

    void Assign(const wxListBase& list)
        { Clear(); DoCopy(list); }


    wxNodeBase *GetFirst() const { return m_nodeFirst; }
    wxNodeBase *GetLast() const { return m_nodeLast; }


    wxNodeBase *Item(size_t index) const;


    void *operator[](size_t n) const
    {
        wxNodeBase *node = Item(n);

        return node ? node->GetData() : 
# 517 "/usr/include/wx-3.1-unofficial/wx/list.h" 3 4
                                       __null
# 517 "/usr/include/wx-3.1-unofficial/wx/list.h"
                                           ;
    }



    wxNodeBase *Prepend(void *object)
        { return (wxNodeBase *)wxListBase::Insert(object); }

    wxNodeBase *Append(void *object);

    wxNodeBase *Insert(void *object)
        { return Insert(static_cast<wxNodeBase *>(
# 528 "/usr/include/wx-3.1-unofficial/wx/list.h" 3 4
                                                 __null
# 528 "/usr/include/wx-3.1-unofficial/wx/list.h"
                                                     ), object); }

    wxNodeBase *Insert(size_t pos, void *object)
        { return pos == GetCount() ? Append(object)
                                   : Insert(Item(pos), object); }

    wxNodeBase *Insert(wxNodeBase *prev, void *object);


    wxNodeBase *Append(long key, void *object);
    wxNodeBase *Append(const wxString& key, void *object);



    wxNodeBase *DetachNode(wxNodeBase *node);

    bool DeleteNode(wxNodeBase *node);


    bool DeleteObject(void *object);



    wxNodeBase *Find(const void *object) const;


    wxNodeBase *Find(const wxListKey& key) const;


    int IndexOf( void *object ) const;



    void Sort(const wxSortCompareFunction compfunc);


    void *FirstThat(wxListIterateFunction func);
    void ForEach(wxListIterateFunction func);
    void *LastThat(wxListIterateFunction func);



    void Reverse();
    void DeleteNodes(wxNodeBase* first, wxNodeBase* last);
private:


    void Init(wxKeyType keyType = wxKEY_NONE);



    void DoCopy(const wxListBase& list);

    wxNodeBase *AppendCommon(wxNodeBase *node);

    void DoDeleteNode(wxNodeBase *node);

    size_t m_count;
    bool m_destroy;
    wxNodeBase *m_nodeFirst,
               *m_nodeLast;

    wxKeyType m_keyType;
};
# 1141 "/usr/include/wx-3.1-unofficial/wx/list.h"
inline wxNode *wxNodeBase::Next() const { return (wxNode *)GetNext(); }
inline wxNode *wxNodeBase::Previous() const { return (wxNode *)GetPrevious(); }
inline wxObject *wxNodeBase::Data() const { return (wxObject *)GetData(); }





inline int wxListBase::Number() const { return (int)GetCount(); }
inline wxNode *wxListBase::First() const { return (wxNode *)GetFirst(); }
inline wxNode *wxListBase::Last() const { return (wxNode *)GetLast(); }
inline wxNode *wxListBase::Nth(size_t n) const { return (wxNode *)Item(n); }
# 1163 "/usr/include/wx-3.1-unofficial/wx/list.h"
typedef int (*wxSortFuncFor_wxObjectList)(const wxObject **, const wxObject **); class __attribute__ ((visibility("default"))) wxObjectListNode : public wxNodeBase { public: wxObjectListNode(wxListBase *list = 
# 1163 "/usr/include/wx-3.1-unofficial/wx/list.h" 3 4
__null
# 1163 "/usr/include/wx-3.1-unofficial/wx/list.h"
, wxObjectListNode *previous = 
# 1163 "/usr/include/wx-3.1-unofficial/wx/list.h" 3 4
__null
# 1163 "/usr/include/wx-3.1-unofficial/wx/list.h"
, wxObjectListNode *next = 
# 1163 "/usr/include/wx-3.1-unofficial/wx/list.h" 3 4
__null
# 1163 "/usr/include/wx-3.1-unofficial/wx/list.h"
, wxObject *data = 
# 1163 "/usr/include/wx-3.1-unofficial/wx/list.h" 3 4
__null
# 1163 "/usr/include/wx-3.1-unofficial/wx/list.h"
, const wxListKey& key = wxDefaultListKey) : wxNodeBase(list, previous, next, data, key) { } wxObjectListNode *GetNext() const { return (wxObjectListNode *)wxNodeBase::GetNext(); } wxObjectListNode *GetPrevious() const { return (wxObjectListNode *)wxNodeBase::GetPrevious(); } wxObject *GetData() const { return (wxObject *)wxNodeBase::GetData(); } void SetData(wxObject *data) { wxNodeBase::SetData(data); } protected: virtual void DeleteData() override; private: wxObjectListNode(const wxObjectListNode&) = delete; wxObjectListNode& operator=(const wxObjectListNode&) = delete; }; class __attribute__ ((visibility("default"))) wxObjectList : public wxListBase { public: typedef wxObjectListNode Node; class __attribute__ ((visibility("default"))) compatibility_iterator { public: compatibility_iterator(Node *ptr = 
# 1163 "/usr/include/wx-3.1-unofficial/wx/list.h" 3 4
__null
# 1163 "/usr/include/wx-3.1-unofficial/wx/list.h"
) : m_ptr(ptr) { } Node *operator->() const { return m_ptr; } operator Node *() const { return m_ptr; } private: Node *m_ptr; }; wxObjectList(wxKeyType keyType = wxKEY_NONE) : wxListBase(keyType) { } wxObjectList(const wxObjectList& list) : wxListBase(list.GetKeyType()) { Assign(list); } wxObjectList& operator=(const wxObjectList& list) { if (&list != this) Assign(list); return *this; } wxObjectListNode *GetFirst() const { return (wxObjectListNode *)wxListBase::GetFirst(); } wxObjectListNode *GetLast() const { return (wxObjectListNode *)wxListBase::GetLast(); } wxObjectListNode *Item(size_t index) const { return (wxObjectListNode *)wxListBase::Item(index); } wxObject *operator[](size_t index) const { wxObjectListNode *node = Item(index); return node ? (wxObject*)(node->GetData()) : 
# 1163 "/usr/include/wx-3.1-unofficial/wx/list.h" 3 4
__null
# 1163 "/usr/include/wx-3.1-unofficial/wx/list.h"
; } wxObjectListNode *Append(wxObject *object) { return (wxObjectListNode *)wxListBase::Append(object); } wxObjectListNode *Insert(wxObject *object) { return (wxObjectListNode *)Insert(static_cast<wxObjectListNode *>(
# 1163 "/usr/include/wx-3.1-unofficial/wx/list.h" 3 4
__null
# 1163 "/usr/include/wx-3.1-unofficial/wx/list.h"
), object); } wxObjectListNode *Insert(size_t pos, wxObject *object) { return (wxObjectListNode *)wxListBase::Insert(pos, object); } wxObjectListNode *Insert(wxObjectListNode *prev, wxObject *object) { return (wxObjectListNode *)wxListBase::Insert(prev, object); } wxObjectListNode *Append(long key, void *object) { return (wxObjectListNode *)wxListBase::Append(key, object); } wxObjectListNode *Append(const wxChar *key, void *object) { return (wxObjectListNode *)wxListBase::Append(key, object); } wxObjectListNode *DetachNode(wxObjectListNode *node) { return (wxObjectListNode *)wxListBase::DetachNode(node); } bool DeleteNode(wxObjectListNode *node) { return wxListBase::DeleteNode(node); } bool DeleteObject(wxObject *object) { return wxListBase::DeleteObject(object); } void Erase(wxObjectListNode *it) { DeleteNode(it); } wxObjectListNode *Find(const wxObject *object) const { return (wxObjectListNode *)wxListBase::Find(object); } virtual wxObjectListNode *Find(const wxListKey& key) const { return (wxObjectListNode *)wxListBase::Find(key); } bool Member(const wxObject *object) const { return Find(object) != 
# 1163 "/usr/include/wx-3.1-unofficial/wx/list.h" 3 4
__null
# 1163 "/usr/include/wx-3.1-unofficial/wx/list.h"
; } int IndexOf(wxObject *object) const { return wxListBase::IndexOf(object); } void Sort(wxSortCompareFunction func) { wxListBase::Sort(func); } void Sort(wxSortFuncFor_wxObjectList func) { Sort((wxSortCompareFunction)func); } protected: virtual wxNodeBase *CreateNode(wxNodeBase *prev, wxNodeBase *next, void *data, const wxListKey& key = wxDefaultListKey) override { return new wxObjectListNode(this, (wxObjectListNode *)prev, (wxObjectListNode *)next, (wxObject *)data, key); } public: typedef size_t size_type; typedef int difference_type; typedef wxObject* value_type; typedef wxObject* base_value_type; typedef value_type& reference; typedef const value_type& const_reference; typedef base_value_type& base_reference; typedef const base_value_type& const_base_reference; class __attribute__ ((visibility("default"))) iterator { public: typedef std::ptrdiff_t difference_type; typedef std::bidirectional_iterator_tag iterator_category; typedef wxObject* value_type; typedef value_type* pointer; typedef value_type& reference; typedef wxObjectListNode Node; typedef iterator itor; Node* m_node; Node* m_init; public: typedef reference reference_type; typedef pointer pointer_type; iterator(Node* node, Node* init) : m_node(node), m_init(init) {} iterator() : m_node(
# 1163 "/usr/include/wx-3.1-unofficial/wx/list.h" 3 4
__null
# 1163 "/usr/include/wx-3.1-unofficial/wx/list.h"
), m_init(
# 1163 "/usr/include/wx-3.1-unofficial/wx/list.h" 3 4
__null
# 1163 "/usr/include/wx-3.1-unofficial/wx/list.h"
) { } reference_type operator*() const { return *(pointer_type)m_node->GetDataPtr(); } itor& operator++() { do { if ( m_node ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/list.h", 1163, __FUNCTION__, "m_node", L"uninitialized iterator"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); m_node = m_node->GetNext(); return *this; } const itor operator++(int) { itor tmp = *this; do { if ( m_node ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/list.h", 1163, __FUNCTION__, "m_node", L"uninitialized iterator"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); m_node = m_node->GetNext(); return tmp; } itor& operator--() { m_node = m_node ? m_node->GetPrevious() : m_init; return *this; } const itor operator--(int) { itor tmp = *this; m_node = m_node ? m_node->GetPrevious() : m_init; return tmp; } bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; class __attribute__ ((visibility("default"))) const_iterator { public: typedef std::ptrdiff_t difference_type; typedef std::bidirectional_iterator_tag iterator_category; typedef wxObject* value_type; typedef const value_type* pointer; typedef const value_type& reference; typedef wxObjectListNode Node; typedef const_iterator itor; Node* m_node; Node* m_init; public: typedef reference reference_type; typedef pointer pointer_type; const_iterator(Node* node, Node* init) : m_node(node), m_init(init) { } const_iterator() : m_node(
# 1163 "/usr/include/wx-3.1-unofficial/wx/list.h" 3 4
__null
# 1163 "/usr/include/wx-3.1-unofficial/wx/list.h"
), m_init(
# 1163 "/usr/include/wx-3.1-unofficial/wx/list.h" 3 4
__null
# 1163 "/usr/include/wx-3.1-unofficial/wx/list.h"
) { } const_iterator(const iterator& it) : m_node(it.m_node), m_init(it.m_init) { } reference_type operator*() const { return *(pointer_type)m_node->GetDataPtr(); } itor& operator++() { do { if ( m_node ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/list.h", 1163, __FUNCTION__, "m_node", L"uninitialized iterator"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); m_node = m_node->GetNext(); return *this; } const itor operator++(int) { itor tmp = *this; do { if ( m_node ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/list.h", 1163, __FUNCTION__, "m_node", L"uninitialized iterator"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); m_node = m_node->GetNext(); return tmp; } itor& operator--() { m_node = m_node ? m_node->GetPrevious() : m_init; return *this; } const itor operator--(int) { itor tmp = *this; m_node = m_node ? m_node->GetPrevious() : m_init; return tmp; } bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; class __attribute__ ((visibility("default"))) reverse_iterator { public: typedef std::ptrdiff_t difference_type; typedef std::bidirectional_iterator_tag iterator_category; typedef wxObject* value_type; typedef value_type* pointer; typedef value_type& reference; typedef wxObjectListNode Node; typedef reverse_iterator itor; Node* m_node; Node* m_init; public: typedef reference reference_type; typedef pointer pointer_type; reverse_iterator(Node* node, Node* init) : m_node(node), m_init(init) { } reverse_iterator() : m_node(
# 1163 "/usr/include/wx-3.1-unofficial/wx/list.h" 3 4
__null
# 1163 "/usr/include/wx-3.1-unofficial/wx/list.h"
), m_init(
# 1163 "/usr/include/wx-3.1-unofficial/wx/list.h" 3 4
__null
# 1163 "/usr/include/wx-3.1-unofficial/wx/list.h"
) { } reference_type operator*() const { return *(pointer_type)m_node->GetDataPtr(); } itor& operator++() { m_node = m_node->GetPrevious(); return *this; } const itor operator++(int) { itor tmp = *this; m_node = m_node->GetPrevious(); return tmp; } itor& operator--() { m_node = m_node ? m_node->GetNext() : m_init; return *this; } const itor operator--(int) { itor tmp = *this; m_node = m_node ? m_node->GetNext() : m_init; return tmp; } bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; class __attribute__ ((visibility("default"))) const_reverse_iterator { public: typedef std::ptrdiff_t difference_type; typedef std::bidirectional_iterator_tag iterator_category; typedef wxObject* value_type; typedef const value_type* pointer; typedef const value_type& reference; typedef wxObjectListNode Node; typedef const_reverse_iterator itor; Node* m_node; Node* m_init; public: typedef reference reference_type; typedef pointer pointer_type; const_reverse_iterator(Node* node, Node* init) : m_node(node), m_init(init) { } const_reverse_iterator() : m_node(
# 1163 "/usr/include/wx-3.1-unofficial/wx/list.h" 3 4
__null
# 1163 "/usr/include/wx-3.1-unofficial/wx/list.h"
), m_init(
# 1163 "/usr/include/wx-3.1-unofficial/wx/list.h" 3 4
__null
# 1163 "/usr/include/wx-3.1-unofficial/wx/list.h"
) { } const_reverse_iterator(const reverse_iterator& it) : m_node(it.m_node), m_init(it.m_init) { } reference_type operator*() const { return *(pointer_type)m_node->GetDataPtr(); } itor& operator++() { m_node = m_node->GetPrevious(); return *this; } const itor operator++(int) { itor tmp = *this; m_node = m_node->GetPrevious(); return tmp; } itor& operator--() { m_node = m_node ? m_node->GetNext() : m_init; return *this;} const itor operator--(int) { itor tmp = *this; m_node = m_node ? m_node->GetNext() : m_init; return tmp; } bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; explicit wxObjectList(size_type n, const_reference v = value_type()) { assign(n, v); } wxObjectList(const const_iterator& first, const const_iterator& last) { assign(first, last); } iterator begin() { return iterator(GetFirst(), GetLast()); } const_iterator begin() const { return const_iterator(GetFirst(), GetLast()); } iterator end() { return iterator(
# 1163 "/usr/include/wx-3.1-unofficial/wx/list.h" 3 4
__null
# 1163 "/usr/include/wx-3.1-unofficial/wx/list.h"
, GetLast()); } const_iterator end() const { return const_iterator(
# 1163 "/usr/include/wx-3.1-unofficial/wx/list.h" 3 4
__null
# 1163 "/usr/include/wx-3.1-unofficial/wx/list.h"
, GetLast()); } reverse_iterator rbegin() { return reverse_iterator(GetLast(), GetFirst()); } const_reverse_iterator rbegin() const { return const_reverse_iterator(GetLast(), GetFirst()); } reverse_iterator rend() { return reverse_iterator(
# 1163 "/usr/include/wx-3.1-unofficial/wx/list.h" 3 4
__null
# 1163 "/usr/include/wx-3.1-unofficial/wx/list.h"
, GetFirst()); } const_reverse_iterator rend() const { return const_reverse_iterator(
# 1163 "/usr/include/wx-3.1-unofficial/wx/list.h" 3 4
__null
# 1163 "/usr/include/wx-3.1-unofficial/wx/list.h"
, GetFirst()); } void resize(size_type n, value_type v = value_type()) { while (n < size()) pop_back(); while (n > size()) push_back(v); } size_type size() const { return GetCount(); } size_type max_size() const { return 0x7fffffff; } bool empty() const { return IsEmpty(); } reference front() { return *begin(); } const_reference front() const { return *begin(); } reference back() { iterator tmp = end(); return *--tmp; } const_reference back() const { const_iterator tmp = end(); return *--tmp; } void push_front(const_reference v = value_type()) { Insert(GetFirst(), (const_base_reference)v); } void pop_front() { DeleteNode(GetFirst()); } void push_back(const_reference v = value_type()) { Append((const_base_reference)v); } void pop_back() { DeleteNode(GetLast()); } void assign(const_iterator first, const const_iterator& last) { clear(); for(; first != last; ++first) Append((const_base_reference)*first); } void assign(size_type n, const_reference v = value_type()) { clear(); for(size_type i = 0; i < n; ++i) Append((const_base_reference)v); } iterator insert(const iterator& it, const_reference v) { if ( it == end() ) { Append((const_base_reference)v); iterator itins(end()); return --itins; } else { Insert(it.m_node, (const_base_reference)v); iterator itins(it); return --itins; } } void insert(const iterator& it, size_type n, const_reference v) { for(size_type i = 0; i < n; ++i) insert(it, v); } void insert(const iterator& it, const_iterator first, const const_iterator& last) { for(; first != last; ++first) insert(it, *first); } iterator erase(const iterator& it) { iterator next = iterator(it.m_node->GetNext(), GetLast()); DeleteNode(it.m_node); return next; } iterator erase(const iterator& first, const iterator& last) { iterator next = last; if ( next != end() ) ++next; DeleteNodes(first.m_node, last.m_node); return next; } void clear() { Clear(); } void splice(const iterator& it, wxObjectList& l, const iterator& first, const iterator& last) { insert(it, first, last); l.erase(first, last); } void splice(const iterator& it, wxObjectList& l) { splice(it, l, l.begin(), l.end() ); } void splice(const iterator& it, wxObjectList& l, const iterator& first) { if ( it != first ) { insert(it, *first); l.erase(first); } } void remove(const_reference v) { DeleteObject((const_base_reference)v); } void reverse() { Reverse(); } }
                                               ;

class __attribute__ ((visibility("default"))) wxList : public wxObjectList
{
public:




    wxList(int key_type = wxKEY_NONE);



   ~wxList() { }


    wxList& operator=(const wxList& list)
        { if (&list != this) Assign(list); return *this; }


    void Sort(wxSortCompareFunction compfunc) { wxListBase::Sort(compfunc); }


    template<typename T>
    wxVector<T> AsVector() const
    {
        wxVector<T> vector(size());
        size_t i = 0;

        for ( const_iterator it = begin(); it != end(); ++it )
        {
            vector[i++] = static_cast<T>(*it);
        }

        return vector;
    }

};




inline wxListBase::operator wxList&() { return *static_cast<wxList*>(this); }
inline wxListBase::operator const wxList&() const { return *static_cast<const wxList*>(this); }




typedef int (*wxSortFuncFor_wxStringListBase)(const wxChar **, const wxChar **); class __attribute__ ((visibility("default"))) wxStringListNode : public wxNodeBase { public: wxStringListNode(wxListBase *list = 
# 1212 "/usr/include/wx-3.1-unofficial/wx/list.h" 3 4
__null
# 1212 "/usr/include/wx-3.1-unofficial/wx/list.h"
, wxStringListNode *previous = 
# 1212 "/usr/include/wx-3.1-unofficial/wx/list.h" 3 4
__null
# 1212 "/usr/include/wx-3.1-unofficial/wx/list.h"
, wxStringListNode *next = 
# 1212 "/usr/include/wx-3.1-unofficial/wx/list.h" 3 4
__null
# 1212 "/usr/include/wx-3.1-unofficial/wx/list.h"
, wxChar *data = 
# 1212 "/usr/include/wx-3.1-unofficial/wx/list.h" 3 4
__null
# 1212 "/usr/include/wx-3.1-unofficial/wx/list.h"
, const wxListKey& key = wxDefaultListKey) : wxNodeBase(list, previous, next, data, key) { } wxStringListNode *GetNext() const { return (wxStringListNode *)wxNodeBase::GetNext(); } wxStringListNode *GetPrevious() const { return (wxStringListNode *)wxNodeBase::GetPrevious(); } wxChar *GetData() const { return (wxChar *)wxNodeBase::GetData(); } void SetData(wxChar *data) { wxNodeBase::SetData(data); } protected: virtual void DeleteData() override; private: wxStringListNode(const wxStringListNode&) = delete; wxStringListNode& operator=(const wxStringListNode&) = delete; }; class __attribute__ ((visibility("default"))) wxStringListBase : public wxListBase { public: typedef wxStringListNode Node; class __attribute__ ((visibility("default"))) compatibility_iterator { public: compatibility_iterator(Node *ptr = 
# 1212 "/usr/include/wx-3.1-unofficial/wx/list.h" 3 4
__null
# 1212 "/usr/include/wx-3.1-unofficial/wx/list.h"
) : m_ptr(ptr) { } Node *operator->() const { return m_ptr; } operator Node *() const { return m_ptr; } private: Node *m_ptr; }; wxStringListBase(wxKeyType keyType = wxKEY_NONE) : wxListBase(keyType) { } wxStringListBase(const wxStringListBase& list) : wxListBase(list.GetKeyType()) { Assign(list); } wxStringListBase& operator=(const wxStringListBase& list) { if (&list != this) Assign(list); return *this; } wxStringListNode *GetFirst() const { return (wxStringListNode *)wxListBase::GetFirst(); } wxStringListNode *GetLast() const { return (wxStringListNode *)wxListBase::GetLast(); } wxStringListNode *Item(size_t index) const { return (wxStringListNode *)wxListBase::Item(index); } wxChar *operator[](size_t index) const { wxStringListNode *node = Item(index); return node ? (wxChar*)(node->GetData()) : 
# 1212 "/usr/include/wx-3.1-unofficial/wx/list.h" 3 4
__null
# 1212 "/usr/include/wx-3.1-unofficial/wx/list.h"
; } wxStringListNode *Append(wxChar *object) { return (wxStringListNode *)wxListBase::Append(object); } wxStringListNode *Insert(wxChar *object) { return (wxStringListNode *)Insert(static_cast<wxStringListNode *>(
# 1212 "/usr/include/wx-3.1-unofficial/wx/list.h" 3 4
__null
# 1212 "/usr/include/wx-3.1-unofficial/wx/list.h"
), object); } wxStringListNode *Insert(size_t pos, wxChar *object) { return (wxStringListNode *)wxListBase::Insert(pos, object); } wxStringListNode *Insert(wxStringListNode *prev, wxChar *object) { return (wxStringListNode *)wxListBase::Insert(prev, object); } wxStringListNode *Append(long key, void *object) { return (wxStringListNode *)wxListBase::Append(key, object); } wxStringListNode *Append(const wxChar *key, void *object) { return (wxStringListNode *)wxListBase::Append(key, object); } wxStringListNode *DetachNode(wxStringListNode *node) { return (wxStringListNode *)wxListBase::DetachNode(node); } bool DeleteNode(wxStringListNode *node) { return wxListBase::DeleteNode(node); } bool DeleteObject(wxChar *object) { return wxListBase::DeleteObject(object); } void Erase(wxStringListNode *it) { DeleteNode(it); } wxStringListNode *Find(const wxChar *object) const { return (wxStringListNode *)wxListBase::Find(object); } virtual wxStringListNode *Find(const wxListKey& key) const { return (wxStringListNode *)wxListBase::Find(key); } bool Member(const wxChar *object) const { return Find(object) != 
# 1212 "/usr/include/wx-3.1-unofficial/wx/list.h" 3 4
__null
# 1212 "/usr/include/wx-3.1-unofficial/wx/list.h"
; } int IndexOf(wxChar *object) const { return wxListBase::IndexOf(object); } void Sort(wxSortCompareFunction func) { wxListBase::Sort(func); } void Sort(wxSortFuncFor_wxStringListBase func) { Sort((wxSortCompareFunction)func); } protected: virtual wxNodeBase *CreateNode(wxNodeBase *prev, wxNodeBase *next, void *data, const wxListKey& key = wxDefaultListKey) override { return new wxStringListNode(this, (wxStringListNode *)prev, (wxStringListNode *)next, (wxChar *)data, key); } public: typedef size_t size_type; typedef int difference_type; typedef wxChar* value_type; typedef wxChar* base_value_type; typedef value_type& reference; typedef const value_type& const_reference; typedef base_value_type& base_reference; typedef const base_value_type& const_base_reference; class __attribute__ ((visibility("default"))) iterator { public: typedef std::ptrdiff_t difference_type; typedef std::bidirectional_iterator_tag iterator_category; typedef wxChar* value_type; typedef value_type* pointer; typedef value_type& reference; typedef wxStringListNode Node; typedef iterator itor; Node* m_node; Node* m_init; public: typedef reference reference_type; typedef pointer pointer_type; iterator(Node* node, Node* init) : m_node(node), m_init(init) {} iterator() : m_node(
# 1212 "/usr/include/wx-3.1-unofficial/wx/list.h" 3 4
__null
# 1212 "/usr/include/wx-3.1-unofficial/wx/list.h"
), m_init(
# 1212 "/usr/include/wx-3.1-unofficial/wx/list.h" 3 4
__null
# 1212 "/usr/include/wx-3.1-unofficial/wx/list.h"
) { } reference_type operator*() const { return *(pointer_type)m_node->GetDataPtr(); } itor& operator++() { do { if ( m_node ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/list.h", 1212, __FUNCTION__, "m_node", L"uninitialized iterator"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); m_node = m_node->GetNext(); return *this; } const itor operator++(int) { itor tmp = *this; do { if ( m_node ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/list.h", 1212, __FUNCTION__, "m_node", L"uninitialized iterator"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); m_node = m_node->GetNext(); return tmp; } itor& operator--() { m_node = m_node ? m_node->GetPrevious() : m_init; return *this; } const itor operator--(int) { itor tmp = *this; m_node = m_node ? m_node->GetPrevious() : m_init; return tmp; } bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; class __attribute__ ((visibility("default"))) const_iterator { public: typedef std::ptrdiff_t difference_type; typedef std::bidirectional_iterator_tag iterator_category; typedef wxChar* value_type; typedef const value_type* pointer; typedef const value_type& reference; typedef wxStringListNode Node; typedef const_iterator itor; Node* m_node; Node* m_init; public: typedef reference reference_type; typedef pointer pointer_type; const_iterator(Node* node, Node* init) : m_node(node), m_init(init) { } const_iterator() : m_node(
# 1212 "/usr/include/wx-3.1-unofficial/wx/list.h" 3 4
__null
# 1212 "/usr/include/wx-3.1-unofficial/wx/list.h"
), m_init(
# 1212 "/usr/include/wx-3.1-unofficial/wx/list.h" 3 4
__null
# 1212 "/usr/include/wx-3.1-unofficial/wx/list.h"
) { } const_iterator(const iterator& it) : m_node(it.m_node), m_init(it.m_init) { } reference_type operator*() const { return *(pointer_type)m_node->GetDataPtr(); } itor& operator++() { do { if ( m_node ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/list.h", 1212, __FUNCTION__, "m_node", L"uninitialized iterator"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); m_node = m_node->GetNext(); return *this; } const itor operator++(int) { itor tmp = *this; do { if ( m_node ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/list.h", 1212, __FUNCTION__, "m_node", L"uninitialized iterator"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); m_node = m_node->GetNext(); return tmp; } itor& operator--() { m_node = m_node ? m_node->GetPrevious() : m_init; return *this; } const itor operator--(int) { itor tmp = *this; m_node = m_node ? m_node->GetPrevious() : m_init; return tmp; } bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; class __attribute__ ((visibility("default"))) reverse_iterator { public: typedef std::ptrdiff_t difference_type; typedef std::bidirectional_iterator_tag iterator_category; typedef wxChar* value_type; typedef value_type* pointer; typedef value_type& reference; typedef wxStringListNode Node; typedef reverse_iterator itor; Node* m_node; Node* m_init; public: typedef reference reference_type; typedef pointer pointer_type; reverse_iterator(Node* node, Node* init) : m_node(node), m_init(init) { } reverse_iterator() : m_node(
# 1212 "/usr/include/wx-3.1-unofficial/wx/list.h" 3 4
__null
# 1212 "/usr/include/wx-3.1-unofficial/wx/list.h"
), m_init(
# 1212 "/usr/include/wx-3.1-unofficial/wx/list.h" 3 4
__null
# 1212 "/usr/include/wx-3.1-unofficial/wx/list.h"
) { } reference_type operator*() const { return *(pointer_type)m_node->GetDataPtr(); } itor& operator++() { m_node = m_node->GetPrevious(); return *this; } const itor operator++(int) { itor tmp = *this; m_node = m_node->GetPrevious(); return tmp; } itor& operator--() { m_node = m_node ? m_node->GetNext() : m_init; return *this; } const itor operator--(int) { itor tmp = *this; m_node = m_node ? m_node->GetNext() : m_init; return tmp; } bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; class __attribute__ ((visibility("default"))) const_reverse_iterator { public: typedef std::ptrdiff_t difference_type; typedef std::bidirectional_iterator_tag iterator_category; typedef wxChar* value_type; typedef const value_type* pointer; typedef const value_type& reference; typedef wxStringListNode Node; typedef const_reverse_iterator itor; Node* m_node; Node* m_init; public: typedef reference reference_type; typedef pointer pointer_type; const_reverse_iterator(Node* node, Node* init) : m_node(node), m_init(init) { } const_reverse_iterator() : m_node(
# 1212 "/usr/include/wx-3.1-unofficial/wx/list.h" 3 4
__null
# 1212 "/usr/include/wx-3.1-unofficial/wx/list.h"
), m_init(
# 1212 "/usr/include/wx-3.1-unofficial/wx/list.h" 3 4
__null
# 1212 "/usr/include/wx-3.1-unofficial/wx/list.h"
) { } const_reverse_iterator(const reverse_iterator& it) : m_node(it.m_node), m_init(it.m_init) { } reference_type operator*() const { return *(pointer_type)m_node->GetDataPtr(); } itor& operator++() { m_node = m_node->GetPrevious(); return *this; } const itor operator++(int) { itor tmp = *this; m_node = m_node->GetPrevious(); return tmp; } itor& operator--() { m_node = m_node ? m_node->GetNext() : m_init; return *this;} const itor operator--(int) { itor tmp = *this; m_node = m_node ? m_node->GetNext() : m_init; return tmp; } bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; explicit wxStringListBase(size_type n, const_reference v = value_type()) { assign(n, v); } wxStringListBase(const const_iterator& first, const const_iterator& last) { assign(first, last); } iterator begin() { return iterator(GetFirst(), GetLast()); } const_iterator begin() const { return const_iterator(GetFirst(), GetLast()); } iterator end() { return iterator(
# 1212 "/usr/include/wx-3.1-unofficial/wx/list.h" 3 4
__null
# 1212 "/usr/include/wx-3.1-unofficial/wx/list.h"
, GetLast()); } const_iterator end() const { return const_iterator(
# 1212 "/usr/include/wx-3.1-unofficial/wx/list.h" 3 4
__null
# 1212 "/usr/include/wx-3.1-unofficial/wx/list.h"
, GetLast()); } reverse_iterator rbegin() { return reverse_iterator(GetLast(), GetFirst()); } const_reverse_iterator rbegin() const { return const_reverse_iterator(GetLast(), GetFirst()); } reverse_iterator rend() { return reverse_iterator(
# 1212 "/usr/include/wx-3.1-unofficial/wx/list.h" 3 4
__null
# 1212 "/usr/include/wx-3.1-unofficial/wx/list.h"
, GetFirst()); } const_reverse_iterator rend() const { return const_reverse_iterator(
# 1212 "/usr/include/wx-3.1-unofficial/wx/list.h" 3 4
__null
# 1212 "/usr/include/wx-3.1-unofficial/wx/list.h"
, GetFirst()); } void resize(size_type n, value_type v = value_type()) { while (n < size()) pop_back(); while (n > size()) push_back(v); } size_type size() const { return GetCount(); } size_type max_size() const { return 0x7fffffff; } bool empty() const { return IsEmpty(); } reference front() { return *begin(); } const_reference front() const { return *begin(); } reference back() { iterator tmp = end(); return *--tmp; } const_reference back() const { const_iterator tmp = end(); return *--tmp; } void push_front(const_reference v = value_type()) { Insert(GetFirst(), (const_base_reference)v); } void pop_front() { DeleteNode(GetFirst()); } void push_back(const_reference v = value_type()) { Append((const_base_reference)v); } void pop_back() { DeleteNode(GetLast()); } void assign(const_iterator first, const const_iterator& last) { clear(); for(; first != last; ++first) Append((const_base_reference)*first); } void assign(size_type n, const_reference v = value_type()) { clear(); for(size_type i = 0; i < n; ++i) Append((const_base_reference)v); } iterator insert(const iterator& it, const_reference v) { if ( it == end() ) { Append((const_base_reference)v); iterator itins(end()); return --itins; } else { Insert(it.m_node, (const_base_reference)v); iterator itins(it); return --itins; } } void insert(const iterator& it, size_type n, const_reference v) { for(size_type i = 0; i < n; ++i) insert(it, v); } void insert(const iterator& it, const_iterator first, const const_iterator& last) { for(; first != last; ++first) insert(it, *first); } iterator erase(const iterator& it) { iterator next = iterator(it.m_node->GetNext(), GetLast()); DeleteNode(it.m_node); return next; } iterator erase(const iterator& first, const iterator& last) { iterator next = last; if ( next != end() ) ++next; DeleteNodes(first.m_node, last.m_node); return next; } void clear() { Clear(); } void splice(const iterator& it, wxStringListBase& l, const iterator& first, const iterator& last) { insert(it, first, last); l.erase(first, last); } void splice(const iterator& it, wxStringListBase& l) { splice(it, l, l.begin(), l.end() ); } void splice(const iterator& it, wxStringListBase& l, const iterator& first) { if ( it != first ) { insert(it, *first); l.erase(first); } } void remove(const_reference v) { DeleteObject((const_base_reference)v); } void reverse() { Reverse(); } };

class __attribute__ ((visibility("default"))) wxStringList : public wxStringListBase
{
public:






    wxStringList();
    wxStringList(const wxChar *first ...);




    wxStringList(const wxStringList& other) : wxStringListBase() { DeleteContents(true); DoCopy(other); }
    wxStringList& operator=(const wxStringList& other)
    {
        if (&other != this)
        {
            Clear();
            DoCopy(other);
        }
        return *this;
    }



    wxNode *Add(const wxChar *s);


    wxNode *Prepend(const wxChar *s);

    bool Delete(const wxChar *s);

    wxChar **ListToArray(bool new_copies = false) const;
    bool Member(const wxChar *s) const;


    void Sort();

private:
    void DoCopy(const wxStringList&);
};
# 20 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h" 2
# 29 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h"
class wxBitmap;
class wxBrush;
class wxColour;
class wxCursor;
class wxFont;
class wxIcon;
class wxPalette;
class wxPen;
class wxRegion;
class wxString;
class wxIconBundle;
class wxPoint;






enum wxBitmapType
{
    wxBITMAP_TYPE_INVALID,
    wxBITMAP_TYPE_BMP,
    wxBITMAP_TYPE_BMP_RESOURCE,
    wxBITMAP_TYPE_RESOURCE = wxBITMAP_TYPE_BMP_RESOURCE,
    wxBITMAP_TYPE_ICO,
    wxBITMAP_TYPE_ICO_RESOURCE,
    wxBITMAP_TYPE_CUR,
    wxBITMAP_TYPE_CUR_RESOURCE,
    wxBITMAP_TYPE_XBM,
    wxBITMAP_TYPE_XBM_DATA,
    wxBITMAP_TYPE_XPM,
    wxBITMAP_TYPE_XPM_DATA,
    wxBITMAP_TYPE_TIFF,
    wxBITMAP_TYPE_TIF = wxBITMAP_TYPE_TIFF,
    wxBITMAP_TYPE_TIFF_RESOURCE,
    wxBITMAP_TYPE_TIF_RESOURCE = wxBITMAP_TYPE_TIFF_RESOURCE,
    wxBITMAP_TYPE_GIF,
    wxBITMAP_TYPE_GIF_RESOURCE,
    wxBITMAP_TYPE_PNG,
    wxBITMAP_TYPE_PNG_RESOURCE,
    wxBITMAP_TYPE_JPEG,
    wxBITMAP_TYPE_JPEG_RESOURCE,
    wxBITMAP_TYPE_PNM,
    wxBITMAP_TYPE_PNM_RESOURCE,
    wxBITMAP_TYPE_PCX,
    wxBITMAP_TYPE_PCX_RESOURCE,
    wxBITMAP_TYPE_PICT,
    wxBITMAP_TYPE_PICT_RESOURCE,
    wxBITMAP_TYPE_ICON,
    wxBITMAP_TYPE_ICON_RESOURCE,
    wxBITMAP_TYPE_ANI,
    wxBITMAP_TYPE_IFF,
    wxBITMAP_TYPE_TGA,
    wxBITMAP_TYPE_MACCURSOR,
    wxBITMAP_TYPE_MACCURSOR_RESOURCE,

    wxBITMAP_TYPE_MAX,
    wxBITMAP_TYPE_ANY = 50
};


enum wxPolygonFillMode
{
    wxODDEVEN_RULE = 1,
    wxWINDING_RULE
};


enum wxStockCursor
{
    wxCURSOR_NONE,
    wxCURSOR_ARROW,
    wxCURSOR_RIGHT_ARROW,
    wxCURSOR_BULLSEYE,
    wxCURSOR_CHAR,
    wxCURSOR_CROSS,
    wxCURSOR_HAND,
    wxCURSOR_IBEAM,
    wxCURSOR_LEFT_BUTTON,
    wxCURSOR_MAGNIFIER,
    wxCURSOR_MIDDLE_BUTTON,
    wxCURSOR_NO_ENTRY,
    wxCURSOR_PAINT_BRUSH,
    wxCURSOR_PENCIL,
    wxCURSOR_POINT_LEFT,
    wxCURSOR_POINT_RIGHT,
    wxCURSOR_QUESTION_ARROW,
    wxCURSOR_RIGHT_BUTTON,
    wxCURSOR_SIZENESW,
    wxCURSOR_SIZENS,
    wxCURSOR_SIZENWSE,
    wxCURSOR_SIZEWE,
    wxCURSOR_SIZING,
    wxCURSOR_SPRAYCAN,
    wxCURSOR_WAIT,
    wxCURSOR_WATCH,
    wxCURSOR_BLANK,

    wxCURSOR_DEFAULT,
# 139 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h"
    wxCURSOR_ARROWWAIT,





    wxCURSOR_MAX
};
# 162 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h"
enum wxEllipsizeFlags
{
    wxELLIPSIZE_FLAGS_NONE = 0,
    wxELLIPSIZE_FLAGS_PROCESS_MNEMONICS = 1,
    wxELLIPSIZE_FLAGS_EXPAND_TABS = 2,

    wxELLIPSIZE_FLAGS_DEFAULT = wxELLIPSIZE_FLAGS_PROCESS_MNEMONICS |
    wxELLIPSIZE_FLAGS_EXPAND_TABS
};



enum wxEllipsizeMode
{
    wxELLIPSIZE_NONE,
    wxELLIPSIZE_START,
    wxELLIPSIZE_MIDDLE,
    wxELLIPSIZE_END
};
# 273 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h"
class __attribute__ ((visibility("default"))) wxSize
{
public:

    int x, y;


    wxSize() : x(0), y(0) { }
    wxSize(int xx, int yy) : x(xx), y(yy) { }



    wxSize& operator+=(const wxSize& sz) { x += sz.x; y += sz.y; return *this; }
    wxSize& operator-=(const wxSize& sz) { x -= sz.x; y -= sz.y; return *this; }
    wxSize& operator/=(int i) { x /= i; y /= i; return *this; }
    wxSize& operator*=(int i) { x *= i; y *= i; return *this; }
    wxSize& operator/=(unsigned int i) { x /= i; y /= i; return *this; }
    wxSize& operator*=(unsigned int i) { x *= i; y *= i; return *this; }
    wxSize& operator/=(long i) { x /= i; y /= i; return *this; }
    wxSize& operator*=(long i) { x *= i; y *= i; return *this; }
    wxSize& operator/=(unsigned long i) { x /= i; y /= i; return *this; }
    wxSize& operator*=(unsigned long i) { x *= i; y *= i; return *this; }
    wxSize& operator/=(double i) { x = wxRound(x/i); y = wxRound(y/i); return *this; }
    wxSize& operator*=(double i) { x = wxRound(x*i); y = wxRound(y*i); return *this; }

    void IncTo(const wxSize& sz)
        { if ( sz.x > x ) x = sz.x; if ( sz.y > y ) y = sz.y; }
    void DecTo(const wxSize& sz)
        { if ( sz.x < x ) x = sz.x; if ( sz.y < y ) y = sz.y; }
    void DecToIfSpecified(const wxSize& sz)
    {
        if ( sz.x != wxDefaultCoord && sz.x < x )
            x = sz.x;
        if ( sz.y != wxDefaultCoord && sz.y < y )
            y = sz.y;
    }

    void IncBy(int dx, int dy) { x += dx; y += dy; }
    void IncBy(const wxPoint& pt);
    void IncBy(const wxSize& sz) { IncBy(sz.x, sz.y); }
    void IncBy(int d) { IncBy(d, d); }

    void DecBy(int dx, int dy) { IncBy(-dx, -dy); }
    void DecBy(const wxPoint& pt);
    void DecBy(const wxSize& sz) { DecBy(sz.x, sz.y); }
    void DecBy(int d) { DecBy(d, d); }


    wxSize& Scale(double xscale, double yscale)
        { x = wxRound(x*xscale); y = wxRound(y*yscale); return *this; }


    void Set(int xx, int yy) { x = xx; y = yy; }
    void SetWidth(int w) { x = w; }
    void SetHeight(int h) { y = h; }

    int GetWidth() const { return x; }
    int GetHeight() const { return y; }

    bool IsFullySpecified() const { return x != wxDefaultCoord && y != wxDefaultCoord; }



    void SetDefaults(const wxSize& size)
    {
        if ( x == wxDefaultCoord )
            x = size.x;
        if ( y == wxDefaultCoord )
            y = size.y;
    }


    int GetX() const { return x; }
    int GetY() const { return y; }
};

inline bool operator==(const wxSize& s1, const wxSize& s2)
{
    return s1.x == s2.x && s1.y == s2.y;
}

inline bool operator!=(const wxSize& s1, const wxSize& s2)
{
    return s1.x != s2.x || s1.y != s2.y;
}

inline wxSize operator+(const wxSize& s1, const wxSize& s2)
{
    return wxSize(s1.x + s2.x, s1.y + s2.y);
}

inline wxSize operator-(const wxSize& s1, const wxSize& s2)
{
    return wxSize(s1.x - s2.x, s1.y - s2.y);
}

inline wxSize operator/(const wxSize& s, int i)
{
    return wxSize(s.x / i, s.y / i);
}

inline wxSize operator*(const wxSize& s, int i)
{
    return wxSize(s.x * i, s.y * i);
}

inline wxSize operator*(int i, const wxSize& s)
{
    return wxSize(s.x * i, s.y * i);
}

inline wxSize operator/(const wxSize& s, unsigned int i)
{
    return wxSize(s.x / i, s.y / i);
}

inline wxSize operator*(const wxSize& s, unsigned int i)
{
    return wxSize(s.x * i, s.y * i);
}

inline wxSize operator*(unsigned int i, const wxSize& s)
{
    return wxSize(s.x * i, s.y * i);
}

inline wxSize operator/(const wxSize& s, long i)
{
    return wxSize(s.x / i, s.y / i);
}

inline wxSize operator*(const wxSize& s, long i)
{
    return wxSize(int(s.x * i), int(s.y * i));
}

inline wxSize operator*(long i, const wxSize& s)
{
    return wxSize(int(s.x * i), int(s.y * i));
}

inline wxSize operator/(const wxSize& s, unsigned long i)
{
    return wxSize(int(s.x / i), int(s.y / i));
}

inline wxSize operator*(const wxSize& s, unsigned long i)
{
    return wxSize(int(s.x * i), int(s.y * i));
}

inline wxSize operator*(unsigned long i, const wxSize& s)
{
    return wxSize(int(s.x * i), int(s.y * i));
}

inline wxSize operator*(const wxSize& s, double i)
{
    return wxSize(wxRound(s.x * i), wxRound(s.y * i));
}

inline wxSize operator*(double i, const wxSize& s)
{
    return wxSize(wxRound(s.x * i), wxRound(s.y * i));
}







class __attribute__ ((visibility("default"))) wxRealPoint
{
public:
    double x;
    double y;

    wxRealPoint() : x(0.0), y(0.0) { }
    wxRealPoint(double xx, double yy) : x(xx), y(yy) { }
    wxRealPoint(const wxPoint& pt);




    wxRealPoint& operator+=(const wxRealPoint& p) { x += p.x; y += p.y; return *this; }
    wxRealPoint& operator-=(const wxRealPoint& p) { x -= p.x; y -= p.y; return *this; }

    wxRealPoint& operator+=(const wxSize& s) { x += s.GetWidth(); y += s.GetHeight(); return *this; }
    wxRealPoint& operator-=(const wxSize& s) { x -= s.GetWidth(); y -= s.GetHeight(); return *this; }
};


inline bool operator==(const wxRealPoint& p1, const wxRealPoint& p2)
{
    return wxIsSameDouble(p1.x, p2.x) && wxIsSameDouble(p1.y, p2.y);
}

inline bool operator!=(const wxRealPoint& p1, const wxRealPoint& p2)
{
    return !(p1 == p2);
}

inline wxRealPoint operator+(const wxRealPoint& p1, const wxRealPoint& p2)
{
    return wxRealPoint(p1.x + p2.x, p1.y + p2.y);
}


inline wxRealPoint operator-(const wxRealPoint& p1, const wxRealPoint& p2)
{
    return wxRealPoint(p1.x - p2.x, p1.y - p2.y);
}


inline wxRealPoint operator/(const wxRealPoint& s, int i)
{
    return wxRealPoint(s.x / i, s.y / i);
}

inline wxRealPoint operator*(const wxRealPoint& s, int i)
{
    return wxRealPoint(s.x * i, s.y * i);
}

inline wxRealPoint operator*(int i, const wxRealPoint& s)
{
    return wxRealPoint(s.x * i, s.y * i);
}

inline wxRealPoint operator/(const wxRealPoint& s, unsigned int i)
{
    return wxRealPoint(s.x / i, s.y / i);
}

inline wxRealPoint operator*(const wxRealPoint& s, unsigned int i)
{
    return wxRealPoint(s.x * i, s.y * i);
}

inline wxRealPoint operator*(unsigned int i, const wxRealPoint& s)
{
    return wxRealPoint(s.x * i, s.y * i);
}

inline wxRealPoint operator/(const wxRealPoint& s, long i)
{
    return wxRealPoint(s.x / i, s.y / i);
}

inline wxRealPoint operator*(const wxRealPoint& s, long i)
{
    return wxRealPoint(s.x * i, s.y * i);
}

inline wxRealPoint operator*(long i, const wxRealPoint& s)
{
    return wxRealPoint(s.x * i, s.y * i);
}

inline wxRealPoint operator/(const wxRealPoint& s, unsigned long i)
{
    return wxRealPoint(s.x / i, s.y / i);
}

inline wxRealPoint operator*(const wxRealPoint& s, unsigned long i)
{
    return wxRealPoint(s.x * i, s.y * i);
}

inline wxRealPoint operator*(unsigned long i, const wxRealPoint& s)
{
    return wxRealPoint(s.x * i, s.y * i);
}

inline wxRealPoint operator*(const wxRealPoint& s, double i)
{
    return wxRealPoint(s.x * i, s.y * i);
}

inline wxRealPoint operator*(double i, const wxRealPoint& s)
{
    return wxRealPoint(s.x * i, s.y * i);
}






class __attribute__ ((visibility("default"))) wxPoint
{
public:
    int x, y;

    wxPoint() : x(0), y(0) { }
    wxPoint(int xx, int yy) : x(xx), y(yy) { }
    wxPoint(const wxRealPoint& pt) : x(wxRound(pt.x)), y(wxRound(pt.y)) { }




    wxPoint& operator+=(const wxPoint& p) { x += p.x; y += p.y; return *this; }
    wxPoint& operator-=(const wxPoint& p) { x -= p.x; y -= p.y; return *this; }

    wxPoint& operator+=(const wxSize& s) { x += s.GetWidth(); y += s.GetHeight(); return *this; }
    wxPoint& operator-=(const wxSize& s) { x -= s.GetWidth(); y -= s.GetHeight(); return *this; }


    bool IsFullySpecified() const { return x != wxDefaultCoord && y != wxDefaultCoord; }


    void SetDefaults(const wxPoint& pt)
    {
        if ( x == wxDefaultCoord )
            x = pt.x;
        if ( y == wxDefaultCoord )
            y = pt.y;
    }
};



inline bool operator==(const wxPoint& p1, const wxPoint& p2)
{
    return p1.x == p2.x && p1.y == p2.y;
}

inline bool operator!=(const wxPoint& p1, const wxPoint& p2)
{
    return !(p1 == p2);
}



inline wxPoint operator+(const wxPoint& p1, const wxPoint& p2)
{
    return wxPoint(p1.x + p2.x, p1.y + p2.y);
}

inline wxPoint operator-(const wxPoint& p1, const wxPoint& p2)
{
    return wxPoint(p1.x - p2.x, p1.y - p2.y);
}

inline wxPoint operator+(const wxPoint& p, const wxSize& s)
{
    return wxPoint(p.x + s.x, p.y + s.y);
}

inline wxPoint operator-(const wxPoint& p, const wxSize& s)
{
    return wxPoint(p.x - s.x, p.y - s.y);
}

inline wxPoint operator+(const wxSize& s, const wxPoint& p)
{
    return wxPoint(p.x + s.x, p.y + s.y);
}

inline wxPoint operator-(const wxSize& s, const wxPoint& p)
{
    return wxPoint(s.x - p.x, s.y - p.y);
}

inline wxPoint operator-(const wxPoint& p)
{
    return wxPoint(-p.x, -p.y);
}

inline wxPoint operator/(const wxPoint& s, int i)
{
    return wxPoint(s.x / i, s.y / i);
}

inline wxPoint operator*(const wxPoint& s, int i)
{
    return wxPoint(s.x * i, s.y * i);
}

inline wxPoint operator*(int i, const wxPoint& s)
{
    return wxPoint(s.x * i, s.y * i);
}

inline wxPoint operator/(const wxPoint& s, unsigned int i)
{
    return wxPoint(s.x / i, s.y / i);
}

inline wxPoint operator*(const wxPoint& s, unsigned int i)
{
    return wxPoint(s.x * i, s.y * i);
}

inline wxPoint operator*(unsigned int i, const wxPoint& s)
{
    return wxPoint(s.x * i, s.y * i);
}

inline wxPoint operator/(const wxPoint& s, long i)
{
    return wxPoint(s.x / i, s.y / i);
}

inline wxPoint operator*(const wxPoint& s, long i)
{
    return wxPoint(int(s.x * i), int(s.y * i));
}

inline wxPoint operator*(long i, const wxPoint& s)
{
    return wxPoint(int(s.x * i), int(s.y * i));
}

inline wxPoint operator/(const wxPoint& s, unsigned long i)
{
    return wxPoint(s.x / i, s.y / i);
}

inline wxPoint operator*(const wxPoint& s, unsigned long i)
{
    return wxPoint(int(s.x * i), int(s.y * i));
}

inline wxPoint operator*(unsigned long i, const wxPoint& s)
{
    return wxPoint(int(s.x * i), int(s.y * i));
}

inline wxPoint operator*(const wxPoint& s, double i)
{
    return wxPoint(int(s.x * i), int(s.y * i));
}

inline wxPoint operator*(double i, const wxPoint& s)
{
    return wxPoint(int(s.x * i), int(s.y * i));
}

typedef wxPoint _WX_LIST_ITEM_TYPE_wxPointList; typedef int (*wxSortFuncFor_wxPointList)(const wxPoint **, const wxPoint **); class __attribute__ ((visibility("default"))) wxwxPointListNode : public wxNodeBase { public: wxwxPointListNode(wxListBase *list = 
# 713 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h" 3 4
__null
# 713 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h"
, wxwxPointListNode *previous = 
# 713 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h" 3 4
__null
# 713 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h"
, wxwxPointListNode *next = 
# 713 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h" 3 4
__null
# 713 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h"
, wxPoint *data = 
# 713 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h" 3 4
__null
# 713 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h"
, const wxListKey& key = wxDefaultListKey) : wxNodeBase(list, previous, next, data, key) { } wxwxPointListNode *GetNext() const { return (wxwxPointListNode *)wxNodeBase::GetNext(); } wxwxPointListNode *GetPrevious() const { return (wxwxPointListNode *)wxNodeBase::GetPrevious(); } wxPoint *GetData() const { return (wxPoint *)wxNodeBase::GetData(); } void SetData(wxPoint *data) { wxNodeBase::SetData(data); } protected: virtual void DeleteData() override; private: wxwxPointListNode(const wxwxPointListNode&) = delete; wxwxPointListNode& operator=(const wxwxPointListNode&) = delete; }; class __attribute__ ((visibility("default"))) wxPointList : public wxListBase { public: typedef wxwxPointListNode Node; class __attribute__ ((visibility("default"))) compatibility_iterator { public: compatibility_iterator(Node *ptr = 
# 713 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h" 3 4
__null
# 713 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h"
) : m_ptr(ptr) { } Node *operator->() const { return m_ptr; } operator Node *() const { return m_ptr; } private: Node *m_ptr; }; wxPointList(wxKeyType keyType = wxKEY_NONE) : wxListBase(keyType) { } wxPointList(const wxPointList& list) : wxListBase(list.GetKeyType()) { Assign(list); } wxPointList& operator=(const wxPointList& list) { if (&list != this) Assign(list); return *this; } wxwxPointListNode *GetFirst() const { return (wxwxPointListNode *)wxListBase::GetFirst(); } wxwxPointListNode *GetLast() const { return (wxwxPointListNode *)wxListBase::GetLast(); } wxwxPointListNode *Item(size_t index) const { return (wxwxPointListNode *)wxListBase::Item(index); } wxPoint *operator[](size_t index) const { wxwxPointListNode *node = Item(index); return node ? (wxPoint*)(node->GetData()) : 
# 713 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h" 3 4
__null
# 713 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h"
; } wxwxPointListNode *Append(wxPoint *object) { return (wxwxPointListNode *)wxListBase::Append(object); } wxwxPointListNode *Insert(wxPoint *object) { return (wxwxPointListNode *)Insert(static_cast<wxwxPointListNode *>(
# 713 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h" 3 4
__null
# 713 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h"
), object); } wxwxPointListNode *Insert(size_t pos, wxPoint *object) { return (wxwxPointListNode *)wxListBase::Insert(pos, object); } wxwxPointListNode *Insert(wxwxPointListNode *prev, wxPoint *object) { return (wxwxPointListNode *)wxListBase::Insert(prev, object); } wxwxPointListNode *Append(long key, void *object) { return (wxwxPointListNode *)wxListBase::Append(key, object); } wxwxPointListNode *Append(const wxChar *key, void *object) { return (wxwxPointListNode *)wxListBase::Append(key, object); } wxwxPointListNode *DetachNode(wxwxPointListNode *node) { return (wxwxPointListNode *)wxListBase::DetachNode(node); } bool DeleteNode(wxwxPointListNode *node) { return wxListBase::DeleteNode(node); } bool DeleteObject(wxPoint *object) { return wxListBase::DeleteObject(object); } void Erase(wxwxPointListNode *it) { DeleteNode(it); } wxwxPointListNode *Find(const wxPoint *object) const { return (wxwxPointListNode *)wxListBase::Find(object); } virtual wxwxPointListNode *Find(const wxListKey& key) const { return (wxwxPointListNode *)wxListBase::Find(key); } bool Member(const wxPoint *object) const { return Find(object) != 
# 713 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h" 3 4
__null
# 713 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h"
; } int IndexOf(wxPoint *object) const { return wxListBase::IndexOf(object); } void Sort(wxSortCompareFunction func) { wxListBase::Sort(func); } void Sort(wxSortFuncFor_wxPointList func) { Sort((wxSortCompareFunction)func); } protected: virtual wxNodeBase *CreateNode(wxNodeBase *prev, wxNodeBase *next, void *data, const wxListKey& key = wxDefaultListKey) override { return new wxwxPointListNode(this, (wxwxPointListNode *)prev, (wxwxPointListNode *)next, (wxPoint *)data, key); } public: typedef size_t size_type; typedef int difference_type; typedef wxPoint* value_type; typedef wxPoint* base_value_type; typedef value_type& reference; typedef const value_type& const_reference; typedef base_value_type& base_reference; typedef const base_value_type& const_base_reference; class __attribute__ ((visibility("default"))) iterator { public: typedef std::ptrdiff_t difference_type; typedef std::bidirectional_iterator_tag iterator_category; typedef wxPoint* value_type; typedef value_type* pointer; typedef value_type& reference; typedef wxwxPointListNode Node; typedef iterator itor; Node* m_node; Node* m_init; public: typedef reference reference_type; typedef pointer pointer_type; iterator(Node* node, Node* init) : m_node(node), m_init(init) {} iterator() : m_node(
# 713 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h" 3 4
__null
# 713 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h"
), m_init(
# 713 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h" 3 4
__null
# 713 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h"
) { } reference_type operator*() const { return *(pointer_type)m_node->GetDataPtr(); } itor& operator++() { do { if ( m_node ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/gdicmn.h", 713, __FUNCTION__, "m_node", L"uninitialized iterator"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); m_node = m_node->GetNext(); return *this; } const itor operator++(int) { itor tmp = *this; do { if ( m_node ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/gdicmn.h", 713, __FUNCTION__, "m_node", L"uninitialized iterator"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); m_node = m_node->GetNext(); return tmp; } itor& operator--() { m_node = m_node ? m_node->GetPrevious() : m_init; return *this; } const itor operator--(int) { itor tmp = *this; m_node = m_node ? m_node->GetPrevious() : m_init; return tmp; } bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; class __attribute__ ((visibility("default"))) const_iterator { public: typedef std::ptrdiff_t difference_type; typedef std::bidirectional_iterator_tag iterator_category; typedef wxPoint* value_type; typedef const value_type* pointer; typedef const value_type& reference; typedef wxwxPointListNode Node; typedef const_iterator itor; Node* m_node; Node* m_init; public: typedef reference reference_type; typedef pointer pointer_type; const_iterator(Node* node, Node* init) : m_node(node), m_init(init) { } const_iterator() : m_node(
# 713 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h" 3 4
__null
# 713 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h"
), m_init(
# 713 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h" 3 4
__null
# 713 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h"
) { } const_iterator(const iterator& it) : m_node(it.m_node), m_init(it.m_init) { } reference_type operator*() const { return *(pointer_type)m_node->GetDataPtr(); } itor& operator++() { do { if ( m_node ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/gdicmn.h", 713, __FUNCTION__, "m_node", L"uninitialized iterator"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); m_node = m_node->GetNext(); return *this; } const itor operator++(int) { itor tmp = *this; do { if ( m_node ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/gdicmn.h", 713, __FUNCTION__, "m_node", L"uninitialized iterator"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); m_node = m_node->GetNext(); return tmp; } itor& operator--() { m_node = m_node ? m_node->GetPrevious() : m_init; return *this; } const itor operator--(int) { itor tmp = *this; m_node = m_node ? m_node->GetPrevious() : m_init; return tmp; } bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; class __attribute__ ((visibility("default"))) reverse_iterator { public: typedef std::ptrdiff_t difference_type; typedef std::bidirectional_iterator_tag iterator_category; typedef wxPoint* value_type; typedef value_type* pointer; typedef value_type& reference; typedef wxwxPointListNode Node; typedef reverse_iterator itor; Node* m_node; Node* m_init; public: typedef reference reference_type; typedef pointer pointer_type; reverse_iterator(Node* node, Node* init) : m_node(node), m_init(init) { } reverse_iterator() : m_node(
# 713 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h" 3 4
__null
# 713 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h"
), m_init(
# 713 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h" 3 4
__null
# 713 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h"
) { } reference_type operator*() const { return *(pointer_type)m_node->GetDataPtr(); } itor& operator++() { m_node = m_node->GetPrevious(); return *this; } const itor operator++(int) { itor tmp = *this; m_node = m_node->GetPrevious(); return tmp; } itor& operator--() { m_node = m_node ? m_node->GetNext() : m_init; return *this; } const itor operator--(int) { itor tmp = *this; m_node = m_node ? m_node->GetNext() : m_init; return tmp; } bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; class __attribute__ ((visibility("default"))) const_reverse_iterator { public: typedef std::ptrdiff_t difference_type; typedef std::bidirectional_iterator_tag iterator_category; typedef wxPoint* value_type; typedef const value_type* pointer; typedef const value_type& reference; typedef wxwxPointListNode Node; typedef const_reverse_iterator itor; Node* m_node; Node* m_init; public: typedef reference reference_type; typedef pointer pointer_type; const_reverse_iterator(Node* node, Node* init) : m_node(node), m_init(init) { } const_reverse_iterator() : m_node(
# 713 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h" 3 4
__null
# 713 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h"
), m_init(
# 713 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h" 3 4
__null
# 713 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h"
) { } const_reverse_iterator(const reverse_iterator& it) : m_node(it.m_node), m_init(it.m_init) { } reference_type operator*() const { return *(pointer_type)m_node->GetDataPtr(); } itor& operator++() { m_node = m_node->GetPrevious(); return *this; } const itor operator++(int) { itor tmp = *this; m_node = m_node->GetPrevious(); return tmp; } itor& operator--() { m_node = m_node ? m_node->GetNext() : m_init; return *this;} const itor operator--(int) { itor tmp = *this; m_node = m_node ? m_node->GetNext() : m_init; return tmp; } bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; explicit wxPointList(size_type n, const_reference v = value_type()) { assign(n, v); } wxPointList(const const_iterator& first, const const_iterator& last) { assign(first, last); } iterator begin() { return iterator(GetFirst(), GetLast()); } const_iterator begin() const { return const_iterator(GetFirst(), GetLast()); } iterator end() { return iterator(
# 713 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h" 3 4
__null
# 713 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h"
, GetLast()); } const_iterator end() const { return const_iterator(
# 713 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h" 3 4
__null
# 713 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h"
, GetLast()); } reverse_iterator rbegin() { return reverse_iterator(GetLast(), GetFirst()); } const_reverse_iterator rbegin() const { return const_reverse_iterator(GetLast(), GetFirst()); } reverse_iterator rend() { return reverse_iterator(
# 713 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h" 3 4
__null
# 713 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h"
, GetFirst()); } const_reverse_iterator rend() const { return const_reverse_iterator(
# 713 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h" 3 4
__null
# 713 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h"
, GetFirst()); } void resize(size_type n, value_type v = value_type()) { while (n < size()) pop_back(); while (n > size()) push_back(v); } size_type size() const { return GetCount(); } size_type max_size() const { return 0x7fffffff; } bool empty() const { return IsEmpty(); } reference front() { return *begin(); } const_reference front() const { return *begin(); } reference back() { iterator tmp = end(); return *--tmp; } const_reference back() const { const_iterator tmp = end(); return *--tmp; } void push_front(const_reference v = value_type()) { Insert(GetFirst(), (const_base_reference)v); } void pop_front() { DeleteNode(GetFirst()); } void push_back(const_reference v = value_type()) { Append((const_base_reference)v); } void pop_back() { DeleteNode(GetLast()); } void assign(const_iterator first, const const_iterator& last) { clear(); for(; first != last; ++first) Append((const_base_reference)*first); } void assign(size_type n, const_reference v = value_type()) { clear(); for(size_type i = 0; i < n; ++i) Append((const_base_reference)v); } iterator insert(const iterator& it, const_reference v) { if ( it == end() ) { Append((const_base_reference)v); iterator itins(end()); return --itins; } else { Insert(it.m_node, (const_base_reference)v); iterator itins(it); return --itins; } } void insert(const iterator& it, size_type n, const_reference v) { for(size_type i = 0; i < n; ++i) insert(it, v); } void insert(const iterator& it, const_iterator first, const const_iterator& last) { for(; first != last; ++first) insert(it, *first); } iterator erase(const iterator& it) { iterator next = iterator(it.m_node->GetNext(), GetLast()); DeleteNode(it.m_node); return next; } iterator erase(const iterator& first, const iterator& last) { iterator next = last; if ( next != end() ) ++next; DeleteNodes(first.m_node, last.m_node); return next; } void clear() { Clear(); } void splice(const iterator& it, wxPointList& l, const iterator& first, const iterator& last) { insert(it, first, last); l.erase(first, last); } void splice(const iterator& it, wxPointList& l) { splice(it, l, l.begin(), l.end() ); } void splice(const iterator& it, wxPointList& l, const iterator& first) { if ( it != first ) { insert(it, *first); l.erase(first); } } void remove(const_reference v) { DeleteObject((const_base_reference)v); } void reverse() { Reverse(); } };





class __attribute__ ((visibility("default"))) wxRect
{
public:
    wxRect()
        : x(0), y(0), width(0), height(0)
        { }
    wxRect(int xx, int yy, int ww, int hh)
        : x(xx), y(yy), width(ww), height(hh)
        { }
    wxRect(const wxPoint& topLeft, const wxPoint& bottomRight);
    wxRect(const wxPoint& pt, const wxSize& size)
        : x(pt.x), y(pt.y), width(size.x), height(size.y)
        { }
    wxRect(const wxSize& size)
        : x(0), y(0), width(size.x), height(size.y)
        { }



    int GetX() const { return x; }
    void SetX(int xx) { x = xx; }

    int GetY() const { return y; }
    void SetY(int yy) { y = yy; }

    int GetWidth() const { return width; }
    void SetWidth(int w) { width = w; }

    int GetHeight() const { return height; }
    void SetHeight(int h) { height = h; }

    wxPoint GetPosition() const { return wxPoint(x, y); }
    void SetPosition( const wxPoint &p ) { x = p.x; y = p.y; }

    wxSize GetSize() const { return wxSize(width, height); }
    void SetSize( const wxSize &s ) { width = s.GetWidth(); height = s.GetHeight(); }

    bool IsEmpty() const { return (width <= 0) || (height <= 0); }

    int GetLeft() const { return x; }
    int GetTop() const { return y; }
    int GetBottom() const { return y + height - 1; }
    int GetRight() const { return x + width - 1; }

    void SetLeft(int left) { x = left; }
    void SetRight(int right) { width = right - x + 1; }
    void SetTop(int top) { y = top; }
    void SetBottom(int bottom) { height = bottom - y + 1; }

    wxPoint GetTopLeft() const { return GetPosition(); }
    wxPoint GetLeftTop() const { return GetTopLeft(); }
    void SetTopLeft(const wxPoint &p) { SetPosition(p); }
    void SetLeftTop(const wxPoint &p) { SetTopLeft(p); }

    wxPoint GetBottomRight() const { return wxPoint(GetRight(), GetBottom()); }
    wxPoint GetRightBottom() const { return GetBottomRight(); }
    void SetBottomRight(const wxPoint &p) { SetRight(p.x); SetBottom(p.y); }
    void SetRightBottom(const wxPoint &p) { SetBottomRight(p); }

    wxPoint GetTopRight() const { return wxPoint(GetRight(), GetTop()); }
    wxPoint GetRightTop() const { return GetTopRight(); }
    void SetTopRight(const wxPoint &p) { SetRight(p.x); SetTop(p.y); }
    void SetRightTop(const wxPoint &p) { SetTopRight(p); }

    wxPoint GetBottomLeft() const { return wxPoint(GetLeft(), GetBottom()); }
    wxPoint GetLeftBottom() const { return GetBottomLeft(); }
    void SetBottomLeft(const wxPoint &p) { SetLeft(p.x); SetBottom(p.y); }
    void SetLeftBottom(const wxPoint &p) { SetBottomLeft(p); }


    wxRect& Inflate(wxCoord dx, wxCoord dy);
    wxRect& Inflate(const wxSize& d) { return Inflate(d.x, d.y); }
    wxRect& Inflate(wxCoord d) { return Inflate(d, d); }
    wxRect Inflate(wxCoord dx, wxCoord dy) const
    {
        wxRect r = *this;
        r.Inflate(dx, dy);
        return r;
    }

    wxRect& Deflate(wxCoord dx, wxCoord dy) { return Inflate(-dx, -dy); }
    wxRect& Deflate(const wxSize& d) { return Inflate(-d.x, -d.y); }
    wxRect& Deflate(wxCoord d) { return Inflate(-d); }
    wxRect Deflate(wxCoord dx, wxCoord dy) const
    {
        wxRect r = *this;
        r.Deflate(dx, dy);
        return r;
    }

    void Offset(wxCoord dx, wxCoord dy) { x += dx; y += dy; }
    void Offset(const wxPoint& pt) { Offset(pt.x, pt.y); }

    wxRect& Intersect(const wxRect& rect);
    wxRect Intersect(const wxRect& rect) const
    {
        wxRect r = *this;
        r.Intersect(rect);
        return r;
    }

    wxRect& Union(const wxRect& rect);
    wxRect Union(const wxRect& rect) const
    {
        wxRect r = *this;
        r.Union(rect);
        return r;
    }


    bool Contains(int x, int y) const;
    bool Contains(const wxPoint& pt) const { return Contains(pt.x, pt.y); }

    bool Contains(const wxRect& rect) const;


    bool Intersects(const wxRect& rect) const;


    wxRect& operator+=(const wxRect& rect);


    wxRect& operator*=(const wxRect& rect);



    wxRect CentreIn(const wxRect& r, int dir = wxBOTH) const
    {
        return wxRect(dir & wxHORIZONTAL ? r.x + (r.width - width)/2 : x,
                      dir & wxVERTICAL ? r.y + (r.height - height)/2 : y,
                      width, height);
    }

    wxRect CenterIn(const wxRect& r, int dir = wxBOTH) const
    {
        return CentreIn(r, dir);
    }

public:
    int x, y, width, height;
};



inline bool operator==(const wxRect& r1, const wxRect& r2)
{
    return (r1.x == r2.x) && (r1.y == r2.y) &&
           (r1.width == r2.width) && (r1.height == r2.height);
}

inline bool operator!=(const wxRect& r1, const wxRect& r2)
{
    return !(r1 == r2);
}


__attribute__ ((visibility("default"))) wxRect operator+(const wxRect& r1, const wxRect& r2);


__attribute__ ((visibility("default"))) wxRect operator*(const wxRect& r1, const wxRect& r2);



inline void wxSize::IncBy(const wxPoint& pt) { IncBy(pt.x, pt.y); }
inline void wxSize::DecBy(const wxPoint& pt) { DecBy(pt.x, pt.y); }





typedef wxInt8 wxDash;

class __attribute__ ((visibility("default"))) wxGDIObjListBase {
public:
    wxGDIObjListBase();
    ~wxGDIObjListBase();

protected:
    wxList list;
};

class wxStringToColourHashMap_wxImplementation_Pair { public: typedef wxString first_type; typedef wxColour* second_type; typedef wxString t1; typedef wxColour* t2; typedef const wxString const_t1; typedef const wxColour* const_t2; wxStringToColourHashMap_wxImplementation_Pair(const const_t1& f, const const_t2& s) : first(const_cast<t1&>(f)), second(const_cast<t2&>(s)) {} t1 first; t2 second; }; class wxStringToColourHashMap_wxImplementation_KeyEx { typedef wxString key_type; typedef wxStringToColourHashMap_wxImplementation_Pair pair_type; typedef const key_type const_key_type; typedef const pair_type const_pair_type; typedef const_key_type& const_key_reference; typedef const_pair_type& const_pair_reference; public: wxStringToColourHashMap_wxImplementation_KeyEx() { } const_key_reference operator()( const_pair_reference pair ) const { return pair.first; }}; class wxStringToColourHashMap_wxImplementation_HashTable : protected _wxHashTableBase2 { public: typedef wxString key_type; typedef wxStringToColourHashMap_wxImplementation_Pair value_type; typedef wxStringHash hasher; typedef wxStringEqual key_equal; typedef size_t size_type; typedef ptrdiff_t difference_type; typedef value_type* pointer; typedef const value_type* const_pointer; typedef value_type& reference; typedef const value_type& const_reference; typedef const wxString const_key_type; typedef const wxStringToColourHashMap_wxImplementation_Pair const_mapped_type; public: typedef wxStringToColourHashMap_wxImplementation_KeyEx key_extractor; typedef wxStringToColourHashMap_wxImplementation_HashTable Self; protected: _wxHashTable_NodeBase** m_table; size_t m_tableBuckets; size_t m_items; hasher m_hasher; key_equal m_equals; key_extractor m_getKey; public: struct Node:public _wxHashTable_NodeBase { public: Node( const value_type& value ) : m_value( value ) {} Node* next() { return static_cast<Node*>(m_next); } value_type m_value; }; protected: static void DeleteNode( _wxHashTable_NodeBase* node ) { delete static_cast<Node*>(node); } public: class Iterator { public: Node* m_node; Self* m_ht; Iterator() : m_node(
# 900 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h" 3 4
__null
# 900 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h"
), m_ht(
# 900 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h" 3 4
__null
# 900 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h"
) {} Iterator( Node* node, const Self* ht ) : m_node(node), m_ht(const_cast<Self*>(ht)) {} bool operator ==( const Iterator& it ) const { return m_node == it.m_node; } bool operator !=( const Iterator& it ) const { return m_node != it.m_node; } protected: Node* GetNextNode() { size_type bucket = GetBucketForNode(m_ht,m_node); for( size_type i = bucket + 1; i < m_ht->m_tableBuckets; ++i ) { if( m_ht->m_table[i] ) return static_cast<Node*>(m_ht->m_table[i]); } return 
# 900 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h" 3 4
__null
# 900 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h"
; } void PlusPlus() { Node* next = m_node->next(); m_node = next ? next : GetNextNode(); } }; friend class Iterator; public: class iterator : public Iterator { public: iterator() : Iterator() {} iterator( Node* node, Self* ht ) : Iterator( node, ht ) {} iterator& operator++() { PlusPlus(); return *this; } iterator operator++(int) { iterator it=*this;PlusPlus();return it; } reference operator *() const { return m_node->m_value; } pointer operator ->() const { return &(m_node->m_value); } }; class const_iterator : public Iterator { public: const_iterator() : Iterator() {} const_iterator(iterator i) : Iterator(i) {} const_iterator( Node* node, const Self* ht ) : Iterator(node, const_cast<Self*>(ht)) {} const_iterator& operator++() { PlusPlus();return *this; } const_iterator operator++(int) { const_iterator it=*this;PlusPlus();return it; } const_reference operator *() const { return m_node->m_value; } const_pointer operator ->() const { return &(m_node->m_value); } }; wxStringToColourHashMap_wxImplementation_HashTable( size_type sz = 10, const hasher& hfun = hasher(), const key_equal& k_eq = key_equal(), const key_extractor& k_ex = key_extractor() ) : m_tableBuckets( GetNextPrime( (unsigned long) sz ) ), m_items( 0 ), m_hasher( hfun ), m_equals( k_eq ), m_getKey( k_ex ) { m_table = (_wxHashTable_NodeBase**)AllocTable(m_tableBuckets); } wxStringToColourHashMap_wxImplementation_HashTable( const Self& ht ) : m_table(
# 900 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h" 3 4
__null
# 900 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h"
), m_tableBuckets( 0 ), m_items( ht.m_items ), m_hasher( ht.m_hasher ), m_equals( ht.m_equals ), m_getKey( ht.m_getKey ) { HashCopy( ht ); } const Self& operator=( const Self& ht ) { if (&ht != this) { clear(); m_hasher = ht.m_hasher; m_equals = ht.m_equals; m_getKey = ht.m_getKey; m_items = ht.m_items; HashCopy( ht ); } return *this; } ~wxStringToColourHashMap_wxImplementation_HashTable() { clear(); FreeTable(m_table); } hasher hash_funct() { return m_hasher; } key_equal key_eq() { return m_equals; } void clear() { DeleteNodes(m_tableBuckets, m_table, DeleteNode); m_items = 0; } size_type size() const { return m_items; } size_type max_size() const { return size_type(-1); } bool empty() const { return size() == 0; } const_iterator end() const { return const_iterator(
# 900 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h" 3 4
__null
# 900 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h"
, this); } iterator end() { return iterator(
# 900 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h" 3 4
__null
# 900 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h"
, this); } const_iterator begin() const { return const_iterator(static_cast<Node*>(GetFirstNode(m_tableBuckets, m_table)), this); } iterator begin() { return iterator(static_cast<Node*>(GetFirstNode(m_tableBuckets, m_table)), this); } size_type erase( const const_key_type& key ) { _wxHashTable_NodeBase** node = GetNodePtr(key); if( !node ) return 0; --m_items; _wxHashTable_NodeBase* temp = (*node)->m_next; delete static_cast<Node*>(*node); (*node) = temp; if( never_shrink( m_tableBuckets, m_items ) ) ResizeTable( GetPreviousPrime( (unsigned long) m_tableBuckets ) - 1 ); return 1; } protected: static size_type GetBucketForNode( Self* ht, Node* node ) { return ht->m_hasher( ht->m_getKey( node->m_value ) ) % ht->m_tableBuckets; } static Node* CopyNode( Node* node ) { return new Node( *node ); } Node* GetOrCreateNode( const value_type& value, bool& created ) { const const_key_type& key = m_getKey( value ); size_t bucket = m_hasher( key ) % m_tableBuckets; Node* node = static_cast<Node*>(m_table[bucket]); while( node ) { if( m_equals( m_getKey( node->m_value ), key ) ) { created = false; return node; } node = node->next(); } created = true; return CreateNode( value, bucket); } Node * CreateNode( const value_type& value, size_t bucket ) { Node* node = new Node( value ); node->m_next = m_table[bucket]; m_table[bucket] = node; ++m_items; if( grow_lf70( m_tableBuckets, m_items ) ) ResizeTable( m_tableBuckets ); return node; } void CreateNode( const value_type& value ) { CreateNode(value, m_hasher( m_getKey(value) ) % m_tableBuckets ); } _wxHashTable_NodeBase** GetNodePtr(const const_key_type& key) const { size_t bucket = m_hasher( key ) % m_tableBuckets; _wxHashTable_NodeBase** node = &m_table[bucket]; while( *node ) { if (m_equals(m_getKey(static_cast<Node*>(*node)->m_value), key)) return node; node = &(*node)->m_next; } return 
# 900 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h" 3 4
__null
# 900 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h"
; } Node* GetNode( const const_key_type& key ) const { size_t bucket = m_hasher( key ) % m_tableBuckets; Node* node = static_cast<Node*>(m_table[bucket]); while( node ) { if( m_equals( m_getKey( node->m_value ), key ) ) return node; node = node->next(); } return 
# 900 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h" 3 4
__null
# 900 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h"
; } void ResizeTable( size_t newSize ) { newSize = GetNextPrime( (unsigned long)newSize ); _wxHashTable_NodeBase** srcTable = m_table; size_t srcBuckets = m_tableBuckets; m_table = (_wxHashTable_NodeBase**)AllocTable( newSize ); m_tableBuckets = newSize; CopyHashTable( srcTable, srcBuckets, this, m_table, (BucketFromNode)GetBucketForNode, (ProcessNode)&DummyProcessNode ); FreeTable(srcTable); } void HashCopy( const Self& ht ) { ResizeTable( ht.size() ); CopyHashTable( ht.m_table, ht.m_tableBuckets, (_wxHashTableBase2*)this, m_table, (BucketFromNode)GetBucketForNode, (ProcessNode)CopyNode ); } }; class wxStringToColourHashMap:public wxStringToColourHashMap_wxImplementation_HashTable { public: typedef wxColour* mapped_type; class Insert_Result { public: typedef iterator first_type; typedef bool second_type; typedef iterator t1; typedef bool t2; typedef const iterator const_t1; typedef const bool const_t2; Insert_Result(const const_t1& f, const const_t2& s) : first(const_cast<t1&>(f)), second(const_cast<t2&>(s)) {} t1 first; t2 second; }; explicit wxStringToColourHashMap( size_type hint = 100, hasher hf = hasher(), key_equal eq = key_equal() ) : wxStringToColourHashMap_wxImplementation_HashTable( hint, hf, eq, wxStringToColourHashMap_wxImplementation_KeyEx() ) {} mapped_type& operator[]( const const_key_type& key ) { bool created; return GetOrCreateNode( wxStringToColourHashMap_wxImplementation_Pair( key, mapped_type() ), created)->m_value.second; } const_iterator find( const const_key_type& key ) const { return const_iterator( GetNode( key ), this ); } iterator find( const const_key_type& key ) { return iterator( GetNode( key ), this ); } Insert_Result insert( const value_type& v ) { bool created; Node *node = GetOrCreateNode( wxStringToColourHashMap_wxImplementation_Pair( v.first, v.second ), created); return Insert_Result(iterator(node, this), created); } size_type erase( const key_type& k ) { return wxStringToColourHashMap_wxImplementation_HashTable::erase( k ); } void erase( const iterator& it ) { erase( (*it).first ); } size_type count( const const_key_type& key ) { return GetNode( key ) ? 1u : 0u; } };

class __attribute__ ((visibility("default"))) wxColourDatabase
{
public:
    wxColourDatabase();
    ~wxColourDatabase();


    wxColour Find(const wxString& name) const;
    wxString FindName(const wxColour& colour) const;


    void AddColour(const wxString& name, const wxColour& colour);

private:


    void Initialize();

    wxStringToColourHashMap *m_map;
};

class __attribute__ ((visibility("default"))) wxResourceCache: public wxList
{
public:
    wxResourceCache() { }

    wxResourceCache(unsigned int keyType) : wxList(keyType) { }

    virtual ~wxResourceCache();
};
# 948 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h"
class __attribute__ ((visibility("default"))) wxStockGDI
{
public:
    enum Item {
        BRUSH_BLACK,
        BRUSH_BLUE,
        BRUSH_CYAN,
        BRUSH_GREEN,
        BRUSH_YELLOW,
        BRUSH_GREY,
        BRUSH_LIGHTGREY,
        BRUSH_MEDIUMGREY,
        BRUSH_RED,
        BRUSH_TRANSPARENT,
        BRUSH_WHITE,
        COLOUR_BLACK,
        COLOUR_BLUE,
        COLOUR_CYAN,
        COLOUR_GREEN,
        COLOUR_YELLOW,
        COLOUR_LIGHTGREY,
        COLOUR_RED,
        COLOUR_WHITE,
        CURSOR_CROSS,
        CURSOR_HOURGLASS,
        CURSOR_STANDARD,
        FONT_ITALIC,
        FONT_NORMAL,
        FONT_SMALL,
        FONT_SWISS,
        PEN_BLACK,
        PEN_BLACKDASHED,
        PEN_BLUE,
        PEN_CYAN,
        PEN_GREEN,
        PEN_YELLOW,
        PEN_GREY,
        PEN_LIGHTGREY,
        PEN_MEDIUMGREY,
        PEN_RED,
        PEN_TRANSPARENT,
        PEN_WHITE,
        ITEMCOUNT
    };

    wxStockGDI();
    virtual ~wxStockGDI();
    static void DeleteAll();

    static wxStockGDI& instance() { return *ms_instance; }

    static const wxBrush* GetBrush(Item item);
    static const wxColour* GetColour(Item item);
    static const wxCursor* GetCursor(Item item);

    virtual const wxFont* GetFont(Item item);
    static const wxPen* GetPen(Item item);

protected:
    static wxStockGDI* ms_instance;

    static wxObject* ms_stockObject[ITEMCOUNT];

    private: wxStockGDI(const wxStockGDI&) = delete; wxStockGDI& operator=(const wxStockGDI&) = delete;
};
# 1058 "/usr/include/wx-3.1-unofficial/wx/gdicmn.h"
extern __attribute__ ((visibility("default"))) wxBitmap wxNullBitmap;
extern __attribute__ ((visibility("default"))) wxIcon wxNullIcon;
extern __attribute__ ((visibility("default"))) wxCursor wxNullCursor;
extern __attribute__ ((visibility("default"))) wxPen wxNullPen;
extern __attribute__ ((visibility("default"))) wxBrush wxNullBrush;
extern __attribute__ ((visibility("default"))) wxPalette wxNullPalette;
extern __attribute__ ((visibility("default"))) wxFont wxNullFont;
extern __attribute__ ((visibility("default"))) wxColour wxNullColour;
extern __attribute__ ((visibility("default"))) wxIconBundle wxNullIconBundle;

extern __attribute__ ((visibility("default"))) wxColourDatabase* wxTheColourDatabase;

extern __attribute__ ((visibility("default"))) const char wxPanelNameStr[];

extern __attribute__ ((visibility("default"))) const wxSize wxDefaultSize;
extern __attribute__ ((visibility("default"))) const wxPoint wxDefaultPosition;






extern void __attribute__ ((visibility("default"))) wxInitializeStockLists();
extern void __attribute__ ((visibility("default"))) wxDeleteStockLists();





extern bool __attribute__ ((visibility("default"))) wxColourDisplay();


extern int __attribute__ ((visibility("default"))) wxDisplayDepth();



extern void __attribute__ ((visibility("default"))) wxDisplaySize(int *width, int *height);
extern wxSize __attribute__ ((visibility("default"))) wxGetDisplaySize();
extern void __attribute__ ((visibility("default"))) wxDisplaySizeMM(int *width, int *height);
extern wxSize __attribute__ ((visibility("default"))) wxGetDisplaySizeMM();
extern wxSize __attribute__ ((visibility("default"))) wxGetDisplayPPI();


extern void __attribute__ ((visibility("default"))) wxClientDisplayRect(int *x, int *y, int *width, int *height);
extern wxRect __attribute__ ((visibility("default"))) wxGetClientDisplayRect();


extern void __attribute__ ((visibility("default"))) wxSetCursor(const wxCursor& cursor);
# 22 "/usr/include/wx-3.1-unofficial/wx/event.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/cursor.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/cursor.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/gdiobj.h" 1
# 22 "/usr/include/wx-3.1-unofficial/wx/gdiobj.h"
class __attribute__ ((visibility("default"))) wxGDIRefData : public wxObjectRefData
{
public:


    wxGDIRefData() { }



    virtual bool IsOk() const { return true; }

private:
    private: wxGDIRefData(const wxGDIRefData&) = delete; wxGDIRefData& operator=(const wxGDIRefData&) = delete;
};





class __attribute__ ((visibility("default"))) wxGDIObject : public wxObject
{
public:

    virtual bool IsOk() const
    {


        return m_refData && static_cast<wxGDIRefData *>(m_refData)->IsOk();
    }


    bool IsNull() const { return m_refData == 
# 53 "/usr/include/wx-3.1-unofficial/wx/gdiobj.h" 3 4
                                             __null
# 53 "/usr/include/wx-3.1-unofficial/wx/gdiobj.h"
                                                 ; }



    bool Ok() const { return IsOk(); }
# 72 "/usr/include/wx-3.1-unofficial/wx/gdiobj.h"
protected:



    virtual wxObjectRefData *CreateRefData() const override
    {
        return CreateGDIRefData();
    }

    virtual wxObjectRefData *CloneRefData(const wxObjectRefData *data) const override
    {
        return CloneGDIRefData(static_cast<const wxGDIRefData *>(data));
    }

    virtual wxGDIRefData *CreateGDIRefData() const = 0;
    virtual wxGDIRefData *CloneGDIRefData(const wxGDIRefData *data) const = 0;

    public:
# 89 "/usr/include/wx-3.1-unofficial/wx/gdiobj.h"
#pragma GCC diagnostic push
# 89 "/usr/include/wx-3.1-unofficial/wx/gdiobj.h"
   
# 89 "/usr/include/wx-3.1-unofficial/wx/gdiobj.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 89 "/usr/include/wx-3.1-unofficial/wx/gdiobj.h"
    virtual wxClassInfo *GetClassInfo() const;
# 89 "/usr/include/wx-3.1-unofficial/wx/gdiobj.h"
#pragma GCC diagnostic pop
# 89 "/usr/include/wx-3.1-unofficial/wx/gdiobj.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 15 "/usr/include/wx-3.1-unofficial/wx/cursor.h" 2







    typedef wxGDIObject wxGDIImage;


class __attribute__ ((visibility("default"))) wxCursorBase : public wxGDIImage
{
public:
# 42 "/usr/include/wx-3.1-unofficial/wx/cursor.h"
    virtual wxPoint GetHotSpot() const { return wxDefaultPosition; }
};
# 57 "/usr/include/wx-3.1-unofficial/wx/cursor.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/gtk/cursor.h" 1
# 12 "/usr/include/wx-3.1-unofficial/wx/gtk/cursor.h"
class wxImage;





class __attribute__ ((visibility("default"))) wxCursor : public wxCursorBase
{
public:
    wxCursor();
    wxCursor(wxStockCursor id) { InitFromStock(id); }




    wxCursor( const wxImage & image );
    wxCursor(const wxString& name,
             wxBitmapType type = wxBITMAP_TYPE_XPM,
             int hotSpotX = 0, int hotSpotY = 0);

    wxCursor( const char bits[], int width, int height,
              int hotSpotX = -1, int hotSpotY = -1,
              const char maskBits[] = 
# 34 "/usr/include/wx-3.1-unofficial/wx/gtk/cursor.h" 3 4
                                     __null
# 34 "/usr/include/wx-3.1-unofficial/wx/gtk/cursor.h"
                                         ,
              const wxColour* fg = 
# 35 "/usr/include/wx-3.1-unofficial/wx/gtk/cursor.h" 3 4
                                  __null
# 35 "/usr/include/wx-3.1-unofficial/wx/gtk/cursor.h"
                                      , const wxColour* bg = 
# 35 "/usr/include/wx-3.1-unofficial/wx/gtk/cursor.h" 3 4
                                                             __null
# 35 "/usr/include/wx-3.1-unofficial/wx/gtk/cursor.h"
                                                                 );

    virtual wxPoint GetHotSpot() const override;

    virtual ~wxCursor();



    GdkCursor *GetCursor() const;

protected:
    void InitFromStock(wxStockCursor);

    void InitFromImage(const wxImage& image);


    virtual wxGDIRefData *CreateGDIRefData() const override;
    virtual wxGDIRefData *CloneGDIRefData(const wxGDIRefData *data) const override;

private:
    public:
# 55 "/usr/include/wx-3.1-unofficial/wx/gtk/cursor.h"
#pragma GCC diagnostic push
# 55 "/usr/include/wx-3.1-unofficial/wx/gtk/cursor.h"
   
# 55 "/usr/include/wx-3.1-unofficial/wx/gtk/cursor.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 55 "/usr/include/wx-3.1-unofficial/wx/gtk/cursor.h"
    virtual wxClassInfo *GetClassInfo() const;
# 55 "/usr/include/wx-3.1-unofficial/wx/gtk/cursor.h"
#pragma GCC diagnostic pop
# 55 "/usr/include/wx-3.1-unofficial/wx/gtk/cursor.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 58 "/usr/include/wx-3.1-unofficial/wx/cursor.h" 2
# 75 "/usr/include/wx-3.1-unofficial/wx/cursor.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/utils.h" 1
# 20 "/usr/include/wx-3.1-unofficial/wx/utils.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/filefn.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/filefn.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/arrstr.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/arrstr.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/arrstr.h" 2

# 1 "/usr/include/wx-3.1-unofficial/wx/dynarray.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/dynarray.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/dynarray.h" 2
# 38 "/usr/include/wx-3.1-unofficial/wx/dynarray.h"
extern "C"
{
typedef int ( *CMPFUNC)(const void* pItem1, const void* pItem2);
}
# 52 "/usr/include/wx-3.1-unofficial/wx/dynarray.h"
template<class T>
class wxArray_SortFunction
{
public:
    typedef int ( *CMPFUNC)(T* pItem1, T* pItem2);

    wxArray_SortFunction(CMPFUNC f) : m_f(f) { }
    bool operator()(const T& i1, const T& i2)
      { return m_f(const_cast<T*>(&i1), const_cast<T*>(&i2)) < 0; }
private:
    CMPFUNC m_f;
};

template<class T>
class wxSortedArray_SortFunction
{
public:
    typedef int ( *CMPFUNC)(T, T);

    wxSortedArray_SortFunction(CMPFUNC f) : m_f(f) { }
    bool operator()(const T& i1, const T& i2)
      { return m_f(i1, i2) < 0; }
private:
    CMPFUNC m_f;
};

template <typename T, typename Sorter = wxSortedArray_SortFunction<T> >
class wxBaseArray : public wxVector<T>
{
public:
    typedef typename Sorter::CMPFUNC SCMPFUNC;
    typedef typename wxArray_SortFunction<T>::CMPFUNC CMPFUNC;

    typedef wxVector<T> base_vec;

    typedef typename base_vec::value_type value_type;
    typedef typename base_vec::reference reference;
    typedef typename base_vec::const_reference const_reference;
    typedef typename base_vec::iterator iterator;
    typedef typename base_vec::const_iterator const_iterator;
    typedef typename base_vec::const_reverse_iterator const_reverse_iterator;
    typedef typename base_vec::difference_type difference_type;
    typedef typename base_vec::size_type size_type;

public:
    typedef T base_type;

    wxBaseArray() : base_vec() { }
    explicit wxBaseArray(size_t n) : base_vec(n) { }
    wxBaseArray(size_t n, const_reference v) : base_vec(n, v) { }

    template <class InputIterator>
    wxBaseArray(InputIterator first, InputIterator last)
        : base_vec(first, last)
    { }

    void Empty() { this->clear(); }
    void Clear() { this->clear(); }
    void Alloc(size_t uiSize) { this->reserve(uiSize); }

    void Shrink()
    {
        wxShrinkToFit(*this);
    }

    size_t GetCount() const { return this->size(); }
    void SetCount(size_t n, T v = T()) { this->resize(n, v); }
    bool IsEmpty() const { return this->empty(); }
    size_t Count() const { return this->size(); }

    T& Item(size_t uiIndex) const
    {
        do { if ( uiIndex < this->size() ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/dynarray.h", 124, __FUNCTION__, "uiIndex < this->size()", (const char*)
# 124 "/usr/include/wx-3.1-unofficial/wx/dynarray.h" 3 4
       __null
# 124 "/usr/include/wx-3.1-unofficial/wx/dynarray.h"
       ), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );
        return const_cast<T&>((*this)[uiIndex]);
    }

    T& Last() const { return Item(this->size() - 1); }

    int Index(T item, bool bFromEnd = false) const
    {
        if ( bFromEnd )
        {
            const const_reverse_iterator b = this->rbegin(),
                  e = this->rend();
            for ( const_reverse_iterator i = b; i != e; ++i )
                if ( *i == item )
                    return (int)(e - i - 1);
        }
        else
        {
            const const_iterator b = this->begin(),
                  e = this->end();
            for ( const_iterator i = b; i != e; ++i )
                if ( *i == item )
                    return (int)(i - b);
        }

        return (-1);
    }

    int Index(T lItem, SCMPFUNC fnCompare) const
    {
        Sorter p(fnCompare);
        const_iterator i = std::lower_bound(this->begin(), this->end(), lItem, p);
        return i != this->end() && !p(lItem, *i) ? (int)(i - this->begin())
                                                 : (-1);
    }

    size_t IndexForInsert(T lItem, SCMPFUNC fnCompare) const
    {
        Sorter p(fnCompare);
        const_iterator i = std::lower_bound(this->begin(), this->end(), lItem, p);
        return i - this->begin();
    }

    void Add(T lItem, size_t nInsert = 1)
    {
        this->insert(this->end(), nInsert, lItem);
    }

    size_t Add(T lItem, SCMPFUNC fnCompare)
    {
        size_t n = IndexForInsert(lItem, fnCompare);
        Insert(lItem, n);
        return n;
    }

    void Insert(T lItem, size_t uiIndex, size_t nInsert = 1)
    {
        this->insert(this->begin() + uiIndex, nInsert, lItem);
    }

    void Remove(T lItem)
    {
        int n = Index(lItem);
        if ( n != (-1) ) {} else { do { if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/dynarray.h", 187, __FUNCTION__, "\"n != (-1)\"", "removing inexistent element in wxArray::Remove"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); return; } struct wxDummyCheckStruct187;
        RemoveAt((size_t)n);
    }

    void RemoveAt(size_t uiIndex, size_t nRemove = 1)
    {
        this->erase(this->begin() + uiIndex, this->begin() + uiIndex + nRemove);
    }

    void Sort(CMPFUNC fCmp)
    {
        wxArray_SortFunction<T> p(fCmp);
        std::sort(this->begin(), this->end(), p);
    }

    void Sort(SCMPFUNC fCmp)
    {
        Sorter p(fCmp);
        std::sort(this->begin(), this->end(), p);
    }
};
# 230 "/usr/include/wx-3.1-unofficial/wx/dynarray.h"
template <typename T, typename Sorter = wxSortedArray_SortFunction<T> >
class wxBaseSortedArray : public wxBaseArray<T, Sorter>
{
public:
    typedef typename Sorter::CMPFUNC SCMPFUNC;

    explicit wxBaseSortedArray(SCMPFUNC fn) : m_fnCompare(fn) { }

    size_t IndexForInsert(T item) const
    {
        return this->wxBaseArray<T, Sorter>::IndexForInsert(item, m_fnCompare);
    }

    void AddAt(T item, size_t index)
    {
        this->insert(this->begin() + index, item);
    }

    size_t Add(T item)
    {
        return this->wxBaseArray<T, Sorter>::Add(item, m_fnCompare);
    }

    void push_back(T item)
    {
        Add(item);
    }

protected:
    SCMPFUNC GetCompareFunction() const noexcept { return m_fnCompare; }

private:
    SCMPFUNC m_fnCompare;
};
# 275 "/usr/include/wx-3.1-unofficial/wx/dynarray.h"
template <typename T, typename Traits>
class wxBaseObjectArray : private wxBaseArray<T*>
{
    typedef wxBaseArray<T*> base;

public:
    typedef T value_type;

    typedef int ( *CMPFUNC)(T **pItem1, T **pItem2);

    wxBaseObjectArray()
    {
    }

    wxBaseObjectArray(const wxBaseObjectArray& src) : base()
    {
        DoCopy(src);
    }

    wxBaseObjectArray& operator=(const wxBaseObjectArray& src)
    {
        Empty();
        DoCopy(src);

        return *this;
    }

    ~wxBaseObjectArray()
    {
        Empty();
    }

    void Alloc(size_t count) { base::reserve(count); }
    void reserve(size_t count) { base::reserve(count); }
    size_t GetCount() const { return base::size(); }
    size_t size() const { return base::size(); }
    bool IsEmpty() const { return base::empty(); }
    bool empty() const { return base::empty(); }
    size_t Count() const { return base::size(); }
    void Shrink() { base::Shrink(); }

    T& operator[](size_t uiIndex) const
    {
        return *base::operator[](uiIndex);
    }

    T& Item(size_t uiIndex) const
    {
        return *base::operator[](uiIndex);
    }

    T& Last() const
    {
        return *(base::operator[](size() - 1));
    }

    int Index(const T& item, bool bFromEnd = false) const
    {
        if ( bFromEnd )
        {
            if ( size() > 0 )
            {
                size_t ui = size() - 1;
                do
                {
                    if ( base::operator[](ui) == &item )
                        return static_cast<int>(ui);
                    ui--;
                }
                while ( ui != 0 );
            }
        }
        else
        {
            for ( size_t ui = 0; ui < size(); ++ui )
            {
                if( base::operator[](ui) == &item )
                    return static_cast<int>(ui);
            }
        }

        return (-1);
    }

    void Add(const T& item, size_t nInsert = 1)
    {
        if ( nInsert == 0 )
            return;

        T* const pItem = Traits::Clone(item);

        const size_t nOldSize = size();
        if ( pItem != 
# 367 "/usr/include/wx-3.1-unofficial/wx/dynarray.h" 3 4
                     __null 
# 367 "/usr/include/wx-3.1-unofficial/wx/dynarray.h"
                          )
            base::insert(this->end(), nInsert, pItem);

        for ( size_t i = 1; i < nInsert; i++ )
            base::operator[](nOldSize + i) = Traits::Clone(item);
    }

    void Add(const T* pItem)
    {
        base::push_back(const_cast<T*>(pItem));
    }

    void push_back(const T* pItem) { Add(pItem); }
    void push_back(const T& item) { Add(item); }

    void Insert(const T& item, size_t uiIndex, size_t nInsert = 1)
    {
        if ( nInsert == 0 )
            return;

        T* const pItem = Traits::Clone(item);
        if ( pItem != 
# 388 "/usr/include/wx-3.1-unofficial/wx/dynarray.h" 3 4
                     __null 
# 388 "/usr/include/wx-3.1-unofficial/wx/dynarray.h"
                          )
            base::insert(this->begin() + uiIndex, nInsert, pItem);

        for ( size_t i = 1; i < nInsert; ++i )
            base::operator[](uiIndex + i) = Traits::Clone(item);
    }

    void Insert(const T* pItem, size_t uiIndex)
    {
        base::insert(this->begin() + uiIndex, const_cast<T*>(pItem));
    }

    void Empty() { DoEmpty(); base::clear(); }
    void Clear() { DoEmpty(); base::clear(); }

    T* Detach(size_t uiIndex)
    {
        T* const p = base::operator[](uiIndex);

        base::erase(this->begin() + uiIndex);
        return p;
    }

    void RemoveAt(size_t uiIndex, size_t nRemove = 1)
    {
        if ( uiIndex < size() ) {} else { do { if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/dynarray.h", 413, __FUNCTION__, "\"uiIndex < size()\"", "bad index in RemoveAt()"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); return; } struct wxDummyCheckStruct413;

        for ( size_t i = 0; i < nRemove; ++i )
            Traits::Free(base::operator[](uiIndex + i));

        base::erase(this->begin() + uiIndex, this->begin() + uiIndex + nRemove);
    }

    void Sort(CMPFUNC fCmp) { base::Sort(fCmp); }

private:
    void DoEmpty()
    {
        for ( size_t n = 0; n < size(); ++n )
            Traits::Free(base::operator[](n));
    }

    void DoCopy(const wxBaseObjectArray& src)
    {
        reserve(src.size());
        for ( size_t n = 0; n < src.size(); ++n )
            Add(src[n]);
    }
};
# 673 "/usr/include/wx-3.1-unofficial/wx/dynarray.h"
typedef wxBaseArray<const void *> wxBaseArrayForwxBaseArrayPtrVoid; class wxBaseArrayPtrVoid : public wxBaseArrayForwxBaseArrayPtrVoid { typedef wxBaseArrayForwxBaseArrayPtrVoid Base; public: wxBaseArrayPtrVoid() : Base() { } explicit wxBaseArrayPtrVoid(size_t n) : Base(n) { } wxBaseArrayPtrVoid(size_t n, Base::const_reference v) : Base(n, v) { } template <class InputIterator> wxBaseArrayPtrVoid(InputIterator first, InputIterator last) : Base(first, last) { } }
                                                    ;
typedef wxBaseArray<char> wxBaseArrayForwxBaseArrayChar; class wxBaseArrayChar : public wxBaseArrayForwxBaseArrayChar { typedef wxBaseArrayForwxBaseArrayChar Base; public: wxBaseArrayChar() : Base() { } explicit wxBaseArrayChar(size_t n) : Base(n) { } wxBaseArrayChar(size_t n, Base::const_reference v) : Base(n, v) { } template <class InputIterator> wxBaseArrayChar(InputIterator first, InputIterator last) : Base(first, last) { } };
typedef wxBaseArray<short> wxBaseArrayForwxBaseArrayShort; class wxBaseArrayShort : public wxBaseArrayForwxBaseArrayShort { typedef wxBaseArrayForwxBaseArrayShort Base; public: wxBaseArrayShort() : Base() { } explicit wxBaseArrayShort(size_t n) : Base(n) { } wxBaseArrayShort(size_t n, Base::const_reference v) : Base(n, v) { } template <class InputIterator> wxBaseArrayShort(InputIterator first, InputIterator last) : Base(first, last) { } };
typedef wxBaseArray<int> wxBaseArrayForwxBaseArrayInt; class wxBaseArrayInt : public wxBaseArrayForwxBaseArrayInt { typedef wxBaseArrayForwxBaseArrayInt Base; public: wxBaseArrayInt() : Base() { } explicit wxBaseArrayInt(size_t n) : Base(n) { } wxBaseArrayInt(size_t n, Base::const_reference v) : Base(n, v) { } template <class InputIterator> wxBaseArrayInt(InputIterator first, InputIterator last) : Base(first, last) { } };
typedef wxBaseArray<long> wxBaseArrayForwxBaseArrayLong; class wxBaseArrayLong : public wxBaseArrayForwxBaseArrayLong { typedef wxBaseArrayForwxBaseArrayLong Base; public: wxBaseArrayLong() : Base() { } explicit wxBaseArrayLong(size_t n) : Base(n) { } wxBaseArrayLong(size_t n, Base::const_reference v) : Base(n, v) { } template <class InputIterator> wxBaseArrayLong(InputIterator first, InputIterator last) : Base(first, last) { } };
typedef wxBaseArray<size_t> wxBaseArrayForwxBaseArraySizeT; class wxBaseArraySizeT : public wxBaseArrayForwxBaseArraySizeT { typedef wxBaseArrayForwxBaseArraySizeT Base; public: wxBaseArraySizeT() : Base() { } explicit wxBaseArraySizeT(size_t n) : Base(n) { } wxBaseArraySizeT(size_t n, Base::const_reference v) : Base(n, v) { } template <class InputIterator> wxBaseArraySizeT(InputIterator first, InputIterator last) : Base(first, last) { } };
typedef wxBaseArray<double> wxBaseArrayForwxBaseArrayDouble; class wxBaseArrayDouble : public wxBaseArrayForwxBaseArrayDouble { typedef wxBaseArrayForwxBaseArrayDouble Base; public: wxBaseArrayDouble() : Base() { } explicit wxBaseArrayDouble(size_t n) : Base(n) { } wxBaseArrayDouble(size_t n, Base::const_reference v) : Base(n, v) { } template <class InputIterator> wxBaseArrayDouble(InputIterator first, InputIterator last) : Base(first, last) { } };
# 857 "/usr/include/wx-3.1-unofficial/wx/dynarray.h"
typedef wxBaseArray<short> wxBaseArrayForwxArrayShort; class wxArrayShort : public wxBaseArrayForwxArrayShort { typedef wxBaseArrayForwxArrayShort Base; public: wxArrayShort() : Base() { } explicit wxArrayShort(size_t n) : Base(n) { } wxArrayShort(size_t n, Base::const_reference v) : Base(n, v) { } template <class InputIterator> wxArrayShort(InputIterator first, InputIterator last) : Base(first, last) { } };
typedef wxBaseArray<int> wxBaseArrayForwxArrayInt; class wxArrayInt : public wxBaseArrayForwxArrayInt { typedef wxBaseArrayForwxArrayInt Base; public: wxArrayInt() : Base() { } explicit wxArrayInt(size_t n) : Base(n) { } wxArrayInt(size_t n, Base::const_reference v) : Base(n, v) { } template <class InputIterator> wxArrayInt(InputIterator first, InputIterator last) : Base(first, last) { } };
typedef wxBaseArray<double> wxBaseArrayForwxArrayDouble; class wxArrayDouble : public wxBaseArrayForwxArrayDouble { typedef wxBaseArrayForwxArrayDouble Base; public: wxArrayDouble() : Base() { } explicit wxArrayDouble(size_t n) : Base(n) { } wxArrayDouble(size_t n, Base::const_reference v) : Base(n, v) { } template <class InputIterator> wxArrayDouble(InputIterator first, InputIterator last) : Base(first, last) { } };
typedef wxBaseArray<long> wxBaseArrayForwxArrayLong; class wxArrayLong : public wxBaseArrayForwxArrayLong { typedef wxBaseArrayForwxArrayLong Base; public: wxArrayLong() : Base() { } explicit wxArrayLong(size_t n) : Base(n) { } wxArrayLong(size_t n, Base::const_reference v) : Base(n, v) { } template <class InputIterator> wxArrayLong(InputIterator first, InputIterator last) : Base(first, last) { } };
typedef wxBaseArray<void *> wxBaseArrayForwxArrayPtrVoid; class wxArrayPtrVoid : public wxBaseArrayForwxArrayPtrVoid { typedef wxBaseArrayForwxArrayPtrVoid Base; public: wxArrayPtrVoid() : Base() { } explicit wxArrayPtrVoid(size_t n) : Base(n) { } wxArrayPtrVoid(size_t n, Base::const_reference v) : Base(n, v) { } template <class InputIterator> wxArrayPtrVoid(InputIterator first, InputIterator last) : Base(first, last) { } };
# 870 "/usr/include/wx-3.1-unofficial/wx/dynarray.h"
template <typename A1, typename A2>
inline void WX_PREPEND_ARRAY(A1& array, const A2& other)
{
    const size_t size = other.size();
    array.reserve(size);
    for ( size_t n = 0; n < size; n++ )
    {
        array.Insert(other[n], n);
    }
}


template <typename A1, typename A2>
inline void WX_APPEND_ARRAY(A1& array, const A2& other)
{
    size_t size = other.size();
    array.reserve(size);
    for ( size_t n = 0; n < size; n++ )
    {
        array.push_back(other[n]);
    }
}







template <typename A>
inline void WX_CLEAR_ARRAY(A& array)
{
    size_t size = array.size();
    for ( size_t n = 0; n < size; n++ )
    {
        delete array[n];
    }

    array.clear();
}
# 17 "/usr/include/wx-3.1-unofficial/wx/arrstr.h" 2


# 1 "/usr/include/c++/10/vector" 1 3
# 58 "/usr/include/c++/10/vector" 3
       
# 59 "/usr/include/c++/10/vector" 3







# 1 "/usr/include/c++/10/bits/stl_uninitialized.h" 1 3
# 69 "/usr/include/c++/10/bits/stl_uninitialized.h" 3

# 69 "/usr/include/c++/10/bits/stl_uninitialized.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{








  template<bool _TrivialValueTypes>
    struct __uninitialized_copy
    {
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
        _ForwardIterator __result)
        {
   _ForwardIterator __cur = __result;
   try
     {
       for (; __first != __last; ++__first, (void)++__cur)
  std::_Construct(std::__addressof(*__cur), *__first);
       return __cur;
     }
   catch(...)
     {
       std::_Destroy(__result, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_copy<true>
    {
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
        _ForwardIterator __result)
        { return std::copy(__first, __last, __result); }
    };
# 123 "/usr/include/c++/10/bits/stl_uninitialized.h" 3
  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
         _ForwardIterator __result)
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _ValueType1;
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType2;





      static_assert(is_constructible<_ValueType2, decltype(*__first)>::value,
   "result type must be constructible from value type of input range");

      typedef typename iterator_traits<_InputIterator>::reference _RefType1;
      typedef typename iterator_traits<_ForwardIterator>::reference _RefType2;


      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;


      return std::__uninitialized_copy<__is_trivial(_ValueType1)
           && __is_trivial(_ValueType2)
           && __assignable>::
 __uninit_copy(__first, __last, __result);
    }



  template<bool _TrivialValueType>
    struct __uninitialized_fill
    {
      template<typename _ForwardIterator, typename _Tp>
        static void
        __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
        const _Tp& __x)
        {
   _ForwardIterator __cur = __first;
   try
     {
       for (; __cur != __last; ++__cur)
  std::_Construct(std::__addressof(*__cur), __x);
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_fill<true>
    {
      template<typename _ForwardIterator, typename _Tp>
        static void
        __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
        const _Tp& __x)
        { std::fill(__first, __last, __x); }
    };
# 198 "/usr/include/c++/10/bits/stl_uninitialized.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline void
    uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last,
         const _Tp& __x)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;





      static_assert(is_constructible<_ValueType, const _Tp&>::value,
   "result type must be constructible from input type");



      const bool __assignable = is_copy_assignable<_ValueType>::value;


      std::__uninitialized_fill<__is_trivial(_ValueType) && __assignable>::
 __uninit_fill(__first, __last, __x);
    }



  template<bool _TrivialValueType>
    struct __uninitialized_fill_n
    {
      template<typename _ForwardIterator, typename _Size, typename _Tp>
        static _ForwardIterator
        __uninit_fill_n(_ForwardIterator __first, _Size __n,
   const _Tp& __x)
        {
   _ForwardIterator __cur = __first;
   try
     {
       for (; __n > 0; --__n, (void) ++__cur)
  std::_Construct(std::__addressof(*__cur), __x);
       return __cur;
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_fill_n<true>
    {
      template<typename _ForwardIterator, typename _Size, typename _Tp>
        static _ForwardIterator
        __uninit_fill_n(_ForwardIterator __first, _Size __n,
   const _Tp& __x)
        { return std::fill_n(__first, __n, __x); }
    };
# 270 "/usr/include/c++/10/bits/stl_uninitialized.h" 3
  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline _ForwardIterator
    uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;





      static_assert(is_constructible<_ValueType, const _Tp&>::value,
   "result type must be constructible from input type");



      const bool __assignable = is_copy_assignable<_ValueType>::value;

      return __uninitialized_fill_n<__is_trivial(_ValueType) && __assignable>::
 __uninit_fill_n(__first, __n, __x);
    }
# 300 "/usr/include/c++/10/bits/stl_uninitialized.h" 3
  template<typename _InputIterator, typename _ForwardIterator,
    typename _Allocator>
    _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __result;
      try
 {
   typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
   for (; __first != __last; ++__first, (void)++__cur)
     __traits::construct(__alloc, std::__addressof(*__cur), *__first);
   return __cur;
 }
      catch(...)
 {
   std::_Destroy(__result, __cur, __alloc);
   throw;
 }
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }

  template<typename _InputIterator, typename _ForwardIterator,
    typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a(std::make_move_iterator(__first),
      std::make_move_iterator(__last),
      __result, __alloc);
    }

  template<typename _InputIterator, typename _ForwardIterator,
    typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
           _InputIterator __last,
           _ForwardIterator __result,
           _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
 (std::__make_move_if_noexcept_iterator(__first),
  std::__make_move_if_noexcept_iterator(__last), __result, __alloc);
    }

  template<typename _ForwardIterator, typename _Tp, typename _Allocator>
    void
    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __x, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      try
 {
   typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
   for (; __cur != __last; ++__cur)
     __traits::construct(__alloc, std::__addressof(*__cur), __x);
 }
      catch(...)
 {
   std::_Destroy(__first, __cur, __alloc);
   throw;
 }
    }

  template<typename _ForwardIterator, typename _Tp, typename _Tp2>
    inline void
    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __x, allocator<_Tp2>&)
    { std::uninitialized_fill(__first, __last, __x); }

  template<typename _ForwardIterator, typename _Size, typename _Tp,
    typename _Allocator>
    _ForwardIterator
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,
        const _Tp& __x, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      try
 {
   typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
   for (; __n > 0; --__n, (void) ++__cur)
     __traits::construct(__alloc, std::__addressof(*__cur), __x);
   return __cur;
 }
      catch(...)
 {
   std::_Destroy(__first, __cur, __alloc);
   throw;
 }
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp,
    typename _Tp2>
    inline _ForwardIterator
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,
        const _Tp& __x, allocator<_Tp2>&)
    { return std::uninitialized_fill_n(__first, __n, __x); }
# 414 "/usr/include/c++/10/bits/stl_uninitialized.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _ForwardIterator, typename _Allocator>
    inline _ForwardIterator
    __uninitialized_copy_move(_InputIterator1 __first1,
         _InputIterator1 __last1,
         _InputIterator2 __first2,
         _InputIterator2 __last2,
         _ForwardIterator __result,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid = std::__uninitialized_copy_a(__first1, __last1,
          __result,
          __alloc);
      try
 {
   return std::__uninitialized_move_a(__first2, __last2, __mid, __alloc);
 }
      catch(...)
 {
   std::_Destroy(__result, __mid, __alloc);
   throw;
 }
    }





  template<typename _InputIterator1, typename _InputIterator2,
    typename _ForwardIterator, typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_copy(_InputIterator1 __first1,
         _InputIterator1 __last1,
         _InputIterator2 __first2,
         _InputIterator2 __last2,
         _ForwardIterator __result,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid = std::__uninitialized_move_a(__first1, __last1,
          __result,
          __alloc);
      try
 {
   return std::__uninitialized_copy_a(__first2, __last2, __mid, __alloc);
 }
      catch(...)
 {
   std::_Destroy(__result, __mid, __alloc);
   throw;
 }
    }




  template<typename _ForwardIterator, typename _Tp, typename _InputIterator,
    typename _Allocator>
    inline _ForwardIterator
    __uninitialized_fill_move(_ForwardIterator __result, _ForwardIterator __mid,
         const _Tp& __x, _InputIterator __first,
         _InputIterator __last, _Allocator& __alloc)
    {
      std::__uninitialized_fill_a(__result, __mid, __x, __alloc);
      try
 {
   return std::__uninitialized_move_a(__first, __last, __mid, __alloc);
 }
      catch(...)
 {
   std::_Destroy(__result, __mid, __alloc);
   throw;
 }
    }




  template<typename _InputIterator, typename _ForwardIterator, typename _Tp,
    typename _Allocator>
    inline void
    __uninitialized_move_fill(_InputIterator __first1, _InputIterator __last1,
         _ForwardIterator __first2,
         _ForwardIterator __last2, const _Tp& __x,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid2 = std::__uninitialized_move_a(__first1, __last1,
           __first2,
           __alloc);
      try
 {
   std::__uninitialized_fill_a(__mid2, __last2, __x, __alloc);
 }
      catch(...)
 {
   std::_Destroy(__first2, __mid2, __alloc);
   throw;
 }
    }
# 521 "/usr/include/c++/10/bits/stl_uninitialized.h" 3
  template<bool _TrivialValueType>
    struct __uninitialized_default_1
    {
      template<typename _ForwardIterator>
        static void
        __uninit_default(_ForwardIterator __first, _ForwardIterator __last)
        {
   _ForwardIterator __cur = __first;
   try
     {
       for (; __cur != __last; ++__cur)
  std::_Construct(std::__addressof(*__cur));
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_default_1<true>
    {
      template<typename _ForwardIterator>
        static void
        __uninit_default(_ForwardIterator __first, _ForwardIterator __last)
        {
   typedef typename iterator_traits<_ForwardIterator>::value_type
     _ValueType;

   std::fill(__first, __last, _ValueType());
 }
    };

  template<bool _TrivialValueType>
    struct __uninitialized_default_n_1
    {
      template<typename _ForwardIterator, typename _Size>
        static _ForwardIterator
        __uninit_default_n(_ForwardIterator __first, _Size __n)
        {
   _ForwardIterator __cur = __first;
   try
     {
       for (; __n > 0; --__n, (void) ++__cur)
  std::_Construct(std::__addressof(*__cur));
       return __cur;
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_default_n_1<true>
    {
      template<typename _ForwardIterator, typename _Size>
        static _ForwardIterator
        __uninit_default_n(_ForwardIterator __first, _Size __n)
        {
   typedef typename iterator_traits<_ForwardIterator>::value_type
     _ValueType;

   return std::fill_n(__first, __n, _ValueType());
 }
    };




  template<typename _ForwardIterator>
    inline void
    __uninitialized_default(_ForwardIterator __first,
       _ForwardIterator __last)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      const bool __assignable = is_copy_assignable<_ValueType>::value;

      std::__uninitialized_default_1<__is_trivial(_ValueType)
         && __assignable>::
 __uninit_default(__first, __last);
    }



  template<typename _ForwardIterator, typename _Size>
    inline _ForwardIterator
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      const bool __assignable = is_copy_assignable<_ValueType>::value;

      return __uninitialized_default_n_1<__is_trivial(_ValueType)
           && __assignable>::
 __uninit_default_n(__first, __n);
    }





  template<typename _ForwardIterator, typename _Allocator>
    void
    __uninitialized_default_a(_ForwardIterator __first,
         _ForwardIterator __last,
         _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      try
 {
   typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
   for (; __cur != __last; ++__cur)
     __traits::construct(__alloc, std::__addressof(*__cur));
 }
      catch(...)
 {
   std::_Destroy(__first, __cur, __alloc);
   throw;
 }
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    __uninitialized_default_a(_ForwardIterator __first,
         _ForwardIterator __last,
         allocator<_Tp>&)
    { std::__uninitialized_default(__first, __last); }





  template<typename _ForwardIterator, typename _Size, typename _Allocator>
    _ForwardIterator
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
    _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      try
 {
   typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
   for (; __n > 0; --__n, (void) ++__cur)
     __traits::construct(__alloc, std::__addressof(*__cur));
   return __cur;
 }
      catch(...)
 {
   std::_Destroy(__first, __cur, __alloc);
   throw;
 }
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline _ForwardIterator
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
    allocator<_Tp>&)
    { return std::__uninitialized_default_n(__first, __n); }

  template<bool _TrivialValueType>
    struct __uninitialized_default_novalue_1
    {
      template<typename _ForwardIterator>
 static void
 __uninit_default_novalue(_ForwardIterator __first,
     _ForwardIterator __last)
 {
   _ForwardIterator __cur = __first;
   try
     {
       for (; __cur != __last; ++__cur)
  std::_Construct_novalue(std::__addressof(*__cur));
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_default_novalue_1<true>
    {
      template<typename _ForwardIterator>
        static void
        __uninit_default_novalue(_ForwardIterator __first,
     _ForwardIterator __last)
 {
 }
    };

  template<bool _TrivialValueType>
    struct __uninitialized_default_novalue_n_1
    {
      template<typename _ForwardIterator, typename _Size>
 static _ForwardIterator
 __uninit_default_novalue_n(_ForwardIterator __first, _Size __n)
 {
   _ForwardIterator __cur = __first;
   try
     {
       for (; __n > 0; --__n, (void) ++__cur)
  std::_Construct_novalue(std::__addressof(*__cur));
       return __cur;
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_default_novalue_n_1<true>
    {
      template<typename _ForwardIterator, typename _Size>
 static _ForwardIterator
 __uninit_default_novalue_n(_ForwardIterator __first, _Size __n)
 { return std::next(__first, __n); }
    };




  template<typename _ForwardIterator>
    inline void
    __uninitialized_default_novalue(_ForwardIterator __first,
        _ForwardIterator __last)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      std::__uninitialized_default_novalue_1<
 is_trivially_default_constructible<_ValueType>::value>::
 __uninit_default_novalue(__first, __last);
    }



  template<typename _ForwardIterator, typename _Size>
    inline _ForwardIterator
    __uninitialized_default_novalue_n(_ForwardIterator __first, _Size __n)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      return __uninitialized_default_novalue_n_1<
 is_trivially_default_constructible<_ValueType>::value>::
 __uninit_default_novalue_n(__first, __n);
    }

  template<typename _InputIterator, typename _Size,
    typename _ForwardIterator>
    _ForwardIterator
    __uninitialized_copy_n(_InputIterator __first, _Size __n,
      _ForwardIterator __result, input_iterator_tag)
    {
      _ForwardIterator __cur = __result;
      try
 {
   for (; __n > 0; --__n, (void) ++__first, ++__cur)
     std::_Construct(std::__addressof(*__cur), *__first);
   return __cur;
 }
      catch(...)
 {
   std::_Destroy(__result, __cur);
   throw;
 }
    }

  template<typename _RandomAccessIterator, typename _Size,
    typename _ForwardIterator>
    inline _ForwardIterator
    __uninitialized_copy_n(_RandomAccessIterator __first, _Size __n,
      _ForwardIterator __result,
      random_access_iterator_tag)
    { return std::uninitialized_copy(__first, __first + __n, __result); }

  template<typename _InputIterator, typename _Size,
    typename _ForwardIterator>
    pair<_InputIterator, _ForwardIterator>
    __uninitialized_copy_n_pair(_InputIterator __first, _Size __n,
      _ForwardIterator __result, input_iterator_tag)
    {
      _ForwardIterator __cur = __result;
      try
 {
   for (; __n > 0; --__n, (void) ++__first, ++__cur)
     std::_Construct(std::__addressof(*__cur), *__first);
   return {__first, __cur};
 }
      catch(...)
 {
   std::_Destroy(__result, __cur);
   throw;
 }
    }

  template<typename _RandomAccessIterator, typename _Size,
    typename _ForwardIterator>
    inline pair<_RandomAccessIterator, _ForwardIterator>
    __uninitialized_copy_n_pair(_RandomAccessIterator __first, _Size __n,
      _ForwardIterator __result,
      random_access_iterator_tag)
    {
      auto __second_res = uninitialized_copy(__first, __first + __n, __result);
      auto __first_res = std::next(__first, __n);
      return {__first_res, __second_res};
    }
# 852 "/usr/include/c++/10/bits/stl_uninitialized.h" 3
  template<typename _InputIterator, typename _Size, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy_n(_InputIterator __first, _Size __n,
    _ForwardIterator __result)
    { return std::__uninitialized_copy_n(__first, __n, __result,
      std::__iterator_category(__first)); }


  template<typename _InputIterator, typename _Size, typename _ForwardIterator>
    inline pair<_InputIterator, _ForwardIterator>
    __uninitialized_copy_n_pair(_InputIterator __first, _Size __n,
         _ForwardIterator __result)
    {
      return
 std::__uninitialized_copy_n_pair(__first, __n, __result,
      std::__iterator_category(__first));
    }
# 966 "/usr/include/c++/10/bits/stl_uninitialized.h" 3
  template<typename _Tp, typename _Up, typename _Allocator>
    inline void
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
   _Allocator& __alloc)
    noexcept(noexcept(std::allocator_traits<_Allocator>::construct(__alloc,
    __dest, std::move(*__orig)))
      && noexcept(std::allocator_traits<_Allocator>::destroy(
       __alloc, std::__addressof(*__orig))))
    {
      typedef std::allocator_traits<_Allocator> __traits;
      __traits::construct(__alloc, __dest, std::move(*__orig));
      __traits::destroy(__alloc, std::__addressof(*__orig));
    }



  template<typename _Tp, typename = void>
    struct __is_bitwise_relocatable
    : is_trivial<_Tp> { };

  template <typename _Tp, typename _Up>
    inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>
    __relocate_a_1(_Tp* __first, _Tp* __last,
     _Tp* __result, allocator<_Up>&) noexcept
    {
      ptrdiff_t __count = __last - __first;
      if (__count > 0)
 __builtin_memmove(__result, __first, __count * sizeof(_Tp));
      return __result + __count;
    }

  template <typename _InputIterator, typename _ForwardIterator,
     typename _Allocator>
    inline _ForwardIterator
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
     _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(std::__relocate_object_a(std::addressof(*__result),
            std::addressof(*__first),
            __alloc)))
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType2;
      static_assert(std::is_same<_ValueType, _ValueType2>::value,
   "relocation is only possible for values of the same type");
      _ForwardIterator __cur = __result;
      for (; __first != __last; ++__first, (void)++__cur)
 std::__relocate_object_a(std::__addressof(*__cur),
     std::__addressof(*__first), __alloc);
      return __cur;
    }

  template <typename _InputIterator, typename _ForwardIterator,
     typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
   _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
         std::__niter_base(__last),
         std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
       std::__niter_base(__last),
       std::__niter_base(__result), __alloc);
    }







}
# 67 "/usr/include/c++/10/vector" 2 3
# 1 "/usr/include/c++/10/bits/stl_vector.h" 1 3
# 77 "/usr/include/c++/10/bits/stl_vector.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{




  template<typename _Tp, typename _Alloc>
    struct _Vector_base
    {
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 rebind<_Tp>::other _Tp_alloc_type;
      typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer
        pointer;

      struct _Vector_impl_data
      {
 pointer _M_start;
 pointer _M_finish;
 pointer _M_end_of_storage;

 _Vector_impl_data() noexcept
 : _M_start(), _M_finish(), _M_end_of_storage()
 { }


 _Vector_impl_data(_Vector_impl_data&& __x) noexcept
 : _M_start(__x._M_start), _M_finish(__x._M_finish),
   _M_end_of_storage(__x._M_end_of_storage)
 { __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }


 void
 _M_copy_data(_Vector_impl_data const& __x) noexcept
 {
   _M_start = __x._M_start;
   _M_finish = __x._M_finish;
   _M_end_of_storage = __x._M_end_of_storage;
 }

 void
 _M_swap_data(_Vector_impl_data& __x) noexcept
 {


   _Vector_impl_data __tmp;
   __tmp._M_copy_data(*this);
   _M_copy_data(__x);
   __x._M_copy_data(__tmp);
 }
      };

      struct _Vector_impl
 : public _Tp_alloc_type, public _Vector_impl_data
      {
 _Vector_impl() noexcept(is_nothrow_default_constructible<_Tp_alloc_type>::value)

 : _Tp_alloc_type()
 { }

 _Vector_impl(_Tp_alloc_type const& __a) noexcept
 : _Tp_alloc_type(__a)
 { }




 _Vector_impl(_Vector_impl&& __x) noexcept
 : _Tp_alloc_type(std::move(__x)), _Vector_impl_data(std::move(__x))
 { }

 _Vector_impl(_Tp_alloc_type&& __a) noexcept
 : _Tp_alloc_type(std::move(__a))
 { }

 _Vector_impl(_Tp_alloc_type&& __a, _Vector_impl&& __rv) noexcept
 : _Tp_alloc_type(std::move(__a)), _Vector_impl_data(std::move(__rv))
 { }
# 270 "/usr/include/c++/10/bits/stl_vector.h" 3
      };

    public:
      typedef _Alloc allocator_type;

      _Tp_alloc_type&
      _M_get_Tp_allocator() noexcept
      { return this->_M_impl; }

      const _Tp_alloc_type&
      _M_get_Tp_allocator() const noexcept
      { return this->_M_impl; }

      allocator_type
      get_allocator() const noexcept
      { return allocator_type(_M_get_Tp_allocator()); }


      _Vector_base() = default;




      _Vector_base(const allocator_type& __a) noexcept
      : _M_impl(__a) { }



      _Vector_base(size_t __n)
      : _M_impl()
      { _M_create_storage(__n); }


      _Vector_base(size_t __n, const allocator_type& __a)
      : _M_impl(__a)
      { _M_create_storage(__n); }


      _Vector_base(_Vector_base&&) = default;



      _Vector_base(_Tp_alloc_type&& __a) noexcept
      : _M_impl(std::move(__a)) { }

      _Vector_base(_Vector_base&& __x, const allocator_type& __a)
      : _M_impl(__a)
      {
 if (__x.get_allocator() == __a)
   this->_M_impl._M_swap_data(__x._M_impl);
 else
   {
     size_t __n = __x._M_impl._M_finish - __x._M_impl._M_start;
     _M_create_storage(__n);
   }
      }


      _Vector_base(const allocator_type& __a, _Vector_base&& __x)
      : _M_impl(_Tp_alloc_type(__a), std::move(__x._M_impl))
      { }


      ~_Vector_base() noexcept
      {
 _M_deallocate(_M_impl._M_start,
        _M_impl._M_end_of_storage - _M_impl._M_start);
      }

    public:
      _Vector_impl _M_impl;

      pointer
      _M_allocate(size_t __n)
      {
 typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
      }

      void
      _M_deallocate(pointer __p, size_t __n)
      {
 typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 if (__p)
   _Tr::deallocate(_M_impl, __p, __n);
      }

    protected:
      void
      _M_create_storage(size_t __n)
      {
 this->_M_impl._M_start = this->_M_allocate(__n);
 this->_M_impl._M_finish = this->_M_impl._M_start;
 this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
      }
    };
# 388 "/usr/include/c++/10/bits/stl_vector.h" 3
  template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
    class vector : protected _Vector_base<_Tp, _Alloc>
    {
# 401 "/usr/include/c++/10/bits/stl_vector.h" 3
      static_assert(is_same<typename remove_cv<_Tp>::type, _Tp>::value,
   "std::vector must have a non-const, non-volatile value_type");






      typedef _Vector_base<_Tp, _Alloc> _Base;
      typedef typename _Base::_Tp_alloc_type _Tp_alloc_type;
      typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Alloc_traits;

    public:
      typedef _Tp value_type;
      typedef typename _Base::pointer pointer;
      typedef typename _Alloc_traits::const_pointer const_pointer;
      typedef typename _Alloc_traits::reference reference;
      typedef typename _Alloc_traits::const_reference const_reference;
      typedef __gnu_cxx::__normal_iterator<pointer, vector> iterator;
      typedef __gnu_cxx::__normal_iterator<const_pointer, vector>
      const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Alloc allocator_type;

    private:

      static constexpr bool
      _S_nothrow_relocate(true_type)
      {
 return noexcept(std::__relocate_a(std::declval<pointer>(),
       std::declval<pointer>(),
       std::declval<pointer>(),
       std::declval<_Tp_alloc_type&>()));
      }

      static constexpr bool
      _S_nothrow_relocate(false_type)
      { return false; }

      static constexpr bool
      _S_use_relocate()
      {



 return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
      }

      static pointer
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
       _Tp_alloc_type& __alloc, true_type) noexcept
      {
 return std::__relocate_a(__first, __last, __result, __alloc);
      }

      static pointer
      _S_do_relocate(pointer, pointer, pointer __result,
       _Tp_alloc_type&, false_type) noexcept
      { return __result; }

      static pointer
      _S_relocate(pointer __first, pointer __last, pointer __result,
    _Tp_alloc_type& __alloc) noexcept
      {
 using __do_it = __bool_constant<_S_use_relocate()>;
 return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
      }


    protected:
      using _Base::_M_allocate;
      using _Base::_M_deallocate;
      using _Base::_M_impl;
      using _Base::_M_get_Tp_allocator;

    public:







      vector() = default;
# 496 "/usr/include/c++/10/bits/stl_vector.h" 3
      explicit
      vector(const allocator_type& __a) noexcept
      : _Base(__a) { }
# 509 "/usr/include/c++/10/bits/stl_vector.h" 3
      explicit
      vector(size_type __n, const allocator_type& __a = allocator_type())
      : _Base(_S_check_init_len(__n, __a), __a)
      { _M_default_initialize(__n); }
# 522 "/usr/include/c++/10/bits/stl_vector.h" 3
      vector(size_type __n, const value_type& __value,
      const allocator_type& __a = allocator_type())
      : _Base(_S_check_init_len(__n, __a), __a)
      { _M_fill_initialize(__n, __value); }
# 553 "/usr/include/c++/10/bits/stl_vector.h" 3
      vector(const vector& __x)
      : _Base(__x.size(),
 _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
      {
 this->_M_impl._M_finish =
   std::__uninitialized_copy_a(__x.begin(), __x.end(),
          this->_M_impl._M_start,
          _M_get_Tp_allocator());
      }
# 572 "/usr/include/c++/10/bits/stl_vector.h" 3
      vector(vector&&) noexcept = default;


      vector(const vector& __x, const allocator_type& __a)
      : _Base(__x.size(), __a)
      {
 this->_M_impl._M_finish =
   std::__uninitialized_copy_a(__x.begin(), __x.end(),
          this->_M_impl._M_start,
          _M_get_Tp_allocator());
      }

    private:
      vector(vector&& __rv, const allocator_type& __m, true_type) noexcept
      : _Base(__m, std::move(__rv))
      { }

      vector(vector&& __rv, const allocator_type& __m, false_type)
      : _Base(__m)
      {
 if (__rv.get_allocator() == __m)
   this->_M_impl._M_swap_data(__rv._M_impl);
 else if (!__rv.empty())
   {
     this->_M_create_storage(__rv.size());
     this->_M_impl._M_finish =
       std::__uninitialized_move_a(__rv.begin(), __rv.end(),
       this->_M_impl._M_start,
       _M_get_Tp_allocator());
     __rv.clear();
   }
      }

    public:

      vector(vector&& __rv, const allocator_type& __m)
      noexcept( noexcept(
 vector(std::declval<vector&&>(), std::declval<const allocator_type&>(),
        std::declval<typename _Alloc_traits::is_always_equal>())) )
      : vector(std::move(__rv), __m, typename _Alloc_traits::is_always_equal{})
      { }
# 625 "/usr/include/c++/10/bits/stl_vector.h" 3
      vector(initializer_list<value_type> __l,
      const allocator_type& __a = allocator_type())
      : _Base(__a)
      {
 _M_range_initialize(__l.begin(), __l.end(),
       random_access_iterator_tag());
      }
# 651 "/usr/include/c++/10/bits/stl_vector.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
 vector(_InputIterator __first, _InputIterator __last,
        const allocator_type& __a = allocator_type())
 : _Base(__a)
 {
   _M_range_initialize(__first, __last,
         std::__iterator_category(__first));
 }
# 678 "/usr/include/c++/10/bits/stl_vector.h" 3
      ~vector() noexcept
      {
 std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
        _M_get_Tp_allocator());
 ;
      }
# 694 "/usr/include/c++/10/bits/stl_vector.h" 3
      vector&
      operator=(const vector& __x);
# 708 "/usr/include/c++/10/bits/stl_vector.h" 3
      vector&
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
      {
 constexpr bool __move_storage =
   _Alloc_traits::_S_propagate_on_move_assign()
   || _Alloc_traits::_S_always_equal();
 _M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 return *this;
      }
# 729 "/usr/include/c++/10/bits/stl_vector.h" 3
      vector&
      operator=(initializer_list<value_type> __l)
      {
 this->_M_assign_aux(__l.begin(), __l.end(),
       random_access_iterator_tag());
 return *this;
      }
# 748 "/usr/include/c++/10/bits/stl_vector.h" 3
      void
      assign(size_type __n, const value_type& __val)
      { _M_fill_assign(__n, __val); }
# 765 "/usr/include/c++/10/bits/stl_vector.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
 void
 assign(_InputIterator __first, _InputIterator __last)
 { _M_assign_dispatch(__first, __last, __false_type()); }
# 793 "/usr/include/c++/10/bits/stl_vector.h" 3
      void
      assign(initializer_list<value_type> __l)
      {
 this->_M_assign_aux(__l.begin(), __l.end(),
       random_access_iterator_tag());
      }



      using _Base::get_allocator;







      iterator
      begin() noexcept
      { return iterator(this->_M_impl._M_start); }






      const_iterator
      begin() const noexcept
      { return const_iterator(this->_M_impl._M_start); }






      iterator
      end() noexcept
      { return iterator(this->_M_impl._M_finish); }






      const_iterator
      end() const noexcept
      { return const_iterator(this->_M_impl._M_finish); }






      reverse_iterator
      rbegin() noexcept
      { return reverse_iterator(end()); }






      const_reverse_iterator
      rbegin() const noexcept
      { return const_reverse_iterator(end()); }






      reverse_iterator
      rend() noexcept
      { return reverse_iterator(begin()); }






      const_reverse_iterator
      rend() const noexcept
      { return const_reverse_iterator(begin()); }







      const_iterator
      cbegin() const noexcept
      { return const_iterator(this->_M_impl._M_start); }






      const_iterator
      cend() const noexcept
      { return const_iterator(this->_M_impl._M_finish); }






      const_reverse_iterator
      crbegin() const noexcept
      { return const_reverse_iterator(end()); }






      const_reverse_iterator
      crend() const noexcept
      { return const_reverse_iterator(begin()); }




      size_type
      size() const noexcept
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }


      size_type
      max_size() const noexcept
      { return _S_max_size(_M_get_Tp_allocator()); }
# 936 "/usr/include/c++/10/bits/stl_vector.h" 3
      void
      resize(size_type __new_size)
      {
 if (__new_size > size())
   _M_default_append(__new_size - size());
 else if (__new_size < size())
   _M_erase_at_end(this->_M_impl._M_start + __new_size);
      }
# 956 "/usr/include/c++/10/bits/stl_vector.h" 3
      void
      resize(size_type __new_size, const value_type& __x)
      {
 if (__new_size > size())
   _M_fill_insert(end(), __new_size - size(), __x);
 else if (__new_size < size())
   _M_erase_at_end(this->_M_impl._M_start + __new_size);
      }
# 988 "/usr/include/c++/10/bits/stl_vector.h" 3
      void
      shrink_to_fit()
      { _M_shrink_to_fit(); }






      size_type
      capacity() const noexcept
      { return size_type(this->_M_impl._M_end_of_storage
    - this->_M_impl._M_start); }





      bool
      empty() const noexcept
      { return begin() == end(); }
# 1027 "/usr/include/c++/10/bits/stl_vector.h" 3
      void
      reserve(size_type __n);
# 1042 "/usr/include/c++/10/bits/stl_vector.h" 3
      reference
      operator[](size_type __n) noexcept
      {
 ;
 return *(this->_M_impl._M_start + __n);
      }
# 1060 "/usr/include/c++/10/bits/stl_vector.h" 3
      const_reference
      operator[](size_type __n) const noexcept
      {
 ;
 return *(this->_M_impl._M_start + __n);
      }

    protected:

      void
      _M_range_check(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range_fmt(("vector::_M_range_check: __n " "(which is %zu) >= this->size() " "(which is %zu)")

                            ,
       __n, this->size());
      }

    public:
# 1091 "/usr/include/c++/10/bits/stl_vector.h" 3
      reference
      at(size_type __n)
      {
 _M_range_check(__n);
 return (*this)[__n];
      }
# 1109 "/usr/include/c++/10/bits/stl_vector.h" 3
      const_reference
      at(size_type __n) const
      {
 _M_range_check(__n);
 return (*this)[__n];
      }





      reference
      front() noexcept
      {
 ;
 return *begin();
      }





      const_reference
      front() const noexcept
      {
 ;
 return *begin();
      }





      reference
      back() noexcept
      {
 ;
 return *(end() - 1);
      }





      const_reference
      back() const noexcept
      {
 ;
 return *(end() - 1);
      }
# 1167 "/usr/include/c++/10/bits/stl_vector.h" 3
      _Tp*
      data() noexcept
      { return _M_data_ptr(this->_M_impl._M_start); }

      const _Tp*
      data() const noexcept
      { return _M_data_ptr(this->_M_impl._M_start); }
# 1186 "/usr/include/c++/10/bits/stl_vector.h" 3
      void
      push_back(const value_type& __x)
      {
 if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   {
     ;
     _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
         __x);
     ++this->_M_impl._M_finish;
     ;
   }
 else
   _M_realloc_insert(end(), __x);
      }


      void
      push_back(value_type&& __x)
      { emplace_back(std::move(__x)); }

      template<typename... _Args>



 void

 emplace_back(_Args&&... __args);
# 1224 "/usr/include/c++/10/bits/stl_vector.h" 3
      void
      pop_back() noexcept
      {
 ;
 --this->_M_impl._M_finish;
 _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 ;
      }
# 1246 "/usr/include/c++/10/bits/stl_vector.h" 3
      template<typename... _Args>
 iterator
 emplace(const_iterator __position, _Args&&... __args)
 { return _M_emplace_aux(__position, std::forward<_Args>(__args)...); }
# 1262 "/usr/include/c++/10/bits/stl_vector.h" 3
      iterator
      insert(const_iterator __position, const value_type& __x);
# 1292 "/usr/include/c++/10/bits/stl_vector.h" 3
      iterator
      insert(const_iterator __position, value_type&& __x)
      { return _M_insert_rval(__position, std::move(__x)); }
# 1309 "/usr/include/c++/10/bits/stl_vector.h" 3
      iterator
      insert(const_iterator __position, initializer_list<value_type> __l)
      {
 auto __offset = __position - cbegin();
 _M_range_insert(begin() + __offset, __l.begin(), __l.end(),
   std::random_access_iterator_tag());
 return begin() + __offset;
      }
# 1334 "/usr/include/c++/10/bits/stl_vector.h" 3
      iterator
      insert(const_iterator __position, size_type __n, const value_type& __x)
      {
 difference_type __offset = __position - cbegin();
 _M_fill_insert(begin() + __offset, __n, __x);
 return begin() + __offset;
      }
# 1376 "/usr/include/c++/10/bits/stl_vector.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
 iterator
 insert(const_iterator __position, _InputIterator __first,
        _InputIterator __last)
 {
   difference_type __offset = __position - cbegin();
   _M_insert_dispatch(begin() + __offset,
        __first, __last, __false_type());
   return begin() + __offset;
 }
# 1428 "/usr/include/c++/10/bits/stl_vector.h" 3
      iterator

      erase(const_iterator __position)
      { return _M_erase(begin() + (__position - cbegin())); }
# 1455 "/usr/include/c++/10/bits/stl_vector.h" 3
      iterator

      erase(const_iterator __first, const_iterator __last)
      {
 const auto __beg = begin();
 const auto __cbeg = cbegin();
 return _M_erase(__beg + (__first - __cbeg), __beg + (__last - __cbeg));
      }
# 1479 "/usr/include/c++/10/bits/stl_vector.h" 3
      void
      swap(vector& __x) noexcept
      {


                                                          ;

 this->_M_impl._M_swap_data(__x._M_impl);
 _Alloc_traits::_S_on_swap(_M_get_Tp_allocator(),
      __x._M_get_Tp_allocator());
      }







      void
      clear() noexcept
      { _M_erase_at_end(this->_M_impl._M_start); }

    protected:




      template<typename _ForwardIterator>
 pointer
 _M_allocate_and_copy(size_type __n,
        _ForwardIterator __first, _ForwardIterator __last)
 {
   pointer __result = this->_M_allocate(__n);
   try
     {
       std::__uninitialized_copy_a(__first, __last, __result,
       _M_get_Tp_allocator());
       return __result;
     }
   catch(...)
     {
       _M_deallocate(__result, __n);
       throw;
     }
 }
# 1556 "/usr/include/c++/10/bits/stl_vector.h" 3
      template<typename _InputIterator>
 void
 _M_range_initialize(_InputIterator __first, _InputIterator __last,
       std::input_iterator_tag)
 {
   try {
     for (; __first != __last; ++__first)

       emplace_back(*__first);



   } catch(...) {
     clear();
     throw;
   }
 }


      template<typename _ForwardIterator>
 void
 _M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
       std::forward_iterator_tag)
 {
   const size_type __n = std::distance(__first, __last);
   this->_M_impl._M_start
     = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   this->_M_impl._M_finish =
     std::__uninitialized_copy_a(__first, __last,
     this->_M_impl._M_start,
     _M_get_Tp_allocator());
 }



      void
      _M_fill_initialize(size_type __n, const value_type& __value)
      {
 this->_M_impl._M_finish =
   std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
     _M_get_Tp_allocator());
      }



      void
      _M_default_initialize(size_type __n)
      {
 this->_M_impl._M_finish =
   std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
        _M_get_Tp_allocator());
      }
# 1618 "/usr/include/c++/10/bits/stl_vector.h" 3
      template<typename _Integer>
 void
 _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
 { _M_fill_assign(__n, __val); }


      template<typename _InputIterator>
 void
 _M_assign_dispatch(_InputIterator __first, _InputIterator __last,
      __false_type)
 { _M_assign_aux(__first, __last, std::__iterator_category(__first)); }


      template<typename _InputIterator>
 void
 _M_assign_aux(_InputIterator __first, _InputIterator __last,
        std::input_iterator_tag);


      template<typename _ForwardIterator>
 void
 _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
        std::forward_iterator_tag);



      void
      _M_fill_assign(size_type __n, const value_type& __val);







      template<typename _Integer>
 void
 _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val,
      __true_type)
 { _M_fill_insert(__pos, __n, __val); }


      template<typename _InputIterator>
 void
 _M_insert_dispatch(iterator __pos, _InputIterator __first,
      _InputIterator __last, __false_type)
 {
   _M_range_insert(__pos, __first, __last,
     std::__iterator_category(__first));
 }


      template<typename _InputIterator>
 void
 _M_range_insert(iterator __pos, _InputIterator __first,
   _InputIterator __last, std::input_iterator_tag);


      template<typename _ForwardIterator>
 void
 _M_range_insert(iterator __pos, _ForwardIterator __first,
   _ForwardIterator __last, std::forward_iterator_tag);



      void
      _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);



      void
      _M_default_append(size_type __n);

      bool
      _M_shrink_to_fit();
# 1705 "/usr/include/c++/10/bits/stl_vector.h" 3
      struct _Temporary_value
      {
 template<typename... _Args>
   explicit
   _Temporary_value(vector* __vec, _Args&&... __args) : _M_this(__vec)
   {
     _Alloc_traits::construct(_M_this->_M_impl, _M_ptr(),
         std::forward<_Args>(__args)...);
   }

 ~_Temporary_value()
 { _Alloc_traits::destroy(_M_this->_M_impl, _M_ptr()); }

 value_type&
 _M_val() { return *_M_ptr(); }

      private:
 _Tp*
 _M_ptr() { return reinterpret_cast<_Tp*>(&__buf); }

 vector* _M_this;
 typename aligned_storage<sizeof(_Tp), alignof(_Tp)>::type __buf;
      };



      template<typename _Arg>
 void
 _M_insert_aux(iterator __position, _Arg&& __arg);

      template<typename... _Args>
 void
 _M_realloc_insert(iterator __position, _Args&&... __args);


      iterator
      _M_insert_rval(const_iterator __position, value_type&& __v);


      template<typename... _Args>
 iterator
 _M_emplace_aux(const_iterator __position, _Args&&... __args);


      iterator
      _M_emplace_aux(const_iterator __position, value_type&& __v)
      { return _M_insert_rval(__position, std::move(__v)); }



      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
 if (max_size() - size() < __n)
   __throw_length_error((__s));

 const size_type __len = size() + (std::max)(size(), __n);
 return (__len < size() || __len > max_size()) ? max_size() : __len;
      }


      static size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
      {
 if (__n > _S_max_size(_Tp_alloc_type(__a)))
   __throw_length_error(
       ("cannot create std::vector larger than max_size()"));
 return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) noexcept
      {



 const size_t __diffmax
   = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
 const size_t __allocmax = _Alloc_traits::max_size(__a);
 return (std::min)(__diffmax, __allocmax);
      }





      void
      _M_erase_at_end(pointer __pos) noexcept
      {
 if (size_type __n = this->_M_impl._M_finish - __pos)
   {
     std::_Destroy(__pos, this->_M_impl._M_finish,
     _M_get_Tp_allocator());
     this->_M_impl._M_finish = __pos;
     ;
   }
      }

      iterator
      _M_erase(iterator __position);

      iterator
      _M_erase(iterator __first, iterator __last);


    private:



      void
      _M_move_assign(vector&& __x, true_type) noexcept
      {
 vector __tmp(get_allocator());
 this->_M_impl._M_swap_data(__x._M_impl);
 __tmp._M_impl._M_swap_data(__x._M_impl);
 std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
      }



      void
      _M_move_assign(vector&& __x, false_type)
      {
 if (__x._M_get_Tp_allocator() == this->_M_get_Tp_allocator())
   _M_move_assign(std::move(__x), true_type());
 else
   {


     this->_M_assign_aux(std::make_move_iterator(__x.begin()),
           std::make_move_iterator(__x.end()),
    std::random_access_iterator_tag());
     __x.clear();
   }
      }


      template<typename _Up>
 _Up*
 _M_data_ptr(_Up* __ptr) const noexcept
 { return __ptr; }


      template<typename _Ptr>
 typename std::pointer_traits<_Ptr>::element_type*
 _M_data_ptr(_Ptr __ptr) const
 { return empty() ? nullptr : std::__to_address(__ptr); }
# 1868 "/usr/include/c++/10/bits/stl_vector.h" 3
    };
# 1890 "/usr/include/c++/10/bits/stl_vector.h" 3
  template<typename _Tp, typename _Alloc>
    inline bool
    operator==(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return (__x.size() == __y.size()
       && std::equal(__x.begin(), __x.end(), __y.begin())); }
# 1928 "/usr/include/c++/10/bits/stl_vector.h" 3
  template<typename _Tp, typename _Alloc>
    inline bool
    operator<(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return std::lexicographical_compare(__x.begin(), __x.end(),
       __y.begin(), __y.end()); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator!=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator>(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator<=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator>=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__x < __y); }



  template<typename _Tp, typename _Alloc>
    inline void
    swap(vector<_Tp, _Alloc>& __x, vector<_Tp, _Alloc>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }


# 1982 "/usr/include/c++/10/bits/stl_vector.h" 3

}
# 68 "/usr/include/c++/10/vector" 2 3
# 1 "/usr/include/c++/10/bits/stl_bvector.h" 1 3
# 64 "/usr/include/c++/10/bits/stl_bvector.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  typedef unsigned long _Bit_type;
  enum { _S_word_bit = int(8 * sizeof(_Bit_type)) };

  struct _Bit_reference
  {
    _Bit_type * _M_p;
    _Bit_type _M_mask;

    _Bit_reference(_Bit_type * __x, _Bit_type __y)
    : _M_p(__x), _M_mask(__y) { }

    _Bit_reference() noexcept : _M_p(0), _M_mask(0) { }


    _Bit_reference(const _Bit_reference&) = default;


    operator bool() const noexcept
    { return !!(*_M_p & _M_mask); }

    _Bit_reference&
    operator=(bool __x) noexcept
    {
      if (__x)
 *_M_p |= _M_mask;
      else
 *_M_p &= ~_M_mask;
      return *this;
    }

    _Bit_reference&
    operator=(const _Bit_reference& __x) noexcept
    { return *this = bool(__x); }

    bool
    operator==(const _Bit_reference& __x) const
    { return bool(*this) == bool(__x); }

    bool
    operator<(const _Bit_reference& __x) const
    { return !bool(*this) && bool(__x); }

    void
    flip() noexcept
    { *_M_p ^= _M_mask; }
  };


  inline void
  swap(_Bit_reference __x, _Bit_reference __y) noexcept
  {
    bool __tmp = __x;
    __x = __y;
    __y = __tmp;
  }

  inline void
  swap(_Bit_reference __x, bool& __y) noexcept
  {
    bool __tmp = __x;
    __x = __y;
    __y = __tmp;
  }

  inline void
  swap(bool& __x, _Bit_reference __y) noexcept
  {
    bool __tmp = __x;
    __x = __y;
    __y = __tmp;
  }


  struct _Bit_iterator_base
  : public std::iterator<std::random_access_iterator_tag, bool>
  {
    _Bit_type * _M_p;
    unsigned int _M_offset;

    _Bit_iterator_base(_Bit_type * __x, unsigned int __y)
    : _M_p(__x), _M_offset(__y) { }

    void
    _M_bump_up()
    {
      if (_M_offset++ == int(_S_word_bit) - 1)
 {
   _M_offset = 0;
   ++_M_p;
 }
    }

    void
    _M_bump_down()
    {
      if (_M_offset-- == 0)
 {
   _M_offset = int(_S_word_bit) - 1;
   --_M_p;
 }
    }

    void
    _M_incr(ptrdiff_t __i)
    {
      difference_type __n = __i + _M_offset;
      _M_p += __n / int(_S_word_bit);
      __n = __n % int(_S_word_bit);
      if (__n < 0)
 {
   __n += int(_S_word_bit);
   --_M_p;
 }
      _M_offset = static_cast<unsigned int>(__n);
    }

    friend bool
    operator==(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
    { return __x._M_p == __y._M_p && __x._M_offset == __y._M_offset; }
# 199 "/usr/include/c++/10/bits/stl_bvector.h" 3
    friend bool
    operator<(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
    {
      return __x._M_p < __y._M_p
     || (__x._M_p == __y._M_p && __x._M_offset < __y._M_offset);
    }

    friend bool
    operator!=(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
    { return !(__x == __y); }

    friend bool
    operator>(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
    { return __y < __x; }

    friend bool
    operator<=(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
    { return !(__y < __x); }

    friend bool
    operator>=(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
    { return !(__x < __y); }


    friend ptrdiff_t
    operator-(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
    {
      return (int(_S_word_bit) * (__x._M_p - __y._M_p)
       + __x._M_offset - __y._M_offset);
    }
  };

  struct _Bit_iterator : public _Bit_iterator_base
  {
    typedef _Bit_reference reference;



    typedef _Bit_reference* pointer;

    typedef _Bit_iterator iterator;

    _Bit_iterator() : _Bit_iterator_base(0, 0) { }

    _Bit_iterator(_Bit_type * __x, unsigned int __y)
    : _Bit_iterator_base(__x, __y) { }

    iterator
    _M_const_cast() const
    { return *this; }

    reference
    operator*() const
    { return reference(_M_p, 1UL << _M_offset); }

    iterator&
    operator++()
    {
      _M_bump_up();
      return *this;
    }

    iterator
    operator++(int)
    {
      iterator __tmp = *this;
      _M_bump_up();
      return __tmp;
    }

    iterator&
    operator--()
    {
      _M_bump_down();
      return *this;
    }

    iterator
    operator--(int)
    {
      iterator __tmp = *this;
      _M_bump_down();
      return __tmp;
    }

    iterator&
    operator+=(difference_type __i)
    {
      _M_incr(__i);
      return *this;
    }

    iterator&
    operator-=(difference_type __i)
    {
      *this += -__i;
      return *this;
    }

    reference
    operator[](difference_type __i) const
    { return *(*this + __i); }

    friend iterator
    operator+(const iterator& __x, difference_type __n)
    {
      iterator __tmp = __x;
      __tmp += __n;
      return __tmp;
    }

    friend iterator
    operator+(difference_type __n, const iterator& __x)
    { return __x + __n; }

    friend iterator
    operator-(const iterator& __x, difference_type __n)
    {
      iterator __tmp = __x;
      __tmp -= __n;
      return __tmp;
    }
  };

  struct _Bit_const_iterator : public _Bit_iterator_base
  {
    typedef bool reference;
    typedef bool const_reference;



    typedef const bool* pointer;

    typedef _Bit_const_iterator const_iterator;

    _Bit_const_iterator() : _Bit_iterator_base(0, 0) { }

    _Bit_const_iterator(_Bit_type * __x, unsigned int __y)
    : _Bit_iterator_base(__x, __y) { }

    _Bit_const_iterator(const _Bit_iterator& __x)
    : _Bit_iterator_base(__x._M_p, __x._M_offset) { }

    _Bit_iterator
    _M_const_cast() const
    { return _Bit_iterator(_M_p, _M_offset); }

    const_reference
    operator*() const
    { return _Bit_reference(_M_p, 1UL << _M_offset); }

    const_iterator&
    operator++()
    {
      _M_bump_up();
      return *this;
    }

    const_iterator
    operator++(int)
    {
      const_iterator __tmp = *this;
      _M_bump_up();
      return __tmp;
    }

    const_iterator&
    operator--()
    {
      _M_bump_down();
      return *this;
    }

    const_iterator
    operator--(int)
    {
      const_iterator __tmp = *this;
      _M_bump_down();
      return __tmp;
    }

    const_iterator&
    operator+=(difference_type __i)
    {
      _M_incr(__i);
      return *this;
    }

    const_iterator&
    operator-=(difference_type __i)
    {
      *this += -__i;
      return *this;
    }

    const_reference
    operator[](difference_type __i) const
    { return *(*this + __i); }

    friend const_iterator
    operator+(const const_iterator& __x, difference_type __n)
    {
      const_iterator __tmp = __x;
      __tmp += __n;
      return __tmp;
    }

    friend const_iterator
    operator-(const const_iterator& __x, difference_type __n)
    {
      const_iterator __tmp = __x;
      __tmp -= __n;
      return __tmp;
    }

    friend const_iterator
    operator+(difference_type __n, const const_iterator& __x)
    { return __x + __n; }
  };

  inline void
  __fill_bvector(_Bit_type * __v,
   unsigned int __first, unsigned int __last, bool __x)
  {
    const _Bit_type __fmask = ~0ul << __first;
    const _Bit_type __lmask = ~0ul >> (_S_word_bit - __last);
    const _Bit_type __mask = __fmask & __lmask;

    if (__x)
      *__v |= __mask;
    else
      *__v &= ~__mask;
  }

  inline void
  fill(_Bit_iterator __first, _Bit_iterator __last, const bool& __x)
  {
    if (__first._M_p != __last._M_p)
      {
 _Bit_type* __first_p = __first._M_p;
 if (__first._M_offset != 0)
   __fill_bvector(__first_p++, __first._M_offset, _S_word_bit, __x);

 __builtin_memset(__first_p, __x ? ~0 : 0,
    (__last._M_p - __first_p) * sizeof(_Bit_type));

 if (__last._M_offset != 0)
   __fill_bvector(__last._M_p, 0, __last._M_offset, __x);
      }
    else if (__first._M_offset != __last._M_offset)
      __fill_bvector(__first._M_p, __first._M_offset, __last._M_offset, __x);
  }

  template<typename _Alloc>
    struct _Bvector_base
    {
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
        rebind<_Bit_type>::other _Bit_alloc_type;
      typedef typename __gnu_cxx::__alloc_traits<_Bit_alloc_type>
 _Bit_alloc_traits;
      typedef typename _Bit_alloc_traits::pointer _Bit_pointer;

      struct _Bvector_impl_data
      {
 _Bit_iterator _M_start;
 _Bit_iterator _M_finish;
 _Bit_pointer _M_end_of_storage;

 _Bvector_impl_data() noexcept
 : _M_start(), _M_finish(), _M_end_of_storage()
 { }


 _Bvector_impl_data(_Bvector_impl_data&& __x) noexcept
 : _M_start(__x._M_start), _M_finish(__x._M_finish)
 , _M_end_of_storage(__x._M_end_of_storage)
 { __x._M_reset(); }

 void
 _M_move_data(_Bvector_impl_data&& __x) noexcept
 {
   this->_M_start = __x._M_start;
   this->_M_finish = __x._M_finish;
   this->_M_end_of_storage = __x._M_end_of_storage;
   __x._M_reset();
 }


 void
 _M_reset() noexcept
 {
   _M_start = _M_finish = _Bit_iterator();
   _M_end_of_storage = _Bit_pointer();
 }
      };

      struct _Bvector_impl
 : public _Bit_alloc_type, public _Bvector_impl_data
 {
 public:
   _Bvector_impl() noexcept(is_nothrow_default_constructible<_Bit_alloc_type>::value)

   : _Bit_alloc_type()
   { }

   _Bvector_impl(const _Bit_alloc_type& __a) noexcept
   : _Bit_alloc_type(__a)
   { }


 _Bvector_impl(_Bvector_impl&&) = default;


 _Bit_type*
 _M_end_addr() const noexcept
 {
   if (this->_M_end_of_storage)
     return std::__addressof(this->_M_end_of_storage[-1]) + 1;
   return 0;
 }
      };

    public:
      typedef _Alloc allocator_type;

      _Bit_alloc_type&
      _M_get_Bit_allocator() noexcept
      { return this->_M_impl; }

      const _Bit_alloc_type&
      _M_get_Bit_allocator() const noexcept
      { return this->_M_impl; }

      allocator_type
      get_allocator() const noexcept
      { return allocator_type(_M_get_Bit_allocator()); }


      _Bvector_base() = default;




      _Bvector_base(const allocator_type& __a)
      : _M_impl(__a) { }


      _Bvector_base(_Bvector_base&&) = default;


      ~_Bvector_base()
      { this->_M_deallocate(); }

    protected:
      _Bvector_impl _M_impl;

      _Bit_pointer
      _M_allocate(size_t __n)
      { return _Bit_alloc_traits::allocate(_M_impl, _S_nword(__n)); }

      void
      _M_deallocate()
      {
 if (_M_impl._M_start._M_p)
   {
     const size_t __n = _M_impl._M_end_addr() - _M_impl._M_start._M_p;
     _Bit_alloc_traits::deallocate(_M_impl,
       _M_impl._M_end_of_storage - __n,
       __n);
     _M_impl._M_reset();
   }
      }


      void
      _M_move_data(_Bvector_base&& __x) noexcept
      { _M_impl._M_move_data(std::move(__x._M_impl)); }


      static size_t
      _S_nword(size_t __n)
      { return (__n + int(_S_word_bit) - 1) / int(_S_word_bit); }
    };



}




namespace std __attribute__ ((__visibility__ ("default")))
{


# 614 "/usr/include/c++/10/bits/stl_bvector.h" 3
  template<typename _Alloc>
    class vector<bool, _Alloc> : protected _Bvector_base<_Alloc>
    {
      typedef _Bvector_base<_Alloc> _Base;
      typedef typename _Base::_Bit_pointer _Bit_pointer;
      typedef typename _Base::_Bit_alloc_traits _Bit_alloc_traits;


      friend struct std::hash<vector>;


    public:
      typedef bool value_type;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Bit_reference reference;
      typedef bool const_reference;
      typedef _Bit_reference* pointer;
      typedef const bool* const_pointer;
      typedef _Bit_iterator iterator;
      typedef _Bit_const_iterator const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef _Alloc allocator_type;

      allocator_type
      get_allocator() const
      { return _Base::get_allocator(); }

    protected:
      using _Base::_M_allocate;
      using _Base::_M_deallocate;
      using _Base::_S_nword;
      using _Base::_M_get_Bit_allocator;

    public:

      vector() = default;




      explicit
      vector(const allocator_type& __a)
      : _Base(__a) { }


      explicit
      vector(size_type __n, const allocator_type& __a = allocator_type())
      : vector(__n, false, __a)
      { }

      vector(size_type __n, const bool& __value,
      const allocator_type& __a = allocator_type())





      : _Base(__a)
      {
 _M_initialize(__n);
 _M_initialize_value(__value);
      }

      vector(const vector& __x)
      : _Base(_Bit_alloc_traits::_S_select_on_copy(__x._M_get_Bit_allocator()))
      {
 _M_initialize(__x.size());
 _M_copy_aligned(__x.begin(), __x.end(), this->_M_impl._M_start);
      }


      vector(vector&&) = default;

      vector(vector&& __x, const allocator_type& __a)
      noexcept(_Bit_alloc_traits::_S_always_equal())
      : _Base(__a)
      {
 if (__x.get_allocator() == __a)
   this->_M_move_data(std::move(__x));
 else
   {
     _M_initialize(__x.size());
     _M_copy_aligned(__x.begin(), __x.end(), begin());
     __x.clear();
   }
      }

      vector(const vector& __x, const allocator_type& __a)
      : _Base(__a)
      {
 _M_initialize(__x.size());
 _M_copy_aligned(__x.begin(), __x.end(), this->_M_impl._M_start);
      }

      vector(initializer_list<bool> __l,
      const allocator_type& __a = allocator_type())
      : _Base(__a)
      {
 _M_initialize_range(__l.begin(), __l.end(),
       random_access_iterator_tag());
      }



      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
 vector(_InputIterator __first, _InputIterator __last,
        const allocator_type& __a = allocator_type())
 : _Base(__a)
 { _M_initialize_dispatch(__first, __last, __false_type()); }
# 737 "/usr/include/c++/10/bits/stl_bvector.h" 3
      ~vector() noexcept { }

      vector&
      operator=(const vector& __x)
      {
 if (&__x == this)
   return *this;

 if (_Bit_alloc_traits::_S_propagate_on_copy_assign())
   {
     if (this->_M_get_Bit_allocator() != __x._M_get_Bit_allocator())
       {
  this->_M_deallocate();
  std::__alloc_on_copy(_M_get_Bit_allocator(),
         __x._M_get_Bit_allocator());
  _M_initialize(__x.size());
       }
     else
       std::__alloc_on_copy(_M_get_Bit_allocator(),
       __x._M_get_Bit_allocator());
   }

 if (__x.size() > capacity())
   {
     this->_M_deallocate();
     _M_initialize(__x.size());
   }
 this->_M_impl._M_finish = _M_copy_aligned(__x.begin(), __x.end(),
        begin());
 return *this;
      }


      vector&
      operator=(vector&& __x) noexcept(_Bit_alloc_traits::_S_nothrow_move())
      {
 if (_Bit_alloc_traits::_S_propagate_on_move_assign()
     || this->_M_get_Bit_allocator() == __x._M_get_Bit_allocator())
   {
     this->_M_deallocate();
     this->_M_move_data(std::move(__x));
     std::__alloc_on_move(_M_get_Bit_allocator(),
     __x._M_get_Bit_allocator());
   }
 else
   {
     if (__x.size() > capacity())
       {
  this->_M_deallocate();
  _M_initialize(__x.size());
       }
     this->_M_impl._M_finish = _M_copy_aligned(__x.begin(), __x.end(),
            begin());
     __x.clear();
   }
 return *this;
      }

      vector&
      operator=(initializer_list<bool> __l)
      {
 this->assign (__l.begin(), __l.end());
 return *this;
      }






      void
      assign(size_type __n, const bool& __x)
      { _M_fill_assign(__n, __x); }


      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
 void
 assign(_InputIterator __first, _InputIterator __last)
 { _M_assign_aux(__first, __last, std::__iterator_category(__first)); }
# 828 "/usr/include/c++/10/bits/stl_bvector.h" 3
      void
      assign(initializer_list<bool> __l)
      { _M_assign_aux(__l.begin(), __l.end(), random_access_iterator_tag()); }


      iterator
      begin() noexcept
      { return iterator(this->_M_impl._M_start._M_p, 0); }

      const_iterator
      begin() const noexcept
      { return const_iterator(this->_M_impl._M_start._M_p, 0); }

      iterator
      end() noexcept
      { return this->_M_impl._M_finish; }

      const_iterator
      end() const noexcept
      { return this->_M_impl._M_finish; }

      reverse_iterator
      rbegin() noexcept
      { return reverse_iterator(end()); }

      const_reverse_iterator
      rbegin() const noexcept
      { return const_reverse_iterator(end()); }

      reverse_iterator
      rend() noexcept
      { return reverse_iterator(begin()); }

      const_reverse_iterator
      rend() const noexcept
      { return const_reverse_iterator(begin()); }


      const_iterator
      cbegin() const noexcept
      { return const_iterator(this->_M_impl._M_start._M_p, 0); }

      const_iterator
      cend() const noexcept
      { return this->_M_impl._M_finish; }

      const_reverse_iterator
      crbegin() const noexcept
      { return const_reverse_iterator(end()); }

      const_reverse_iterator
      crend() const noexcept
      { return const_reverse_iterator(begin()); }


      size_type
      size() const noexcept
      { return size_type(end() - begin()); }

      size_type
      max_size() const noexcept
      {
 const size_type __isize =
   __gnu_cxx::__numeric_traits<difference_type>::__max
   - int(_S_word_bit) + 1;
 const size_type __asize
   = _Bit_alloc_traits::max_size(_M_get_Bit_allocator());
 return (__asize <= __isize / int(_S_word_bit)
  ? __asize * int(_S_word_bit) : __isize);
      }

      size_type
      capacity() const noexcept
      { return size_type(const_iterator(this->_M_impl._M_end_addr(), 0)
    - begin()); }

      bool
      empty() const noexcept
      { return begin() == end(); }

      reference
      operator[](size_type __n)
      {
 return *iterator(this->_M_impl._M_start._M_p
    + __n / int(_S_word_bit), __n % int(_S_word_bit));
      }

      const_reference
      operator[](size_type __n) const
      {
 return *const_iterator(this->_M_impl._M_start._M_p
        + __n / int(_S_word_bit), __n % int(_S_word_bit));
      }

    protected:
      void
      _M_range_check(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range_fmt(("vector<bool>::_M_range_check: __n " "(which is %zu) >= this->size() " "(which is %zu)")

                            ,
       __n, this->size());
      }

    public:
      reference
      at(size_type __n)
      { _M_range_check(__n); return (*this)[__n]; }

      const_reference
      at(size_type __n) const
      { _M_range_check(__n); return (*this)[__n]; }

      void
      reserve(size_type __n)
      {
 if (__n > max_size())
   __throw_length_error(("vector::reserve"));
 if (capacity() < __n)
   _M_reallocate(__n);
      }

      reference
      front()
      { return *begin(); }

      const_reference
      front() const
      { return *begin(); }

      reference
      back()
      { return *(end() - 1); }

      const_reference
      back() const
      { return *(end() - 1); }






      void
      data() noexcept { }

      void
      push_back(bool __x)
      {
 if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_addr())
   *this->_M_impl._M_finish++ = __x;
 else
   _M_insert_aux(end(), __x);
      }

      void
      swap(vector& __x) noexcept
      {
 std::swap(this->_M_impl._M_start, __x._M_impl._M_start);
 std::swap(this->_M_impl._M_finish, __x._M_impl._M_finish);
 std::swap(this->_M_impl._M_end_of_storage,
    __x._M_impl._M_end_of_storage);
 _Bit_alloc_traits::_S_on_swap(_M_get_Bit_allocator(),
          __x._M_get_Bit_allocator());
      }


      static void
      swap(reference __x, reference __y) noexcept
      {
 bool __tmp = __x;
 __x = __y;
 __y = __tmp;
      }

      iterator

      insert(const_iterator __position, const bool& __x = bool())



      {
 const difference_type __n = __position - begin();
 if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_addr()
     && __position == end())
   *this->_M_impl._M_finish++ = __x;
 else
   _M_insert_aux(__position._M_const_cast(), __x);
 return begin() + __n;
      }


      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
 iterator
 insert(const_iterator __position,
        _InputIterator __first, _InputIterator __last)
 {
   difference_type __offset = __position - cbegin();
   _M_insert_dispatch(__position._M_const_cast(),
        __first, __last, __false_type());
   return begin() + __offset;
 }
# 1044 "/usr/include/c++/10/bits/stl_bvector.h" 3
      iterator
      insert(const_iterator __position, size_type __n, const bool& __x)
      {
 difference_type __offset = __position - cbegin();
 _M_fill_insert(__position._M_const_cast(), __n, __x);
 return begin() + __offset;
      }







      iterator
      insert(const_iterator __p, initializer_list<bool> __l)
      { return this->insert(__p, __l.begin(), __l.end()); }


      void
      pop_back()
      { --this->_M_impl._M_finish; }

      iterator

      erase(const_iterator __position)



      { return _M_erase(__position._M_const_cast()); }

      iterator

      erase(const_iterator __first, const_iterator __last)



      { return _M_erase(__first._M_const_cast(), __last._M_const_cast()); }

      void
      resize(size_type __new_size, bool __x = bool())
      {
 if (__new_size < size())
   _M_erase_at_end(begin() + difference_type(__new_size));
 else
   insert(end(), __new_size - size(), __x);
      }


      void
      shrink_to_fit()
      { _M_shrink_to_fit(); }


      void
      flip() noexcept
      {
 _Bit_type * const __end = this->_M_impl._M_end_addr();
 for (_Bit_type * __p = this->_M_impl._M_start._M_p; __p != __end; ++__p)
   *__p = ~*__p;
      }

      void
      clear() noexcept
      { _M_erase_at_end(begin()); }


      template<typename... _Args>



 void

 emplace_back(_Args&&... __args)
 {
   push_back(bool(__args...));



 }

      template<typename... _Args>
 iterator
 emplace(const_iterator __pos, _Args&&... __args)
 { return insert(__pos, bool(__args...)); }


    protected:

      iterator
      _M_copy_aligned(const_iterator __first, const_iterator __last,
        iterator __result)
      {
 _Bit_type* __q = std::copy(__first._M_p, __last._M_p, __result._M_p);
 return std::copy(const_iterator(__last._M_p, 0), __last,
    iterator(__q, 0));
      }

      void
      _M_initialize(size_type __n)
      {
 if (__n)
   {
     _Bit_pointer __q = this->_M_allocate(__n);
     this->_M_impl._M_end_of_storage = __q + _S_nword(__n);
     this->_M_impl._M_start = iterator(std::__addressof(*__q), 0);
   }
 else
   {
     this->_M_impl._M_end_of_storage = _Bit_pointer();
     this->_M_impl._M_start = iterator(0, 0);
   }
 this->_M_impl._M_finish = this->_M_impl._M_start + difference_type(__n);

      }

      void
      _M_initialize_value(bool __x)
      {
 if (_Bit_type* __p = this->_M_impl._M_start._M_p)
   __builtin_memset(__p, __x ? ~0 : 0,
      (this->_M_impl._M_end_addr() - __p)
      * sizeof(_Bit_type));
      }

      void
      _M_reallocate(size_type __n);


      bool
      _M_shrink_to_fit();






      template<typename _Integer>
 void
 _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)
 {
   _M_initialize(static_cast<size_type>(__n));
   _M_initialize_value(__x);
 }

      template<typename _InputIterator>
 void
 _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
          __false_type)
 { _M_initialize_range(__first, __last,
         std::__iterator_category(__first)); }

      template<typename _InputIterator>
 void
 _M_initialize_range(_InputIterator __first, _InputIterator __last,
       std::input_iterator_tag)
 {
   for (; __first != __last; ++__first)
     push_back(*__first);
 }

      template<typename _ForwardIterator>
 void
 _M_initialize_range(_ForwardIterator __first, _ForwardIterator __last,
       std::forward_iterator_tag)
 {
   const size_type __n = std::distance(__first, __last);
   _M_initialize(__n);
   std::copy(__first, __last, this->_M_impl._M_start);
 }
# 1230 "/usr/include/c++/10/bits/stl_bvector.h" 3
      void
      _M_fill_assign(size_t __n, bool __x)
      {
 if (__n > size())
   {
     _M_initialize_value(__x);
     insert(end(), __n - size(), __x);
   }
 else
   {
     _M_erase_at_end(begin() + __n);
     _M_initialize_value(__x);
   }
      }

      template<typename _InputIterator>
 void
 _M_assign_aux(_InputIterator __first, _InputIterator __last,
        std::input_iterator_tag)
 {
   iterator __cur = begin();
   for (; __first != __last && __cur != end(); ++__cur, (void)++__first)
     *__cur = *__first;
   if (__first == __last)
     _M_erase_at_end(__cur);
   else
     insert(end(), __first, __last);
 }

      template<typename _ForwardIterator>
 void
 _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
        std::forward_iterator_tag)
 {
   const size_type __len = std::distance(__first, __last);
   if (__len < size())
     _M_erase_at_end(std::copy(__first, __last, begin()));
   else
     {
       _ForwardIterator __mid = __first;
       std::advance(__mid, size());
       std::copy(__first, __mid, begin());
       insert(end(), __mid, __last);
     }
 }





      template<typename _Integer>
 void
 _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __x,
      __true_type)
 { _M_fill_insert(__pos, __n, __x); }

      template<typename _InputIterator>
 void
 _M_insert_dispatch(iterator __pos,
      _InputIterator __first, _InputIterator __last,
      __false_type)
 { _M_insert_range(__pos, __first, __last,
     std::__iterator_category(__first)); }

      void
      _M_fill_insert(iterator __position, size_type __n, bool __x);

      template<typename _InputIterator>
 void
 _M_insert_range(iterator __pos, _InputIterator __first,
   _InputIterator __last, std::input_iterator_tag)
 {
   for (; __first != __last; ++__first)
     {
       __pos = insert(__pos, *__first);
       ++__pos;
     }
 }

      template<typename _ForwardIterator>
 void
 _M_insert_range(iterator __position, _ForwardIterator __first,
   _ForwardIterator __last, std::forward_iterator_tag);

      void
      _M_insert_aux(iterator __position, bool __x);

      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
 if (max_size() - size() < __n)
   __throw_length_error((__s));

 const size_type __len = size() + std::max(size(), __n);
 return (__len < size() || __len > max_size()) ? max_size() : __len;
      }

      void
      _M_erase_at_end(iterator __pos)
      { this->_M_impl._M_finish = __pos; }

      iterator
      _M_erase(iterator __pos);

      iterator
      _M_erase(iterator __first, iterator __last);
  };



}



namespace std __attribute__ ((__visibility__ ("default")))
{




  template<typename _Alloc>
    struct hash<std::vector<bool, _Alloc>>
    : public __hash_base<size_t, std::vector<bool, _Alloc>>
    {
      size_t
      operator()(const std::vector<bool, _Alloc>&) const noexcept;
    };


}
# 69 "/usr/include/c++/10/vector" 2 3



# 1 "/usr/include/c++/10/bits/vector.tcc" 1 3
# 59 "/usr/include/c++/10/bits/vector.tcc" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    reserve(size_type __n)
    {
      if (__n > this->max_size())
 __throw_length_error(("vector::reserve"));
      if (this->capacity() < __n)
 {
   const size_type __old_size = size();
   pointer __tmp;

   if (_S_use_relocate())
     {
       __tmp = this->_M_allocate(__n);
       _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
     __tmp, _M_get_Tp_allocator());
     }
   else

     {
       __tmp = _M_allocate_and_copy(__n,
  std::__make_move_if_noexcept_iterator(this->_M_impl._M_start),
  std::__make_move_if_noexcept_iterator(this->_M_impl._M_finish));
       std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
       _M_get_Tp_allocator());
     }
   ;
   _M_deallocate(this->_M_impl._M_start,
   this->_M_impl._M_end_of_storage
   - this->_M_impl._M_start);
   this->_M_impl._M_start = __tmp;
   this->_M_impl._M_finish = __tmp + __old_size;
   this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 }
    }


  template<typename _Tp, typename _Alloc>
    template<typename... _Args>



      void

      vector<_Tp, _Alloc>::
      emplace_back(_Args&&... __args)
      {
 if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   {
     ;
     _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
         std::forward<_Args>(__args)...);
     ++this->_M_impl._M_finish;
     ;
   }
 else
   _M_realloc_insert(end(), std::forward<_Args>(__args)...);



      }


  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::

    insert(const_iterator __position, const value_type& __x)



    {
      const size_type __n = __position - begin();
      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 if (__position == end())
   {
     ;
     _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
         __x);
     ++this->_M_impl._M_finish;
     ;
   }
 else
   {

     const auto __pos = begin() + (__position - cbegin());


     _Temporary_value __x_copy(this, __x);
     _M_insert_aux(__pos, std::move(__x_copy._M_val()));



   }
      else

 _M_realloc_insert(begin() + (__position - cbegin()), __x);




      return iterator(this->_M_impl._M_start + __n);
    }

  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    _M_erase(iterator __position)
    {
      if (__position + 1 != end())
 std::move(__position + 1, end(), __position);
      --this->_M_impl._M_finish;
      _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
      ;
      return __position;
    }

  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    _M_erase(iterator __first, iterator __last)
    {
      if (__first != __last)
 {
   if (__last != end())
     std::move(__last, end(), __first);
   _M_erase_at_end(__first.base() + (end() - __last));
 }
      return __first;
    }

  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
 {
   ;

   if (_Alloc_traits::_S_propagate_on_copy_assign())
     {
       if (!_Alloc_traits::_S_always_equal()
           && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
         {

    this->clear();
    _M_deallocate(this->_M_impl._M_start,
    this->_M_impl._M_end_of_storage
    - this->_M_impl._M_start);
    this->_M_impl._M_start = nullptr;
    this->_M_impl._M_finish = nullptr;
    this->_M_impl._M_end_of_storage = nullptr;
  }
       std::__alloc_on_copy(_M_get_Tp_allocator(),
       __x._M_get_Tp_allocator());
     }

   const size_type __xlen = __x.size();
   if (__xlen > capacity())
     {
       pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
         __x.end());
       std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
       _M_get_Tp_allocator());
       _M_deallocate(this->_M_impl._M_start,
       this->_M_impl._M_end_of_storage
       - this->_M_impl._M_start);
       this->_M_impl._M_start = __tmp;
       this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
     }
   else if (size() >= __xlen)
     {
       std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
       end(), _M_get_Tp_allocator());
     }
   else
     {
       std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
   this->_M_impl._M_start);
       std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
       __x._M_impl._M_finish,
       this->_M_impl._M_finish,
       _M_get_Tp_allocator());
     }
   this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 }
      return *this;
    }

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_fill_assign(size_t __n, const value_type& __val)
    {
      if (__n > capacity())
 {
   vector __tmp(__n, __val, _M_get_Tp_allocator());
   __tmp._M_impl._M_swap_data(this->_M_impl);
 }
      else if (__n > size())
 {
   std::fill(begin(), end(), __val);
   const size_type __add = __n - size();
   ;
   this->_M_impl._M_finish =
     std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
       __add, __val, _M_get_Tp_allocator());
   ;
 }
      else
        _M_erase_at_end(std::fill_n(this->_M_impl._M_start, __n, __val));
    }

  template<typename _Tp, typename _Alloc>
    template<typename _InputIterator>
      void
      vector<_Tp, _Alloc>::
      _M_assign_aux(_InputIterator __first, _InputIterator __last,
      std::input_iterator_tag)
      {
 pointer __cur(this->_M_impl._M_start);
 for (; __first != __last && __cur != this->_M_impl._M_finish;
      ++__cur, (void)++__first)
   *__cur = *__first;
 if (__first == __last)
   _M_erase_at_end(__cur);
 else
   _M_range_insert(end(), __first, __last,
     std::__iterator_category(__first));
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
      std::forward_iterator_tag)
      {
 const size_type __len = std::distance(__first, __last);

 if (__len > capacity())
   {
     _S_check_init_len(__len, _M_get_Tp_allocator());
     pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
     std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
     _M_get_Tp_allocator());
     ;
     _M_deallocate(this->_M_impl._M_start,
     this->_M_impl._M_end_of_storage
     - this->_M_impl._M_start);
     this->_M_impl._M_start = __tmp;
     this->_M_impl._M_finish = this->_M_impl._M_start + __len;
     this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   }
 else if (size() >= __len)
   _M_erase_at_end(std::copy(__first, __last, this->_M_impl._M_start));
 else
   {
     _ForwardIterator __mid = __first;
     std::advance(__mid, size());
     std::copy(__first, __mid, this->_M_impl._M_start);
     const size_type __attribute__((__unused__)) __n = __len - size();
     ;
     this->_M_impl._M_finish =
       std::__uninitialized_copy_a(__mid, __last,
       this->_M_impl._M_finish,
       _M_get_Tp_allocator());
     ;
   }
      }


  template<typename _Tp, typename _Alloc>
    auto
    vector<_Tp, _Alloc>::
    _M_insert_rval(const_iterator __position, value_type&& __v) -> iterator
    {
      const auto __n = __position - cbegin();
      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 if (__position == cend())
   {
     ;
     _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
         std::move(__v));
     ++this->_M_impl._M_finish;
     ;
   }
 else
   _M_insert_aux(begin() + __n, std::move(__v));
      else
 _M_realloc_insert(begin() + __n, std::move(__v));

      return iterator(this->_M_impl._M_start + __n);
    }

  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      auto
      vector<_Tp, _Alloc>::
      _M_emplace_aux(const_iterator __position, _Args&&... __args)
      -> iterator
      {
 const auto __n = __position - cbegin();
 if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   if (__position == cend())
     {
       ;
       _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
           std::forward<_Args>(__args)...);
       ++this->_M_impl._M_finish;
       ;
     }
   else
     {



       _Temporary_value __tmp(this, std::forward<_Args>(__args)...);
       _M_insert_aux(begin() + __n, std::move(__tmp._M_val()));
     }
 else
   _M_realloc_insert(begin() + __n, std::forward<_Args>(__args)...);

 return iterator(this->_M_impl._M_start + __n);
      }

  template<typename _Tp, typename _Alloc>
    template<typename _Arg>
      void
      vector<_Tp, _Alloc>::
      _M_insert_aux(iterator __position, _Arg&& __arg)






    {
      ;
      _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
          std::move(*(this->_M_impl._M_finish - 1)));
      ++this->_M_impl._M_finish;
      ;



      std::move_backward(__position.base(), this->_M_impl._M_finish - 2, this->_M_impl._M_finish - 1)

                                     ;



      *__position = std::forward<_Arg>(__arg);

    }


  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
      _M_realloc_insert(iterator __position, _Args&&... __args)






    {
      const size_type __len =
 _M_check_len(size_type(1), "vector::_M_realloc_insert");
      pointer __old_start = this->_M_impl._M_start;
      pointer __old_finish = this->_M_impl._M_finish;
      const size_type __elems_before = __position - begin();
      pointer __new_start(this->_M_allocate(__len));
      pointer __new_finish(__new_start);
      try
 {





   _Alloc_traits::construct(this->_M_impl,
       __new_start + __elems_before,

       std::forward<_Args>(__args)...);



   __new_finish = pointer();


   if (_S_use_relocate())
     {
       __new_finish = _S_relocate(__old_start, __position.base(),
      __new_start, _M_get_Tp_allocator());

       ++__new_finish;

       __new_finish = _S_relocate(__position.base(), __old_finish,
      __new_finish, _M_get_Tp_allocator());
     }
   else

     {
       __new_finish
  = std::__uninitialized_move_if_noexcept_a
  (__old_start, __position.base(),
   __new_start, _M_get_Tp_allocator());

       ++__new_finish;

       __new_finish
  = std::__uninitialized_move_if_noexcept_a
  (__position.base(), __old_finish,
   __new_finish, _M_get_Tp_allocator());
     }
 }
      catch(...)
 {
   if (!__new_finish)
     _Alloc_traits::destroy(this->_M_impl,
       __new_start + __elems_before);
   else
     std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
   _M_deallocate(__new_start, __len);
   throw;
 }

      if (!_S_use_relocate())

 std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      ;
      _M_deallocate(__old_start,
      this->_M_impl._M_end_of_storage - __old_start);
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
    }

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_fill_insert(iterator __position, size_type __n, const value_type& __x)
    {
      if (__n != 0)
 {
   if (size_type(this->_M_impl._M_end_of_storage
   - this->_M_impl._M_finish) >= __n)
     {



       _Temporary_value __tmp(this, __x);
       value_type& __x_copy = __tmp._M_val();

       const size_type __elems_after = end() - __position;
       pointer __old_finish(this->_M_impl._M_finish);
       if (__elems_after > __n)
  {
    ;
    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
           this->_M_impl._M_finish,
           this->_M_impl._M_finish,
           _M_get_Tp_allocator());
    this->_M_impl._M_finish += __n;
    ;
    std::move_backward(__position.base(), __old_finish - __n, __old_finish)
                                        ;
    std::fill(__position.base(), __position.base() + __n,
       __x_copy);
  }
       else
  {
    ;
    this->_M_impl._M_finish =
      std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
        __n - __elems_after,
        __x_copy,
        _M_get_Tp_allocator());
    ;
    std::__uninitialized_move_a(__position.base(), __old_finish,
           this->_M_impl._M_finish,
           _M_get_Tp_allocator());
    this->_M_impl._M_finish += __elems_after;
    ;
    std::fill(__position.base(), __old_finish, __x_copy);
  }
     }
   else
     {
       const size_type __len =
  _M_check_len(__n, "vector::_M_fill_insert");
       const size_type __elems_before = __position - begin();
       pointer __new_start(this->_M_allocate(__len));
       pointer __new_finish(__new_start);
       try
  {

    std::__uninitialized_fill_n_a(__new_start + __elems_before,
      __n, __x,
      _M_get_Tp_allocator());
    __new_finish = pointer();

    __new_finish
      = std::__uninitialized_move_if_noexcept_a
      (this->_M_impl._M_start, __position.base(),
       __new_start, _M_get_Tp_allocator());

    __new_finish += __n;

    __new_finish
      = std::__uninitialized_move_if_noexcept_a
      (__position.base(), this->_M_impl._M_finish,
       __new_finish, _M_get_Tp_allocator());
  }
       catch(...)
  {
    if (!__new_finish)
      std::_Destroy(__new_start + __elems_before,
      __new_start + __elems_before + __n,
      _M_get_Tp_allocator());
    else
      std::_Destroy(__new_start, __new_finish,
      _M_get_Tp_allocator());
    _M_deallocate(__new_start, __len);
    throw;
  }
       std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
       _M_get_Tp_allocator());
       ;
       _M_deallocate(this->_M_impl._M_start,
       this->_M_impl._M_end_of_storage
       - this->_M_impl._M_start);
       this->_M_impl._M_start = __new_start;
       this->_M_impl._M_finish = __new_finish;
       this->_M_impl._M_end_of_storage = __new_start + __len;
     }
 }
    }


  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_default_append(size_type __n)
    {
      if (__n != 0)
 {
   const size_type __size = size();
   size_type __navail = size_type(this->_M_impl._M_end_of_storage
      - this->_M_impl._M_finish);

   if (__size > max_size() || __navail > max_size() - __size)
     __builtin_unreachable();

   if (__navail >= __n)
     {
       ;
       this->_M_impl._M_finish =
  std::__uninitialized_default_n_a(this->_M_impl._M_finish,
       __n, _M_get_Tp_allocator());
       ;
     }
   else
     {
       const size_type __len =
  _M_check_len(__n, "vector::_M_default_append");
       pointer __new_start(this->_M_allocate(__len));
       if (_S_use_relocate())
  {
    try
      {
        std::__uninitialized_default_n_a(__new_start + __size,
         __n, _M_get_Tp_allocator());
      }
    catch(...)
      {
        _M_deallocate(__new_start, __len);
        throw;
      }
    _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
         __new_start, _M_get_Tp_allocator());
  }
       else
  {
    pointer __destroy_from = pointer();
    try
      {
        std::__uninitialized_default_n_a(__new_start + __size,
         __n, _M_get_Tp_allocator());
        __destroy_from = __new_start + __size;
        std::__uninitialized_move_if_noexcept_a(
         this->_M_impl._M_start, this->_M_impl._M_finish,
         __new_start, _M_get_Tp_allocator());
      }
    catch(...)
      {
        if (__destroy_from)
   std::_Destroy(__destroy_from, __destroy_from + __n,
          _M_get_Tp_allocator());
        _M_deallocate(__new_start, __len);
        throw;
      }
    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    _M_get_Tp_allocator());
  }
       ;
       _M_deallocate(this->_M_impl._M_start,
       this->_M_impl._M_end_of_storage
       - this->_M_impl._M_start);
       this->_M_impl._M_start = __new_start;
       this->_M_impl._M_finish = __new_start + __size + __n;
       this->_M_impl._M_end_of_storage = __new_start + __len;
     }
 }
    }

  template<typename _Tp, typename _Alloc>
    bool
    vector<_Tp, _Alloc>::
    _M_shrink_to_fit()
    {
      if (capacity() == size())
 return false;
      ;
      return std::__shrink_to_fit_aux<vector>::_S_do_it(*this);
    }


  template<typename _Tp, typename _Alloc>
    template<typename _InputIterator>
      void
      vector<_Tp, _Alloc>::
      _M_range_insert(iterator __pos, _InputIterator __first,
        _InputIterator __last, std::input_iterator_tag)
      {
 if (__pos == end())
   {
     for (; __first != __last; ++__first)
       insert(end(), *__first);
   }
 else if (__first != __last)
   {
     vector __tmp(__first, __last, _M_get_Tp_allocator());
     insert(__pos,
     std::make_move_iterator(__tmp.begin()),
     std::make_move_iterator(__tmp.end()));
   }
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
      _M_range_insert(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag)
      {
 if (__first != __last)
   {
     const size_type __n = std::distance(__first, __last);
     if (size_type(this->_M_impl._M_end_of_storage
     - this->_M_impl._M_finish) >= __n)
       {
  const size_type __elems_after = end() - __position;
  pointer __old_finish(this->_M_impl._M_finish);
  if (__elems_after > __n)
    {
      ;
      std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
      this->_M_impl._M_finish,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __n;
      ;
      std::move_backward(__position.base(), __old_finish - __n, __old_finish)
                                          ;
      std::copy(__first, __last, __position);
    }
  else
    {
      _ForwardIterator __mid = __first;
      std::advance(__mid, __elems_after);
      ;
      std::__uninitialized_copy_a(__mid, __last,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __n - __elems_after;
      ;
      std::__uninitialized_move_a(__position.base(),
      __old_finish,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __elems_after;
      ;
      std::copy(__first, __mid, __position);
    }
       }
     else
       {
  const size_type __len =
    _M_check_len(__n, "vector::_M_range_insert");
  pointer __new_start(this->_M_allocate(__len));
  pointer __new_finish(__new_start);
  try
    {
      __new_finish
        = std::__uninitialized_move_if_noexcept_a
        (this->_M_impl._M_start, __position.base(),
         __new_start, _M_get_Tp_allocator());
      __new_finish
        = std::__uninitialized_copy_a(__first, __last,
          __new_finish,
          _M_get_Tp_allocator());
      __new_finish
        = std::__uninitialized_move_if_noexcept_a
        (__position.base(), this->_M_impl._M_finish,
         __new_finish, _M_get_Tp_allocator());
    }
  catch(...)
    {
      std::_Destroy(__new_start, __new_finish,
      _M_get_Tp_allocator());
      _M_deallocate(__new_start, __len);
      throw;
    }
  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
         _M_get_Tp_allocator());
  ;
  _M_deallocate(this->_M_impl._M_start,
         this->_M_impl._M_end_of_storage
         - this->_M_impl._M_start);
  this->_M_impl._M_start = __new_start;
  this->_M_impl._M_finish = __new_finish;
  this->_M_impl._M_end_of_storage = __new_start + __len;
       }
   }
      }



  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
    _M_reallocate(size_type __n)
    {
      _Bit_pointer __q = this->_M_allocate(__n);
      iterator __start(std::__addressof(*__q), 0);
      iterator __finish(_M_copy_aligned(begin(), end(), __start));
      this->_M_deallocate();
      this->_M_impl._M_start = __start;
      this->_M_impl._M_finish = __finish;
      this->_M_impl._M_end_of_storage = __q + _S_nword(__n);
    }

  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
    _M_fill_insert(iterator __position, size_type __n, bool __x)
    {
      if (__n == 0)
 return;
      if (capacity() - size() >= __n)
 {
   std::copy_backward(__position, end(),
        this->_M_impl._M_finish + difference_type(__n));
   std::fill(__position, __position + difference_type(__n), __x);
   this->_M_impl._M_finish += difference_type(__n);
 }
      else
 {
   const size_type __len =
     _M_check_len(__n, "vector<bool>::_M_fill_insert");
   _Bit_pointer __q = this->_M_allocate(__len);
   iterator __start(std::__addressof(*__q), 0);
   iterator __i = _M_copy_aligned(begin(), __position, __start);
   std::fill(__i, __i + difference_type(__n), __x);
   iterator __finish = std::copy(__position, end(),
     __i + difference_type(__n));
   this->_M_deallocate();
   this->_M_impl._M_end_of_storage = __q + _S_nword(__len);
   this->_M_impl._M_start = __start;
   this->_M_impl._M_finish = __finish;
 }
    }

  template<typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<bool, _Alloc>::
      _M_insert_range(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag)
      {
 if (__first != __last)
   {
     size_type __n = std::distance(__first, __last);
     if (capacity() - size() >= __n)
       {
  std::copy_backward(__position, end(),
       this->_M_impl._M_finish
       + difference_type(__n));
  std::copy(__first, __last, __position);
  this->_M_impl._M_finish += difference_type(__n);
       }
     else
       {
  const size_type __len =
    _M_check_len(__n, "vector<bool>::_M_insert_range");
  _Bit_pointer __q = this->_M_allocate(__len);
  iterator __start(std::__addressof(*__q), 0);
  iterator __i = _M_copy_aligned(begin(), __position, __start);
  __i = std::copy(__first, __last, __i);
  iterator __finish = std::copy(__position, end(), __i);
  this->_M_deallocate();
  this->_M_impl._M_end_of_storage = __q + _S_nword(__len);
  this->_M_impl._M_start = __start;
  this->_M_impl._M_finish = __finish;
       }
   }
      }

  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
    _M_insert_aux(iterator __position, bool __x)
    {
      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_addr())
 {
   std::copy_backward(__position, this->_M_impl._M_finish,
        this->_M_impl._M_finish + 1);
   *__position = __x;
   ++this->_M_impl._M_finish;
 }
      else
 {
   const size_type __len =
     _M_check_len(size_type(1), "vector<bool>::_M_insert_aux");
   _Bit_pointer __q = this->_M_allocate(__len);
   iterator __start(std::__addressof(*__q), 0);
   iterator __i = _M_copy_aligned(begin(), __position, __start);
   *__i++ = __x;
   iterator __finish = std::copy(__position, end(), __i);
   this->_M_deallocate();
   this->_M_impl._M_end_of_storage = __q + _S_nword(__len);
   this->_M_impl._M_start = __start;
   this->_M_impl._M_finish = __finish;
 }
    }

  template<typename _Alloc>
    typename vector<bool, _Alloc>::iterator
    vector<bool, _Alloc>::
    _M_erase(iterator __position)
    {
      if (__position + 1 != end())
        std::copy(__position + 1, end(), __position);
      --this->_M_impl._M_finish;
      return __position;
    }

  template<typename _Alloc>
    typename vector<bool, _Alloc>::iterator
    vector<bool, _Alloc>::
    _M_erase(iterator __first, iterator __last)
    {
      if (__first != __last)
 _M_erase_at_end(std::copy(__last, end(), __first));
      return __first;
    }


  template<typename _Alloc>
    bool
    vector<bool, _Alloc>::
    _M_shrink_to_fit()
    {
      if (capacity() - size() < int(_S_word_bit))
 return false;
      try
 {
   _M_reallocate(size());
   return true;
 }
      catch(...)
 { return false; }
    }




}



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Alloc>
    size_t
    hash<std::vector<bool, _Alloc>>::
    operator()(const std::vector<bool, _Alloc>& __b) const noexcept
    {
      size_t __hash = 0;
      using std::_S_word_bit;
      using std::_Bit_type;

      const size_t __words = __b.size() / _S_word_bit;
      if (__words)
 {
   const size_t __clength = __words * sizeof(_Bit_type);
   __hash = std::_Hash_impl::hash(__b._M_impl._M_start._M_p, __clength);
 }

      const size_t __extrabits = __b.size() % _S_word_bit;
      if (__extrabits)
 {
   _Bit_type __hiword = *__b._M_impl._M_finish._M_p;
   __hiword &= ~((~static_cast<_Bit_type>(0)) << __extrabits);

   const size_t __clength
     = (__extrabits + 8 - 1) / 8;
   if (__words)
     __hash = std::_Hash_impl::hash(&__hiword, __clength, __hash);
   else
     __hash = std::_Hash_impl::hash(&__hiword, __clength);
 }

      return __hash;
    }


}
# 73 "/usr/include/c++/10/vector" 2 3
# 20 "/usr/include/wx-3.1-unofficial/wx/arrstr.h" 2






# 25 "/usr/include/wx-3.1-unofficial/wx/arrstr.h"
inline int wxStringSortAscending(const wxString& s1, const wxString& s2)
{
    return s1.Cmp(s2);
}

inline int wxStringSortDescending(const wxString& s1, const wxString& s2)
{
    return wxStringSortAscending(s2, s1);
}




inline int
wxDictionaryStringSortAscending(const wxString& s1, const wxString& s2)
{
    const int cmp = s1.CmpNoCase(s2);
    return cmp ? cmp : s1.Cmp(s2);
}


inline int
wxDictionaryStringSortDescending(const wxString& s1, const wxString& s2)
{
    return wxDictionaryStringSortAscending(s2, s1);
}

__attribute__ ((visibility("default")))
int wxCmpNatural(const wxString& s1, const wxString& s2);

__attribute__ ((visibility("default")))
int wxCmpNaturalGeneric(const wxString& s1, const wxString& s2);

inline int wxNaturalStringSortAscending(const wxString& s1, const wxString& s2)
{
    return wxCmpNatural(s1, s2);
}

inline int wxNaturalStringSortDescending(const wxString& s1, const wxString& s2)
{
    return wxCmpNatural(s2, s1);
}
# 153 "/usr/include/wx-3.1-unofficial/wx/arrstr.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/beforestd.h" 1
# 154 "/usr/include/wx-3.1-unofficial/wx/arrstr.h" 2

# 1 "/usr/include/wx-3.1-unofficial/wx/afterstd.h" 1
# 156 "/usr/include/wx-3.1-unofficial/wx/arrstr.h" 2

class __attribute__ ((visibility("default"))) wxArrayString
{
public:

  typedef int ( *CompareFunction)(const wxString& first,
                                 const wxString& second);


  typedef int ( *CompareFunction2)(wxString* first,
                                  wxString* second);



  wxArrayString() { Init(false); }
# 179 "/usr/include/wx-3.1-unofficial/wx/arrstr.h"
  explicit wxArrayString(int autoSort) { Init(autoSort != 0); }

  wxArrayString(size_t sz, const char** a);
  wxArrayString(size_t sz, const wchar_t** a);

  wxArrayString(size_t sz, const wxString* a);

  wxArrayString(const wxArrayString& array);

  wxArrayString& operator=(const wxArrayString& src);

 ~wxArrayString();



  void Empty();

  void Clear();

  void Alloc(size_t nCount);

  void Shrink();



  size_t GetCount() const { return m_nCount; }

  bool IsEmpty() const { return m_nCount == 0; }

  size_t Count() const { return m_nCount; }



  wxString& Item(size_t nIndex)
    {
        do { if ( nIndex < m_nCount ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/arrstr.h", 214, __FUNCTION__, "nIndex < m_nCount", L"wxArrayString: index out of bounds"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 )
                                                                 ;

        return m_pItems[nIndex];
    }
  const wxString& Item(size_t nIndex) const { return const_cast<wxArrayString*>(this)->Item(nIndex); }


  wxString& operator[](size_t nIndex) { return Item(nIndex); }
  const wxString& operator[](size_t nIndex) const { return Item(nIndex); }

  wxString& Last()
  {
      do { if ( !IsEmpty() ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/arrstr.h", 227, __FUNCTION__, "!IsEmpty()", L"wxArrayString: index out of bounds"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 )
                                                               ;
      return Item(GetCount() - 1);
  }
  const wxString& Last() const { return const_cast<wxArrayString*>(this)->Last(); }







  int Index (const wxString& str, bool bCase = true, bool bFromEnd = false) const;


  size_t Add(const wxString& str, size_t nInsert = 1);

  void Insert(const wxString& str, size_t uiIndex, size_t nInsert = 1);

  void SetCount(size_t count);

  void Remove(const wxString& sz);

  void RemoveAt(size_t nIndex, size_t nRemove = 1);




  void Sort(bool reverseOrder = false);

  void Sort(CompareFunction compareFunction);
  void Sort(CompareFunction2 compareFunction);



  bool operator==(const wxArrayString& a) const;

  bool operator!=(const wxArrayString& a) const { return !(*this == a); }


  typedef wxString value_type;
  typedef value_type* pointer;
  typedef const value_type* const_pointer;
  typedef value_type* iterator;
  typedef const value_type* const_iterator;
  typedef value_type& reference;
  typedef const value_type& const_reference;
  typedef int difference_type;
  typedef size_t size_type;


  class reverse_iterator
  {
    typedef wxString value_type;
    typedef value_type* pointer;
    typedef value_type& reference;
    typedef reverse_iterator itor;
    friend itor operator+(int o, const itor& it);
    friend itor operator+(const itor& it, int o);
    friend itor operator-(const itor& it, int o);
    friend difference_type operator -(const itor& i1, const itor& i2);
  public:
    pointer m_ptr;
    reverse_iterator() : m_ptr(
# 290 "/usr/include/wx-3.1-unofficial/wx/arrstr.h" 3 4
                              __null
# 290 "/usr/include/wx-3.1-unofficial/wx/arrstr.h"
                                  ) { }
    explicit reverse_iterator(pointer ptr) : m_ptr(ptr) { }
    reverse_iterator(const itor& it) : m_ptr(it.m_ptr) { }
    reference operator*() const { return *m_ptr; }
    pointer operator->() const { return m_ptr; }
    itor& operator++() { --m_ptr; return *this; }
    const itor operator++(int)
      { const reverse_iterator tmp = *this; --m_ptr; return tmp; }
    itor& operator--() { ++m_ptr; return *this; }
    const itor operator--(int) { const itor tmp = *this; ++m_ptr; return tmp; }
    bool operator ==(const itor& it) const { return m_ptr == it.m_ptr; }
    bool operator !=(const itor& it) const { return m_ptr != it.m_ptr; }
  };

  class const_reverse_iterator
  {
    typedef wxString value_type;
    typedef const value_type* pointer;
    typedef const value_type& reference;
    typedef const_reverse_iterator itor;
    friend itor operator+(int o, const itor& it);
    friend itor operator+(const itor& it, int o);
    friend itor operator-(const itor& it, int o);
    friend difference_type operator -(const itor& i1, const itor& i2);
  public:
    pointer m_ptr;
    const_reverse_iterator() : m_ptr(
# 316 "/usr/include/wx-3.1-unofficial/wx/arrstr.h" 3 4
                                    __null
# 316 "/usr/include/wx-3.1-unofficial/wx/arrstr.h"
                                        ) { }
    explicit const_reverse_iterator(pointer ptr) : m_ptr(ptr) { }
    const_reverse_iterator(const itor& it) : m_ptr(it.m_ptr) { }
    const_reverse_iterator(const reverse_iterator& it) : m_ptr(it.m_ptr) { }
    reference operator*() const { return *m_ptr; }
    pointer operator->() const { return m_ptr; }
    itor& operator++() { --m_ptr; return *this; }
    const itor operator++(int)
      { const itor tmp = *this; --m_ptr; return tmp; }
    itor& operator--() { ++m_ptr; return *this; }
    const itor operator--(int) { const itor tmp = *this; ++m_ptr; return tmp; }
    bool operator ==(const itor& it) const { return m_ptr == it.m_ptr; }
    bool operator !=(const itor& it) const { return m_ptr != it.m_ptr; }
  };

  wxArrayString(const_iterator first, const_iterator last)
    { Init(false); assign(first, last); }
  wxArrayString(size_type n, const_reference v) { Init(false); assign(n, v); }

  template <class Iterator>
  void assign(Iterator first, Iterator last)
  {
      clear();
      reserve(std::distance(first, last));
      for(; first != last; ++first)
          push_back(*first);
  }

  void assign(size_type n, const_reference v)
    { clear(); Add(v, n); }
  reference back() { return *(end() - 1); }
  const_reference back() const { return *(end() - 1); }
  iterator begin() { return m_pItems; }
  const_iterator begin() const { return m_pItems; }
  size_type capacity() const { return m_nSize; }
  void clear() { Clear(); }
  bool empty() const { return IsEmpty(); }
  iterator end() { return begin() + GetCount(); }
  const_iterator end() const { return begin() + GetCount(); }
  iterator erase(iterator first, iterator last)
  {
      size_t idx = first - begin();
      RemoveAt(idx, last - first);
      return begin() + idx;
  }
  iterator erase(iterator it) { return erase(it, it + 1); }
  reference front() { return *begin(); }
  const_reference front() const { return *begin(); }
  void insert(iterator it, size_type n, const_reference v)
    { Insert(v, it - begin(), n); }
  iterator insert(iterator it, const_reference v = value_type())
    { size_t idx = it - begin(); Insert(v, idx); return begin() + idx; }
  void insert(iterator it, const_iterator first, const_iterator last);
  size_type max_size() const { return 0x7fffffff; }
  void pop_back() { RemoveAt(GetCount() - 1); }
  void push_back(const_reference v) { Add(v); }
  reverse_iterator rbegin() { return reverse_iterator(end() - 1); }
  const_reverse_iterator rbegin() const
    { return const_reverse_iterator(end() - 1); }
  reverse_iterator rend() { return reverse_iterator(begin() - 1); }
  const_reverse_iterator rend() const
    { return const_reverse_iterator(begin() - 1); }
  void reserve(size_type n) ;
  void resize(size_type n, value_type v = value_type());
  size_type size() const { return GetCount(); }
  void swap(wxArrayString& other)
  {
      wxSwap(m_nSize, other.m_nSize);
      wxSwap(m_nCount, other.m_nCount);
      wxSwap(m_pItems, other.m_pItems);
      wxSwap(m_autoSort, other.m_autoSort);
  }

protected:
  void Init(bool autoSort);
  void Copy(const wxArrayString& src);

  CompareFunction m_compareFunction;

private:



  wxString *Grow(size_t nIncrement);




  size_t BinarySearch(const wxString& str, bool lowerBound) const;

  size_t m_nSize,
          m_nCount;

  wxString *m_pItems;

  bool m_autoSort;
};

class __attribute__ ((visibility("default"))) wxSortedArrayString : public wxArrayString
{
public:
  wxSortedArrayString() : wxArrayString(true)
    { }
  wxSortedArrayString(const wxArrayString& array) : wxArrayString(true)
    { Copy(array); }

  explicit wxSortedArrayString(CompareFunction compareFunction)
      : wxArrayString(true)
    { m_compareFunction = compareFunction; }
};





class __attribute__ ((visibility("default"))) wxCArrayString
{
public:
    wxCArrayString( const wxArrayString& array )
        : m_array( array ), m_strings( 
# 435 "/usr/include/wx-3.1-unofficial/wx/arrstr.h" 3 4
                                      __null 
# 435 "/usr/include/wx-3.1-unofficial/wx/arrstr.h"
                                           )
    { }
    ~wxCArrayString() { delete[] m_strings; }

    size_t GetCount() const { return m_array.GetCount(); }
    wxString* GetStrings()
    {
        if( m_strings ) return m_strings;
        const size_t count = m_array.GetCount();
        m_strings = new wxString[count];
        for( size_t i = 0; i < count; ++i )
            m_strings[i] = m_array[i];
        return m_strings;
    }

    wxString* Release()
    {
        wxString *r = GetStrings();
        m_strings = 
# 453 "/usr/include/wx-3.1-unofficial/wx/arrstr.h" 3 4
                   __null
# 453 "/usr/include/wx-3.1-unofficial/wx/arrstr.h"
                       ;
        return r;
    }

private:
    const wxArrayString& m_array;
    wxString* m_strings;
};
# 471 "/usr/include/wx-3.1-unofficial/wx/arrstr.h"
__attribute__ ((visibility("default"))) wxString wxJoin(const wxArrayString& arr,
                                 const wxChar sep,
                                 const wxChar escape = L'\\');

__attribute__ ((visibility("default"))) wxArrayString wxSplit(const wxString& str,
                                       const wxChar sep,
                                       const wxChar escape = L'\\');
# 494 "/usr/include/wx-3.1-unofficial/wx/arrstr.h"
class wxArrayStringsAdapter
{
public:

    wxArrayStringsAdapter(const wxArrayString& strings)
        : m_type(wxSTRING_ARRAY), m_size(strings.size())
    {
        m_data.array = &strings;
    }


    wxArrayStringsAdapter(unsigned int n, const wxString *strings)
        : m_type(wxSTRING_POINTER), m_size(n)
    {
        m_data.ptr = strings;
    }



    wxArrayStringsAdapter(const std::vector<wxString>& strings)
        : m_type(wxSTRING_POINTER), m_size(strings.size())
    {
        m_data.ptr = m_size == 0 ? 
# 516 "/usr/include/wx-3.1-unofficial/wx/arrstr.h" 3 4
                                  __null 
# 516 "/usr/include/wx-3.1-unofficial/wx/arrstr.h"
                                       : &strings[0];
    }



    wxArrayStringsAdapter(const wxString& s)
        : m_type(wxSTRING_POINTER), m_size(1)
    {
        m_data.ptr = &s;
    }




    size_t GetCount() const { return m_size; }
    bool IsEmpty() const { return GetCount() == 0; }
    const wxString& operator[] (unsigned int i) const
    {
        do { if ( i < GetCount() ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/arrstr.h", 534, __FUNCTION__, "i < GetCount()", L"index out of bounds"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );
        if(m_type == wxSTRING_POINTER)
            return m_data.ptr[i];
        return m_data.array->Item(i);
    }
    wxArrayString AsArrayString() const
    {
        if(m_type == wxSTRING_ARRAY)
            return *m_data.array;
        return wxArrayString(GetCount(), m_data.ptr);
    }

private:

    enum wxStringContainerType
    {
        wxSTRING_ARRAY,
        wxSTRING_POINTER
    };

    wxStringContainerType m_type;
    size_t m_size;
    union
    {
        const wxString * ptr;
        const wxArrayString * array;
    } m_data;

    private: wxArrayStringsAdapter& operator=(const wxArrayStringsAdapter&) = delete;
};
# 16 "/usr/include/wx-3.1-unofficial/wx/filefn.h" 2




# 1 "/usr/include/x86_64-linux-gnu/sys/stat.h" 1 3 4
# 99 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4

# 99 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern "C" {

# 1 "/usr/include/x86_64-linux-gnu/bits/stat.h" 1 3 4
# 46 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
struct stat
  {
    __dev_t st_dev;




    __ino_t st_ino;







    __nlink_t st_nlink;
    __mode_t st_mode;

    __uid_t st_uid;
    __gid_t st_gid;

    int __pad0;

    __dev_t st_rdev;




    __off_t st_size;



    __blksize_t st_blksize;

    __blkcnt_t st_blocks;
# 91 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
    struct timespec st_atim;
    struct timespec st_mtim;
    struct timespec st_ctim;
# 106 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
    __syscall_slong_t __glibc_reserved[3];
# 115 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
  };



struct stat64
  {
    __dev_t st_dev;

    __ino64_t st_ino;
    __nlink_t st_nlink;
    __mode_t st_mode;






    __uid_t st_uid;
    __gid_t st_gid;

    int __pad0;
    __dev_t st_rdev;
    __off_t st_size;





    __blksize_t st_blksize;
    __blkcnt64_t st_blocks;







    struct timespec st_atim;
    struct timespec st_mtim;
    struct timespec st_ctim;
# 164 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
    __syscall_slong_t __glibc_reserved[3];



  };
# 102 "/usr/include/x86_64-linux-gnu/sys/stat.h" 2 3 4
# 213 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int stat (const char *__restrict __file, struct stat *__restrict __buf) throw () __asm__ ("" "stat64")

     __attribute__ ((__nonnull__ (1, 2)));
extern int fstat (int __fd, struct stat *__buf) throw () __asm__ ("" "fstat64")
     __attribute__ ((__nonnull__ (2)));






extern int stat64 (const char *__restrict __file,
     struct stat64 *__restrict __buf) throw () __attribute__ ((__nonnull__ (1, 2)));
extern int fstat64 (int __fd, struct stat64 *__buf) throw () __attribute__ ((__nonnull__ (2)));
# 239 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int fstatat (int __fd, const char *__restrict __file, struct stat *__restrict __buf, int __flag) throw () __asm__ ("" "fstatat64")


                 __attribute__ ((__nonnull__ (2, 3)));






extern int fstatat64 (int __fd, const char *__restrict __file,
        struct stat64 *__restrict __buf, int __flag)
     throw () __attribute__ ((__nonnull__ (2, 3)));
# 263 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int lstat (const char *__restrict __file, struct stat *__restrict __buf) throw () __asm__ ("" "lstat64")


     __attribute__ ((__nonnull__ (1, 2)));





extern int lstat64 (const char *__restrict __file,
      struct stat64 *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern int chmod (const char *__file, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (1)));





extern int lchmod (const char *__file, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (1)));




extern int fchmod (int __fd, __mode_t __mode) throw ();





extern int fchmodat (int __fd, const char *__file, __mode_t __mode,
       int __flag)
     throw () __attribute__ ((__nonnull__ (2))) ;






extern __mode_t umask (__mode_t __mask) throw ();




extern __mode_t getumask (void) throw ();



extern int mkdir (const char *__path, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (1)));





extern int mkdirat (int __fd, const char *__path, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (2)));






extern int mknod (const char *__path, __mode_t __mode, __dev_t __dev)
     throw () __attribute__ ((__nonnull__ (1)));





extern int mknodat (int __fd, const char *__path, __mode_t __mode,
      __dev_t __dev) throw () __attribute__ ((__nonnull__ (2)));





extern int mkfifo (const char *__path, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (1)));





extern int mkfifoat (int __fd, const char *__path, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (2)));





extern int utimensat (int __fd, const char *__path,
        const struct timespec __times[2],
        int __flags)
     throw () __attribute__ ((__nonnull__ (2)));




extern int futimens (int __fd, const struct timespec __times[2]) throw ();
# 406 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int __fxstat (int __ver, int __fildes, struct stat *__stat_buf) throw () __asm__ ("" "__fxstat64")

     __attribute__ ((__nonnull__ (3)));
extern int __xstat (int __ver, const char *__filename, struct stat *__stat_buf) throw () __asm__ ("" "__xstat64")

     __attribute__ ((__nonnull__ (2, 3)));
extern int __lxstat (int __ver, const char *__filename, struct stat *__stat_buf) throw () __asm__ ("" "__lxstat64")

     __attribute__ ((__nonnull__ (2, 3)));
extern int __fxstatat (int __ver, int __fildes, const char *__filename, struct stat *__stat_buf, int __flag) throw () __asm__ ("" "__fxstatat64")


                    __attribute__ ((__nonnull__ (3, 4)));
# 428 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int __fxstat64 (int __ver, int __fildes, struct stat64 *__stat_buf)
     throw () __attribute__ ((__nonnull__ (3)));
extern int __xstat64 (int __ver, const char *__filename,
        struct stat64 *__stat_buf) throw () __attribute__ ((__nonnull__ (2, 3)));
extern int __lxstat64 (int __ver, const char *__filename,
         struct stat64 *__stat_buf) throw () __attribute__ ((__nonnull__ (2, 3)));
extern int __fxstatat64 (int __ver, int __fildes, const char *__filename,
    struct stat64 *__stat_buf, int __flag)
     throw () __attribute__ ((__nonnull__ (3, 4)));

extern int __xmknod (int __ver, const char *__path, __mode_t __mode,
       __dev_t *__dev) throw () __attribute__ ((__nonnull__ (2, 4)));

extern int __xmknodat (int __ver, int __fd, const char *__path,
         __mode_t __mode, __dev_t *__dev)
     throw () __attribute__ ((__nonnull__ (3, 5)));


# 1 "/usr/include/x86_64-linux-gnu/bits/statx.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/bits/statx.h" 3 4
# 1 "/usr/include/linux/stat.h" 1 3 4




# 1 "/usr/include/linux/types.h" 1 3 4




# 1 "/usr/include/x86_64-linux-gnu/asm/types.h" 1 3 4
# 1 "/usr/include/asm-generic/types.h" 1 3 4






# 1 "/usr/include/asm-generic/int-ll64.h" 1 3 4
# 12 "/usr/include/asm-generic/int-ll64.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/bitsperlong.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/asm/bitsperlong.h" 3 4
# 1 "/usr/include/asm-generic/bitsperlong.h" 1 3 4
# 12 "/usr/include/x86_64-linux-gnu/asm/bitsperlong.h" 2 3 4
# 13 "/usr/include/asm-generic/int-ll64.h" 2 3 4







typedef __signed__ char __s8;
typedef unsigned char __u8;

typedef __signed__ short __s16;
typedef unsigned short __u16;

typedef __signed__ int __s32;
typedef unsigned int __u32;


__extension__ typedef __signed__ long long __s64;
__extension__ typedef unsigned long long __u64;
# 8 "/usr/include/asm-generic/types.h" 2 3 4
# 2 "/usr/include/x86_64-linux-gnu/asm/types.h" 2 3 4
# 6 "/usr/include/linux/types.h" 2 3 4



# 1 "/usr/include/linux/posix_types.h" 1 3 4




# 1 "/usr/include/linux/stddef.h" 1 3 4
# 6 "/usr/include/linux/posix_types.h" 2 3 4
# 25 "/usr/include/linux/posix_types.h" 3 4
typedef struct {
 unsigned long fds_bits[1024 / (8 * sizeof(long))];
} __kernel_fd_set;


typedef void (*__kernel_sighandler_t)(int);


typedef int __kernel_key_t;
typedef int __kernel_mqd_t;

# 1 "/usr/include/x86_64-linux-gnu/asm/posix_types.h" 1 3 4






# 1 "/usr/include/x86_64-linux-gnu/asm/posix_types_64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/asm/posix_types_64.h" 3 4
typedef unsigned short __kernel_old_uid_t;
typedef unsigned short __kernel_old_gid_t;


typedef unsigned long __kernel_old_dev_t;


# 1 "/usr/include/asm-generic/posix_types.h" 1 3 4
# 15 "/usr/include/asm-generic/posix_types.h" 3 4
typedef long __kernel_long_t;
typedef unsigned long __kernel_ulong_t;



typedef __kernel_ulong_t __kernel_ino_t;



typedef unsigned int __kernel_mode_t;



typedef int __kernel_pid_t;



typedef int __kernel_ipc_pid_t;



typedef unsigned int __kernel_uid_t;
typedef unsigned int __kernel_gid_t;



typedef __kernel_long_t __kernel_suseconds_t;



typedef int __kernel_daddr_t;



typedef unsigned int __kernel_uid32_t;
typedef unsigned int __kernel_gid32_t;
# 72 "/usr/include/asm-generic/posix_types.h" 3 4
typedef __kernel_ulong_t __kernel_size_t;
typedef __kernel_long_t __kernel_ssize_t;
typedef __kernel_long_t __kernel_ptrdiff_t;




typedef struct {
 int val[2];
} __kernel_fsid_t;





typedef __kernel_long_t __kernel_off_t;
typedef long long __kernel_loff_t;
typedef __kernel_long_t __kernel_old_time_t;
typedef __kernel_long_t __kernel_time_t;
typedef long long __kernel_time64_t;
typedef __kernel_long_t __kernel_clock_t;
typedef int __kernel_timer_t;
typedef int __kernel_clockid_t;
typedef char * __kernel_caddr_t;
typedef unsigned short __kernel_uid16_t;
typedef unsigned short __kernel_gid16_t;
# 19 "/usr/include/x86_64-linux-gnu/asm/posix_types_64.h" 2 3 4
# 8 "/usr/include/x86_64-linux-gnu/asm/posix_types.h" 2 3 4
# 37 "/usr/include/linux/posix_types.h" 2 3 4
# 10 "/usr/include/linux/types.h" 2 3 4
# 24 "/usr/include/linux/types.h" 3 4
typedef __u16 __le16;
typedef __u16 __be16;
typedef __u32 __le32;
typedef __u32 __be32;
typedef __u64 __le64;
typedef __u64 __be64;

typedef __u16 __sum16;
typedef __u32 __wsum;
# 47 "/usr/include/linux/types.h" 3 4
typedef unsigned __poll_t;
# 6 "/usr/include/linux/stat.h" 2 3 4
# 56 "/usr/include/linux/stat.h" 3 4
struct statx_timestamp {
 __s64 tv_sec;
 __u32 tv_nsec;
 __s32 __reserved;
};
# 99 "/usr/include/linux/stat.h" 3 4
struct statx {

 __u32 stx_mask;
 __u32 stx_blksize;
 __u64 stx_attributes;

 __u32 stx_nlink;
 __u32 stx_uid;
 __u32 stx_gid;
 __u16 stx_mode;
 __u16 __spare0[1];

 __u64 stx_ino;
 __u64 stx_size;
 __u64 stx_blocks;
 __u64 stx_attributes_mask;

 struct statx_timestamp stx_atime;
 struct statx_timestamp stx_btime;
 struct statx_timestamp stx_ctime;
 struct statx_timestamp stx_mtime;

 __u32 stx_rdev_major;
 __u32 stx_rdev_minor;
 __u32 stx_dev_major;
 __u32 stx_dev_minor;

 __u64 stx_mnt_id;
 __u64 __spare2;

 __u64 __spare3[12];

};
# 32 "/usr/include/x86_64-linux-gnu/bits/statx.h" 2 3 4







# 1 "/usr/include/x86_64-linux-gnu/bits/statx-generic.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/statx-generic.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_statx_timestamp.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/statx-generic.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_statx.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/statx-generic.h" 2 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/statx-generic.h" 3 4
extern "C" {


int statx (int __dirfd, const char *__restrict __path, int __flags,
           unsigned int __mask, struct statx *__restrict __buf)
  throw () __attribute__ ((__nonnull__ (2, 5)));

}
# 40 "/usr/include/x86_64-linux-gnu/bits/statx.h" 2 3 4
# 447 "/usr/include/x86_64-linux-gnu/sys/stat.h" 2 3 4
# 534 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
}
# 21 "/usr/include/wx-3.1-unofficial/wx/filefn.h" 2


# 1 "/usr/include/unistd.h" 1 3 4
# 27 "/usr/include/unistd.h" 3 4
extern "C" {
# 202 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix_opt.h" 1 3 4
# 203 "/usr/include/unistd.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/environments.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/environments.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/environments.h" 2 3 4
# 207 "/usr/include/unistd.h" 2 3 4
# 226 "/usr/include/unistd.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 227 "/usr/include/unistd.h" 2 3 4
# 274 "/usr/include/unistd.h" 3 4
typedef __socklen_t socklen_t;
# 287 "/usr/include/unistd.h" 3 4
extern int access (const char *__name, int __type) throw () __attribute__ ((__nonnull__ (1)));




extern int euidaccess (const char *__name, int __type)
     throw () __attribute__ ((__nonnull__ (1)));


extern int eaccess (const char *__name, int __type)
     throw () __attribute__ ((__nonnull__ (1)));






extern int faccessat (int __fd, const char *__file, int __type, int __flag)
     throw () __attribute__ ((__nonnull__ (2))) ;
# 337 "/usr/include/unistd.h" 3 4
extern __off64_t lseek (int __fd, __off64_t __offset, int __whence) throw () __asm__ ("" "lseek64")

             ;





extern __off64_t lseek64 (int __fd, __off64_t __offset, int __whence)
     throw ();






extern int close (int __fd);






extern ssize_t read (int __fd, void *__buf, size_t __nbytes) ;





extern ssize_t write (int __fd, const void *__buf, size_t __n) ;
# 388 "/usr/include/unistd.h" 3 4
extern ssize_t pread (int __fd, void *__buf, size_t __nbytes, __off64_t __offset) __asm__ ("" "pread64")

                    ;
extern ssize_t pwrite (int __fd, const void *__buf, size_t __nbytes, __off64_t __offset) __asm__ ("" "pwrite64")

                     ;
# 404 "/usr/include/unistd.h" 3 4
extern ssize_t pread64 (int __fd, void *__buf, size_t __nbytes,
   __off64_t __offset) ;


extern ssize_t pwrite64 (int __fd, const void *__buf, size_t __n,
    __off64_t __offset) ;







extern int pipe (int __pipedes[2]) throw () ;




extern int pipe2 (int __pipedes[2], int __flags) throw () ;
# 432 "/usr/include/unistd.h" 3 4
extern unsigned int alarm (unsigned int __seconds) throw ();
# 444 "/usr/include/unistd.h" 3 4
extern unsigned int sleep (unsigned int __seconds);







extern __useconds_t ualarm (__useconds_t __value, __useconds_t __interval)
     throw ();






extern int usleep (__useconds_t __useconds);
# 469 "/usr/include/unistd.h" 3 4
extern int pause (void);



extern int chown (const char *__file, __uid_t __owner, __gid_t __group)
     throw () __attribute__ ((__nonnull__ (1))) ;



extern int fchown (int __fd, __uid_t __owner, __gid_t __group) throw () ;




extern int lchown (const char *__file, __uid_t __owner, __gid_t __group)
     throw () __attribute__ ((__nonnull__ (1))) ;






extern int fchownat (int __fd, const char *__file, __uid_t __owner,
       __gid_t __group, int __flag)
     throw () __attribute__ ((__nonnull__ (2))) ;



extern int chdir (const char *__path) throw () __attribute__ ((__nonnull__ (1))) ;



extern int fchdir (int __fd) throw () ;
# 511 "/usr/include/unistd.h" 3 4
extern char *getcwd (char *__buf, size_t __size) throw () ;





extern char *get_current_dir_name (void) throw ();







extern char *getwd (char *__buf)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__)) ;




extern int dup (int __fd) throw () ;


extern int dup2 (int __fd, int __fd2) throw ();




extern int dup3 (int __fd, int __fd2, int __flags) throw ();



extern char **__environ;

extern char **environ;





extern int execve (const char *__path, char *const __argv[],
     char *const __envp[]) throw () __attribute__ ((__nonnull__ (1, 2)));




extern int fexecve (int __fd, char *const __argv[], char *const __envp[])
     throw () __attribute__ ((__nonnull__ (2)));




extern int execv (const char *__path, char *const __argv[])
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int execle (const char *__path, const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int execl (const char *__path, const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int execvp (const char *__file, char *const __argv[])
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int execlp (const char *__file, const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int execvpe (const char *__file, char *const __argv[],
      char *const __envp[])
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern int nice (int __inc) throw () ;




extern void _exit (int __status) __attribute__ ((__noreturn__));





# 1 "/usr/include/x86_64-linux-gnu/bits/confname.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/confname.h" 3 4
enum
  {
    _PC_LINK_MAX,

    _PC_MAX_CANON,

    _PC_MAX_INPUT,

    _PC_NAME_MAX,

    _PC_PATH_MAX,

    _PC_PIPE_BUF,

    _PC_CHOWN_RESTRICTED,

    _PC_NO_TRUNC,

    _PC_VDISABLE,

    _PC_SYNC_IO,

    _PC_ASYNC_IO,

    _PC_PRIO_IO,

    _PC_SOCK_MAXBUF,

    _PC_FILESIZEBITS,

    _PC_REC_INCR_XFER_SIZE,

    _PC_REC_MAX_XFER_SIZE,

    _PC_REC_MIN_XFER_SIZE,

    _PC_REC_XFER_ALIGN,

    _PC_ALLOC_SIZE_MIN,

    _PC_SYMLINK_MAX,

    _PC_2_SYMLINKS

  };


enum
  {
    _SC_ARG_MAX,

    _SC_CHILD_MAX,

    _SC_CLK_TCK,

    _SC_NGROUPS_MAX,

    _SC_OPEN_MAX,

    _SC_STREAM_MAX,

    _SC_TZNAME_MAX,

    _SC_JOB_CONTROL,

    _SC_SAVED_IDS,

    _SC_REALTIME_SIGNALS,

    _SC_PRIORITY_SCHEDULING,

    _SC_TIMERS,

    _SC_ASYNCHRONOUS_IO,

    _SC_PRIORITIZED_IO,

    _SC_SYNCHRONIZED_IO,

    _SC_FSYNC,

    _SC_MAPPED_FILES,

    _SC_MEMLOCK,

    _SC_MEMLOCK_RANGE,

    _SC_MEMORY_PROTECTION,

    _SC_MESSAGE_PASSING,

    _SC_SEMAPHORES,

    _SC_SHARED_MEMORY_OBJECTS,

    _SC_AIO_LISTIO_MAX,

    _SC_AIO_MAX,

    _SC_AIO_PRIO_DELTA_MAX,

    _SC_DELAYTIMER_MAX,

    _SC_MQ_OPEN_MAX,

    _SC_MQ_PRIO_MAX,

    _SC_VERSION,

    _SC_PAGESIZE,


    _SC_RTSIG_MAX,

    _SC_SEM_NSEMS_MAX,

    _SC_SEM_VALUE_MAX,

    _SC_SIGQUEUE_MAX,

    _SC_TIMER_MAX,




    _SC_BC_BASE_MAX,

    _SC_BC_DIM_MAX,

    _SC_BC_SCALE_MAX,

    _SC_BC_STRING_MAX,

    _SC_COLL_WEIGHTS_MAX,

    _SC_EQUIV_CLASS_MAX,

    _SC_EXPR_NEST_MAX,

    _SC_LINE_MAX,

    _SC_RE_DUP_MAX,

    _SC_CHARCLASS_NAME_MAX,


    _SC_2_VERSION,

    _SC_2_C_BIND,

    _SC_2_C_DEV,

    _SC_2_FORT_DEV,

    _SC_2_FORT_RUN,

    _SC_2_SW_DEV,

    _SC_2_LOCALEDEF,


    _SC_PII,

    _SC_PII_XTI,

    _SC_PII_SOCKET,

    _SC_PII_INTERNET,

    _SC_PII_OSI,

    _SC_POLL,

    _SC_SELECT,

    _SC_UIO_MAXIOV,

    _SC_IOV_MAX = _SC_UIO_MAXIOV,

    _SC_PII_INTERNET_STREAM,

    _SC_PII_INTERNET_DGRAM,

    _SC_PII_OSI_COTS,

    _SC_PII_OSI_CLTS,

    _SC_PII_OSI_M,

    _SC_T_IOV_MAX,



    _SC_THREADS,

    _SC_THREAD_SAFE_FUNCTIONS,

    _SC_GETGR_R_SIZE_MAX,

    _SC_GETPW_R_SIZE_MAX,

    _SC_LOGIN_NAME_MAX,

    _SC_TTY_NAME_MAX,

    _SC_THREAD_DESTRUCTOR_ITERATIONS,

    _SC_THREAD_KEYS_MAX,

    _SC_THREAD_STACK_MIN,

    _SC_THREAD_THREADS_MAX,

    _SC_THREAD_ATTR_STACKADDR,

    _SC_THREAD_ATTR_STACKSIZE,

    _SC_THREAD_PRIORITY_SCHEDULING,

    _SC_THREAD_PRIO_INHERIT,

    _SC_THREAD_PRIO_PROTECT,

    _SC_THREAD_PROCESS_SHARED,


    _SC_NPROCESSORS_CONF,

    _SC_NPROCESSORS_ONLN,

    _SC_PHYS_PAGES,

    _SC_AVPHYS_PAGES,

    _SC_ATEXIT_MAX,

    _SC_PASS_MAX,


    _SC_XOPEN_VERSION,

    _SC_XOPEN_XCU_VERSION,

    _SC_XOPEN_UNIX,

    _SC_XOPEN_CRYPT,

    _SC_XOPEN_ENH_I18N,

    _SC_XOPEN_SHM,


    _SC_2_CHAR_TERM,

    _SC_2_C_VERSION,

    _SC_2_UPE,


    _SC_XOPEN_XPG2,

    _SC_XOPEN_XPG3,

    _SC_XOPEN_XPG4,


    _SC_CHAR_BIT,

    _SC_CHAR_MAX,

    _SC_CHAR_MIN,

    _SC_INT_MAX,

    _SC_INT_MIN,

    _SC_LONG_BIT,

    _SC_WORD_BIT,

    _SC_MB_LEN_MAX,

    _SC_NZERO,

    _SC_SSIZE_MAX,

    _SC_SCHAR_MAX,

    _SC_SCHAR_MIN,

    _SC_SHRT_MAX,

    _SC_SHRT_MIN,

    _SC_UCHAR_MAX,

    _SC_UINT_MAX,

    _SC_ULONG_MAX,

    _SC_USHRT_MAX,


    _SC_NL_ARGMAX,

    _SC_NL_LANGMAX,

    _SC_NL_MSGMAX,

    _SC_NL_NMAX,

    _SC_NL_SETMAX,

    _SC_NL_TEXTMAX,


    _SC_XBS5_ILP32_OFF32,

    _SC_XBS5_ILP32_OFFBIG,

    _SC_XBS5_LP64_OFF64,

    _SC_XBS5_LPBIG_OFFBIG,


    _SC_XOPEN_LEGACY,

    _SC_XOPEN_REALTIME,

    _SC_XOPEN_REALTIME_THREADS,


    _SC_ADVISORY_INFO,

    _SC_BARRIERS,

    _SC_BASE,

    _SC_C_LANG_SUPPORT,

    _SC_C_LANG_SUPPORT_R,

    _SC_CLOCK_SELECTION,

    _SC_CPUTIME,

    _SC_THREAD_CPUTIME,

    _SC_DEVICE_IO,

    _SC_DEVICE_SPECIFIC,

    _SC_DEVICE_SPECIFIC_R,

    _SC_FD_MGMT,

    _SC_FIFO,

    _SC_PIPE,

    _SC_FILE_ATTRIBUTES,

    _SC_FILE_LOCKING,

    _SC_FILE_SYSTEM,

    _SC_MONOTONIC_CLOCK,

    _SC_MULTI_PROCESS,

    _SC_SINGLE_PROCESS,

    _SC_NETWORKING,

    _SC_READER_WRITER_LOCKS,

    _SC_SPIN_LOCKS,

    _SC_REGEXP,

    _SC_REGEX_VERSION,

    _SC_SHELL,

    _SC_SIGNALS,

    _SC_SPAWN,

    _SC_SPORADIC_SERVER,

    _SC_THREAD_SPORADIC_SERVER,

    _SC_SYSTEM_DATABASE,

    _SC_SYSTEM_DATABASE_R,

    _SC_TIMEOUTS,

    _SC_TYPED_MEMORY_OBJECTS,

    _SC_USER_GROUPS,

    _SC_USER_GROUPS_R,

    _SC_2_PBS,

    _SC_2_PBS_ACCOUNTING,

    _SC_2_PBS_LOCATE,

    _SC_2_PBS_MESSAGE,

    _SC_2_PBS_TRACK,

    _SC_SYMLOOP_MAX,

    _SC_STREAMS,

    _SC_2_PBS_CHECKPOINT,


    _SC_V6_ILP32_OFF32,

    _SC_V6_ILP32_OFFBIG,

    _SC_V6_LP64_OFF64,

    _SC_V6_LPBIG_OFFBIG,


    _SC_HOST_NAME_MAX,

    _SC_TRACE,

    _SC_TRACE_EVENT_FILTER,

    _SC_TRACE_INHERIT,

    _SC_TRACE_LOG,


    _SC_LEVEL1_ICACHE_SIZE,

    _SC_LEVEL1_ICACHE_ASSOC,

    _SC_LEVEL1_ICACHE_LINESIZE,

    _SC_LEVEL1_DCACHE_SIZE,

    _SC_LEVEL1_DCACHE_ASSOC,

    _SC_LEVEL1_DCACHE_LINESIZE,

    _SC_LEVEL2_CACHE_SIZE,

    _SC_LEVEL2_CACHE_ASSOC,

    _SC_LEVEL2_CACHE_LINESIZE,

    _SC_LEVEL3_CACHE_SIZE,

    _SC_LEVEL3_CACHE_ASSOC,

    _SC_LEVEL3_CACHE_LINESIZE,

    _SC_LEVEL4_CACHE_SIZE,

    _SC_LEVEL4_CACHE_ASSOC,

    _SC_LEVEL4_CACHE_LINESIZE,



    _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50,

    _SC_RAW_SOCKETS,


    _SC_V7_ILP32_OFF32,

    _SC_V7_ILP32_OFFBIG,

    _SC_V7_LP64_OFF64,

    _SC_V7_LPBIG_OFFBIG,


    _SC_SS_REPL_MAX,


    _SC_TRACE_EVENT_NAME_MAX,

    _SC_TRACE_NAME_MAX,

    _SC_TRACE_SYS_MAX,

    _SC_TRACE_USER_EVENT_MAX,


    _SC_XOPEN_STREAMS,


    _SC_THREAD_ROBUST_PRIO_INHERIT,

    _SC_THREAD_ROBUST_PRIO_PROTECT

  };


enum
  {
    _CS_PATH,


    _CS_V6_WIDTH_RESTRICTED_ENVS,



    _CS_GNU_LIBC_VERSION,

    _CS_GNU_LIBPTHREAD_VERSION,


    _CS_V5_WIDTH_RESTRICTED_ENVS,



    _CS_V7_WIDTH_RESTRICTED_ENVS,



    _CS_LFS_CFLAGS = 1000,

    _CS_LFS_LDFLAGS,

    _CS_LFS_LIBS,

    _CS_LFS_LINTFLAGS,

    _CS_LFS64_CFLAGS,

    _CS_LFS64_LDFLAGS,

    _CS_LFS64_LIBS,

    _CS_LFS64_LINTFLAGS,


    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,

    _CS_XBS5_ILP32_OFF32_LDFLAGS,

    _CS_XBS5_ILP32_OFF32_LIBS,

    _CS_XBS5_ILP32_OFF32_LINTFLAGS,

    _CS_XBS5_ILP32_OFFBIG_CFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LDFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LIBS,

    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS,

    _CS_XBS5_LP64_OFF64_CFLAGS,

    _CS_XBS5_LP64_OFF64_LDFLAGS,

    _CS_XBS5_LP64_OFF64_LIBS,

    _CS_XBS5_LP64_OFF64_LINTFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_CFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LIBS,

    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V6_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LIBS,

    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V6_LP64_OFF64_CFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LIBS,

    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V7_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LIBS,

    _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V7_LP64_OFF64_CFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LIBS,

    _CS_POSIX_V7_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS,


    _CS_V6_ENV,

    _CS_V7_ENV

  };
# 610 "/usr/include/unistd.h" 2 3 4


extern long int pathconf (const char *__path, int __name)
     throw () __attribute__ ((__nonnull__ (1)));


extern long int fpathconf (int __fd, int __name) throw ();


extern long int sysconf (int __name) throw ();



extern size_t confstr (int __name, char *__buf, size_t __len) throw ();




extern __pid_t getpid (void) throw ();


extern __pid_t getppid (void) throw ();


extern __pid_t getpgrp (void) throw ();


extern __pid_t __getpgid (__pid_t __pid) throw ();

extern __pid_t getpgid (__pid_t __pid) throw ();






extern int setpgid (__pid_t __pid, __pid_t __pgid) throw ();
# 660 "/usr/include/unistd.h" 3 4
extern int setpgrp (void) throw ();






extern __pid_t setsid (void) throw ();



extern __pid_t getsid (__pid_t __pid) throw ();



extern __uid_t getuid (void) throw ();


extern __uid_t geteuid (void) throw ();


extern __gid_t getgid (void) throw ();


extern __gid_t getegid (void) throw ();




extern int getgroups (int __size, __gid_t __list[]) throw () ;



extern int group_member (__gid_t __gid) throw ();






extern int setuid (__uid_t __uid) throw () ;




extern int setreuid (__uid_t __ruid, __uid_t __euid) throw () ;




extern int seteuid (__uid_t __uid) throw () ;






extern int setgid (__gid_t __gid) throw () ;




extern int setregid (__gid_t __rgid, __gid_t __egid) throw () ;




extern int setegid (__gid_t __gid) throw () ;





extern int getresuid (__uid_t *__ruid, __uid_t *__euid, __uid_t *__suid)
     throw ();



extern int getresgid (__gid_t *__rgid, __gid_t *__egid, __gid_t *__sgid)
     throw ();



extern int setresuid (__uid_t __ruid, __uid_t __euid, __uid_t __suid)
     throw () ;



extern int setresgid (__gid_t __rgid, __gid_t __egid, __gid_t __sgid)
     throw () ;






extern __pid_t fork (void) throw ();







extern __pid_t vfork (void) throw ();





extern char *ttyname (int __fd) throw ();



extern int ttyname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2))) ;



extern int isatty (int __fd) throw ();




extern int ttyslot (void) throw ();




extern int link (const char *__from, const char *__to)
     throw () __attribute__ ((__nonnull__ (1, 2))) ;




extern int linkat (int __fromfd, const char *__from, int __tofd,
     const char *__to, int __flags)
     throw () __attribute__ ((__nonnull__ (2, 4))) ;




extern int symlink (const char *__from, const char *__to)
     throw () __attribute__ ((__nonnull__ (1, 2))) ;




extern ssize_t readlink (const char *__restrict __path,
    char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (1, 2))) ;




extern int symlinkat (const char *__from, int __tofd,
        const char *__to) throw () __attribute__ ((__nonnull__ (1, 3))) ;


extern ssize_t readlinkat (int __fd, const char *__restrict __path,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (2, 3))) ;



extern int unlink (const char *__name) throw () __attribute__ ((__nonnull__ (1)));



extern int unlinkat (int __fd, const char *__name, int __flag)
     throw () __attribute__ ((__nonnull__ (2)));



extern int rmdir (const char *__path) throw () __attribute__ ((__nonnull__ (1)));



extern __pid_t tcgetpgrp (int __fd) throw ();


extern int tcsetpgrp (int __fd, __pid_t __pgrp_id) throw ();






extern char *getlogin (void);







extern int getlogin_r (char *__name, size_t __name_len) __attribute__ ((__nonnull__ (1)));




extern int setlogin (const char *__name) throw () __attribute__ ((__nonnull__ (1)));







# 1 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern "C" {







extern char *optarg;
# 50 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern int optind;




extern int opterr;



extern int optopt;
# 91 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)
       throw () __attribute__ ((__nonnull__ (2, 3)));

}
# 28 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 2 3 4

extern "C" {
# 49 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 3 4
}
# 870 "/usr/include/unistd.h" 2 3 4







extern int gethostname (char *__name, size_t __len) throw () __attribute__ ((__nonnull__ (1)));






extern int sethostname (const char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) ;



extern int sethostid (long int __id) throw () ;





extern int getdomainname (char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) ;
extern int setdomainname (const char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) ;





extern int vhangup (void) throw ();


extern int revoke (const char *__file) throw () __attribute__ ((__nonnull__ (1))) ;







extern int profil (unsigned short int *__sample_buffer, size_t __size,
     size_t __offset, unsigned int __scale)
     throw () __attribute__ ((__nonnull__ (1)));





extern int acct (const char *__name) throw ();



extern char *getusershell (void) throw ();
extern void endusershell (void) throw ();
extern void setusershell (void) throw ();





extern int daemon (int __nochdir, int __noclose) throw () ;






extern int chroot (const char *__path) throw () __attribute__ ((__nonnull__ (1))) ;



extern char *getpass (const char *__prompt) __attribute__ ((__nonnull__ (1)));







extern int fsync (int __fd);





extern int syncfs (int __fd) throw ();






extern long int gethostid (void);


extern void sync (void) throw ();





extern int getpagesize (void) throw () __attribute__ ((__const__));




extern int getdtablesize (void) throw ();
# 995 "/usr/include/unistd.h" 3 4
extern int truncate (const char *__file, __off64_t __length) throw () __asm__ ("" "truncate64")

                  __attribute__ ((__nonnull__ (1))) ;





extern int truncate64 (const char *__file, __off64_t __length)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 1017 "/usr/include/unistd.h" 3 4
extern int ftruncate (int __fd, __off64_t __length) throw () __asm__ ("" "ftruncate64")
                        ;





extern int ftruncate64 (int __fd, __off64_t __length) throw () ;
# 1035 "/usr/include/unistd.h" 3 4
extern int brk (void *__addr) throw () ;





extern void *sbrk (intptr_t __delta) throw ();
# 1056 "/usr/include/unistd.h" 3 4
extern long int syscall (long int __sysno, ...) throw ();
# 1082 "/usr/include/unistd.h" 3 4
extern int lockf (int __fd, int __cmd, __off64_t __len) __asm__ ("" "lockf64")
                       ;





extern int lockf64 (int __fd, int __cmd, __off64_t __len) ;
# 1107 "/usr/include/unistd.h" 3 4
ssize_t copy_file_range (int __infd, __off64_t *__pinoff,
    int __outfd, __off64_t *__poutoff,
    size_t __length, unsigned int __flags);





extern int fdatasync (int __fildes);
# 1124 "/usr/include/unistd.h" 3 4
extern char *crypt (const char *__key, const char *__salt)
     throw () __attribute__ ((__nonnull__ (1, 2)));







extern void swab (const void *__restrict __from, void *__restrict __to,
    ssize_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));
# 1161 "/usr/include/unistd.h" 3 4
int getentropy (void *__buffer, size_t __length) ;
# 1170 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/unistd_ext.h" 1 3 4
# 34 "/usr/include/x86_64-linux-gnu/bits/unistd_ext.h" 3 4
extern __pid_t gettid (void) throw ();
# 1171 "/usr/include/unistd.h" 2 3 4

}
# 24 "/usr/include/wx-3.1-unofficial/wx/filefn.h" 2
# 1 "/usr/include/dirent.h" 1 3 4
# 27 "/usr/include/dirent.h" 3 4
extern "C" {
# 61 "/usr/include/dirent.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/dirent.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/dirent.h" 3 4
struct dirent
  {




    __ino64_t d_ino;
    __off64_t d_off;

    unsigned short int d_reclen;
    unsigned char d_type;
    char d_name[256];
  };


struct dirent64
  {
    __ino64_t d_ino;
    __off64_t d_off;
    unsigned short int d_reclen;
    unsigned char d_type;
    char d_name[256];
  };
# 62 "/usr/include/dirent.h" 2 3 4
# 97 "/usr/include/dirent.h" 3 4
enum
  {
    DT_UNKNOWN = 0,

    DT_FIFO = 1,

    DT_CHR = 2,

    DT_DIR = 4,

    DT_BLK = 6,

    DT_REG = 8,

    DT_LNK = 10,

    DT_SOCK = 12,

    DT_WHT = 14

  };
# 127 "/usr/include/dirent.h" 3 4
typedef struct __dirstream DIR;






extern DIR *opendir (const char *__name) __attribute__ ((__nonnull__ (1)));






extern DIR *fdopendir (int __fd);







extern int closedir (DIR *__dirp) __attribute__ ((__nonnull__ (1)));
# 165 "/usr/include/dirent.h" 3 4
extern struct dirent *readdir (DIR *__dirp) __asm__ ("" "readdir64")
     __attribute__ ((__nonnull__ (1)));






extern struct dirent64 *readdir64 (DIR *__dirp) __attribute__ ((__nonnull__ (1)));
# 189 "/usr/include/dirent.h" 3 4
extern int readdir_r (DIR *__restrict __dirp, struct dirent *__restrict __entry, struct dirent **__restrict __result) __asm__ ("" "readdir64_r")




  __attribute__ ((__nonnull__ (1, 2, 3))) __attribute__ ((__deprecated__));






extern int readdir64_r (DIR *__restrict __dirp,
   struct dirent64 *__restrict __entry,
   struct dirent64 **__restrict __result)
  __attribute__ ((__nonnull__ (1, 2, 3))) __attribute__ ((__deprecated__));




extern void rewinddir (DIR *__dirp) throw () __attribute__ ((__nonnull__ (1)));





extern void seekdir (DIR *__dirp, long int __pos) throw () __attribute__ ((__nonnull__ (1)));


extern long int telldir (DIR *__dirp) throw () __attribute__ ((__nonnull__ (1)));





extern int dirfd (DIR *__dirp) throw () __attribute__ ((__nonnull__ (1)));
# 245 "/usr/include/dirent.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 246 "/usr/include/dirent.h" 2 3 4
# 263 "/usr/include/dirent.h" 3 4
extern int scandir (const char *__restrict __dir, struct dirent ***__restrict __namelist, int (*__selector) (const struct dirent *), int (*__cmp) (const struct dirent **, const struct dirent **)) __asm__ ("" "scandir64")





                    __attribute__ ((__nonnull__ (1, 2)));
# 278 "/usr/include/dirent.h" 3 4
extern int scandir64 (const char *__restrict __dir,
        struct dirent64 ***__restrict __namelist,
        int (*__selector) (const struct dirent64 *),
        int (*__cmp) (const struct dirent64 **,
        const struct dirent64 **))
     __attribute__ ((__nonnull__ (1, 2)));
# 301 "/usr/include/dirent.h" 3 4
extern int scandirat (int __dfd, const char *__restrict __dir, struct dirent ***__restrict __namelist, int (*__selector) (const struct dirent *), int (*__cmp) (const struct dirent **, const struct dirent **)) __asm__ ("" "scandirat64")





                      __attribute__ ((__nonnull__ (2, 3)));







extern int scandirat64 (int __dfd, const char *__restrict __dir,
   struct dirent64 ***__restrict __namelist,
   int (*__selector) (const struct dirent64 *),
   int (*__cmp) (const struct dirent64 **,
          const struct dirent64 **))
     __attribute__ ((__nonnull__ (2, 3)));
# 330 "/usr/include/dirent.h" 3 4
extern int alphasort (const struct dirent **__e1, const struct dirent **__e2) throw () __asm__ ("" "alphasort64")


                   __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));






extern int alphasort64 (const struct dirent64 **__e1,
   const struct dirent64 **__e2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 359 "/usr/include/dirent.h" 3 4
extern __ssize_t getdirentries (int __fd, char *__restrict __buf, size_t __nbytes, __off64_t *__restrict __basep) throw () __asm__ ("" "getdirentries64")



                      __attribute__ ((__nonnull__ (2, 4)));






extern __ssize_t getdirentries64 (int __fd, char *__restrict __buf,
      size_t __nbytes,
      __off64_t *__restrict __basep)
     throw () __attribute__ ((__nonnull__ (2, 4)));
# 385 "/usr/include/dirent.h" 3 4
extern int versionsort (const struct dirent **__e1, const struct dirent **__e2) throw () __asm__ ("" "versionsort64")



     __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));






extern int versionsort64 (const struct dirent64 **__e1,
     const struct dirent64 **__e2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



}

# 1 "/usr/include/x86_64-linux-gnu/bits/dirent_ext.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/dirent_ext.h" 3 4
extern "C" {





extern __ssize_t getdents64 (int __fd, void *__buffer, size_t __length)
  throw () __attribute__ ((__nonnull__ (2)));


}
# 405 "/usr/include/dirent.h" 2 3 4
# 25 "/usr/include/wx-3.1-unofficial/wx/filefn.h" 2
# 35 "/usr/include/wx-3.1-unofficial/wx/filefn.h"
# 1 "/usr/include/fcntl.h" 1 3 4
# 28 "/usr/include/fcntl.h" 3 4
extern "C" {






# 1 "/usr/include/x86_64-linux-gnu/bits/fcntl.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/fcntl.h" 3 4
struct flock
  {
    short int l_type;
    short int l_whence;




    __off64_t l_start;
    __off64_t l_len;

    __pid_t l_pid;
  };


struct flock64
  {
    short int l_type;
    short int l_whence;
    __off64_t l_start;
    __off64_t l_len;
    __pid_t l_pid;
  };



# 1 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 1 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_iovec.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/types/struct_iovec.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/types/struct_iovec.h" 2 3 4


struct iovec
  {
    void *iov_base;
    size_t iov_len;
  };
# 39 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 2 3 4
# 265 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
enum __pid_type
  {
    F_OWNER_TID = 0,
    F_OWNER_PID,
    F_OWNER_PGRP,
    F_OWNER_GID = F_OWNER_PGRP
  };


struct f_owner_ex
  {
    enum __pid_type type;
    __pid_t pid;
  };
# 353 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
# 1 "/usr/include/linux/falloc.h" 1 3 4
# 354 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 2 3 4



struct file_handle
{
  unsigned int handle_bytes;
  int handle_type;

  unsigned char f_handle[0];
};
# 392 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
extern "C" {




extern __ssize_t readahead (int __fd, __off64_t __offset, size_t __count)
    throw ();






extern int sync_file_range (int __fd, __off64_t __offset, __off64_t __count,
       unsigned int __flags);






extern __ssize_t vmsplice (int __fdout, const struct iovec *__iov,
      size_t __count, unsigned int __flags);





extern __ssize_t splice (int __fdin, __off64_t *__offin, int __fdout,
    __off64_t *__offout, size_t __len,
    unsigned int __flags);





extern __ssize_t tee (int __fdin, int __fdout, size_t __len,
        unsigned int __flags);
# 439 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
extern int fallocate (int __fd, int __mode, __off64_t __offset, __off64_t __len) __asm__ ("" "fallocate64")

                     ;





extern int fallocate64 (int __fd, int __mode, __off64_t __offset,
   __off64_t __len);




extern int name_to_handle_at (int __dfd, const char *__name,
         struct file_handle *__handle, int *__mnt_id,
         int __flags) throw ();





extern int open_by_handle_at (int __mountdirfd, struct file_handle *__handle,
         int __flags);



}
# 62 "/usr/include/x86_64-linux-gnu/bits/fcntl.h" 2 3 4
# 36 "/usr/include/fcntl.h" 2 3 4
# 78 "/usr/include/fcntl.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stat.h" 1 3 4
# 79 "/usr/include/fcntl.h" 2 3 4
# 151 "/usr/include/fcntl.h" 3 4
extern int fcntl (int __fd, int __cmd, ...) __asm__ ("" "fcntl64");





extern int fcntl64 (int __fd, int __cmd, ...);
# 171 "/usr/include/fcntl.h" 3 4
extern int open (const char *__file, int __oflag, ...) __asm__ ("" "open64")
     __attribute__ ((__nonnull__ (1)));





extern int open64 (const char *__file, int __oflag, ...) __attribute__ ((__nonnull__ (1)));
# 196 "/usr/include/fcntl.h" 3 4
extern int openat (int __fd, const char *__file, int __oflag, ...) __asm__ ("" "openat64")
                    __attribute__ ((__nonnull__ (2)));





extern int openat64 (int __fd, const char *__file, int __oflag, ...)
     __attribute__ ((__nonnull__ (2)));
# 217 "/usr/include/fcntl.h" 3 4
extern int creat (const char *__file, mode_t __mode) __asm__ ("" "creat64")
                  __attribute__ ((__nonnull__ (1)));





extern int creat64 (const char *__file, mode_t __mode) __attribute__ ((__nonnull__ (1)));
# 264 "/usr/include/fcntl.h" 3 4
extern int posix_fadvise (int __fd, __off64_t __offset, __off64_t __len, int __advise) throw () __asm__ ("" "posix_fadvise64")

                      ;





extern int posix_fadvise64 (int __fd, off64_t __offset, off64_t __len,
       int __advise) throw ();
# 285 "/usr/include/fcntl.h" 3 4
extern int posix_fallocate (int __fd, __off64_t __offset, __off64_t __len) __asm__ ("" "posix_fallocate64")

                           ;





extern int posix_fallocate64 (int __fd, off64_t __offset, off64_t __len);
# 304 "/usr/include/fcntl.h" 3 4
}
# 36 "/usr/include/wx-3.1-unofficial/wx/filefn.h" 2
# 55 "/usr/include/wx-3.1-unofficial/wx/filefn.h"

# 55 "/usr/include/wx-3.1-unofficial/wx/filefn.h"
enum wxSeekMode
{
  wxFromStart,
  wxFromCurrent,
  wxFromEnd
};

enum wxFileKind
{
  wxFILE_KIND_UNKNOWN,
  wxFILE_KIND_DISK,
  wxFILE_KIND_TERMINAL,
  wxFILE_KIND_PIPE
};



enum wxPosixPermissions
{

    wxS_IRUSR = 00400,
    wxS_IWUSR = 00200,
    wxS_IXUSR = 00100,

    wxS_IRGRP = 00040,
    wxS_IWGRP = 00020,
    wxS_IXGRP = 00010,

    wxS_IROTH = 00004,
    wxS_IWOTH = 00002,
    wxS_IXOTH = 00001,


    wxPOSIX_USER_READ = wxS_IRUSR,
    wxPOSIX_USER_WRITE = wxS_IWUSR,
    wxPOSIX_USER_EXECUTE = wxS_IXUSR,

    wxPOSIX_GROUP_READ = wxS_IRGRP,
    wxPOSIX_GROUP_WRITE = wxS_IWGRP,
    wxPOSIX_GROUP_EXECUTE = wxS_IXGRP,

    wxPOSIX_OTHERS_READ = wxS_IROTH,
    wxPOSIX_OTHERS_WRITE = wxS_IWOTH,
    wxPOSIX_OTHERS_EXECUTE = wxS_IXOTH,




    wxS_DEFAULT = (wxPOSIX_USER_READ | wxPOSIX_USER_WRITE |
                   wxPOSIX_GROUP_READ | wxPOSIX_GROUP_WRITE |
                   wxPOSIX_OTHERS_READ | wxPOSIX_OTHERS_WRITE),




    wxS_DIR_DEFAULT = (wxPOSIX_USER_READ | wxPOSIX_USER_WRITE | wxPOSIX_USER_EXECUTE |
                       wxPOSIX_GROUP_READ | wxPOSIX_GROUP_WRITE | wxPOSIX_GROUP_EXECUTE |
                       wxPOSIX_OTHERS_READ | wxPOSIX_OTHERS_WRITE | wxPOSIX_OTHERS_EXECUTE)
};
# 343 "/usr/include/wx-3.1-unofficial/wx/filefn.h"
    typedef off_t wxFileOffset;


        struct wxAssert_346 { unsigned int BadFileSizeType: sizeof(off_t) == sizeof(long long); }
                                                 ;
# 405 "/usr/include/wx-3.1-unofficial/wx/filefn.h"
inline int wxAccess(const wxString& path, mode_t mode)
    { return access(path.fn_str(), mode); }
inline int wxChmod(const wxString& path, mode_t mode)
    { return chmod(path.fn_str(), mode); }
inline int wxOpen(const wxString& path, int flags, mode_t mode)
    { return open(path.fn_str(), flags, mode); }


inline int wxReadlink(const wxString& path, char* buf, int size)
    { return readlink(path.fn_str(), buf, size); }


inline int wxStat(const wxString& path, struct stat *buf)
    { return stat(path.fn_str(), buf); }
inline int wxLstat(const wxString& path, struct stat *buf)
    { return lstat(path.fn_str(), buf); }
inline int wxRmDir(const wxString& path)
    { return rmdir(path.fn_str()); }




inline int wxMkDir(const wxString& path, mode_t mode)
    { return mkdir(path.fn_str(), mode); }
# 437 "/usr/include/wx-3.1-unofficial/wx/filefn.h"
const int wxInvalidOffset = -1;




__attribute__ ((visibility("default"))) bool wxFileExists(const wxString& filename);


__attribute__ ((visibility("default"))) bool wxDirExists(const wxString& pathName);

__attribute__ ((visibility("default"))) bool wxIsAbsolutePath(const wxString& filename);


__attribute__ ((visibility("default"))) wxChar* wxFileNameFromPath(wxChar *path);
__attribute__ ((visibility("default"))) wxString wxFileNameFromPath(const wxString& path);


__attribute__ ((visibility("default"))) wxString wxPathOnly(const wxString& path);
# 507 "/usr/include/wx-3.1-unofficial/wx/filefn.h"
__attribute__ ((visibility("default"))) wxString wxFindFirstFile(const wxString& spec, int flags = 1);
__attribute__ ((visibility("default"))) wxString wxFindNextFile();


__attribute__ ((visibility("default"))) bool wxIsWild(const wxString& pattern);




__attribute__ ((visibility("default"))) bool wxMatchWild(const wxString& pattern, const wxString& text, bool dot_special = true);


__attribute__ ((visibility("default"))) bool wxConcatFiles(const wxString& src1, const wxString& src2, const wxString& dest);


__attribute__ ((visibility("default"))) bool wxCopyFile(const wxString& src, const wxString& dest,
                                 bool overwrite = true);


__attribute__ ((visibility("default"))) bool wxRemoveFile(const wxString& file);


__attribute__ ((visibility("default"))) bool wxRenameFile(const wxString& oldpath, const wxString& newpath, bool overwrite = true);


__attribute__ ((visibility("default"))) wxString wxGetCwd();


__attribute__ ((visibility("default"))) bool wxSetWorkingDirectory(const wxString& d);


__attribute__ ((visibility("default"))) bool wxMkdir(const wxString& dir, int perm = wxS_DIR_DEFAULT);


__attribute__ ((visibility("default"))) bool wxRmdir(const wxString& dir, int flags = 0);


__attribute__ ((visibility("default"))) wxFileKind wxGetFileKind(int fd);
__attribute__ ((visibility("default"))) wxFileKind wxGetFileKind(FILE *fp);


__attribute__ ((visibility("default"))) bool wxIsWritable(const wxString &path);
__attribute__ ((visibility("default"))) bool wxIsReadable(const wxString &path);
__attribute__ ((visibility("default"))) bool wxIsExecutable(const wxString &path);
# 598 "/usr/include/wx-3.1-unofficial/wx/filefn.h"
inline bool wxIsPathSeparator(wxChar c)
{


    return c == L'/';



}


__attribute__ ((visibility("default"))) bool wxEndsWithPathSeparator(const wxString& filename);
# 622 "/usr/include/wx-3.1-unofficial/wx/filefn.h"
__attribute__ ((visibility("default"))) bool wxFindFileInPath(wxString *pStr, const wxString& szPath, const wxString& szFile);



__attribute__ ((visibility("default"))) wxString wxGetOSDirectory();




__attribute__ ((visibility("default"))) time_t wxFileModificationTime(const wxString& filename);
# 640 "/usr/include/wx-3.1-unofficial/wx/filefn.h"
__attribute__ ((visibility("default"))) int wxParseCommonDialogsFilter(const wxString& wildCard, wxArrayString& descriptions, wxArrayString& filters);
# 649 "/usr/include/wx-3.1-unofficial/wx/filefn.h"
class __attribute__ ((visibility("default"))) wxUmaskChanger
{
public:



    wxUmaskChanger(int umaskNew)
    {
        m_umaskOld = umaskNew == -1 ? -1 : (int)umask((mode_t)umaskNew);
    }

    ~wxUmaskChanger()
    {
        if ( m_umaskOld != -1 )
            umask((mode_t)m_umaskOld);
    }

private:
    int m_umaskOld;
};
# 682 "/usr/include/wx-3.1-unofficial/wx/filefn.h"
class __attribute__ ((visibility("default"))) wxPathList : public wxArrayString
{
public:
    wxPathList() {}
    wxPathList(const wxArrayString &arr)
        { Add(arr); }


    void AddEnvList(const wxString& envVariable);


    bool Add(const wxString& path);
    void Add(const wxArrayString &paths);


    wxString FindValidPath(const wxString& filename) const;



    wxString FindAbsoluteValidPath(const wxString& filename) const;


    bool EnsureFileAccessible(const wxString& path);
};
# 21 "/usr/include/wx-3.1-unofficial/wx/utils.h" 2

# 1 "/usr/include/wx-3.1-unofficial/wx/versioninfo.h" 1
# 19 "/usr/include/wx-3.1-unofficial/wx/versioninfo.h"
class wxVersionInfo
{
public:
    wxVersionInfo(const wxString& name = wxString(),
                  int major = 0,
                  int minor = 0,
                  int micro = 0,
                  const wxString& description = wxString(),
                  const wxString& copyright = wxString())
        : m_name(name)
        , m_description(description)
        , m_copyright(copyright)
    {
        m_major = major;
        m_minor = minor;
        m_micro = micro;
    }




    const wxString& GetName() const { return m_name; }

    int GetMajor() const { return m_major; }
    int GetMinor() const { return m_minor; }
    int GetMicro() const { return m_micro; }

    wxString ToString() const
    {
        return HasDescription() ? GetDescription() : GetVersionString();
    }

    wxString GetVersionString() const
    {
        wxString str;
        str << m_name << ' ' << GetMajor() << '.' << GetMinor();
        if ( GetMicro() )
            str << '.' << GetMicro();

        return str;
    }

    bool HasDescription() const { return !m_description.empty(); }
    const wxString& GetDescription() const { return m_description; }

    bool HasCopyright() const { return !m_copyright.empty(); }
    const wxString& GetCopyright() const { return m_copyright; }

private:
    wxString m_name,
             m_description,
             m_copyright;

    int m_major,
        m_minor,
        m_micro;
};
# 23 "/usr/include/wx-3.1-unofficial/wx/utils.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/meta/implicitconversion.h" 1
# 13 "/usr/include/wx-3.1-unofficial/wx/meta/implicitconversion.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/meta/implicitconversion.h" 2
# 29 "/usr/include/wx-3.1-unofficial/wx/meta/implicitconversion.h"
namespace wxPrivate
{

template<typename T>
struct TypeHierarchy
{


    static const int level = 9999;
};







template<> struct TypeHierarchy<char> { static const int level = 1; };
template<> struct TypeHierarchy<unsigned char> { static const int level = 2; };
template<> struct TypeHierarchy<short> { static const int level = 3; };
template<> struct TypeHierarchy<unsigned short> { static const int level = 4; };
template<> struct TypeHierarchy<int> { static const int level = 5; };
template<> struct TypeHierarchy<unsigned int> { static const int level = 6; };
template<> struct TypeHierarchy<long> { static const int level = 7; };
template<> struct TypeHierarchy<unsigned long> { static const int level = 8; };

template<> struct TypeHierarchy<long long> { static const int level = 9; };
template<> struct TypeHierarchy<unsigned long long> { static const int level = 10; };

template<> struct TypeHierarchy<float> { static const int level = 11; };
template<> struct TypeHierarchy<double> { static const int level = 12; };
template<> struct TypeHierarchy<long double> { static const int level = 13; };





      template<> struct TypeHierarchy<wchar_t> : public TypeHierarchy<int> {};
# 76 "/usr/include/wx-3.1-unofficial/wx/meta/implicitconversion.h"
}



template<typename T1, typename T2>
struct wxImplicitConversionType
{
    typedef typename wxIf
            <

                (int)(wxPrivate::TypeHierarchy<T1>::level) < (int)(wxPrivate::TypeHierarchy<T2>::level),
                T2,

                T1
            >::value
            value;
};


template<typename T1, typename T2, typename T3>
struct wxImplicitConversionType3 : public wxImplicitConversionType<
                        T1,
                        typename wxImplicitConversionType<T2,T3>::value>
{
};
# 24 "/usr/include/wx-3.1-unofficial/wx/utils.h" 2



# 1 "/usr/include/wx-3.1-unofficial/wx/mousestate.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/mousestate.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/kbdstate.h" 1
# 13 "/usr/include/wx-3.1-unofficial/wx/kbdstate.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/kbdstate.h" 2





class __attribute__ ((visibility("default"))) wxKeyboardState
{
public:
    explicit
    wxKeyboardState(bool controlDown = false,
                    bool shiftDown = false,
                    bool altDown = false,
                    bool metaDown = false)
        : m_controlDown(controlDown),
          m_shiftDown(shiftDown),
          m_altDown(altDown),
          m_metaDown(metaDown)



    {
    }
# 46 "/usr/include/wx-3.1-unofficial/wx/kbdstate.h"
    int GetModifiers() const
    {
        return (m_controlDown ? wxMOD_CONTROL : 0) |
               (m_shiftDown ? wxMOD_SHIFT : 0) |
               (m_metaDown ? wxMOD_META : 0) |



               (m_altDown ? wxMOD_ALT : 0);
    }


    bool HasAnyModifiers() const { return GetModifiers() != wxMOD_NONE; }



    bool HasModifiers() const
    {
        return ControlDown() || RawControlDown() || AltDown();
    }


    bool ControlDown() const { return m_controlDown; }
    bool RawControlDown() const
    {



        return m_controlDown;

    }
    bool ShiftDown() const { return m_shiftDown; }
    bool MetaDown() const { return m_metaDown; }
    bool AltDown() const { return m_altDown; }






    bool CmdDown() const
    {
        return ControlDown();
    }




    void SetControlDown(bool down) { m_controlDown = down; }
    void SetRawControlDown(bool down)
    {



        m_controlDown = down;

    }
    void SetShiftDown(bool down) { m_shiftDown = down; }
    void SetAltDown(bool down) { m_altDown = down; }
    void SetMetaDown(bool down) { m_metaDown = down; }





public:
    bool m_controlDown : 1;
    bool m_shiftDown : 1;
    bool m_altDown : 1;
    bool m_metaDown : 1;



};
# 15 "/usr/include/wx-3.1-unofficial/wx/mousestate.h" 2


enum wxMouseButton
{
    wxMOUSE_BTN_ANY = -1,
    wxMOUSE_BTN_NONE = 0,
    wxMOUSE_BTN_LEFT = 1,
    wxMOUSE_BTN_MIDDLE = 2,
    wxMOUSE_BTN_RIGHT = 3,
    wxMOUSE_BTN_AUX1 = 4,
    wxMOUSE_BTN_AUX2 = 5,
    wxMOUSE_BTN_MAX
};
# 36 "/usr/include/wx-3.1-unofficial/wx/mousestate.h"
class __attribute__ ((visibility("default"))) wxMouseState : public wxKeyboardState
{
public:
    wxMouseState()
        : m_leftDown(false), m_middleDown(false), m_rightDown(false),
          m_aux1Down(false), m_aux2Down(false),
          m_x(0), m_y(0)
    {
    }





    wxCoord GetX() const { return m_x; }
    wxCoord GetY() const { return m_y; }
    wxPoint GetPosition() const { return wxPoint(m_x, m_y); }
    void GetPosition(wxCoord *x, wxCoord *y) const
    {
        if ( x )
            *x = m_x;
        if ( y )
            *y = m_y;
    }


    void GetPosition(long *x, long *y) const
    {
        if ( x )
            *x = m_x;
        if ( y )
            *y = m_y;
    }


    bool LeftIsDown() const { return m_leftDown; }
    bool MiddleIsDown() const { return m_middleDown; }
    bool RightIsDown() const { return m_rightDown; }
    bool Aux1IsDown() const { return m_aux1Down; }
    bool Aux2IsDown() const { return m_aux2Down; }

    bool ButtonIsDown(wxMouseButton but) const
    {
        switch ( but )
        {
            case wxMOUSE_BTN_ANY:
                return LeftIsDown() || MiddleIsDown() || RightIsDown() ||
                            Aux1IsDown() || Aux2IsDown();

            case wxMOUSE_BTN_LEFT:
                return LeftIsDown();

            case wxMOUSE_BTN_MIDDLE:
                return MiddleIsDown();

            case wxMOUSE_BTN_RIGHT:
                return RightIsDown();

            case wxMOUSE_BTN_AUX1:
                return Aux1IsDown();

            case wxMOUSE_BTN_AUX2:
                return Aux2IsDown();

            case wxMOUSE_BTN_NONE:
            case wxMOUSE_BTN_MAX:
                break;
        }

        do { if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/mousestate.h", 105, __FUNCTION__, "\"Assert failure\"", L"invalid parameter"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );
        return false;
    }



    void SetX(wxCoord x) { m_x = x; }
    void SetY(wxCoord y) { m_y = y; }
    void SetPosition(const wxPoint& pos) { m_x = pos.x; m_y = pos.y; }

    void SetLeftDown(bool down) { m_leftDown = down; }
    void SetMiddleDown(bool down) { m_middleDown = down; }
    void SetRightDown(bool down) { m_rightDown = down; }
    void SetAux1Down(bool down) { m_aux1Down = down; }
    void SetAux2Down(bool down) { m_aux2Down = down; }


    void SetState(const wxMouseState& state) { *this = state; }
# 138 "/usr/include/wx-3.1-unofficial/wx/mousestate.h"
    bool m_leftDown : 1;
    bool m_middleDown : 1;
    bool m_rightDown : 1;
    bool m_aux1Down : 1;
    bool m_aux2Down : 1;

    wxCoord m_x,
            m_y;
};
# 28 "/usr/include/wx-3.1-unofficial/wx/utils.h" 2



class wxArrayString;
class wxArrayInt;



# 1 "/usr/include/wx-3.1-unofficial/wx/longlong.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/longlong.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 16 "/usr/include/wx-3.1-unofficial/wx/longlong.h" 2





# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/limits.h" 1 3 4
# 22 "/usr/include/wx-3.1-unofficial/wx/longlong.h" 2
# 88 "/usr/include/wx-3.1-unofficial/wx/longlong.h"
    class wxLongLongNative;
    class wxULongLongNative;
    typedef wxLongLongNative wxLongLong;
    typedef wxULongLongNative wxULongLong;
# 102 "/usr/include/wx-3.1-unofficial/wx/longlong.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/iosfwrap.h" 1
# 103 "/usr/include/wx-3.1-unofficial/wx/longlong.h" 2



class __attribute__ ((visibility("default"))) wxLongLongNative
{
public:


    wxLongLongNative() : m_ll(0) { }

    wxLongLongNative(long long ll) : m_ll(ll) { }

    wxLongLongNative(wxInt32 hi, wxUint32 lo)
    {

        m_ll = ((long long) hi) << 32;
        m_ll |= (long long) lo;
    }
# 132 "/usr/include/wx-3.1-unofficial/wx/longlong.h"
    wxLongLongNative& operator=(long long ll)
        { m_ll = ll; return *this; }
    wxLongLongNative& operator=(unsigned long long ll)
        { m_ll = ll; return *this; }

    wxLongLongNative& operator=(const wxULongLongNative &ll);
    wxLongLongNative& operator=(int l)
        { m_ll = l; return *this; }
    wxLongLongNative& operator=(long l)
        { m_ll = l; return *this; }
    wxLongLongNative& operator=(unsigned int l)
        { m_ll = l; return *this; }
    wxLongLongNative& operator=(unsigned long l)
        { m_ll = l; return *this; }
# 155 "/usr/include/wx-3.1-unofficial/wx/longlong.h"
    wxLongLongNative& Assign(double d)
        { m_ll = (long long)d; return *this; }





    wxInt32 GetHi() const
        { return ((wxInt32)(m_ll >> 32)); }

    wxUint32 GetLo() const
        { return ((wxUint32)(m_ll)); }


    wxLongLongNative Abs() const { return wxLongLongNative(*this).Abs(); }
    wxLongLongNative& Abs() { if ( m_ll < 0 ) m_ll = -m_ll; return *this; }


    long long GetValue() const { return m_ll; }


    long ToLong() const
    {



        do { if ( (m_ll >= 
# 181 "/usr/include/wx-3.1-unofficial/wx/longlong.h" 3 4
       (-0x7fffffffffffffffL - 1L)
# 181 "/usr/include/wx-3.1-unofficial/wx/longlong.h"
       ) && (m_ll <= 0x7fffffffffffffffL) ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/longlong.h", 181, __FUNCTION__, "(m_ll >= (-0x7fffffffffffffffL - 1L)) && (m_ll <= 0x7fffffffffffffffL)", L"wxLongLong to long conversion loss of precision"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 )
                                                                              ;


        return ((long)(m_ll));
    }


    double ToDouble() const { return ((double)(m_ll)); }







    wxLongLongNative operator+(const wxLongLongNative& ll) const
        { return wxLongLongNative(m_ll + ll.m_ll); }
    wxLongLongNative& operator+=(const wxLongLongNative& ll)
        { m_ll += ll.m_ll; return *this; }

    wxLongLongNative operator+(const long long ll) const
        { return wxLongLongNative(m_ll + ll); }
    wxLongLongNative& operator+=(const long long ll)
        { m_ll += ll; return *this; }


    wxLongLongNative& operator++()
        { m_ll++; return *this; }


    wxLongLongNative operator++(int)
        { wxLongLongNative value(*this); m_ll++; return value; }


    wxLongLongNative operator-() const
        { return wxLongLongNative(-m_ll); }
    wxLongLongNative& Negate() { m_ll = -m_ll; return *this; }


    wxLongLongNative operator-(const wxLongLongNative& ll) const
        { return wxLongLongNative(m_ll - ll.m_ll); }
    wxLongLongNative& operator-=(const wxLongLongNative& ll)
        { m_ll -= ll.m_ll; return *this; }

    wxLongLongNative operator-(const long long ll) const
        { return wxLongLongNative(m_ll - ll); }
    wxLongLongNative& operator-=(const long long ll)
        { m_ll -= ll; return *this; }


    wxLongLongNative& operator--()
        { m_ll--; return *this; }


    wxLongLongNative operator--(int)
        { wxLongLongNative value(*this); m_ll--; return value; }



    wxLongLongNative operator<<(int shift) const
        { return wxLongLongNative(m_ll << shift); }
    wxLongLongNative& operator<<=(int shift)
        { m_ll <<= shift; return *this; }


    wxLongLongNative operator>>(int shift) const
        { return wxLongLongNative(m_ll >> shift); }
    wxLongLongNative& operator>>=(int shift)
        { m_ll >>= shift; return *this; }


    wxLongLongNative operator&(const wxLongLongNative& ll) const
        { return wxLongLongNative(m_ll & ll.m_ll); }
    wxLongLongNative& operator&=(const wxLongLongNative& ll)
        { m_ll &= ll.m_ll; return *this; }

    wxLongLongNative operator|(const wxLongLongNative& ll) const
        { return wxLongLongNative(m_ll | ll.m_ll); }
    wxLongLongNative& operator|=(const wxLongLongNative& ll)
        { m_ll |= ll.m_ll; return *this; }

    wxLongLongNative operator^(const wxLongLongNative& ll) const
        { return wxLongLongNative(m_ll ^ ll.m_ll); }
    wxLongLongNative& operator^=(const wxLongLongNative& ll)
        { m_ll ^= ll.m_ll; return *this; }


    wxLongLongNative operator*(const wxLongLongNative& ll) const
        { return wxLongLongNative(m_ll * ll.m_ll); }
    wxLongLongNative operator*(long l) const
        { return wxLongLongNative(m_ll * l); }
    wxLongLongNative& operator*=(const wxLongLongNative& ll)
        { m_ll *= ll.m_ll; return *this; }
    wxLongLongNative& operator*=(long l)
        { m_ll *= l; return *this; }

    wxLongLongNative operator/(const wxLongLongNative& ll) const
        { return wxLongLongNative(m_ll / ll.m_ll); }
    wxLongLongNative operator/(long l) const
        { return wxLongLongNative(m_ll / l); }
    wxLongLongNative& operator/=(const wxLongLongNative& ll)
        { m_ll /= ll.m_ll; return *this; }
    wxLongLongNative& operator/=(long l)
        { m_ll /= l; return *this; }

    wxLongLongNative operator%(const wxLongLongNative& ll) const
        { return wxLongLongNative(m_ll % ll.m_ll); }
    wxLongLongNative operator%(long l) const
        { return wxLongLongNative(m_ll % l); }


    bool operator==(const wxLongLongNative& ll) const
        { return m_ll == ll.m_ll; }
    bool operator==(long l) const
        { return m_ll == l; }
    bool operator!=(const wxLongLongNative& ll) const
        { return m_ll != ll.m_ll; }
    bool operator!=(long l) const
        { return m_ll != l; }
    bool operator<(const wxLongLongNative& ll) const
        { return m_ll < ll.m_ll; }
    bool operator<(long l) const
        { return m_ll < l; }
    bool operator>(const wxLongLongNative& ll) const
        { return m_ll > ll.m_ll; }
    bool operator>(long l) const
        { return m_ll > l; }
    bool operator<=(const wxLongLongNative& ll) const
        { return m_ll <= ll.m_ll; }
    bool operator<=(long l) const
        { return m_ll <= l; }
    bool operator>=(const wxLongLongNative& ll) const
        { return m_ll >= ll.m_ll; }
    bool operator>=(long l) const
        { return m_ll >= l; }




    wxString ToString() const;


    void *asArray() const;



    friend __attribute__ ((visibility("default")))
    std:: ostream& operator<<(std:: ostream&, const wxLongLongNative&);


    friend __attribute__ ((visibility("default")))
    wxString& operator<<(wxString&, const wxLongLongNative&);


    friend __attribute__ ((visibility("default")))
    class wxTextOutputStream& operator<<(class wxTextOutputStream&, const wxLongLongNative&);
    friend __attribute__ ((visibility("default")))
    class wxTextInputStream& operator>>(class wxTextInputStream&, wxLongLongNative&);


private:
    long long m_ll;
};


class __attribute__ ((visibility("default"))) wxULongLongNative
{
public:


    wxULongLongNative() : m_ll(0) { }

    wxULongLongNative(unsigned long long ll) : m_ll(ll) { }

    wxULongLongNative(wxUint32 hi, wxUint32 lo) : m_ll(0)
    {

        m_ll = ((unsigned long long) hi) << 32;
        m_ll |= (unsigned long long) lo;
    }
# 374 "/usr/include/wx-3.1-unofficial/wx/longlong.h"
    wxULongLongNative& operator=(unsigned long long ll)
        { m_ll = ll; return *this; }
    wxULongLongNative& operator=(long long ll)
        { m_ll = ll; return *this; }

    wxULongLongNative& operator=(int l)
        { m_ll = l; return *this; }
    wxULongLongNative& operator=(long l)
        { m_ll = l; return *this; }
    wxULongLongNative& operator=(unsigned int l)
        { m_ll = l; return *this; }
    wxULongLongNative& operator=(unsigned long l)
        { m_ll = l; return *this; }
    wxULongLongNative& operator=(const wxLongLongNative &ll)
        { m_ll = ll.GetValue(); return *this; }
# 398 "/usr/include/wx-3.1-unofficial/wx/longlong.h"
    wxUint32 GetHi() const
        { return ((wxUint32)(m_ll >> 32)); }

    wxUint32 GetLo() const
        { return ((wxUint32)(m_ll)); }


    unsigned long long GetValue() const { return m_ll; }


    unsigned long ToULong() const
    {
        do { if ( m_ll <= 
# 410 "/usr/include/wx-3.1-unofficial/wx/longlong.h" 3 4
       (0x7fffffffffffffffL * 2UL + 1UL) 
# 410 "/usr/include/wx-3.1-unofficial/wx/longlong.h"
       ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/longlong.h", 410, __FUNCTION__, "m_ll <= (0x7fffffffffffffffL * 2UL + 1UL)", L"wxULongLong to long conversion loss of precision"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 )
                                                                               ;

        return ((unsigned long)(m_ll));
    }


    double ToDouble() const { return ((double)(m_ll)); }



    wxULongLongNative operator+(const wxULongLongNative& ll) const
        { return wxULongLongNative(m_ll + ll.m_ll); }
    wxULongLongNative& operator+=(const wxULongLongNative& ll)
        { m_ll += ll.m_ll; return *this; }

    wxULongLongNative operator+(const unsigned long long ll) const
        { return wxULongLongNative(m_ll + ll); }
    wxULongLongNative& operator+=(const unsigned long long ll)
        { m_ll += ll; return *this; }


    wxULongLongNative& operator++()
        { m_ll++; return *this; }


    wxULongLongNative operator++(int)
        { wxULongLongNative value(*this); m_ll++; return value; }


    wxULongLongNative operator-(const wxULongLongNative& ll) const
        { return wxULongLongNative(m_ll - ll.m_ll); }
    wxULongLongNative& operator-=(const wxULongLongNative& ll)
        { m_ll -= ll.m_ll; return *this; }

    wxULongLongNative operator-(const unsigned long long ll) const
        { return wxULongLongNative(m_ll - ll); }
    wxULongLongNative& operator-=(const unsigned long long ll)
        { m_ll -= ll; return *this; }


    wxULongLongNative& operator--()
        { m_ll--; return *this; }


    wxULongLongNative operator--(int)
        { wxULongLongNative value(*this); m_ll--; return value; }



    wxULongLongNative operator<<(int shift) const
        { return wxULongLongNative(m_ll << shift); }
    wxULongLongNative& operator<<=(int shift)
        { m_ll <<= shift; return *this; }


    wxULongLongNative operator>>(int shift) const
        { return wxULongLongNative(m_ll >> shift); }
    wxULongLongNative& operator>>=(int shift)
        { m_ll >>= shift; return *this; }


    wxULongLongNative operator&(const wxULongLongNative& ll) const
        { return wxULongLongNative(m_ll & ll.m_ll); }
    wxULongLongNative& operator&=(const wxULongLongNative& ll)
        { m_ll &= ll.m_ll; return *this; }

    wxULongLongNative operator|(const wxULongLongNative& ll) const
        { return wxULongLongNative(m_ll | ll.m_ll); }
    wxULongLongNative& operator|=(const wxULongLongNative& ll)
        { m_ll |= ll.m_ll; return *this; }

    wxULongLongNative operator^(const wxULongLongNative& ll) const
        { return wxULongLongNative(m_ll ^ ll.m_ll); }
    wxULongLongNative& operator^=(const wxULongLongNative& ll)
        { m_ll ^= ll.m_ll; return *this; }


    wxULongLongNative operator*(const wxULongLongNative& ll) const
        { return wxULongLongNative(m_ll * ll.m_ll); }
    wxULongLongNative operator*(unsigned long l) const
        { return wxULongLongNative(m_ll * l); }
    wxULongLongNative& operator*=(const wxULongLongNative& ll)
        { m_ll *= ll.m_ll; return *this; }
    wxULongLongNative& operator*=(unsigned long l)
        { m_ll *= l; return *this; }

    wxULongLongNative operator/(const wxULongLongNative& ll) const
        { return wxULongLongNative(m_ll / ll.m_ll); }
    wxULongLongNative operator/(unsigned long l) const
        { return wxULongLongNative(m_ll / l); }
    wxULongLongNative& operator/=(const wxULongLongNative& ll)
        { m_ll /= ll.m_ll; return *this; }
    wxULongLongNative& operator/=(unsigned long l)
        { m_ll /= l; return *this; }

    wxULongLongNative operator%(const wxULongLongNative& ll) const
        { return wxULongLongNative(m_ll % ll.m_ll); }
    wxULongLongNative operator%(unsigned long l) const
        { return wxULongLongNative(m_ll % l); }


    bool operator==(const wxULongLongNative& ll) const
        { return m_ll == ll.m_ll; }
    bool operator==(unsigned long l) const
        { return m_ll == l; }
    bool operator!=(const wxULongLongNative& ll) const
        { return m_ll != ll.m_ll; }
    bool operator!=(unsigned long l) const
        { return m_ll != l; }
    bool operator<(const wxULongLongNative& ll) const
        { return m_ll < ll.m_ll; }
    bool operator<(unsigned long l) const
        { return m_ll < l; }
    bool operator>(const wxULongLongNative& ll) const
        { return m_ll > ll.m_ll; }
    bool operator>(unsigned long l) const
        { return m_ll > l; }
    bool operator<=(const wxULongLongNative& ll) const
        { return m_ll <= ll.m_ll; }
    bool operator<=(unsigned long l) const
        { return m_ll <= l; }
    bool operator>=(const wxULongLongNative& ll) const
        { return m_ll >= ll.m_ll; }
    bool operator>=(unsigned long l) const
        { return m_ll >= l; }




    wxString ToString() const;


    void *asArray() const;



    friend __attribute__ ((visibility("default")))
    std:: ostream& operator<<(std:: ostream&, const wxULongLongNative&);


    friend __attribute__ ((visibility("default")))
    wxString& operator<<(wxString&, const wxULongLongNative&);


    friend __attribute__ ((visibility("default")))
    class wxTextOutputStream& operator<<(class wxTextOutputStream&, const wxULongLongNative&);
    friend __attribute__ ((visibility("default")))
    class wxTextInputStream& operator>>(class wxTextInputStream&, wxULongLongNative&);


private:
    unsigned long long m_ll;
};

inline
wxLongLongNative& wxLongLongNative::operator=(const wxULongLongNative &ll)
{
    m_ll = ll.GetValue();
    return *this;
}
# 1039 "/usr/include/wx-3.1-unofficial/wx/longlong.h"
inline bool operator<(long l, const wxLongLong& ll) { return ll > l; }
inline bool operator>(long l, const wxLongLong& ll) { return ll < l; }
inline bool operator<=(long l, const wxLongLong& ll) { return ll >= l; }
inline bool operator>=(long l, const wxLongLong& ll) { return ll <= l; }
inline bool operator==(long l, const wxLongLong& ll) { return ll == l; }
inline bool operator!=(long l, const wxLongLong& ll) { return ll != l; }

inline wxLongLong operator+(long l, const wxLongLong& ll) { return ll + l; }
inline wxLongLong operator-(long l, const wxLongLong& ll)
{
    return wxLongLong(l) - ll;
}

inline bool operator<(unsigned long l, const wxULongLong& ull) { return ull > l; }
inline bool operator>(unsigned long l, const wxULongLong& ull) { return ull < l; }
inline bool operator<=(unsigned long l, const wxULongLong& ull) { return ull >= l; }
inline bool operator>=(unsigned long l, const wxULongLong& ull) { return ull <= l; }
inline bool operator==(unsigned long l, const wxULongLong& ull) { return ull == l; }
inline bool operator!=(unsigned long l, const wxULongLong& ull) { return ull != l; }

inline wxULongLong operator+(unsigned long l, const wxULongLong& ull) { return ull + l; }

inline wxLongLong operator-(unsigned long l, const wxULongLong& ull)
{
    const wxULongLong ret = wxULongLong(l) - ull;
    return wxLongLong((wxInt32)ret.GetHi(),ret.GetLo());
}



__attribute__ ((visibility("default"))) class wxTextOutputStream &operator<<(class wxTextOutputStream &stream, unsigned long long value);
__attribute__ ((visibility("default"))) class wxTextOutputStream &operator<<(class wxTextOutputStream &stream, long long value);

__attribute__ ((visibility("default"))) class wxTextInputStream &operator>>(class wxTextInputStream &stream, unsigned long long &value);
__attribute__ ((visibility("default"))) class wxTextInputStream &operator>>(class wxTextInputStream &stream, long long &value);
# 1085 "/usr/include/wx-3.1-unofficial/wx/longlong.h"
namespace std
{







  template<> class numeric_limits<wxLongLong> : public numeric_limits<long long> {};
  template<> class numeric_limits<wxULongLong> : public numeric_limits<unsigned long long> {};


}
# 1114 "/usr/include/wx-3.1-unofficial/wx/longlong.h"
template<>
struct __attribute__ ((visibility("default"))) wxArgNormalizer<wxLongLong>
{
     wxArgNormalizer(wxLongLong value,
                     const wxFormatString *fmt, unsigned index)
         : m_value(value)
     {
         do { if ( !fmt ) break; const int argtype = fmt->GetArgumentType(index); do { if ( (argtype & (wxFormatString::Arg_LongLongInt)) == argtype ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/longlong.h", 1121, __FUNCTION__, "(argtype & (wxFormatString::Arg_LongLongInt)) == argtype", "format specifier doesn't match argument type"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); } while ( (void)0, 0 );
     }

     long long get() const { return m_value.GetValue(); }

     wxLongLong m_value;
};
# 37 "/usr/include/wx-3.1-unofficial/wx/utils.h" 2


# 1 "/usr/include/wx-3.1-unofficial/wx/platinfo.h" 1
# 25 "/usr/include/wx-3.1-unofficial/wx/platinfo.h"
enum wxOperatingSystemId
{
    wxOS_UNKNOWN = 0,

    wxOS_MAC_OS = 1 << 0,
    wxOS_MAC_OSX_DARWIN = 1 << 1,
    wxOS_MAC = wxOS_MAC_OS|wxOS_MAC_OSX_DARWIN,

    wxOS_WINDOWS_9X = 1 << 2,
    wxOS_WINDOWS_NT = 1 << 3,
    wxOS_WINDOWS_MICRO = 1 << 4,
    wxOS_WINDOWS_CE = 1 << 5,
    wxOS_WINDOWS = wxOS_WINDOWS_9X |
                   wxOS_WINDOWS_NT |
                   wxOS_WINDOWS_MICRO |
                   wxOS_WINDOWS_CE,

    wxOS_UNIX_LINUX = 1 << 6,
    wxOS_UNIX_FREEBSD = 1 << 7,
    wxOS_UNIX_OPENBSD = 1 << 8,
    wxOS_UNIX_NETBSD = 1 << 9,
    wxOS_UNIX_SOLARIS = 1 << 10,
    wxOS_UNIX_AIX = 1 << 11,
    wxOS_UNIX_HPUX = 1 << 12,
    wxOS_UNIX = wxOS_UNIX_LINUX |
                wxOS_UNIX_FREEBSD |
                wxOS_UNIX_OPENBSD |
                wxOS_UNIX_NETBSD |
                wxOS_UNIX_SOLARIS |
                wxOS_UNIX_AIX |
                wxOS_UNIX_HPUX,



    wxOS_DOS = 1 << 15,
    wxOS_OS2 = 1 << 16
};



enum wxPortId
{
    wxPORT_UNKNOWN = 0,

    wxPORT_BASE = 1 << 0,

    wxPORT_MSW = 1 << 1,
    wxPORT_MOTIF = 1 << 2,
    wxPORT_GTK = 1 << 3,
    wxPORT_DFB = 1 << 4,
    wxPORT_X11 = 1 << 5,
    wxPORT_PM = 1 << 6,
    wxPORT_OS2 = wxPORT_PM,
    wxPORT_MAC = 1 << 7,
    wxPORT_OSX = wxPORT_MAC,
    wxPORT_COCOA = 1 << 8,
    wxPORT_WINCE = 1 << 9,
    wxPORT_QT = 1 << 10
};





enum wxBitness
{
    wxBITNESS_INVALID = -1,

    wxBITNESS_32,
    wxBITNESS_64,

    wxBITNESS_MAX
};

typedef wxBitness wxArchitecture;

const wxArchitecture
    wxARCH_INVALID = wxBITNESS_INVALID,
    wxARCH_32 = wxBITNESS_32,
    wxARCH_64 = wxBITNESS_64,
    wxARCH_MAX = wxBITNESS_MAX;



enum wxEndianness
{
    wxENDIAN_INVALID = -1,

    wxENDIAN_BIG,
    wxENDIAN_LITTLE,
    wxENDIAN_PDP,

    wxENDIAN_MAX
};


struct wxLinuxDistributionInfo
{
    wxString Id;
    wxString Release;
    wxString CodeName;
    wxString Description;

    bool operator==(const wxLinuxDistributionInfo& ldi) const
    {
        return Id == ldi.Id &&
               Release == ldi.Release &&
               CodeName == ldi.CodeName &&
               Description == ldi.Description;
    }

    bool operator!=(const wxLinuxDistributionInfo& ldi) const
    { return !(*this == ldi); }
};



class wxPlatformId
{
public:



    static wxString GetCurrent()
    {





        return wxString::FromAscii("unix");



    }


    static bool MatchesCurrent(const wxString& s)
    {







        return s == GetCurrent();
    }
};







class __attribute__ ((visibility("default"))) wxPlatformInfo
{
public:
    wxPlatformInfo();
    wxPlatformInfo(wxPortId pid,
                   int tkMajor = -1, int tkMinor = -1,
                   wxOperatingSystemId id = wxOS_UNKNOWN,
                   int osMajor = -1, int osMinor = -1,
                   wxBitness bitness = wxBITNESS_INVALID,
                   wxEndianness endian = wxENDIAN_INVALID,
                   bool usingUniversal = false);



    bool operator==(const wxPlatformInfo &t) const;

    bool operator!=(const wxPlatformInfo &t) const
        { return !(*this == t); }



    static const wxPlatformInfo& Get();






    static wxOperatingSystemId GetOperatingSystemId(const wxString &name);
    static wxPortId GetPortId(const wxString &portname);

    static wxBitness GetBitness(const wxString &bitness);
    __attribute__((deprecated("Use GetBitness() instead")))
    static wxArchitecture GetArch(const wxString &arch);
    static wxEndianness GetEndianness(const wxString &end);




    static wxString GetOperatingSystemFamilyName(wxOperatingSystemId os);
    static wxString GetOperatingSystemIdName(wxOperatingSystemId os);
    static wxString GetPortIdName(wxPortId port, bool usingUniversal);
    static wxString GetPortIdShortName(wxPortId port, bool usingUniversal);

    static wxString GetBitnessName(wxBitness bitness);
    __attribute__((deprecated("Use GetBitnessName() instead")))
    static wxString GetArchName(wxArchitecture arch);
    static wxString GetEndiannessName(wxEndianness end);





    int GetOSMajorVersion() const
        { return m_osVersionMajor; }
    int GetOSMinorVersion() const
        { return m_osVersionMinor; }
    int GetOSMicroVersion() const
        { return m_osVersionMicro; }


    bool CheckOSVersion(int major, int minor, int micro = 0) const;

    int GetToolkitMajorVersion() const
        { return m_tkVersionMajor; }
    int GetToolkitMinorVersion() const
        { return m_tkVersionMinor; }
    int GetToolkitMicroVersion() const
        { return m_tkVersionMicro; }

    bool CheckToolkitVersion(int major, int minor, int micro = 0) const
    {
        return DoCheckVersion(GetToolkitMajorVersion(),
                              GetToolkitMinorVersion(),
                              GetToolkitMicroVersion(),
                              major,
                              minor,
                              micro);
    }

    bool IsUsingUniversalWidgets() const
        { return m_usingUniversal; }

    wxOperatingSystemId GetOperatingSystemId() const
        { return m_os; }
    wxLinuxDistributionInfo GetLinuxDistributionInfo() const
        { return m_ldi; }
    wxPortId GetPortId() const
        { return m_port; }
    wxBitness GetBitness() const
        { return m_bitness; }
    __attribute__((deprecated("Use GetBitness() instead")))
    wxArchitecture GetArchitecture() const
        { return GetBitness(); }
    wxEndianness GetEndianness() const
        { return m_endian; }





    wxString GetOperatingSystemFamilyName() const
        { return GetOperatingSystemFamilyName(m_os); }
    wxString GetOperatingSystemIdName() const
        { return GetOperatingSystemIdName(m_os); }
    wxString GetPortIdName() const
        { return GetPortIdName(m_port, m_usingUniversal); }
    wxString GetPortIdShortName() const
        { return GetPortIdShortName(m_port, m_usingUniversal); }
    wxString GetBitnessName() const
        { return GetBitnessName(m_bitness); }
    __attribute__((deprecated("Use GetBitnessName() instead")))
    wxString GetArchName() const
        { return GetBitnessName(); }
    wxString GetEndiannessName() const
        { return GetEndiannessName(m_endian); }
    wxString GetCpuArchitectureName() const
        { return m_cpuArch; }
    wxString GetOperatingSystemDescription() const
        { return m_osDesc; }
    wxString GetDesktopEnvironment() const
        { return m_desktopEnv; }

    static wxString GetOperatingSystemDirectory();
# 313 "/usr/include/wx-3.1-unofficial/wx/platinfo.h"
    void SetOSVersion(int major, int minor, int micro = 0)
    {
        m_osVersionMajor = major;
        m_osVersionMinor = minor;
        m_osVersionMicro = micro;
    }

    void SetToolkitVersion(int major, int minor, int micro = 0)
    {
        m_tkVersionMajor = major;
        m_tkVersionMinor = minor;
        m_tkVersionMicro = micro;
    }

    void SetOperatingSystemId(wxOperatingSystemId n)
        { m_os = n; }
    void SetOperatingSystemDescription(const wxString& desc)
        { m_osDesc = desc; }
    void SetPortId(wxPortId n)
        { m_port = n; }
    void SetBitness(wxBitness n)
        { m_bitness = n; }
    __attribute__((deprecated("Use SetBitness() instead")))
    void SetArchitecture(wxBitness n)
        { SetBitness(n); }
    void SetEndianness(wxEndianness n)
        { m_endian = n; }
    void SetCpuArchitectureName(const wxString& cpuArch)
        { m_cpuArch = cpuArch; }

    void SetDesktopEnvironment(const wxString& de)
        { m_desktopEnv = de; }
    void SetLinuxDistributionInfo(const wxLinuxDistributionInfo& di)
        { m_ldi = di; }





    bool IsOk() const
    {
        return m_osVersionMajor != -1 && m_osVersionMinor != -1 &&
               m_osVersionMicro != -1 &&
               m_os != wxOS_UNKNOWN &&
               !m_osDesc.IsEmpty() &&
               m_tkVersionMajor != -1 && m_tkVersionMinor != -1 &&
               m_tkVersionMicro != -1 &&
               m_port != wxPORT_UNKNOWN &&
               m_bitness != wxBITNESS_INVALID &&
               m_endian != wxENDIAN_INVALID;


    }


protected:
    static bool DoCheckVersion(int majorCur, int minorCur, int microCur,
                               int major, int minor, int micro)
    {
        return majorCur > major
            || (majorCur == major && minorCur > minor)
            || (majorCur == major && minorCur == minor && microCur >= micro);
    }

    bool m_initializedForCurrentPlatform;

    void InitForCurrentPlatform();







    int m_osVersionMajor,
        m_osVersionMinor,
        m_osVersionMicro;


    wxOperatingSystemId m_os;


    wxString m_osDesc;





    wxString m_desktopEnv;
    wxLinuxDistributionInfo m_ldi;







    int m_tkVersionMajor, m_tkVersionMinor, m_tkVersionMicro;


    wxPortId m_port;


    bool m_usingUniversal;






    wxBitness m_bitness;


    wxEndianness m_endian;


    wxString m_cpuArch;
};
# 40 "/usr/include/wx-3.1-unofficial/wx/utils.h" 2
# 52 "/usr/include/wx-3.1-unofficial/wx/utils.h"
class wxProcess;
class wxFrame;
class wxWindow;
class wxEventLoop;





template<typename T1, typename T2>
inline typename wxImplicitConversionType<T1,T2>::value
wxMax(T1 a, T2 b)
{
    typedef typename wxImplicitConversionType<T1,T2>::value ResultType;



    return static_cast<ResultType>(a) > static_cast<ResultType>(b) ? a : b;
}

template<typename T1, typename T2>
inline typename wxImplicitConversionType<T1,T2>::value
wxMin(T1 a, T2 b)
{
    typedef typename wxImplicitConversionType<T1,T2>::value ResultType;

    return static_cast<ResultType>(a) < static_cast<ResultType>(b) ? a : b;
}

template<typename T1, typename T2, typename T3>
inline typename wxImplicitConversionType3<T1,T2,T3>::value
wxClip(T1 a, T2 b, T3 c)
{
    typedef typename wxImplicitConversionType3<T1,T2,T3>::value ResultType;

    if ( static_cast<ResultType>(a) < static_cast<ResultType>(b) )
        return b;

    if ( static_cast<ResultType>(a) > static_cast<ResultType>(c) )
        return c;

    return a;
}
# 104 "/usr/include/wx-3.1-unofficial/wx/utils.h"
    typedef wxLongLong wxMemorySize;
# 130 "/usr/include/wx-3.1-unofficial/wx/utils.h"
__attribute__ ((visibility("default"))) void wxBell();



__attribute__ ((visibility("default"))) void wxInfoMessageBox(wxWindow* parent);


__attribute__ ((visibility("default"))) wxVersionInfo wxGetLibraryVersionInfo();


__attribute__ ((visibility("default"))) wxString wxGetOsDescription();


__attribute__ ((visibility("default"))) wxOperatingSystemId wxGetOsVersion(int *verMaj = 
# 143 "/usr/include/wx-3.1-unofficial/wx/utils.h" 3 4
                                                                 __null
# 143 "/usr/include/wx-3.1-unofficial/wx/utils.h"
                                                                     ,
                                                    int *verMin = 
# 144 "/usr/include/wx-3.1-unofficial/wx/utils.h" 3 4
                                                                 __null
# 144 "/usr/include/wx-3.1-unofficial/wx/utils.h"
                                                                     ,
                                                    int *verMicro = 
# 145 "/usr/include/wx-3.1-unofficial/wx/utils.h" 3 4
                                                                   __null
# 145 "/usr/include/wx-3.1-unofficial/wx/utils.h"
                                                                       );


__attribute__ ((visibility("default"))) bool wxCheckOsVersion(int majorVsn, int minorVsn = 0, int microVsn = 0);


__attribute__ ((visibility("default"))) bool wxIsPlatformLittleEndian();


__attribute__ ((visibility("default"))) bool wxIsPlatform64Bit();


__attribute__ ((visibility("default"))) wxString wxGetCpuArchitectureName();



__attribute__ ((visibility("default"))) wxLinuxDistributionInfo wxGetLinuxDistributionInfo();



__attribute__ ((visibility("default"))) wxString wxNow();


__attribute__ ((visibility("default"))) wxString wxGetInstallPrefix();

__attribute__ ((visibility("default"))) wxString wxGetDataDir();






__attribute__ ((visibility("default"))) bool wxGetKeyState(wxKeyCode key);




__attribute__ ((visibility("default"))) bool wxSetDetectableAutoRepeat( bool flag );


__attribute__ ((visibility("default"))) wxMouseState wxGetMouseState();
# 211 "/usr/include/wx-3.1-unofficial/wx/utils.h"
class __attribute__ ((visibility("default"))) wxPlatform
{
public:
    wxPlatform() { Init(); }
    wxPlatform(const wxPlatform& platform) { Copy(platform); }
    void operator = (const wxPlatform& platform) { if (&platform != this) Copy(platform); }
    void Copy(const wxPlatform& platform);


    wxPlatform(int defValue) { Init(); m_longValue = (long)defValue; }
    wxPlatform(long defValue) { Init(); m_longValue = defValue; }
    wxPlatform(const wxString& defValue) { Init(); m_stringValue = defValue; }
    wxPlatform(double defValue) { Init(); m_doubleValue = defValue; }

    static wxPlatform If(int platform, long value);
    static wxPlatform IfNot(int platform, long value);
    wxPlatform& ElseIf(int platform, long value);
    wxPlatform& ElseIfNot(int platform, long value);
    wxPlatform& Else(long value);

    static wxPlatform If(int platform, int value) { return If(platform, (long)value); }
    static wxPlatform IfNot(int platform, int value) { return IfNot(platform, (long)value); }
    wxPlatform& ElseIf(int platform, int value) { return ElseIf(platform, (long) value); }
    wxPlatform& ElseIfNot(int platform, int value) { return ElseIfNot(platform, (long) value); }
    wxPlatform& Else(int value) { return Else((long) value); }

    static wxPlatform If(int platform, double value);
    static wxPlatform IfNot(int platform, double value);
    wxPlatform& ElseIf(int platform, double value);
    wxPlatform& ElseIfNot(int platform, double value);
    wxPlatform& Else(double value);

    static wxPlatform If(int platform, const wxString& value);
    static wxPlatform IfNot(int platform, const wxString& value);
    wxPlatform& ElseIf(int platform, const wxString& value);
    wxPlatform& ElseIfNot(int platform, const wxString& value);
    wxPlatform& Else(const wxString& value);

    long GetInteger() const { return m_longValue; }
    const wxString& GetString() const { return m_stringValue; }
    double GetDouble() const { return m_doubleValue; }

    operator int() const { return (int) GetInteger(); }
    operator long() const { return GetInteger(); }
    operator double() const { return GetDouble(); }
    operator const wxString&() const { return GetString(); }

    static void AddPlatform(int platform);
    static bool Is(int platform);
    static void ClearPlatforms();

private:

    void Init() { m_longValue = 0; m_doubleValue = 0.0; }

    long m_longValue;
    double m_doubleValue;
    wxString m_stringValue;
    static wxArrayInt* sm_customPlatforms;
};


inline bool wxPlatformIs(int platform) { return wxPlatform::Is(platform); }






__attribute__ ((visibility("default"))) void wxRegisterId(wxWindowID id);


__attribute__ ((visibility("default"))) wxWindowID wxGetCurrentId();


__attribute__ ((visibility("default"))) wxWindowID wxNewId();






__attribute__ ((visibility("default"))) int wxHexToDec(const wxString& buf);


inline int wxHexToDec(const char* buf)
{
    int firstDigit, secondDigit;

    if (buf[0] >= 'A')
        firstDigit = buf[0] - 'A' + 10;
    else if (buf[0] >= '0')
        firstDigit = buf[0] - '0';
    else
        firstDigit = -1;

    if ( firstDigit >= 0 && firstDigit <= 15 ) {} else { do { if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/utils.h", 307, __FUNCTION__, "\"firstDigit >= 0 && firstDigit <= 15\"", L"Invalid argument"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); return -1; } struct wxDummyCheckStruct307;

    if (buf[1] >= 'A')
        secondDigit = buf[1] - 'A' + 10;
    else if (buf[1] >= '0')
        secondDigit = buf[1] - '0';
    else
        secondDigit = -1;

    if ( secondDigit >= 0 && secondDigit <= 15 ) {} else { do { if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/utils.h", 316, __FUNCTION__, "\"secondDigit >= 0 && secondDigit <= 15\"", L"Invalid argument"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); return -1; } struct wxDummyCheckStruct316;

    return firstDigit * 16 + secondDigit;
}



__attribute__ ((visibility("default"))) void wxDecToHex(unsigned char dec, wxChar *buf);
__attribute__ ((visibility("default"))) void wxDecToHex(unsigned char dec, char* ch1, char* ch2);
__attribute__ ((visibility("default"))) wxString wxDecToHex(unsigned char dec);
# 334 "/usr/include/wx-3.1-unofficial/wx/utils.h"
enum
{

    wxEXEC_ASYNC = 0,


    wxEXEC_SYNC = 1,



    wxEXEC_SHOW_CONSOLE = 2,



    wxEXEC_NOHIDE = wxEXEC_SHOW_CONSOLE,






    wxEXEC_MAKE_GROUP_LEADER = 4,




    wxEXEC_NODISABLE = 8,




    wxEXEC_NOEVENTS = 16,



    wxEXEC_HIDE_CONSOLE = 32,


    wxEXEC_BLOCK = wxEXEC_SYNC | wxEXEC_NOEVENTS
};


typedef wxStringToStringHashMap wxEnvVariableHashMap;



struct wxExecuteEnv
{
    wxString cwd;
    wxEnvVariableHashMap env;
};






__attribute__ ((visibility("default"))) long wxExecute(const wxString& command,
                                int flags = wxEXEC_ASYNC,
                                wxProcess *process = 
# 393 "/usr/include/wx-3.1-unofficial/wx/utils.h" 3 4
                                                    __null
# 393 "/usr/include/wx-3.1-unofficial/wx/utils.h"
                                                        ,
                                const wxExecuteEnv *env = 
# 394 "/usr/include/wx-3.1-unofficial/wx/utils.h" 3 4
                                                         __null
# 394 "/usr/include/wx-3.1-unofficial/wx/utils.h"
                                                             );
__attribute__ ((visibility("default"))) long wxExecute(const char* const* argv,
                                int flags = wxEXEC_ASYNC,
                                wxProcess *process = 
# 397 "/usr/include/wx-3.1-unofficial/wx/utils.h" 3 4
                                                    __null
# 397 "/usr/include/wx-3.1-unofficial/wx/utils.h"
                                                        ,
                                const wxExecuteEnv *env = 
# 398 "/usr/include/wx-3.1-unofficial/wx/utils.h" 3 4
                                                         __null
# 398 "/usr/include/wx-3.1-unofficial/wx/utils.h"
                                                             );

__attribute__ ((visibility("default"))) long wxExecute(const wchar_t* const* argv,
                                int flags = wxEXEC_ASYNC,
                                wxProcess *process = 
# 402 "/usr/include/wx-3.1-unofficial/wx/utils.h" 3 4
                                                    __null
# 402 "/usr/include/wx-3.1-unofficial/wx/utils.h"
                                                        ,
                                const wxExecuteEnv *env = 
# 403 "/usr/include/wx-3.1-unofficial/wx/utils.h" 3 4
                                                         __null
# 403 "/usr/include/wx-3.1-unofficial/wx/utils.h"
                                                             );




__attribute__ ((visibility("default"))) long wxExecute(const wxString& command,
                                wxArrayString& output,
                                int flags = 0,
                                const wxExecuteEnv *env = 
# 411 "/usr/include/wx-3.1-unofficial/wx/utils.h" 3 4
                                                         __null
# 411 "/usr/include/wx-3.1-unofficial/wx/utils.h"
                                                             );


__attribute__ ((visibility("default"))) long wxExecute(const wxString& command,
                                wxArrayString& output,
                                wxArrayString& error,
                                int flags = 0,
                                const wxExecuteEnv *env = 
# 418 "/usr/include/wx-3.1-unofficial/wx/utils.h" 3 4
                                                         __null
# 418 "/usr/include/wx-3.1-unofficial/wx/utils.h"
                                                             );
# 427 "/usr/include/wx-3.1-unofficial/wx/utils.h"
enum wxSignal
{
    wxSIGNONE = 0,
    wxSIGHUP,
    wxSIGINT,
    wxSIGQUIT,
    wxSIGILL,
    wxSIGTRAP,
    wxSIGABRT,
    wxSIGIOT = wxSIGABRT,
    wxSIGEMT,
    wxSIGFPE,
    wxSIGKILL,
    wxSIGBUS,
    wxSIGSEGV,
    wxSIGSYS,
    wxSIGPIPE,
    wxSIGALRM,
    wxSIGTERM


};

enum wxKillError
{
    wxKILL_OK,
    wxKILL_BAD_SIGNAL,
    wxKILL_ACCESS_DENIED,
    wxKILL_NO_PROCESS,
    wxKILL_ERROR
};

enum wxKillFlags
{
    wxKILL_NOCHILDREN = 0,
    wxKILL_CHILDREN = 1
};

enum wxShutdownFlags
{
    wxSHUTDOWN_FORCE = 1,
    wxSHUTDOWN_POWEROFF = 2,
    wxSHUTDOWN_REBOOT = 4,
    wxSHUTDOWN_LOGOFF = 8
};


__attribute__ ((visibility("default"))) bool wxShutdown(int flags = wxSHUTDOWN_POWEROFF);





__attribute__ ((visibility("default"))) int wxKill(long pid,
                       wxSignal sig = wxSIGTERM,
                       wxKillError *rc = 
# 482 "/usr/include/wx-3.1-unofficial/wx/utils.h" 3 4
                                        __null
# 482 "/usr/include/wx-3.1-unofficial/wx/utils.h"
                                            ,
                       int flags = wxKILL_NOCHILDREN);



__attribute__ ((visibility("default"))) bool wxShell(const wxString& command = wxEmptyString);



__attribute__ ((visibility("default"))) bool wxShell(const wxString& command, wxArrayString& output);


__attribute__ ((visibility("default"))) void wxSleep(int nSecs);


__attribute__ ((visibility("default"))) void wxMilliSleep(unsigned long milliseconds);


__attribute__ ((visibility("default"))) void wxMicroSleep(unsigned long microseconds);







__attribute__ ((visibility("default"))) unsigned long wxGetProcessId();


__attribute__ ((visibility("default"))) wxMemorySize wxGetFreeMemory();




__attribute__ ((visibility("default"))) bool wxHandleFatalExceptions(bool doit = true);
# 526 "/usr/include/wx-3.1-unofficial/wx/utils.h"
__attribute__ ((visibility("default"))) bool wxGetEnv(const wxString& var, wxString *value);


__attribute__ ((visibility("default"))) bool wxSetEnv(const wxString& var, const wxString& value);


__attribute__ ((visibility("default"))) bool wxUnsetEnv(const wxString& var);
# 559 "/usr/include/wx-3.1-unofficial/wx/utils.h"
__attribute__ ((visibility("default"))) bool wxGetEnvMap(wxEnvVariableHashMap *map);
# 568 "/usr/include/wx-3.1-unofficial/wx/utils.h"
__attribute__ ((visibility("default"))) bool wxGetEmailAddress(wxChar *buf, int maxSize);
__attribute__ ((visibility("default"))) wxString wxGetEmailAddress();


__attribute__ ((visibility("default"))) bool wxGetHostName(wxChar *buf, int maxSize);
__attribute__ ((visibility("default"))) wxString wxGetHostName();


__attribute__ ((visibility("default"))) wxString wxGetFullHostName();
__attribute__ ((visibility("default"))) bool wxGetFullHostName(wxChar *buf, int maxSize);


__attribute__ ((visibility("default"))) bool wxGetUserId(wxChar *buf, int maxSize);
__attribute__ ((visibility("default"))) wxString wxGetUserId();


__attribute__ ((visibility("default"))) bool wxGetUserName(wxChar *buf, int maxSize);
__attribute__ ((visibility("default"))) wxString wxGetUserName();


__attribute__ ((visibility("default"))) wxString wxGetHomeDir();
__attribute__ ((visibility("default"))) const wxChar* wxGetHomeDir(wxString *pstr);



__attribute__ ((visibility("default"))) wxString wxGetUserHome(const wxString& user = wxEmptyString);



    typedef wxLongLong wxDiskspaceSize_t;





__attribute__ ((visibility("default"))) bool wxGetDiskSpace(const wxString& path,
                                     wxDiskspaceSize_t *pTotal = 
# 604 "/usr/include/wx-3.1-unofficial/wx/utils.h" 3 4
                                                                __null
# 604 "/usr/include/wx-3.1-unofficial/wx/utils.h"
                                                                    ,
                                     wxDiskspaceSize_t *pFree = 
# 605 "/usr/include/wx-3.1-unofficial/wx/utils.h" 3 4
                                                               __null
# 605 "/usr/include/wx-3.1-unofficial/wx/utils.h"
                                                                   );
# 633 "/usr/include/wx-3.1-unofficial/wx/utils.h"
enum
{
    wxBROWSER_NEW_WINDOW = 0x01,
    wxBROWSER_NOBUSYCURSOR = 0x02
};


__attribute__ ((visibility("default"))) bool wxLaunchDefaultBrowser(const wxString& url, int flags = 0);


__attribute__ ((visibility("default"))) bool wxLaunchDefaultApplication(const wxString& path, int flags = 0);






enum
{

    wxStrip_Mnemonics = 1,


    wxStrip_Accel = 2,



    wxStrip_CJKMnemonics = 4,



    wxStrip_All = wxStrip_Mnemonics | wxStrip_Accel,




    wxStrip_Menu = wxStrip_All | wxStrip_CJKMnemonics
};


__attribute__ ((visibility("default"))) wxString
wxStripMenuCodes(const wxString& str, int flags = wxStrip_All);






__attribute__ ((visibility("default"))) int wxFindMenuItemId(wxFrame *frame, const wxString& menuString, const wxString& itemString);



__attribute__ ((visibility("default"))) wxWindow* wxGenericFindWindowAtPoint(const wxPoint& pt);
__attribute__ ((visibility("default"))) wxWindow* wxFindWindowAtPoint(const wxPoint& pt);






__attribute__ ((visibility("default"))) wxWindow* wxFindWindowByLabel(const wxString& title, wxWindow *parent = 
# 693 "/usr/include/wx-3.1-unofficial/wx/utils.h" 3 4
                                                                                        __null
# 693 "/usr/include/wx-3.1-unofficial/wx/utils.h"
                                                                                            );




__attribute__ ((visibility("default"))) wxWindow* wxFindWindowByName(const wxString& name, wxWindow *parent = 
# 698 "/usr/include/wx-3.1-unofficial/wx/utils.h" 3 4
                                                                                      __null
# 698 "/usr/include/wx-3.1-unofficial/wx/utils.h"
                                                                                          );






__attribute__ ((visibility("default"))) bool wxSafeYield(wxWindow *win = 
# 705 "/usr/include/wx-3.1-unofficial/wx/utils.h" 3 4
                                                 __null
# 705 "/usr/include/wx-3.1-unofficial/wx/utils.h"
                                                     , bool onlyIfNeeded = false);


__attribute__ ((visibility("default"))) void wxEnableTopLevelWindows(bool enable = true);



__attribute__ ((visibility("default"))) bool wxCheckForInterrupt(wxWindow *wnd);


__attribute__ ((visibility("default"))) void wxFlushEvents();



class __attribute__ ((visibility("default"))) wxWindowDisabler
{
public:


    wxWindowDisabler(bool disable = true);


    wxWindowDisabler(wxWindow *winToSkip);


    ~wxWindowDisabler();

private:

    void DoDisable(wxWindow *winToSkip = 
# 734 "/usr/include/wx-3.1-unofficial/wx/utils.h" 3 4
                                        __null
# 734 "/usr/include/wx-3.1-unofficial/wx/utils.h"
                                            );







    wxVector<wxWindow*> m_winDisabled;
    bool m_disabled;

    private: wxWindowDisabler(const wxWindowDisabler&) = delete; wxWindowDisabler& operator=(const wxWindowDisabler&) = delete;
};






__attribute__ ((visibility("default"))) void wxBeginBusyCursor(const wxCursor *cursor = wxStockGDI::GetCursor(wxStockGDI::CURSOR_HOURGLASS));


__attribute__ ((visibility("default"))) void wxEndBusyCursor();


__attribute__ ((visibility("default"))) bool wxIsBusy();


class __attribute__ ((visibility("default"))) wxBusyCursor
{
public:
    wxBusyCursor(const wxCursor* cursor = wxStockGDI::GetCursor(wxStockGDI::CURSOR_HOURGLASS))
        { wxBeginBusyCursor(cursor); }
    ~wxBusyCursor()
        { wxEndBusyCursor(); }






    static const wxCursor &GetStoredCursor();
    static const wxCursor GetBusyCursor();
};

void __attribute__ ((visibility("default"))) wxGetMousePosition( int* x, int* y );
# 788 "/usr/include/wx-3.1-unofficial/wx/utils.h"
    __attribute__ ((visibility("default"))) void *wxGetDisplay();
    enum wxDisplayType
    {
        wxDisplayNone,
        wxDisplayX11,
        wxDisplayWayland
    };
    struct wxDisplayInfo
    {
        void* dpy;
        wxDisplayType type;
    };
    __attribute__ ((visibility("default"))) wxDisplayInfo wxGetDisplayInfo();
# 810 "/usr/include/wx-3.1-unofficial/wx/utils.h"
inline struct _XDisplay *wxGetX11Display()
{
    return (_XDisplay *)wxGetDisplay();
}
# 829 "/usr/include/wx-3.1-unofficial/wx/utils.h"
__attribute__ ((visibility("default"))) bool wxYield();




__attribute__ ((visibility("default"))) bool wxYieldIfNeeded();
# 76 "/usr/include/wx-3.1-unofficial/wx/cursor.h" 2
# 94 "/usr/include/wx-3.1-unofficial/wx/cursor.h"
class wxBusyCursorSuspender
{
public:
    wxBusyCursorSuspender()
    {
        if( wxIsBusy() )
        {
            wxSetCursor( wxBusyCursor::GetStoredCursor() );
        }
    }
    ~wxBusyCursorSuspender()
    {
        if( wxIsBusy() )
        {
            wxSetCursor( wxBusyCursor::GetBusyCursor() );
        }
    }
};
# 23 "/usr/include/wx-3.1-unofficial/wx/event.h" 2




# 1 "/usr/include/wx-3.1-unofficial/wx/thread.h" 1
# 20 "/usr/include/wx-3.1-unofficial/wx/thread.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 21 "/usr/include/wx-3.1-unofficial/wx/thread.h" 2







enum wxMutexError
{
    wxMUTEX_NO_ERROR = 0,
    wxMUTEX_INVALID,
    wxMUTEX_DEAD_LOCK,
    wxMUTEX_BUSY,
    wxMUTEX_UNLOCKED,
    wxMUTEX_TIMEOUT,
    wxMUTEX_MISC_ERROR
};

enum wxCondError
{
    wxCOND_NO_ERROR = 0,
    wxCOND_INVALID,
    wxCOND_TIMEOUT,
    wxCOND_MISC_ERROR
};

enum wxSemaError
{
    wxSEMA_NO_ERROR = 0,
    wxSEMA_INVALID,
    wxSEMA_BUSY,
    wxSEMA_TIMEOUT,
    wxSEMA_OVERFLOW,
    wxSEMA_MISC_ERROR
};

enum wxThreadError
{
    wxTHREAD_NO_ERROR = 0,
    wxTHREAD_NO_RESOURCE,
    wxTHREAD_RUNNING,
    wxTHREAD_NOT_RUNNING,
    wxTHREAD_KILLED,
    wxTHREAD_MISC_ERROR
};

enum wxThreadKind
{
    wxTHREAD_DETACHED,
    wxTHREAD_JOINABLE
};

enum wxThreadWait
{
    wxTHREAD_WAIT_BLOCK,
    wxTHREAD_WAIT_YIELD,







    wxTHREAD_WAIT_DEFAULT = wxTHREAD_WAIT_BLOCK

};


enum
{
    WXTHREAD_MIN_PRIORITY = wxPRIORITY_MIN,
    WXTHREAD_DEFAULT_PRIORITY = wxPRIORITY_DEFAULT,
    WXTHREAD_MAX_PRIORITY = wxPRIORITY_MAX
};
# 112 "/usr/include/wx-3.1-unofficial/wx/thread.h"
enum wxMutexType
{

    wxMUTEX_DEFAULT,


    wxMUTEX_RECURSIVE
};


class wxThreadHelper;
class wxConditionInternal;
class wxMutexInternal;
class wxSemaphoreInternal;
class wxThreadInternal;
# 137 "/usr/include/wx-3.1-unofficial/wx/thread.h"
class __attribute__ ((visibility("default"))) wxMutex
{
public:




    wxMutex(wxMutexType mutexType = wxMUTEX_DEFAULT);


    ~wxMutex();


    bool IsOk() const;
# 160 "/usr/include/wx-3.1-unofficial/wx/thread.h"
    wxMutexError Lock();



    wxMutexError LockTimeout(unsigned long ms);



    wxMutexError TryLock();


    wxMutexError Unlock();

protected:
    wxMutexInternal *m_internal;

    friend class wxConditionInternal;

    private: wxMutex(const wxMutex&) = delete; wxMutex& operator=(const wxMutex&) = delete;
};




class __attribute__ ((visibility("default"))) wxMutexLocker
{
public:

    wxMutexLocker(wxMutex& mutex)
        : m_isOk(false), m_mutex(mutex)
        { m_isOk = ( m_mutex.Lock() == wxMUTEX_NO_ERROR ); }


    bool IsOk() const
        { return m_isOk; }


    ~wxMutexLocker()
        { if ( IsOk() ) m_mutex.Unlock(); }

private:

    wxMutexLocker(const wxMutexLocker&);
    wxMutexLocker& operator=(const wxMutexLocker&);

    bool m_isOk;
    wxMutex& m_mutex;
};
# 231 "/usr/include/wx-3.1-unofficial/wx/thread.h"
enum wxCriticalSectionType
{

    wxCRITSEC_DEFAULT,


    wxCRITSEC_NON_RECURSIVE
};



class __attribute__ ((visibility("default"))) wxCriticalSection
{
public:

    __attribute__ ((visibility("default"))) inline wxCriticalSection( wxCriticalSectionType critSecType = wxCRITSEC_DEFAULT );
    __attribute__ ((visibility("default"))) inline ~wxCriticalSection();

    __attribute__ ((visibility("default"))) inline void Enter();


    __attribute__ ((visibility("default"))) inline bool TryEnter();


    __attribute__ ((visibility("default"))) inline void Leave();

private:

    wxMutex m_mutex;
# 282 "/usr/include/wx-3.1-unofficial/wx/thread.h"
    private: wxCriticalSection(const wxCriticalSection&) = delete; wxCriticalSection& operator=(const wxCriticalSection&) = delete;
};



    inline wxCriticalSection::wxCriticalSection( wxCriticalSectionType critSecType )
       : m_mutex( critSecType == wxCRITSEC_DEFAULT ? wxMUTEX_RECURSIVE : wxMUTEX_DEFAULT ) { }
    inline wxCriticalSection::~wxCriticalSection() { }

    inline void wxCriticalSection::Enter() { (void)m_mutex.Lock(); }
    inline bool wxCriticalSection::TryEnter() { return m_mutex.TryLock() == wxMUTEX_NO_ERROR; }
    inline void wxCriticalSection::Leave() { (void)m_mutex.Unlock(); }







class __attribute__ ((visibility("default"))) wxCriticalSectionLocker
{
public:
    wxCriticalSectionLocker(wxCriticalSection& cs)
        : m_critsect(cs)
    {
        m_critsect.Enter();
    }

    ~wxCriticalSectionLocker()
    {
        m_critsect.Leave();
    }

private:
    wxCriticalSection& m_critsect;

    private: wxCriticalSectionLocker(const wxCriticalSectionLocker&) = delete; wxCriticalSectionLocker& operator=(const wxCriticalSectionLocker&) = delete;
};






class __attribute__ ((visibility("default"))) wxCondition
{
public:


    wxCondition(wxMutex& mutex);


    ~wxCondition();


    bool IsOk() const;







    wxCondError Wait();


    template<typename Functor>
    wxCondError Wait(const Functor& predicate)
    {
        while ( !predicate() )
        {
            wxCondError e = Wait();
            if ( e != wxCOND_NO_ERROR )
                return e;
        }
        return wxCOND_NO_ERROR;
    }
# 367 "/usr/include/wx-3.1-unofficial/wx/thread.h"
    wxCondError WaitTimeout(unsigned long milliseconds);







    wxCondError Signal();







    wxCondError Broadcast();

private:
    wxConditionInternal *m_internal;

    private: wxCondition(const wxCondition&) = delete; wxCondition& operator=(const wxCondition&) = delete;
};






class __attribute__ ((visibility("default"))) wxSemaphore
{
public:


    wxSemaphore( int initialcount = 0, int maxcount = 0 );


    ~wxSemaphore();


    bool IsOk() const;




    wxSemaError Wait();



    wxSemaError TryWait();



    wxSemaError WaitTimeout(unsigned long milliseconds);


    wxSemaError Post();

private:
    wxSemaphoreInternal *m_internal;

    private: wxSemaphore(const wxSemaphore&) = delete; wxSemaphore& operator=(const wxSemaphore&) = delete;
};
# 448 "/usr/include/wx-3.1-unofficial/wx/thread.h"
   typedef unsigned long wxThreadIdType;


class __attribute__ ((visibility("default"))) wxThread
{
public:

    typedef void *ExitCode;







    static wxThread *This();






    static bool IsMain()
    {
        return !ms_idMainThread || GetCurrentId() == ms_idMainThread;
    }


    static wxThreadIdType GetMainId() { return ms_idMainThread; }


    static void Yield();




    static void Sleep(unsigned long milliseconds);





    static int GetCPUCount();




    static wxThreadIdType GetCurrentId();
# 504 "/usr/include/wx-3.1-unofficial/wx/thread.h"
    static bool SetConcurrency(size_t level);



    wxThread(wxThreadKind kind = wxTHREAD_DETACHED);







    wxThreadError Create(unsigned int stackSize = 0);




    wxThreadError Run();
# 533 "/usr/include/wx-3.1-unofficial/wx/thread.h"
    wxThreadError Delete(ExitCode *rc = 
# 533 "/usr/include/wx-3.1-unofficial/wx/thread.h" 3 4
                                       __null
# 533 "/usr/include/wx-3.1-unofficial/wx/thread.h"
                                           ,
                         wxThreadWait waitMode = wxTHREAD_WAIT_DEFAULT);





    ExitCode Wait(wxThreadWait waitMode = wxTHREAD_WAIT_DEFAULT);
# 550 "/usr/include/wx-3.1-unofficial/wx/thread.h"
    wxThreadError Kill();



    wxThreadError Pause();


    wxThreadError Resume();




    void SetPriority(unsigned int prio);


    unsigned int GetPriority() const;



    bool IsAlive() const;

    bool IsRunning() const;

    bool IsPaused() const;


    bool IsDetached() const { return m_isDetached; }



    wxThreadIdType GetId() const;






    wxThreadKind GetKind() const
        { return m_isDetached ? wxTHREAD_DETACHED : wxTHREAD_JOINABLE; }




    virtual bool TestDestroy();



    virtual ~wxThread();

protected:

    void Exit(ExitCode exitcode = 
# 601 "/usr/include/wx-3.1-unofficial/wx/thread.h" 3 4
                                 __null
# 601 "/usr/include/wx-3.1-unofficial/wx/thread.h"
                                     );



    virtual void *Entry() = 0;


    void *CallEntry();







    virtual void OnDelete() {}



    virtual void OnKill() {}




    virtual void OnExit() {}

private:

    wxThread(const wxThread&);
    wxThread& operator=(const wxThread&);

    friend class wxThreadInternal;
    friend class wxThreadModule;



    static wxThreadIdType ms_idMainThread;


    wxThreadInternal *m_internal;


    mutable wxCriticalSection m_critsect;


    bool m_isDetached;
};




class wxThreadHelperThread : public wxThread
{
public:


    wxThreadHelperThread(wxThreadHelper& owner, wxThreadKind kind)
        : wxThread(kind), m_owner(owner)
        { }

protected:

    virtual void *Entry() override;

private:

    wxThreadHelper& m_owner;


    wxThreadHelperThread(const wxThreadHelperThread&);
    wxThreadHelperThread& operator=(const wxThreadHelperThread&);
};







class wxThreadHelper
{
private:
    void KillThread()
    {




        wxCriticalSectionLocker locker(m_critSection);

        if ( m_thread )
        {
            m_thread->Kill();

            if ( m_kind == wxTHREAD_JOINABLE )
              delete m_thread;

            m_thread = 
# 698 "/usr/include/wx-3.1-unofficial/wx/thread.h" 3 4
                      __null
# 698 "/usr/include/wx-3.1-unofficial/wx/thread.h"
                          ;
        }
    }

public:

    wxThreadHelper(wxThreadKind kind = wxTHREAD_JOINABLE)
        : m_thread(
# 705 "/usr/include/wx-3.1-unofficial/wx/thread.h" 3 4
                  __null
# 705 "/usr/include/wx-3.1-unofficial/wx/thread.h"
                      ), m_kind(kind) { }


    virtual ~wxThreadHelper() { KillThread(); }







    wxThreadError CreateThread(wxThreadKind kind = wxTHREAD_JOINABLE,
                               unsigned int stackSize = 0)
    {
        KillThread();

        m_kind = kind;
        m_thread = new wxThreadHelperThread(*this, m_kind);

        return m_thread->Create(stackSize);
    }



    virtual void *Entry() = 0;


    wxThread *GetThread() const
    {
        wxCriticalSectionLocker locker(m_critSection);

        wxThread* thread = m_thread;

        return thread;
    }

protected:
    wxThread *m_thread;
    wxThreadKind m_kind;
    mutable wxCriticalSection m_critSection;

    friend class wxThreadHelperThread;
};







inline void *wxThreadHelperThread::Entry()
{
    void * const result = m_owner.Entry();

    wxCriticalSectionLocker locker(m_owner.m_critSection);





    if ( m_owner.m_kind == wxTHREAD_DETACHED )
        m_owner.m_thread = 
# 766 "/usr/include/wx-3.1-unofficial/wx/thread.h" 3 4
                          __null
# 766 "/usr/include/wx-3.1-unofficial/wx/thread.h"
                              ;

    return result;
}






void __attribute__ ((visibility("default"))) wxMutexGuiEnter();
void __attribute__ ((visibility("default"))) wxMutexGuiLeave();
# 789 "/usr/include/wx-3.1-unofficial/wx/thread.h"
inline bool wxIsMainThread() { return wxThread::IsMain(); }
# 833 "/usr/include/wx-3.1-unofficial/wx/thread.h"
class __attribute__ ((visibility("default"))) wxMutexGuiLocker
{
public:
    wxMutexGuiLocker() { wxMutexGuiEnter(); }
   ~wxMutexGuiLocker() { wxMutexGuiLeave(); }
};
# 28 "/usr/include/wx-3.1-unofficial/wx/event.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/tracker.h" 1
# 13 "/usr/include/wx-3.1-unofficial/wx/tracker.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/tracker.h" 2

class wxEventConnectionRef;



class __attribute__ ((visibility("default"))) wxTrackerNode
{
public:
    wxTrackerNode() : m_nxt(
# 22 "/usr/include/wx-3.1-unofficial/wx/tracker.h" 3 4
                           __null
# 22 "/usr/include/wx-3.1-unofficial/wx/tracker.h"
                               ) { }
    virtual ~wxTrackerNode() { }

    virtual void OnObjectDestroy() = 0;

    virtual wxEventConnectionRef *ToEventConnection() { return 
# 27 "/usr/include/wx-3.1-unofficial/wx/tracker.h" 3 4
                                                              __null
# 27 "/usr/include/wx-3.1-unofficial/wx/tracker.h"
                                                                  ; }

private:
    wxTrackerNode *m_nxt;

    friend class wxTrackable;
    friend class wxEvtHandler;
};


class __attribute__ ((visibility("default"))) wxTrackable
{
public:
    void AddNode(wxTrackerNode *prn)
    {
        prn->m_nxt = m_first;
        m_first = prn;
    }

    void RemoveNode(wxTrackerNode *prn)
    {
        for ( wxTrackerNode **pprn = &m_first; *pprn; pprn = &(*pprn)->m_nxt )
        {
            if ( *pprn == prn )
            {
                *pprn = prn->m_nxt;
                return;
            }
        }

        do { if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/tracker.h", 57, __FUNCTION__, "\"Assert failure\"", "removing invalid tracker node"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );
    }

    wxTrackerNode *GetFirst() const { return m_first; }

protected:



    wxTrackable() : m_first(
# 66 "/usr/include/wx-3.1-unofficial/wx/tracker.h" 3 4
                           __null
# 66 "/usr/include/wx-3.1-unofficial/wx/tracker.h"
                               ) { }



    wxTrackable(const wxTrackable& ) : m_first(
# 70 "/usr/include/wx-3.1-unofficial/wx/tracker.h" 3 4
                                                             __null
# 70 "/usr/include/wx-3.1-unofficial/wx/tracker.h"
                                                                 ) { }
    wxTrackable& operator=(const wxTrackable& ) { return *this; }




    ~wxTrackable()
    {

        while ( m_first )
        {
            wxTrackerNode * const first = m_first;
            m_first = first->m_nxt;
            first->OnObjectDestroy();
        }
    }

    wxTrackerNode *m_first;
};
# 29 "/usr/include/wx-3.1-unofficial/wx/event.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/typeinfo.h" 1
# 25 "/usr/include/wx-3.1-unofficial/wx/typeinfo.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 26 "/usr/include/wx-3.1-unofficial/wx/typeinfo.h" 2
# 63 "/usr/include/wx-3.1-unofficial/wx/typeinfo.h"
class wxTypeIdentifier
{
public:
    wxTypeIdentifier(const char* className)
    {
        m_className = className;
    }

    bool operator==(const wxTypeIdentifier& other) const
    {
        return strcmp(m_className, other.m_className) == 0;
    }

    bool operator!=(const wxTypeIdentifier& other) const
    {
        return !(*this == other);
    }
private:
    const char* m_className;
};
# 30 "/usr/include/wx-3.1-unofficial/wx/event.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/any.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/any.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/any.h" 2
# 25 "/usr/include/wx-3.1-unofficial/wx/any.h"
enum
{
    WX_ANY_VALUE_BUFFER_SIZE = 16
};

union wxAnyValueBuffer
{
    union Alignment
    {

        wxInt64 m_int64;

        long double m_longDouble;
        void ( *m_funcPtr )(void);
        void ( wxAnyValueBuffer::*m_mFuncPtr )(void);
    } m_alignment;

    void* m_ptr;
    wxByte m_buffer[WX_ANY_VALUE_BUFFER_SIZE];

    wxAnyValueBuffer()
    {
        m_ptr = 
# 47 "/usr/include/wx-3.1-unofficial/wx/any.h" 3 4
               __null
# 47 "/usr/include/wx-3.1-unofficial/wx/any.h"
                   ;
    }
};






class __attribute__ ((visibility("default"))) wxAnyValueType
{
   
public:



    wxAnyValueType()
    {
    }




    virtual ~wxAnyValueType()
    {
    }




    virtual bool IsSameType(const wxAnyValueType* otherType) const = 0;





    virtual void DeleteValue(wxAnyValueBuffer& buf) const = 0;
# 95 "/usr/include/wx-3.1-unofficial/wx/any.h"
    virtual void CopyBuffer(const wxAnyValueBuffer& src,
                            wxAnyValueBuffer& dst) const = 0;





    virtual bool ConvertValue(const wxAnyValueBuffer& src,
                              wxAnyValueType* dstType,
                              wxAnyValueBuffer& dst) const = 0;







    template <typename T>
    bool CheckType() const;




private:
};
# 130 "/usr/include/wx-3.1-unofficial/wx/any.h"
class wxAnyValueTypeScopedPtr
{
public:
    wxAnyValueTypeScopedPtr(wxAnyValueType* ptr) : m_ptr(ptr) { }
    ~wxAnyValueTypeScopedPtr() { delete m_ptr; }
    wxAnyValueType* get() const { return m_ptr; }
private:
    wxAnyValueType* m_ptr;
};
# 193 "/usr/include/wx-3.1-unofficial/wx/any.h"
namespace wxPrivate
{

template<typename T>
class wxAnyValueTypeOpsInplace
{
public:
    static void DeleteValue(wxAnyValueBuffer& buf)
    {
        GetValue(buf).~T();
    }

    static void SetValue(const T& value,
                         wxAnyValueBuffer& buf)
    {

        void* const place = buf.m_buffer;
        ::new(place) T(value);
    }

    static const T& GetValue(const wxAnyValueBuffer& buf)
    {



        union
        {
            const T* ptr;
            const wxByte *buf;
        } u;
        u.buf = buf.m_buffer;

        return *u.ptr;
    }
};


template<typename T>
class wxAnyValueTypeOpsGeneric
{
public:
    template<typename T2>
    class DataHolder
    {
    public:
        DataHolder(const T2& value)
            : m_value(value)
        {
        }
        virtual ~DataHolder() { }

        T2 m_value;
    private:
        private: DataHolder(const DataHolder&) = delete; DataHolder& operator=(const DataHolder&) = delete;
    };

    static void DeleteValue(wxAnyValueBuffer& buf)
    {
        DataHolder<T>* holder = static_cast<DataHolder<T>*>(buf.m_ptr);
        delete holder;
    }

    static void SetValue(const T& value,
                         wxAnyValueBuffer& buf)
    {
        DataHolder<T>* holder = new DataHolder<T>(value);
        buf.m_ptr = holder;
    }

    static const T& GetValue(const wxAnyValueBuffer& buf)
    {
        DataHolder<T>* holder = static_cast<DataHolder<T>*>(buf.m_ptr);
        return holder->m_value;
    }
};


template <typename T>
struct wxAnyAsImpl;

}
# 283 "/usr/include/wx-3.1-unofficial/wx/any.h"
template<typename T>
class wxAnyValueTypeImplBase : public wxAnyValueType
{
    typedef typename wxIf< sizeof(T) <= WX_ANY_VALUE_BUFFER_SIZE,
                           wxPrivate::wxAnyValueTypeOpsInplace<T>,
                           wxPrivate::wxAnyValueTypeOpsGeneric<T> >::value
            Ops;

public:
    wxAnyValueTypeImplBase() : wxAnyValueType() { }
    virtual ~wxAnyValueTypeImplBase() { }

    virtual void DeleteValue(wxAnyValueBuffer& buf) const override
    {
        Ops::DeleteValue(buf);
    }

    virtual void CopyBuffer(const wxAnyValueBuffer& src,
                            wxAnyValueBuffer& dst) const override
    {
        Ops::SetValue(Ops::GetValue(src), dst);
    }





    static void SetValue(const T& value,
                         wxAnyValueBuffer& buf)
    {
        Ops::SetValue(value, buf);
    }





    static const T& GetValue(const wxAnyValueBuffer& buf)
    {
        return Ops::GetValue(buf);
    }






};






template<typename T>
class wxAnyValueTypeImpl : public wxAnyValueTypeImplBase<T>
{
    friend class wxAny; public: static bool IsSameClass(const wxAnyValueType* otherType) { return AreSameClasses(*sm_instance.get(), *otherType); } virtual bool IsSameType(const wxAnyValueType* otherType) const override { return IsSameClass(otherType); } private: static bool AreSameClasses(const wxAnyValueType& a, const wxAnyValueType& b) { return wxTypeIdentifier(typeid(a).name()) == wxTypeIdentifier(typeid(b).name()); } static wxAnyValueTypeScopedPtr sm_instance; public: static wxAnyValueType* GetInstance() { return sm_instance.get(); }
public:
    wxAnyValueTypeImpl() : wxAnyValueTypeImplBase<T>() { }
    virtual ~wxAnyValueTypeImpl() { }

    virtual bool ConvertValue(const wxAnyValueBuffer& src,
                              wxAnyValueType* dstType,
                              wxAnyValueBuffer& dst) const override
    {
        wxUnusedVar(src);
        wxUnusedVar(dstType);
        wxUnusedVar(dst);
        return false;
    }
};

template<typename T>
wxAnyValueTypeScopedPtr wxAnyValueTypeImpl<T>::sm_instance = new wxAnyValueTypeImpl<T>();
# 406 "/usr/include/wx-3.1-unofficial/wx/any.h"
    typedef long long wxAnyBaseIntType;
    typedef unsigned long long wxAnyBaseUintType;






class __attribute__ ((visibility("default"))) wxAnyValueTypeImplInt :
    public wxAnyValueTypeImplBase<wxAnyBaseIntType>
{
    friend class wxAny; public: static bool IsSameClass(const wxAnyValueType* otherType) { return AreSameClasses(*sm_instance.get(), *otherType); } virtual bool IsSameType(const wxAnyValueType* otherType) const override { return IsSameClass(otherType); } private: static bool AreSameClasses(const wxAnyValueType& a, const wxAnyValueType& b) { return wxTypeIdentifier(typeid(a).name()) == wxTypeIdentifier(typeid(b).name()); } static wxAnyValueTypeScopedPtr sm_instance; public: static wxAnyValueType* GetInstance() { return sm_instance.get(); }
public:
    wxAnyValueTypeImplInt() :
        wxAnyValueTypeImplBase<wxAnyBaseIntType>() { }
    virtual ~wxAnyValueTypeImplInt() { }

    virtual bool ConvertValue(const wxAnyValueBuffer& src,
                              wxAnyValueType* dstType,
                              wxAnyValueBuffer& dst) const override;
};


class __attribute__ ((visibility("default"))) wxAnyValueTypeImplUint :
    public wxAnyValueTypeImplBase<wxAnyBaseUintType>
{
    friend class wxAny; public: static bool IsSameClass(const wxAnyValueType* otherType) { return AreSameClasses(*sm_instance.get(), *otherType); } virtual bool IsSameType(const wxAnyValueType* otherType) const override { return IsSameClass(otherType); } private: static bool AreSameClasses(const wxAnyValueType& a, const wxAnyValueType& b) { return wxTypeIdentifier(typeid(a).name()) == wxTypeIdentifier(typeid(b).name()); } static wxAnyValueTypeScopedPtr sm_instance; public: static wxAnyValueType* GetInstance() { return sm_instance.get(); }
public:
    wxAnyValueTypeImplUint() :
        wxAnyValueTypeImplBase<wxAnyBaseUintType>() { }
    virtual ~wxAnyValueTypeImplUint() { }

    virtual bool ConvertValue(const wxAnyValueBuffer& src,
                              wxAnyValueType* dstType,
                              wxAnyValueBuffer& dst) const override;
};


template<> class wxAnyValueTypeImpl<signed long> : public wxAnyValueTypeImplInt { typedef wxAnyBaseIntType UseDataType; public: wxAnyValueTypeImpl() : wxAnyValueTypeImplInt() { } virtual ~wxAnyValueTypeImpl() { } static void SetValue(const signed long& value, wxAnyValueBuffer& buf) { void* voidPtr = reinterpret_cast<void*>(&buf.m_buffer[0]); UseDataType* dptr = reinterpret_cast<UseDataType*>(voidPtr); *dptr = static_cast<UseDataType>(value); } static signed long GetValue(const wxAnyValueBuffer& buf) { const void* voidPtr = reinterpret_cast<const void*>(&buf.m_buffer[0]); const UseDataType* sptr = reinterpret_cast<const UseDataType*>(voidPtr); return static_cast<signed long>(*sptr); }};
template<> class wxAnyValueTypeImpl<signed int> : public wxAnyValueTypeImplInt { typedef wxAnyBaseIntType UseDataType; public: wxAnyValueTypeImpl() : wxAnyValueTypeImplInt() { } virtual ~wxAnyValueTypeImpl() { } static void SetValue(const signed int& value, wxAnyValueBuffer& buf) { void* voidPtr = reinterpret_cast<void*>(&buf.m_buffer[0]); UseDataType* dptr = reinterpret_cast<UseDataType*>(voidPtr); *dptr = static_cast<UseDataType>(value); } static signed int GetValue(const wxAnyValueBuffer& buf) { const void* voidPtr = reinterpret_cast<const void*>(&buf.m_buffer[0]); const UseDataType* sptr = reinterpret_cast<const UseDataType*>(voidPtr); return static_cast<signed int>(*sptr); }};
template<> class wxAnyValueTypeImpl<signed short> : public wxAnyValueTypeImplInt { typedef wxAnyBaseIntType UseDataType; public: wxAnyValueTypeImpl() : wxAnyValueTypeImplInt() { } virtual ~wxAnyValueTypeImpl() { } static void SetValue(const signed short& value, wxAnyValueBuffer& buf) { void* voidPtr = reinterpret_cast<void*>(&buf.m_buffer[0]); UseDataType* dptr = reinterpret_cast<UseDataType*>(voidPtr); *dptr = static_cast<UseDataType>(value); } static signed short GetValue(const wxAnyValueBuffer& buf) { const void* voidPtr = reinterpret_cast<const void*>(&buf.m_buffer[0]); const UseDataType* sptr = reinterpret_cast<const UseDataType*>(voidPtr); return static_cast<signed short>(*sptr); }};
template<> class wxAnyValueTypeImpl<signed char> : public wxAnyValueTypeImplInt { typedef wxAnyBaseIntType UseDataType; public: wxAnyValueTypeImpl() : wxAnyValueTypeImplInt() { } virtual ~wxAnyValueTypeImpl() { } static void SetValue(const signed char& value, wxAnyValueBuffer& buf) { void* voidPtr = reinterpret_cast<void*>(&buf.m_buffer[0]); UseDataType* dptr = reinterpret_cast<UseDataType*>(voidPtr); *dptr = static_cast<UseDataType>(value); } static signed char GetValue(const wxAnyValueBuffer& buf) { const void* voidPtr = reinterpret_cast<const void*>(&buf.m_buffer[0]); const UseDataType* sptr = reinterpret_cast<const UseDataType*>(voidPtr); return static_cast<signed char>(*sptr); }};

template<> class wxAnyValueTypeImpl<long long> : public wxAnyValueTypeImplInt { typedef wxAnyBaseIntType UseDataType; public: wxAnyValueTypeImpl() : wxAnyValueTypeImplInt() { } virtual ~wxAnyValueTypeImpl() { } static void SetValue(const long long& value, wxAnyValueBuffer& buf) { void* voidPtr = reinterpret_cast<void*>(&buf.m_buffer[0]); UseDataType* dptr = reinterpret_cast<UseDataType*>(voidPtr); *dptr = static_cast<UseDataType>(value); } static long long GetValue(const wxAnyValueBuffer& buf) { const void* voidPtr = reinterpret_cast<const void*>(&buf.m_buffer[0]); const UseDataType* sptr = reinterpret_cast<const UseDataType*>(voidPtr); return static_cast<long long>(*sptr); }};


template<> class wxAnyValueTypeImpl<unsigned long> : public wxAnyValueTypeImplUint { typedef wxAnyBaseUintType UseDataType; public: wxAnyValueTypeImpl() : wxAnyValueTypeImplUint() { } virtual ~wxAnyValueTypeImpl() { } static void SetValue(const unsigned long& value, wxAnyValueBuffer& buf) { void* voidPtr = reinterpret_cast<void*>(&buf.m_buffer[0]); UseDataType* dptr = reinterpret_cast<UseDataType*>(voidPtr); *dptr = static_cast<UseDataType>(value); } static unsigned long GetValue(const wxAnyValueBuffer& buf) { const void* voidPtr = reinterpret_cast<const void*>(&buf.m_buffer[0]); const UseDataType* sptr = reinterpret_cast<const UseDataType*>(voidPtr); return static_cast<unsigned long>(*sptr); }};
template<> class wxAnyValueTypeImpl<unsigned int> : public wxAnyValueTypeImplUint { typedef wxAnyBaseUintType UseDataType; public: wxAnyValueTypeImpl() : wxAnyValueTypeImplUint() { } virtual ~wxAnyValueTypeImpl() { } static void SetValue(const unsigned int& value, wxAnyValueBuffer& buf) { void* voidPtr = reinterpret_cast<void*>(&buf.m_buffer[0]); UseDataType* dptr = reinterpret_cast<UseDataType*>(voidPtr); *dptr = static_cast<UseDataType>(value); } static unsigned int GetValue(const wxAnyValueBuffer& buf) { const void* voidPtr = reinterpret_cast<const void*>(&buf.m_buffer[0]); const UseDataType* sptr = reinterpret_cast<const UseDataType*>(voidPtr); return static_cast<unsigned int>(*sptr); }};
template<> class wxAnyValueTypeImpl<unsigned short> : public wxAnyValueTypeImplUint { typedef wxAnyBaseUintType UseDataType; public: wxAnyValueTypeImpl() : wxAnyValueTypeImplUint() { } virtual ~wxAnyValueTypeImpl() { } static void SetValue(const unsigned short& value, wxAnyValueBuffer& buf) { void* voidPtr = reinterpret_cast<void*>(&buf.m_buffer[0]); UseDataType* dptr = reinterpret_cast<UseDataType*>(voidPtr); *dptr = static_cast<UseDataType>(value); } static unsigned short GetValue(const wxAnyValueBuffer& buf) { const void* voidPtr = reinterpret_cast<const void*>(&buf.m_buffer[0]); const UseDataType* sptr = reinterpret_cast<const UseDataType*>(voidPtr); return static_cast<unsigned short>(*sptr); }};
template<> class wxAnyValueTypeImpl<unsigned char> : public wxAnyValueTypeImplUint { typedef wxAnyBaseUintType UseDataType; public: wxAnyValueTypeImpl() : wxAnyValueTypeImplUint() { } virtual ~wxAnyValueTypeImpl() { } static void SetValue(const unsigned char& value, wxAnyValueBuffer& buf) { void* voidPtr = reinterpret_cast<void*>(&buf.m_buffer[0]); UseDataType* dptr = reinterpret_cast<UseDataType*>(voidPtr); *dptr = static_cast<UseDataType>(value); } static unsigned char GetValue(const wxAnyValueBuffer& buf) { const void* voidPtr = reinterpret_cast<const void*>(&buf.m_buffer[0]); const UseDataType* sptr = reinterpret_cast<const UseDataType*>(voidPtr); return static_cast<unsigned char>(*sptr); }};

template<> class wxAnyValueTypeImpl<unsigned long long> : public wxAnyValueTypeImplUint { typedef wxAnyBaseUintType UseDataType; public: wxAnyValueTypeImpl() : wxAnyValueTypeImplUint() { } virtual ~wxAnyValueTypeImpl() { } static void SetValue(const unsigned long long& value, wxAnyValueBuffer& buf) { void* voidPtr = reinterpret_cast<void*>(&buf.m_buffer[0]); UseDataType* dptr = reinterpret_cast<UseDataType*>(voidPtr); *dptr = static_cast<UseDataType>(value); } static unsigned long long GetValue(const wxAnyValueBuffer& buf) { const void* voidPtr = reinterpret_cast<const void*>(&buf.m_buffer[0]); const UseDataType* sptr = reinterpret_cast<const UseDataType*>(voidPtr); return static_cast<unsigned long long>(*sptr); }};
# 502 "/usr/include/wx-3.1-unofficial/wx/any.h"
extern __attribute__ ((visibility("default"))) bool wxAnyConvertString(const wxString& value,
                                                wxAnyValueType* dstType,
                                                wxAnyValueBuffer& dst);

class __attribute__ ((visibility("default"))) wxAnyValueTypeImplwxString : public wxAnyValueTypeImplBase<wxString> { friend class wxAny; public: static bool IsSameClass(const wxAnyValueType* otherType) { return AreSameClasses(*sm_instance.get(), *otherType); } virtual bool IsSameType(const wxAnyValueType* otherType) const override { return IsSameClass(otherType); } private: static bool AreSameClasses(const wxAnyValueType& a, const wxAnyValueType& b) { return wxTypeIdentifier(typeid(a).name()) == wxTypeIdentifier(typeid(b).name()); } static wxAnyValueTypeScopedPtr sm_instance; public: static wxAnyValueType* GetInstance() { return sm_instance.get(); } public: wxAnyValueTypeImplwxString() : wxAnyValueTypeImplBase<wxString>() { } virtual ~wxAnyValueTypeImplwxString() { } virtual bool ConvertValue(const wxAnyValueBuffer& src, wxAnyValueType* dstType, wxAnyValueBuffer& dst) const override { const wxString& value = GetValue(src); return wxAnyConvertString(value, dstType, dst); } }; template<> class wxAnyValueTypeImpl<wxString> : public wxAnyValueTypeImplwxString { public: wxAnyValueTypeImpl() : wxAnyValueTypeImplwxString() { } virtual ~wxAnyValueTypeImpl() { } };

class __attribute__ ((visibility("default"))) wxAnyValueTypeImplConstCharPtr : public wxAnyValueTypeImplBase<const char*> { friend class wxAny; public: static bool IsSameClass(const wxAnyValueType* otherType) { return AreSameClasses(*sm_instance.get(), *otherType); } virtual bool IsSameType(const wxAnyValueType* otherType) const override { return IsSameClass(otherType); } private: static bool AreSameClasses(const wxAnyValueType& a, const wxAnyValueType& b) { return wxTypeIdentifier(typeid(a).name()) == wxTypeIdentifier(typeid(b).name()); } static wxAnyValueTypeScopedPtr sm_instance; public: static wxAnyValueType* GetInstance() { return sm_instance.get(); } public: wxAnyValueTypeImplConstCharPtr() : wxAnyValueTypeImplBase<const char*>() { } virtual ~wxAnyValueTypeImplConstCharPtr() { } virtual bool ConvertValue(const wxAnyValueBuffer& src, wxAnyValueType* dstType, wxAnyValueBuffer& dst) const override { wxString value = GetValue(src); return wxAnyConvertString(value, dstType, dst); } }; template<> class wxAnyValueTypeImpl<const char*> : public wxAnyValueTypeImplConstCharPtr { public: wxAnyValueTypeImpl() : wxAnyValueTypeImplConstCharPtr() { } virtual ~wxAnyValueTypeImpl() { } };


class __attribute__ ((visibility("default"))) wxAnyValueTypeImplConstWchar_tPtr : public wxAnyValueTypeImplBase<const wchar_t*> { friend class wxAny; public: static bool IsSameClass(const wxAnyValueType* otherType) { return AreSameClasses(*sm_instance.get(), *otherType); } virtual bool IsSameType(const wxAnyValueType* otherType) const override { return IsSameClass(otherType); } private: static bool AreSameClasses(const wxAnyValueType& a, const wxAnyValueType& b) { return wxTypeIdentifier(typeid(a).name()) == wxTypeIdentifier(typeid(b).name()); } static wxAnyValueTypeScopedPtr sm_instance; public: static wxAnyValueType* GetInstance() { return sm_instance.get(); } public: wxAnyValueTypeImplConstWchar_tPtr() : wxAnyValueTypeImplBase<const wchar_t*>() { } virtual ~wxAnyValueTypeImplConstWchar_tPtr() { } virtual bool ConvertValue(const wxAnyValueBuffer& src, wxAnyValueType* dstType, wxAnyValueBuffer& dst) const override { wxString value = GetValue(src); return wxAnyConvertString(value, dstType, dst); } }; template<> class wxAnyValueTypeImpl<const wchar_t*> : public wxAnyValueTypeImplConstWchar_tPtr { public: wxAnyValueTypeImpl() : wxAnyValueTypeImplConstWchar_tPtr() { } virtual ~wxAnyValueTypeImpl() { } };





template<>
class __attribute__ ((visibility("default"))) wxAnyValueTypeImpl<bool> :
    public wxAnyValueTypeImplBase<bool>
{
    friend class wxAny; public: static bool IsSameClass(const wxAnyValueType* otherType) { return AreSameClasses(*sm_instance.get(), *otherType); } virtual bool IsSameType(const wxAnyValueType* otherType) const override { return IsSameClass(otherType); } private: static bool AreSameClasses(const wxAnyValueType& a, const wxAnyValueType& b) { return wxTypeIdentifier(typeid(a).name()) == wxTypeIdentifier(typeid(b).name()); } static wxAnyValueTypeScopedPtr sm_instance; public: static wxAnyValueType* GetInstance() { return sm_instance.get(); }
public:
    wxAnyValueTypeImpl() :
        wxAnyValueTypeImplBase<bool>() { }
    virtual ~wxAnyValueTypeImpl() { }

    virtual bool ConvertValue(const wxAnyValueBuffer& src,
                              wxAnyValueType* dstType,
                              wxAnyValueBuffer& dst) const override;
};




class __attribute__ ((visibility("default"))) wxAnyValueTypeImplDouble :
    public wxAnyValueTypeImplBase<double>
{
    friend class wxAny; public: static bool IsSameClass(const wxAnyValueType* otherType) { return AreSameClasses(*sm_instance.get(), *otherType); } virtual bool IsSameType(const wxAnyValueType* otherType) const override { return IsSameClass(otherType); } private: static bool AreSameClasses(const wxAnyValueType& a, const wxAnyValueType& b) { return wxTypeIdentifier(typeid(a).name()) == wxTypeIdentifier(typeid(b).name()); } static wxAnyValueTypeScopedPtr sm_instance; public: static wxAnyValueType* GetInstance() { return sm_instance.get(); }
public:
    wxAnyValueTypeImplDouble() :
        wxAnyValueTypeImplBase<double>() { }
    virtual ~wxAnyValueTypeImplDouble() { }

    virtual bool ConvertValue(const wxAnyValueBuffer& src,
                              wxAnyValueType* dstType,
                              wxAnyValueBuffer& dst) const override;
};


typedef double wxAnyBaseDoubleType;

template<> class wxAnyValueTypeImpl<float> : public wxAnyValueTypeImplDouble { typedef wxAnyBaseDoubleType UseDataType; public: wxAnyValueTypeImpl() : wxAnyValueTypeImplDouble() { } virtual ~wxAnyValueTypeImpl() { } static void SetValue(const float& value, wxAnyValueBuffer& buf) { void* voidPtr = reinterpret_cast<void*>(&buf.m_buffer[0]); UseDataType* dptr = reinterpret_cast<UseDataType*>(voidPtr); *dptr = static_cast<UseDataType>(value); } static float GetValue(const wxAnyValueBuffer& buf) { const void* voidPtr = reinterpret_cast<const void*>(&buf.m_buffer[0]); const UseDataType* sptr = reinterpret_cast<const UseDataType*>(voidPtr); return static_cast<float>(*sptr); }};
template<> class wxAnyValueTypeImpl<double> : public wxAnyValueTypeImplDouble { typedef wxAnyBaseDoubleType UseDataType; public: wxAnyValueTypeImpl() : wxAnyValueTypeImplDouble() { } virtual ~wxAnyValueTypeImpl() { } static void SetValue(const double& value, wxAnyValueBuffer& buf) { void* voidPtr = reinterpret_cast<void*>(&buf.m_buffer[0]); UseDataType* dptr = reinterpret_cast<UseDataType*>(voidPtr); *dptr = static_cast<UseDataType>(value); } static double GetValue(const wxAnyValueBuffer& buf) { const void* voidPtr = reinterpret_cast<const void*>(&buf.m_buffer[0]); const UseDataType* sptr = reinterpret_cast<const UseDataType*>(voidPtr); return static_cast<double>(*sptr); }};
# 591 "/usr/include/wx-3.1-unofficial/wx/any.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/datetime.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/datetime.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 16 "/usr/include/wx-3.1-unofficial/wx/datetime.h" 2





# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/limits.h" 1 3 4
# 22 "/usr/include/wx-3.1-unofficial/wx/datetime.h" 2


# 1 "/usr/include/wx-3.1-unofficial/wx/anystr.h" 1
# 29 "/usr/include/wx-3.1-unofficial/wx/anystr.h"
class wxAnyStrPtr
{
public:





    wxAnyStrPtr()
        : m_str(
# 38 "/usr/include/wx-3.1-unofficial/wx/anystr.h" 3 4
               __null
# 38 "/usr/include/wx-3.1-unofficial/wx/anystr.h"
                   )
    {
    }



    wxAnyStrPtr(const wxString& str, const wxString::const_iterator& iter)
        : m_str(&str),
          m_iter(iter)
    {
    }
# 61 "/usr/include/wx-3.1-unofficial/wx/anystr.h"
    operator bool() const { return m_str != 
# 61 "/usr/include/wx-3.1-unofficial/wx/anystr.h" 3 4
                                           __null
# 61 "/usr/include/wx-3.1-unofficial/wx/anystr.h"
                                               ; }



    bool operator!() const { return !((bool)*this); }





    operator const char *() const
    {
        if ( !m_str )
            return 
# 74 "/usr/include/wx-3.1-unofficial/wx/anystr.h" 3 4
                  __null
# 74 "/usr/include/wx-3.1-unofficial/wx/anystr.h"
                      ;







        const char *p = m_str->c_str().AsChar();
        if ( *p )
        {







            p += strlen(wxString(m_str->begin(), m_iter).mb_str());
        }


        return p;
    }


    operator const wchar_t *() const
    {
        if ( !m_str )
            return 
# 103 "/usr/include/wx-3.1-unofficial/wx/anystr.h" 3 4
                  __null
# 103 "/usr/include/wx-3.1-unofficial/wx/anystr.h"
                      ;







        return m_str->c_str().AsWChar() + (m_iter - m_str->begin());
    }
# 131 "/usr/include/wx-3.1-unofficial/wx/anystr.h"
private:


    const wxString * const m_str;
    const wxString::const_iterator m_iter;

    private: wxAnyStrPtr& operator=(const wxAnyStrPtr&) = delete;
};
# 25 "/usr/include/wx-3.1-unofficial/wx/datetime.h" 2

class wxDateTime;
class wxTimeSpan;
class wxDateSpan;
# 103 "/usr/include/wx-3.1-unofficial/wx/datetime.h"
class wxDateTime;

extern __attribute__ ((visibility("default"))) const char wxDefaultDateTimeFormat[];
extern __attribute__ ((visibility("default"))) const char wxDefaultTimeSpanFormat[];
extern __attribute__ ((visibility("default"))) const wxDateTime wxDefaultDateTime;
# 128 "/usr/include/wx-3.1-unofficial/wx/datetime.h"
class __attribute__ ((visibility("default"))) wxDateTime
{
public:
# 139 "/usr/include/wx-3.1-unofficial/wx/datetime.h"
    typedef unsigned short wxDateTime_t;





    enum TZ
    {

        Local,






        GMT_12, GMT_11, GMT_10, GMT_9, GMT_8, GMT_7,
        GMT_6, GMT_5, GMT_4, GMT_3, GMT_2, GMT_1,
        GMT0,
        GMT1, GMT2, GMT3, GMT4, GMT5, GMT6,
        GMT7, GMT8, GMT9, GMT10, GMT11, GMT12, GMT13,






        WET = GMT0,
        WEST = GMT1,
        CET = GMT1,
        CEST = GMT2,
        EET = GMT2,
        EEST = GMT3,
        MSK = GMT3,
        MSD = GMT4,


        AST = GMT_4,
        ADT = GMT_3,
        EST = GMT_5,
        EDT = GMT_4,
        CST = GMT_6,
        CDT = GMT_5,
        MST = GMT_7,
        MDT = GMT_6,
        PST = GMT_8,
        PDT = GMT_7,
        HST = GMT_10,
        AKST = GMT_9,
        AKDT = GMT_8,



        A_WST = GMT8,
        A_CST = GMT13 + 1,
        A_EST = GMT10,
        A_ESST = GMT11,


        NZST = GMT12,
        NZDT = GMT13,





        UTC = GMT0
    };





    enum Calendar
    {
        Gregorian,
        Julian


    };







    enum Country
    {
        Country_Unknown,
        Country_Default,







        Country_WesternEurope_Start,
        Country_EEC = Country_WesternEurope_Start,
        France,
        Germany,
        UK,
        Country_WesternEurope_End = UK,

        Russia,
        USA
    };

    enum Month
    {
        Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec, Inv_Month
    };


    enum WeekDay
    {
        Sun, Mon, Tue, Wed, Thu, Fri, Sat, Inv_WeekDay
    };


    enum Year
    {
        Inv_Year = 
# 262 "/usr/include/wx-3.1-unofficial/wx/datetime.h" 3 4
                  (-0x7fff - 1)
    
# 263 "/usr/include/wx-3.1-unofficial/wx/datetime.h"
   };


    enum NameFlags
    {
        Name_Full = 0x01,
        Name_Abbr = 0x02
    };


    enum WeekFlags
    {
        Default_First,
        Monday_First,
        Sunday_First
    };




    enum
    {
        DST_OFFSET = 3600
    };







    class __attribute__ ((visibility("default"))) TimeZone
    {
    public:
        TimeZone(TZ tz);


        TimeZone(long offset = 0) { m_offset = offset; }

        static TimeZone Make(long offset)
        {
            TimeZone tz;
            tz.m_offset = offset;
            return tz;
        }

        bool IsLocal() const { return m_offset == -1; }

        long GetOffset() const;

    private:

        long m_offset;
    };
# 325 "/usr/include/wx-3.1-unofficial/wx/datetime.h"
    struct __attribute__ ((visibility("default"))) Tm
    {
        wxDateTime_t msec, sec, min, hour,
                     mday,
                     yday;
        Month mon;
        int year;


        Tm();


        Tm(const struct tm& tm, const TimeZone& tz);


        bool IsValid() const;


        WeekDay GetWeekDay()
        {
            if ( wday == Inv_WeekDay )
                ComputeWeekDay();

            return (WeekDay)wday;
        }


        void AddMonths(int monDiff);


        void AddDays(int dayDiff);

    private:

        void ComputeWeekDay();


        TimeZone m_tz;




        wxDateTime_t wday;
    };





    static void SetCountry(Country country);

    static Country GetCountry();



    static bool IsWestEuropeanCountry(Country country = Country_Default);


    static int GetCurrentYear(Calendar cal = Gregorian);





    static int ConvertYearToBC(int year);


    static Month GetCurrentMonth(Calendar cal = Gregorian);


    static bool IsLeapYear(int year = Inv_Year, Calendar cal = Gregorian);


    static bool GetFirstWeekDay(WeekDay *firstDay);


    static int GetCentury(int year);



    static wxDateTime_t GetNumberOfDays(int year, Calendar cal = Gregorian);



    static wxDateTime_t GetNumberOfDays(Month month,
                                        int year = Inv_Year,
                                        Calendar cal = Gregorian);




    static wxString GetMonthName(Month month,
                                 NameFlags flags = Name_Full);


    static wxString GetEnglishMonthName(Month month,
                                        NameFlags flags = Name_Full);



    static wxString GetWeekDayName(WeekDay weekday,
                                   NameFlags flags = Name_Full);


    static wxString GetEnglishWeekDayName(WeekDay weekday,
                                          NameFlags flags = Name_Full);


    static void GetAmPmStrings(wxString *am, wxString *pm);


    static bool IsDSTApplicable(int year = Inv_Year,
                                Country country = Country_Default);




    static wxDateTime GetBeginDST(int year = Inv_Year,
                                  Country country = Country_Default);



    static wxDateTime GetEndDST(int year = Inv_Year,
                                Country country = Country_Default);


    static inline wxDateTime Now();



    static wxDateTime UNow();



    static inline wxDateTime Today();







    wxDateTime() : m_time((-9223372036854775807ll -1)) { }


    inline wxDateTime(time_t timet);

    inline wxDateTime(const struct tm& tm);

    inline wxDateTime(const Tm& tm);


    inline wxDateTime(double jdn);


    inline wxDateTime(wxDateTime_t hour,
                      wxDateTime_t minute = 0,
                      wxDateTime_t second = 0,
                      wxDateTime_t millisec = 0);

    inline wxDateTime(wxDateTime_t day,
                      Month month,
                      int year = Inv_Year,
                      wxDateTime_t hour = 0,
                      wxDateTime_t minute = 0,
                      wxDateTime_t second = 0,
                      wxDateTime_t millisec = 0);
# 509 "/usr/include/wx-3.1-unofficial/wx/datetime.h"
    inline wxDateTime& SetToCurrent();


    inline wxDateTime& Set(time_t timet);


    wxDateTime& Set(const struct tm& tm);


    inline wxDateTime& Set(const Tm& tm);


    wxDateTime& Set(double jdn);


    wxDateTime& Set(wxDateTime_t hour,
                    wxDateTime_t minute = 0,
                    wxDateTime_t second = 0,
                    wxDateTime_t millisec = 0);



    wxDateTime& Set(wxDateTime_t day,
                    Month month,
                    int year = Inv_Year,
                    wxDateTime_t hour = 0,
                    wxDateTime_t minute = 0,
                    wxDateTime_t second = 0,
                    wxDateTime_t millisec = 0);


    wxDateTime& ResetTime();



    wxDateTime GetDateOnly() const;





    wxDateTime& SetYear(int year);

    wxDateTime& SetMonth(Month month);

    wxDateTime& SetDay(wxDateTime_t day);

    wxDateTime& SetHour(wxDateTime_t hour);

    wxDateTime& SetMinute(wxDateTime_t minute);

    wxDateTime& SetSecond(wxDateTime_t second);

    wxDateTime& SetMillisecond(wxDateTime_t millisecond);


    wxDateTime& operator=(time_t timet) { return Set(timet); }


    wxDateTime& operator=(const struct tm& tm) { return Set(tm); }


    wxDateTime& operator=(const Tm& tm) { return Set(tm); }
# 581 "/usr/include/wx-3.1-unofficial/wx/datetime.h"
    wxDateTime& SetToWeekDayInSameWeek(WeekDay weekday,
                                       WeekFlags flags = Monday_First);
    inline wxDateTime GetWeekDayInSameWeek(WeekDay weekday,
                                           WeekFlags flags = Monday_First) const;


    wxDateTime& SetToNextWeekDay(WeekDay weekday);
    inline wxDateTime GetNextWeekDay(WeekDay weekday) const;


    wxDateTime& SetToPrevWeekDay(WeekDay weekday);
    inline wxDateTime GetPrevWeekDay(WeekDay weekday) const;





    bool SetToWeekDay(WeekDay weekday,
                      int n = 1,
                      Month month = Inv_Month,
                      int year = Inv_Year);
    inline wxDateTime GetWeekDay(WeekDay weekday,
                                 int n = 1,
                                 Month month = Inv_Month,
                                 int year = Inv_Year) const;


    inline bool SetToLastWeekDay(WeekDay weekday,
                                 Month month = Inv_Month,
                                 int year = Inv_Year);
    inline wxDateTime GetLastWeekDay(WeekDay weekday,
                                     Month month = Inv_Month,
                                     int year = Inv_Year);



    static wxDateTime SetToWeekOfYear(int year,
                                      wxDateTime_t numWeek,
                                      WeekDay weekday = Mon);



    wxDateTime& SetToLastMonthDay(Month month = Inv_Month,
                                  int year = Inv_Year);
    inline wxDateTime GetLastMonthDay(Month month = Inv_Month,
                                      int year = Inv_Year) const;


    wxDateTime& SetToYearDay(wxDateTime_t yday);
    inline wxDateTime GetYearDay(wxDateTime_t yday) const;
# 656 "/usr/include/wx-3.1-unofficial/wx/datetime.h"
    double GetJulianDayNumber() const;
    double GetJDN() const { return GetJulianDayNumber(); }




    double GetModifiedJulianDayNumber() const { return GetJDN() - 2400000.5; }
    double GetMJD() const { return GetModifiedJulianDayNumber(); }


    double GetRataDie() const;
# 685 "/usr/include/wx-3.1-unofficial/wx/datetime.h"
    inline wxDateTime ToTimezone(const TimeZone& tz, bool noDST = false) const;
    wxDateTime& MakeTimezone(const TimeZone& tz, bool noDST = false);



    inline wxDateTime FromTimezone(const TimeZone& tz, bool noDST = false) const;
    wxDateTime& MakeFromTimezone(const TimeZone& tz, bool noDST = false);


    wxDateTime ToUTC(bool noDST = false) const { return ToTimezone(UTC, noDST); }
    wxDateTime& MakeUTC(bool noDST = false) { return MakeTimezone(UTC, noDST); }

    wxDateTime ToGMT(bool noDST = false) const { return ToUTC(noDST); }
    wxDateTime& MakeGMT(bool noDST = false) { return MakeUTC(noDST); }

    wxDateTime FromUTC(bool noDST = false) const
        { return FromTimezone(UTC, noDST); }
    wxDateTime& MakeFromUTC(bool noDST = false)
        { return MakeFromTimezone(UTC, noDST); }






    int IsDST(Country country = Country_Default) const;
# 721 "/usr/include/wx-3.1-unofficial/wx/datetime.h"
    inline bool IsValid() const { return m_time != wxLongLong((-9223372036854775807ll -1)); }






    Tm GetTm(const TimeZone& tz = Local) const;



    inline time_t GetTicks() const;


    int GetCentury(const TimeZone& tz = Local) const
            { return GetCentury(GetYear(tz)); }

    int GetYear(const TimeZone& tz = Local) const
            { return GetTm(tz).year; }

    Month GetMonth(const TimeZone& tz = Local) const
            { return (Month)GetTm(tz).mon; }

    wxDateTime_t GetDay(const TimeZone& tz = Local) const
            { return GetTm(tz).mday; }

    WeekDay GetWeekDay(const TimeZone& tz = Local) const
            { return GetTm(tz).GetWeekDay(); }

    wxDateTime_t GetHour(const TimeZone& tz = Local) const
            { return GetTm(tz).hour; }

    wxDateTime_t GetMinute(const TimeZone& tz = Local) const
            { return GetTm(tz).min; }

    wxDateTime_t GetSecond(const TimeZone& tz = Local) const
            { return GetTm(tz).sec; }

    wxDateTime_t GetMillisecond(const TimeZone& tz = Local) const
            { return GetTm(tz).msec; }


    wxDateTime_t GetDayOfYear(const TimeZone& tz = Local) const;


    wxDateTime_t GetWeekOfYear(WeekFlags flags = Monday_First,
                               const TimeZone& tz = Local) const;


    int GetWeekBasedYear(const TimeZone& tz = Local) const;


    wxDateTime_t GetWeekOfMonth(WeekFlags flags = Monday_First,
                                const TimeZone& tz = Local) const;



    bool IsWorkDay(Country country = Country_Default) const;





    wxDateTime& SetFromDOS(unsigned long ddt);


    unsigned long GetAsDOS() const;
# 807 "/usr/include/wx-3.1-unofficial/wx/datetime.h"
    inline bool IsEqualTo(const wxDateTime& datetime) const;


    inline bool IsEarlierThan(const wxDateTime& datetime) const;


    inline bool IsLaterThan(const wxDateTime& datetime) const;


    inline bool IsStrictlyBetween(const wxDateTime& t1,
                                  const wxDateTime& t2) const;


    inline bool IsBetween(const wxDateTime& t1, const wxDateTime& t2) const;


    inline bool IsSameDate(const wxDateTime& dt) const;


    inline bool IsSameTime(const wxDateTime& dt) const;


    inline bool IsEqualUpTo(const wxDateTime& dt, const wxTimeSpan& ts) const;

    inline bool operator<(const wxDateTime& dt) const
    {
        return GetValue() < dt.GetValue();
    }

    inline bool operator<=(const wxDateTime& dt) const
    {
        return GetValue() <= dt.GetValue();
    }

    inline bool operator>(const wxDateTime& dt) const
    {
        return GetValue() > dt.GetValue();
    }

    inline bool operator>=(const wxDateTime& dt) const
    {
        return GetValue() >= dt.GetValue();
    }

    inline bool operator==(const wxDateTime& dt) const
    {


        return m_time == dt.m_time;
    }

    inline bool operator!=(const wxDateTime& dt) const
    {

        return m_time != dt.m_time;
    }





    inline wxDateTime Add(const wxTimeSpan& diff) const;

    inline wxDateTime& Add(const wxTimeSpan& diff);

    inline wxDateTime& operator+=(const wxTimeSpan& diff);
    inline wxDateTime operator+(const wxTimeSpan& ts) const
    {
        wxDateTime dt(*this);
        dt.Add(ts);
        return dt;
    }


    inline wxDateTime Subtract(const wxTimeSpan& diff) const;

    inline wxDateTime& Subtract(const wxTimeSpan& diff);

    inline wxDateTime& operator-=(const wxTimeSpan& diff);
    inline wxDateTime operator-(const wxTimeSpan& ts) const
    {
        wxDateTime dt(*this);
        dt.Subtract(ts);
        return dt;
    }


    inline wxDateTime Add(const wxDateSpan& diff) const;

    wxDateTime& Add(const wxDateSpan& diff);

    inline wxDateTime& operator+=(const wxDateSpan& diff);
    inline wxDateTime operator+(const wxDateSpan& ds) const
    {
        wxDateTime dt(*this);
        dt.Add(ds);
        return dt;
    }


    inline wxDateTime Subtract(const wxDateSpan& diff) const;

    inline wxDateTime& Subtract(const wxDateSpan& diff);

    inline wxDateTime& operator-=(const wxDateSpan& diff);
    inline wxDateTime operator-(const wxDateSpan& ds) const
    {
        wxDateTime dt(*this);
        dt.Subtract(ds);
        return dt;
    }


    inline wxTimeSpan Subtract(const wxDateTime& dt) const;
    inline wxTimeSpan operator-(const wxDateTime& dt2) const;

    wxDateSpan DiffAsDateSpan(const wxDateTime& dt) const;
# 936 "/usr/include/wx-3.1-unofficial/wx/datetime.h"
    bool ParseRfc822Date(const wxString& date,
                         wxString::const_iterator *end);





    bool ParseFormat(const wxString& date,
                     const wxString& format,
                     const wxDateTime& dateDef,
                     wxString::const_iterator *end);

    bool ParseFormat(const wxString& date,
                     const wxString& format,
                     wxString::const_iterator *end)
    {
        return ParseFormat(date, format, wxDefaultDateTime, end);
    }

    bool ParseFormat(const wxString& date,
                     wxString::const_iterator *end)
    {
        return ParseFormat(date, wxString::FromAscii(wxDefaultDateTimeFormat), wxDefaultDateTime, end);
    }





    bool ParseISODate(const wxString& date)
    {
        wxString::const_iterator end;
        return ParseFormat(date, L"%Y-%m-%d", &end) && end == date.end();
    }

    bool ParseISOTime(const wxString& time)
    {
        wxString::const_iterator end;
        return ParseFormat(time, L"%H:%M:%S", &end) && end == time.end();
    }

    bool ParseISOCombined(const wxString& datetime, char sep = 'T')
    {
        wxString::const_iterator end;
        const wxString fmt = L"%Y-%m-%d" + wxString(sep) + L"%H:%M:%S";
        return ParseFormat(datetime, fmt, &end) && end == datetime.end();
    }



    bool ParseDateTime(const wxString& datetime,
                       wxString::const_iterator *end);



    bool ParseDate(const wxString& date,
                   wxString::const_iterator *end);


    bool ParseTime(const wxString& time,
                   wxString::const_iterator *end);






    wxString Format(const wxString& format = wxString::FromAscii(wxDefaultDateTimeFormat),
                    const TimeZone& tz = Local) const;

    wxString FormatDate() const { return Format(L"%x"); }

    wxString FormatTime() const { return Format(L"%X"); }


    wxString FormatISODate() const { return Format(L"%Y-%m-%d"); }


    wxString FormatISOTime() const { return Format(L"%H:%M:%S"); }



    wxString FormatISOCombined(char sep = 'T') const
        { return FormatISODate() + sep + FormatISOTime(); }
# 1030 "/usr/include/wx-3.1-unofficial/wx/datetime.h"
    wxAnyStrPtr ParseRfc822Date(const wxString& date)
    {
        wxString::const_iterator end;
        return ParseRfc822Date(date, &end) ? wxAnyStrPtr(date, end)
                                           : wxAnyStrPtr();
    }

    wxAnyStrPtr ParseFormat(const wxString& date,
                            const wxString& format = wxString::FromAscii(wxDefaultDateTimeFormat),
                            const wxDateTime& dateDef = wxDefaultDateTime)
    {
        wxString::const_iterator end;
        return ParseFormat(date, format, dateDef, &end) ? wxAnyStrPtr(date, end)
                                                        : wxAnyStrPtr();
    }

    wxAnyStrPtr ParseDateTime(const wxString& datetime)
    {
        wxString::const_iterator end;
        return ParseDateTime(datetime, &end) ? wxAnyStrPtr(datetime, end)
                                             : wxAnyStrPtr();
    }

    wxAnyStrPtr ParseDate(const wxString& date)
    {
        wxString::const_iterator end;
        return ParseDate(date, &end) ? wxAnyStrPtr(date, end)
                                     : wxAnyStrPtr();
    }

    wxAnyStrPtr ParseTime(const wxString& time)
    {
        wxString::const_iterator end;
        return ParseTime(time, &end) ? wxAnyStrPtr(time, end)
                                     : wxAnyStrPtr();
    }
# 1081 "/usr/include/wx-3.1-unofficial/wx/datetime.h"
    void ParseRfc822Date(const wxCStrData& date)
        { ParseRfc822Date(wxString(date)); }
    const char* ParseRfc822Date(const char* date);
    const wchar_t* ParseRfc822Date(const wchar_t* date);

    void ParseFormat(const wxCStrData& date,
                     const wxString& format = wxString::FromAscii(wxDefaultDateTimeFormat),
                     const wxDateTime& dateDef = wxDefaultDateTime)
        { ParseFormat(wxString(date), format, dateDef); }
    const char* ParseFormat(const char* date,
                            const wxString& format = wxString::FromAscii(wxDefaultDateTimeFormat),
                            const wxDateTime& dateDef = wxDefaultDateTime);
    const wchar_t* ParseFormat(const wchar_t* date,
                               const wxString& format = wxString::FromAscii(wxDefaultDateTimeFormat),
                               const wxDateTime& dateDef = wxDefaultDateTime);

    void ParseDateTime(const wxCStrData& datetime)
        { ParseDateTime(wxString(datetime)); }
    const char* ParseDateTime(const char* datetime);
    const wchar_t* ParseDateTime(const wchar_t* datetime);

    void ParseDate(const wxCStrData& date)
        { ParseDate(wxString(date)); }
    const char* ParseDate(const char* date);
    const wchar_t* ParseDate(const wchar_t* date);

    void ParseTime(const wxCStrData& time)
        { ParseTime(wxString(time)); }
    const char* ParseTime(const char* time);
    const wchar_t* ParseTime(const wchar_t* time);






    wxDateTime(const wxLongLong& time) : m_time(time) { }


    inline wxLongLong GetValue() const;


    static time_t GetTimeNow() { return time(
# 1123 "/usr/include/wx-3.1-unofficial/wx/datetime.h" 3 4
                                            __null
# 1123 "/usr/include/wx-3.1-unofficial/wx/datetime.h"
                                                ); }


    static struct tm *GetTmNow()
    {
        static struct tm l_CurrentTime;
        return GetTmNow(&l_CurrentTime);
    }


    static struct tm *GetTmNow(struct tm *tmstruct);

private:



    static Country ms_country;




    static const long TIME_T_FACTOR;



    inline bool IsInStdRange() const;


    void UseEffectiveWeekDayFlags(WeekFlags &flags) const;




    wxLongLong m_time;
};







class __attribute__ ((visibility("default"))) wxTimeSpan
{
public:




    static wxTimeSpan Milliseconds(wxLongLong ms) { return wxTimeSpan(0, 0, 0, ms); }
    static wxTimeSpan Millisecond() { return Milliseconds(1); }


    static wxTimeSpan Seconds(wxLongLong sec) { return wxTimeSpan(0, 0, sec); }
    static wxTimeSpan Second() { return Seconds(1); }


    static wxTimeSpan Minutes(long min) { return wxTimeSpan(0, min, 0 ); }
    static wxTimeSpan Minute() { return Minutes(1); }


    static wxTimeSpan Hours(long hours) { return wxTimeSpan(hours, 0, 0); }
    static wxTimeSpan Hour() { return Hours(1); }


    static wxTimeSpan Days(long days) { return Hours(24 * days); }
    static wxTimeSpan Day() { return Days(1); }


    static wxTimeSpan Weeks(long days) { return Days(7 * days); }
    static wxTimeSpan Week() { return Weeks(1); }


    wxTimeSpan() { }




    inline wxTimeSpan(long hours,
                      long minutes = 0,
                      wxLongLong seconds = 0,
                      wxLongLong milliseconds = 0);
# 1214 "/usr/include/wx-3.1-unofficial/wx/datetime.h"
    inline wxTimeSpan Add(const wxTimeSpan& diff) const;

    inline wxTimeSpan& Add(const wxTimeSpan& diff);

    wxTimeSpan& operator+=(const wxTimeSpan& diff) { return Add(diff); }
    inline wxTimeSpan operator+(const wxTimeSpan& ts) const
    {
        return wxTimeSpan(GetValue() + ts.GetValue());
    }


    inline wxTimeSpan Subtract(const wxTimeSpan& diff) const;

    inline wxTimeSpan& Subtract(const wxTimeSpan& diff);

    wxTimeSpan& operator-=(const wxTimeSpan& diff) { return Subtract(diff); }
    inline wxTimeSpan operator-(const wxTimeSpan& ts) const
    {
        return wxTimeSpan(GetValue() - ts.GetValue());
    }


    inline wxTimeSpan Multiply(int n) const;

    inline wxTimeSpan& Multiply(int n);

    wxTimeSpan& operator*=(int n) { return Multiply(n); }
    inline wxTimeSpan operator*(int n) const
    {
        return wxTimeSpan(*this).Multiply(n);
    }


    wxTimeSpan Negate() const { return wxTimeSpan(-GetValue()); }

    wxTimeSpan& Neg() { m_diff = -GetValue(); return *this; }

    wxTimeSpan& operator-() { return Neg(); }



    inline wxTimeSpan Abs() const;
# 1264 "/usr/include/wx-3.1-unofficial/wx/datetime.h"
    bool IsNull() const { return m_diff == 0l; }

    bool operator!() const { return !IsNull(); }


    bool IsPositive() const { return m_diff > 0l; }


    bool IsNegative() const { return m_diff < 0l; }


    inline bool IsEqualTo(const wxTimeSpan& ts) const;



    inline bool IsLongerThan(const wxTimeSpan& ts) const;



    bool IsShorterThan(const wxTimeSpan& t) const;

    inline bool operator<(const wxTimeSpan &ts) const
    {
        return GetValue() < ts.GetValue();
    }

    inline bool operator<=(const wxTimeSpan &ts) const
    {
        return GetValue() <= ts.GetValue();
    }

    inline bool operator>(const wxTimeSpan &ts) const
    {
        return GetValue() > ts.GetValue();
    }

    inline bool operator>=(const wxTimeSpan &ts) const
    {
        return GetValue() >= ts.GetValue();
    }

    inline bool operator==(const wxTimeSpan &ts) const
    {
        return GetValue() == ts.GetValue();
    }

    inline bool operator!=(const wxTimeSpan &ts) const
    {
        return GetValue() != ts.GetValue();
    }





    inline int GetWeeks() const;

    inline int GetDays() const;

    inline int GetHours() const;

    inline int GetMinutes() const;

    inline wxLongLong GetSeconds() const;

    wxLongLong GetMilliseconds() const { return m_diff; }
# 1340 "/usr/include/wx-3.1-unofficial/wx/datetime.h"
    wxString Format(const wxString& format = wxString::FromAscii(wxDefaultTimeSpanFormat)) const;





    wxTimeSpan(const wxLongLong& diff) : m_diff(diff) { }


    wxLongLong GetValue() const { return m_diff; }

private:

    wxLongLong m_diff;
};
# 1391 "/usr/include/wx-3.1-unofficial/wx/datetime.h"
class __attribute__ ((visibility("default"))) wxDateSpan
{
public:




    wxDateSpan(int years = 0, int months = 0, int weeks = 0, int days = 0)
    {
        m_years = years;
        m_months = months;
        m_weeks = weeks;
        m_days = days;
    }


    static wxDateSpan Days(int days) { return wxDateSpan(0, 0, 0, days); }
    static wxDateSpan Day() { return Days(1); }


    static wxDateSpan Weeks(int weeks) { return wxDateSpan(0, 0, weeks, 0); }
    static wxDateSpan Week() { return Weeks(1); }


    static wxDateSpan Months(int mon) { return wxDateSpan(0, mon, 0, 0); }
    static wxDateSpan Month() { return Months(1); }


    static wxDateSpan Years(int years) { return wxDateSpan(years, 0, 0, 0); }
    static wxDateSpan Year() { return Years(1); }
# 1430 "/usr/include/wx-3.1-unofficial/wx/datetime.h"
    wxDateSpan& SetYears(int n) { m_years = n; return *this; }

    wxDateSpan& SetMonths(int n) { m_months = n; return *this; }

    wxDateSpan& SetWeeks(int n) { m_weeks = n; return *this; }

    wxDateSpan& SetDays(int n) { m_days = n; return *this; }


    int GetYears() const { return m_years; }

    int GetMonths() const { return m_months; }

    int GetTotalMonths() const { return 12*m_years + m_months; }

    int GetWeeks() const { return m_weeks; }

    int GetDays() const { return m_days; }

    int GetTotalDays() const { return 7*m_weeks + m_days; }





    inline wxDateSpan Add(const wxDateSpan& other) const;

    inline wxDateSpan& Add(const wxDateSpan& other);

    inline wxDateSpan& operator+=(const wxDateSpan& other);
    inline wxDateSpan operator+(const wxDateSpan& ds) const
    {
        return wxDateSpan(GetYears() + ds.GetYears(),
                          GetMonths() + ds.GetMonths(),
                          GetWeeks() + ds.GetWeeks(),
                          GetDays() + ds.GetDays());
    }


    inline wxDateSpan Subtract(const wxDateSpan& other) const;

    inline wxDateSpan& Subtract(const wxDateSpan& other);

    inline wxDateSpan& operator-=(const wxDateSpan& other);
    inline wxDateSpan operator-(const wxDateSpan& ds) const
    {
        return wxDateSpan(GetYears() - ds.GetYears(),
                          GetMonths() - ds.GetMonths(),
                          GetWeeks() - ds.GetWeeks(),
                          GetDays() - ds.GetDays());
    }


    inline wxDateSpan Negate() const;

    inline wxDateSpan& Neg();

    wxDateSpan& operator-() { return Neg(); }


    inline wxDateSpan Multiply(int factor) const;

    inline wxDateSpan& Multiply(int factor);

    inline wxDateSpan& operator*=(int factor) { return Multiply(factor); }
    inline wxDateSpan operator*(int n) const
    {
        return wxDateSpan(*this).Multiply(n);
    }


    inline bool operator==(const wxDateSpan& ds) const
    {
        return GetYears() == ds.GetYears() &&
               GetMonths() == ds.GetMonths() &&
               GetTotalDays() == ds.GetTotalDays();
    }

    inline bool operator!=(const wxDateSpan& ds) const
    {
        return !(*this == ds);
    }

private:
    int m_years,
        m_months,
        m_weeks,
        m_days;
};





class __attribute__ ((visibility("default"))) wxObjectArrayTraitsForwxDateTimeArray { public: static wxDateTime* Clone(wxDateTime const& item); static void Free(wxDateTime* p); }; typedef wxBaseObjectArray<wxDateTime, wxObjectArrayTraitsForwxDateTimeArray> wxBaseObjectArrayForwxDateTimeArray; class __attribute__ ((visibility("default"))) wxDateTimeArray : public wxBaseObjectArrayForwxDateTimeArray { };
# 1535 "/usr/include/wx-3.1-unofficial/wx/datetime.h"
class wxDateTimeHolidayAuthority;
typedef wxBaseArray<wxDateTimeHolidayAuthority *> wxBaseArrayForwxHolidayAuthoritiesArray; class wxHolidayAuthoritiesArray : public wxBaseArrayForwxHolidayAuthoritiesArray { typedef wxBaseArrayForwxHolidayAuthoritiesArray Base; public: wxHolidayAuthoritiesArray() : Base() { } explicit wxHolidayAuthoritiesArray(size_t n) : Base(n) { } wxHolidayAuthoritiesArray(size_t n, Base::const_reference v) : Base(n, v) { } template <class InputIterator> wxHolidayAuthoritiesArray(InputIterator first, InputIterator last) : Base(first, last) { } }

                                                     ;

class wxDateTimeHolidaysModule;
class __attribute__ ((visibility("default"))) wxDateTimeHolidayAuthority
{
friend class wxDateTimeHolidaysModule;
public:

    static bool IsHoliday(const wxDateTime& dt);



    static size_t GetHolidaysInRange(const wxDateTime& dtStart,
                                     const wxDateTime& dtEnd,
                                     wxDateTimeArray& holidays);


    static void ClearAllAuthorities();



    static void AddAuthority(wxDateTimeHolidayAuthority *auth);


    virtual ~wxDateTimeHolidayAuthority();

protected:

    virtual bool DoIsHoliday(const wxDateTime& dt) const = 0;
# 1576 "/usr/include/wx-3.1-unofficial/wx/datetime.h"
    virtual size_t DoGetHolidaysInRange(const wxDateTime& dtStart,
                                        const wxDateTime& dtEnd,
                                        wxDateTimeArray& holidays) const = 0;

private:

    static wxHolidayAuthoritiesArray ms_authorities;
};


class __attribute__ ((visibility("default"))) wxDateTimeWorkDays : public wxDateTimeHolidayAuthority
{
protected:
    virtual bool DoIsHoliday(const wxDateTime& dt) const override;
    virtual size_t DoGetHolidaysInRange(const wxDateTime& dtStart,
                                        const wxDateTime& dtEnd,
                                        wxDateTimeArray& holidays) const override;
};
# 1618 "/usr/include/wx-3.1-unofficial/wx/datetime.h"
inline bool wxDateTime::IsInStdRange() const
{


    return m_time >= 0l && (m_time / TIME_T_FACTOR) < 0x7fffffff;
}


inline wxDateTime wxDateTime::Now()
{
    struct tm tmstruct;
    return wxDateTime(*GetTmNow(&tmstruct));
}


inline wxDateTime wxDateTime::Today()
{
    wxDateTime dt(Now());
    dt.ResetTime();

    return dt;
}

inline wxDateTime& wxDateTime::Set(time_t timet)
{
    if ( timet == (time_t)-1 )
    {
        m_time = wxDefaultDateTime.m_time;
    }
    else
    {

        m_time = timet - 0;
        m_time *= TIME_T_FACTOR;
    }

    return *this;
}

inline wxDateTime& wxDateTime::SetToCurrent()
{
    *this = Now();
    return *this;
}

inline wxDateTime::wxDateTime(time_t timet)
{
    Set(timet);
}

inline wxDateTime::wxDateTime(const struct tm& tm)
{
    Set(tm);
}

inline wxDateTime::wxDateTime(const Tm& tm)
{
    Set(tm);
}

inline wxDateTime::wxDateTime(double jdn)
{
    Set(jdn);
}

inline wxDateTime& wxDateTime::Set(const Tm& tm)
{
    do { if ( tm.IsValid() ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/datetime.h", 1685, __FUNCTION__, "tm.IsValid()", L"invalid broken down date/time"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );

    return Set(tm.mday, (Month)tm.mon, tm.year,
               tm.hour, tm.min, tm.sec, tm.msec);
}

inline wxDateTime::wxDateTime(wxDateTime_t hour,
                              wxDateTime_t minute,
                              wxDateTime_t second,
                              wxDateTime_t millisec)
{
    Set(hour, minute, second, millisec);
}

inline wxDateTime::wxDateTime(wxDateTime_t day,
                              Month month,
                              int year,
                              wxDateTime_t hour,
                              wxDateTime_t minute,
                              wxDateTime_t second,
                              wxDateTime_t millisec)
{
    Set(day, month, year, hour, minute, second, millisec);
}





inline wxLongLong wxDateTime::GetValue() const
{
    do { if ( IsValid() ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/datetime.h", 1716, __FUNCTION__, "IsValid()", L"invalid wxDateTime"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );

    return m_time;
}

inline time_t wxDateTime::GetTicks() const
{
    do { if ( IsValid() ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/datetime.h", 1723, __FUNCTION__, "IsValid()", L"invalid wxDateTime"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );
    if ( !IsInStdRange() )
    {
        return (time_t)-1;
    }

    return (time_t)((m_time / (long)TIME_T_FACTOR).ToLong()) + 0;
}

inline bool wxDateTime::SetToLastWeekDay(WeekDay weekday,
                                         Month month,
                                         int year)
{
    return SetToWeekDay(weekday, -1, month, year);
}

inline wxDateTime
wxDateTime::GetWeekDayInSameWeek(WeekDay weekday,
                                 WeekFlags ) const
{
    return wxDateTime(*this).SetToWeekDayInSameWeek(weekday);
}

inline wxDateTime wxDateTime::GetNextWeekDay(WeekDay weekday) const
{
    return wxDateTime(*this).SetToNextWeekDay(weekday);
}

inline wxDateTime wxDateTime::GetPrevWeekDay(WeekDay weekday) const
{
    return wxDateTime(*this).SetToPrevWeekDay(weekday);
}

inline wxDateTime wxDateTime::GetWeekDay(WeekDay weekday,
                                         int n,
                                         Month month,
                                         int year) const
{
    wxDateTime dt(*this);

    return dt.SetToWeekDay(weekday, n, month, year) ? dt : wxDefaultDateTime;
}

inline wxDateTime wxDateTime::GetLastWeekDay(WeekDay weekday,
                                             Month month,
                                             int year)
{
    wxDateTime dt(*this);

    return dt.SetToLastWeekDay(weekday, month, year) ? dt : wxDefaultDateTime;
}

inline wxDateTime wxDateTime::GetLastMonthDay(Month month, int year) const
{
    return wxDateTime(*this).SetToLastMonthDay(month, year);
}

inline wxDateTime wxDateTime::GetYearDay(wxDateTime_t yday) const
{
    return wxDateTime(*this).SetToYearDay(yday);
}





inline bool wxDateTime::IsEqualTo(const wxDateTime& datetime) const
{
    return *this == datetime;
}

inline bool wxDateTime::IsEarlierThan(const wxDateTime& datetime) const
{
    return *this < datetime;
}

inline bool wxDateTime::IsLaterThan(const wxDateTime& datetime) const
{
    return *this > datetime;
}

inline bool wxDateTime::IsStrictlyBetween(const wxDateTime& t1,
                                          const wxDateTime& t2) const
{

    return IsLaterThan(t1) && IsEarlierThan(t2);
}

inline bool wxDateTime::IsBetween(const wxDateTime& t1,
                                  const wxDateTime& t2) const
{

    return IsEqualTo(t1) || IsEqualTo(t2) || IsStrictlyBetween(t1, t2);
}

inline bool wxDateTime::IsSameDate(const wxDateTime& dt) const
{
    Tm tm1 = GetTm(),
       tm2 = dt.GetTm();

    return tm1.year == tm2.year &&
           tm1.mon == tm2.mon &&
           tm1.mday == tm2.mday;
}

inline bool wxDateTime::IsSameTime(const wxDateTime& dt) const
{





    Tm tm1 = GetTm(),
       tm2 = dt.GetTm();

    return tm1.hour == tm2.hour &&
           tm1.min == tm2.min &&
           tm1.sec == tm2.sec &&
           tm1.msec == tm2.msec;
}

inline bool wxDateTime::IsEqualUpTo(const wxDateTime& dt,
                                    const wxTimeSpan& ts) const
{
    return IsBetween(dt.Subtract(ts), dt.Add(ts));
}





inline wxDateTime wxDateTime::Add(const wxTimeSpan& diff) const
{
    do { if ( IsValid() ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/datetime.h", 1856, __FUNCTION__, "IsValid()", L"invalid wxDateTime"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );

    return wxDateTime(m_time + diff.GetValue());
}

inline wxDateTime& wxDateTime::Add(const wxTimeSpan& diff)
{
    do { if ( IsValid() ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/datetime.h", 1863, __FUNCTION__, "IsValid()", L"invalid wxDateTime"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );

    m_time += diff.GetValue();

    return *this;
}

inline wxDateTime& wxDateTime::operator+=(const wxTimeSpan& diff)
{
    return Add(diff);
}

inline wxDateTime wxDateTime::Subtract(const wxTimeSpan& diff) const
{
    do { if ( IsValid() ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/datetime.h", 1877, __FUNCTION__, "IsValid()", L"invalid wxDateTime"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );

    return wxDateTime(m_time - diff.GetValue());
}

inline wxDateTime& wxDateTime::Subtract(const wxTimeSpan& diff)
{
    do { if ( IsValid() ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/datetime.h", 1884, __FUNCTION__, "IsValid()", L"invalid wxDateTime"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );

    m_time -= diff.GetValue();

    return *this;
}

inline wxDateTime& wxDateTime::operator-=(const wxTimeSpan& diff)
{
    return Subtract(diff);
}

inline wxTimeSpan wxDateTime::Subtract(const wxDateTime& datetime) const
{
    do { if ( IsValid() && datetime.IsValid() ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/datetime.h", 1898, __FUNCTION__, "IsValid() && datetime.IsValid()", L"invalid wxDateTime"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );

    return wxTimeSpan(GetValue() - datetime.GetValue());
}

inline wxTimeSpan wxDateTime::operator-(const wxDateTime& dt2) const
{
    return this->Subtract(dt2);
}

inline wxDateTime wxDateTime::Add(const wxDateSpan& diff) const
{
    return wxDateTime(*this).Add(diff);
}

inline wxDateTime& wxDateTime::Subtract(const wxDateSpan& diff)
{
    return Add(diff.Negate());
}

inline wxDateTime wxDateTime::Subtract(const wxDateSpan& diff) const
{
    return wxDateTime(*this).Subtract(diff);
}

inline wxDateTime& wxDateTime::operator-=(const wxDateSpan& diff)
{
    return Subtract(diff);
}

inline wxDateTime& wxDateTime::operator+=(const wxDateSpan& diff)
{
    return Add(diff);
}





inline wxDateTime
wxDateTime::ToTimezone(const wxDateTime::TimeZone& tz, bool noDST) const
{
    return wxDateTime(*this).MakeTimezone(tz, noDST);
}

inline wxDateTime
wxDateTime::FromTimezone(const wxDateTime::TimeZone& tz, bool noDST) const
{
    return wxDateTime(*this).MakeFromTimezone(tz, noDST);
}





inline wxTimeSpan::wxTimeSpan(long hours,
                              long minutes,
                              wxLongLong seconds,
                              wxLongLong milliseconds)
{

    m_diff = hours;
    m_diff *= 60l;
    m_diff += minutes;
    m_diff *= 60l;
    m_diff += seconds;
    m_diff *= 1000l;
    m_diff += milliseconds;
}





inline wxLongLong wxTimeSpan::GetSeconds() const
{
    return m_diff / 1000l;
}

inline int wxTimeSpan::GetMinutes() const
{


    return static_cast<int>((GetSeconds() / 60l).GetLo());
}

inline int wxTimeSpan::GetHours() const
{
    return GetMinutes() / 60;
}

inline int wxTimeSpan::GetDays() const
{
    return GetHours() / 24;
}

inline int wxTimeSpan::GetWeeks() const
{
    return GetDays() / 7;
}





inline wxTimeSpan wxTimeSpan::Add(const wxTimeSpan& diff) const
{
    return wxTimeSpan(m_diff + diff.GetValue());
}

inline wxTimeSpan& wxTimeSpan::Add(const wxTimeSpan& diff)
{
    m_diff += diff.GetValue();

    return *this;
}

inline wxTimeSpan wxTimeSpan::Subtract(const wxTimeSpan& diff) const
{
    return wxTimeSpan(m_diff - diff.GetValue());
}

inline wxTimeSpan& wxTimeSpan::Subtract(const wxTimeSpan& diff)
{
    m_diff -= diff.GetValue();

    return *this;
}

inline wxTimeSpan& wxTimeSpan::Multiply(int n)
{
    m_diff *= (long)n;

    return *this;
}

inline wxTimeSpan wxTimeSpan::Multiply(int n) const
{
    return wxTimeSpan(m_diff * (long)n);
}

inline wxTimeSpan wxTimeSpan::Abs() const
{
    return wxTimeSpan(GetValue().Abs());
}

inline bool wxTimeSpan::IsEqualTo(const wxTimeSpan& ts) const
{
    return GetValue() == ts.GetValue();
}

inline bool wxTimeSpan::IsLongerThan(const wxTimeSpan& ts) const
{
    return GetValue().Abs() > ts.GetValue().Abs();
}

inline bool wxTimeSpan::IsShorterThan(const wxTimeSpan& ts) const
{
    return GetValue().Abs() < ts.GetValue().Abs();
}





inline wxDateSpan& wxDateSpan::operator+=(const wxDateSpan& other)
{
    m_years += other.m_years;
    m_months += other.m_months;
    m_weeks += other.m_weeks;
    m_days += other.m_days;

    return *this;
}

inline wxDateSpan& wxDateSpan::Add(const wxDateSpan& other)
{
    return *this += other;
}

inline wxDateSpan wxDateSpan::Add(const wxDateSpan& other) const
{
    wxDateSpan ds(*this);
    ds.Add(other);
    return ds;
}

inline wxDateSpan& wxDateSpan::Multiply(int factor)
{
    m_years *= factor;
    m_months *= factor;
    m_weeks *= factor;
    m_days *= factor;

    return *this;
}

inline wxDateSpan wxDateSpan::Multiply(int factor) const
{
    wxDateSpan ds(*this);
    ds.Multiply(factor);
    return ds;
}

inline wxDateSpan wxDateSpan::Negate() const
{
    return wxDateSpan(-m_years, -m_months, -m_weeks, -m_days);
}

inline wxDateSpan& wxDateSpan::Neg()
{
    m_years = -m_years;
    m_months = -m_months;
    m_weeks = -m_weeks;
    m_days = -m_days;

    return *this;
}

inline wxDateSpan& wxDateSpan::operator-=(const wxDateSpan& other)
{
    return *this += other.Negate();
}

inline wxDateSpan& wxDateSpan::Subtract(const wxDateSpan& other)
{
    return *this -= other;
}

inline wxDateSpan wxDateSpan::Subtract(const wxDateSpan& other) const
{
    wxDateSpan ds(*this);
    ds.Subtract(other);
    return ds;
}
# 2146 "/usr/include/wx-3.1-unofficial/wx/datetime.h"
wxTimeSpan __attribute__ ((visibility("default"))) operator*(int n, const wxTimeSpan& ts);





wxDateSpan __attribute__ ((visibility("default"))) operator*(int n, const wxDateSpan& ds);
# 2164 "/usr/include/wx-3.1-unofficial/wx/datetime.h"
__attribute__ ((visibility("default"))) void wxNextMonth(wxDateTime::Month& m);
__attribute__ ((visibility("default"))) void wxPrevMonth(wxDateTime::Month& m);
__attribute__ ((visibility("default"))) void wxNextWDay(wxDateTime::WeekDay& wd);
__attribute__ ((visibility("default"))) void wxPrevWDay(wxDateTime::WeekDay& wd);
# 592 "/usr/include/wx-3.1-unofficial/wx/any.h" 2
    template<> class __attribute__ ((visibility("default"))) wxAnyValueTypeImpl<wxDateTime> : public wxAnyValueTypeImplBase<wxDateTime> { friend class wxAny; public: static bool IsSameClass(const wxAnyValueType* otherType) { return AreSameClasses(*sm_instance.get(), *otherType); } virtual bool IsSameType(const wxAnyValueType* otherType) const override { return IsSameClass(otherType); } private: static bool AreSameClasses(const wxAnyValueType& a, const wxAnyValueType& b) { return wxTypeIdentifier(typeid(a).name()) == wxTypeIdentifier(typeid(b).name()); } static wxAnyValueTypeScopedPtr sm_instance; public: static wxAnyValueType* GetInstance() { return sm_instance.get(); } public: wxAnyValueTypeImpl() : wxAnyValueTypeImplBase<wxDateTime>() { } virtual ~wxAnyValueTypeImpl() { } virtual bool ConvertValue(const wxAnyValueBuffer& src, wxAnyValueType* dstType, wxAnyValueBuffer& dst) const override { wxUnusedVar(src); wxUnusedVar(dstType); wxUnusedVar(dst); return false; } };
# 604 "/usr/include/wx-3.1-unofficial/wx/any.h"
class wxAnyToVariantRegistration;


# 1 "/usr/include/wx-3.1-unofficial/wx/variant.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/variant.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/variant.h" 2
# 29 "/usr/include/wx-3.1-unofficial/wx/variant.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/iosfwrap.h" 1
# 30 "/usr/include/wx-3.1-unofficial/wx/variant.h" 2

class wxAny;
# 56 "/usr/include/wx-3.1-unofficial/wx/variant.h"
class __attribute__ ((visibility("default"))) wxVariantData : public wxObjectRefData
{
    friend class wxVariant;
public:
    wxVariantData() { }


    virtual bool Eq(wxVariantData& data) const = 0;


    virtual bool Write(std:: ostream& ) const { return false; }

    virtual bool Write(wxString& ) const { return false; }

    virtual bool Read(std:: istream& ) { return false; }

    virtual bool Read(wxString& ) { return false; }

    virtual wxString GetType() const = 0;

    virtual wxClassInfo* GetValueClassInfo() { return 
# 76 "/usr/include/wx-3.1-unofficial/wx/variant.h" 3 4
                                                     __null
# 76 "/usr/include/wx-3.1-unofficial/wx/variant.h"
                                                         ; }



    virtual wxVariantData* Clone() const { return 
# 80 "/usr/include/wx-3.1-unofficial/wx/variant.h" 3 4
                                                 __null
# 80 "/usr/include/wx-3.1-unofficial/wx/variant.h"
                                                     ; }



    virtual bool GetAsAny(wxAny* ) const { return false; }


protected:



    virtual ~wxVariantData() { }
};






class wxVariant;

typedef wxVariant _WX_LIST_ITEM_TYPE_wxVariantList; typedef int (*wxSortFuncFor_wxVariantList)(const wxVariant **, const wxVariant **); class __attribute__ ((visibility("default"))) wxwxVariantListNode : public wxNodeBase { public: wxwxVariantListNode(wxListBase *list = 
# 101 "/usr/include/wx-3.1-unofficial/wx/variant.h" 3 4
__null
# 101 "/usr/include/wx-3.1-unofficial/wx/variant.h"
, wxwxVariantListNode *previous = 
# 101 "/usr/include/wx-3.1-unofficial/wx/variant.h" 3 4
__null
# 101 "/usr/include/wx-3.1-unofficial/wx/variant.h"
, wxwxVariantListNode *next = 
# 101 "/usr/include/wx-3.1-unofficial/wx/variant.h" 3 4
__null
# 101 "/usr/include/wx-3.1-unofficial/wx/variant.h"
, wxVariant *data = 
# 101 "/usr/include/wx-3.1-unofficial/wx/variant.h" 3 4
__null
# 101 "/usr/include/wx-3.1-unofficial/wx/variant.h"
, const wxListKey& key = wxDefaultListKey) : wxNodeBase(list, previous, next, data, key) { } wxwxVariantListNode *GetNext() const { return (wxwxVariantListNode *)wxNodeBase::GetNext(); } wxwxVariantListNode *GetPrevious() const { return (wxwxVariantListNode *)wxNodeBase::GetPrevious(); } wxVariant *GetData() const { return (wxVariant *)wxNodeBase::GetData(); } void SetData(wxVariant *data) { wxNodeBase::SetData(data); } protected: virtual void DeleteData() override; private: wxwxVariantListNode(const wxwxVariantListNode&) = delete; wxwxVariantListNode& operator=(const wxwxVariantListNode&) = delete; }; class __attribute__ ((visibility("default"))) wxVariantList : public wxListBase { public: typedef wxwxVariantListNode Node; class __attribute__ ((visibility("default"))) compatibility_iterator { public: compatibility_iterator(Node *ptr = 
# 101 "/usr/include/wx-3.1-unofficial/wx/variant.h" 3 4
__null
# 101 "/usr/include/wx-3.1-unofficial/wx/variant.h"
) : m_ptr(ptr) { } Node *operator->() const { return m_ptr; } operator Node *() const { return m_ptr; } private: Node *m_ptr; }; wxVariantList(wxKeyType keyType = wxKEY_NONE) : wxListBase(keyType) { } wxVariantList(const wxVariantList& list) : wxListBase(list.GetKeyType()) { Assign(list); } wxVariantList& operator=(const wxVariantList& list) { if (&list != this) Assign(list); return *this; } wxwxVariantListNode *GetFirst() const { return (wxwxVariantListNode *)wxListBase::GetFirst(); } wxwxVariantListNode *GetLast() const { return (wxwxVariantListNode *)wxListBase::GetLast(); } wxwxVariantListNode *Item(size_t index) const { return (wxwxVariantListNode *)wxListBase::Item(index); } wxVariant *operator[](size_t index) const { wxwxVariantListNode *node = Item(index); return node ? (wxVariant*)(node->GetData()) : 
# 101 "/usr/include/wx-3.1-unofficial/wx/variant.h" 3 4
__null
# 101 "/usr/include/wx-3.1-unofficial/wx/variant.h"
; } wxwxVariantListNode *Append(wxVariant *object) { return (wxwxVariantListNode *)wxListBase::Append(object); } wxwxVariantListNode *Insert(wxVariant *object) { return (wxwxVariantListNode *)Insert(static_cast<wxwxVariantListNode *>(
# 101 "/usr/include/wx-3.1-unofficial/wx/variant.h" 3 4
__null
# 101 "/usr/include/wx-3.1-unofficial/wx/variant.h"
), object); } wxwxVariantListNode *Insert(size_t pos, wxVariant *object) { return (wxwxVariantListNode *)wxListBase::Insert(pos, object); } wxwxVariantListNode *Insert(wxwxVariantListNode *prev, wxVariant *object) { return (wxwxVariantListNode *)wxListBase::Insert(prev, object); } wxwxVariantListNode *Append(long key, void *object) { return (wxwxVariantListNode *)wxListBase::Append(key, object); } wxwxVariantListNode *Append(const wxChar *key, void *object) { return (wxwxVariantListNode *)wxListBase::Append(key, object); } wxwxVariantListNode *DetachNode(wxwxVariantListNode *node) { return (wxwxVariantListNode *)wxListBase::DetachNode(node); } bool DeleteNode(wxwxVariantListNode *node) { return wxListBase::DeleteNode(node); } bool DeleteObject(wxVariant *object) { return wxListBase::DeleteObject(object); } void Erase(wxwxVariantListNode *it) { DeleteNode(it); } wxwxVariantListNode *Find(const wxVariant *object) const { return (wxwxVariantListNode *)wxListBase::Find(object); } virtual wxwxVariantListNode *Find(const wxListKey& key) const { return (wxwxVariantListNode *)wxListBase::Find(key); } bool Member(const wxVariant *object) const { return Find(object) != 
# 101 "/usr/include/wx-3.1-unofficial/wx/variant.h" 3 4
__null
# 101 "/usr/include/wx-3.1-unofficial/wx/variant.h"
; } int IndexOf(wxVariant *object) const { return wxListBase::IndexOf(object); } void Sort(wxSortCompareFunction func) { wxListBase::Sort(func); } void Sort(wxSortFuncFor_wxVariantList func) { Sort((wxSortCompareFunction)func); } protected: virtual wxNodeBase *CreateNode(wxNodeBase *prev, wxNodeBase *next, void *data, const wxListKey& key = wxDefaultListKey) override { return new wxwxVariantListNode(this, (wxwxVariantListNode *)prev, (wxwxVariantListNode *)next, (wxVariant *)data, key); } public: typedef size_t size_type; typedef int difference_type; typedef wxVariant* value_type; typedef wxVariant* base_value_type; typedef value_type& reference; typedef const value_type& const_reference; typedef base_value_type& base_reference; typedef const base_value_type& const_base_reference; class __attribute__ ((visibility("default"))) iterator { public: typedef std::ptrdiff_t difference_type; typedef std::bidirectional_iterator_tag iterator_category; typedef wxVariant* value_type; typedef value_type* pointer; typedef value_type& reference; typedef wxwxVariantListNode Node; typedef iterator itor; Node* m_node; Node* m_init; public: typedef reference reference_type; typedef pointer pointer_type; iterator(Node* node, Node* init) : m_node(node), m_init(init) {} iterator() : m_node(
# 101 "/usr/include/wx-3.1-unofficial/wx/variant.h" 3 4
__null
# 101 "/usr/include/wx-3.1-unofficial/wx/variant.h"
), m_init(
# 101 "/usr/include/wx-3.1-unofficial/wx/variant.h" 3 4
__null
# 101 "/usr/include/wx-3.1-unofficial/wx/variant.h"
) { } reference_type operator*() const { return *(pointer_type)m_node->GetDataPtr(); } itor& operator++() { do { if ( m_node ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/variant.h", 101, __FUNCTION__, "m_node", L"uninitialized iterator"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); m_node = m_node->GetNext(); return *this; } const itor operator++(int) { itor tmp = *this; do { if ( m_node ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/variant.h", 101, __FUNCTION__, "m_node", L"uninitialized iterator"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); m_node = m_node->GetNext(); return tmp; } itor& operator--() { m_node = m_node ? m_node->GetPrevious() : m_init; return *this; } const itor operator--(int) { itor tmp = *this; m_node = m_node ? m_node->GetPrevious() : m_init; return tmp; } bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; class __attribute__ ((visibility("default"))) const_iterator { public: typedef std::ptrdiff_t difference_type; typedef std::bidirectional_iterator_tag iterator_category; typedef wxVariant* value_type; typedef const value_type* pointer; typedef const value_type& reference; typedef wxwxVariantListNode Node; typedef const_iterator itor; Node* m_node; Node* m_init; public: typedef reference reference_type; typedef pointer pointer_type; const_iterator(Node* node, Node* init) : m_node(node), m_init(init) { } const_iterator() : m_node(
# 101 "/usr/include/wx-3.1-unofficial/wx/variant.h" 3 4
__null
# 101 "/usr/include/wx-3.1-unofficial/wx/variant.h"
), m_init(
# 101 "/usr/include/wx-3.1-unofficial/wx/variant.h" 3 4
__null
# 101 "/usr/include/wx-3.1-unofficial/wx/variant.h"
) { } const_iterator(const iterator& it) : m_node(it.m_node), m_init(it.m_init) { } reference_type operator*() const { return *(pointer_type)m_node->GetDataPtr(); } itor& operator++() { do { if ( m_node ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/variant.h", 101, __FUNCTION__, "m_node", L"uninitialized iterator"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); m_node = m_node->GetNext(); return *this; } const itor operator++(int) { itor tmp = *this; do { if ( m_node ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/variant.h", 101, __FUNCTION__, "m_node", L"uninitialized iterator"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); m_node = m_node->GetNext(); return tmp; } itor& operator--() { m_node = m_node ? m_node->GetPrevious() : m_init; return *this; } const itor operator--(int) { itor tmp = *this; m_node = m_node ? m_node->GetPrevious() : m_init; return tmp; } bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; class __attribute__ ((visibility("default"))) reverse_iterator { public: typedef std::ptrdiff_t difference_type; typedef std::bidirectional_iterator_tag iterator_category; typedef wxVariant* value_type; typedef value_type* pointer; typedef value_type& reference; typedef wxwxVariantListNode Node; typedef reverse_iterator itor; Node* m_node; Node* m_init; public: typedef reference reference_type; typedef pointer pointer_type; reverse_iterator(Node* node, Node* init) : m_node(node), m_init(init) { } reverse_iterator() : m_node(
# 101 "/usr/include/wx-3.1-unofficial/wx/variant.h" 3 4
__null
# 101 "/usr/include/wx-3.1-unofficial/wx/variant.h"
), m_init(
# 101 "/usr/include/wx-3.1-unofficial/wx/variant.h" 3 4
__null
# 101 "/usr/include/wx-3.1-unofficial/wx/variant.h"
) { } reference_type operator*() const { return *(pointer_type)m_node->GetDataPtr(); } itor& operator++() { m_node = m_node->GetPrevious(); return *this; } const itor operator++(int) { itor tmp = *this; m_node = m_node->GetPrevious(); return tmp; } itor& operator--() { m_node = m_node ? m_node->GetNext() : m_init; return *this; } const itor operator--(int) { itor tmp = *this; m_node = m_node ? m_node->GetNext() : m_init; return tmp; } bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; class __attribute__ ((visibility("default"))) const_reverse_iterator { public: typedef std::ptrdiff_t difference_type; typedef std::bidirectional_iterator_tag iterator_category; typedef wxVariant* value_type; typedef const value_type* pointer; typedef const value_type& reference; typedef wxwxVariantListNode Node; typedef const_reverse_iterator itor; Node* m_node; Node* m_init; public: typedef reference reference_type; typedef pointer pointer_type; const_reverse_iterator(Node* node, Node* init) : m_node(node), m_init(init) { } const_reverse_iterator() : m_node(
# 101 "/usr/include/wx-3.1-unofficial/wx/variant.h" 3 4
__null
# 101 "/usr/include/wx-3.1-unofficial/wx/variant.h"
), m_init(
# 101 "/usr/include/wx-3.1-unofficial/wx/variant.h" 3 4
__null
# 101 "/usr/include/wx-3.1-unofficial/wx/variant.h"
) { } const_reverse_iterator(const reverse_iterator& it) : m_node(it.m_node), m_init(it.m_init) { } reference_type operator*() const { return *(pointer_type)m_node->GetDataPtr(); } itor& operator++() { m_node = m_node->GetPrevious(); return *this; } const itor operator++(int) { itor tmp = *this; m_node = m_node->GetPrevious(); return tmp; } itor& operator--() { m_node = m_node ? m_node->GetNext() : m_init; return *this;} const itor operator--(int) { itor tmp = *this; m_node = m_node ? m_node->GetNext() : m_init; return tmp; } bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; explicit wxVariantList(size_type n, const_reference v = value_type()) { assign(n, v); } wxVariantList(const const_iterator& first, const const_iterator& last) { assign(first, last); } iterator begin() { return iterator(GetFirst(), GetLast()); } const_iterator begin() const { return const_iterator(GetFirst(), GetLast()); } iterator end() { return iterator(
# 101 "/usr/include/wx-3.1-unofficial/wx/variant.h" 3 4
__null
# 101 "/usr/include/wx-3.1-unofficial/wx/variant.h"
, GetLast()); } const_iterator end() const { return const_iterator(
# 101 "/usr/include/wx-3.1-unofficial/wx/variant.h" 3 4
__null
# 101 "/usr/include/wx-3.1-unofficial/wx/variant.h"
, GetLast()); } reverse_iterator rbegin() { return reverse_iterator(GetLast(), GetFirst()); } const_reverse_iterator rbegin() const { return const_reverse_iterator(GetLast(), GetFirst()); } reverse_iterator rend() { return reverse_iterator(
# 101 "/usr/include/wx-3.1-unofficial/wx/variant.h" 3 4
__null
# 101 "/usr/include/wx-3.1-unofficial/wx/variant.h"
, GetFirst()); } const_reverse_iterator rend() const { return const_reverse_iterator(
# 101 "/usr/include/wx-3.1-unofficial/wx/variant.h" 3 4
__null
# 101 "/usr/include/wx-3.1-unofficial/wx/variant.h"
, GetFirst()); } void resize(size_type n, value_type v = value_type()) { while (n < size()) pop_back(); while (n > size()) push_back(v); } size_type size() const { return GetCount(); } size_type max_size() const { return 0x7fffffff; } bool empty() const { return IsEmpty(); } reference front() { return *begin(); } const_reference front() const { return *begin(); } reference back() { iterator tmp = end(); return *--tmp; } const_reference back() const { const_iterator tmp = end(); return *--tmp; } void push_front(const_reference v = value_type()) { Insert(GetFirst(), (const_base_reference)v); } void pop_front() { DeleteNode(GetFirst()); } void push_back(const_reference v = value_type()) { Append((const_base_reference)v); } void pop_back() { DeleteNode(GetLast()); } void assign(const_iterator first, const const_iterator& last) { clear(); for(; first != last; ++first) Append((const_base_reference)*first); } void assign(size_type n, const_reference v = value_type()) { clear(); for(size_type i = 0; i < n; ++i) Append((const_base_reference)v); } iterator insert(const iterator& it, const_reference v) { if ( it == end() ) { Append((const_base_reference)v); iterator itins(end()); return --itins; } else { Insert(it.m_node, (const_base_reference)v); iterator itins(it); return --itins; } } void insert(const iterator& it, size_type n, const_reference v) { for(size_type i = 0; i < n; ++i) insert(it, v); } void insert(const iterator& it, const_iterator first, const const_iterator& last) { for(; first != last; ++first) insert(it, *first); } iterator erase(const iterator& it) { iterator next = iterator(it.m_node->GetNext(), GetLast()); DeleteNode(it.m_node); return next; } iterator erase(const iterator& first, const iterator& last) { iterator next = last; if ( next != end() ) ++next; DeleteNodes(first.m_node, last.m_node); return next; } void clear() { Clear(); } void splice(const iterator& it, wxVariantList& l, const iterator& first, const iterator& last) { insert(it, first, last); l.erase(first, last); } void splice(const iterator& it, wxVariantList& l) { splice(it, l, l.begin(), l.end() ); } void splice(const iterator& it, wxVariantList& l, const iterator& first) { if ( it != first ) { insert(it, *first); l.erase(first); } } void remove(const_reference v) { DeleteObject((const_base_reference)v); } void reverse() { Reverse(); } };

class __attribute__ ((visibility("default"))) wxVariant: public wxObject
{
public:
    wxVariant();

    wxVariant(const wxVariant& variant);
    wxVariant(wxVariantData* data, const wxString& name = wxEmptyString);

    wxVariant(const wxAny& any);

    virtual ~wxVariant();


    void operator= (const wxVariant& variant);



    void operator= (wxVariantData* variantData);

    bool operator== (const wxVariant& variant) const;
    bool operator!= (const wxVariant& variant) const;


    inline void SetName(const wxString& name) { m_name = name; }
    inline const wxString& GetName() const { return m_name; }


    bool IsNull() const;



    wxVariantData* GetData() const
    {
        return (wxVariantData*) m_refData;
    }
    void SetData(wxVariantData* data) ;


    void Ref(const wxVariant& clone) { wxObject::Ref(clone); }


    bool Unshare();


    void MakeNull();


    void Clear();



    wxString GetType() const;

    bool IsType(const wxString& type) const;
    bool IsValueKindOf(const wxClassInfo* type) const;


    wxString MakeString() const;


    wxAny GetAny() const;



    wxVariant(double val, const wxString& name = wxEmptyString);
    bool operator== (double value) const;
    bool operator!= (double value) const;
    void operator= (double value) ;
    inline operator double () const { return GetDouble(); }
    inline double GetReal() const { return GetDouble(); }
    double GetDouble() const;


    wxVariant(long val, const wxString& name = wxEmptyString);
    wxVariant(int val, const wxString& name = wxEmptyString);
    wxVariant(short val, const wxString& name = wxEmptyString);
    bool operator== (long value) const;
    bool operator!= (long value) const;
    void operator= (long value) ;
    inline operator long () const { return GetLong(); }
    inline long GetInteger() const { return GetLong(); }
    long GetLong() const;


    wxVariant(bool val, const wxString& name = wxEmptyString);
    bool operator== (bool value) const;
    bool operator!= (bool value) const;
    void operator= (bool value) ;
    inline operator bool () const { return GetBool(); }
    bool GetBool() const ;



    wxVariant(const wxDateTime& val, const wxString& name = wxEmptyString);
    bool operator== (const wxDateTime& value) const;
    bool operator!= (const wxDateTime& value) const;
    void operator= (const wxDateTime& value) ;
    inline operator wxDateTime () const { return GetDateTime(); }
    wxDateTime GetDateTime() const;



    wxVariant(const wxString& val, const wxString& name = wxEmptyString);


    wxVariant(const char* val, const wxString& name = wxEmptyString);
    wxVariant(const wchar_t* val, const wxString& name = wxEmptyString);
    wxVariant(const wxCStrData& val, const wxString& name = wxEmptyString);
    wxVariant(const wxScopedCharBuffer& val, const wxString& name = wxEmptyString);
    wxVariant(const wxScopedWCharBuffer& val, const wxString& name = wxEmptyString);

    bool operator== (const wxString& value) const;
    bool operator!= (const wxString& value) const;
    wxVariant& operator=(const wxString& value);



    wxVariant& operator=(const char* value)
        { return *this = wxString(value); }

    wxVariant& operator=(const wchar_t* value)
        { return *this = wxString(value); }
    wxVariant& operator=(const wxCStrData& value)
        { return *this = value.AsString(); }
    template<typename T>
    wxVariant& operator=(const wxScopedCharTypeBuffer<T>& value)
        { return *this = value.data(); }

    inline operator wxString () const { return MakeString(); }
    wxString GetString() const;



    wxVariant(const std::string& val, const wxString& name = wxEmptyString);
    bool operator==(const std::string& value) const
        { return operator==(wxString(value)); }
    bool operator!=(const std::string& value) const
        { return operator!=(wxString(value)); }
    wxVariant& operator=(const std::string& value)
        { return operator=(wxString(value)); }
    operator std::string() const { return (operator wxString()).ToStdString(); }


    wxVariant(const wxStdWideString& val, const wxString& name = wxEmptyString);
    bool operator==(const wxStdWideString& value) const
        { return operator==(wxString(value)); }
    bool operator!=(const wxStdWideString& value) const
        { return operator!=(wxString(value)); }
    wxVariant& operator=(const wxStdWideString& value)
        { return operator=(wxString(value)); }
    operator wxStdWideString() const { return (operator wxString()).ToStdWstring(); }



    wxVariant(const wxUniChar& val, const wxString& name = wxEmptyString);
    wxVariant(const wxUniCharRef& val, const wxString& name = wxEmptyString);
    wxVariant(char val, const wxString& name = wxEmptyString);
    wxVariant(wchar_t val, const wxString& name = wxEmptyString);
    bool operator==(const wxUniChar& value) const;
    bool operator==(const wxUniCharRef& value) const { return *this == wxUniChar(value); }
    bool operator==(char value) const { return *this == wxUniChar(value); }
    bool operator==(wchar_t value) const { return *this == wxUniChar(value); }
    bool operator!=(const wxUniChar& value) const { return !(*this == value); }
    bool operator!=(const wxUniCharRef& value) const { return !(*this == value); }
    bool operator!=(char value) const { return !(*this == value); }
    bool operator!=(wchar_t value) const { return !(*this == value); }
    wxVariant& operator=(const wxUniChar& value);
    wxVariant& operator=(const wxUniCharRef& value) { return *this = wxUniChar(value); }
    wxVariant& operator=(char value) { return *this = wxUniChar(value); }
    wxVariant& operator=(wchar_t value) { return *this = wxUniChar(value); }
    operator wxUniChar() const { return GetChar(); }
    operator char() const { return GetChar(); }
    operator wchar_t() const { return GetChar(); }
    wxUniChar GetChar() const;


    wxVariant(const wxArrayString& val, const wxString& name = wxEmptyString);
    bool operator== (const wxArrayString& value) const;
    bool operator!= (const wxArrayString& value) const;
    void operator= (const wxArrayString& value);
    operator wxArrayString () const { return GetArrayString(); }
    wxArrayString GetArrayString() const;


    wxVariant(void* ptr, const wxString& name = wxEmptyString);
    bool operator== (void* value) const;
    bool operator!= (void* value) const;
    void operator= (void* value);
    operator void* () const { return GetVoidPtr(); }
    void* GetVoidPtr() const;


    wxVariant(wxObject* ptr, const wxString& name = wxEmptyString);
    bool operator== (wxObject* value) const;
    bool operator!= (wxObject* value) const;
    void operator= (wxObject* value);
    wxObject* GetWxObjectPtr() const;



    wxVariant(wxLongLong, const wxString& name = wxEmptyString);
    bool operator==(wxLongLong value) const;
    bool operator!=(wxLongLong value) const;
    void operator=(wxLongLong value);
    operator wxLongLong() const { return GetLongLong(); }
    wxLongLong GetLongLong() const;


    wxVariant(wxULongLong, const wxString& name = wxEmptyString);
    bool operator==(wxULongLong value) const;
    bool operator!=(wxULongLong value) const;
    void operator=(wxULongLong value);
    operator wxULongLong() const { return GetULongLong(); }
    wxULongLong GetULongLong() const;






    wxVariant(const wxVariantList& val, const wxString& name = wxEmptyString);
    bool operator== (const wxVariantList& value) const;
    bool operator!= (const wxVariantList& value) const;
    void operator= (const wxVariantList& value) ;

    wxVariant operator[] (size_t idx) const;
    wxVariant& operator[] (size_t idx) ;
    wxVariantList& GetList() const ;


    size_t GetCount() const;


    void NullList();


    void Append(const wxVariant& value);


    void Insert(const wxVariant& value);


    bool Member(const wxVariant& value) const;


    bool Delete(size_t item);


    void ClearList();

public:

    bool Convert(long* value) const;
    bool Convert(bool* value) const;
    bool Convert(double* value) const;
    bool Convert(wxString* value) const;
    bool Convert(wxUniChar* value) const;
    bool Convert(char* value) const;
    bool Convert(wchar_t* value) const;

    bool Convert(wxDateTime* value) const;


    bool Convert(wxLongLong* value) const;
    bool Convert(wxULongLong* value) const;

    bool Convert(long long* value) const
    {
        wxLongLong temp;
        if ( !Convert(&temp) )
            return false;
        *value = temp.GetValue();
        return true;
    }
    bool Convert(unsigned long long* value) const
    {
        wxULongLong temp;
        if ( !Convert(&temp) )
            return false;
        *value = temp.GetValue();
        return true;
    }




protected:
    virtual wxObjectRefData *CreateRefData() const override;
    virtual wxObjectRefData *CloneRefData(const wxObjectRefData *data) const override;

    wxString m_name;

private:
    public:
# 396 "/usr/include/wx-3.1-unofficial/wx/variant.h"
#pragma GCC diagnostic push
# 396 "/usr/include/wx-3.1-unofficial/wx/variant.h"
   
# 396 "/usr/include/wx-3.1-unofficial/wx/variant.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 396 "/usr/include/wx-3.1-unofficial/wx/variant.h"
    virtual wxClassInfo *GetClassInfo() const;
# 396 "/usr/include/wx-3.1-unofficial/wx/variant.h"
#pragma GCC diagnostic pop
# 396 "/usr/include/wx-3.1-unofficial/wx/variant.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};







# 1 "/usr/include/wx-3.1-unofficial/wx/any.h" 1
# 406 "/usr/include/wx-3.1-unofficial/wx/variant.h" 2



typedef wxVariantData* (*wxVariantDataFactory)(const wxAny& any);






class __attribute__ ((visibility("default"))) wxAnyToVariantRegistration
{
public:
    wxAnyToVariantRegistration(wxVariantDataFactory factory);
    virtual ~wxAnyToVariantRegistration();

    virtual wxAnyValueType* GetAssociatedType() = 0;
    wxVariantDataFactory GetFactory() const { return m_factory; }
private:
    wxVariantDataFactory m_factory;
};

template<typename T>
class wxAnyToVariantRegistrationImpl : public wxAnyToVariantRegistration
{
public:
    wxAnyToVariantRegistrationImpl(wxVariantDataFactory factory)
        : wxAnyToVariantRegistration(factory)
    {
    }

    virtual wxAnyValueType* GetAssociatedType() override
    {
        return wxAnyValueTypeImpl<T>::GetInstance();
    }
private:
};
# 582 "/usr/include/wx-3.1-unofficial/wx/variant.h"
extern wxVariant __attribute__ ((visibility("default"))) wxNullVariant;
# 608 "/usr/include/wx-3.1-unofficial/wx/any.h" 2






class __attribute__ ((visibility("default"))) wxAnyValueTypeImplVariantData :
    public wxAnyValueTypeImplBase<wxVariantData*>
{
    friend class wxAny; public: static bool IsSameClass(const wxAnyValueType* otherType) { return AreSameClasses(*sm_instance.get(), *otherType); } virtual bool IsSameType(const wxAnyValueType* otherType) const override { return IsSameClass(otherType); } private: static bool AreSameClasses(const wxAnyValueType& a, const wxAnyValueType& b) { return wxTypeIdentifier(typeid(a).name()) == wxTypeIdentifier(typeid(b).name()); } static wxAnyValueTypeScopedPtr sm_instance; public: static wxAnyValueType* GetInstance() { return sm_instance.get(); }
public:
    wxAnyValueTypeImplVariantData() :
        wxAnyValueTypeImplBase<wxVariantData*>() { }
    virtual ~wxAnyValueTypeImplVariantData() { }

    virtual void DeleteValue(wxAnyValueBuffer& buf) const override
    {
        wxVariantData* data = static_cast<wxVariantData*>(buf.m_ptr);
        if ( data )
            data->DecRef();
    }

    virtual void CopyBuffer(const wxAnyValueBuffer& src,
                            wxAnyValueBuffer& dst) const override
    {
        wxVariantData* data = static_cast<wxVariantData*>(src.m_ptr);
        if ( data )
            data->IncRef();
        dst.m_ptr = data;
    }

    static void SetValue(wxVariantData* value,
                         wxAnyValueBuffer& buf)
    {
        value->IncRef();
        buf.m_ptr = value;
    }

    static wxVariantData* GetValue(const wxAnyValueBuffer& buf)
    {
        return static_cast<wxVariantData*>(buf.m_ptr);
    }

    virtual bool ConvertValue(const wxAnyValueBuffer& src,
                              wxAnyValueType* dstType,
                              wxAnyValueBuffer& dst) const override
    {
        wxUnusedVar(src);
        wxUnusedVar(dstType);
        wxUnusedVar(dst);
        return false;
    }
};

template<>
class wxAnyValueTypeImpl<wxVariantData*> :
    public wxAnyValueTypeImplVariantData
{
public:
    wxAnyValueTypeImpl() : wxAnyValueTypeImplVariantData() { }
    virtual ~wxAnyValueTypeImpl() { }
};
# 680 "/usr/include/wx-3.1-unofficial/wx/any.h"
extern __attribute__ ((visibility("default"))) wxAnyValueType* wxAnyNullValueType;
# 715 "/usr/include/wx-3.1-unofficial/wx/any.h"
extern __attribute__ ((visibility("default"))) void
wxPreRegisterAnyToVariant(wxAnyToVariantRegistration* reg);


extern __attribute__ ((visibility("default"))) bool
wxConvertAnyToVariant(const wxAny& any, wxVariant* variant);
# 731 "/usr/include/wx-3.1-unofficial/wx/any.h"
class wxAny
{
public:



    wxAny()
    {
        m_type = wxAnyNullValueType;
    }




    ~wxAny()
    {
        m_type->DeleteValue(m_buffer);
    }





    template<typename T>
    wxAny(const T& value)
    {
        m_type = wxAnyValueTypeImpl<T>::sm_instance.get();
        wxAnyValueTypeImpl<T>::SetValue(value, m_buffer);
    }



    wxAny(const char* value)
    {
        m_type = wxAnyValueTypeImpl<const char*>::sm_instance.get();
        wxAnyValueTypeImpl<const char*>::SetValue(value, m_buffer);
    }

    wxAny(const wchar_t* value)
    {
        m_type = wxAnyValueTypeImpl<const wchar_t*>::sm_instance.get();
        wxAnyValueTypeImpl<const wchar_t*>::SetValue(value, m_buffer);
    }

    wxAny(const wxAny& any)
    {
        m_type = wxAnyNullValueType;
        AssignAny(any);
    }


    wxAny(const wxVariant& variant)
    {
        m_type = wxAnyNullValueType;
        AssignVariant(variant);
    }
# 797 "/usr/include/wx-3.1-unofficial/wx/any.h"
    template <typename T>
    bool CheckType() const
    {
        return m_type->CheckType<T>();
    }
# 812 "/usr/include/wx-3.1-unofficial/wx/any.h"
    const wxAnyValueType* GetType() const
    {
        return m_type;
    }





    bool HasSameType(const wxAny& other) const
    {
        return GetType()->IsSameType(other.GetType());
    }




    bool IsNull() const
    {
        return (m_type == wxAnyNullValueType);
    }




    void MakeNull()
    {
        m_type->DeleteValue(m_buffer);
        m_type = wxAnyNullValueType;
    }





    template<typename T>
    wxAny& operator=(const T &value)
    {
        m_type->DeleteValue(m_buffer);
        m_type = wxAnyValueTypeImpl<T>::sm_instance.get();
        wxAnyValueTypeImpl<T>::SetValue(value, m_buffer);
        return *this;
    }

    wxAny& operator=(const wxAny &any)
    {
        if (this != &any)
            AssignAny(any);
        return *this;
    }


    wxAny& operator=(const wxVariant &variant)
    {
        AssignVariant(variant);
        return *this;
    }




    wxAny& operator=(const char* value)
    {
        Assign(value);
        return *this;
    }

    wxAny& operator=(const wchar_t* value)
    {
        Assign(value);
        return *this;
    }





    bool operator==(const wxString& value) const
    {
        wxString value2;
        if ( !GetAs(&value2) )
            return false;
        return value == value2;
    }


    bool operator==(const char* value) const
        { return (*this) == wxString(value); }

    bool operator==(const wchar_t* value) const
        { return (*this) == wxString(value); }




    bool operator==(signed char value) const { if ( wxAnyValueTypeImpl<signed char>::IsSameClass(m_type) ) return (value == static_cast<signed char> (wxAnyValueTypeImpl<signed char>::GetValue(m_buffer))); if ( wxAnyValueTypeImpl<unsigned char>::IsSameClass(m_type) ) return (value == static_cast<signed char> (wxAnyValueTypeImpl<unsigned char>::GetValue(m_buffer))); return false; } bool operator==(unsigned char value) const { if ( wxAnyValueTypeImpl<unsigned char>::IsSameClass(m_type) ) return (value == static_cast<unsigned char> (wxAnyValueTypeImpl<unsigned char>::GetValue(m_buffer))); if ( wxAnyValueTypeImpl<signed char>::IsSameClass(m_type) ) return (value == static_cast<unsigned char> (wxAnyValueTypeImpl<signed char>::GetValue(m_buffer))); return false; }
    bool operator==(signed short value) const { if ( wxAnyValueTypeImpl<signed short>::IsSameClass(m_type) ) return (value == static_cast<signed short> (wxAnyValueTypeImpl<signed short>::GetValue(m_buffer))); if ( wxAnyValueTypeImpl<unsigned short>::IsSameClass(m_type) ) return (value == static_cast<signed short> (wxAnyValueTypeImpl<unsigned short>::GetValue(m_buffer))); return false; } bool operator==(unsigned short value) const { if ( wxAnyValueTypeImpl<unsigned short>::IsSameClass(m_type) ) return (value == static_cast<unsigned short> (wxAnyValueTypeImpl<unsigned short>::GetValue(m_buffer))); if ( wxAnyValueTypeImpl<signed short>::IsSameClass(m_type) ) return (value == static_cast<unsigned short> (wxAnyValueTypeImpl<signed short>::GetValue(m_buffer))); return false; }
    bool operator==(signed int value) const { if ( wxAnyValueTypeImpl<signed int>::IsSameClass(m_type) ) return (value == static_cast<signed int> (wxAnyValueTypeImpl<signed int>::GetValue(m_buffer))); if ( wxAnyValueTypeImpl<unsigned int>::IsSameClass(m_type) ) return (value == static_cast<signed int> (wxAnyValueTypeImpl<unsigned int>::GetValue(m_buffer))); return false; } bool operator==(unsigned int value) const { if ( wxAnyValueTypeImpl<unsigned int>::IsSameClass(m_type) ) return (value == static_cast<unsigned int> (wxAnyValueTypeImpl<unsigned int>::GetValue(m_buffer))); if ( wxAnyValueTypeImpl<signed int>::IsSameClass(m_type) ) return (value == static_cast<unsigned int> (wxAnyValueTypeImpl<signed int>::GetValue(m_buffer))); return false; }
    bool operator==(signed long value) const { if ( wxAnyValueTypeImpl<signed long>::IsSameClass(m_type) ) return (value == static_cast<signed long> (wxAnyValueTypeImpl<signed long>::GetValue(m_buffer))); if ( wxAnyValueTypeImpl<unsigned long>::IsSameClass(m_type) ) return (value == static_cast<signed long> (wxAnyValueTypeImpl<unsigned long>::GetValue(m_buffer))); return false; } bool operator==(unsigned long value) const { if ( wxAnyValueTypeImpl<unsigned long>::IsSameClass(m_type) ) return (value == static_cast<unsigned long> (wxAnyValueTypeImpl<unsigned long>::GetValue(m_buffer))); if ( wxAnyValueTypeImpl<signed long>::IsSameClass(m_type) ) return (value == static_cast<unsigned long> (wxAnyValueTypeImpl<signed long>::GetValue(m_buffer))); return false; }

    bool operator==(long long value) const { if ( wxAnyValueTypeImpl<long long>::IsSameClass(m_type) ) return (value == static_cast<long long> (wxAnyValueTypeImpl<long long>::GetValue(m_buffer))); if ( wxAnyValueTypeImpl<unsigned long long>::IsSameClass(m_type) ) return (value == static_cast<long long> (wxAnyValueTypeImpl<unsigned long long>::GetValue(m_buffer))); return false; } bool operator==(unsigned long long value) const { if ( wxAnyValueTypeImpl<unsigned long long>::IsSameClass(m_type) ) return (value == static_cast<unsigned long long> (wxAnyValueTypeImpl<unsigned long long>::GetValue(m_buffer))); if ( wxAnyValueTypeImpl<long long>::IsSameClass(m_type) ) return (value == static_cast<unsigned long long> (wxAnyValueTypeImpl<long long>::GetValue(m_buffer))); return false; }


   
# 915 "/usr/include/wx-3.1-unofficial/wx/any.h"
#pragma GCC diagnostic push
# 915 "/usr/include/wx-3.1-unofficial/wx/any.h"
   
# 915 "/usr/include/wx-3.1-unofficial/wx/any.h"
#pragma GCC diagnostic ignored "-Wfloat-equal"
# 915 "/usr/include/wx-3.1-unofficial/wx/any.h"
   

    bool operator==(float value) const
    {
        if ( !wxAnyValueTypeImpl<float>::IsSameClass(m_type) )
            return false;

        return value ==
            static_cast<float>
                (wxAnyValueTypeImpl<float>::GetValue(m_buffer));
    }

    bool operator==(double value) const
    {
        if ( !wxAnyValueTypeImpl<double>::IsSameClass(m_type) )
            return false;

        return value ==
            static_cast<double>
                (wxAnyValueTypeImpl<double>::GetValue(m_buffer));
    }

   
# 937 "/usr/include/wx-3.1-unofficial/wx/any.h"
#pragma GCC diagnostic pop
# 937 "/usr/include/wx-3.1-unofficial/wx/any.h"
   

    bool operator==(bool value) const
    {
        if ( !wxAnyValueTypeImpl<bool>::IsSameClass(m_type) )
            return false;

        return value == (wxAnyValueTypeImpl<bool>::GetValue(m_buffer));
    }







    template<typename T>
    bool operator!=(const T& value) const
        { return !((*this) == value); }
# 967 "/usr/include/wx-3.1-unofficial/wx/any.h"
    template <typename T>
    T As(T* = 
# 968 "/usr/include/wx-3.1-unofficial/wx/any.h" 3 4
             __null
# 968 "/usr/include/wx-3.1-unofficial/wx/any.h"
                 ) const
    {
        return wxPrivate::wxAnyAsImpl<T>::DoAs(*this);
    }


    template <typename T>
    T RawAs() const
    {
        if ( !wxAnyValueTypeImpl<T>::IsSameClass(m_type) )
        {
            do { if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/any.h", 979, __FUNCTION__, "\"Assert failure\"", "Incorrect or non-convertible data type"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );
        }

        return static_cast<T>(wxAnyValueTypeImpl<T>::GetValue(m_buffer));
    }
# 997 "/usr/include/wx-3.1-unofficial/wx/any.h"
    template<typename T>
    bool GetAs(T* value) const
    {
        if ( !wxAnyValueTypeImpl<T>::IsSameClass(m_type) )
        {
            wxAnyValueType* otherType =
                wxAnyValueTypeImpl<T>::sm_instance.get();
            wxAnyValueBuffer temp_buf;

            if ( !m_type->ConvertValue(m_buffer, otherType, temp_buf) )
                return false;

            *value =
                static_cast<T>(wxAnyValueTypeImpl<T>::GetValue(temp_buf));
            otherType->DeleteValue(temp_buf);

            return true;
        }
        *value = static_cast<T>(wxAnyValueTypeImpl<T>::GetValue(m_buffer));
        return true;
    }



    bool GetAs(wxVariant* value) const
    {
        return wxConvertAnyToVariant(*this, value);
    }


private:
# 1036 "/usr/include/wx-3.1-unofficial/wx/any.h"
    void AssignAny(const wxAny& any)
    {

        m_type->DeleteValue(m_buffer);

        wxAnyValueType* newType = any.m_type;

        if ( !newType->IsSameType(m_type) )
            m_type = newType;

        newType->CopyBuffer(any.m_buffer, m_buffer);
    }


    void AssignVariant(const wxVariant& variant)
    {
        wxVariantData* data = variant.GetData();

        if ( data && data->GetAsAny(this) )
            return;

        m_type->DeleteValue(m_buffer);

        if ( variant.IsNull() )
        {

            m_type = wxAnyNullValueType;
        }
        else
        {

            m_type = wxAnyValueTypeImpl<wxVariantData*>::sm_instance.get();
            wxAnyValueTypeImpl<wxVariantData*>::SetValue(data, m_buffer);
        }
    }


    template<typename T>
    void Assign(const T &value)
    {
        m_type->DeleteValue(m_buffer);
        m_type = wxAnyValueTypeImpl<T>::sm_instance.get();
        wxAnyValueTypeImpl<T>::SetValue(value, m_buffer);
    }


    wxAnyValueBuffer m_buffer;
    wxAnyValueType* m_type;
};


namespace wxPrivate
{




template <typename T>
struct wxAnyAsImpl
{
    static T DoAs(const wxAny& any)
    {
        return any.RawAs<T>();
    }
};


template <>
struct wxAnyAsImpl<wxString>
{
    static wxString DoAs(const wxAny& any)
    {
        wxString value;
        if ( !any.GetAs(&value) )
        {
            do { if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/any.h", 1111, __FUNCTION__, "\"Assert failure\"", "Incorrect or non-convertible data type"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );
        }
        return value;
    }
};

}
# 1130 "/usr/include/wx-3.1-unofficial/wx/any.h"
template<typename T>
inline bool wxAnyValueType::CheckType() const
{
    return wxAnyValueTypeImpl<T>::IsSameClass(this);
}

typedef wxAny _WX_LIST_ITEM_TYPE_wxAnyList; typedef int (*wxSortFuncFor_wxAnyList)(const wxAny **, const wxAny **); class __attribute__ ((visibility("default"))) wxwxAnyListNode : public wxNodeBase { public: wxwxAnyListNode(wxListBase *list = 
# 1136 "/usr/include/wx-3.1-unofficial/wx/any.h" 3 4
__null
# 1136 "/usr/include/wx-3.1-unofficial/wx/any.h"
, wxwxAnyListNode *previous = 
# 1136 "/usr/include/wx-3.1-unofficial/wx/any.h" 3 4
__null
# 1136 "/usr/include/wx-3.1-unofficial/wx/any.h"
, wxwxAnyListNode *next = 
# 1136 "/usr/include/wx-3.1-unofficial/wx/any.h" 3 4
__null
# 1136 "/usr/include/wx-3.1-unofficial/wx/any.h"
, wxAny *data = 
# 1136 "/usr/include/wx-3.1-unofficial/wx/any.h" 3 4
__null
# 1136 "/usr/include/wx-3.1-unofficial/wx/any.h"
, const wxListKey& key = wxDefaultListKey) : wxNodeBase(list, previous, next, data, key) { } wxwxAnyListNode *GetNext() const { return (wxwxAnyListNode *)wxNodeBase::GetNext(); } wxwxAnyListNode *GetPrevious() const { return (wxwxAnyListNode *)wxNodeBase::GetPrevious(); } wxAny *GetData() const { return (wxAny *)wxNodeBase::GetData(); } void SetData(wxAny *data) { wxNodeBase::SetData(data); } protected: virtual void DeleteData() override; private: wxwxAnyListNode(const wxwxAnyListNode&) = delete; wxwxAnyListNode& operator=(const wxwxAnyListNode&) = delete; }; class __attribute__ ((visibility("default"))) wxAnyList : public wxListBase { public: typedef wxwxAnyListNode Node; class __attribute__ ((visibility("default"))) compatibility_iterator { public: compatibility_iterator(Node *ptr = 
# 1136 "/usr/include/wx-3.1-unofficial/wx/any.h" 3 4
__null
# 1136 "/usr/include/wx-3.1-unofficial/wx/any.h"
) : m_ptr(ptr) { } Node *operator->() const { return m_ptr; } operator Node *() const { return m_ptr; } private: Node *m_ptr; }; wxAnyList(wxKeyType keyType = wxKEY_NONE) : wxListBase(keyType) { } wxAnyList(const wxAnyList& list) : wxListBase(list.GetKeyType()) { Assign(list); } wxAnyList& operator=(const wxAnyList& list) { if (&list != this) Assign(list); return *this; } wxwxAnyListNode *GetFirst() const { return (wxwxAnyListNode *)wxListBase::GetFirst(); } wxwxAnyListNode *GetLast() const { return (wxwxAnyListNode *)wxListBase::GetLast(); } wxwxAnyListNode *Item(size_t index) const { return (wxwxAnyListNode *)wxListBase::Item(index); } wxAny *operator[](size_t index) const { wxwxAnyListNode *node = Item(index); return node ? (wxAny*)(node->GetData()) : 
# 1136 "/usr/include/wx-3.1-unofficial/wx/any.h" 3 4
__null
# 1136 "/usr/include/wx-3.1-unofficial/wx/any.h"
; } wxwxAnyListNode *Append(wxAny *object) { return (wxwxAnyListNode *)wxListBase::Append(object); } wxwxAnyListNode *Insert(wxAny *object) { return (wxwxAnyListNode *)Insert(static_cast<wxwxAnyListNode *>(
# 1136 "/usr/include/wx-3.1-unofficial/wx/any.h" 3 4
__null
# 1136 "/usr/include/wx-3.1-unofficial/wx/any.h"
), object); } wxwxAnyListNode *Insert(size_t pos, wxAny *object) { return (wxwxAnyListNode *)wxListBase::Insert(pos, object); } wxwxAnyListNode *Insert(wxwxAnyListNode *prev, wxAny *object) { return (wxwxAnyListNode *)wxListBase::Insert(prev, object); } wxwxAnyListNode *Append(long key, void *object) { return (wxwxAnyListNode *)wxListBase::Append(key, object); } wxwxAnyListNode *Append(const wxChar *key, void *object) { return (wxwxAnyListNode *)wxListBase::Append(key, object); } wxwxAnyListNode *DetachNode(wxwxAnyListNode *node) { return (wxwxAnyListNode *)wxListBase::DetachNode(node); } bool DeleteNode(wxwxAnyListNode *node) { return wxListBase::DeleteNode(node); } bool DeleteObject(wxAny *object) { return wxListBase::DeleteObject(object); } void Erase(wxwxAnyListNode *it) { DeleteNode(it); } wxwxAnyListNode *Find(const wxAny *object) const { return (wxwxAnyListNode *)wxListBase::Find(object); } virtual wxwxAnyListNode *Find(const wxListKey& key) const { return (wxwxAnyListNode *)wxListBase::Find(key); } bool Member(const wxAny *object) const { return Find(object) != 
# 1136 "/usr/include/wx-3.1-unofficial/wx/any.h" 3 4
__null
# 1136 "/usr/include/wx-3.1-unofficial/wx/any.h"
; } int IndexOf(wxAny *object) const { return wxListBase::IndexOf(object); } void Sort(wxSortCompareFunction func) { wxListBase::Sort(func); } void Sort(wxSortFuncFor_wxAnyList func) { Sort((wxSortCompareFunction)func); } protected: virtual wxNodeBase *CreateNode(wxNodeBase *prev, wxNodeBase *next, void *data, const wxListKey& key = wxDefaultListKey) override { return new wxwxAnyListNode(this, (wxwxAnyListNode *)prev, (wxwxAnyListNode *)next, (wxAny *)data, key); } public: typedef size_t size_type; typedef int difference_type; typedef wxAny* value_type; typedef wxAny* base_value_type; typedef value_type& reference; typedef const value_type& const_reference; typedef base_value_type& base_reference; typedef const base_value_type& const_base_reference; class __attribute__ ((visibility("default"))) iterator { public: typedef std::ptrdiff_t difference_type; typedef std::bidirectional_iterator_tag iterator_category; typedef wxAny* value_type; typedef value_type* pointer; typedef value_type& reference; typedef wxwxAnyListNode Node; typedef iterator itor; Node* m_node; Node* m_init; public: typedef reference reference_type; typedef pointer pointer_type; iterator(Node* node, Node* init) : m_node(node), m_init(init) {} iterator() : m_node(
# 1136 "/usr/include/wx-3.1-unofficial/wx/any.h" 3 4
__null
# 1136 "/usr/include/wx-3.1-unofficial/wx/any.h"
), m_init(
# 1136 "/usr/include/wx-3.1-unofficial/wx/any.h" 3 4
__null
# 1136 "/usr/include/wx-3.1-unofficial/wx/any.h"
) { } reference_type operator*() const { return *(pointer_type)m_node->GetDataPtr(); } itor& operator++() { do { if ( m_node ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/any.h", 1136, __FUNCTION__, "m_node", L"uninitialized iterator"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); m_node = m_node->GetNext(); return *this; } const itor operator++(int) { itor tmp = *this; do { if ( m_node ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/any.h", 1136, __FUNCTION__, "m_node", L"uninitialized iterator"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); m_node = m_node->GetNext(); return tmp; } itor& operator--() { m_node = m_node ? m_node->GetPrevious() : m_init; return *this; } const itor operator--(int) { itor tmp = *this; m_node = m_node ? m_node->GetPrevious() : m_init; return tmp; } bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; class __attribute__ ((visibility("default"))) const_iterator { public: typedef std::ptrdiff_t difference_type; typedef std::bidirectional_iterator_tag iterator_category; typedef wxAny* value_type; typedef const value_type* pointer; typedef const value_type& reference; typedef wxwxAnyListNode Node; typedef const_iterator itor; Node* m_node; Node* m_init; public: typedef reference reference_type; typedef pointer pointer_type; const_iterator(Node* node, Node* init) : m_node(node), m_init(init) { } const_iterator() : m_node(
# 1136 "/usr/include/wx-3.1-unofficial/wx/any.h" 3 4
__null
# 1136 "/usr/include/wx-3.1-unofficial/wx/any.h"
), m_init(
# 1136 "/usr/include/wx-3.1-unofficial/wx/any.h" 3 4
__null
# 1136 "/usr/include/wx-3.1-unofficial/wx/any.h"
) { } const_iterator(const iterator& it) : m_node(it.m_node), m_init(it.m_init) { } reference_type operator*() const { return *(pointer_type)m_node->GetDataPtr(); } itor& operator++() { do { if ( m_node ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/any.h", 1136, __FUNCTION__, "m_node", L"uninitialized iterator"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); m_node = m_node->GetNext(); return *this; } const itor operator++(int) { itor tmp = *this; do { if ( m_node ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/any.h", 1136, __FUNCTION__, "m_node", L"uninitialized iterator"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); m_node = m_node->GetNext(); return tmp; } itor& operator--() { m_node = m_node ? m_node->GetPrevious() : m_init; return *this; } const itor operator--(int) { itor tmp = *this; m_node = m_node ? m_node->GetPrevious() : m_init; return tmp; } bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; class __attribute__ ((visibility("default"))) reverse_iterator { public: typedef std::ptrdiff_t difference_type; typedef std::bidirectional_iterator_tag iterator_category; typedef wxAny* value_type; typedef value_type* pointer; typedef value_type& reference; typedef wxwxAnyListNode Node; typedef reverse_iterator itor; Node* m_node; Node* m_init; public: typedef reference reference_type; typedef pointer pointer_type; reverse_iterator(Node* node, Node* init) : m_node(node), m_init(init) { } reverse_iterator() : m_node(
# 1136 "/usr/include/wx-3.1-unofficial/wx/any.h" 3 4
__null
# 1136 "/usr/include/wx-3.1-unofficial/wx/any.h"
), m_init(
# 1136 "/usr/include/wx-3.1-unofficial/wx/any.h" 3 4
__null
# 1136 "/usr/include/wx-3.1-unofficial/wx/any.h"
) { } reference_type operator*() const { return *(pointer_type)m_node->GetDataPtr(); } itor& operator++() { m_node = m_node->GetPrevious(); return *this; } const itor operator++(int) { itor tmp = *this; m_node = m_node->GetPrevious(); return tmp; } itor& operator--() { m_node = m_node ? m_node->GetNext() : m_init; return *this; } const itor operator--(int) { itor tmp = *this; m_node = m_node ? m_node->GetNext() : m_init; return tmp; } bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; class __attribute__ ((visibility("default"))) const_reverse_iterator { public: typedef std::ptrdiff_t difference_type; typedef std::bidirectional_iterator_tag iterator_category; typedef wxAny* value_type; typedef const value_type* pointer; typedef const value_type& reference; typedef wxwxAnyListNode Node; typedef const_reverse_iterator itor; Node* m_node; Node* m_init; public: typedef reference reference_type; typedef pointer pointer_type; const_reverse_iterator(Node* node, Node* init) : m_node(node), m_init(init) { } const_reverse_iterator() : m_node(
# 1136 "/usr/include/wx-3.1-unofficial/wx/any.h" 3 4
__null
# 1136 "/usr/include/wx-3.1-unofficial/wx/any.h"
), m_init(
# 1136 "/usr/include/wx-3.1-unofficial/wx/any.h" 3 4
__null
# 1136 "/usr/include/wx-3.1-unofficial/wx/any.h"
) { } const_reverse_iterator(const reverse_iterator& it) : m_node(it.m_node), m_init(it.m_init) { } reference_type operator*() const { return *(pointer_type)m_node->GetDataPtr(); } itor& operator++() { m_node = m_node->GetPrevious(); return *this; } const itor operator++(int) { itor tmp = *this; m_node = m_node->GetPrevious(); return tmp; } itor& operator--() { m_node = m_node ? m_node->GetNext() : m_init; return *this;} const itor operator--(int) { itor tmp = *this; m_node = m_node ? m_node->GetNext() : m_init; return tmp; } bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; explicit wxAnyList(size_type n, const_reference v = value_type()) { assign(n, v); } wxAnyList(const const_iterator& first, const const_iterator& last) { assign(first, last); } iterator begin() { return iterator(GetFirst(), GetLast()); } const_iterator begin() const { return const_iterator(GetFirst(), GetLast()); } iterator end() { return iterator(
# 1136 "/usr/include/wx-3.1-unofficial/wx/any.h" 3 4
__null
# 1136 "/usr/include/wx-3.1-unofficial/wx/any.h"
, GetLast()); } const_iterator end() const { return const_iterator(
# 1136 "/usr/include/wx-3.1-unofficial/wx/any.h" 3 4
__null
# 1136 "/usr/include/wx-3.1-unofficial/wx/any.h"
, GetLast()); } reverse_iterator rbegin() { return reverse_iterator(GetLast(), GetFirst()); } const_reverse_iterator rbegin() const { return const_reverse_iterator(GetLast(), GetFirst()); } reverse_iterator rend() { return reverse_iterator(
# 1136 "/usr/include/wx-3.1-unofficial/wx/any.h" 3 4
__null
# 1136 "/usr/include/wx-3.1-unofficial/wx/any.h"
, GetFirst()); } const_reverse_iterator rend() const { return const_reverse_iterator(
# 1136 "/usr/include/wx-3.1-unofficial/wx/any.h" 3 4
__null
# 1136 "/usr/include/wx-3.1-unofficial/wx/any.h"
, GetFirst()); } void resize(size_type n, value_type v = value_type()) { while (n < size()) pop_back(); while (n > size()) push_back(v); } size_type size() const { return GetCount(); } size_type max_size() const { return 0x7fffffff; } bool empty() const { return IsEmpty(); } reference front() { return *begin(); } const_reference front() const { return *begin(); } reference back() { iterator tmp = end(); return *--tmp; } const_reference back() const { const_iterator tmp = end(); return *--tmp; } void push_front(const_reference v = value_type()) { Insert(GetFirst(), (const_base_reference)v); } void pop_front() { DeleteNode(GetFirst()); } void push_back(const_reference v = value_type()) { Append((const_base_reference)v); } void pop_back() { DeleteNode(GetLast()); } void assign(const_iterator first, const const_iterator& last) { clear(); for(; first != last; ++first) Append((const_base_reference)*first); } void assign(size_type n, const_reference v = value_type()) { clear(); for(size_type i = 0; i < n; ++i) Append((const_base_reference)v); } iterator insert(const iterator& it, const_reference v) { if ( it == end() ) { Append((const_base_reference)v); iterator itins(end()); return --itins; } else { Insert(it.m_node, (const_base_reference)v); iterator itins(it); return --itins; } } void insert(const iterator& it, size_type n, const_reference v) { for(size_type i = 0; i < n; ++i) insert(it, v); } void insert(const iterator& it, const_iterator first, const const_iterator& last) { for(; first != last; ++first) insert(it, *first); } iterator erase(const iterator& it) { iterator next = iterator(it.m_node->GetNext(), GetLast()); DeleteNode(it.m_node); return next; } iterator erase(const iterator& first, const iterator& last) { iterator next = last; if ( next != end() ) ++next; DeleteNodes(first.m_node, last.m_node); return next; } void clear() { Clear(); } void splice(const iterator& it, wxAnyList& l, const iterator& first, const iterator& last) { insert(it, first, last); l.erase(first, last); } void splice(const iterator& it, wxAnyList& l) { splice(it, l, l.begin(), l.end() ); } void splice(const iterator& it, wxAnyList& l, const iterator& first) { if ( it != first ) { insert(it, *first); l.erase(first); } } void remove(const_reference v) { DeleteObject((const_base_reference)v); } void reverse() { Reverse(); } };
# 31 "/usr/include/wx-3.1-unofficial/wx/event.h" 2


# 1 "/usr/include/wx-3.1-unofficial/wx/meta/convertible.h" 1
# 16 "/usr/include/wx-3.1-unofficial/wx/meta/convertible.h"
template <class D, class B>
struct wxConvertibleTo_SizeHelper
{
    static char Match(B* pb);
    static int Match(...);
};



template <class D, class B>
struct wxConvertibleTo
{
    enum
    {
        value =
            sizeof(wxConvertibleTo_SizeHelper<D,B>::Match(static_cast<D*>(
# 31 "/usr/include/wx-3.1-unofficial/wx/meta/convertible.h" 3 4
                                                                         __null
# 31 "/usr/include/wx-3.1-unofficial/wx/meta/convertible.h"
                                                                             )))
            ==
            sizeof(char)
    };
};






template <class D, class B>
struct wxIsPubliclyDerived
{
    enum
    {



        value = std::is_base_of<B, D>::value && std::is_convertible<D*, B*>::value





    };
};
# 34 "/usr/include/wx-3.1-unofficial/wx/event.h" 2




# 1 "/usr/include/wx-3.1-unofficial/wx/meta/removeref.h" 1
# 16 "/usr/include/wx-3.1-unofficial/wx/meta/removeref.h"
template <typename T>
struct wxRemoveRef
{
    typedef T type;
};

template <typename T>
struct wxRemoveRef<T&>
{
    typedef T type;
};
# 39 "/usr/include/wx-3.1-unofficial/wx/event.h" 2
# 47 "/usr/include/wx-3.1-unofficial/wx/event.h"
class wxList;
class wxEvent;
class wxEventFilter;

    class wxDC;
    class wxMenu;
    class wxWindow;
    class wxWindowBase;
# 74 "/usr/include/wx-3.1-unofficial/wx/event.h"
class wxEvtHandler;
class wxEventConnectionRef;





typedef int wxEventType;
# 97 "/usr/include/wx-3.1-unofficial/wx/event.h"
extern __attribute__ ((visibility("default"))) wxEventType wxNewEventType();
# 127 "/usr/include/wx-3.1-unofficial/wx/event.h"
typedef void (wxEvtHandler::*wxEventFunction)(wxEvent&);

template <typename T>
inline wxEventFunction wxEventFunctionCast(void (wxEvtHandler::*func)(T&))
{
# 140 "/usr/include/wx-3.1-unofficial/wx/event.h"
   
# 140 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic push
# 140 "/usr/include/wx-3.1-unofficial/wx/event.h"
   
# 140 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic ignored "-Wcast-function-type"
# 140 "/usr/include/wx-3.1-unofficial/wx/event.h"
   

    return reinterpret_cast<wxEventFunction>(func);

   
# 144 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic pop
# 144 "/usr/include/wx-3.1-unofficial/wx/event.h"
   
}
# 205 "/usr/include/wx-3.1-unofficial/wx/event.h"
template <typename T>
class wxEventTypeTag
{
public:

    typedef T EventClass;

    wxEventTypeTag(wxEventType type) : m_type(type) { }




    operator const wxEventType&() const { return m_type; }

private:
    wxEventType m_type;
};
# 230 "/usr/include/wx-3.1-unofficial/wx/event.h"
typedef wxEventFunction wxObjectEventFunction;


class __attribute__ ((visibility("default"))) wxEventFunctor
{
public:
    virtual ~wxEventFunctor();


    virtual void operator()(wxEvtHandler *, wxEvent&) = 0;



    virtual bool IsMatching(const wxEventFunctor& functor) const = 0;



    virtual wxEvtHandler *GetEvtHandler() const
        { return 
# 248 "/usr/include/wx-3.1-unofficial/wx/event.h" 3 4
                __null
# 248 "/usr/include/wx-3.1-unofficial/wx/event.h"
                    ; }





    virtual wxEventFunction GetEvtMethod() const
        { return 
# 255 "/usr/include/wx-3.1-unofficial/wx/event.h" 3 4
                __null
# 255 "/usr/include/wx-3.1-unofficial/wx/event.h"
                    ; }

private:
   
};


class wxObjectEventFunctor : public wxEventFunctor
{
public:
    wxObjectEventFunctor(wxObjectEventFunction method, wxEvtHandler *handler)
        : m_handler( handler ), m_method( method )
        { }

    virtual void operator()(wxEvtHandler *handler, wxEvent& event) override;

    virtual bool IsMatching(const wxEventFunctor& functor) const override
    {
        if ( wxTypeIdentifier(typeid(functor).name()) == wxTypeIdentifier(typeid(*this).name()) )
        {
            const wxObjectEventFunctor &other =
                static_cast< const wxObjectEventFunctor & >( functor );

            return ( m_method == other.m_method || !other.m_method ) &&
                   ( m_handler == other.m_handler || !other.m_handler );
        }
        else
            return false;
    }

    virtual wxEvtHandler *GetEvtHandler() const override
        { return m_handler; }

    virtual wxEventFunction GetEvtMethod() const override
        { return m_method; }

private:
    wxEvtHandler *m_handler;
    wxEventFunction m_method;


    wxObjectEventFunctor() : m_handler(
# 296 "/usr/include/wx-3.1-unofficial/wx/event.h" 3 4
                                      __null
# 296 "/usr/include/wx-3.1-unofficial/wx/event.h"
                                          ), m_method(
# 296 "/usr/include/wx-3.1-unofficial/wx/event.h" 3 4
                                                      __null
# 296 "/usr/include/wx-3.1-unofficial/wx/event.h"
                                                          ) { }

   
};


inline wxObjectEventFunctor *
wxNewEventFunctor(const wxEventType& ,
                  wxObjectEventFunction method,
                  wxEvtHandler *handler)
{
    return new wxObjectEventFunctor(method, handler);
}


inline wxObjectEventFunctor *
wxNewEventTableFunctor(const wxEventType& ,
                       wxObjectEventFunction method)
{
    return new wxObjectEventFunctor(method, 
# 315 "/usr/include/wx-3.1-unofficial/wx/event.h" 3 4
                                           __null
# 315 "/usr/include/wx-3.1-unofficial/wx/event.h"
                                               );
}

inline wxObjectEventFunctor
wxMakeEventFunctor(const wxEventType& ,
                        wxObjectEventFunction method,
                        wxEvtHandler *handler)
{
    return wxObjectEventFunctor(method, handler);
}

namespace wxPrivate
{



template <typename T> struct EventClassOf;



template <typename T>
struct EventClassOf< wxEventTypeTag<T> >
{
    typedef typename wxEventTypeTag<T>::EventClass type;
};



template <>
struct EventClassOf<wxEventType>
{
    typedef wxEvent type;
};




template <typename T, typename A, bool> struct HandlerImpl;


template <typename T, typename A>
struct HandlerImpl<T, A, true>
{
    static bool IsEvtHandler()
        { return true; }
    static T *ConvertFromEvtHandler(wxEvtHandler *p)
        { return static_cast<T *>(p); }
    static wxEvtHandler *ConvertToEvtHandler(T *p)
        { return p; }
    static wxEventFunction ConvertToEvtMethod(void (T::*f)(A&))
        { return wxEventFunctionCast(
                    static_cast<void (wxEvtHandler::*)(A&)>(f)); }
};


template <typename T, typename A>
struct HandlerImpl<T, A, false>
{
    static bool IsEvtHandler()
        { return false; }
    static T *ConvertFromEvtHandler(wxEvtHandler *)
        { return 
# 376 "/usr/include/wx-3.1-unofficial/wx/event.h" 3 4
                __null
# 376 "/usr/include/wx-3.1-unofficial/wx/event.h"
                    ; }
    static wxEvtHandler *ConvertToEvtHandler(T *)
        { return 
# 378 "/usr/include/wx-3.1-unofficial/wx/event.h" 3 4
                __null
# 378 "/usr/include/wx-3.1-unofficial/wx/event.h"
                    ; }
    static wxEventFunction ConvertToEvtMethod(void (T::*)(A&))
        { return 
# 380 "/usr/include/wx-3.1-unofficial/wx/event.h" 3 4
                __null
# 380 "/usr/include/wx-3.1-unofficial/wx/event.h"
                    ; }
};

}
# 394 "/usr/include/wx-3.1-unofficial/wx/event.h"
template
  <typename EventTag, typename Class, typename EventArg, typename EventHandler>
class wxEventFunctorMethod
    : public wxEventFunctor,
      private wxPrivate::HandlerImpl
              <
                Class,
                EventArg,
                wxIsPubliclyDerived<Class, wxEvtHandler>::value != 0
              >
{
private:
    static void CheckHandlerArgument(EventArg *) { }

public:

    typedef typename wxPrivate::EventClassOf<EventTag>::type EventClass;


    wxEventFunctorMethod(void (Class::*method)(EventArg&), EventHandler *handler)
        : m_handler( handler ), m_method( method )
    {
        do { if ( handler || this->IsEvtHandler() ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/event.h", 416, __FUNCTION__, "handler || this->IsEvtHandler()", "handlers defined in non-wxEvtHandler-derived classes " "must be connected with a valid sink object"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 )

                                                                    ;




        CheckHandlerArgument(static_cast<EventClass *>(
# 423 "/usr/include/wx-3.1-unofficial/wx/event.h" 3 4
                                                      __null
# 423 "/usr/include/wx-3.1-unofficial/wx/event.h"
                                                          ));
    }

    virtual void operator()(wxEvtHandler *handler, wxEvent& event) override
    {
        Class * realHandler = m_handler;
        if ( !realHandler )
        {
            realHandler = this->ConvertFromEvtHandler(handler);


            if ( realHandler ) {} else { do { if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/event.h", 434, __FUNCTION__, "\"realHandler\"", "invalid event handler"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); return; } struct wxDummyCheckStruct434;
        }




        (realHandler->*m_method)(static_cast<EventArg&>(event));
    }

    virtual bool IsMatching(const wxEventFunctor& functor) const override
    {
        if ( wxTypeIdentifier(typeid(functor).name()) != wxTypeIdentifier(typeid(*this).name()) )
            return false;

        typedef wxEventFunctorMethod<EventTag, Class, EventArg, EventHandler>
            ThisFunctor;


        const ThisFunctor& other = static_cast<const ThisFunctor &>(functor);

        return (m_method == other.m_method || other.m_method == 
# 454 "/usr/include/wx-3.1-unofficial/wx/event.h" 3 4
                                                               __null
# 454 "/usr/include/wx-3.1-unofficial/wx/event.h"
                                                                   ) &&
               (m_handler == other.m_handler || other.m_handler == 
# 455 "/usr/include/wx-3.1-unofficial/wx/event.h" 3 4
                                                                  __null
# 455 "/usr/include/wx-3.1-unofficial/wx/event.h"
                                                                      );
    }

    virtual wxEvtHandler *GetEvtHandler() const override
        { return this->ConvertToEvtHandler(m_handler); }

    virtual wxEventFunction GetEvtMethod() const override
        { return this->ConvertToEvtMethod(m_method); }

private:
    EventHandler *m_handler;
    void (Class::*m_method)(EventArg&);


    wxEventFunctorMethod() { }

    typedef wxEventFunctorMethod<EventTag, Class,
                                 EventArg, EventHandler> thisClass;
   
};



template <typename EventTag, typename EventArg>
class wxEventFunctorFunction : public wxEventFunctor
{
private:
    static void CheckHandlerArgument(EventArg *) { }

public:

    typedef typename wxPrivate::EventClassOf<EventTag>::type EventClass;

    wxEventFunctorFunction( void ( *handler )( EventArg & ))
        : m_handler( handler )
    {



        CheckHandlerArgument(static_cast<EventClass *>(
# 494 "/usr/include/wx-3.1-unofficial/wx/event.h" 3 4
                                                      __null
# 494 "/usr/include/wx-3.1-unofficial/wx/event.h"
                                                          ));
    }

    virtual void operator()(wxEvtHandler *, wxEvent& event) override
    {







        m_handler(static_cast<EventArg&>(event));
    }

    virtual bool IsMatching(const wxEventFunctor &functor) const override
    {
        if ( wxTypeIdentifier(typeid(functor).name()) != wxTypeIdentifier(typeid(*this).name()) )
            return false;

        typedef wxEventFunctorFunction<EventTag, EventArg> ThisFunctor;

        const ThisFunctor& other = static_cast<const ThisFunctor&>( functor );

        return m_handler == other.m_handler;
    }

private:
    void (*m_handler)(EventArg&);


    wxEventFunctorFunction() { }

    typedef wxEventFunctorFunction<EventTag, EventArg> thisClass;
   
};


template <typename EventTag, typename Functor>
class wxEventFunctorFunctor : public wxEventFunctor
{
public:
    typedef typename EventTag::EventClass EventArg;

    wxEventFunctorFunctor(const Functor& handler)
        : m_handler(handler), m_handlerAddr(&handler)
        { }

    virtual void operator()(wxEvtHandler *, wxEvent& event) override
    {







        m_handler(static_cast<EventArg&>(event));
    }

    virtual bool IsMatching(const wxEventFunctor &functor) const override
    {
        if ( wxTypeIdentifier(typeid(functor).name()) != wxTypeIdentifier(typeid(*this).name()) )
            return false;

        typedef wxEventFunctorFunctor<EventTag, Functor> FunctorThis;

        const FunctorThis& other = static_cast<const FunctorThis&>(functor);



        return m_handlerAddr == other.m_handlerAddr;
    }

private:


    Functor m_handler;


    const void *m_handlerAddr;


    wxEventFunctorFunctor() { }

    typedef wxEventFunctorFunctor<EventTag, Functor> thisClass;
   
};
# 590 "/usr/include/wx-3.1-unofficial/wx/event.h"
template <typename EventTag, typename EventArg>
inline wxEventFunctorFunction<EventTag, EventArg> *
wxNewEventFunctor(const EventTag&, void (*func)(EventArg &))
{
    return new wxEventFunctorFunction<EventTag, EventArg>(func);
}

template <typename EventTag, typename EventArg>
inline wxEventFunctorFunction<EventTag, EventArg>
wxMakeEventFunctor(const EventTag&, void (*func)(EventArg &))
{
    return wxEventFunctorFunction<EventTag, EventArg>(func);
}


template <typename EventTag, typename Functor>
inline wxEventFunctorFunctor<EventTag, Functor> *
wxNewEventFunctor(const EventTag&, const Functor &func)
{
    return new wxEventFunctorFunctor<EventTag, Functor>(func);
}

template <typename EventTag, typename Functor>
inline wxEventFunctorFunctor<EventTag, Functor>
wxMakeEventFunctor(const EventTag&, const Functor &func)
{
    return wxEventFunctorFunctor<EventTag, Functor>(func);
}


template
  <typename EventTag, typename Class, typename EventArg, typename EventHandler>
inline wxEventFunctorMethod<EventTag, Class, EventArg, EventHandler> *
wxNewEventFunctor(const EventTag&,
                  void (Class::*method)(EventArg&),
                  EventHandler *handler)
{
    return new wxEventFunctorMethod<EventTag, Class, EventArg, EventHandler>(
                method, handler);
}

template
    <typename EventTag, typename Class, typename EventArg, typename EventHandler>
inline wxEventFunctorMethod<EventTag, Class, EventArg, EventHandler>
wxMakeEventFunctor(const EventTag&,
                   void (Class::*method)(EventArg&),
                   EventHandler *handler)
{
    return wxEventFunctorMethod<EventTag, Class, EventArg, EventHandler>(
                method, handler);
}




template <typename EventTag, typename Class, typename EventArg>
inline wxEventFunctorMethod<EventTag, Class, EventArg, Class> *
wxNewEventTableFunctor(const EventTag&, void (Class::*method)(EventArg&))
{
    return new wxEventFunctorMethod<EventTag, Class, EventArg, Class>(
                    method, 
# 650 "/usr/include/wx-3.1-unofficial/wx/event.h" 3 4
                           __null
# 650 "/usr/include/wx-3.1-unofficial/wx/event.h"
                               );
}





extern __attribute__ ((visibility("default"))) const wxEventType wxEVT_NULL;
extern __attribute__ ((visibility("default"))) const wxEventType wxEVT_FIRST;
extern __attribute__ ((visibility("default"))) const wxEventType wxEVT_USER_FIRST;


class wxIdleEvent;
class wxThreadEvent;
class wxAsyncMethodCallEvent;
class wxCommandEvent;
class wxMouseEvent;
class wxFocusEvent;
class wxChildFocusEvent;
class wxKeyEvent;
class wxNavigationKeyEvent;
class wxSetCursorEvent;
class wxScrollEvent;
class wxSpinEvent;
class wxScrollWinEvent;
class wxSizeEvent;
class wxMoveEvent;
class wxCloseEvent;
class wxActivateEvent;
class wxWindowCreateEvent;
class wxWindowDestroyEvent;
class wxShowEvent;
class wxIconizeEvent;
class wxMaximizeEvent;
class wxFullScreenEvent;
class wxMouseCaptureChangedEvent;
class wxMouseCaptureLostEvent;
class wxPaintEvent;
class wxEraseEvent;
class wxNcPaintEvent;
class wxMenuEvent;
class wxContextMenuEvent;
class wxSysColourChangedEvent;
class wxDisplayChangedEvent;
class wxDPIChangedEvent;
class wxQueryNewPaletteEvent;
class wxPaletteChangedEvent;
class wxJoystickEvent;
class wxDropFilesEvent;
class wxInitDialogEvent;
class wxUpdateUIEvent;
class wxClipboardTextEvent;
class wxHelpEvent;
class wxGestureEvent;
class wxPanGestureEvent;
class wxZoomGestureEvent;
class wxRotateGestureEvent;
class wxTwoFingerTapEvent;
class wxLongPressEvent;
class wxPressAndTapEvent;



extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxCommandEvent > wxEVT_BUTTON;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxCommandEvent > wxEVT_CHECKBOX;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxCommandEvent > wxEVT_CHOICE;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxCommandEvent > wxEVT_LISTBOX;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxCommandEvent > wxEVT_LISTBOX_DCLICK;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxCommandEvent > wxEVT_CHECKLISTBOX;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxCommandEvent > wxEVT_MENU;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxCommandEvent > wxEVT_SLIDER;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxCommandEvent > wxEVT_RADIOBOX;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxCommandEvent > wxEVT_RADIOBUTTON;


extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxCommandEvent > wxEVT_SCROLLBAR;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxCommandEvent > wxEVT_VLBOX;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxCommandEvent > wxEVT_COMBOBOX;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxCommandEvent > wxEVT_TOOL_RCLICKED;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxCommandEvent > wxEVT_TOOL_DROPDOWN;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxCommandEvent > wxEVT_TOOL_ENTER;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxCommandEvent > wxEVT_COMBOBOX_DROPDOWN;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxCommandEvent > wxEVT_COMBOBOX_CLOSEUP;


extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxThreadEvent > wxEVT_THREAD;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxAsyncMethodCallEvent > wxEVT_ASYNC_METHOD_CALL;


extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxMouseEvent > wxEVT_LEFT_DOWN;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxMouseEvent > wxEVT_LEFT_UP;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxMouseEvent > wxEVT_MIDDLE_DOWN;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxMouseEvent > wxEVT_MIDDLE_UP;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxMouseEvent > wxEVT_RIGHT_DOWN;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxMouseEvent > wxEVT_RIGHT_UP;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxMouseEvent > wxEVT_MOTION;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxMouseEvent > wxEVT_ENTER_WINDOW;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxMouseEvent > wxEVT_LEAVE_WINDOW;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxMouseEvent > wxEVT_LEFT_DCLICK;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxMouseEvent > wxEVT_MIDDLE_DCLICK;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxMouseEvent > wxEVT_RIGHT_DCLICK;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxFocusEvent > wxEVT_SET_FOCUS;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxFocusEvent > wxEVT_KILL_FOCUS;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxChildFocusEvent > wxEVT_CHILD_FOCUS;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxMouseEvent > wxEVT_MOUSEWHEEL;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxMouseEvent > wxEVT_AUX1_DOWN;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxMouseEvent > wxEVT_AUX1_UP;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxMouseEvent > wxEVT_AUX1_DCLICK;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxMouseEvent > wxEVT_AUX2_DOWN;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxMouseEvent > wxEVT_AUX2_UP;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxMouseEvent > wxEVT_AUX2_DCLICK;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxMouseEvent > wxEVT_MAGNIFY;


extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxKeyEvent > wxEVT_CHAR;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxKeyEvent > wxEVT_CHAR_HOOK;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxNavigationKeyEvent > wxEVT_NAVIGATION_KEY;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxKeyEvent > wxEVT_KEY_DOWN;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxKeyEvent > wxEVT_KEY_UP;





extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxKeyEvent > wxEVT_AFTER_CHAR;


extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxSetCursorEvent > wxEVT_SET_CURSOR;


extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxScrollEvent > wxEVT_SCROLL_TOP;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxScrollEvent > wxEVT_SCROLL_BOTTOM;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxScrollEvent > wxEVT_SCROLL_LINEUP;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxScrollEvent > wxEVT_SCROLL_LINEDOWN;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxScrollEvent > wxEVT_SCROLL_PAGEUP;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxScrollEvent > wxEVT_SCROLL_PAGEDOWN;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxScrollEvent > wxEVT_SCROLL_THUMBTRACK;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxScrollEvent > wxEVT_SCROLL_THUMBRELEASE;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxScrollEvent > wxEVT_SCROLL_CHANGED;
# 799 "/usr/include/wx-3.1-unofficial/wx/event.h"
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxSpinEvent > wxEVT_SPIN_UP;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxSpinEvent > wxEVT_SPIN_DOWN;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxSpinEvent > wxEVT_SPIN;




extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxScrollWinEvent > wxEVT_SCROLLWIN_TOP;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxScrollWinEvent > wxEVT_SCROLLWIN_BOTTOM;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxScrollWinEvent > wxEVT_SCROLLWIN_LINEUP;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxScrollWinEvent > wxEVT_SCROLLWIN_LINEDOWN;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxScrollWinEvent > wxEVT_SCROLLWIN_PAGEUP;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxScrollWinEvent > wxEVT_SCROLLWIN_PAGEDOWN;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxScrollWinEvent > wxEVT_SCROLLWIN_THUMBTRACK;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxScrollWinEvent > wxEVT_SCROLLWIN_THUMBRELEASE;


extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxPanGestureEvent > wxEVT_GESTURE_PAN;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxZoomGestureEvent > wxEVT_GESTURE_ZOOM;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxRotateGestureEvent > wxEVT_GESTURE_ROTATE;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxTwoFingerTapEvent > wxEVT_TWO_FINGER_TAP;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxLongPressEvent > wxEVT_LONG_PRESS;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxPressAndTapEvent > wxEVT_PRESS_AND_TAP;


extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxSizeEvent > wxEVT_SIZE;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxMoveEvent > wxEVT_MOVE;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxCloseEvent > wxEVT_CLOSE_WINDOW;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxCloseEvent > wxEVT_END_SESSION;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxCloseEvent > wxEVT_QUERY_END_SESSION;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxActivateEvent > wxEVT_ACTIVATE_APP;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxActivateEvent > wxEVT_ACTIVATE;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxWindowCreateEvent > wxEVT_CREATE;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxWindowDestroyEvent > wxEVT_DESTROY;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxShowEvent > wxEVT_SHOW;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxIconizeEvent > wxEVT_ICONIZE;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxMaximizeEvent > wxEVT_MAXIMIZE;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxFullScreenEvent > wxEVT_FULLSCREEN;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxMouseCaptureChangedEvent > wxEVT_MOUSE_CAPTURE_CHANGED;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxMouseCaptureLostEvent > wxEVT_MOUSE_CAPTURE_LOST;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxPaintEvent > wxEVT_PAINT;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxEraseEvent > wxEVT_ERASE_BACKGROUND;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxNcPaintEvent > wxEVT_NC_PAINT;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxMenuEvent > wxEVT_MENU_OPEN;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxMenuEvent > wxEVT_MENU_CLOSE;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxMenuEvent > wxEVT_MENU_HIGHLIGHT;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxContextMenuEvent > wxEVT_CONTEXT_MENU;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxSysColourChangedEvent > wxEVT_SYS_COLOUR_CHANGED;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxDisplayChangedEvent > wxEVT_DISPLAY_CHANGED;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxDPIChangedEvent > wxEVT_DPI_CHANGED;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxQueryNewPaletteEvent > wxEVT_QUERY_NEW_PALETTE;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxPaletteChangedEvent > wxEVT_PALETTE_CHANGED;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxJoystickEvent > wxEVT_JOY_BUTTON_DOWN;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxJoystickEvent > wxEVT_JOY_BUTTON_UP;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxJoystickEvent > wxEVT_JOY_MOVE;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxJoystickEvent > wxEVT_JOY_ZMOVE;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxDropFilesEvent > wxEVT_DROP_FILES;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxInitDialogEvent > wxEVT_INIT_DIALOG;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxIdleEvent > wxEVT_IDLE;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxUpdateUIEvent > wxEVT_UPDATE_UI;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxSizeEvent > wxEVT_SIZING;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxMoveEvent > wxEVT_MOVING;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxMoveEvent > wxEVT_MOVE_START;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxMoveEvent > wxEVT_MOVE_END;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxActivateEvent > wxEVT_HIBERNATE;


extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxClipboardTextEvent > wxEVT_TEXT_COPY;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxClipboardTextEvent > wxEVT_TEXT_CUT;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxClipboardTextEvent > wxEVT_TEXT_PASTE;



extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxCommandEvent > wxEVT_COMMAND_LEFT_CLICK;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxCommandEvent > wxEVT_COMMAND_LEFT_DCLICK;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxCommandEvent > wxEVT_COMMAND_RIGHT_CLICK;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxCommandEvent > wxEVT_COMMAND_RIGHT_DCLICK;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxCommandEvent > wxEVT_COMMAND_SET_FOCUS;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxCommandEvent > wxEVT_COMMAND_KILL_FOCUS;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxCommandEvent > wxEVT_COMMAND_ENTER;


extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxHelpEvent > wxEVT_HELP;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxHelpEvent > wxEVT_DETAILED_HELP;
# 895 "/usr/include/wx-3.1-unofficial/wx/event.h"
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxCommandEvent > wxEVT_TEXT;
# 904 "/usr/include/wx-3.1-unofficial/wx/event.h"
enum wxEventPropagation
{

    wxEVENT_PROPAGATE_NONE = 0,


    wxEVENT_PROPAGATE_MAX = 0x7fffffff
};



enum wxEventCategory
{





    wxEVT_CATEGORY_UI = 1,





    wxEVT_CATEGORY_USER_INPUT = 2,


    wxEVT_CATEGORY_SOCKET = 4,


    wxEVT_CATEGORY_TIMER = 8,




    wxEVT_CATEGORY_THREAD = 16,





    wxEVT_CATEGORY_UNKNOWN = 32,




    wxEVT_CATEGORY_CLIPBOARD = 64,






    wxEVT_CATEGORY_NATIVE_EVENTS = wxEVT_CATEGORY_UI|wxEVT_CATEGORY_USER_INPUT,


    wxEVT_CATEGORY_ALL =
        wxEVT_CATEGORY_UI|wxEVT_CATEGORY_USER_INPUT|wxEVT_CATEGORY_SOCKET|
        wxEVT_CATEGORY_TIMER|wxEVT_CATEGORY_THREAD|wxEVT_CATEGORY_UNKNOWN|
        wxEVT_CATEGORY_CLIPBOARD
};
# 978 "/usr/include/wx-3.1-unofficial/wx/event.h"
class __attribute__ ((visibility("default"))) wxEvent : public wxObject
{
public:
    wxEvent(int winid = 0, wxEventType commandType = wxEVT_NULL );

    void SetEventType(wxEventType typ) { m_eventType = typ; }
    wxEventType GetEventType() const { return m_eventType; }

    wxObject *GetEventObject() const { return m_eventObject; }
    void SetEventObject(wxObject *obj) { m_eventObject = obj; }

    long GetTimestamp() const { return m_timeStamp; }
    void SetTimestamp(long ts = 0) { m_timeStamp = ts; }

    int GetId() const { return m_id; }
    void SetId(int Id) { m_id = Id; }



    wxObject *GetEventUserData() const { return m_callbackUserData; }





    void Skip(bool skip = true) { m_skipped = skip; }
    bool GetSkipped() const { return m_skipped; }




    virtual wxEvent *Clone() const = 0;




    virtual wxEventCategory GetEventCategory() const
        { return wxEVT_CATEGORY_UI; }



    bool IsCommandEvent() const { return m_isCommandEvent; }


    bool ShouldPropagate() const
        { return m_propagationLevel != wxEVENT_PROPAGATE_NONE; }



    int StopPropagation()
    {
        const int propagationLevel = m_propagationLevel;
        m_propagationLevel = wxEVENT_PROPAGATE_NONE;
        return propagationLevel;
    }



    void ResumePropagation(int propagationLevel)
    {
        m_propagationLevel = propagationLevel;
    }



    wxEvtHandler* GetPropagatedFrom() const { return m_propagatedFrom; }




    bool WasProcessed()
    {
        if ( m_wasProcessed )
            return true;

        m_wasProcessed = true;

        return false;
    }



    void SetWillBeProcessedAgain()
    {
        m_willBeProcessedAgain = true;
    }

    bool WillBeProcessedAgain()
    {
        if ( m_willBeProcessedAgain )
        {
            m_willBeProcessedAgain = false;
            return true;
        }

        return false;
    }




    bool ShouldProcessOnlyIn(wxEvtHandler *h) const
    {
        return h == m_handlerToProcessOnlyIn;
    }







    void DidntHonourProcessOnlyIn()
    {
        m_handlerToProcessOnlyIn = 
# 1092 "/usr/include/wx-3.1-unofficial/wx/event.h" 3 4
                                  __null
# 1092 "/usr/include/wx-3.1-unofficial/wx/event.h"
                                      ;
    }

protected:
    wxObject* m_eventObject;
    wxEventType m_eventType;
    long m_timeStamp;
    int m_id;

public:

    wxObject* m_callbackUserData;

private:

    wxEvtHandler *m_handlerToProcessOnlyIn;

protected:


    int m_propagationLevel;



    wxEvtHandler* m_propagatedFrom;

    bool m_skipped;
    bool m_isCommandEvent;





    bool m_wasProcessed;




    bool m_willBeProcessedAgain;

protected:
    wxEvent(const wxEvent&);
    wxEvent& operator=(const wxEvent&);

private:

    friend class wxPropagateOnce;


    friend class wxEventProcessInHandlerOnly;


    public:
# 1144 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic push
# 1144 "/usr/include/wx-3.1-unofficial/wx/event.h"
   
# 1144 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 1144 "/usr/include/wx-3.1-unofficial/wx/event.h"
    virtual wxClassInfo *GetClassInfo() const;
# 1144 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic pop
# 1144 "/usr/include/wx-3.1-unofficial/wx/event.h"
    static wxClassInfo ms_classInfo;
};




class __attribute__ ((visibility("default"))) wxPropagationDisabler
{
public:
    wxPropagationDisabler(wxEvent& event) : m_event(event)
    {
        m_propagationLevelOld = m_event.StopPropagation();
    }

    ~wxPropagationDisabler()
    {
        m_event.ResumePropagation(m_propagationLevelOld);
    }

private:
    wxEvent& m_event;
    int m_propagationLevelOld;

    private: wxPropagationDisabler(const wxPropagationDisabler&) = delete; wxPropagationDisabler& operator=(const wxPropagationDisabler&) = delete;
};





class __attribute__ ((visibility("default"))) wxPropagateOnce
{
public:



    wxPropagateOnce(wxEvent& event, wxEvtHandler* handler = 
# 1180 "/usr/include/wx-3.1-unofficial/wx/event.h" 3 4
                                                           __null
# 1180 "/usr/include/wx-3.1-unofficial/wx/event.h"
                                                               )
        : m_event(event),
          m_propagatedFromOld(event.m_propagatedFrom)
    {
        do { if ( m_event.m_propagationLevel > 0 ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/event.h", 1184, __FUNCTION__, "m_event.m_propagationLevel > 0", L"shouldn't be used unless ShouldPropagate()!"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 )
                                                                            ;

        m_event.m_propagationLevel--;
        m_event.m_propagatedFrom = handler;
    }

    ~wxPropagateOnce()
    {
        m_event.m_propagatedFrom = m_propagatedFromOld;
        m_event.m_propagationLevel++;
    }

private:
    wxEvent& m_event;
    wxEvtHandler* const m_propagatedFromOld;

    private: wxPropagateOnce(const wxPropagateOnce&) = delete; wxPropagateOnce& operator=(const wxPropagateOnce&) = delete;
};



class wxEventProcessInHandlerOnly
{
public:
    wxEventProcessInHandlerOnly(wxEvent& event, wxEvtHandler *handler)
        : m_event(event),
          m_handlerToProcessOnlyInOld(event.m_handlerToProcessOnlyIn)
    {
        m_event.m_handlerToProcessOnlyIn = handler;
    }

    ~wxEventProcessInHandlerOnly()
    {
        m_event.m_handlerToProcessOnlyIn = m_handlerToProcessOnlyInOld;
    }

private:
    wxEvent& m_event;
    wxEvtHandler * const m_handlerToProcessOnlyInOld;

    private: wxEventProcessInHandlerOnly(const wxEventProcessInHandlerOnly&) = delete; wxEventProcessInHandlerOnly& operator=(const wxEventProcessInHandlerOnly&) = delete;
};


class __attribute__ ((visibility("default"))) wxEventBasicPayloadMixin
{
public:
    wxEventBasicPayloadMixin()
        : m_commandInt(0),
          m_extraLong(0)
    {
    }

    void SetString(const wxString& s) { m_cmdString = s; }
    const wxString& GetString() const { return m_cmdString; }

    void SetInt(int i) { m_commandInt = i; }
    int GetInt() const { return m_commandInt; }

    void SetExtraLong(long extraLong) { m_extraLong = extraLong; }
    long GetExtraLong() const { return m_extraLong; }

protected:


    wxString m_cmdString;
    int m_commandInt;
    long m_extraLong;

    private: wxEventBasicPayloadMixin& operator=(const wxEventBasicPayloadMixin&) = delete;
};

class __attribute__ ((visibility("default"))) wxEventAnyPayloadMixin : public wxEventBasicPayloadMixin
{
public:
    wxEventAnyPayloadMixin() : wxEventBasicPayloadMixin() {}


    template<typename T>
    void SetPayload(const T& payload)
    {
        m_payload = payload;
    }

    template<typename T>
    T GetPayload() const
    {
        return m_payload.As<T>();
    }

protected:
    wxAny m_payload;


    private: wxEventBasicPayloadMixin& operator=(const wxEventBasicPayloadMixin&) = delete;
};
# 1292 "/usr/include/wx-3.1-unofficial/wx/event.h"
enum wxIdleMode
{

    wxIDLE_PROCESS_ALL,



    wxIDLE_PROCESS_SPECIFIED
};

class __attribute__ ((visibility("default"))) wxIdleEvent : public wxEvent
{
public:
    wxIdleEvent()
        : wxEvent(0, wxEVT_IDLE),
          m_requestMore(false)
        { }
    wxIdleEvent(const wxIdleEvent& event)
        : wxEvent(event),
          m_requestMore(event.m_requestMore)
    { }

    void RequestMore(bool needMore = true) { m_requestMore = needMore; }
    bool MoreRequested() const { return m_requestMore; }

    virtual wxEvent *Clone() const override { return new wxIdleEvent(*this); }




    static void SetMode(wxIdleMode mode) { sm_idleMode = mode; }


    static wxIdleMode GetMode() { return sm_idleMode; }

protected:
    bool m_requestMore;
    static wxIdleMode sm_idleMode;

private:
    private: wxIdleEvent& operator=(const wxIdleEvent&) = delete; public:
# 1332 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic push
# 1332 "/usr/include/wx-3.1-unofficial/wx/event.h"
   
# 1332 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 1332 "/usr/include/wx-3.1-unofficial/wx/event.h"
    virtual wxClassInfo *GetClassInfo() const;
# 1332 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic pop
# 1332 "/usr/include/wx-3.1-unofficial/wx/event.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};




class __attribute__ ((visibility("default"))) wxThreadEvent : public wxEvent,
                                       public wxEventAnyPayloadMixin
{
public:
    wxThreadEvent(wxEventType eventType = wxEVT_THREAD, int id = wxID_ANY)
        : wxEvent(id, eventType)
        { }

    wxThreadEvent(const wxThreadEvent& event)
        : wxEvent(event),
          wxEventAnyPayloadMixin(event)
    {


        SetString(GetString().Clone());
    }

    virtual wxEvent *Clone() const override
    {
        return new wxThreadEvent(*this);
    }



    virtual wxEventCategory GetEventCategory() const override
        { return wxEVT_CATEGORY_THREAD; }

private:
    private: wxThreadEvent& operator=(const wxThreadEvent&) = delete; public:
# 1366 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic push
# 1366 "/usr/include/wx-3.1-unofficial/wx/event.h"
   
# 1366 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 1366 "/usr/include/wx-3.1-unofficial/wx/event.h"
    virtual wxClassInfo *GetClassInfo() const;
# 1366 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic pop
# 1366 "/usr/include/wx-3.1-unofficial/wx/event.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 1379 "/usr/include/wx-3.1-unofficial/wx/event.h"
class wxAsyncMethodCallEvent : public wxEvent
{
public:
    wxAsyncMethodCallEvent(wxObject* object)
        : wxEvent(wxID_ANY, wxEVT_ASYNC_METHOD_CALL)
    {
        SetEventObject(object);
    }

    wxAsyncMethodCallEvent(const wxAsyncMethodCallEvent& other)
        : wxEvent(other)
    {
    }

    virtual void Execute() = 0;
};


template <typename T>
class wxAsyncMethodCallEvent0 : public wxAsyncMethodCallEvent
{
public:
    typedef T ObjectType;
    typedef void (ObjectType::*MethodType)();

    wxAsyncMethodCallEvent0(ObjectType* object,
                            MethodType method)
        : wxAsyncMethodCallEvent(object),
          m_object(object),
          m_method(method)
    {
    }

    wxAsyncMethodCallEvent0(const wxAsyncMethodCallEvent0& other)
        : wxAsyncMethodCallEvent(other),
          m_object(other.m_object),
          m_method(other.m_method)
    {
    }

    virtual wxEvent *Clone() const override
    {
        return new wxAsyncMethodCallEvent0(*this);
    }

    virtual void Execute() override
    {
        (m_object->*m_method)();
    }

private:
    ObjectType* const m_object;
    const MethodType m_method;
};


template <typename T, typename T1>
class wxAsyncMethodCallEvent1 : public wxAsyncMethodCallEvent
{
public:
    typedef T ObjectType;
    typedef void (ObjectType::*MethodType)(T1 x1);
    typedef typename wxRemoveRef<T1>::type ParamType1;

    wxAsyncMethodCallEvent1(ObjectType* object,
                            MethodType method,
                            const ParamType1& x1)
        : wxAsyncMethodCallEvent(object),
          m_object(object),
          m_method(method),
          m_param1(x1)
    {
    }

    wxAsyncMethodCallEvent1(const wxAsyncMethodCallEvent1& other)
        : wxAsyncMethodCallEvent(other),
          m_object(other.m_object),
          m_method(other.m_method),
          m_param1(other.m_param1)
    {
    }

    virtual wxEvent *Clone() const override
    {
        return new wxAsyncMethodCallEvent1(*this);
    }

    virtual void Execute() override
    {
        (m_object->*m_method)(m_param1);
    }

private:
    ObjectType* const m_object;
    const MethodType m_method;
    const ParamType1 m_param1;
};


template <typename T, typename T1, typename T2>
class wxAsyncMethodCallEvent2 : public wxAsyncMethodCallEvent
{
public:
    typedef T ObjectType;
    typedef void (ObjectType::*MethodType)(T1 x1, T2 x2);
    typedef typename wxRemoveRef<T1>::type ParamType1;
    typedef typename wxRemoveRef<T2>::type ParamType2;

    wxAsyncMethodCallEvent2(ObjectType* object,
                            MethodType method,
                            const ParamType1& x1,
                            const ParamType2& x2)
        : wxAsyncMethodCallEvent(object),
          m_object(object),
          m_method(method),
          m_param1(x1),
          m_param2(x2)
    {
    }

    wxAsyncMethodCallEvent2(const wxAsyncMethodCallEvent2& other)
        : wxAsyncMethodCallEvent(other),
          m_object(other.m_object),
          m_method(other.m_method),
          m_param1(other.m_param1),
          m_param2(other.m_param2)
    {
    }

    virtual wxEvent *Clone() const override
    {
        return new wxAsyncMethodCallEvent2(*this);
    }

    virtual void Execute() override
    {
        (m_object->*m_method)(m_param1, m_param2);
    }

private:
    ObjectType* const m_object;
    const MethodType m_method;
    const ParamType1 m_param1;
    const ParamType2 m_param2;
};


template <typename T>
class wxAsyncMethodCallEventFunctor : public wxAsyncMethodCallEvent
{
public:
    typedef T FunctorType;

    wxAsyncMethodCallEventFunctor(wxObject *object, const FunctorType& fn)
        : wxAsyncMethodCallEvent(object),
          m_fn(fn)
    {
    }

    wxAsyncMethodCallEventFunctor(const wxAsyncMethodCallEventFunctor& other)
        : wxAsyncMethodCallEvent(other),
          m_fn(other.m_fn)
    {
    }

    virtual wxEvent *Clone() const override
    {
        return new wxAsyncMethodCallEventFunctor(*this);
    }

    virtual void Execute() override
    {
        m_fn();
    }

private:
    FunctorType m_fn;
};
# 1583 "/usr/include/wx-3.1-unofficial/wx/event.h"
class __attribute__ ((visibility("default"))) wxCommandEvent : public wxEvent,
                                        public wxEventBasicPayloadMixin
{
public:
    wxCommandEvent(wxEventType commandType = wxEVT_NULL, int winid = 0)
        : wxEvent(winid, commandType)
    {
        m_clientData = 
# 1590 "/usr/include/wx-3.1-unofficial/wx/event.h" 3 4
                      __null
# 1590 "/usr/include/wx-3.1-unofficial/wx/event.h"
                          ;
        m_clientObject = 
# 1591 "/usr/include/wx-3.1-unofficial/wx/event.h" 3 4
                        __null
# 1591 "/usr/include/wx-3.1-unofficial/wx/event.h"
                            ;
        m_isCommandEvent = true;


        m_propagationLevel = wxEVENT_PROPAGATE_MAX;
    }

    wxCommandEvent(const wxCommandEvent& event)
        : wxEvent(event),
          wxEventBasicPayloadMixin(event),
          m_clientData(event.m_clientData),
          m_clientObject(event.m_clientObject)
    {


        if ( m_cmdString.empty() )
            m_cmdString = event.GetString();
    }


    void SetClientData(void* clientData) { m_clientData = clientData; }
    void *GetClientData() const { return m_clientData; }


    void SetClientObject(wxClientData* clientObject) { m_clientObject = clientObject; }
    wxClientData *GetClientObject() const { return m_clientObject; }



    wxString GetString() const;


    int GetSelection() const { return m_commandInt; }


    bool IsChecked() const { return m_commandInt != 0; }


    bool IsSelection() const { return (m_extraLong != 0); }

    virtual wxEvent *Clone() const override { return new wxCommandEvent(*this); }
    virtual wxEventCategory GetEventCategory() const override { return wxEVT_CATEGORY_USER_INPUT; }

protected:
    void* m_clientData;
    wxClientData* m_clientObject;

private:

    private: wxCommandEvent& operator=(const wxCommandEvent&) = delete; public:
# 1640 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic push
# 1640 "/usr/include/wx-3.1-unofficial/wx/event.h"
   
# 1640 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 1640 "/usr/include/wx-3.1-unofficial/wx/event.h"
    virtual wxClassInfo *GetClassInfo() const;
# 1640 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic pop
# 1640 "/usr/include/wx-3.1-unofficial/wx/event.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};



class __attribute__ ((visibility("default"))) wxNotifyEvent : public wxCommandEvent
{
public:
    wxNotifyEvent(wxEventType commandType = wxEVT_NULL, int winid = 0)
        : wxCommandEvent(commandType, winid)
        { m_bAllow = true; }

    wxNotifyEvent(const wxNotifyEvent& event)
        : wxCommandEvent(event)
        { m_bAllow = event.m_bAllow; }


    void Veto() { m_bAllow = false; }


    void Allow() { m_bAllow = true; }


    bool IsAllowed() const { return m_bAllow; }

    virtual wxEvent *Clone() const override { return new wxNotifyEvent(*this); }

private:
    bool m_bAllow;

private:
    private: wxNotifyEvent& operator=(const wxNotifyEvent&) = delete; public:
# 1671 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic push
# 1671 "/usr/include/wx-3.1-unofficial/wx/event.h"
   
# 1671 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 1671 "/usr/include/wx-3.1-unofficial/wx/event.h"
    virtual wxClassInfo *GetClassInfo() const;
# 1671 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic pop
# 1671 "/usr/include/wx-3.1-unofficial/wx/event.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 1689 "/usr/include/wx-3.1-unofficial/wx/event.h"
class __attribute__ ((visibility("default"))) wxScrollEvent : public wxCommandEvent
{
public:
    wxScrollEvent(wxEventType commandType = wxEVT_NULL,
                  int winid = 0, int pos = 0, int orient = 0);

    int GetOrientation() const { return (int) m_extraLong; }
    int GetPosition() const { return m_commandInt; }
    void SetOrientation(int orient) { m_extraLong = (long) orient; }
    void SetPosition(int pos) { m_commandInt = pos; }

    virtual wxEvent *Clone() const override { return new wxScrollEvent(*this); }

private:
    private: wxScrollEvent& operator=(const wxScrollEvent&) = delete; public:
# 1703 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic push
# 1703 "/usr/include/wx-3.1-unofficial/wx/event.h"
   
# 1703 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 1703 "/usr/include/wx-3.1-unofficial/wx/event.h"
    virtual wxClassInfo *GetClassInfo() const;
# 1703 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic pop
# 1703 "/usr/include/wx-3.1-unofficial/wx/event.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 1719 "/usr/include/wx-3.1-unofficial/wx/event.h"
class __attribute__ ((visibility("default"))) wxScrollWinEvent : public wxEvent
{
public:
    wxScrollWinEvent(wxEventType commandType = wxEVT_NULL,
                     int pos = 0, int orient = 0);
    wxScrollWinEvent(const wxScrollWinEvent& event) : wxEvent(event)
        { m_commandInt = event.m_commandInt;
            m_extraLong = event.m_extraLong; }

    int GetOrientation() const { return (int) m_extraLong; }
    int GetPosition() const { return m_commandInt; }
    void SetOrientation(int orient) { m_extraLong = (long) orient; }
    void SetPosition(int pos) { m_commandInt = pos; }

    virtual wxEvent *Clone() const override { return new wxScrollWinEvent(*this); }

protected:
    int m_commandInt;
    long m_extraLong;

private:
    private: wxScrollWinEvent& operator=(const wxScrollWinEvent&) = delete; public:
# 1740 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic push
# 1740 "/usr/include/wx-3.1-unofficial/wx/event.h"
   
# 1740 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 1740 "/usr/include/wx-3.1-unofficial/wx/event.h"
    virtual wxClassInfo *GetClassInfo() const;
# 1740 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic pop
# 1740 "/usr/include/wx-3.1-unofficial/wx/event.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 1762 "/usr/include/wx-3.1-unofficial/wx/event.h"
enum wxMouseWheelAxis
{
    wxMOUSE_WHEEL_VERTICAL,
    wxMOUSE_WHEEL_HORIZONTAL
};

class __attribute__ ((visibility("default"))) wxMouseEvent : public wxEvent,
                                      public wxMouseState
{
public:
    wxMouseEvent(wxEventType mouseType = wxEVT_NULL);
    wxMouseEvent(const wxMouseEvent& event)
        : wxEvent(event),
          wxMouseState(event)
    {
        Assign(event);
    }


    bool IsButton() const { return Button(wxMOUSE_BTN_ANY); }


    bool ButtonDown(int but = wxMOUSE_BTN_ANY) const;


    bool ButtonDClick(int but = wxMOUSE_BTN_ANY) const;


    bool ButtonUp(int but = wxMOUSE_BTN_ANY) const;


    bool Button(int but) const;


    int GetButton() const;


    bool LeftDown() const { return (m_eventType == wxEVT_LEFT_DOWN); }
    bool MiddleDown() const { return (m_eventType == wxEVT_MIDDLE_DOWN); }
    bool RightDown() const { return (m_eventType == wxEVT_RIGHT_DOWN); }
    bool Aux1Down() const { return (m_eventType == wxEVT_AUX1_DOWN); }
    bool Aux2Down() const { return (m_eventType == wxEVT_AUX2_DOWN); }

    bool LeftUp() const { return (m_eventType == wxEVT_LEFT_UP); }
    bool MiddleUp() const { return (m_eventType == wxEVT_MIDDLE_UP); }
    bool RightUp() const { return (m_eventType == wxEVT_RIGHT_UP); }
    bool Aux1Up() const { return (m_eventType == wxEVT_AUX1_UP); }
    bool Aux2Up() const { return (m_eventType == wxEVT_AUX2_UP); }

    bool LeftDClick() const { return (m_eventType == wxEVT_LEFT_DCLICK); }
    bool MiddleDClick() const { return (m_eventType == wxEVT_MIDDLE_DCLICK); }
    bool RightDClick() const { return (m_eventType == wxEVT_RIGHT_DCLICK); }
    bool Aux1DClick() const { return (m_eventType == wxEVT_AUX1_DCLICK); }
    bool Aux2DClick() const { return (m_eventType == wxEVT_AUX2_DCLICK); }

    bool Magnify() const { return (m_eventType == wxEVT_MAGNIFY); }


    bool Dragging() const
    {
        return (m_eventType == wxEVT_MOTION) && ButtonIsDown(wxMOUSE_BTN_ANY);
    }


    bool Moving() const
    {
        return (m_eventType == wxEVT_MOTION) && !ButtonIsDown(wxMOUSE_BTN_ANY);
    }


    bool Entering() const { return (m_eventType == wxEVT_ENTER_WINDOW); }


    bool Leaving() const { return (m_eventType == wxEVT_LEAVE_WINDOW); }


    int GetClickCount() const { return m_clickCount; }


    wxPoint GetLogicalPosition(const wxDC& dc) const;
# 1850 "/usr/include/wx-3.1-unofficial/wx/event.h"
    int GetWheelRotation() const { return m_wheelRotation; }




    int GetWheelDelta() const { return m_wheelDelta; }



    bool IsWheelInverted() const { return m_wheelInverted; }




    wxMouseWheelAxis GetWheelAxis() const { return m_wheelAxis; }



    int GetLinesPerAction() const { return m_linesPerAction; }



    int GetColumnsPerAction() const { return m_columnsPerAction; }


    bool IsPageScroll() const { return ((unsigned int)m_linesPerAction == 
# 1875 "/usr/include/wx-3.1-unofficial/wx/event.h" 3 4
                                                                         (0x7fffffff * 2U + 1U)
# 1875 "/usr/include/wx-3.1-unofficial/wx/event.h"
                                                                                 ); }

    float GetMagnification() const { return m_magnification; }
    virtual wxEvent *Clone() const override { return new wxMouseEvent(*this); }
    virtual wxEventCategory GetEventCategory() const override { return wxEVT_CATEGORY_USER_INPUT; }

    wxMouseEvent& operator=(const wxMouseEvent& event)
    {
        if (&event != this)
            Assign(event);
        return *this;
    }

public:
    int m_clickCount;

    wxMouseWheelAxis m_wheelAxis;
    int m_wheelRotation;
    int m_wheelDelta;
    bool m_wheelInverted;
    int m_linesPerAction;
    int m_columnsPerAction;
    float m_magnification;

protected:
    void Assign(const wxMouseEvent& evt);

private:
    public:
# 1903 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic push
# 1903 "/usr/include/wx-3.1-unofficial/wx/event.h"
   
# 1903 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 1903 "/usr/include/wx-3.1-unofficial/wx/event.h"
    virtual wxClassInfo *GetClassInfo() const;
# 1903 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic pop
# 1903 "/usr/include/wx-3.1-unofficial/wx/event.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};







class __attribute__ ((visibility("default"))) wxSetCursorEvent : public wxEvent
{
public:
    wxSetCursorEvent(wxCoord x = 0, wxCoord y = 0)
        : wxEvent(0, wxEVT_SET_CURSOR),
          m_x(x), m_y(y), m_cursor()
        { }

    wxSetCursorEvent(const wxSetCursorEvent& event)
        : wxEvent(event),
          m_x(event.m_x),
          m_y(event.m_y),
          m_cursor(event.m_cursor)
        { }

    wxCoord GetX() const { return m_x; }
    wxCoord GetY() const { return m_y; }

    void SetCursor(const wxCursor& cursor) { m_cursor = cursor; }
    const wxCursor& GetCursor() const { return m_cursor; }
    bool HasCursor() const { return m_cursor.IsOk(); }

    virtual wxEvent *Clone() const override { return new wxSetCursorEvent(*this); }

private:
    wxCoord m_x, m_y;
    wxCursor m_cursor;

private:
    private: wxSetCursorEvent& operator=(const wxSetCursorEvent&) = delete; public:
# 1941 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic push
# 1941 "/usr/include/wx-3.1-unofficial/wx/event.h"
   
# 1941 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 1941 "/usr/include/wx-3.1-unofficial/wx/event.h"
    virtual wxClassInfo *GetClassInfo() const;
# 1941 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic pop
# 1941 "/usr/include/wx-3.1-unofficial/wx/event.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};



const unsigned int wxTwoFingerTimeInterval = 200;

class __attribute__ ((visibility("default"))) wxGestureEvent : public wxEvent
{
public:
    wxGestureEvent(wxWindowID winid = 0, wxEventType type = wxEVT_NULL)
        : wxEvent(winid, type)
    {
        m_isStart = false;
        m_isEnd = false;
    }

    wxGestureEvent(const wxGestureEvent& event) : wxEvent(event)
        , m_pos(event.m_pos)
    {
        m_isStart = event.m_isStart;
        m_isEnd = event.m_isEnd;
    }

    const wxPoint& GetPosition() const { return m_pos; }
    void SetPosition(const wxPoint& pos) { m_pos = pos; }
    bool IsGestureStart() const { return m_isStart; }
    void SetGestureStart(bool isStart = true) { m_isStart = isStart; }
    bool IsGestureEnd() const { return m_isEnd; }
    void SetGestureEnd(bool isEnd = true) { m_isEnd = isEnd; }

    virtual wxEvent *Clone() const override { return new wxGestureEvent(*this); }

protected:
    wxPoint m_pos;
    bool m_isStart, m_isEnd;

    private: wxGestureEvent& operator=(const wxGestureEvent&) = delete; public:
# 1978 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic push
# 1978 "/usr/include/wx-3.1-unofficial/wx/event.h"
   
# 1978 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 1978 "/usr/include/wx-3.1-unofficial/wx/event.h"
    virtual wxClassInfo *GetClassInfo() const;
# 1978 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic pop
# 1978 "/usr/include/wx-3.1-unofficial/wx/event.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();

};







class __attribute__ ((visibility("default"))) wxPanGestureEvent : public wxGestureEvent
{
public:
    wxPanGestureEvent(wxWindowID winid = 0)
        : wxGestureEvent(winid, wxEVT_GESTURE_PAN)
    {
    }

    wxPanGestureEvent(const wxPanGestureEvent& event)
        : wxGestureEvent(event),
          m_delta(event.m_delta)
    {
    }

    wxPoint GetDelta() const { return m_delta; }
    void SetDelta(const wxPoint& delta) { m_delta = delta; }

    virtual wxEvent *Clone() const override { return new wxPanGestureEvent(*this); }

private:
    wxPoint m_delta;

    private: wxPanGestureEvent& operator=(const wxPanGestureEvent&) = delete; public:
# 2010 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic push
# 2010 "/usr/include/wx-3.1-unofficial/wx/event.h"
   
# 2010 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 2010 "/usr/include/wx-3.1-unofficial/wx/event.h"
    virtual wxClassInfo *GetClassInfo() const;
# 2010 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic pop
# 2010 "/usr/include/wx-3.1-unofficial/wx/event.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};







class __attribute__ ((visibility("default"))) wxZoomGestureEvent : public wxGestureEvent
{
public:
    wxZoomGestureEvent(wxWindowID winid = 0)
        : wxGestureEvent(winid, wxEVT_GESTURE_ZOOM)
        { m_zoomFactor = 1.0; }

    wxZoomGestureEvent(const wxZoomGestureEvent& event) : wxGestureEvent(event)
    {
        m_zoomFactor = event.m_zoomFactor;
    }

    double GetZoomFactor() const { return m_zoomFactor; }
    void SetZoomFactor(double zoomFactor) { m_zoomFactor = zoomFactor; }

    virtual wxEvent *Clone() const override { return new wxZoomGestureEvent(*this); }

private:
    double m_zoomFactor;

    private: wxZoomGestureEvent& operator=(const wxZoomGestureEvent&) = delete; public:
# 2039 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic push
# 2039 "/usr/include/wx-3.1-unofficial/wx/event.h"
   
# 2039 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 2039 "/usr/include/wx-3.1-unofficial/wx/event.h"
    virtual wxClassInfo *GetClassInfo() const;
# 2039 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic pop
# 2039 "/usr/include/wx-3.1-unofficial/wx/event.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};







class __attribute__ ((visibility("default"))) wxRotateGestureEvent : public wxGestureEvent
{
public:
    wxRotateGestureEvent(wxWindowID winid = 0)
        : wxGestureEvent(winid, wxEVT_GESTURE_ROTATE)
        { m_rotationAngle = 0.0; }

    wxRotateGestureEvent(const wxRotateGestureEvent& event) : wxGestureEvent(event)
    {
        m_rotationAngle = event.m_rotationAngle;
    }

    double GetRotationAngle() const { return m_rotationAngle; }
    void SetRotationAngle(double rotationAngle) { m_rotationAngle = rotationAngle; }

    virtual wxEvent *Clone() const override { return new wxRotateGestureEvent(*this); }

private:
    double m_rotationAngle;

    private: wxRotateGestureEvent& operator=(const wxRotateGestureEvent&) = delete; public:
# 2068 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic push
# 2068 "/usr/include/wx-3.1-unofficial/wx/event.h"
   
# 2068 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 2068 "/usr/include/wx-3.1-unofficial/wx/event.h"
    virtual wxClassInfo *GetClassInfo() const;
# 2068 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic pop
# 2068 "/usr/include/wx-3.1-unofficial/wx/event.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};







class __attribute__ ((visibility("default"))) wxTwoFingerTapEvent : public wxGestureEvent
{
public:
    wxTwoFingerTapEvent(wxWindowID winid = 0)
        : wxGestureEvent(winid, wxEVT_TWO_FINGER_TAP)
        { }

    wxTwoFingerTapEvent(const wxTwoFingerTapEvent& event) : wxGestureEvent(event)
    { }

    virtual wxEvent *Clone() const override { return new wxTwoFingerTapEvent(*this); }

private:
    private: wxTwoFingerTapEvent& operator=(const wxTwoFingerTapEvent&) = delete; public:
# 2090 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic push
# 2090 "/usr/include/wx-3.1-unofficial/wx/event.h"
   
# 2090 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 2090 "/usr/include/wx-3.1-unofficial/wx/event.h"
    virtual wxClassInfo *GetClassInfo() const;
# 2090 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic pop
# 2090 "/usr/include/wx-3.1-unofficial/wx/event.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};







class __attribute__ ((visibility("default"))) wxLongPressEvent : public wxGestureEvent
{
public:
    wxLongPressEvent(wxWindowID winid = 0)
        : wxGestureEvent(winid, wxEVT_LONG_PRESS)
        { }

    wxLongPressEvent(const wxLongPressEvent& event) : wxGestureEvent(event)
    { }

    virtual wxEvent *Clone() const override { return new wxLongPressEvent(*this); }
private:
    private: wxLongPressEvent& operator=(const wxLongPressEvent&) = delete; public:
# 2111 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic push
# 2111 "/usr/include/wx-3.1-unofficial/wx/event.h"
   
# 2111 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 2111 "/usr/include/wx-3.1-unofficial/wx/event.h"
    virtual wxClassInfo *GetClassInfo() const;
# 2111 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic pop
# 2111 "/usr/include/wx-3.1-unofficial/wx/event.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};







class __attribute__ ((visibility("default"))) wxPressAndTapEvent : public wxGestureEvent
{
public:
    wxPressAndTapEvent(wxWindowID winid = 0)
        : wxGestureEvent(winid, wxEVT_PRESS_AND_TAP)
        { }

    wxPressAndTapEvent(const wxPressAndTapEvent& event) : wxGestureEvent(event)
    { }

    virtual wxEvent *Clone() const override { return new wxPressAndTapEvent(*this); }
private:
    private: wxPressAndTapEvent& operator=(const wxPressAndTapEvent&) = delete; public:
# 2132 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic push
# 2132 "/usr/include/wx-3.1-unofficial/wx/event.h"
   
# 2132 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 2132 "/usr/include/wx-3.1-unofficial/wx/event.h"
    virtual wxClassInfo *GetClassInfo() const;
# 2132 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic pop
# 2132 "/usr/include/wx-3.1-unofficial/wx/event.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 2149 "/usr/include/wx-3.1-unofficial/wx/event.h"
enum wxKeyCategoryFlags
{

    WXK_CATEGORY_ARROW = 1,


    WXK_CATEGORY_PAGING = 2,


    WXK_CATEGORY_JUMP = 4,


    WXK_CATEGORY_TAB = 8,


    WXK_CATEGORY_CUT = 16,


    WXK_CATEGORY_NAVIGATION = WXK_CATEGORY_ARROW |
                              WXK_CATEGORY_PAGING |
                              WXK_CATEGORY_JUMP
};

class __attribute__ ((visibility("default"))) wxKeyEvent : public wxEvent,
                                    public wxKeyboardState
{
public:
    wxKeyEvent(wxEventType keyType = wxEVT_NULL);




    wxKeyEvent(const wxKeyEvent& evt);
    wxKeyEvent(wxEventType eventType, const wxKeyEvent& evt);


    int GetKeyCode() const { return (int)m_keyCode; }


    bool IsKeyInCategory(int category) const;



    wxChar GetUnicodeKey() const { return m_uniChar; }



    wxUint32 GetRawKeyCode() const { return m_rawCode; }


    wxUint32 GetRawKeyFlags() const { return m_rawFlags; }


    void GetPosition(wxCoord *xpos, wxCoord *ypos) const
    {
        if (xpos)
            *xpos = GetX();
        if (ypos)
            *ypos = GetY();
    }


    void GetPosition(long *xpos, long *ypos) const
    {
        if (xpos)
            *xpos = GetX();
        if (ypos)
            *ypos = GetY();
    }

    wxPoint GetPosition() const
        { return wxPoint(GetX(), GetY()); }


    wxCoord GetX() const;


    wxCoord GetY() const;




    void DoAllowNextEvent() { m_allowNext = true; }


    bool IsNextEventAllowed() const { return m_allowNext; }


    virtual wxEvent *Clone() const override { return new wxKeyEvent(*this); }
    virtual wxEventCategory GetEventCategory() const override { return wxEVT_CATEGORY_USER_INPUT; }



    wxKeyEvent& operator=(const wxKeyEvent& evt);

public:


    wxCoord m_x, m_y;

    long m_keyCode;




    wxChar m_uniChar;




    wxUint32 m_rawCode;
    wxUint32 m_rawFlags;

private:


    void InitPropagation()
    {
        if ( m_eventType == wxEVT_CHAR_HOOK )
            m_propagationLevel = wxEVENT_PROPAGATE_MAX;

        m_allowNext = false;
    }



    void DoAssignMembers(const wxKeyEvent& evt)
    {
        m_x = evt.m_x;
        m_y = evt.m_y;
        m_hasPosition = evt.m_hasPosition;

        m_keyCode = evt.m_keyCode;

        m_rawCode = evt.m_rawCode;
        m_rawFlags = evt.m_rawFlags;

        m_uniChar = evt.m_uniChar;

    }



    void InitPositionIfNecessary() const;




    bool m_allowNext;



    bool m_hasPosition;

    public:
# 2303 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic push
# 2303 "/usr/include/wx-3.1-unofficial/wx/event.h"
   
# 2303 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 2303 "/usr/include/wx-3.1-unofficial/wx/event.h"
    virtual wxClassInfo *GetClassInfo() const;
# 2303 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic pop
# 2303 "/usr/include/wx-3.1-unofficial/wx/event.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};






class __attribute__ ((visibility("default"))) wxSizeEvent : public wxEvent
{
public:
    wxSizeEvent() : wxEvent(0, wxEVT_SIZE)
        { }
    wxSizeEvent(const wxSize& sz, int winid = 0)
        : wxEvent(winid, wxEVT_SIZE),
          m_size(sz)
        { }
    wxSizeEvent(const wxSizeEvent& event)
        : wxEvent(event),
          m_size(event.m_size), m_rect(event.m_rect)
        { }
    wxSizeEvent(const wxRect& rect, int id = 0)
        : m_size(rect.GetSize()), m_rect(rect)
        { m_eventType = wxEVT_SIZING; m_id = id; }

    wxSize GetSize() const { return m_size; }
    void SetSize(wxSize size) { m_size = size; }
    wxRect GetRect() const { return m_rect; }
    void SetRect(const wxRect& rect) { m_rect = rect; }

    virtual wxEvent *Clone() const override { return new wxSizeEvent(*this); }

public:

    wxSize m_size;
    wxRect m_rect;

private:
    private: wxSizeEvent& operator=(const wxSizeEvent&) = delete; public:
# 2341 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic push
# 2341 "/usr/include/wx-3.1-unofficial/wx/event.h"
   
# 2341 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 2341 "/usr/include/wx-3.1-unofficial/wx/event.h"
    virtual wxClassInfo *GetClassInfo() const;
# 2341 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic pop
# 2341 "/usr/include/wx-3.1-unofficial/wx/event.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};







class __attribute__ ((visibility("default"))) wxMoveEvent : public wxEvent
{
public:
    wxMoveEvent()
        : wxEvent(0, wxEVT_MOVE)
        { }
    wxMoveEvent(const wxPoint& pos, int winid = 0)
        : wxEvent(winid, wxEVT_MOVE),
          m_pos(pos)
        { }
    wxMoveEvent(const wxMoveEvent& event)
        : wxEvent(event),
          m_pos(event.m_pos)
    { }
    wxMoveEvent(const wxRect& rect, int id = 0)
        : m_pos(rect.GetPosition()), m_rect(rect)
        { m_eventType = wxEVT_MOVING; m_id = id; }

    wxPoint GetPosition() const { return m_pos; }
    void SetPosition(const wxPoint& pos) { m_pos = pos; }
    wxRect GetRect() const { return m_rect; }
    void SetRect(const wxRect& rect) { m_rect = rect; }

    virtual wxEvent *Clone() const override { return new wxMoveEvent(*this); }

protected:
    wxPoint m_pos;
    wxRect m_rect;

private:
    private: wxMoveEvent& operator=(const wxMoveEvent&) = delete; public:
# 2380 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic push
# 2380 "/usr/include/wx-3.1-unofficial/wx/event.h"
   
# 2380 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 2380 "/usr/include/wx-3.1-unofficial/wx/event.h"
    virtual wxClassInfo *GetClassInfo() const;
# 2380 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic pop
# 2380 "/usr/include/wx-3.1-unofficial/wx/event.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};







class __attribute__ ((visibility("default"))) wxPaintEvent : public wxEvent
{





    explicit wxPaintEvent(wxWindowBase* window = 
# 2396 "/usr/include/wx-3.1-unofficial/wx/event.h" 3 4
                                                __null
# 2396 "/usr/include/wx-3.1-unofficial/wx/event.h"
                                                    );

public:


    virtual wxEvent *Clone() const override { return new wxPaintEvent(*this); }

private:
    private: wxPaintEvent& operator=(const wxPaintEvent&) = delete; public:
# 2404 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic push
# 2404 "/usr/include/wx-3.1-unofficial/wx/event.h"
   
# 2404 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 2404 "/usr/include/wx-3.1-unofficial/wx/event.h"
    virtual wxClassInfo *GetClassInfo() const;
# 2404 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic pop
# 2404 "/usr/include/wx-3.1-unofficial/wx/event.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};

class __attribute__ ((visibility("default"))) wxNcPaintEvent : public wxEvent
{





    explicit wxNcPaintEvent(wxWindowBase* window = 
# 2414 "/usr/include/wx-3.1-unofficial/wx/event.h" 3 4
                                                  __null
# 2414 "/usr/include/wx-3.1-unofficial/wx/event.h"
                                                      );

public:
    virtual wxEvent *Clone() const override { return new wxNcPaintEvent(*this); }

private:
    private: wxNcPaintEvent& operator=(const wxNcPaintEvent&) = delete; public:
# 2420 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic push
# 2420 "/usr/include/wx-3.1-unofficial/wx/event.h"
   
# 2420 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 2420 "/usr/include/wx-3.1-unofficial/wx/event.h"
    virtual wxClassInfo *GetClassInfo() const;
# 2420 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic pop
# 2420 "/usr/include/wx-3.1-unofficial/wx/event.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};






class __attribute__ ((visibility("default"))) wxEraseEvent : public wxEvent
{
public:
    wxEraseEvent(int Id = 0, wxDC *dc = 
# 2431 "/usr/include/wx-3.1-unofficial/wx/event.h" 3 4
                                       __null
# 2431 "/usr/include/wx-3.1-unofficial/wx/event.h"
                                           )
        : wxEvent(Id, wxEVT_ERASE_BACKGROUND),
          m_dc(dc)
        { }

    wxEraseEvent(const wxEraseEvent& event)
        : wxEvent(event),
          m_dc(event.m_dc)
        { }

    wxDC *GetDC() const { return m_dc; }

    virtual wxEvent *Clone() const override { return new wxEraseEvent(*this); }

protected:
    wxDC *m_dc;

private:
    private: wxEraseEvent& operator=(const wxEraseEvent&) = delete; public:
# 2449 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic push
# 2449 "/usr/include/wx-3.1-unofficial/wx/event.h"
   
# 2449 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 2449 "/usr/include/wx-3.1-unofficial/wx/event.h"
    virtual wxClassInfo *GetClassInfo() const;
# 2449 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic pop
# 2449 "/usr/include/wx-3.1-unofficial/wx/event.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};







class __attribute__ ((visibility("default"))) wxFocusEvent : public wxEvent
{
public:
    wxFocusEvent(wxEventType type = wxEVT_NULL, int winid = 0)
        : wxEvent(winid, type)
        { m_win = 
# 2463 "/usr/include/wx-3.1-unofficial/wx/event.h" 3 4
                 __null
# 2463 "/usr/include/wx-3.1-unofficial/wx/event.h"
                     ; }

    wxFocusEvent(const wxFocusEvent& event)
        : wxEvent(event)
        { m_win = event.m_win; }




    wxWindow *GetWindow() const { return m_win; }
    void SetWindow(wxWindow *win) { m_win = win; }

    virtual wxEvent *Clone() const override { return new wxFocusEvent(*this); }

private:
    wxWindow *m_win;

private:
    private: wxFocusEvent& operator=(const wxFocusEvent&) = delete; public:
# 2481 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic push
# 2481 "/usr/include/wx-3.1-unofficial/wx/event.h"
   
# 2481 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 2481 "/usr/include/wx-3.1-unofficial/wx/event.h"
    virtual wxClassInfo *GetClassInfo() const;
# 2481 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic pop
# 2481 "/usr/include/wx-3.1-unofficial/wx/event.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};



class __attribute__ ((visibility("default"))) wxChildFocusEvent : public wxCommandEvent
{
public:
    wxChildFocusEvent(wxWindow *win = 
# 2489 "/usr/include/wx-3.1-unofficial/wx/event.h" 3 4
                                     __null
# 2489 "/usr/include/wx-3.1-unofficial/wx/event.h"
                                         );

    wxWindow *GetWindow() const { return (wxWindow *)GetEventObject(); }

    virtual wxEvent *Clone() const override { return new wxChildFocusEvent(*this); }

private:
    private: wxChildFocusEvent& operator=(const wxChildFocusEvent&) = delete; public:
# 2496 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic push
# 2496 "/usr/include/wx-3.1-unofficial/wx/event.h"
   
# 2496 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 2496 "/usr/include/wx-3.1-unofficial/wx/event.h"
    virtual wxClassInfo *GetClassInfo() const;
# 2496 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic pop
# 2496 "/usr/include/wx-3.1-unofficial/wx/event.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 2506 "/usr/include/wx-3.1-unofficial/wx/event.h"
class __attribute__ ((visibility("default"))) wxActivateEvent : public wxEvent
{
public:


    enum Reason
    {
        Reason_Mouse,
        Reason_Unknown
    };

    wxActivateEvent(wxEventType type = wxEVT_NULL, bool active = true,
                    int Id = 0, Reason activationReason = Reason_Unknown)
        : wxEvent(Id, type),
        m_activationReason(activationReason)
    {
        m_active = active;
    }
    wxActivateEvent(const wxActivateEvent& event)
        : wxEvent(event)
    {
        m_active = event.m_active;
        m_activationReason = event.m_activationReason;
    }

    bool GetActive() const { return m_active; }
    Reason GetActivationReason() const { return m_activationReason;}

    virtual wxEvent *Clone() const override { return new wxActivateEvent(*this); }

private:
    bool m_active;
    Reason m_activationReason;

private:
    private: wxActivateEvent& operator=(const wxActivateEvent&) = delete; public:
# 2541 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic push
# 2541 "/usr/include/wx-3.1-unofficial/wx/event.h"
   
# 2541 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 2541 "/usr/include/wx-3.1-unofficial/wx/event.h"
    virtual wxClassInfo *GetClassInfo() const;
# 2541 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic pop
# 2541 "/usr/include/wx-3.1-unofficial/wx/event.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};






class __attribute__ ((visibility("default"))) wxInitDialogEvent : public wxEvent
{
public:
    wxInitDialogEvent(int Id = 0)
        : wxEvent(Id, wxEVT_INIT_DIALOG)
        { }

    virtual wxEvent *Clone() const override { return new wxInitDialogEvent(*this); }

private:
    private: wxInitDialogEvent& operator=(const wxInitDialogEvent&) = delete; public:
# 2559 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic push
# 2559 "/usr/include/wx-3.1-unofficial/wx/event.h"
   
# 2559 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 2559 "/usr/include/wx-3.1-unofficial/wx/event.h"
    virtual wxClassInfo *GetClassInfo() const;
# 2559 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic pop
# 2559 "/usr/include/wx-3.1-unofficial/wx/event.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 2569 "/usr/include/wx-3.1-unofficial/wx/event.h"
class __attribute__ ((visibility("default"))) wxMenuEvent : public wxEvent
{
public:
    wxMenuEvent(wxEventType type = wxEVT_NULL, int winid = 0, wxMenu* menu = 
# 2572 "/usr/include/wx-3.1-unofficial/wx/event.h" 3 4
                                                                            __null
# 2572 "/usr/include/wx-3.1-unofficial/wx/event.h"
                                                                                )
        : wxEvent(winid, type)
        { m_menuId = winid; m_menu = menu; }
    wxMenuEvent(const wxMenuEvent& event)
        : wxEvent(event)
    { m_menuId = event.m_menuId; m_menu = event.m_menu; }


    int GetMenuId() const { return m_menuId; }


    bool IsPopup() const { return m_menuId == wxID_ANY; }


    wxMenu* GetMenu() const { return m_menu; }

    virtual wxEvent *Clone() const override { return new wxMenuEvent(*this); }

private:
    int m_menuId;
    wxMenu* m_menu;

    private: wxMenuEvent& operator=(const wxMenuEvent&) = delete; public:
# 2594 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic push
# 2594 "/usr/include/wx-3.1-unofficial/wx/event.h"
   
# 2594 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 2594 "/usr/include/wx-3.1-unofficial/wx/event.h"
    virtual wxClassInfo *GetClassInfo() const;
# 2594 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic pop
# 2594 "/usr/include/wx-3.1-unofficial/wx/event.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 2604 "/usr/include/wx-3.1-unofficial/wx/event.h"
class __attribute__ ((visibility("default"))) wxCloseEvent : public wxEvent
{
public:
    wxCloseEvent(wxEventType type = wxEVT_NULL, int winid = 0)
        : wxEvent(winid, type),
          m_loggingOff(true),
          m_veto(false),
          m_canVeto(true) {}

    wxCloseEvent(const wxCloseEvent& event)
        : wxEvent(event),
        m_loggingOff(event.m_loggingOff),
        m_veto(event.m_veto),
        m_canVeto(event.m_canVeto) {}

    void SetLoggingOff(bool logOff) { m_loggingOff = logOff; }
    bool GetLoggingOff() const
    {


        do { if ( m_eventType != wxEVT_CLOSE_WINDOW ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/event.h", 2624, __FUNCTION__, "m_eventType != wxEVT_CLOSE_WINDOW", L"this flag is for end session events only"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 )
                                                                       ;

        return m_loggingOff;
    }

    void Veto(bool veto = true)
    {

        if ( m_canVeto ) {} else { do { if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/event.h", 2633, __FUNCTION__, "\"m_canVeto\"", L"call to Veto() ignored (can't veto this event)"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); return; } struct wxDummyCheckStruct2633
                                                                            ;

        m_veto = veto;
    }
    void SetCanVeto(bool canVeto) { m_canVeto = canVeto; }
    bool CanVeto() const { return m_canVeto; }
    bool GetVeto() const { return m_canVeto && m_veto; }

    virtual wxEvent *Clone() const override { return new wxCloseEvent(*this); }

protected:
    bool m_loggingOff,
         m_veto,
         m_canVeto;

private:
    private: wxCloseEvent& operator=(const wxCloseEvent&) = delete; public:
# 2650 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic push
# 2650 "/usr/include/wx-3.1-unofficial/wx/event.h"
   
# 2650 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 2650 "/usr/include/wx-3.1-unofficial/wx/event.h"
    virtual wxClassInfo *GetClassInfo() const;
# 2650 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic pop
# 2650 "/usr/include/wx-3.1-unofficial/wx/event.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};





class __attribute__ ((visibility("default"))) wxShowEvent : public wxEvent
{
public:
    wxShowEvent(int winid = 0, bool show = false)
        : wxEvent(winid, wxEVT_SHOW)
        { m_show = show; }
    wxShowEvent(const wxShowEvent& event)
        : wxEvent(event)
    { m_show = event.m_show; }

    void SetShow(bool show) { m_show = show; }


    bool IsShown() const { return m_show; }





    virtual wxEvent *Clone() const override { return new wxShowEvent(*this); }

protected:
    bool m_show;

private:
    private: wxShowEvent& operator=(const wxShowEvent&) = delete; public:
# 2682 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic push
# 2682 "/usr/include/wx-3.1-unofficial/wx/event.h"
   
# 2682 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 2682 "/usr/include/wx-3.1-unofficial/wx/event.h"
    virtual wxClassInfo *GetClassInfo() const;
# 2682 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic pop
# 2682 "/usr/include/wx-3.1-unofficial/wx/event.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};





class __attribute__ ((visibility("default"))) wxIconizeEvent : public wxEvent
{
public:
    wxIconizeEvent(int winid = 0, bool iconized = true)
        : wxEvent(winid, wxEVT_ICONIZE)
        { m_iconized = iconized; }
    wxIconizeEvent(const wxIconizeEvent& event)
        : wxEvent(event)
    { m_iconized = event.m_iconized; }





    bool IsIconized() const { return m_iconized; }

    virtual wxEvent *Clone() const override { return new wxIconizeEvent(*this); }

protected:
    bool m_iconized;

private:
    private: wxIconizeEvent& operator=(const wxIconizeEvent&) = delete; public:
# 2711 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic push
# 2711 "/usr/include/wx-3.1-unofficial/wx/event.h"
   
# 2711 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 2711 "/usr/include/wx-3.1-unofficial/wx/event.h"
    virtual wxClassInfo *GetClassInfo() const;
# 2711 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic pop
# 2711 "/usr/include/wx-3.1-unofficial/wx/event.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};




class __attribute__ ((visibility("default"))) wxMaximizeEvent : public wxEvent
{
public:
    wxMaximizeEvent(int winid = 0)
        : wxEvent(winid, wxEVT_MAXIMIZE)
        { }

    virtual wxEvent *Clone() const override { return new wxMaximizeEvent(*this); }

private:
    private: wxMaximizeEvent& operator=(const wxMaximizeEvent&) = delete; public:
# 2727 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic push
# 2727 "/usr/include/wx-3.1-unofficial/wx/event.h"
   
# 2727 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 2727 "/usr/include/wx-3.1-unofficial/wx/event.h"
    virtual wxClassInfo *GetClassInfo() const;
# 2727 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic pop
# 2727 "/usr/include/wx-3.1-unofficial/wx/event.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};




class __attribute__ ((visibility("default"))) wxFullScreenEvent : public wxEvent
{
public:
    wxFullScreenEvent(int winid = 0, bool fullscreen = true)
        : wxEvent(winid, wxEVT_FULLSCREEN)
        { m_fullscreen = fullscreen; }
    wxFullScreenEvent(const wxFullScreenEvent& event)
        : wxEvent(event)
        { m_fullscreen = event.m_fullscreen; }

    bool IsFullScreen() const { return m_fullscreen; }

    virtual wxEvent *Clone() const override { return new wxFullScreenEvent(*this); }

protected:
    bool m_fullscreen;

private:
    private: wxFullScreenEvent& operator=(const wxFullScreenEvent&) = delete; public:
# 2751 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic push
# 2751 "/usr/include/wx-3.1-unofficial/wx/event.h"
   
# 2751 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 2751 "/usr/include/wx-3.1-unofficial/wx/event.h"
    virtual wxClassInfo *GetClassInfo() const;
# 2751 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic pop
# 2751 "/usr/include/wx-3.1-unofficial/wx/event.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 2763 "/usr/include/wx-3.1-unofficial/wx/event.h"
enum
{
    wxJOYSTICK1,
    wxJOYSTICK2
};


enum
{
    wxJOY_BUTTON_ANY = -1,
    wxJOY_BUTTON1 = 1,
    wxJOY_BUTTON2 = 2,
    wxJOY_BUTTON3 = 4,
    wxJOY_BUTTON4 = 8
};

class __attribute__ ((visibility("default"))) wxJoystickEvent : public wxEvent
{
protected:
    wxPoint m_pos;
    int m_zPosition;
    int m_buttonChange;
    int m_buttonState;
    int m_joyStick;

public:
    wxJoystickEvent(wxEventType type = wxEVT_NULL,
                    int state = 0,
                    int joystick = wxJOYSTICK1,
                    int change = 0)
        : wxEvent(0, type),
          m_pos(),
          m_zPosition(0),
          m_buttonChange(change),
          m_buttonState(state),
          m_joyStick(joystick)
    {
    }
    wxJoystickEvent(const wxJoystickEvent& event)
        : wxEvent(event),
          m_pos(event.m_pos),
          m_zPosition(event.m_zPosition),
          m_buttonChange(event.m_buttonChange),
          m_buttonState(event.m_buttonState),
          m_joyStick(event.m_joyStick)
    { }

    wxPoint GetPosition() const { return m_pos; }
    int GetZPosition() const { return m_zPosition; }
    int GetButtonState() const { return m_buttonState; }
    int GetButtonChange() const { return m_buttonChange; }
    int GetButtonOrdinal() const { return wxCTZ(m_buttonChange); }
    int GetJoystick() const { return m_joyStick; }

    void SetJoystick(int stick) { m_joyStick = stick; }
    void SetButtonState(int state) { m_buttonState = state; }
    void SetButtonChange(int change) { m_buttonChange = change; }
    void SetPosition(const wxPoint& pos) { m_pos = pos; }
    void SetZPosition(int zPos) { m_zPosition = zPos; }


    bool IsButton() const { return ((GetEventType() == wxEVT_JOY_BUTTON_DOWN) ||
            (GetEventType() == wxEVT_JOY_BUTTON_UP)); }


    bool IsMove() const { return (GetEventType() == wxEVT_JOY_MOVE); }


    bool IsZMove() const { return (GetEventType() == wxEVT_JOY_ZMOVE); }


    bool ButtonDown(int but = wxJOY_BUTTON_ANY) const
    { return ((GetEventType() == wxEVT_JOY_BUTTON_DOWN) &&
            ((but == wxJOY_BUTTON_ANY) || (but == m_buttonChange))); }


    bool ButtonUp(int but = wxJOY_BUTTON_ANY) const
    { return ((GetEventType() == wxEVT_JOY_BUTTON_UP) &&
            ((but == wxJOY_BUTTON_ANY) || (but == m_buttonChange))); }


    bool ButtonIsDown(int but = wxJOY_BUTTON_ANY) const
    { return (((but == wxJOY_BUTTON_ANY) && (m_buttonState != 0)) ||
            ((m_buttonState & but) == but)); }

    virtual wxEvent *Clone() const override { return new wxJoystickEvent(*this); }

private:
    private: wxJoystickEvent& operator=(const wxJoystickEvent&) = delete; public:
# 2851 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic push
# 2851 "/usr/include/wx-3.1-unofficial/wx/event.h"
   
# 2851 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 2851 "/usr/include/wx-3.1-unofficial/wx/event.h"
    virtual wxClassInfo *GetClassInfo() const;
# 2851 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic pop
# 2851 "/usr/include/wx-3.1-unofficial/wx/event.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};






class __attribute__ ((visibility("default"))) wxDropFilesEvent : public wxEvent
{
public:
    int m_noFiles;
    wxPoint m_pos;
    wxString* m_files;

    wxDropFilesEvent(wxEventType type = wxEVT_NULL,
                     int noFiles = 0,
                     wxString *files = 
# 2868 "/usr/include/wx-3.1-unofficial/wx/event.h" 3 4
                                      __null
# 2868 "/usr/include/wx-3.1-unofficial/wx/event.h"
                                          )
        : wxEvent(0, type),
          m_noFiles(noFiles),
          m_pos(),
          m_files(files)
        { }


    wxDropFilesEvent(const wxDropFilesEvent& other)
        : wxEvent(other),
          m_noFiles(other.m_noFiles),
          m_pos(other.m_pos),
          m_files(
# 2880 "/usr/include/wx-3.1-unofficial/wx/event.h" 3 4
                 __null
# 2880 "/usr/include/wx-3.1-unofficial/wx/event.h"
                     )
    {
        m_files = new wxString[m_noFiles];
        for ( int n = 0; n < m_noFiles; n++ )
        {
            m_files[n] = other.m_files[n];
        }
    }

    virtual ~wxDropFilesEvent()
    {
        delete [] m_files;
    }

    wxPoint GetPosition() const { return m_pos; }
    int GetNumberOfFiles() const { return m_noFiles; }
    wxString *GetFiles() const { return m_files; }

    virtual wxEvent *Clone() const override { return new wxDropFilesEvent(*this); }

private:
    private: wxDropFilesEvent& operator=(const wxDropFilesEvent&) = delete; public:
# 2901 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic push
# 2901 "/usr/include/wx-3.1-unofficial/wx/event.h"
   
# 2901 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 2901 "/usr/include/wx-3.1-unofficial/wx/event.h"
    virtual wxClassInfo *GetClassInfo() const;
# 2901 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic pop
# 2901 "/usr/include/wx-3.1-unofficial/wx/event.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 2913 "/usr/include/wx-3.1-unofficial/wx/event.h"
enum wxUpdateUIMode
{

    wxUPDATE_UI_PROCESS_ALL,



    wxUPDATE_UI_PROCESS_SPECIFIED
};

class __attribute__ ((visibility("default"))) wxUpdateUIEvent : public wxCommandEvent
{
public:
    wxUpdateUIEvent(wxWindowID commandId = 0)
        : wxCommandEvent(wxEVT_UPDATE_UI, commandId)
    {
        m_checked =
        m_enabled =
        m_shown =
        m_setEnabled =
        m_setShown =
        m_setText =
        m_setChecked = false;
        m_isCheckable = true;
    }
    wxUpdateUIEvent(const wxUpdateUIEvent& event)
        : wxCommandEvent(event),
          m_checked(event.m_checked),
          m_enabled(event.m_enabled),
          m_shown(event.m_shown),
          m_setEnabled(event.m_setEnabled),
          m_setShown(event.m_setShown),
          m_setText(event.m_setText),
          m_setChecked(event.m_setChecked),
          m_isCheckable(event.m_isCheckable),
          m_text(event.m_text)
    { }

    bool GetChecked() const { return m_checked; }
    bool GetEnabled() const { return m_enabled; }
    bool GetShown() const { return m_shown; }
    wxString GetText() const { return m_text; }
    bool GetSetText() const { return m_setText; }
    bool GetSetChecked() const { return m_setChecked; }
    bool GetSetEnabled() const { return m_setEnabled; }
    bool GetSetShown() const { return m_setShown; }

    void Check(bool check) { m_checked = check; m_setChecked = true; }
    void Enable(bool enable) { m_enabled = enable; m_setEnabled = true; }
    void Show(bool show) { m_shown = show; m_setShown = true; }
    void SetText(const wxString& text) { m_text = text; m_setText = true; }


    bool IsCheckable() const { return m_isCheckable; }
    void DisallowCheck() { m_isCheckable = false; }



    static void SetUpdateInterval(long updateInterval) { sm_updateInterval = updateInterval; }


    static long GetUpdateInterval() { return sm_updateInterval; }


    static bool CanUpdate(wxWindowBase *win);



    static void ResetUpdateTime();




    static void SetMode(wxUpdateUIMode mode) { sm_updateMode = mode; }


    static wxUpdateUIMode GetMode() { return sm_updateMode; }

    virtual wxEvent *Clone() const override { return new wxUpdateUIEvent(*this); }

protected:
    bool m_checked;
    bool m_enabled;
    bool m_shown;
    bool m_setEnabled;
    bool m_setShown;
    bool m_setText;
    bool m_setChecked;
    bool m_isCheckable;
    wxString m_text;

    static wxLongLong sm_lastUpdate;

    static long sm_updateInterval;
    static wxUpdateUIMode sm_updateMode;

private:
    private: wxUpdateUIEvent& operator=(const wxUpdateUIEvent&) = delete; public:
# 3010 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic push
# 3010 "/usr/include/wx-3.1-unofficial/wx/event.h"
   
# 3010 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 3010 "/usr/include/wx-3.1-unofficial/wx/event.h"
    virtual wxClassInfo *GetClassInfo() const;
# 3010 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic pop
# 3010 "/usr/include/wx-3.1-unofficial/wx/event.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};






class __attribute__ ((visibility("default"))) wxSysColourChangedEvent : public wxEvent
{
public:
    wxSysColourChangedEvent()
        : wxEvent(0, wxEVT_SYS_COLOUR_CHANGED)
        { }

    virtual wxEvent *Clone() const override { return new wxSysColourChangedEvent(*this); }

private:
    private: wxSysColourChangedEvent& operator=(const wxSysColourChangedEvent&) = delete; public:
# 3028 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic push
# 3028 "/usr/include/wx-3.1-unofficial/wx/event.h"
   
# 3028 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 3028 "/usr/include/wx-3.1-unofficial/wx/event.h"
    virtual wxClassInfo *GetClassInfo() const;
# 3028 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic pop
# 3028 "/usr/include/wx-3.1-unofficial/wx/event.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};







class __attribute__ ((visibility("default"))) wxMouseCaptureChangedEvent : public wxEvent
{
public:
    wxMouseCaptureChangedEvent(wxWindowID winid = 0, wxWindow* gainedCapture = 
# 3040 "/usr/include/wx-3.1-unofficial/wx/event.h" 3 4
                                                                              __null
# 3040 "/usr/include/wx-3.1-unofficial/wx/event.h"
                                                                                  )
        : wxEvent(winid, wxEVT_MOUSE_CAPTURE_CHANGED),
          m_gainedCapture(gainedCapture)
        { }

    wxMouseCaptureChangedEvent(const wxMouseCaptureChangedEvent& event)
        : wxEvent(event),
          m_gainedCapture(event.m_gainedCapture)
        { }

    virtual wxEvent *Clone() const override { return new wxMouseCaptureChangedEvent(*this); }

    wxWindow* GetCapturedWindow() const { return m_gainedCapture; }

private:
    wxWindow* m_gainedCapture;

    private: wxMouseCaptureChangedEvent& operator=(const wxMouseCaptureChangedEvent&) = delete; public:
# 3057 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic push
# 3057 "/usr/include/wx-3.1-unofficial/wx/event.h"
   
# 3057 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 3057 "/usr/include/wx-3.1-unofficial/wx/event.h"
    virtual wxClassInfo *GetClassInfo() const;
# 3057 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic pop
# 3057 "/usr/include/wx-3.1-unofficial/wx/event.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 3067 "/usr/include/wx-3.1-unofficial/wx/event.h"
class __attribute__ ((visibility("default"))) wxMouseCaptureLostEvent : public wxEvent
{
public:
    wxMouseCaptureLostEvent(wxWindowID winid = 0)
        : wxEvent(winid, wxEVT_MOUSE_CAPTURE_LOST)
    {}

    wxMouseCaptureLostEvent(const wxMouseCaptureLostEvent& event)
        : wxEvent(event)
    {}

    virtual wxEvent *Clone() const override { return new wxMouseCaptureLostEvent(*this); }

    private: wxMouseCaptureLostEvent& operator=(const wxMouseCaptureLostEvent&) = delete; public:
# 3080 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic push
# 3080 "/usr/include/wx-3.1-unofficial/wx/event.h"
   
# 3080 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 3080 "/usr/include/wx-3.1-unofficial/wx/event.h"
    virtual wxClassInfo *GetClassInfo() const;
# 3080 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic pop
# 3080 "/usr/include/wx-3.1-unofficial/wx/event.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};




class __attribute__ ((visibility("default"))) wxDisplayChangedEvent : public wxEvent
{
private:
    private: wxDisplayChangedEvent& operator=(const wxDisplayChangedEvent&) = delete; public:
# 3089 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic push
# 3089 "/usr/include/wx-3.1-unofficial/wx/event.h"
   
# 3089 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 3089 "/usr/include/wx-3.1-unofficial/wx/event.h"
    virtual wxClassInfo *GetClassInfo() const;
# 3089 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic pop
# 3089 "/usr/include/wx-3.1-unofficial/wx/event.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();

public:
    wxDisplayChangedEvent()
        : wxEvent(0, wxEVT_DISPLAY_CHANGED)
        { }

    virtual wxEvent *Clone() const override { return new wxDisplayChangedEvent(*this); }
};




class __attribute__ ((visibility("default"))) wxDPIChangedEvent : public wxEvent
{
public:
    explicit
    wxDPIChangedEvent(const wxSize& oldDPI = wxDefaultSize,
                      const wxSize& newDPI = wxDefaultSize)
        : wxEvent(0, wxEVT_DPI_CHANGED),
          m_oldDPI(oldDPI),
          m_newDPI(newDPI)
        { }

    wxSize GetOldDPI() const { return m_oldDPI; }
    wxSize GetNewDPI() const { return m_newDPI; }

    virtual wxEvent *Clone() const override { return new wxDPIChangedEvent(*this); }

private:
    wxSize m_oldDPI;
    wxSize m_newDPI;

    private: wxDPIChangedEvent& operator=(const wxDPIChangedEvent&) = delete; public:
# 3122 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic push
# 3122 "/usr/include/wx-3.1-unofficial/wx/event.h"
   
# 3122 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 3122 "/usr/include/wx-3.1-unofficial/wx/event.h"
    virtual wxClassInfo *GetClassInfo() const;
# 3122 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic pop
# 3122 "/usr/include/wx-3.1-unofficial/wx/event.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};





class __attribute__ ((visibility("default"))) wxPaletteChangedEvent : public wxEvent
{
public:
    wxPaletteChangedEvent(wxWindowID winid = 0)
        : wxEvent(winid, wxEVT_PALETTE_CHANGED),
          m_changedWindow(
# 3134 "/usr/include/wx-3.1-unofficial/wx/event.h" 3 4
                         __null
# 3134 "/usr/include/wx-3.1-unofficial/wx/event.h"
                             )
        { }

    wxPaletteChangedEvent(const wxPaletteChangedEvent& event)
        : wxEvent(event),
          m_changedWindow(event.m_changedWindow)
        { }

    void SetChangedWindow(wxWindow* win) { m_changedWindow = win; }
    wxWindow* GetChangedWindow() const { return m_changedWindow; }

    virtual wxEvent *Clone() const override { return new wxPaletteChangedEvent(*this); }

protected:
    wxWindow* m_changedWindow;

private:
    private: wxPaletteChangedEvent& operator=(const wxPaletteChangedEvent&) = delete; public:
# 3151 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic push
# 3151 "/usr/include/wx-3.1-unofficial/wx/event.h"
   
# 3151 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 3151 "/usr/include/wx-3.1-unofficial/wx/event.h"
    virtual wxClassInfo *GetClassInfo() const;
# 3151 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic pop
# 3151 "/usr/include/wx-3.1-unofficial/wx/event.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};






class __attribute__ ((visibility("default"))) wxQueryNewPaletteEvent : public wxEvent
{
public:
    wxQueryNewPaletteEvent(wxWindowID winid = 0)
        : wxEvent(winid, wxEVT_QUERY_NEW_PALETTE),
          m_paletteRealized(false)
        { }
    wxQueryNewPaletteEvent(const wxQueryNewPaletteEvent& event)
        : wxEvent(event),
        m_paletteRealized(event.m_paletteRealized)
    { }


    void SetPaletteRealized(bool realized) { m_paletteRealized = realized; }
    bool GetPaletteRealized() const { return m_paletteRealized; }

    virtual wxEvent *Clone() const override { return new wxQueryNewPaletteEvent(*this); }

protected:
    bool m_paletteRealized;

private:
    private: wxQueryNewPaletteEvent& operator=(const wxQueryNewPaletteEvent&) = delete; public:
# 3181 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic push
# 3181 "/usr/include/wx-3.1-unofficial/wx/event.h"
   
# 3181 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 3181 "/usr/include/wx-3.1-unofficial/wx/event.h"
    virtual wxClassInfo *GetClassInfo() const;
# 3181 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic pop
# 3181 "/usr/include/wx-3.1-unofficial/wx/event.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};






class __attribute__ ((visibility("default"))) wxNavigationKeyEvent : public wxEvent
{
public:
    wxNavigationKeyEvent()
        : wxEvent(0, wxEVT_NAVIGATION_KEY),
          m_flags(IsForward | FromTab),
          m_focus(
# 3195 "/usr/include/wx-3.1-unofficial/wx/event.h" 3 4
                 __null
# 3195 "/usr/include/wx-3.1-unofficial/wx/event.h"
                     )
        {
            m_propagationLevel = wxEVENT_PROPAGATE_NONE;
        }

    wxNavigationKeyEvent(const wxNavigationKeyEvent& event)
        : wxEvent(event),
          m_flags(event.m_flags),
          m_focus(event.m_focus)
        { }


    bool GetDirection() const
        { return (m_flags & IsForward) != 0; }
    void SetDirection(bool bForward)
        { if ( bForward ) m_flags |= IsForward; else m_flags &= ~IsForward; }



    bool IsWindowChange() const
        { return (m_flags & WinChange) != 0; }
    void SetWindowChange(bool bIs)
        { if ( bIs ) m_flags |= WinChange; else m_flags &= ~WinChange; }



    bool IsFromTab() const
        { return (m_flags & FromTab) != 0; }
    void SetFromTab(bool bIs)
        { if ( bIs ) m_flags |= FromTab; else m_flags &= ~FromTab; }



    wxWindow* GetCurrentFocus() const { return m_focus; }
    void SetCurrentFocus(wxWindow *win) { m_focus = win; }


    void SetFlags(long flags) { m_flags = flags; }

    virtual wxEvent *Clone() const override { return new wxNavigationKeyEvent(*this); }

    enum wxNavigationKeyEventFlags
    {
        IsBackward = 0x0000,
        IsForward = 0x0001,
        WinChange = 0x0002,
        FromTab = 0x0004
    };

    long m_flags;
    wxWindow *m_focus;

private:
    private: wxNavigationKeyEvent& operator=(const wxNavigationKeyEvent&) = delete; public:
# 3248 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic push
# 3248 "/usr/include/wx-3.1-unofficial/wx/event.h"
   
# 3248 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 3248 "/usr/include/wx-3.1-unofficial/wx/event.h"
    virtual wxClassInfo *GetClassInfo() const;
# 3248 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic pop
# 3248 "/usr/include/wx-3.1-unofficial/wx/event.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 3261 "/usr/include/wx-3.1-unofficial/wx/event.h"
class __attribute__ ((visibility("default"))) wxWindowCreateEvent : public wxCommandEvent
{
public:
    wxWindowCreateEvent(wxWindow *win = 
# 3264 "/usr/include/wx-3.1-unofficial/wx/event.h" 3 4
                                       __null
# 3264 "/usr/include/wx-3.1-unofficial/wx/event.h"
                                           );

    wxWindow *GetWindow() const { return (wxWindow *)GetEventObject(); }

    virtual wxEvent *Clone() const override { return new wxWindowCreateEvent(*this); }

private:
    private: wxWindowCreateEvent& operator=(const wxWindowCreateEvent&) = delete; public:
# 3271 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic push
# 3271 "/usr/include/wx-3.1-unofficial/wx/event.h"
   
# 3271 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 3271 "/usr/include/wx-3.1-unofficial/wx/event.h"
    virtual wxClassInfo *GetClassInfo() const;
# 3271 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic pop
# 3271 "/usr/include/wx-3.1-unofficial/wx/event.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};

class __attribute__ ((visibility("default"))) wxWindowDestroyEvent : public wxCommandEvent
{
public:
    wxWindowDestroyEvent(wxWindow *win = 
# 3277 "/usr/include/wx-3.1-unofficial/wx/event.h" 3 4
                                        __null
# 3277 "/usr/include/wx-3.1-unofficial/wx/event.h"
                                            );

    wxWindow *GetWindow() const { return (wxWindow *)GetEventObject(); }

    virtual wxEvent *Clone() const override { return new wxWindowDestroyEvent(*this); }

private:
    private: wxWindowDestroyEvent& operator=(const wxWindowDestroyEvent&) = delete; public:
# 3284 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic push
# 3284 "/usr/include/wx-3.1-unofficial/wx/event.h"
   
# 3284 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 3284 "/usr/include/wx-3.1-unofficial/wx/event.h"
    virtual wxClassInfo *GetClassInfo() const;
# 3284 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic pop
# 3284 "/usr/include/wx-3.1-unofficial/wx/event.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};







class __attribute__ ((visibility("default"))) wxHelpEvent : public wxCommandEvent
{
public:

    enum Origin
    {
        Origin_Unknown,
        Origin_Keyboard,
        Origin_HelpButton
    };

    wxHelpEvent(wxEventType type = wxEVT_NULL,
                wxWindowID winid = 0,
                const wxPoint& pt = wxDefaultPosition,
                Origin origin = Origin_Unknown)
        : wxCommandEvent(type, winid),
          m_pos(pt),
          m_origin(GuessOrigin(origin))
    { }
    wxHelpEvent(const wxHelpEvent& event)
        : wxCommandEvent(event),
          m_pos(event.m_pos),
          m_target(event.m_target),
          m_link(event.m_link),
          m_origin(event.m_origin)
    { }


    const wxPoint& GetPosition() const { return m_pos; }
    void SetPosition(const wxPoint& pos) { m_pos = pos; }


    const wxString& GetLink() const { return m_link; }
    void SetLink(const wxString& link) { m_link = link; }


    const wxString& GetTarget() const { return m_target; }
    void SetTarget(const wxString& target) { m_target = target; }

    virtual wxEvent *Clone() const override { return new wxHelpEvent(*this); }


    Origin GetOrigin() const { return m_origin; }
    void SetOrigin(Origin origin) { m_origin = origin; }

protected:
    wxPoint m_pos;
    wxString m_target;
    wxString m_link;
    Origin m_origin;



    static Origin GuessOrigin(Origin origin);

private:
    private: wxHelpEvent& operator=(const wxHelpEvent&) = delete; public:
# 3349 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic push
# 3349 "/usr/include/wx-3.1-unofficial/wx/event.h"
   
# 3349 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 3349 "/usr/include/wx-3.1-unofficial/wx/event.h"
    virtual wxClassInfo *GetClassInfo() const;
# 3349 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic pop
# 3349 "/usr/include/wx-3.1-unofficial/wx/event.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 3363 "/usr/include/wx-3.1-unofficial/wx/event.h"
class __attribute__ ((visibility("default"))) wxClipboardTextEvent : public wxCommandEvent
{
public:
    wxClipboardTextEvent(wxEventType type = wxEVT_NULL,
                     wxWindowID winid = 0)
        : wxCommandEvent(type, winid)
    { }
    wxClipboardTextEvent(const wxClipboardTextEvent& event)
        : wxCommandEvent(event)
    { }

    virtual wxEvent *Clone() const override { return new wxClipboardTextEvent(*this); }

private:
    private: wxClipboardTextEvent& operator=(const wxClipboardTextEvent&) = delete; public:
# 3377 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic push
# 3377 "/usr/include/wx-3.1-unofficial/wx/event.h"
   
# 3377 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 3377 "/usr/include/wx-3.1-unofficial/wx/event.h"
    virtual wxClassInfo *GetClassInfo() const;
# 3377 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic pop
# 3377 "/usr/include/wx-3.1-unofficial/wx/event.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 3388 "/usr/include/wx-3.1-unofficial/wx/event.h"
class __attribute__ ((visibility("default"))) wxContextMenuEvent : public wxCommandEvent
{
public:
    wxContextMenuEvent(wxEventType type = wxEVT_NULL,
                       wxWindowID winid = 0,
                       const wxPoint& pt = wxDefaultPosition)
        : wxCommandEvent(type, winid),
          m_pos(pt)
    { }
    wxContextMenuEvent(const wxContextMenuEvent& event)
        : wxCommandEvent(event),
        m_pos(event.m_pos)
    { }


    const wxPoint& GetPosition() const { return m_pos; }
    void SetPosition(const wxPoint& pos) { m_pos = pos; }

    virtual wxEvent *Clone() const override { return new wxContextMenuEvent(*this); }

protected:
    wxPoint m_pos;

private:
    private: wxContextMenuEvent& operator=(const wxContextMenuEvent&) = delete; public:
# 3412 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic push
# 3412 "/usr/include/wx-3.1-unofficial/wx/event.h"
   
# 3412 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 3412 "/usr/include/wx-3.1-unofficial/wx/event.h"
    virtual wxClassInfo *GetClassInfo() const;
# 3412 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic pop
# 3412 "/usr/include/wx-3.1-unofficial/wx/event.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 3435 "/usr/include/wx-3.1-unofficial/wx/event.h"
struct __attribute__ ((visibility("default"))) wxEventTableEntryBase
{
    wxEventTableEntryBase(int winid, int idLast,
                          wxEventFunctor* fn, wxObject *data)
        : m_id(winid),
          m_lastId(idLast),
          m_fn(fn),
          m_callbackUserData(data)
    {
        do { if ( idLast == wxID_ANY || winid <= idLast ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/event.h", 3444, __FUNCTION__, "idLast == wxID_ANY || winid <= idLast", "invalid IDs range: lower bound > upper bound"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 )
                                                                      ;
    }

    wxEventTableEntryBase( const wxEventTableEntryBase &entry )
        : m_id( entry.m_id ),
          m_lastId( entry.m_lastId ),
          m_fn( entry.m_fn ),
          m_callbackUserData( entry.m_callbackUserData )
    {






        const_cast<wxEventTableEntryBase&>( entry ).m_fn = 
# 3460 "/usr/include/wx-3.1-unofficial/wx/event.h" 3 4
                                                          __null
# 3460 "/usr/include/wx-3.1-unofficial/wx/event.h"
                                                              ;
    }

    ~wxEventTableEntryBase()
    {
        delete m_fn;
    }



    int m_id,
        m_lastId;


    wxEventFunctor* m_fn;


    wxObject* m_callbackUserData;

private:
    private: wxEventTableEntryBase& operator=(const wxEventTableEntryBase&) = delete;
};


struct __attribute__ ((visibility("default"))) wxEventTableEntry : public wxEventTableEntryBase
{
    wxEventTableEntry(const int& evType, int winid, int idLast,
                      wxEventFunctor* fn, wxObject *data)
        : wxEventTableEntryBase(winid, idLast, fn, data),
        m_eventType(evType)
    { }







    const int& m_eventType;

private:
    private: wxEventTableEntry& operator=(const wxEventTableEntry&) = delete;
};


struct __attribute__ ((visibility("default"))) wxDynamicEventTableEntry : public wxEventTableEntryBase
{
    wxDynamicEventTableEntry(int evType, int winid, int idLast,
                             wxEventFunctor* fn, wxObject *data)
        : wxEventTableEntryBase(winid, idLast, fn, data),
          m_eventType(evType)
    { }




    int m_eventType;

private:
    private: wxDynamicEventTableEntry& operator=(const wxDynamicEventTableEntry&) = delete;
};





struct __attribute__ ((visibility("default"))) wxEventTable
{
    const wxEventTable *baseTable;
    const wxEventTableEntry *entries;
};





typedef wxBaseArray<const wxEventTableEntry*> wxBaseArrayForwxEventTableEntryPointerArray; class wxEventTableEntryPointerArray : public wxBaseArrayForwxEventTableEntryPointerArray { typedef wxBaseArrayForwxEventTableEntryPointerArray Base; public: wxEventTableEntryPointerArray() : Base() { } explicit wxEventTableEntryPointerArray(size_t n) : Base(n) { } wxEventTableEntryPointerArray(size_t n, Base::const_reference v) : Base(n, v) { } template <class InputIterator> wxEventTableEntryPointerArray(InputIterator first, InputIterator last) : Base(first, last) { } };

class __attribute__ ((visibility("default"))) wxEventHashTable
{
private:

    struct EventTypeTable
    {
        wxEventType eventType;
        wxEventTableEntryPointerArray eventEntryTable;
    };
    typedef EventTypeTable* EventTypeTablePointer;

public:




    wxEventHashTable(const wxEventTable &table);

    ~wxEventHashTable();



    bool HandleEvent(wxEvent& event, wxEvtHandler *self);


    void Clear();







protected:

    void InitHashTable();

    void AddEntry(const wxEventTableEntry &entry);

    void AllocEventTypeTable(size_t size);


    void GrowEventTypeTable();

protected:
    const wxEventTable &m_table;
    bool m_rebuildHash;

    size_t m_size;
    EventTypeTablePointer *m_eventTypeTable;

    static wxEventHashTable* sm_first;
    wxEventHashTable* m_previous;
    wxEventHashTable* m_next;

    private: wxEventHashTable(const wxEventHashTable&) = delete; wxEventHashTable& operator=(const wxEventHashTable&) = delete;
};





class __attribute__ ((visibility("default"))) wxEvtHandler : public wxObject
                                    , public wxTrackable
{
public:
    wxEvtHandler();
    virtual ~wxEvtHandler();





    wxEvtHandler *GetNextHandler() const { return m_nextHandler; }
    wxEvtHandler *GetPreviousHandler() const { return m_previousHandler; }
    virtual void SetNextHandler(wxEvtHandler *handler) { m_nextHandler = handler; }
    virtual void SetPreviousHandler(wxEvtHandler *handler) { m_previousHandler = handler; }

    void SetEvtHandlerEnabled(bool enabled) { m_enabled = enabled; }
    bool GetEvtHandlerEnabled() const { return m_enabled; }

    void Unlink();
    bool IsUnlinked() const;
# 3631 "/usr/include/wx-3.1-unofficial/wx/event.h"
    static void AddFilter(wxEventFilter* filter);


    static void RemoveFilter(wxEventFilter* filter);
# 3643 "/usr/include/wx-3.1-unofficial/wx/event.h"
    virtual bool ProcessEvent(wxEvent& event);





    bool SafelyProcessEvent(wxEvent& event);
# 3664 "/usr/include/wx-3.1-unofficial/wx/event.h"
    bool ProcessEventLocally(wxEvent& event);






    virtual void QueueEvent(wxEvent *event);



    virtual void AddPendingEvent(const wxEvent& event)
    {






        QueueEvent(event.Clone());
    }

    void ProcessPendingEvents();


    void DeletePendingEvents();


    bool ProcessThreadEvent(const wxEvent& event);
# 3705 "/usr/include/wx-3.1-unofficial/wx/event.h"
    static void WXConsumeException();
# 3717 "/usr/include/wx-3.1-unofficial/wx/event.h"
    template <typename T>
    void CallAfter(void (T::*method)())
    {
        QueueEvent(
            new wxAsyncMethodCallEvent0<T>(static_cast<T*>(this), method)
        );
    }





    template <typename T, typename T1, typename P1>
    void CallAfter(void (T::*method)(T1 x1), P1 x1)
    {
        QueueEvent(
            new wxAsyncMethodCallEvent1<T, T1>(
                static_cast<T*>(this), method, x1)
        );
    }

    template <typename T, typename T1, typename T2, typename P1, typename P2>
    void CallAfter(void (T::*method)(T1 x1, T2 x2), P1 x1, P2 x2)
    {
        QueueEvent(
            new wxAsyncMethodCallEvent2<T, T1, T2>(
                static_cast<T*>(this), method, x1, x2)
        );
    }

    template <typename T>
    void CallAfter(const T& fn)
    {
        QueueEvent(new wxAsyncMethodCallEventFunctor<T>(this, fn));
    }
# 3769 "/usr/include/wx-3.1-unofficial/wx/event.h"
    void Connect(int winid,
                 int lastId,
                 wxEventType eventType,
                 wxObjectEventFunction func,
                 wxObject *userData = 
# 3773 "/usr/include/wx-3.1-unofficial/wx/event.h" 3 4
                                     __null
# 3773 "/usr/include/wx-3.1-unofficial/wx/event.h"
                                         ,
                 wxEvtHandler *eventSink = 
# 3774 "/usr/include/wx-3.1-unofficial/wx/event.h" 3 4
                                          __null
# 3774 "/usr/include/wx-3.1-unofficial/wx/event.h"
                                              )
    {
        DoBind(winid, lastId, eventType,
                  wxNewEventFunctor(eventType, func, eventSink),
                  userData);
    }


    void Connect(int winid,
                 wxEventType eventType,
                 wxObjectEventFunction func,
                 wxObject *userData = 
# 3785 "/usr/include/wx-3.1-unofficial/wx/event.h" 3 4
                                     __null
# 3785 "/usr/include/wx-3.1-unofficial/wx/event.h"
                                         ,
                 wxEvtHandler *eventSink = 
# 3786 "/usr/include/wx-3.1-unofficial/wx/event.h" 3 4
                                          __null
# 3786 "/usr/include/wx-3.1-unofficial/wx/event.h"
                                              )
        { Connect(winid, wxID_ANY, eventType, func, userData, eventSink); }


    void Connect(wxEventType eventType,
                 wxObjectEventFunction func,
                 wxObject *userData = 
# 3792 "/usr/include/wx-3.1-unofficial/wx/event.h" 3 4
                                     __null
# 3792 "/usr/include/wx-3.1-unofficial/wx/event.h"
                                         ,
                 wxEvtHandler *eventSink = 
# 3793 "/usr/include/wx-3.1-unofficial/wx/event.h" 3 4
                                          __null
# 3793 "/usr/include/wx-3.1-unofficial/wx/event.h"
                                              )
        { Connect(wxID_ANY, wxID_ANY, eventType, func, userData, eventSink); }

    bool Disconnect(int winid,
                    int lastId,
                    wxEventType eventType,
                    wxObjectEventFunction func = 
# 3799 "/usr/include/wx-3.1-unofficial/wx/event.h" 3 4
                                                __null
# 3799 "/usr/include/wx-3.1-unofficial/wx/event.h"
                                                    ,
                    wxObject *userData = 
# 3800 "/usr/include/wx-3.1-unofficial/wx/event.h" 3 4
                                        __null
# 3800 "/usr/include/wx-3.1-unofficial/wx/event.h"
                                            ,
                    wxEvtHandler *eventSink = 
# 3801 "/usr/include/wx-3.1-unofficial/wx/event.h" 3 4
                                             __null
# 3801 "/usr/include/wx-3.1-unofficial/wx/event.h"
                                                 )
    {
        return DoUnbind(winid, lastId, eventType,
                            wxMakeEventFunctor(eventType, func, eventSink),
                            userData );
    }

    bool Disconnect(int winid = wxID_ANY,
                    wxEventType eventType = wxEVT_NULL,
                    wxObjectEventFunction func = 
# 3810 "/usr/include/wx-3.1-unofficial/wx/event.h" 3 4
                                                __null
# 3810 "/usr/include/wx-3.1-unofficial/wx/event.h"
                                                    ,
                    wxObject *userData = 
# 3811 "/usr/include/wx-3.1-unofficial/wx/event.h" 3 4
                                        __null
# 3811 "/usr/include/wx-3.1-unofficial/wx/event.h"
                                            ,
                    wxEvtHandler *eventSink = 
# 3812 "/usr/include/wx-3.1-unofficial/wx/event.h" 3 4
                                             __null
# 3812 "/usr/include/wx-3.1-unofficial/wx/event.h"
                                                 )
        { return Disconnect(winid, wxID_ANY, eventType, func, userData, eventSink); }

    bool Disconnect(wxEventType eventType,
                    wxObjectEventFunction func,
                    wxObject *userData = 
# 3817 "/usr/include/wx-3.1-unofficial/wx/event.h" 3 4
                                        __null
# 3817 "/usr/include/wx-3.1-unofficial/wx/event.h"
                                            ,
                    wxEvtHandler *eventSink = 
# 3818 "/usr/include/wx-3.1-unofficial/wx/event.h" 3 4
                                             __null
# 3818 "/usr/include/wx-3.1-unofficial/wx/event.h"
                                                 )
        { return Disconnect(wxID_ANY, eventType, func, userData, eventSink); }


    template <typename EventTag, typename EventArg>
    void Bind(const EventTag& eventType,
              void (*function)(EventArg &),
              int winid = wxID_ANY,
              int lastId = wxID_ANY,
              wxObject *userData = 
# 3827 "/usr/include/wx-3.1-unofficial/wx/event.h" 3 4
                                  __null
# 3827 "/usr/include/wx-3.1-unofficial/wx/event.h"
                                      )
    {
        DoBind(winid, lastId, eventType,
                  wxNewEventFunctor(eventType, function),
                  userData);
    }


    template <typename EventTag, typename EventArg>
    bool Unbind(const EventTag& eventType,
                void (*function)(EventArg &),
                int winid = wxID_ANY,
                int lastId = wxID_ANY,
                wxObject *userData = 
# 3840 "/usr/include/wx-3.1-unofficial/wx/event.h" 3 4
                                    __null
# 3840 "/usr/include/wx-3.1-unofficial/wx/event.h"
                                        )
    {
        return DoUnbind(winid, lastId, eventType,
                            wxMakeEventFunctor(eventType, function),
                            userData);
    }


    template <typename EventTag, typename Functor>
    void Bind(const EventTag& eventType,
              const Functor &functor,
              int winid = wxID_ANY,
              int lastId = wxID_ANY,
              wxObject *userData = 
# 3853 "/usr/include/wx-3.1-unofficial/wx/event.h" 3 4
                                  __null
# 3853 "/usr/include/wx-3.1-unofficial/wx/event.h"
                                      )
    {
        DoBind(winid, lastId, eventType,
                  wxNewEventFunctor(eventType, functor),
                  userData);
    }


    template <typename EventTag, typename Functor>
    bool Unbind(const EventTag& eventType,
                const Functor &functor,
                int winid = wxID_ANY,
                int lastId = wxID_ANY,
                wxObject *userData = 
# 3866 "/usr/include/wx-3.1-unofficial/wx/event.h" 3 4
                                    __null
# 3866 "/usr/include/wx-3.1-unofficial/wx/event.h"
                                        )
    {
        return DoUnbind(winid, lastId, eventType,
                            wxMakeEventFunctor(eventType, functor),
                            userData);
    }





    template <typename EventTag, typename Class, typename EventArg, typename EventHandler>
    void Bind(const EventTag &eventType,
              void (Class::*method)(EventArg &),
              EventHandler *handler,
              int winid = wxID_ANY,
              int lastId = wxID_ANY,
              wxObject *userData = 
# 3883 "/usr/include/wx-3.1-unofficial/wx/event.h" 3 4
                                  __null
# 3883 "/usr/include/wx-3.1-unofficial/wx/event.h"
                                      )
    {
        DoBind(winid, lastId, eventType,
                  wxNewEventFunctor(eventType, method, handler),
                  userData);
    }

    template <typename EventTag, typename Class, typename EventArg, typename EventHandler>
    bool Unbind(const EventTag &eventType,
                void (Class::*method)(EventArg&),
                EventHandler *handler,
                int winid = wxID_ANY,
                int lastId = wxID_ANY,
                wxObject *userData = 
# 3896 "/usr/include/wx-3.1-unofficial/wx/event.h" 3 4
                                    __null 
# 3896 "/usr/include/wx-3.1-unofficial/wx/event.h"
                                         )
    {
        return DoUnbind(winid, lastId, eventType,
                            wxMakeEventFunctor(eventType, method, handler),
                            userData);
    }


    void SetClientObject( wxClientData *data ) { DoSetClientObject(data); }
    wxClientData *GetClientObject() const { return DoGetClientObject(); }

    void SetClientData( void *data ) { DoSetClientData(data); }
    void *GetClientData() const { return DoGetClientData(); }
# 3920 "/usr/include/wx-3.1-unofficial/wx/event.h"
    static bool ProcessEventIfMatchesId(const wxEventTableEntryBase& tableEntry,
                                        wxEvtHandler *handler,
                                        wxEvent& event);






    wxDynamicEventTableEntry* GetFirstDynamicEntry(size_t& cookie) const;
    wxDynamicEventTableEntry* GetNextDynamicEntry(size_t& cookie) const;

    virtual bool SearchEventTable(wxEventTable& table, wxEvent& event);
    bool SearchDynamicEventTable( wxEvent& event );


    void ClearEventHashTable() { GetEventHashTable().Clear(); }
    void OnSinkDestroyed( wxEvtHandler *sink );


private:
    void DoBind(int winid,
                   int lastId,
                   wxEventType eventType,
                   wxEventFunctor *func,
                   wxObject* userData = 
# 3945 "/usr/include/wx-3.1-unofficial/wx/event.h" 3 4
                                       __null
# 3945 "/usr/include/wx-3.1-unofficial/wx/event.h"
                                           );

    bool DoUnbind(int winid,
                      int lastId,
                      wxEventType eventType,
                      const wxEventFunctor& func,
                      wxObject *userData = 
# 3951 "/usr/include/wx-3.1-unofficial/wx/event.h" 3 4
                                          __null
# 3951 "/usr/include/wx-3.1-unofficial/wx/event.h"
                                              );

    static const wxEventTableEntry sm_eventTableEntries[];

protected:






    virtual bool TryBefore(wxEvent& event);






    bool TryHereOnly(wxEvent& event);



    bool TryBeforeAndHere(wxEvent& event)
    {
        return TryBefore(event) || TryHereOnly(event);
    }





    virtual bool TryAfter(wxEvent& event);
# 3997 "/usr/include/wx-3.1-unofficial/wx/event.h"
    virtual bool OnDynamicBind(wxDynamicEventTableEntry& )
    {
        return true;
    }


    static const wxEventTable sm_eventTable;
    virtual const wxEventTable *GetEventTable() const;

    static wxEventHashTable sm_eventHashTable;
    virtual wxEventHashTable& GetEventHashTable() const;

    wxEvtHandler* m_nextHandler;
    wxEvtHandler* m_previousHandler;

    typedef wxVector<wxDynamicEventTableEntry*> DynamicEvents;
    DynamicEvents* m_dynamicEvents;

    wxList* m_pendingEvents;



    wxCriticalSection m_pendingEventsLock;



    bool m_enabled;







    union
    {
        wxClientData *m_clientObject;
        void *m_clientData;
    };


    wxClientDataType m_clientDataType;


    virtual void DoSetClientObject( wxClientData *data );
    virtual wxClientData *DoGetClientObject() const;

    virtual void DoSetClientData( void *data );
    virtual void *DoGetClientData() const;


    wxEventConnectionRef *FindRefInTrackerList(wxEvtHandler *handler);

private:

    bool DoTryApp(wxEvent& event);


    bool DoTryChain(wxEvent& event);


    static wxEventFilter* ms_filterList;

    private: wxEvtHandler(const wxEvtHandler&) = delete; wxEvtHandler& operator=(const wxEvtHandler&) = delete; public:
# 4060 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic push
# 4060 "/usr/include/wx-3.1-unofficial/wx/event.h"
   
# 4060 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 4060 "/usr/include/wx-3.1-unofficial/wx/event.h"
    virtual wxClassInfo *GetClassInfo() const;
# 4060 "/usr/include/wx-3.1-unofficial/wx/event.h"
#pragma GCC diagnostic pop
# 4060 "/usr/include/wx-3.1-unofficial/wx/event.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};

typedef wxBaseArray<wxEvtHandler *> wxBaseArrayForwxEvtHandlerArray; class wxEvtHandlerArray : public wxBaseArrayForwxEvtHandlerArray { typedef wxBaseArrayForwxEvtHandlerArray Base; public: wxEvtHandlerArray() : Base() { } explicit wxEvtHandlerArray(size_t n) : Base(n) { } wxEvtHandlerArray(size_t n, Base::const_reference v) : Base(n, v) { } template <class InputIterator> wxEvtHandlerArray(InputIterator first, InputIterator last) : Base(first, last) { } };





inline void wxObjectEventFunctor::operator()(wxEvtHandler *handler, wxEvent& event)
{
    wxEvtHandler * const realHandler = m_handler ? m_handler : handler;

    (realHandler->*m_method)(event);
}
# 4083 "/usr/include/wx-3.1-unofficial/wx/event.h"
class wxEventConnectionRef : public wxTrackerNode
{
public:
    wxEventConnectionRef() : m_src(
# 4086 "/usr/include/wx-3.1-unofficial/wx/event.h" 3 4
                                  __null
# 4086 "/usr/include/wx-3.1-unofficial/wx/event.h"
                                      ), m_sink(
# 4086 "/usr/include/wx-3.1-unofficial/wx/event.h" 3 4
                                                __null
# 4086 "/usr/include/wx-3.1-unofficial/wx/event.h"
                                                    ), m_refCount(0) { }
    wxEventConnectionRef(wxEvtHandler *src, wxEvtHandler *sink)
        : m_src(src), m_sink(sink), m_refCount(1)
    {
        m_sink->AddNode(this);
    }


    virtual void OnObjectDestroy( ) override
    {
        if ( m_src )
            m_src->OnSinkDestroyed( m_sink );
        delete this;
    }

    virtual wxEventConnectionRef *ToEventConnection() override { return this; }

    void IncRef() { m_refCount++; }
    void DecRef()
    {
        if ( !--m_refCount )
        {

            if ( m_sink )
                m_sink->RemoveNode(this);
            delete this;
        }
    }

private:
    wxEvtHandler *m_src,
                 *m_sink;
    int m_refCount;

    friend class wxEvtHandler;

    private: wxEventConnectionRef& operator=(const wxEventConnectionRef&) = delete;
};





inline void wxPostEvent(wxEvtHandler *dest, const wxEvent& event)
{
    if ( dest ) {} else { do { if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/event.h", 4131, __FUNCTION__, "\"dest\"", "need an object to post event to"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); return; } struct wxDummyCheckStruct4131;

    dest->AddPendingEvent(event);
}




inline void wxQueueEvent(wxEvtHandler *dest, wxEvent *event)
{
    if ( dest ) {} else { do { if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/event.h", 4141, __FUNCTION__, "\"dest\"", "need an object to queue event for"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); return; } struct wxDummyCheckStruct4141;

    dest->QueueEvent(event);
}

typedef void (wxEvtHandler::*wxEventFunction)(wxEvent&);
typedef void (wxEvtHandler::*wxIdleEventFunction)(wxIdleEvent&);
typedef void (wxEvtHandler::*wxThreadEventFunction)(wxThreadEvent&);
# 4163 "/usr/include/wx-3.1-unofficial/wx/event.h"
class __attribute__ ((visibility("default"))) wxEventBlocker : public wxEvtHandler
{
public:
    wxEventBlocker(wxWindow *win, wxEventType type = ((wxEventType)-1));
    virtual ~wxEventBlocker();

    void Block(wxEventType type)
    {
        m_eventsToBlock.push_back(type);
    }

    virtual bool ProcessEvent(wxEvent& event) override;

protected:
    wxArrayInt m_eventsToBlock;
    wxWindow *m_window;

    private: wxEventBlocker(const wxEventBlocker&) = delete; wxEventBlocker& operator=(const wxEventBlocker&) = delete;
};

typedef void (wxEvtHandler::*wxCommandEventFunction)(wxCommandEvent&);
typedef void (wxEvtHandler::*wxScrollEventFunction)(wxScrollEvent&);
typedef void (wxEvtHandler::*wxScrollWinEventFunction)(wxScrollWinEvent&);
typedef void (wxEvtHandler::*wxSizeEventFunction)(wxSizeEvent&);
typedef void (wxEvtHandler::*wxMoveEventFunction)(wxMoveEvent&);
typedef void (wxEvtHandler::*wxPaintEventFunction)(wxPaintEvent&);
typedef void (wxEvtHandler::*wxNcPaintEventFunction)(wxNcPaintEvent&);
typedef void (wxEvtHandler::*wxEraseEventFunction)(wxEraseEvent&);
typedef void (wxEvtHandler::*wxMouseEventFunction)(wxMouseEvent&);
typedef void (wxEvtHandler::*wxCharEventFunction)(wxKeyEvent&);
typedef void (wxEvtHandler::*wxFocusEventFunction)(wxFocusEvent&);
typedef void (wxEvtHandler::*wxChildFocusEventFunction)(wxChildFocusEvent&);
typedef void (wxEvtHandler::*wxActivateEventFunction)(wxActivateEvent&);
typedef void (wxEvtHandler::*wxMenuEventFunction)(wxMenuEvent&);
typedef void (wxEvtHandler::*wxJoystickEventFunction)(wxJoystickEvent&);
typedef void (wxEvtHandler::*wxDropFilesEventFunction)(wxDropFilesEvent&);
typedef void (wxEvtHandler::*wxInitDialogEventFunction)(wxInitDialogEvent&);
typedef void (wxEvtHandler::*wxSysColourChangedEventFunction)(wxSysColourChangedEvent&);
typedef void (wxEvtHandler::*wxDisplayChangedEventFunction)(wxDisplayChangedEvent&);
typedef void (wxEvtHandler::*wxDPIChangedEventFunction)(wxDPIChangedEvent&);
typedef void (wxEvtHandler::*wxUpdateUIEventFunction)(wxUpdateUIEvent&);
typedef void (wxEvtHandler::*wxCloseEventFunction)(wxCloseEvent&);
typedef void (wxEvtHandler::*wxShowEventFunction)(wxShowEvent&);
typedef void (wxEvtHandler::*wxIconizeEventFunction)(wxIconizeEvent&);
typedef void (wxEvtHandler::*wxMaximizeEventFunction)(wxMaximizeEvent&);
typedef void (wxEvtHandler::*wxNavigationKeyEventFunction)(wxNavigationKeyEvent&);
typedef void (wxEvtHandler::*wxPaletteChangedEventFunction)(wxPaletteChangedEvent&);
typedef void (wxEvtHandler::*wxQueryNewPaletteEventFunction)(wxQueryNewPaletteEvent&);
typedef void (wxEvtHandler::*wxWindowCreateEventFunction)(wxWindowCreateEvent&);
typedef void (wxEvtHandler::*wxWindowDestroyEventFunction)(wxWindowDestroyEvent&);
typedef void (wxEvtHandler::*wxSetCursorEventFunction)(wxSetCursorEvent&);
typedef void (wxEvtHandler::*wxNotifyEventFunction)(wxNotifyEvent&);
typedef void (wxEvtHandler::*wxHelpEventFunction)(wxHelpEvent&);
typedef void (wxEvtHandler::*wxContextMenuEventFunction)(wxContextMenuEvent&);
typedef void (wxEvtHandler::*wxMouseCaptureChangedEventFunction)(wxMouseCaptureChangedEvent&);
typedef void (wxEvtHandler::*wxMouseCaptureLostEventFunction)(wxMouseCaptureLostEvent&);
typedef void (wxEvtHandler::*wxClipboardTextEventFunction)(wxClipboardTextEvent&);
typedef void (wxEvtHandler::*wxPanGestureEventFunction)(wxPanGestureEvent&);
typedef void (wxEvtHandler::*wxZoomGestureEventFunction)(wxZoomGestureEvent&);
typedef void (wxEvtHandler::*wxRotateGestureEventFunction)(wxRotateGestureEvent&);
typedef void (wxEvtHandler::*wxTwoFingerTapEventFunction)(wxTwoFingerTapEvent&);
typedef void (wxEvtHandler::*wxLongPressEventFunction)(wxLongPressEvent&);
typedef void (wxEvtHandler::*wxPressAndTapEventFunction)(wxPressAndTapEvent&);
# 4734 "/usr/include/wx-3.1-unofficial/wx/event.h"
__attribute__ ((visibility("default"))) wxWindow* wxFindFocusDescendant(wxWindow* ancestor);
# 20 "/usr/include/wx-3.1-unofficial/wx/app.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/eventfilter.h" 1
# 13 "/usr/include/wx-3.1-unofficial/wx/eventfilter.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/eventfilter.h" 2

class wxEvent;
class wxEvtHandler;





class wxEventFilter
{
public:




    enum
    {

        Event_Skip = -1,


        Event_Ignore = 0,


        Event_Processed = 1
    };

    wxEventFilter()
    {
        m_next = 
# 43 "/usr/include/wx-3.1-unofficial/wx/eventfilter.h" 3 4
                __null
# 43 "/usr/include/wx-3.1-unofficial/wx/eventfilter.h"
                    ;
    }

    virtual ~wxEventFilter()
    {
        do { if ( !m_next ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/eventfilter.h", 48, __FUNCTION__, "!m_next", "Forgot to call wxEvtHandler::RemoveFilter()?"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );
    }
# 58 "/usr/include/wx-3.1-unofficial/wx/eventfilter.h"
    virtual int FilterEvent(wxEvent& event) = 0;

private:


    wxEventFilter* m_next;


    friend class wxEvtHandler;

    private: wxEventFilter(const wxEventFilter&) = delete; wxEventFilter& operator=(const wxEventFilter&) = delete;
};
# 21 "/usr/include/wx-3.1-unofficial/wx/app.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/build.h" 1
# 22 "/usr/include/wx-3.1-unofficial/wx/app.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/cmdargs.h" 1
# 28 "/usr/include/wx-3.1-unofficial/wx/cmdargs.h"
class __attribute__ ((visibility("default"))) wxCmdLineArgsArray
{
public:
    wxCmdLineArgsArray() { m_argsA = 
# 31 "/usr/include/wx-3.1-unofficial/wx/cmdargs.h" 3 4
                                    __null
# 31 "/usr/include/wx-3.1-unofficial/wx/cmdargs.h"
                                        ; m_argsW = 
# 31 "/usr/include/wx-3.1-unofficial/wx/cmdargs.h" 3 4
                                                    __null
# 31 "/usr/include/wx-3.1-unofficial/wx/cmdargs.h"
                                                        ; }

    template <typename T>
    void Init(int argc, T **argv)
    {
        FreeArgs();

        m_args.clear();
        m_args.reserve(argc);

        for ( int i = 0; i < argc; i++ )
        {
            m_args.push_back(argv[i]);
        }
    }

    operator char**() const
    {
        if ( !m_argsA )
        {
            const size_t count = m_args.size();
            m_argsA = new char *[count + 1];
            for ( size_t n = 0; n < count; n++ )
                m_argsA[n] = wxStrdup(m_args[n].ToAscii());

            m_argsA[count] = 
# 56 "/usr/include/wx-3.1-unofficial/wx/cmdargs.h" 3 4
                            __null
# 56 "/usr/include/wx-3.1-unofficial/wx/cmdargs.h"
                                ;
        }

        return m_argsA;
    }

    operator wchar_t**() const
    {
        if ( !m_argsW )
        {
            const size_t count = m_args.size();
            m_argsW = new wchar_t *[count + 1];
            for ( size_t n = 0; n < count; n++ )
                m_argsW[n] = wxStrdup(m_args[n].wc_str());

            m_argsW[count] = 
# 71 "/usr/include/wx-3.1-unofficial/wx/cmdargs.h" 3 4
                            __null
# 71 "/usr/include/wx-3.1-unofficial/wx/cmdargs.h"
                                ;
        }

        return m_argsW;
    }



    operator bool() const
    {
        return !m_args.empty();
    }


    bool operator!() const
    {
        return m_args.empty();
    }

    wxString operator[](size_t n) const
    {
        return m_args[n];
    }



    wxString operator[](int n) const
    {
        return m_args[n];
    }





    bool IsEmpty() const { return m_args.empty(); }


    const wxArrayString& GetArguments() const { return m_args; }

    ~wxCmdLineArgsArray()
    {
        FreeArgs();
    }

private:
    template <typename T>
    void Free(T**& args)
    {
        if ( !args )
            return;

        const size_t count = m_args.size();
        for ( size_t n = 0; n < count; n++ )
            free(args[n]);

        delete [] args;
        args = 
# 128 "/usr/include/wx-3.1-unofficial/wx/cmdargs.h" 3 4
              __null
# 128 "/usr/include/wx-3.1-unofficial/wx/cmdargs.h"
                  ;
    }

    void FreeArgs()
    {
        Free(m_argsA);
        Free(m_argsW);
    }

    wxArrayString m_args;
    mutable char **m_argsA;
    mutable wchar_t **m_argsW;

    private: wxCmdLineArgsArray(const wxCmdLineArgsArray&) = delete; wxCmdLineArgsArray& operator=(const wxCmdLineArgsArray&) = delete;
};



inline bool operator&&(bool cond, const wxCmdLineArgsArray& array)
{
    return cond && !array.IsEmpty();
}
# 23 "/usr/include/wx-3.1-unofficial/wx/app.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/init.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/init.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/init.h" 2
# 29 "/usr/include/wx-3.1-unofficial/wx/init.h"
extern bool __attribute__ ((visibility("default"))) wxEntryStart(int& argc, wxChar **argv);



extern void __attribute__ ((visibility("default"))) wxEntryCleanup();
# 45 "/usr/include/wx-3.1-unofficial/wx/init.h"
extern int __attribute__ ((visibility("default"))) wxEntry(int& argc, wxChar **argv);




extern bool __attribute__ ((visibility("default"))) wxEntryStart(int& argc, char **argv);
extern int __attribute__ ((visibility("default"))) wxEntry(int& argc, char **argv);
# 69 "/usr/include/wx-3.1-unofficial/wx/init.h"
extern bool __attribute__ ((visibility("default"))) wxInitialize();
extern bool __attribute__ ((visibility("default"))) wxInitialize(int& argc, wxChar **argv);

extern bool __attribute__ ((visibility("default"))) wxInitialize(int& argc, char **argv);




extern void __attribute__ ((visibility("default"))) wxUninitialize();



class __attribute__ ((visibility("default"))) wxInitializer
{
public:

    wxInitializer()
    {
        m_ok = wxInitialize();
    }

    wxInitializer(int& argc, wxChar **argv)
    {
        m_ok = wxInitialize(argc, argv);
    }


    wxInitializer(int& argc, char **argv)
    {
        m_ok = wxInitialize(argc, argv);
    }



    bool IsOk() const { return m_ok; }


    operator bool() const { return m_ok; }


    ~wxInitializer() { if ( m_ok ) wxUninitialize(); }

private:
    bool m_ok;
};
# 24 "/usr/include/wx-3.1-unofficial/wx/app.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/intl.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/intl.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 16 "/usr/include/wx-3.1-unofficial/wx/intl.h" 2

# 1 "/usr/include/wx-3.1-unofficial/wx/translation.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/translation.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 16 "/usr/include/wx-3.1-unofficial/wx/translation.h" 2





# 1 "/usr/include/wx-3.1-unofficial/wx/language.h" 1
# 16 "/usr/include/wx-3.1-unofficial/wx/language.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 17 "/usr/include/wx-3.1-unofficial/wx/language.h" 2
# 32 "/usr/include/wx-3.1-unofficial/wx/language.h"
enum wxLanguage
{

    wxLANGUAGE_DEFAULT,


    wxLANGUAGE_UNKNOWN,

    wxLANGUAGE_ABKHAZIAN,
    wxLANGUAGE_AFAR,
    wxLANGUAGE_AFRIKAANS,
    wxLANGUAGE_ALBANIAN,
    wxLANGUAGE_AMHARIC,
    wxLANGUAGE_ARABIC,
    wxLANGUAGE_ARABIC_ALGERIA,
    wxLANGUAGE_ARABIC_BAHRAIN,
    wxLANGUAGE_ARABIC_EGYPT,
    wxLANGUAGE_ARABIC_IRAQ,
    wxLANGUAGE_ARABIC_JORDAN,
    wxLANGUAGE_ARABIC_KUWAIT,
    wxLANGUAGE_ARABIC_LEBANON,
    wxLANGUAGE_ARABIC_LIBYA,
    wxLANGUAGE_ARABIC_MOROCCO,
    wxLANGUAGE_ARABIC_OMAN,
    wxLANGUAGE_ARABIC_QATAR,
    wxLANGUAGE_ARABIC_SAUDI_ARABIA,
    wxLANGUAGE_ARABIC_SUDAN,
    wxLANGUAGE_ARABIC_SYRIA,
    wxLANGUAGE_ARABIC_TUNISIA,
    wxLANGUAGE_ARABIC_UAE,
    wxLANGUAGE_ARABIC_YEMEN,
    wxLANGUAGE_ARMENIAN,
    wxLANGUAGE_ASSAMESE,
    wxLANGUAGE_ASTURIAN,
    wxLANGUAGE_AYMARA,
    wxLANGUAGE_AZERI,
    wxLANGUAGE_AZERI_CYRILLIC,
    wxLANGUAGE_AZERI_LATIN,
    wxLANGUAGE_BASHKIR,
    wxLANGUAGE_BASQUE,
    wxLANGUAGE_BELARUSIAN,
    wxLANGUAGE_BENGALI,
    wxLANGUAGE_BHUTANI,
    wxLANGUAGE_BIHARI,
    wxLANGUAGE_BISLAMA,
    wxLANGUAGE_BOSNIAN,
    wxLANGUAGE_BRETON,
    wxLANGUAGE_BULGARIAN,
    wxLANGUAGE_BURMESE,
    wxLANGUAGE_CATALAN,
    wxLANGUAGE_CHINESE,
    wxLANGUAGE_CHINESE_SIMPLIFIED,
    wxLANGUAGE_CHINESE_TRADITIONAL,
    wxLANGUAGE_CHINESE_HONGKONG,
    wxLANGUAGE_CHINESE_MACAU,
    wxLANGUAGE_CHINESE_SINGAPORE,
    wxLANGUAGE_CHINESE_TAIWAN,
    wxLANGUAGE_CORSICAN,
    wxLANGUAGE_CROATIAN,
    wxLANGUAGE_CZECH,
    wxLANGUAGE_DANISH,
    wxLANGUAGE_DUTCH,
    wxLANGUAGE_DUTCH_BELGIAN,
    wxLANGUAGE_ENGLISH,
    wxLANGUAGE_ENGLISH_UK,
    wxLANGUAGE_ENGLISH_US,
    wxLANGUAGE_ENGLISH_AUSTRALIA,
    wxLANGUAGE_ENGLISH_BELIZE,
    wxLANGUAGE_ENGLISH_BOTSWANA,
    wxLANGUAGE_ENGLISH_CANADA,
    wxLANGUAGE_ENGLISH_CARIBBEAN,
    wxLANGUAGE_ENGLISH_DENMARK,
    wxLANGUAGE_ENGLISH_EIRE,
    wxLANGUAGE_ENGLISH_ISRAEL,
    wxLANGUAGE_ENGLISH_JAMAICA,
    wxLANGUAGE_ENGLISH_NEW_ZEALAND,
    wxLANGUAGE_ENGLISH_PHILIPPINES,
    wxLANGUAGE_ENGLISH_SOUTH_AFRICA,
    wxLANGUAGE_ENGLISH_TRINIDAD,
    wxLANGUAGE_ENGLISH_ZIMBABWE,
    wxLANGUAGE_ESPERANTO,
    wxLANGUAGE_ESTONIAN,
    wxLANGUAGE_FAEROESE,
    wxLANGUAGE_FARSI,
    wxLANGUAGE_FIJI,
    wxLANGUAGE_FINNISH,
    wxLANGUAGE_FRENCH,
    wxLANGUAGE_FRENCH_BELGIAN,
    wxLANGUAGE_FRENCH_CANADIAN,
    wxLANGUAGE_FRENCH_LUXEMBOURG,
    wxLANGUAGE_FRENCH_MONACO,
    wxLANGUAGE_FRENCH_SWISS,
    wxLANGUAGE_FRISIAN,
    wxLANGUAGE_GALICIAN,
    wxLANGUAGE_GEORGIAN,
    wxLANGUAGE_GERMAN,
    wxLANGUAGE_GERMAN_AUSTRIAN,
    wxLANGUAGE_GERMAN_BELGIUM,
    wxLANGUAGE_GERMAN_LIECHTENSTEIN,
    wxLANGUAGE_GERMAN_LUXEMBOURG,
    wxLANGUAGE_GERMAN_SWISS,
    wxLANGUAGE_GREEK,
    wxLANGUAGE_GREENLANDIC,
    wxLANGUAGE_GUARANI,
    wxLANGUAGE_GUJARATI,
    wxLANGUAGE_HAUSA,
    wxLANGUAGE_HEBREW,
    wxLANGUAGE_HINDI,
    wxLANGUAGE_HUNGARIAN,
    wxLANGUAGE_ICELANDIC,
    wxLANGUAGE_INDONESIAN,
    wxLANGUAGE_INTERLINGUA,
    wxLANGUAGE_INTERLINGUE,
    wxLANGUAGE_INUKTITUT,
    wxLANGUAGE_INUPIAK,
    wxLANGUAGE_IRISH,
    wxLANGUAGE_ITALIAN,
    wxLANGUAGE_ITALIAN_SWISS,
    wxLANGUAGE_JAPANESE,
    wxLANGUAGE_JAVANESE,
    wxLANGUAGE_KABYLE,
    wxLANGUAGE_KANNADA,
    wxLANGUAGE_KASHMIRI,
    wxLANGUAGE_KASHMIRI_INDIA,
    wxLANGUAGE_KAZAKH,
    wxLANGUAGE_KERNEWEK,
    wxLANGUAGE_KHMER,
    wxLANGUAGE_KINYARWANDA,
    wxLANGUAGE_KIRGHIZ,
    wxLANGUAGE_KIRUNDI,
    wxLANGUAGE_KONKANI,
    wxLANGUAGE_KOREAN,
    wxLANGUAGE_KURDISH,
    wxLANGUAGE_LAOTHIAN,
    wxLANGUAGE_LATIN,
    wxLANGUAGE_LATVIAN,
    wxLANGUAGE_LINGALA,
    wxLANGUAGE_LITHUANIAN,
    wxLANGUAGE_MACEDONIAN,
    wxLANGUAGE_MALAGASY,
    wxLANGUAGE_MALAY,
    wxLANGUAGE_MALAYALAM,
    wxLANGUAGE_MALAY_BRUNEI_DARUSSALAM,
    wxLANGUAGE_MALAY_MALAYSIA,
    wxLANGUAGE_MALTESE,
    wxLANGUAGE_MANIPURI,
    wxLANGUAGE_MAORI,
    wxLANGUAGE_MARATHI,
    wxLANGUAGE_MOLDAVIAN,
    wxLANGUAGE_MONGOLIAN,
    wxLANGUAGE_NAURU,
    wxLANGUAGE_NEPALI,
    wxLANGUAGE_NEPALI_INDIA,
    wxLANGUAGE_NORWEGIAN_BOKMAL,
    wxLANGUAGE_NORWEGIAN_NYNORSK,
    wxLANGUAGE_OCCITAN,
    wxLANGUAGE_ORIYA,
    wxLANGUAGE_OROMO,
    wxLANGUAGE_PASHTO,
    wxLANGUAGE_POLISH,
    wxLANGUAGE_PORTUGUESE,
    wxLANGUAGE_PORTUGUESE_BRAZILIAN,
    wxLANGUAGE_PUNJABI,
    wxLANGUAGE_QUECHUA,
    wxLANGUAGE_RHAETO_ROMANCE,
    wxLANGUAGE_ROMANIAN,
    wxLANGUAGE_RUSSIAN,
    wxLANGUAGE_RUSSIAN_UKRAINE,
    wxLANGUAGE_SAMI,
    wxLANGUAGE_SAMOAN,
    wxLANGUAGE_SANGHO,
    wxLANGUAGE_SANSKRIT,
    wxLANGUAGE_SCOTS_GAELIC,
    wxLANGUAGE_SERBIAN,
    wxLANGUAGE_SERBIAN_CYRILLIC,
    wxLANGUAGE_SERBIAN_LATIN,
    wxLANGUAGE_SERBO_CROATIAN,
    wxLANGUAGE_SESOTHO,
    wxLANGUAGE_SETSWANA,
    wxLANGUAGE_SHONA,
    wxLANGUAGE_SINDHI,
    wxLANGUAGE_SINHALESE,
    wxLANGUAGE_SISWATI,
    wxLANGUAGE_SLOVAK,
    wxLANGUAGE_SLOVENIAN,
    wxLANGUAGE_SOMALI,
    wxLANGUAGE_SPANISH,
    wxLANGUAGE_SPANISH_ARGENTINA,
    wxLANGUAGE_SPANISH_BOLIVIA,
    wxLANGUAGE_SPANISH_CHILE,
    wxLANGUAGE_SPANISH_COLOMBIA,
    wxLANGUAGE_SPANISH_COSTA_RICA,
    wxLANGUAGE_SPANISH_DOMINICAN_REPUBLIC,
    wxLANGUAGE_SPANISH_ECUADOR,
    wxLANGUAGE_SPANISH_EL_SALVADOR,
    wxLANGUAGE_SPANISH_GUATEMALA,
    wxLANGUAGE_SPANISH_HONDURAS,
    wxLANGUAGE_SPANISH_MEXICAN,
    wxLANGUAGE_SPANISH_MODERN,
    wxLANGUAGE_SPANISH_NICARAGUA,
    wxLANGUAGE_SPANISH_PANAMA,
    wxLANGUAGE_SPANISH_PARAGUAY,
    wxLANGUAGE_SPANISH_PERU,
    wxLANGUAGE_SPANISH_PUERTO_RICO,
    wxLANGUAGE_SPANISH_URUGUAY,
    wxLANGUAGE_SPANISH_US,
    wxLANGUAGE_SPANISH_VENEZUELA,
    wxLANGUAGE_SUNDANESE,
    wxLANGUAGE_SWAHILI,
    wxLANGUAGE_SWEDISH,
    wxLANGUAGE_SWEDISH_FINLAND,
    wxLANGUAGE_TAGALOG,
    wxLANGUAGE_TAJIK,
    wxLANGUAGE_TAMIL,
    wxLANGUAGE_TATAR,
    wxLANGUAGE_TELUGU,
    wxLANGUAGE_THAI,
    wxLANGUAGE_TIBETAN,
    wxLANGUAGE_TIGRINYA,
    wxLANGUAGE_TONGA,
    wxLANGUAGE_TSONGA,
    wxLANGUAGE_TURKISH,
    wxLANGUAGE_TURKMEN,
    wxLANGUAGE_TWI,
    wxLANGUAGE_UIGHUR,
    wxLANGUAGE_UKRAINIAN,
    wxLANGUAGE_URDU,
    wxLANGUAGE_URDU_INDIA,
    wxLANGUAGE_URDU_PAKISTAN,
    wxLANGUAGE_UZBEK,
    wxLANGUAGE_UZBEK_CYRILLIC,
    wxLANGUAGE_UZBEK_LATIN,
    wxLANGUAGE_VALENCIAN,
    wxLANGUAGE_VIETNAMESE,
    wxLANGUAGE_VOLAPUK,
    wxLANGUAGE_WELSH,
    wxLANGUAGE_WOLOF,
    wxLANGUAGE_XHOSA,
    wxLANGUAGE_YIDDISH,
    wxLANGUAGE_YORUBA,
    wxLANGUAGE_ZHUANG,
    wxLANGUAGE_ZULU,


    wxLANGUAGE_USER_DEFINED,



    wxLANGUAGE_CAMBODIAN = wxLANGUAGE_KHMER
};
# 22 "/usr/include/wx-3.1-unofficial/wx/translation.h" 2


# 1 "/usr/include/wx-3.1-unofficial/wx/scopedptr.h" 1
# 30 "/usr/include/wx-3.1-unofficial/wx/scopedptr.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 31 "/usr/include/wx-3.1-unofficial/wx/scopedptr.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/checkeddelete.h" 1
# 32 "/usr/include/wx-3.1-unofficial/wx/scopedptr.h" 2





template <class T>
class wxScopedPtr
{
public:
    typedef T element_type;

    explicit wxScopedPtr(T * ptr = 
# 43 "/usr/include/wx-3.1-unofficial/wx/scopedptr.h" 3 4
                                  __null
# 43 "/usr/include/wx-3.1-unofficial/wx/scopedptr.h"
                                      ) : m_ptr(ptr) { }

    ~wxScopedPtr() { do { typedef char complete[sizeof(*m_ptr)] __attribute__ ((unused)); delete m_ptr; } while ( (void)0, 0 ); }



    typedef T *(wxScopedPtr<T>::*unspecified_bool_type)() const;

    operator unspecified_bool_type() const
    {
        return m_ptr ? &wxScopedPtr<T>::get : 
# 53 "/usr/include/wx-3.1-unofficial/wx/scopedptr.h" 3 4
                                             __null
# 53 "/usr/include/wx-3.1-unofficial/wx/scopedptr.h"
                                                 ;
    }

    void reset(T * ptr = 
# 56 "/usr/include/wx-3.1-unofficial/wx/scopedptr.h" 3 4
                        __null
# 56 "/usr/include/wx-3.1-unofficial/wx/scopedptr.h"
                            )
    {
        if ( ptr != m_ptr )
        {
            do { typedef char complete[sizeof(*m_ptr)] __attribute__ ((unused)); delete m_ptr; } while ( (void)0, 0 );
            m_ptr = ptr;
        }
    }

    T *release()
    {
        T *ptr = m_ptr;
        m_ptr = 
# 68 "/usr/include/wx-3.1-unofficial/wx/scopedptr.h" 3 4
               __null
# 68 "/usr/include/wx-3.1-unofficial/wx/scopedptr.h"
                   ;
        return ptr;
    }

    T & operator*() const
    {
        do { if ( m_ptr != 
# 74 "/usr/include/wx-3.1-unofficial/wx/scopedptr.h" 3 4
       __null 
# 74 "/usr/include/wx-3.1-unofficial/wx/scopedptr.h"
       ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/scopedptr.h", 74, __FUNCTION__, "m_ptr != __null", (const char*)
# 74 "/usr/include/wx-3.1-unofficial/wx/scopedptr.h" 3 4
       __null
# 74 "/usr/include/wx-3.1-unofficial/wx/scopedptr.h"
       ), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );
        return *m_ptr;
    }

    T * operator->() const
    {
        do { if ( m_ptr != 
# 80 "/usr/include/wx-3.1-unofficial/wx/scopedptr.h" 3 4
       __null 
# 80 "/usr/include/wx-3.1-unofficial/wx/scopedptr.h"
       ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/scopedptr.h", 80, __FUNCTION__, "m_ptr != __null", (const char*)
# 80 "/usr/include/wx-3.1-unofficial/wx/scopedptr.h" 3 4
       __null
# 80 "/usr/include/wx-3.1-unofficial/wx/scopedptr.h"
       ), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );
        return m_ptr;
    }

    T * get() const
    {
        return m_ptr;
    }

    void swap(wxScopedPtr& other)
    {
        T * const tmp = other.m_ptr;
        other.m_ptr = m_ptr;
        m_ptr = tmp;
    }

private:
    T * m_ptr;

    private: wxScopedPtr(const wxScopedPtr<T>&) = delete; wxScopedPtr& operator=(const wxScopedPtr<T>&) = delete;
};
# 25 "/usr/include/wx-3.1-unofficial/wx/translation.h" 2
# 68 "/usr/include/wx-3.1-unofficial/wx/translation.h"
class wxArrayString;
class wxTranslationsLoader;
class wxLocale;

class wxPluralFormsCalculator;
class wxPluralFormsCalculatorPtr { private: wxPluralFormsCalculator * m_ptr; wxPluralFormsCalculatorPtr(wxPluralFormsCalculatorPtr const &); wxPluralFormsCalculatorPtr & operator=(wxPluralFormsCalculatorPtr const &); public: explicit wxPluralFormsCalculatorPtr(wxPluralFormsCalculator * ptr = 
# 73 "/usr/include/wx-3.1-unofficial/wx/translation.h" 3 4
__null
# 73 "/usr/include/wx-3.1-unofficial/wx/translation.h"
) : m_ptr(ptr) { } ~wxPluralFormsCalculatorPtr(); void reset(wxPluralFormsCalculator * ptr = 
# 73 "/usr/include/wx-3.1-unofficial/wx/translation.h" 3 4
__null
# 73 "/usr/include/wx-3.1-unofficial/wx/translation.h"
); wxPluralFormsCalculator *release() { wxPluralFormsCalculator *ptr = m_ptr; m_ptr = 
# 73 "/usr/include/wx-3.1-unofficial/wx/translation.h" 3 4
__null
# 73 "/usr/include/wx-3.1-unofficial/wx/translation.h"
; return ptr; } wxPluralFormsCalculator & operator*() const { do { if ( m_ptr != 
# 73 "/usr/include/wx-3.1-unofficial/wx/translation.h" 3 4
__null 
# 73 "/usr/include/wx-3.1-unofficial/wx/translation.h"
) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/translation.h", 73, __FUNCTION__, "m_ptr != __null", (const char*)
# 73 "/usr/include/wx-3.1-unofficial/wx/translation.h" 3 4
__null
# 73 "/usr/include/wx-3.1-unofficial/wx/translation.h"
), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); return *m_ptr; } wxPluralFormsCalculator * operator->() const { do { if ( m_ptr != 
# 73 "/usr/include/wx-3.1-unofficial/wx/translation.h" 3 4
__null 
# 73 "/usr/include/wx-3.1-unofficial/wx/translation.h"
) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/translation.h", 73, __FUNCTION__, "m_ptr != __null", (const char*)
# 73 "/usr/include/wx-3.1-unofficial/wx/translation.h" 3 4
__null
# 73 "/usr/include/wx-3.1-unofficial/wx/translation.h"
), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); return m_ptr; } wxPluralFormsCalculator * get() const { return m_ptr; } void swap(wxPluralFormsCalculatorPtr & ot) { wxPluralFormsCalculator * tmp = ot.m_ptr; ot.m_ptr = m_ptr; m_ptr = tmp; } };





class __attribute__ ((visibility("default"))) wxMsgCatalog
{
public:
# 90 "/usr/include/wx-3.1-unofficial/wx/translation.h"
    static wxMsgCatalog *CreateFromFile(const wxString& filename,
                                        const wxString& domain);

    static wxMsgCatalog *CreateFromData(const wxScopedCharBuffer& data,
                                        const wxString& domain);


    wxString GetDomain() const { return m_domain; }


    const wxString *GetString(const wxString& sz, unsigned n = 
# 100 "/usr/include/wx-3.1-unofficial/wx/translation.h" 3 4
                                                              (0x7fffffff * 2U + 1U)
# 100 "/usr/include/wx-3.1-unofficial/wx/translation.h"
                                                                      , const wxString& ct = wxEmptyString) const;

protected:
    wxMsgCatalog(const wxString& domain)
        : m_pNext(
# 104 "/usr/include/wx-3.1-unofficial/wx/translation.h" 3 4
                 __null
# 104 "/usr/include/wx-3.1-unofficial/wx/translation.h"
                     ), m_domain(domain)



    {}

private:

    wxMsgCatalog *m_pNext;
    friend class wxTranslations;

    wxStringToStringHashMap m_messages;
    wxString m_domain;







    wxPluralFormsCalculatorPtr m_pluralFormsCalculator;
};






class __attribute__ ((visibility("default"))) wxTranslations
{
public:
    wxTranslations();
    ~wxTranslations();


    static wxTranslations *Get();

    static void Set(wxTranslations *t);


    void SetLoader(wxTranslationsLoader *loader);

    void SetLanguage(wxLanguage lang);
    void SetLanguage(const wxString& lang);


    wxArrayString GetAvailableTranslations(const wxString& domain) const;


    wxString GetBestTranslation(const wxString& domain, wxLanguage msgIdLanguage);
    wxString GetBestTranslation(const wxString& domain,
                                const wxString& msgIdLanguage = wxString::FromAscii("en"));


    bool AddStdCatalog();



    bool AddCatalog(const wxString& domain,
                    wxLanguage msgIdLanguage = wxLANGUAGE_ENGLISH_US);







    bool IsLoaded(const wxString& domain) const;


    const wxString *GetTranslatedString(const wxString& origString,
                                        const wxString& domain = wxEmptyString,
                                        const wxString& context = wxEmptyString) const;
    const wxString *GetTranslatedString(const wxString& origString,
                                        unsigned n,
                                        const wxString& domain = wxEmptyString,
                                        const wxString& context = wxEmptyString) const;

    wxString GetHeaderValue(const wxString& header,
                            const wxString& domain = wxEmptyString) const;




    static const wxString& GetUntranslatedString(const wxString& str);

private:

    bool LoadCatalog(const wxString& domain, const wxString& lang, const wxString& msgIdLang);


    wxMsgCatalog *FindCatalog(const wxString& domain) const;


    static void SetNonOwned(wxTranslations *t);
    friend class wxLocale;

private:
    wxString m_lang;
    wxTranslationsLoader *m_loader;

    wxMsgCatalog *m_pMsgCat;




    class wxMsgCatalogMap_wxImplementation_Pair { public: typedef wxString first_type; typedef wxMsgCatalog * second_type; typedef wxString t1; typedef wxMsgCatalog * t2; typedef const wxString const_t1; typedef const wxMsgCatalog * const_t2; wxMsgCatalogMap_wxImplementation_Pair(const const_t1& f, const const_t2& s) : first(const_cast<t1&>(f)), second(const_cast<t2&>(s)) {} t1 first; t2 second; }; class wxMsgCatalogMap_wxImplementation_KeyEx { typedef wxString key_type; typedef wxMsgCatalogMap_wxImplementation_Pair pair_type; typedef const key_type const_key_type; typedef const pair_type const_pair_type; typedef const_key_type& const_key_reference; typedef const_pair_type& const_pair_reference; public: wxMsgCatalogMap_wxImplementation_KeyEx() { } const_key_reference operator()( const_pair_reference pair ) const { return pair.first; }}; class wxMsgCatalogMap_wxImplementation_HashTable : protected _wxHashTableBase2 { public: typedef wxString key_type; typedef wxMsgCatalogMap_wxImplementation_Pair value_type; typedef wxStringHash hasher; typedef wxStringEqual key_equal; typedef size_t size_type; typedef ptrdiff_t difference_type; typedef value_type* pointer; typedef const value_type* const_pointer; typedef value_type& reference; typedef const value_type& const_reference; typedef const wxString const_key_type; typedef const wxMsgCatalogMap_wxImplementation_Pair const_mapped_type; public: typedef wxMsgCatalogMap_wxImplementation_KeyEx key_extractor; typedef wxMsgCatalogMap_wxImplementation_HashTable Self; protected: _wxHashTable_NodeBase** m_table; size_t m_tableBuckets; size_t m_items; hasher m_hasher; key_equal m_equals; key_extractor m_getKey; public: struct Node:public _wxHashTable_NodeBase { public: Node( const value_type& value ) : m_value( value ) {} Node* next() { return static_cast<Node*>(m_next); } value_type m_value; }; protected: static void DeleteNode( _wxHashTable_NodeBase* node ) { delete static_cast<Node*>(node); } public: class Iterator { public: Node* m_node; Self* m_ht; Iterator() : m_node(
# 210 "/usr/include/wx-3.1-unofficial/wx/translation.h" 3 4
   __null
# 210 "/usr/include/wx-3.1-unofficial/wx/translation.h"
   ), m_ht(
# 210 "/usr/include/wx-3.1-unofficial/wx/translation.h" 3 4
   __null
# 210 "/usr/include/wx-3.1-unofficial/wx/translation.h"
   ) {} Iterator( Node* node, const Self* ht ) : m_node(node), m_ht(const_cast<Self*>(ht)) {} bool operator ==( const Iterator& it ) const { return m_node == it.m_node; } bool operator !=( const Iterator& it ) const { return m_node != it.m_node; } protected: Node* GetNextNode() { size_type bucket = GetBucketForNode(m_ht,m_node); for( size_type i = bucket + 1; i < m_ht->m_tableBuckets; ++i ) { if( m_ht->m_table[i] ) return static_cast<Node*>(m_ht->m_table[i]); } return 
# 210 "/usr/include/wx-3.1-unofficial/wx/translation.h" 3 4
   __null
# 210 "/usr/include/wx-3.1-unofficial/wx/translation.h"
   ; } void PlusPlus() { Node* next = m_node->next(); m_node = next ? next : GetNextNode(); } }; friend class Iterator; public: class iterator : public Iterator { public: iterator() : Iterator() {} iterator( Node* node, Self* ht ) : Iterator( node, ht ) {} iterator& operator++() { PlusPlus(); return *this; } iterator operator++(int) { iterator it=*this;PlusPlus();return it; } reference operator *() const { return m_node->m_value; } pointer operator ->() const { return &(m_node->m_value); } }; class const_iterator : public Iterator { public: const_iterator() : Iterator() {} const_iterator(iterator i) : Iterator(i) {} const_iterator( Node* node, const Self* ht ) : Iterator(node, const_cast<Self*>(ht)) {} const_iterator& operator++() { PlusPlus();return *this; } const_iterator operator++(int) { const_iterator it=*this;PlusPlus();return it; } const_reference operator *() const { return m_node->m_value; } const_pointer operator ->() const { return &(m_node->m_value); } }; wxMsgCatalogMap_wxImplementation_HashTable( size_type sz = 10, const hasher& hfun = hasher(), const key_equal& k_eq = key_equal(), const key_extractor& k_ex = key_extractor() ) : m_tableBuckets( GetNextPrime( (unsigned long) sz ) ), m_items( 0 ), m_hasher( hfun ), m_equals( k_eq ), m_getKey( k_ex ) { m_table = (_wxHashTable_NodeBase**)AllocTable(m_tableBuckets); } wxMsgCatalogMap_wxImplementation_HashTable( const Self& ht ) : m_table(
# 210 "/usr/include/wx-3.1-unofficial/wx/translation.h" 3 4
   __null
# 210 "/usr/include/wx-3.1-unofficial/wx/translation.h"
   ), m_tableBuckets( 0 ), m_items( ht.m_items ), m_hasher( ht.m_hasher ), m_equals( ht.m_equals ), m_getKey( ht.m_getKey ) { HashCopy( ht ); } const Self& operator=( const Self& ht ) { if (&ht != this) { clear(); m_hasher = ht.m_hasher; m_equals = ht.m_equals; m_getKey = ht.m_getKey; m_items = ht.m_items; HashCopy( ht ); } return *this; } ~wxMsgCatalogMap_wxImplementation_HashTable() { clear(); FreeTable(m_table); } hasher hash_funct() { return m_hasher; } key_equal key_eq() { return m_equals; } void clear() { DeleteNodes(m_tableBuckets, m_table, DeleteNode); m_items = 0; } size_type size() const { return m_items; } size_type max_size() const { return size_type(-1); } bool empty() const { return size() == 0; } const_iterator end() const { return const_iterator(
# 210 "/usr/include/wx-3.1-unofficial/wx/translation.h" 3 4
   __null
# 210 "/usr/include/wx-3.1-unofficial/wx/translation.h"
   , this); } iterator end() { return iterator(
# 210 "/usr/include/wx-3.1-unofficial/wx/translation.h" 3 4
   __null
# 210 "/usr/include/wx-3.1-unofficial/wx/translation.h"
   , this); } const_iterator begin() const { return const_iterator(static_cast<Node*>(GetFirstNode(m_tableBuckets, m_table)), this); } iterator begin() { return iterator(static_cast<Node*>(GetFirstNode(m_tableBuckets, m_table)), this); } size_type erase( const const_key_type& key ) { _wxHashTable_NodeBase** node = GetNodePtr(key); if( !node ) return 0; --m_items; _wxHashTable_NodeBase* temp = (*node)->m_next; delete static_cast<Node*>(*node); (*node) = temp; if( never_shrink( m_tableBuckets, m_items ) ) ResizeTable( GetPreviousPrime( (unsigned long) m_tableBuckets ) - 1 ); return 1; } protected: static size_type GetBucketForNode( Self* ht, Node* node ) { return ht->m_hasher( ht->m_getKey( node->m_value ) ) % ht->m_tableBuckets; } static Node* CopyNode( Node* node ) { return new Node( *node ); } Node* GetOrCreateNode( const value_type& value, bool& created ) { const const_key_type& key = m_getKey( value ); size_t bucket = m_hasher( key ) % m_tableBuckets; Node* node = static_cast<Node*>(m_table[bucket]); while( node ) { if( m_equals( m_getKey( node->m_value ), key ) ) { created = false; return node; } node = node->next(); } created = true; return CreateNode( value, bucket); } Node * CreateNode( const value_type& value, size_t bucket ) { Node* node = new Node( value ); node->m_next = m_table[bucket]; m_table[bucket] = node; ++m_items; if( grow_lf70( m_tableBuckets, m_items ) ) ResizeTable( m_tableBuckets ); return node; } void CreateNode( const value_type& value ) { CreateNode(value, m_hasher( m_getKey(value) ) % m_tableBuckets ); } _wxHashTable_NodeBase** GetNodePtr(const const_key_type& key) const { size_t bucket = m_hasher( key ) % m_tableBuckets; _wxHashTable_NodeBase** node = &m_table[bucket]; while( *node ) { if (m_equals(m_getKey(static_cast<Node*>(*node)->m_value), key)) return node; node = &(*node)->m_next; } return 
# 210 "/usr/include/wx-3.1-unofficial/wx/translation.h" 3 4
   __null
# 210 "/usr/include/wx-3.1-unofficial/wx/translation.h"
   ; } Node* GetNode( const const_key_type& key ) const { size_t bucket = m_hasher( key ) % m_tableBuckets; Node* node = static_cast<Node*>(m_table[bucket]); while( node ) { if( m_equals( m_getKey( node->m_value ), key ) ) return node; node = node->next(); } return 
# 210 "/usr/include/wx-3.1-unofficial/wx/translation.h" 3 4
   __null
# 210 "/usr/include/wx-3.1-unofficial/wx/translation.h"
   ; } void ResizeTable( size_t newSize ) { newSize = GetNextPrime( (unsigned long)newSize ); _wxHashTable_NodeBase** srcTable = m_table; size_t srcBuckets = m_tableBuckets; m_table = (_wxHashTable_NodeBase**)AllocTable( newSize ); m_tableBuckets = newSize; CopyHashTable( srcTable, srcBuckets, this, m_table, (BucketFromNode)GetBucketForNode, (ProcessNode)&DummyProcessNode ); FreeTable(srcTable); } void HashCopy( const Self& ht ) { ResizeTable( ht.size() ); CopyHashTable( ht.m_table, ht.m_tableBuckets, (_wxHashTableBase2*)this, m_table, (BucketFromNode)GetBucketForNode, (ProcessNode)CopyNode ); } }; class wxMsgCatalogMap:public wxMsgCatalogMap_wxImplementation_HashTable { public: typedef wxMsgCatalog * mapped_type; class Insert_Result { public: typedef iterator first_type; typedef bool second_type; typedef iterator t1; typedef bool t2; typedef const iterator const_t1; typedef const bool const_t2; Insert_Result(const const_t1& f, const const_t2& s) : first(const_cast<t1&>(f)), second(const_cast<t2&>(s)) {} t1 first; t2 second; }; explicit wxMsgCatalogMap( size_type hint = 100, hasher hf = hasher(), key_equal eq = key_equal() ) : wxMsgCatalogMap_wxImplementation_HashTable( hint, hf, eq, wxMsgCatalogMap_wxImplementation_KeyEx() ) {} mapped_type& operator[]( const const_key_type& key ) { bool created; return GetOrCreateNode( wxMsgCatalogMap_wxImplementation_Pair( key, mapped_type() ), created)->m_value.second; } const_iterator find( const const_key_type& key ) const { return const_iterator( GetNode( key ), this ); } iterator find( const const_key_type& key ) { return iterator( GetNode( key ), this ); } Insert_Result insert( const value_type& v ) { bool created; Node *node = GetOrCreateNode( wxMsgCatalogMap_wxImplementation_Pair( v.first, v.second ), created); return Insert_Result(iterator(node, this), created); } size_type erase( const key_type& k ) { return wxMsgCatalogMap_wxImplementation_HashTable::erase( k ); } void erase( const iterator& it ) { erase( (*it).first ); } size_type count( const const_key_type& key ) { return GetNode( key ) ? 1u : 0u; } };
    wxMsgCatalogMap m_catalogMap;
};



class __attribute__ ((visibility("default"))) wxTranslationsLoader
{
public:
    wxTranslationsLoader() {}
    virtual ~wxTranslationsLoader() {}

    virtual wxMsgCatalog *LoadCatalog(const wxString& domain,
                                      const wxString& lang) = 0;

    virtual wxArrayString GetAvailableTranslations(const wxString& domain) const = 0;
};



class __attribute__ ((visibility("default"))) wxFileTranslationsLoader
    : public wxTranslationsLoader
{
public:
    static void AddCatalogLookupPathPrefix(const wxString& prefix);

    virtual wxMsgCatalog *LoadCatalog(const wxString& domain,
                                      const wxString& lang) override;

    virtual wxArrayString GetAvailableTranslations(const wxString& domain) const override;
};
# 269 "/usr/include/wx-3.1-unofficial/wx/translation.h"
inline const wxString& wxGetTranslation(const wxString& str,
                                        const wxString& domain = wxString(),
                                        const wxString& context = wxString())
{
    wxTranslations *trans = wxTranslations::Get();
    const wxString *transStr = trans ? trans->GetTranslatedString(str, domain, context)
                                     : 
# 275 "/usr/include/wx-3.1-unofficial/wx/translation.h" 3 4
                                      __null
# 275 "/usr/include/wx-3.1-unofficial/wx/translation.h"
                                          ;
    if ( transStr )
        return *transStr;
    else


        return wxTranslations::GetUntranslatedString(str);
}

inline const wxString& wxGetTranslation(const wxString& str1,
                                        const wxString& str2,
                                        unsigned n,
                                        const wxString& domain = wxString(),
                                        const wxString& context = wxString())
{
    wxTranslations *trans = wxTranslations::Get();
    const wxString *transStr = trans ? trans->GetTranslatedString(str1, n, domain, context)
                                     : 
# 292 "/usr/include/wx-3.1-unofficial/wx/translation.h" 3 4
                                      __null
# 292 "/usr/include/wx-3.1-unofficial/wx/translation.h"
                                          ;
    if ( transStr )
        return *transStr;
    else


        return n == 1
               ? wxTranslations::GetUntranslatedString(str1)
               : wxTranslations::GetUntranslatedString(str2);
}
# 18 "/usr/include/wx-3.1-unofficial/wx/intl.h" 2




enum wxLayoutDirection
{
    wxLayout_Default,
    wxLayout_LeftToRight,
    wxLayout_RightToLeft
};
# 46 "/usr/include/wx-3.1-unofficial/wx/intl.h"
class wxLocale;
class wxLanguageInfoArray;
# 58 "/usr/include/wx-3.1-unofficial/wx/intl.h"
struct __attribute__ ((visibility("default"))) wxLanguageInfo
{
    int Language;
    wxString CanonicalName;




    wxString Description;
    wxLayoutDirection LayoutDirection;
# 77 "/usr/include/wx-3.1-unofficial/wx/intl.h"
    wxString GetLocaleName() const;






    const char* TrySetLocale() const;
};





enum wxLocaleCategory
{

    wxLOCALE_CAT_NUMBER,


    wxLOCALE_CAT_DATE,


    wxLOCALE_CAT_MONEY,



    wxLOCALE_CAT_DEFAULT,

    wxLOCALE_CAT_MAX
};





enum wxLocaleInfo
{

    wxLOCALE_THOUSANDS_SEP,


    wxLOCALE_DECIMAL_POINT,






    wxLOCALE_SHORT_DATE_FMT,
    wxLOCALE_LONG_DATE_FMT,
    wxLOCALE_DATE_TIME_FMT,
    wxLOCALE_TIME_FMT

};






enum wxLocaleInitFlags
{
    wxLOCALE_DONT_LOAD_DEFAULT = 0x0000,
    wxLOCALE_LOAD_DEFAULT = 0x0001




};

class __attribute__ ((visibility("default"))) wxLocale
{
public:




    wxLocale() { DoCommonInit(); }


    wxLocale(const wxString& name,
             const wxString& shortName = wxEmptyString,
             const wxString& locale = wxEmptyString,
             bool bLoadDefault = true



             )
        {
            DoCommonInit();




            Init(name, shortName, locale, bLoadDefault);

        }

    wxLocale(int language,
             int flags = wxLOCALE_LOAD_DEFAULT)
        {
            DoCommonInit();

            Init(language, flags);
        }


    bool Init(const wxString& name,
              const wxString& shortName = wxEmptyString,
              const wxString& locale = wxEmptyString,
              bool bLoadDefault = true



              );


    bool Init(int language = wxLANGUAGE_DEFAULT,
              int flags = wxLOCALE_LOAD_DEFAULT);


    virtual ~wxLocale();



    static int GetSystemLanguage();



    static wxFontEncoding GetSystemEncoding();



    static wxString GetSystemEncodingName();



    static wxString GetInfo(wxLocaleInfo index,
                            wxLocaleCategory cat = wxLOCALE_CAT_DEFAULT);
# 226 "/usr/include/wx-3.1-unofficial/wx/intl.h"
    static wxString GetOSInfo(wxLocaleInfo index,
                              wxLocaleCategory cat = wxLOCALE_CAT_DEFAULT);


    bool IsOk() const { return m_pszOldLocale != 
# 230 "/usr/include/wx-3.1-unofficial/wx/intl.h" 3 4
                                                __null
# 230 "/usr/include/wx-3.1-unofficial/wx/intl.h"
                                                    ; }


    const wxString& GetLocale() const { return m_strLocale; }


    int GetLanguage() const { return m_language; }


    wxString GetSysName() const;




    wxString GetCanonicalName() const { return m_strShort; }






    static void AddCatalogLookupPathPrefix(const wxString& prefix)
        { wxFileTranslationsLoader::AddCatalogLookupPathPrefix(prefix); }
# 261 "/usr/include/wx-3.1-unofficial/wx/intl.h"
    bool AddCatalog(const wxString& domain);
    bool AddCatalog(const wxString& domain, wxLanguage msgIdLanguage);
    bool AddCatalog(const wxString& domain,
                    wxLanguage msgIdLanguage, const wxString& msgIdCharset);


    static bool IsAvailable(int lang);


    bool IsLoaded(const wxString& domain) const;




    static const wxLanguageInfo *GetLanguageInfo(int lang);



    static wxString GetLanguageName(int lang);



    static wxString GetLanguageCanonicalName(int lang);






    static const wxLanguageInfo *FindLanguageInfo(const wxString& locale);




    static void AddLanguage(const wxLanguageInfo& info);
# 308 "/usr/include/wx-3.1-unofficial/wx/intl.h"
    const wxString& GetString(const wxString& origString,
                              const wxString& domain = wxEmptyString) const
    {
        return wxGetTranslation(origString, domain);
    }

    const wxString& GetString(const wxString& origString,
                              const wxString& origString2,
                              unsigned n,
                              const wxString& domain = wxEmptyString) const
    {
        return wxGetTranslation(origString, origString2, n, domain);
    }


    const wxString& GetName() const { return m_strShort; }


    wxString GetHeaderValue(const wxString& header,
                            const wxString& domain = wxEmptyString) const;




    static void CreateLanguagesDB();
    static void DestroyLanguagesDB();

private:


    void DoInit(const wxString& name,
                const wxString& shortName,
                int language);



    static void InitLanguagesDB();


    void DoCommonInit();






    bool DoCommonPostInit(bool success,
                          const wxString& name,
                          const wxString& shortName,
                          bool bLoadDefault);


    wxString m_strLocale,
                   m_strShort;
    int m_language;

    const char *m_pszOldLocale;
    wxLocale *m_pOldLocale;

    bool m_initialized;

    wxTranslations m_translations;

    static wxLanguageInfoArray *ms_languagesDB;

    private: wxLocale(const wxLocale&) = delete; wxLocale& operator=(const wxLocale&) = delete;
};






extern __attribute__ ((visibility("default"))) wxLocale* wxGetLocale();
# 25 "/usr/include/wx-3.1-unofficial/wx/app.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/log.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/log.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/log.h" 2







typedef unsigned long wxLogLevel;
# 50 "/usr/include/wx-3.1-unofficial/wx/log.h"
class wxObject;


    class wxFrame;
# 65 "/usr/include/wx-3.1-unofficial/wx/log.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/time.h" 1
# 16 "/usr/include/wx-3.1-unofficial/wx/time.h"
__attribute__ ((visibility("default"))) int wxGetTimeZone();


extern long __attribute__ ((visibility("default"))) wxGetLocalTime();


extern long __attribute__ ((visibility("default"))) wxGetUTCTime();


    typedef wxLongLong wxMilliClock_t;
    inline long wxMilliClockToLong(wxLongLong ll) { return ll.ToLong(); }






extern wxMilliClock_t __attribute__ ((visibility("default"))) wxGetLocalTimeMillis();




wxLongLong __attribute__ ((visibility("default"))) wxGetUTCTimeMillis();
wxLongLong __attribute__ ((visibility("default"))) wxGetUTCTimeUSec();
# 66 "/usr/include/wx-3.1-unofficial/wx/log.h" 2
# 95 "/usr/include/wx-3.1-unofficial/wx/log.h"
    extern __attribute__ ((visibility("default"))) const char * wxLOG_COMPONENT;
# 107 "/usr/include/wx-3.1-unofficial/wx/log.h"
enum wxLogLevelValues
{
    wxLOG_FatalError,
    wxLOG_Error,
    wxLOG_Warning,
    wxLOG_Message,
    wxLOG_Status,
    wxLOG_Info,
    wxLOG_Debug,
    wxLOG_Trace,
    wxLOG_Progress,
    wxLOG_User = 100,
    wxLOG_Max = 10000
};
# 135 "/usr/include/wx-3.1-unofficial/wx/log.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/iosfwrap.h" 1
# 136 "/usr/include/wx-3.1-unofficial/wx/log.h" 2





class wxLogRecordInfo
{
public:

    wxLogRecordInfo()
    {
        memset(this, 0, sizeof(*this));
    }



    wxLogRecordInfo(const char *filename_,
                    int line_,
                    const char *func_,
                    const char *component_)
    {
        filename = filename_;
        func = func_;
        line = line_;
        component = component_;




        timestampMS = 0;

        timestamp = 0;



        threadId = wxThread::GetCurrentId();


        m_data = 
# 174 "/usr/include/wx-3.1-unofficial/wx/log.h" 3 4
                __null
# 174 "/usr/include/wx-3.1-unofficial/wx/log.h"
                    ;
    }


    wxLogRecordInfo(const wxLogRecordInfo& other)
    {
        Copy(other);
    }

    wxLogRecordInfo& operator=(const wxLogRecordInfo& other)
    {
        if ( &other != this )
        {
            delete m_data;
            Copy(other);
        }

        return *this;
    }


    ~wxLogRecordInfo()
    {
        delete m_data;
    }




    const char *filename;
    int line;



    const char *func;



    const char *component;


    long long timestampMS;



    time_t timestamp;




    wxThreadIdType threadId;






    void StoreValue(const wxString& key, wxUIntPtr val)
    {
        if ( !m_data )
            m_data = new ExtraData;

        m_data->numValues[key] = val;
    }

    void StoreValue(const wxString& key, const wxString& val)
    {
        if ( !m_data )
            m_data = new ExtraData;

        m_data->strValues[key] = val;
    }




    bool GetNumValue(const wxString& key, wxUIntPtr *val) const
    {
        if ( !m_data )
            return false;

        const wxStringToNumHashMap::const_iterator it = m_data->numValues.find(key);
        if ( it == m_data->numValues.end() )
            return false;

        *val = it->second;

        return true;
    }

    bool GetStrValue(const wxString& key, wxString *val) const
    {
        if ( !m_data )
            return false;

        const wxStringToStringHashMap::const_iterator it = m_data->strValues.find(key);
        if ( it == m_data->strValues.end() )
            return false;

        *val = it->second;

        return true;
    }

private:
    void Copy(const wxLogRecordInfo& other)
    {
        memcpy(this, &other, sizeof(*this));
        if ( other.m_data )
           m_data = new ExtraData(*other.m_data);
    }




    struct ExtraData
    {
        wxStringToNumHashMap numValues;
        wxStringToStringHashMap strValues;
    };


    ExtraData *m_data;
};







struct wxLogRecord
{
    wxLogRecord(wxLogLevel level_,
                const wxString& msg_,
                const wxLogRecordInfo& info_)
        : level(level_),
          msg(msg_),
          info(info_)
    {
    }

    wxLogLevel level;
    wxString msg;
    wxLogRecordInfo info;
};





class __attribute__ ((visibility("default"))) wxLogFormatter
{
public:

    wxLogFormatter() { }


    virtual ~wxLogFormatter() { }





    virtual wxString Format(wxLogLevel level,
                            const wxString& msg,
                            const wxLogRecordInfo& info) const;

protected:


    virtual wxString FormatTimeMS(long long msec) const;



    virtual wxString FormatTime(time_t t) const;

};







class __attribute__ ((visibility("default"))) wxLog
{
public:

    wxLog() : m_formatter(new wxLogFormatter) { }


    virtual ~wxLog();
# 377 "/usr/include/wx-3.1-unofficial/wx/log.h"
    static bool IsEnabled()
    {

        if ( !wxThread::IsMain() )
            return IsThreadLoggingEnabled();


        return ms_doLog;
    }


    static bool EnableLogging(bool enable = true)
    {

        if ( !wxThread::IsMain() )
            return EnableThreadLogging(enable);


        const bool doLogOld = ms_doLog;
        ms_doLog = enable;
        return doLogOld;
    }


    static wxLogLevel GetLogLevel() { return ms_logLevel; }


    static void SetLogLevel(wxLogLevel logLevel) { ms_logLevel = logLevel; }


    static void SetComponentLevel(const wxString& component, wxLogLevel level);



    static wxLogLevel GetComponentLevel(const wxString& component);





    static bool IsLevelEnabled(wxLogLevel level, const wxString& component)
    {
        return IsEnabled() && level <= GetComponentLevel(component);
    }







    static void SetVerbose(bool bVerbose = true) { ms_bVerbose = bVerbose; }


    static bool GetVerbose() { return ms_bVerbose; }
# 440 "/usr/include/wx-3.1-unofficial/wx/log.h"
    virtual void Flush();



    static void FlushActive();



    static wxLog *GetActiveTarget();


    static wxLog *SetActiveTarget(wxLog *logger);




    static wxLog *SetThreadActiveTarget(wxLog *logger);





    static void Suspend() { ms_suspendCount++; }


    static void Resume() { ms_suspendCount--; }



    static void DontCreateOnDemand();


    static void DoCreateOnDemand();



    static void SetRepetitionCounting(bool bRepetCounting = true)
        { ms_bRepetCounting = bRepetCounting; }


    static bool GetRepetitionCounting() { return ms_bRepetCounting; }


    static void AddTraceMask(const wxString& str);


    static void RemoveTraceMask(const wxString& str);


    static void ClearTraceMasks();



    static const wxArrayString& GetTraceMasks();


    static bool IsAllowedTraceMask(const wxString& mask);
# 506 "/usr/include/wx-3.1-unofficial/wx/log.h"
    wxLogFormatter* SetFormatter(wxLogFormatter* formatter);
# 518 "/usr/include/wx-3.1-unofficial/wx/log.h"
    static void SetTimestamp(const wxString& ts) { ms_timestamp = ts; }


    static void DisableTimestamp() { SetTimestamp(wxEmptyString); }



    static const wxString& GetTimestamp() { return ms_timestamp; }
# 534 "/usr/include/wx-3.1-unofficial/wx/log.h"
    static void TimeStamp(wxString *str);
    static void TimeStamp(wxString *str, time_t t);
    static void TimeStampMS(wxString *str, long long msec);




    void LogRecord(wxLogLevel level,
                   const wxString& msg,
                   const wxLogRecordInfo& info)
    {
        DoLogRecord(level, msg, info);
    }

    void LogTextAtLevel(wxLogLevel level, const wxString& msg)
    {
        DoLogTextAtLevel(level, msg);
    }

    void LogText(const wxString& msg)
    {
        DoLogText(msg);
    }



    static void OnLog(wxLogLevel level,
                      const wxString& msg,
                      const wxLogRecordInfo& info);




    static void OnLog(wxLogLevel level, const wxString& msg, time_t t);


    static void OnLog(wxLogLevel level, const wxString& msg)
    {
        OnLog(level, msg, time(
# 572 "/usr/include/wx-3.1-unofficial/wx/log.h" 3 4
                              __null
# 572 "/usr/include/wx-3.1-unofficial/wx/log.h"
                                  ));
    }



    bool HasPendingMessages() const { return true; }
# 589 "/usr/include/wx-3.1-unofficial/wx/log.h"
protected:







    virtual void DoLogRecord(wxLogLevel level,
                             const wxString& msg,
                             const wxLogRecordInfo& info);




    virtual void DoLogTextAtLevel(wxLogLevel level, const wxString& msg);





    virtual void DoLogText(const wxString& msg);
# 644 "/usr/include/wx-3.1-unofficial/wx/log.h"
    unsigned LogLastRepeatIfNeeded();

private:



    void FlushThreadMessages();



    static bool IsThreadLoggingEnabled();
    static bool EnableThreadLogging(bool enable = true);







    static wxLog *GetMainThreadActiveTarget();




    void CallDoLogNow(wxLogLevel level,
                      const wxString& msg,
                      const wxLogRecordInfo& info);





    wxLogFormatter *m_formatter;







    static bool ms_bRepetCounting;

    static wxLog *ms_pLogger;
    static bool ms_doLog;
    static bool ms_bAutoCreate;
    static bool ms_bVerbose;

    static wxLogLevel ms_logLevel;

    static size_t ms_suspendCount;



    static wxString ms_timestamp;





    private: wxLog(const wxLog&) = delete; wxLog& operator=(const wxLog&) = delete;
};







class __attribute__ ((visibility("default"))) wxLogBuffer : public wxLog
{
public:
    wxLogBuffer() { }


    const wxString& GetBuffer() const { return m_str; }



    virtual void Flush() override;

protected:
    virtual void DoLogTextAtLevel(wxLogLevel level, const wxString& msg) override;

private:
    wxString m_str;

    private: wxLogBuffer(const wxLogBuffer&) = delete; wxLogBuffer& operator=(const wxLogBuffer&) = delete;
};



class __attribute__ ((visibility("default"))) wxLogStderr : public wxLog,
                                     protected wxMessageOutputStderr
{
public:

    wxLogStderr(FILE *fp = 
# 740 "/usr/include/wx-3.1-unofficial/wx/log.h" 3 4
                          __null
# 740 "/usr/include/wx-3.1-unofficial/wx/log.h"
                              ,
                const wxMBConv &conv = wxGet_wxConvWhateverWorks());

protected:

    virtual void DoLogText(const wxString& msg) override;

    private: wxLogStderr(const wxLogStderr&) = delete; wxLogStderr& operator=(const wxLogStderr&) = delete;
};




class __attribute__ ((visibility("default"))) wxLogStream : public wxLog,
                                     private wxMessageOutputWithConv
{
public:

    wxLogStream(std:: ostream *ostr = (std:: ostream *) 
# 758 "/usr/include/wx-3.1-unofficial/wx/log.h" 3 4
                                                       __null
# 758 "/usr/include/wx-3.1-unofficial/wx/log.h"
                                                           ,
                const wxMBConv& conv = wxGet_wxConvWhateverWorks());

protected:

    virtual void DoLogText(const wxString& msg) override;


    std:: ostream *m_ostr;

    private: wxLogStream(const wxLogStream&) = delete; wxLogStream& operator=(const wxLogStream&) = delete;
};
# 793 "/usr/include/wx-3.1-unofficial/wx/log.h"
class __attribute__ ((visibility("default"))) wxLogNull
{
public:
    wxLogNull() : m_flagOld(wxLog::EnableLogging(false)) { }
    ~wxLogNull() { (void)wxLog::EnableLogging(m_flagOld); }

private:
    bool m_flagOld;
};
# 812 "/usr/include/wx-3.1-unofficial/wx/log.h"
class __attribute__ ((visibility("default"))) wxLogChain : public wxLog
{
public:
    wxLogChain(wxLog *logger);
    virtual ~wxLogChain();


    void SetLog(wxLog *logger);



    void PassMessages(bool bDoPass) { m_bPassMessages = bDoPass; }


    bool IsPassingMessages() const { return m_bPassMessages; }


    wxLog *GetOldLog() const { return m_logOld; }


    virtual void Flush() override;


    void DetachOldLog() { m_logOld = 
# 835 "/usr/include/wx-3.1-unofficial/wx/log.h" 3 4
                                    __null
# 835 "/usr/include/wx-3.1-unofficial/wx/log.h"
                                        ; }

protected:

    virtual void DoLogRecord(wxLogLevel level,
                             const wxString& msg,
                             const wxLogRecordInfo& info) override;

private:

    wxLog *m_logNew;


    wxLog *m_logOld;


    bool m_bPassMessages;

    private: wxLogChain(const wxLogChain&) = delete; wxLogChain& operator=(const wxLogChain&) = delete;
};





class __attribute__ ((visibility("default"))) wxLogInterposer : public wxLogChain
{
public:
    wxLogInterposer();

private:
    private: wxLogInterposer(const wxLogInterposer&) = delete; wxLogInterposer& operator=(const wxLogInterposer&) = delete;
};




class __attribute__ ((visibility("default"))) wxLogInterposerTemp : public wxLogChain
{
public:
    wxLogInterposerTemp();

private:
    private: wxLogInterposerTemp(const wxLogInterposerTemp&) = delete; wxLogInterposerTemp& operator=(const wxLogInterposerTemp&) = delete;
};



# 1 "/usr/include/wx-3.1-unofficial/wx/generic/logg.h" 1
# 16 "/usr/include/wx-3.1-unofficial/wx/generic/logg.h"
class wxTextCtrl;
class wxLogFrame;
class wxWindow;
# 29 "/usr/include/wx-3.1-unofficial/wx/generic/logg.h"
class __attribute__ ((visibility("default"))) wxLogTextCtrl : public wxLog
{
public:
    wxLogTextCtrl(wxTextCtrl *pTextCtrl);

protected:

    virtual void DoLogText(const wxString& msg) override;

private:

    wxTextCtrl *m_pTextCtrl;

    private: wxLogTextCtrl(const wxLogTextCtrl&) = delete; wxLogTextCtrl& operator=(const wxLogTextCtrl&) = delete;
};
# 53 "/usr/include/wx-3.1-unofficial/wx/generic/logg.h"
class __attribute__ ((visibility("default"))) wxLogGui : public wxLog
{
public:

    wxLogGui();


    virtual void Flush() override;

protected:
    virtual void DoLogRecord(wxLogLevel level,
                             const wxString& msg,
                             const wxLogRecordInfo& info) override;



    wxString GetTitle() const;



    int GetSeverityIcon() const;


    void Clear();


    wxArrayString m_aMessages;
    wxArrayInt m_aSeverity;
    wxArrayLong m_aTimes;
    bool m_bErrors,
                  m_bWarnings,
                  m_bHasMessages;

private:


    virtual void DoShowSingleLogMessage(const wxString& message,
                                        const wxString& title,
                                        int style);


    virtual void DoShowMultipleLogMessages(const wxArrayString& messages,
                                           const wxArrayInt& severities,
                                           const wxArrayLong& times,
                                           const wxString& title,
                                           int style);
};
# 112 "/usr/include/wx-3.1-unofficial/wx/generic/logg.h"
class __attribute__ ((visibility("default"))) wxLogWindow : public wxLogInterposer
{
public:
    wxLogWindow(wxWindow *pParent,
                const wxString& szTitle,
                bool bShow = true,
                bool bPassToOld = true);

    virtual ~wxLogWindow();



    void Show(bool bShow = true);

    wxFrame *GetFrame() const;






    virtual bool OnFrameClose(wxFrame *frame);


    virtual void OnFrameDelete(wxFrame *frame);

protected:
    virtual void DoLogTextAtLevel(wxLogLevel level, const wxString& msg) override;

private:
    wxLogFrame *m_pLogFrame;

    private: wxLogWindow(const wxLogWindow&) = delete; wxLogWindow& operator=(const wxLogWindow&) = delete;
};
# 884 "/usr/include/wx-3.1-unofficial/wx/log.h" 2
# 897 "/usr/include/wx-3.1-unofficial/wx/log.h"
class wxLogger
{
public:

    wxLogger(wxLogLevel level,
             const char *filename,
             int line,
             const char *func,
             const char *component)
        : m_level(level),
          m_info(filename, line, func, component)
    {
    }



    template <typename T>
    wxLogger& Store(const wxString& key, T val)
    {
        m_info.StoreValue(key, val);
        return *this;
    }





    wxLogger& MaybeStore(const wxString& key, wxUIntPtr value = 0)
    {
        do { if ( m_optKey.empty() ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/log.h", 926, __FUNCTION__, "m_optKey.empty()", "can only have one optional value"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );
        m_optKey = key;

        m_info.StoreValue(key, value);
        return *this;
    }






    void LogV(const wxString& format, va_list argptr)
    {

        if ( m_level == wxLOG_FatalError ||
                wxLog::IsLevelEnabled(m_level, wxString::FromAscii(m_info.component)) )
            DoCallOnLog(format, argptr);
    }



    void LogV(long num, const wxString& format, va_list argptr)
    {
        Store(m_optKey, num);

        LogV(format, argptr);
    }

    void LogV(void *ptr, const wxString& format, va_list argptr)
    {
        Store(m_optKey, wxPtrToUInt(ptr));

        LogV(format, argptr);
    }

    void LogVTrace(const wxString& mask, const wxString& format, va_list argptr)
    {
        if ( !wxLog::IsAllowedTraceMask(mask) )
            return;

        Store(wxString::FromAscii("wx.trace_mask"), mask);

        LogV(format, argptr);
    }
# 979 "/usr/include/wx-3.1-unofficial/wx/log.h"
    inline void Log(const wxFormatString& f1) { DoLog(f1); } template<typename T1> void Log(const wxFormatString& f1, T1 a1) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoLog(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get()); } template<typename T1, typename T2> void Log(const wxFormatString& f1, T1 a1, T2 a2) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoLog(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get()); } template<typename T1, typename T2, typename T3> void Log(const wxFormatString& f1, T1 a1, T2 a2, T3 a3) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoLog(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get()); } template<typename T1, typename T2, typename T3, typename T4> void Log(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoLog(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5> void Log(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoLog(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void Log(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoLog(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void Log(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoLog(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8> void Log(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoLog(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> void Log(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoLog(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10> void Log(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoLog(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11> void Log(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoLog(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12> void Log(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoLog(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13> void Log(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoLog(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14> void Log(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoLog(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15> void Log(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoLog(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16> void Log(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoLog(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17> void Log(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoLog(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18> void Log(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoLog(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19> void Log(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoLog(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20> void Log(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoLog(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21> void Log(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoLog(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22> void Log(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoLog(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23> void Log(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoLog(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24> void Log(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoLog(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25> void Log(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoLog(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26> void Log(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoLog(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27> void Log(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoLog(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28> void Log(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoLog(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29> void Log(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoLog(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get(), wxArgNormalizerWchar<T29>(a29, fmt, 29).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29, typename T30> void Log(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29, T30 a30) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoLog(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get(), wxArgNormalizerWchar<T29>(a29, fmt, 29).get(), wxArgNormalizerWchar<T30>(a30, fmt, 30).get()); }
# 990 "/usr/include/wx-3.1-unofficial/wx/log.h"
    inline void Log(long f1, const wxFormatString& f2) { DoLogWithNum(f1, f2); } template<typename T1> void Log(long f1, const wxFormatString& f2, T1 a1) { typedef long TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogWithNum(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get()); } template<typename T1, typename T2> void Log(long f1, const wxFormatString& f2, T1 a1, T2 a2) { typedef long TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogWithNum(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get()); } template<typename T1, typename T2, typename T3> void Log(long f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3) { typedef long TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogWithNum(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get()); } template<typename T1, typename T2, typename T3, typename T4> void Log(long f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4) { typedef long TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogWithNum(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5> void Log(long f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5) { typedef long TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogWithNum(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void Log(long f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6) { typedef long TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogWithNum(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void Log(long f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7) { typedef long TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogWithNum(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8> void Log(long f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8) { typedef long TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogWithNum(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> void Log(long f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9) { typedef long TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogWithNum(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10> void Log(long f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10) { typedef long TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogWithNum(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11> void Log(long f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11) { typedef long TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogWithNum(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12> void Log(long f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12) { typedef long TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogWithNum(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13> void Log(long f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13) { typedef long TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogWithNum(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14> void Log(long f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14) { typedef long TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogWithNum(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15> void Log(long f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15) { typedef long TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogWithNum(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16> void Log(long f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16) { typedef long TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogWithNum(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17> void Log(long f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17) { typedef long TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogWithNum(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18> void Log(long f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18) { typedef long TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogWithNum(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19> void Log(long f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19) { typedef long TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogWithNum(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20> void Log(long f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20) { typedef long TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogWithNum(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21> void Log(long f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21) { typedef long TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogWithNum(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22> void Log(long f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22) { typedef long TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogWithNum(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23> void Log(long f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23) { typedef long TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogWithNum(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24> void Log(long f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24) { typedef long TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogWithNum(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25> void Log(long f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25) { typedef long TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogWithNum(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26> void Log(long f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26) { typedef long TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogWithNum(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27> void Log(long f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27) { typedef long TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogWithNum(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28> void Log(long f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28) { typedef long TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogWithNum(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29> void Log(long f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29) { typedef long TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogWithNum(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get(), wxArgNormalizerWchar<T29>(a29, fmt, 29).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29, typename T30> void Log(long f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29, T30 a30) { typedef long TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogWithNum(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get(), wxArgNormalizerWchar<T29>(a29, fmt, 29).get(), wxArgNormalizerWchar<T30>(a30, fmt, 30).get()); }
# 1002 "/usr/include/wx-3.1-unofficial/wx/log.h"
    inline void Log(wxObject * f1, const wxFormatString& f2) { DoLogWithPtr(f1, f2); } template<typename T1> void Log(wxObject * f1, const wxFormatString& f2, T1 a1) { typedef wxObject * TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogWithPtr(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get()); } template<typename T1, typename T2> void Log(wxObject * f1, const wxFormatString& f2, T1 a1, T2 a2) { typedef wxObject * TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogWithPtr(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get()); } template<typename T1, typename T2, typename T3> void Log(wxObject * f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3) { typedef wxObject * TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogWithPtr(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get()); } template<typename T1, typename T2, typename T3, typename T4> void Log(wxObject * f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4) { typedef wxObject * TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogWithPtr(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5> void Log(wxObject * f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5) { typedef wxObject * TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogWithPtr(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void Log(wxObject * f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6) { typedef wxObject * TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogWithPtr(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void Log(wxObject * f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7) { typedef wxObject * TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogWithPtr(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8> void Log(wxObject * f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8) { typedef wxObject * TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogWithPtr(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> void Log(wxObject * f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9) { typedef wxObject * TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogWithPtr(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10> void Log(wxObject * f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10) { typedef wxObject * TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogWithPtr(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11> void Log(wxObject * f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11) { typedef wxObject * TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogWithPtr(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12> void Log(wxObject * f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12) { typedef wxObject * TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogWithPtr(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13> void Log(wxObject * f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13) { typedef wxObject * TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogWithPtr(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14> void Log(wxObject * f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14) { typedef wxObject * TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogWithPtr(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15> void Log(wxObject * f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15) { typedef wxObject * TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogWithPtr(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16> void Log(wxObject * f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16) { typedef wxObject * TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogWithPtr(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17> void Log(wxObject * f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17) { typedef wxObject * TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogWithPtr(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18> void Log(wxObject * f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18) { typedef wxObject * TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogWithPtr(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19> void Log(wxObject * f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19) { typedef wxObject * TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogWithPtr(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20> void Log(wxObject * f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20) { typedef wxObject * TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogWithPtr(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21> void Log(wxObject * f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21) { typedef wxObject * TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogWithPtr(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22> void Log(wxObject * f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22) { typedef wxObject * TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogWithPtr(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23> void Log(wxObject * f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23) { typedef wxObject * TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogWithPtr(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24> void Log(wxObject * f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24) { typedef wxObject * TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogWithPtr(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25> void Log(wxObject * f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25) { typedef wxObject * TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogWithPtr(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26> void Log(wxObject * f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26) { typedef wxObject * TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogWithPtr(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27> void Log(wxObject * f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27) { typedef wxObject * TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogWithPtr(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28> void Log(wxObject * f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28) { typedef wxObject * TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogWithPtr(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29> void Log(wxObject * f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29) { typedef wxObject * TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogWithPtr(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get(), wxArgNormalizerWchar<T29>(a29, fmt, 29).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29, typename T30> void Log(wxObject * f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29, T30 a30) { typedef wxObject * TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogWithPtr(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get(), wxArgNormalizerWchar<T29>(a29, fmt, 29).get(), wxArgNormalizerWchar<T30>(a30, fmt, 30).get()); }
# 1013 "/usr/include/wx-3.1-unofficial/wx/log.h"
    inline void LogAtLevel(wxLogLevel f1, const wxFormatString& f2) { DoLogAtLevel(f1, f2); } template<typename T1> void LogAtLevel(wxLogLevel f1, const wxFormatString& f2, T1 a1) { typedef wxLogLevel TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogAtLevel(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get()); } template<typename T1, typename T2> void LogAtLevel(wxLogLevel f1, const wxFormatString& f2, T1 a1, T2 a2) { typedef wxLogLevel TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogAtLevel(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get()); } template<typename T1, typename T2, typename T3> void LogAtLevel(wxLogLevel f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3) { typedef wxLogLevel TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogAtLevel(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get()); } template<typename T1, typename T2, typename T3, typename T4> void LogAtLevel(wxLogLevel f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4) { typedef wxLogLevel TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogAtLevel(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5> void LogAtLevel(wxLogLevel f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5) { typedef wxLogLevel TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogAtLevel(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void LogAtLevel(wxLogLevel f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6) { typedef wxLogLevel TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogAtLevel(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void LogAtLevel(wxLogLevel f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7) { typedef wxLogLevel TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogAtLevel(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8> void LogAtLevel(wxLogLevel f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8) { typedef wxLogLevel TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogAtLevel(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> void LogAtLevel(wxLogLevel f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9) { typedef wxLogLevel TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogAtLevel(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10> void LogAtLevel(wxLogLevel f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10) { typedef wxLogLevel TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogAtLevel(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11> void LogAtLevel(wxLogLevel f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11) { typedef wxLogLevel TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogAtLevel(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12> void LogAtLevel(wxLogLevel f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12) { typedef wxLogLevel TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogAtLevel(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13> void LogAtLevel(wxLogLevel f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13) { typedef wxLogLevel TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogAtLevel(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14> void LogAtLevel(wxLogLevel f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14) { typedef wxLogLevel TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogAtLevel(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15> void LogAtLevel(wxLogLevel f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15) { typedef wxLogLevel TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogAtLevel(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16> void LogAtLevel(wxLogLevel f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16) { typedef wxLogLevel TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogAtLevel(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17> void LogAtLevel(wxLogLevel f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17) { typedef wxLogLevel TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogAtLevel(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18> void LogAtLevel(wxLogLevel f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18) { typedef wxLogLevel TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogAtLevel(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19> void LogAtLevel(wxLogLevel f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19) { typedef wxLogLevel TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogAtLevel(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20> void LogAtLevel(wxLogLevel f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20) { typedef wxLogLevel TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogAtLevel(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21> void LogAtLevel(wxLogLevel f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21) { typedef wxLogLevel TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogAtLevel(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22> void LogAtLevel(wxLogLevel f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22) { typedef wxLogLevel TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogAtLevel(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23> void LogAtLevel(wxLogLevel f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23) { typedef wxLogLevel TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogAtLevel(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24> void LogAtLevel(wxLogLevel f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24) { typedef wxLogLevel TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogAtLevel(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25> void LogAtLevel(wxLogLevel f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25) { typedef wxLogLevel TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogAtLevel(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26> void LogAtLevel(wxLogLevel f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26) { typedef wxLogLevel TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogAtLevel(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27> void LogAtLevel(wxLogLevel f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27) { typedef wxLogLevel TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogAtLevel(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28> void LogAtLevel(wxLogLevel f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28) { typedef wxLogLevel TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogAtLevel(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29> void LogAtLevel(wxLogLevel f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29) { typedef wxLogLevel TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogAtLevel(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get(), wxArgNormalizerWchar<T29>(a29, fmt, 29).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29, typename T30> void LogAtLevel(wxLogLevel f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29, T30 a30) { typedef wxLogLevel TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogAtLevel(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get(), wxArgNormalizerWchar<T29>(a29, fmt, 29).get(), wxArgNormalizerWchar<T30>(a30, fmt, 30).get()); }
# 1023 "/usr/include/wx-3.1-unofficial/wx/log.h"
    inline void LogTrace(const wxString& f1, const wxFormatString& f2) { DoLogTrace(f1, f2); } template<typename T1> void LogTrace(const wxString& f1, const wxFormatString& f2, T1 a1) { typedef const wxString& TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogTrace(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get()); } template<typename T1, typename T2> void LogTrace(const wxString& f1, const wxFormatString& f2, T1 a1, T2 a2) { typedef const wxString& TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogTrace(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get()); } template<typename T1, typename T2, typename T3> void LogTrace(const wxString& f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3) { typedef const wxString& TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogTrace(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get()); } template<typename T1, typename T2, typename T3, typename T4> void LogTrace(const wxString& f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4) { typedef const wxString& TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogTrace(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5> void LogTrace(const wxString& f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5) { typedef const wxString& TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogTrace(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void LogTrace(const wxString& f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6) { typedef const wxString& TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogTrace(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void LogTrace(const wxString& f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7) { typedef const wxString& TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogTrace(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8> void LogTrace(const wxString& f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8) { typedef const wxString& TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogTrace(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> void LogTrace(const wxString& f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9) { typedef const wxString& TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogTrace(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10> void LogTrace(const wxString& f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10) { typedef const wxString& TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogTrace(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11> void LogTrace(const wxString& f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11) { typedef const wxString& TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogTrace(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12> void LogTrace(const wxString& f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12) { typedef const wxString& TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogTrace(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13> void LogTrace(const wxString& f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13) { typedef const wxString& TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogTrace(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14> void LogTrace(const wxString& f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14) { typedef const wxString& TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogTrace(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15> void LogTrace(const wxString& f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15) { typedef const wxString& TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogTrace(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16> void LogTrace(const wxString& f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16) { typedef const wxString& TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogTrace(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17> void LogTrace(const wxString& f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17) { typedef const wxString& TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogTrace(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18> void LogTrace(const wxString& f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18) { typedef const wxString& TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogTrace(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19> void LogTrace(const wxString& f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19) { typedef const wxString& TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogTrace(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20> void LogTrace(const wxString& f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20) { typedef const wxString& TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogTrace(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21> void LogTrace(const wxString& f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21) { typedef const wxString& TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogTrace(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22> void LogTrace(const wxString& f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22) { typedef const wxString& TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogTrace(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23> void LogTrace(const wxString& f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23) { typedef const wxString& TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogTrace(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24> void LogTrace(const wxString& f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24) { typedef const wxString& TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogTrace(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25> void LogTrace(const wxString& f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25) { typedef const wxString& TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogTrace(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26> void LogTrace(const wxString& f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26) { typedef const wxString& TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogTrace(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27> void LogTrace(const wxString& f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27) { typedef const wxString& TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogTrace(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28> void LogTrace(const wxString& f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28) { typedef const wxString& TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogTrace(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29> void LogTrace(const wxString& f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29) { typedef const wxString& TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogTrace(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get(), wxArgNormalizerWchar<T29>(a29, fmt, 29).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29, typename T30> void LogTrace(const wxString& f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29, T30 a30) { typedef const wxString& TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); DoLogTrace(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get(), wxArgNormalizerWchar<T29>(a29, fmt, 29).get(), wxArgNormalizerWchar<T30>(a30, fmt, 30).get()); }
# 1039 "/usr/include/wx-3.1-unofficial/wx/log.h"
private:

    void DoLog(const wxChar *format, ...)
    {
        va_list argptr;
        
# 1044 "/usr/include/wx-3.1-unofficial/wx/log.h" 3 4
       __builtin_va_start(
# 1044 "/usr/include/wx-3.1-unofficial/wx/log.h"
       argptr
# 1044 "/usr/include/wx-3.1-unofficial/wx/log.h" 3 4
       ,
# 1044 "/usr/include/wx-3.1-unofficial/wx/log.h"
       format
# 1044 "/usr/include/wx-3.1-unofficial/wx/log.h" 3 4
       )
# 1044 "/usr/include/wx-3.1-unofficial/wx/log.h"
                               ;
        DoCallOnLog(format, argptr);
        
# 1046 "/usr/include/wx-3.1-unofficial/wx/log.h" 3 4
       __builtin_va_end(
# 1046 "/usr/include/wx-3.1-unofficial/wx/log.h"
       argptr
# 1046 "/usr/include/wx-3.1-unofficial/wx/log.h" 3 4
       )
# 1046 "/usr/include/wx-3.1-unofficial/wx/log.h"
                     ;
    }

    void DoLogWithNum(long num, const wxChar *format, ...)
    {
        Store(m_optKey, num);

        va_list argptr;
        
# 1054 "/usr/include/wx-3.1-unofficial/wx/log.h" 3 4
       __builtin_va_start(
# 1054 "/usr/include/wx-3.1-unofficial/wx/log.h"
       argptr
# 1054 "/usr/include/wx-3.1-unofficial/wx/log.h" 3 4
       ,
# 1054 "/usr/include/wx-3.1-unofficial/wx/log.h"
       format
# 1054 "/usr/include/wx-3.1-unofficial/wx/log.h" 3 4
       )
# 1054 "/usr/include/wx-3.1-unofficial/wx/log.h"
                               ;
        DoCallOnLog(format, argptr);
        
# 1056 "/usr/include/wx-3.1-unofficial/wx/log.h" 3 4
       __builtin_va_end(
# 1056 "/usr/include/wx-3.1-unofficial/wx/log.h"
       argptr
# 1056 "/usr/include/wx-3.1-unofficial/wx/log.h" 3 4
       )
# 1056 "/usr/include/wx-3.1-unofficial/wx/log.h"
                     ;
    }

    void DoLogWithPtr(void *ptr, const wxChar *format, ...)
    {
        Store(m_optKey, wxPtrToUInt(ptr));

        va_list argptr;
        
# 1064 "/usr/include/wx-3.1-unofficial/wx/log.h" 3 4
       __builtin_va_start(
# 1064 "/usr/include/wx-3.1-unofficial/wx/log.h"
       argptr
# 1064 "/usr/include/wx-3.1-unofficial/wx/log.h" 3 4
       ,
# 1064 "/usr/include/wx-3.1-unofficial/wx/log.h"
       format
# 1064 "/usr/include/wx-3.1-unofficial/wx/log.h" 3 4
       )
# 1064 "/usr/include/wx-3.1-unofficial/wx/log.h"
                               ;
        DoCallOnLog(format, argptr);
        
# 1066 "/usr/include/wx-3.1-unofficial/wx/log.h" 3 4
       __builtin_va_end(
# 1066 "/usr/include/wx-3.1-unofficial/wx/log.h"
       argptr
# 1066 "/usr/include/wx-3.1-unofficial/wx/log.h" 3 4
       )
# 1066 "/usr/include/wx-3.1-unofficial/wx/log.h"
                     ;
    }

    void DoLogAtLevel(wxLogLevel level, const wxChar *format, ...)
    {
        if ( !wxLog::IsLevelEnabled(level, wxString::FromAscii(m_info.component)) )
            return;

        va_list argptr;
        
# 1075 "/usr/include/wx-3.1-unofficial/wx/log.h" 3 4
       __builtin_va_start(
# 1075 "/usr/include/wx-3.1-unofficial/wx/log.h"
       argptr
# 1075 "/usr/include/wx-3.1-unofficial/wx/log.h" 3 4
       ,
# 1075 "/usr/include/wx-3.1-unofficial/wx/log.h"
       format
# 1075 "/usr/include/wx-3.1-unofficial/wx/log.h" 3 4
       )
# 1075 "/usr/include/wx-3.1-unofficial/wx/log.h"
                               ;
        DoCallOnLog(level, format, argptr);
        
# 1077 "/usr/include/wx-3.1-unofficial/wx/log.h" 3 4
       __builtin_va_end(
# 1077 "/usr/include/wx-3.1-unofficial/wx/log.h"
       argptr
# 1077 "/usr/include/wx-3.1-unofficial/wx/log.h" 3 4
       )
# 1077 "/usr/include/wx-3.1-unofficial/wx/log.h"
                     ;
    }

    void DoLogTrace(const wxString& mask, const wxChar *format, ...)
    {
        if ( !wxLog::IsAllowedTraceMask(mask) )
            return;

        Store(wxString::FromAscii("wx.trace_mask"), mask);

        va_list argptr;
        
# 1088 "/usr/include/wx-3.1-unofficial/wx/log.h" 3 4
       __builtin_va_start(
# 1088 "/usr/include/wx-3.1-unofficial/wx/log.h"
       argptr
# 1088 "/usr/include/wx-3.1-unofficial/wx/log.h" 3 4
       ,
# 1088 "/usr/include/wx-3.1-unofficial/wx/log.h"
       format
# 1088 "/usr/include/wx-3.1-unofficial/wx/log.h" 3 4
       )
# 1088 "/usr/include/wx-3.1-unofficial/wx/log.h"
                               ;
        DoCallOnLog(format, argptr);
        
# 1090 "/usr/include/wx-3.1-unofficial/wx/log.h" 3 4
       __builtin_va_end(
# 1090 "/usr/include/wx-3.1-unofficial/wx/log.h"
       argptr
# 1090 "/usr/include/wx-3.1-unofficial/wx/log.h" 3 4
       )
# 1090 "/usr/include/wx-3.1-unofficial/wx/log.h"
                     ;
    }
# 1178 "/usr/include/wx-3.1-unofficial/wx/log.h"
    void DoCallOnLog(wxLogLevel level, const wxString& format, va_list argptr)
    {



        m_info.timestampMS = wxGetUTCTimeMillis().GetValue();


        m_info.timestamp = m_info.timestampMS / 1000;


        wxLog::OnLog(level, wxString::FormatV(format, argptr), m_info);
    }

    void DoCallOnLog(const wxString& format, va_list argptr)
    {
        DoCallOnLog(m_level, format, argptr);
    }


    const wxLogLevel m_level;
    wxLogRecordInfo m_info;

    wxString m_optKey;

    private: wxLogger(const wxLogger&) = delete; wxLogger& operator=(const wxLogger&) = delete;
};
# 1215 "/usr/include/wx-3.1-unofficial/wx/log.h"
__attribute__ ((visibility("default"))) unsigned long wxSysErrorCode();


__attribute__ ((visibility("default"))) const wxChar* wxSysErrorMsg(unsigned long nErrCode = 0);


__attribute__ ((visibility("default"))) wxString wxSysErrorMsgStr(unsigned long nErrCode = 0);
# 1429 "/usr/include/wx-3.1-unofficial/wx/log.h"
inline void wxLogNop() { }
# 1462 "/usr/include/wx-3.1-unofficial/wx/log.h"
bool __attribute__ ((visibility("default")))
wxSafeShowMessage(const wxString& title, const wxString& text);
# 26 "/usr/include/wx-3.1-unofficial/wx/app.h" 2

class wxAppConsole;
class wxAppTraits;
class wxCmdLineParser;
class wxEventLoopBase;
class wxMessageOutput;


    struct wxVideoMode;
    class wxWindow;
# 48 "/usr/include/wx-3.1-unofficial/wx/app.h"
typedef wxAppConsole* (*wxAppInitializerFunction)();





enum
{
    wxPRINT_WINDOWS = 1,
    wxPRINT_POSTSCRIPT = 2
};
# 67 "/usr/include/wx-3.1-unofficial/wx/app.h"
extern __attribute__ ((visibility("default"))) wxList wxPendingDelete;





class __attribute__ ((visibility("default"))) wxAppConsoleBase : public wxEvtHandler,
                                          public wxEventFilter
{
public:

    wxAppConsoleBase();
    virtual ~wxAppConsoleBase();
# 90 "/usr/include/wx-3.1-unofficial/wx/app.h"
    virtual bool Initialize(int& argc, wxChar **argv);


    virtual bool CallOnInit() { return OnInit(); }





    virtual bool OnInit();



    virtual int OnRun();


    virtual void OnLaunched();






    virtual void OnEventLoopEnter(wxEventLoopBase* ) {}



    virtual int OnExit();



    virtual void OnEventLoopExit(wxEventLoopBase* ) {}




    virtual void CleanUp();







    virtual void OnFatalException() { }


    virtual void Exit();
# 148 "/usr/include/wx-3.1-unofficial/wx/app.h"
    wxString GetAppName() const;
    void SetAppName(const wxString& name) { m_appName = name; }
# 158 "/usr/include/wx-3.1-unofficial/wx/app.h"
    wxString GetAppDisplayName() const;

    void SetAppDisplayName(const wxString& name) { m_appDisplayName = name; }


    wxString GetClassName() const { return m_className; }
    void SetClassName(const wxString& name) { m_className = name; }


    const wxString& GetVendorName() const { return m_vendorName; }
    void SetVendorName(const wxString& name) { m_vendorName = name; }




    const wxString& GetVendorDisplayName() const
    {
        return m_vendorDisplayName.empty() ? GetVendorName()
                                           : m_vendorDisplayName;
    }
    void SetVendorDisplayName(const wxString& name)
    {
        m_vendorDisplayName = name;
    }
# 198 "/usr/include/wx-3.1-unofficial/wx/app.h"
    virtual void OnInitCmdLine(wxCmdLineParser& parser);




    virtual bool OnCmdLineParsed(wxCmdLineParser& parser);



    virtual bool OnCmdLineHelp(wxCmdLineParser& parser);



    virtual bool OnCmdLineError(wxCmdLineParser& parser);
# 223 "/usr/include/wx-3.1-unofficial/wx/app.h"
    wxAppTraits *GetTraits();







    static wxAppTraits *GetTraitsIfExists();







    static wxAppTraits& GetValidTraits();






    wxEventLoopBase* GetMainLoop() const
        { return m_mainLoop; }
# 259 "/usr/include/wx-3.1-unofficial/wx/app.h"
    virtual void SetCLocale();







    virtual int FilterEvent(wxEvent& event) override;



    static bool IsMainLoopRunning();
# 280 "/usr/include/wx-3.1-unofficial/wx/app.h"
    virtual void CallEventHandler(wxEvtHandler *handler,
                                  wxEventFunctor& functor,
                                  wxEvent& event) const;






    virtual void HandleEvent(wxEvtHandler *handler,
                             wxEventFunction func,
                             wxEvent& event) const;





    virtual void OnUnhandledException();







    virtual bool OnExceptionInMainLoop();
# 319 "/usr/include/wx-3.1-unofficial/wx/app.h"
    virtual bool StoreCurrentException();







    virtual void RethrowStoredException();
# 344 "/usr/include/wx-3.1-unofficial/wx/app.h"
    virtual void ProcessPendingEvents();


    bool HasPendingEvents() const;


    void SuspendProcessingOfPendingEvents();



    void ResumeProcessingOfPendingEvents();



    void RemovePendingEventHandler(wxEvtHandler* toRemove);


    void AppendPendingEventHandler(wxEvtHandler* toAppend);



    void DelayPendingEventHandler(wxEvtHandler* toDelay);


    void DeletePendingEvents();
# 384 "/usr/include/wx-3.1-unofficial/wx/app.h"
    void ScheduleForDestruction(wxObject *object);


    bool IsScheduledForDestruction(wxObject *object) const;







    virtual bool Pending();
    virtual bool Dispatch();

    virtual int MainLoop();
    virtual void ExitMainLoop();

    bool Yield(bool onlyIfNeeded = false);

    virtual void WakeUpIdle();







    virtual bool ProcessIdle();





    virtual bool UsesEventLoop() const;
# 430 "/usr/include/wx-3.1-unofficial/wx/app.h"
    virtual void OnAssertFailure(const wxChar *file,
                                 int line,
                                 const wxChar *func,
                                 const wxChar *cond,
                                 const wxChar *msg);



    virtual void OnAssert(const wxChar *file,
                          int line,
                          const wxChar *cond,
                          const wxChar *msg);




    static bool CheckBuildOptions(const char *optionsSignature,
                                  const char *componentName);





    static void SetInitializerFunction(wxAppInitializerFunction fn)
        { ms_appInitFn = fn; }
    static wxAppInitializerFunction GetInitializerFunction()
        { return ms_appInitFn; }





    static wxAppConsole *GetInstance() { return ms_appInstance; }
    static void SetInstance(wxAppConsole *app) { ms_appInstance = app; }



    int argc;






    wxCmdLineArgsArray argv;




protected:



    void DeletePendingObjects();



    virtual wxAppTraits *CreateTraits();


    static wxAppInitializerFunction ms_appInitFn;


    static wxAppConsole *ms_appInstance;



    wxEventLoopBase *CreateMainLoop();


    wxString m_vendorName,
             m_vendorDisplayName,
             m_appName,
             m_appDisplayName,
             m_className;



    wxAppTraits *m_traits;



    wxEventLoopBase *m_mainLoop;






    wxEvtHandlerArray m_handlersWithPendingEvents;





    wxEvtHandlerArray m_handlersWithPendingDelayedEvents;



    wxCriticalSection m_handlersWithPendingEventsLocker;



    bool m_bDoPendingEventProcessing;

    friend class wxEvtHandler;



    private: wxAppConsoleBase(const wxAppConsoleBase&) = delete; wxAppConsoleBase& operator=(const wxAppConsoleBase&) = delete;
};


# 1 "/usr/include/wx-3.1-unofficial/wx/unix/app.h" 1
# 11 "/usr/include/wx-3.1-unofficial/wx/unix/app.h"
# 1 "/usr/include/signal.h" 1 3 4
# 27 "/usr/include/signal.h" 3 4

# 27 "/usr/include/signal.h" 3 4
extern "C" {


# 1 "/usr/include/x86_64-linux-gnu/bits/signum.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/signum.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/signum-generic.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/signum.h" 2 3 4
# 31 "/usr/include/signal.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/sig_atomic_t.h" 1 3 4







typedef __sig_atomic_t sig_atomic_t;
# 33 "/usr/include/signal.h" 2 3 4
# 57 "/usr/include/signal.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 5 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/__sigval_t.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/types/__sigval_t.h" 3 4
union sigval
{
  int sival_int;
  void *sival_ptr;
};

typedef union sigval __sigval_t;
# 7 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 2 3 4
# 16 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/siginfo-arch.h" 1 3 4
# 17 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 2 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 3 4
typedef struct
  {
    int si_signo;

    int si_errno;

    int si_code;





    int __pad0;


    union
      {
 int _pad[((128 / sizeof (int)) - 4)];


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
   } _kill;


 struct
   {
     int si_tid;
     int si_overrun;
     __sigval_t si_sigval;
   } _timer;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     __sigval_t si_sigval;
   } _rt;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     int si_status;
     __clock_t si_utime;
     __clock_t si_stime;
   } _sigchld;


 struct
   {
     void *si_addr;
    
     short int si_addr_lsb;
     union
       {

  struct
    {
      void *_lower;
      void *_upper;
    } _addr_bnd;

  __uint32_t _pkey;
       } _bounds;
   } _sigfault;


 struct
   {
     long int si_band;
     int si_fd;
   } _sigpoll;



 struct
   {
     void *_call_addr;
     int _syscall;
     unsigned int _arch;
   } _sigsys;

      } _sifields;
  } siginfo_t ;
# 58 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h" 3 4
enum
{
  SI_ASYNCNL = -60,
  SI_DETHREAD = -7,

  SI_TKILL,
  SI_SIGIO,

  SI_ASYNCIO,
  SI_MESGQ,
  SI_TIMER,





  SI_QUEUE,
  SI_USER,
  SI_KERNEL = 0x80
# 66 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h" 3 4
};




enum
{
  ILL_ILLOPC = 1,

  ILL_ILLOPN,

  ILL_ILLADR,

  ILL_ILLTRP,

  ILL_PRVOPC,

  ILL_PRVREG,

  ILL_COPROC,

  ILL_BADSTK,

  ILL_BADIADDR

};


enum
{
  FPE_INTDIV = 1,

  FPE_INTOVF,

  FPE_FLTDIV,

  FPE_FLTOVF,

  FPE_FLTUND,

  FPE_FLTRES,

  FPE_FLTINV,

  FPE_FLTSUB,

  FPE_FLTUNK = 14,

  FPE_CONDTRAP

};


enum
{
  SEGV_MAPERR = 1,

  SEGV_ACCERR,

  SEGV_BNDERR,

  SEGV_PKUERR,

  SEGV_ACCADI,

  SEGV_ADIDERR,

  SEGV_ADIPERR

};


enum
{
  BUS_ADRALN = 1,

  BUS_ADRERR,

  BUS_OBJERR,

  BUS_MCEERR_AR,

  BUS_MCEERR_AO

};




enum
{
  TRAP_BRKPT = 1,

  TRAP_TRACE,

  TRAP_BRANCH,

  TRAP_HWBKPT,

  TRAP_UNK

};




enum
{
  CLD_EXITED = 1,

  CLD_KILLED,

  CLD_DUMPED,

  CLD_TRAPPED,

  CLD_STOPPED,

  CLD_CONTINUED

};


enum
{
  POLL_IN = 1,

  POLL_OUT,

  POLL_MSG,

  POLL_ERR,

  POLL_PRI,

  POLL_HUP

};





# 1 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts-arch.h" 1 3 4
# 210 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h" 2 3 4
# 59 "/usr/include/signal.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigval_t.h" 1 3 4
# 16 "/usr/include/x86_64-linux-gnu/bits/types/sigval_t.h" 3 4
typedef __sigval_t sigval_t;
# 63 "/usr/include/signal.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigevent_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 5 "/usr/include/x86_64-linux-gnu/bits/types/sigevent_t.h" 2 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/sigevent_t.h" 3 4
typedef struct sigevent
  {
    __sigval_t sigev_value;
    int sigev_signo;
    int sigev_notify;

    union
      {
 int _pad[((64 / sizeof (int)) - 4)];



 __pid_t _tid;

 struct
   {
     void (*_function) (__sigval_t);
     pthread_attr_t *_attribute;
   } _sigev_thread;
      } _sigev_un;
  } sigevent_t;
# 67 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sigevent-consts.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/sigevent-consts.h" 3 4
enum
{
  SIGEV_SIGNAL = 0,

  SIGEV_NONE,

  SIGEV_THREAD,


  SIGEV_THREAD_ID = 4


};
# 68 "/usr/include/signal.h" 2 3 4




typedef void (*__sighandler_t) (int);




extern __sighandler_t __sysv_signal (int __sig, __sighandler_t __handler)
     throw ();

extern __sighandler_t sysv_signal (int __sig, __sighandler_t __handler)
     throw ();






extern __sighandler_t signal (int __sig, __sighandler_t __handler)
     throw ();
# 112 "/usr/include/signal.h" 3 4
extern int kill (__pid_t __pid, int __sig) throw ();






extern int killpg (__pid_t __pgrp, int __sig) throw ();



extern int raise (int __sig) throw ();



extern __sighandler_t ssignal (int __sig, __sighandler_t __handler)
     throw ();
extern int gsignal (int __sig) throw ();




extern void psignal (int __sig, const char *__s);


extern void psiginfo (const siginfo_t *__pinfo, const char *__s);
# 151 "/usr/include/signal.h" 3 4
extern int sigpause (int __sig) __asm__ ("__xpg_sigpause");
# 170 "/usr/include/signal.h" 3 4
extern int sigblock (int __mask) throw () __attribute__ ((__deprecated__));


extern int sigsetmask (int __mask) throw () __attribute__ ((__deprecated__));


extern int siggetmask (void) throw () __attribute__ ((__deprecated__));
# 185 "/usr/include/signal.h" 3 4
typedef __sighandler_t sighandler_t;




typedef __sighandler_t sig_t;





extern int sigemptyset (sigset_t *__set) throw () __attribute__ ((__nonnull__ (1)));


extern int sigfillset (sigset_t *__set) throw () __attribute__ ((__nonnull__ (1)));


extern int sigaddset (sigset_t *__set, int __signo) throw () __attribute__ ((__nonnull__ (1)));


extern int sigdelset (sigset_t *__set, int __signo) throw () __attribute__ ((__nonnull__ (1)));


extern int sigismember (const sigset_t *__set, int __signo)
     throw () __attribute__ ((__nonnull__ (1)));



extern int sigisemptyset (const sigset_t *__set) throw () __attribute__ ((__nonnull__ (1)));


extern int sigandset (sigset_t *__set, const sigset_t *__left,
        const sigset_t *__right) throw () __attribute__ ((__nonnull__ (1, 2, 3)));


extern int sigorset (sigset_t *__set, const sigset_t *__left,
       const sigset_t *__right) throw () __attribute__ ((__nonnull__ (1, 2, 3)));




# 1 "/usr/include/x86_64-linux-gnu/bits/sigaction.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/sigaction.h" 3 4
struct sigaction
  {


    union
      {

 __sighandler_t sa_handler;

 void (*sa_sigaction) (int, siginfo_t *, void *);
      }
    __sigaction_handler;







    __sigset_t sa_mask;


    int sa_flags;


    void (*sa_restorer) (void);
  };
# 227 "/usr/include/signal.h" 2 3 4


extern int sigprocmask (int __how, const sigset_t *__restrict __set,
   sigset_t *__restrict __oset) throw ();






extern int sigsuspend (const sigset_t *__set) __attribute__ ((__nonnull__ (1)));


extern int sigaction (int __sig, const struct sigaction *__restrict __act,
        struct sigaction *__restrict __oact) throw ();


extern int sigpending (sigset_t *__set) throw () __attribute__ ((__nonnull__ (1)));







extern int sigwait (const sigset_t *__restrict __set, int *__restrict __sig)
     __attribute__ ((__nonnull__ (1, 2)));







extern int sigwaitinfo (const sigset_t *__restrict __set,
   siginfo_t *__restrict __info) __attribute__ ((__nonnull__ (1)));






extern int sigtimedwait (const sigset_t *__restrict __set,
    siginfo_t *__restrict __info,
    const struct timespec *__restrict __timeout)
     __attribute__ ((__nonnull__ (1)));



extern int sigqueue (__pid_t __pid, int __sig, const union sigval __val)
     throw ();
# 286 "/usr/include/signal.h" 3 4
extern const char *const _sys_siglist[(64 + 1)];
extern const char *const sys_siglist[(64 + 1)];



# 1 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 3 4
struct _fpx_sw_bytes
{
  __uint32_t magic1;
  __uint32_t extended_size;
  __uint64_t xstate_bv;
  __uint32_t xstate_size;
  __uint32_t __glibc_reserved1[7];
};

struct _fpreg
{
  unsigned short significand[4];
  unsigned short exponent;
};

struct _fpxreg
{
  unsigned short significand[4];
  unsigned short exponent;
  unsigned short __glibc_reserved1[3];
};

struct _xmmreg
{
  __uint32_t element[4];
};
# 123 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 3 4
struct _fpstate
{

  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _fpxreg _st[8];
  struct _xmmreg _xmm[16];
  __uint32_t __glibc_reserved1[24];
};

struct sigcontext
{
  __uint64_t r8;
  __uint64_t r9;
  __uint64_t r10;
  __uint64_t r11;
  __uint64_t r12;
  __uint64_t r13;
  __uint64_t r14;
  __uint64_t r15;
  __uint64_t rdi;
  __uint64_t rsi;
  __uint64_t rbp;
  __uint64_t rbx;
  __uint64_t rdx;
  __uint64_t rax;
  __uint64_t rcx;
  __uint64_t rsp;
  __uint64_t rip;
  __uint64_t eflags;
  unsigned short cs;
  unsigned short gs;
  unsigned short fs;
  unsigned short __pad0;
  __uint64_t err;
  __uint64_t trapno;
  __uint64_t oldmask;
  __uint64_t cr2;
  __extension__ union
    {
      struct _fpstate * fpstate;
      __uint64_t __fpstate_word;
    };
  __uint64_t __reserved1 [8];
};



struct _xsave_hdr
{
  __uint64_t xstate_bv;
  __uint64_t __glibc_reserved1[2];
  __uint64_t __glibc_reserved2[5];
};

struct _ymmh_state
{
  __uint32_t ymmh_space[64];
};

struct _xstate
{
  struct _fpstate fpstate;
  struct _xsave_hdr xstate_hdr;
  struct _ymmh_state ymmh;
};
# 292 "/usr/include/signal.h" 2 3 4


extern int sigreturn (struct sigcontext *__scp) throw ();






# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 302 "/usr/include/signal.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/stack_t.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/types/stack_t.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/types/stack_t.h" 2 3 4


typedef struct
  {
    void *ss_sp;
    int ss_flags;
    size_t ss_size;
  } stack_t;
# 304 "/usr/include/signal.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 1 3 4
# 37 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 3 4
__extension__ typedef long long int greg_t;
# 46 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 3 4
typedef greg_t gregset_t[23];



enum
{
  REG_R8 = 0,

  REG_R9,

  REG_R10,

  REG_R11,

  REG_R12,

  REG_R13,

  REG_R14,

  REG_R15,

  REG_RDI,

  REG_RSI,

  REG_RBP,

  REG_RBX,

  REG_RDX,

  REG_RAX,

  REG_RCX,

  REG_RSP,

  REG_RIP,

  REG_EFL,

  REG_CSGSFS,

  REG_ERR,

  REG_TRAPNO,

  REG_OLDMASK,

  REG_CR2

};


struct _libc_fpxreg
{
  unsigned short int significand[4];
  unsigned short int exponent;
  unsigned short int __glibc_reserved1[3];
};

struct _libc_xmmreg
{
  __uint32_t element[4];
};

struct _libc_fpstate
{

  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _libc_fpxreg _st[8];
  struct _libc_xmmreg _xmm[16];
  __uint32_t __glibc_reserved1[24];
};


typedef struct _libc_fpstate *fpregset_t;


typedef struct
  {
    gregset_t gregs;

    fpregset_t fpregs;
    __extension__ unsigned long long __reserved1 [8];
} mcontext_t;


typedef struct ucontext_t
  {
    unsigned long int uc_flags;
    struct ucontext_t *uc_link;
    stack_t uc_stack;
    mcontext_t uc_mcontext;
    sigset_t uc_sigmask;
    struct _libc_fpstate __fpregs_mem;
    __extension__ unsigned long long int __ssp[4];
  } ucontext_t;
# 307 "/usr/include/signal.h" 2 3 4







extern int siginterrupt (int __sig, int __interrupt) throw ();

# 1 "/usr/include/x86_64-linux-gnu/bits/sigstack.h" 1 3 4
# 317 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/ss_flags.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/ss_flags.h" 3 4
enum
{
  SS_ONSTACK = 1,

  SS_DISABLE

};
# 318 "/usr/include/signal.h" 2 3 4



extern int sigaltstack (const stack_t *__restrict __ss,
   stack_t *__restrict __oss) throw ();




# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_sigstack.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/types/struct_sigstack.h" 3 4
struct sigstack
  {
    void *ss_sp;
    int ss_onstack;
  };
# 328 "/usr/include/signal.h" 2 3 4







extern int sigstack (struct sigstack *__ss, struct sigstack *__oss)
     throw () __attribute__ ((__deprecated__));






extern int sighold (int __sig) throw ();


extern int sigrelse (int __sig) throw ();


extern int sigignore (int __sig) throw ();


extern __sighandler_t sigset (int __sig, __sighandler_t __disp) throw ();






# 1 "/usr/include/x86_64-linux-gnu/bits/sigthread.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/bits/sigthread.h" 3 4
extern int pthread_sigmask (int __how,
       const __sigset_t *__restrict __newmask,
       __sigset_t *__restrict __oldmask)throw ();


extern int pthread_kill (pthread_t __threadid, int __signo) throw ();



extern int pthread_sigqueue (pthread_t __threadid, int __signo,
        const union sigval __value) throw ();
# 360 "/usr/include/signal.h" 2 3 4






extern int __libc_current_sigrtmin (void) throw ();

extern int __libc_current_sigrtmax (void) throw ();





# 1 "/usr/include/x86_64-linux-gnu/bits/signal_ext.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/signal_ext.h" 3 4
extern int tgkill (__pid_t __tgid, __pid_t __tid, int __signal);
# 375 "/usr/include/signal.h" 2 3 4

}
# 12 "/usr/include/wx-3.1-unofficial/wx/unix/app.h" 2


# 13 "/usr/include/wx-3.1-unofficial/wx/unix/app.h"
class wxFDIODispatcher;
class wxFDIOHandler;
class wxWakeUpPipe;


class __attribute__ ((visibility("default"))) wxAppConsole : public wxAppConsoleBase
{
public:
    wxAppConsole();
    virtual ~wxAppConsole();


    virtual bool Initialize(int& argc, wxChar** argv) override;
# 35 "/usr/include/wx-3.1-unofficial/wx/unix/app.h"
    typedef void (*SignalHandler)(int);





    bool SetSignalHandler(int signal, SignalHandler handler);



    void CheckSignal();







    wxFDIOHandler* RegisterSignalWakeUpPipe(wxFDIODispatcher& dispatcher);

private:



    static void HandleSignal(int signal);




    sigset_t m_signalsCaught;


    class SignalHandlerHash_wxImplementation_Pair { public: typedef int first_type; typedef SignalHandler second_type; typedef int t1; typedef SignalHandler t2; typedef const int const_t1; typedef const SignalHandler const_t2; SignalHandlerHash_wxImplementation_Pair(const const_t1& f, const const_t2& s) : first(const_cast<t1&>(f)), second(const_cast<t2&>(s)) {} t1 first; t2 second; }; class SignalHandlerHash_wxImplementation_KeyEx { typedef int key_type; typedef SignalHandlerHash_wxImplementation_Pair pair_type; typedef const key_type const_key_type; typedef const pair_type const_pair_type; typedef const_key_type& const_key_reference; typedef const_pair_type& const_pair_reference; public: SignalHandlerHash_wxImplementation_KeyEx() { } const_key_reference operator()( const_pair_reference pair ) const { return pair.first; }}; class SignalHandlerHash_wxImplementation_HashTable : protected _wxHashTableBase2 { public: typedef int key_type; typedef SignalHandlerHash_wxImplementation_Pair value_type; typedef wxIntegerHash hasher; typedef wxIntegerEqual key_equal; typedef size_t size_type; typedef ptrdiff_t difference_type; typedef value_type* pointer; typedef const value_type* const_pointer; typedef value_type& reference; typedef const value_type& const_reference; typedef const int const_key_type; typedef const SignalHandlerHash_wxImplementation_Pair const_mapped_type; public: typedef SignalHandlerHash_wxImplementation_KeyEx key_extractor; typedef SignalHandlerHash_wxImplementation_HashTable Self; protected: _wxHashTable_NodeBase** m_table; size_t m_tableBuckets; size_t m_items; hasher m_hasher; key_equal m_equals; key_extractor m_getKey; public: struct Node:public _wxHashTable_NodeBase { public: Node( const value_type& value ) : m_value( value ) {} Node* next() { return static_cast<Node*>(m_next); } value_type m_value; }; protected: static void DeleteNode( _wxHashTable_NodeBase* node ) { delete static_cast<Node*>(node); } public: class Iterator { public: Node* m_node; Self* m_ht; Iterator() : m_node(
# 67 "/usr/include/wx-3.1-unofficial/wx/unix/app.h" 3 4
   __null
# 67 "/usr/include/wx-3.1-unofficial/wx/unix/app.h"
   ), m_ht(
# 67 "/usr/include/wx-3.1-unofficial/wx/unix/app.h" 3 4
   __null
# 67 "/usr/include/wx-3.1-unofficial/wx/unix/app.h"
   ) {} Iterator( Node* node, const Self* ht ) : m_node(node), m_ht(const_cast<Self*>(ht)) {} bool operator ==( const Iterator& it ) const { return m_node == it.m_node; } bool operator !=( const Iterator& it ) const { return m_node != it.m_node; } protected: Node* GetNextNode() { size_type bucket = GetBucketForNode(m_ht,m_node); for( size_type i = bucket + 1; i < m_ht->m_tableBuckets; ++i ) { if( m_ht->m_table[i] ) return static_cast<Node*>(m_ht->m_table[i]); } return 
# 67 "/usr/include/wx-3.1-unofficial/wx/unix/app.h" 3 4
   __null
# 67 "/usr/include/wx-3.1-unofficial/wx/unix/app.h"
   ; } void PlusPlus() { Node* next = m_node->next(); m_node = next ? next : GetNextNode(); } }; friend class Iterator; public: class iterator : public Iterator { public: iterator() : Iterator() {} iterator( Node* node, Self* ht ) : Iterator( node, ht ) {} iterator& operator++() { PlusPlus(); return *this; } iterator operator++(int) { iterator it=*this;PlusPlus();return it; } reference operator *() const { return m_node->m_value; } pointer operator ->() const { return &(m_node->m_value); } }; class const_iterator : public Iterator { public: const_iterator() : Iterator() {} const_iterator(iterator i) : Iterator(i) {} const_iterator( Node* node, const Self* ht ) : Iterator(node, const_cast<Self*>(ht)) {} const_iterator& operator++() { PlusPlus();return *this; } const_iterator operator++(int) { const_iterator it=*this;PlusPlus();return it; } const_reference operator *() const { return m_node->m_value; } const_pointer operator ->() const { return &(m_node->m_value); } }; SignalHandlerHash_wxImplementation_HashTable( size_type sz = 10, const hasher& hfun = hasher(), const key_equal& k_eq = key_equal(), const key_extractor& k_ex = key_extractor() ) : m_tableBuckets( GetNextPrime( (unsigned long) sz ) ), m_items( 0 ), m_hasher( hfun ), m_equals( k_eq ), m_getKey( k_ex ) { m_table = (_wxHashTable_NodeBase**)AllocTable(m_tableBuckets); } SignalHandlerHash_wxImplementation_HashTable( const Self& ht ) : m_table(
# 67 "/usr/include/wx-3.1-unofficial/wx/unix/app.h" 3 4
   __null
# 67 "/usr/include/wx-3.1-unofficial/wx/unix/app.h"
   ), m_tableBuckets( 0 ), m_items( ht.m_items ), m_hasher( ht.m_hasher ), m_equals( ht.m_equals ), m_getKey( ht.m_getKey ) { HashCopy( ht ); } const Self& operator=( const Self& ht ) { if (&ht != this) { clear(); m_hasher = ht.m_hasher; m_equals = ht.m_equals; m_getKey = ht.m_getKey; m_items = ht.m_items; HashCopy( ht ); } return *this; } ~SignalHandlerHash_wxImplementation_HashTable() { clear(); FreeTable(m_table); } hasher hash_funct() { return m_hasher; } key_equal key_eq() { return m_equals; } void clear() { DeleteNodes(m_tableBuckets, m_table, DeleteNode); m_items = 0; } size_type size() const { return m_items; } size_type max_size() const { return size_type(-1); } bool empty() const { return size() == 0; } const_iterator end() const { return const_iterator(
# 67 "/usr/include/wx-3.1-unofficial/wx/unix/app.h" 3 4
   __null
# 67 "/usr/include/wx-3.1-unofficial/wx/unix/app.h"
   , this); } iterator end() { return iterator(
# 67 "/usr/include/wx-3.1-unofficial/wx/unix/app.h" 3 4
   __null
# 67 "/usr/include/wx-3.1-unofficial/wx/unix/app.h"
   , this); } const_iterator begin() const { return const_iterator(static_cast<Node*>(GetFirstNode(m_tableBuckets, m_table)), this); } iterator begin() { return iterator(static_cast<Node*>(GetFirstNode(m_tableBuckets, m_table)), this); } size_type erase( const const_key_type& key ) { _wxHashTable_NodeBase** node = GetNodePtr(key); if( !node ) return 0; --m_items; _wxHashTable_NodeBase* temp = (*node)->m_next; delete static_cast<Node*>(*node); (*node) = temp; if( never_shrink( m_tableBuckets, m_items ) ) ResizeTable( GetPreviousPrime( (unsigned long) m_tableBuckets ) - 1 ); return 1; } protected: static size_type GetBucketForNode( Self* ht, Node* node ) { return ht->m_hasher( ht->m_getKey( node->m_value ) ) % ht->m_tableBuckets; } static Node* CopyNode( Node* node ) { return new Node( *node ); } Node* GetOrCreateNode( const value_type& value, bool& created ) { const const_key_type& key = m_getKey( value ); size_t bucket = m_hasher( key ) % m_tableBuckets; Node* node = static_cast<Node*>(m_table[bucket]); while( node ) { if( m_equals( m_getKey( node->m_value ), key ) ) { created = false; return node; } node = node->next(); } created = true; return CreateNode( value, bucket); } Node * CreateNode( const value_type& value, size_t bucket ) { Node* node = new Node( value ); node->m_next = m_table[bucket]; m_table[bucket] = node; ++m_items; if( grow_lf70( m_tableBuckets, m_items ) ) ResizeTable( m_tableBuckets ); return node; } void CreateNode( const value_type& value ) { CreateNode(value, m_hasher( m_getKey(value) ) % m_tableBuckets ); } _wxHashTable_NodeBase** GetNodePtr(const const_key_type& key) const { size_t bucket = m_hasher( key ) % m_tableBuckets; _wxHashTable_NodeBase** node = &m_table[bucket]; while( *node ) { if (m_equals(m_getKey(static_cast<Node*>(*node)->m_value), key)) return node; node = &(*node)->m_next; } return 
# 67 "/usr/include/wx-3.1-unofficial/wx/unix/app.h" 3 4
   __null
# 67 "/usr/include/wx-3.1-unofficial/wx/unix/app.h"
   ; } Node* GetNode( const const_key_type& key ) const { size_t bucket = m_hasher( key ) % m_tableBuckets; Node* node = static_cast<Node*>(m_table[bucket]); while( node ) { if( m_equals( m_getKey( node->m_value ), key ) ) return node; node = node->next(); } return 
# 67 "/usr/include/wx-3.1-unofficial/wx/unix/app.h" 3 4
   __null
# 67 "/usr/include/wx-3.1-unofficial/wx/unix/app.h"
   ; } void ResizeTable( size_t newSize ) { newSize = GetNextPrime( (unsigned long)newSize ); _wxHashTable_NodeBase** srcTable = m_table; size_t srcBuckets = m_tableBuckets; m_table = (_wxHashTable_NodeBase**)AllocTable( newSize ); m_tableBuckets = newSize; CopyHashTable( srcTable, srcBuckets, this, m_table, (BucketFromNode)GetBucketForNode, (ProcessNode)&DummyProcessNode ); FreeTable(srcTable); } void HashCopy( const Self& ht ) { ResizeTable( ht.size() ); CopyHashTable( ht.m_table, ht.m_tableBuckets, (_wxHashTableBase2*)this, m_table, (BucketFromNode)GetBucketForNode, (ProcessNode)CopyNode ); } }; class SignalHandlerHash:public SignalHandlerHash_wxImplementation_HashTable { public: typedef SignalHandler mapped_type; class Insert_Result { public: typedef iterator first_type; typedef bool second_type; typedef iterator t1; typedef bool t2; typedef const iterator const_t1; typedef const bool const_t2; Insert_Result(const const_t1& f, const const_t2& s) : first(const_cast<t1&>(f)), second(const_cast<t2&>(s)) {} t1 first; t2 second; }; explicit SignalHandlerHash( size_type hint = 100, hasher hf = hasher(), key_equal eq = key_equal() ) : SignalHandlerHash_wxImplementation_HashTable( hint, hf, eq, SignalHandlerHash_wxImplementation_KeyEx() ) {} mapped_type& operator[]( const const_key_type& key ) { bool created; return GetOrCreateNode( SignalHandlerHash_wxImplementation_Pair( key, mapped_type() ), created)->m_value.second; } const_iterator find( const const_key_type& key ) const { return const_iterator( GetNode( key ), this ); } iterator find( const const_key_type& key ) { return iterator( GetNode( key ), this ); } Insert_Result insert( const value_type& v ) { bool created; Node *node = GetOrCreateNode( SignalHandlerHash_wxImplementation_Pair( v.first, v.second ), created); return Insert_Result(iterator(node, this), created); } size_type erase( const key_type& k ) { return SignalHandlerHash_wxImplementation_HashTable::erase( k ); } void erase( const iterator& it ) { erase( (*it).first ); } size_type count( const const_key_type& key ) { return GetNode( key ) ? 1u : 0u; } };
    SignalHandlerHash m_signalHandlerHash;



    wxWakeUpPipe *m_signalWakeUpPipe;
};
# 544 "/usr/include/wx-3.1-unofficial/wx/app.h" 2
# 555 "/usr/include/wx-3.1-unofficial/wx/app.h"
class __attribute__ ((visibility("default"))) wxAppBase : public wxAppConsole
{
public:
    wxAppBase();
    virtual ~wxAppBase();







    virtual bool Initialize(int& argc, wxChar **argv) override;





    virtual bool OnInitGui();
# 582 "/usr/include/wx-3.1-unofficial/wx/app.h"
    virtual int OnRun() override;


    virtual int OnExit() override;




    virtual void CleanUp() override;






    virtual bool SafeYield(wxWindow *win, bool onlyIfNeeded);
    virtual bool SafeYieldFor(wxWindow *win, long eventsToProcess);






    virtual bool ProcessIdle() override;


    virtual bool UsesEventLoop() const override { return true; }






    virtual bool IsActive() const { return m_isActive; }


    void SetTopWindow(wxWindow *win) { m_topWindow = win; }




    virtual wxWindow *GetTopWindow() const;



    static wxWindow *GetMainTopWindow();






    void SetExitOnFrameDelete(bool flag)
        { m_exitOnFrameDelete = flag ? Yes : No; }
    bool GetExitOnFrameDelete() const
        { return m_exitOnFrameDelete == Yes; }







    virtual wxVideoMode GetDisplayMode() const;



    virtual bool SetDisplayMode(const wxVideoMode& ) { return true; }


    void SetUseBestVisual( bool flag, bool forceTrueColour = false )
        { m_useBestVisual = flag; m_forceTrueColour = forceTrueColour; }
    bool GetUseBestVisual() const { return m_useBestVisual; }





    virtual void SetPrintMode(int ) { }
    int GetPrintMode() const { return wxPRINT_POSTSCRIPT; }



    virtual wxLayoutDirection GetLayoutDirection() const;


    virtual bool SetNativeTheme(const wxString& ) { return false; }






    virtual bool OnCmdLineParsed(wxCmdLineParser& parser) override;
    virtual void OnInitCmdLine(wxCmdLineParser& parser) override;
# 685 "/usr/include/wx-3.1-unofficial/wx/app.h"
    virtual void SetActive(bool isActive, wxWindow *lastFocus);

protected:

    virtual wxAppTraits *CreateTraits() override;



    void DeleteAllTLWs();



    wxWindow *m_topWindow;





    enum
    {
        Later = -1,
        No,
        Yes
    } m_exitOnFrameDelete;



    bool m_useBestVisual;

    bool m_forceTrueColour;


    bool m_isActive;

    private: wxAppBase(const wxAppBase&) = delete; wxAppBase& operator=(const wxAppBase&) = delete;
};
# 733 "/usr/include/wx-3.1-unofficial/wx/app.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/gtk/app.h" 1
# 20 "/usr/include/wx-3.1-unofficial/wx/gtk/app.h"
class __attribute__ ((visibility("default"))) wxApp: public wxAppBase
{
public:
    wxApp();
    virtual ~wxApp();





    virtual bool SetNativeTheme(const wxString& theme) override;
    virtual bool OnInitGui() override;


    virtual void WakeUpIdle() override;

    virtual bool Initialize(int& argc, wxChar **argv) override;
    virtual void CleanUp() override;

    virtual void OnAssertFailure(const wxChar *file,
                                 int line,
                                 const wxChar *func,
                                 const wxChar *cond,
                                 const wxChar *msg) override;
# 52 "/usr/include/wx-3.1-unofficial/wx/gtk/app.h"
    virtual void *GetXVisualInfo() { return 
# 52 "/usr/include/wx-3.1-unofficial/wx/gtk/app.h" 3 4
                                           __null
# 52 "/usr/include/wx-3.1-unofficial/wx/gtk/app.h"
                                               ; }






    static bool GTKIsUsingGlobalMenu();





    bool EventsPending();
    bool DoIdle();

private:

    bool m_isInAssert;


    wxMutex m_idleMutex;

    unsigned m_idleSourceId;

    public:
# 77 "/usr/include/wx-3.1-unofficial/wx/gtk/app.h"
#pragma GCC diagnostic push
# 77 "/usr/include/wx-3.1-unofficial/wx/gtk/app.h"
   
# 77 "/usr/include/wx-3.1-unofficial/wx/gtk/app.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 77 "/usr/include/wx-3.1-unofficial/wx/gtk/app.h"
    virtual wxClassInfo *GetClassInfo() const;
# 77 "/usr/include/wx-3.1-unofficial/wx/gtk/app.h"
#pragma GCC diagnostic pop
# 77 "/usr/include/wx-3.1-unofficial/wx/gtk/app.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 734 "/usr/include/wx-3.1-unofficial/wx/app.h" 2
# 775 "/usr/include/wx-3.1-unofficial/wx/app.h"
__attribute__ ((visibility("default"))) void wxExit();
# 788 "/usr/include/wx-3.1-unofficial/wx/app.h"
__attribute__ ((visibility("default"))) void wxWakeUpIdle();
# 798 "/usr/include/wx-3.1-unofficial/wx/app.h"
class __attribute__ ((visibility("default"))) wxAppInitializer
{
public:
    wxAppInitializer(wxAppInitializerFunction fn)
        { wxApp::SetInitializerFunction(fn); }
};
# 902 "/usr/include/wx-3.1-unofficial/wx/app.h"
extern wxAppConsole *wxCreateApp();
extern wxAppInitializer wxTheAppInitializer;
# 14 "/mnt/sda3/Users/LMC/2021/REPOS_2021/2MM4_PROG_AVAN_2021-2/REPO_progavan_2021-2/org_progavan/2021-2/U2_GUI/App11/App11App.h" 2

class App11App : public wxApp
{
    public:
        virtual bool OnInit();
};
# 19 "/mnt/sda3/Users/LMC/2021/REPOS_2021/2MM4_PROG_AVAN_2021-2/REPO_progavan_2021-2/org_progavan/2021-2/U2_GUI/App11/App11App.cpp" 2
# 1 "/mnt/sda3/Users/LMC/2021/REPOS_2021/2MM4_PROG_AVAN_2021-2/REPO_progavan_2021-2/org_progavan/2021-2/U2_GUI/App11/App11Main.h" 1
# 13 "/mnt/sda3/Users/LMC/2021/REPOS_2021/2MM4_PROG_AVAN_2021-2/REPO_progavan_2021-2/org_progavan/2021-2/U2_GUI/App11/App11Main.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/wx.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/wx.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/wx.h" 2



# 1 "/usr/include/wx-3.1-unofficial/wx/hash.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/hash.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/hash.h" 2
# 33 "/usr/include/wx-3.1-unofficial/wx/hash.h"
union wxHashKeyValue
{
    long integer;
    wxString *string;
};



class wxHashTableBase;


class wxHashTableBase_Node;

class __attribute__ ((visibility("default"))) wxHashTableBase_Node
{
    friend class wxHashTableBase;
    typedef class wxHashTableBase_Node _Node;
public:
    wxHashTableBase_Node( long key, void* value,
                          wxHashTableBase* table );
    wxHashTableBase_Node( const wxString& key, void* value,
                          wxHashTableBase* table );
    ~wxHashTableBase_Node();

    long GetKeyInteger() const { return m_key.integer; }
    const wxString& GetKeyString() const { return *m_key.string; }

    void* GetData() const { return m_value; }
    void SetData( void* data ) { m_value = data; }

protected:
    _Node* GetNext() const { return m_next; }

protected:

    wxHashTableBase_Node* m_next;


    wxHashKeyValue m_key;


    void* m_value;






    wxHashTableBase* m_hashPtr;
};

class __attribute__ ((visibility("default"))) wxHashTableBase

    : public wxObject

{
    friend class wxHashTableBase_Node;
public:
    typedef wxHashTableBase_Node Node;

    wxHashTableBase();
    virtual ~wxHashTableBase() { }

    void Create( wxKeyType keyType = wxKEY_INTEGER,
                 size_t size = (1000) );
    void Clear();
    void Destroy();

    size_t GetSize() const { return m_size; }
    size_t GetCount() const { return m_count; }

    void DeleteContents( bool flag ) { m_deleteContents = flag; }

    static long MakeKey(const wxString& string);

protected:
    void DoPut( long key, long hash, void* data );
    void DoPut( const wxString& key, long hash, void* data );
    void* DoGet( long key, long hash ) const;
    void* DoGet( const wxString& key, long hash ) const;
    void* DoDelete( long key, long hash );
    void* DoDelete( const wxString& key, long hash );

private:


    void DoRemoveNode( wxHashTableBase_Node* node );




    void DoDestroyNode( wxHashTableBase_Node* node );


    void DoInsertNode( size_t bucket, wxHashTableBase_Node* node );



    void DoUnlinkNode( size_t bucket, wxHashTableBase_Node* node,
                       wxHashTableBase_Node* prev );



    virtual void DoDeleteContents( wxHashTableBase_Node* node ) = 0;

protected:

    size_t m_size;


    size_t m_count;


    Node** m_table;


    wxKeyType m_keyType;


    bool m_deleteContents;

private:
    private: wxHashTableBase(const wxHashTableBase&) = delete; wxHashTableBase& operator=(const wxHashTableBase&) = delete;
};





class __attribute__ ((visibility("default"))) wxHashTable_Node : public wxHashTableBase_Node
{
    friend class wxHashTable;
public:
    wxHashTable_Node( long key, void* value,
                      wxHashTableBase* table )
        : wxHashTableBase_Node( key, value, table ) { }
    wxHashTable_Node( const wxString& key, void* value,
                      wxHashTableBase* table )
        : wxHashTableBase_Node( key, value, table ) { }

    wxObject* GetData() const
        { return (wxObject*)wxHashTableBase_Node::GetData(); }
    void SetData( wxObject* data )
        { wxHashTableBase_Node::SetData( data ); }

    wxHashTable_Node* GetNext() const
        { return (wxHashTable_Node*)wxHashTableBase_Node::GetNext(); }
};



class __attribute__ ((visibility("default"))) wxHashTable : public wxHashTableBase
{
    typedef wxHashTableBase hash;
public:
    typedef wxHashTable_Node Node;
    typedef wxHashTable_Node* compatibility_iterator;
public:
    wxHashTable( wxKeyType keyType = wxKEY_INTEGER,
                 size_t size = (1000) )
        : wxHashTableBase() { Create( keyType, size ); BeginFind(); }
    wxHashTable( const wxHashTable& table );

    virtual ~wxHashTable() { Destroy(); }

    const wxHashTable& operator=( const wxHashTable& );


    void Put(long value, wxObject *object)
        { DoPut( value, value, object ); }
    void Put(long lhash, long value, wxObject *object)
        { DoPut( value, lhash, object ); }
    void Put(const wxString& value, wxObject *object)
        { DoPut( value, MakeKey( value ), object ); }
    void Put(long lhash, const wxString& value, wxObject *object)
        { DoPut( value, lhash, object ); }


    wxObject *Get(long value) const
        { return (wxObject*)DoGet( value, value ); }
    wxObject *Get(long lhash, long value) const
        { return (wxObject*)DoGet( value, lhash ); }
    wxObject *Get(const wxString& value) const
        { return (wxObject*)DoGet( value, MakeKey( value ) ); }
    wxObject *Get(long lhash, const wxString& value) const
        { return (wxObject*)DoGet( value, lhash ); }


    wxObject *Delete(long key)
        { return (wxObject*)DoDelete( key, key ); }
    wxObject *Delete(long lhash, long key)
        { return (wxObject*)DoDelete( key, lhash ); }
    wxObject *Delete(const wxString& key)
        { return (wxObject*)DoDelete( key, MakeKey( key ) ); }
    wxObject *Delete(long lhash, const wxString& key)
        { return (wxObject*)DoDelete( key, lhash ); }




    void BeginFind() { m_curr = 
# 233 "/usr/include/wx-3.1-unofficial/wx/hash.h" 3 4
                               __null
# 233 "/usr/include/wx-3.1-unofficial/wx/hash.h"
                                   ; m_currBucket = 0; }
    Node* Next();

    void Clear() { wxHashTableBase::Clear(); }

    size_t GetCount() const { return wxHashTableBase::GetCount(); }
protected:

    void DoCopy( const wxHashTable& copy );



    void GetNextNode( size_t bucketStart );
private:
    virtual void DoDeleteContents( wxHashTableBase_Node* node ) override;


    Node* m_curr;


    size_t m_currBucket;
};
# 19 "/usr/include/wx-3.1-unofficial/wx/wx.h" 2
# 27 "/usr/include/wx-3.1-unofficial/wx/wx.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/stream.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/stream.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/stream.h" 2
# 23 "/usr/include/wx-3.1-unofficial/wx/stream.h"
class wxStreamBase;
class wxInputStream;
class wxOutputStream;

typedef wxInputStream& (*__wxInputManip)(wxInputStream&);
typedef wxOutputStream& (*__wxOutputManip)(wxOutputStream&);

__attribute__ ((visibility("default"))) wxOutputStream& wxEndL(wxOutputStream& o_stream);





enum wxStreamError
{
    wxSTREAM_NO_ERROR = 0,
    wxSTREAM_EOF,
    wxSTREAM_WRITE_ERROR,
    wxSTREAM_READ_ERROR
};

const int wxEOF = -1;
# 54 "/usr/include/wx-3.1-unofficial/wx/stream.h"
class __attribute__ ((visibility("default"))) wxStreamBase : public wxObject
{
public:
    wxStreamBase();
    virtual ~wxStreamBase();


    wxStreamError GetLastError() const { return m_lasterror; }
    virtual bool IsOk() const { return GetLastError() == wxSTREAM_NO_ERROR; }
    bool operator!() const { return !IsOk(); }


    void Reset(wxStreamError error = wxSTREAM_NO_ERROR) { m_lasterror = error; }


    virtual size_t GetSize() const;
    virtual wxFileOffset GetLength() const { return wxInvalidOffset; }


    virtual bool IsSeekable() const { return false; }

protected:
    virtual wxFileOffset OnSysSeek(wxFileOffset seek, wxSeekMode mode);
    virtual wxFileOffset OnSysTell() const;

    size_t m_lastcount;
    wxStreamError m_lasterror;

    friend class wxStreamBuffer;

    public:
# 84 "/usr/include/wx-3.1-unofficial/wx/stream.h"
#pragma GCC diagnostic push
# 84 "/usr/include/wx-3.1-unofficial/wx/stream.h"
   
# 84 "/usr/include/wx-3.1-unofficial/wx/stream.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 84 "/usr/include/wx-3.1-unofficial/wx/stream.h"
    virtual wxClassInfo *GetClassInfo() const;
# 84 "/usr/include/wx-3.1-unofficial/wx/stream.h"
#pragma GCC diagnostic pop
# 84 "/usr/include/wx-3.1-unofficial/wx/stream.h"
    static wxClassInfo ms_classInfo;
    private: wxStreamBase(const wxStreamBase&) = delete; wxStreamBase& operator=(const wxStreamBase&) = delete;
};





class __attribute__ ((visibility("default"))) wxInputStream : public wxStreamBase
{
public:

    wxInputStream();
    virtual ~wxInputStream();
# 109 "/usr/include/wx-3.1-unofficial/wx/stream.h"
    virtual char Peek();





    int GetC();
# 128 "/usr/include/wx-3.1-unofficial/wx/stream.h"
    virtual wxInputStream& Read(void *buffer, size_t size);




    bool ReadAll(void *buffer, size_t size);



    wxInputStream& Read(wxOutputStream& streamOut);
# 148 "/usr/include/wx-3.1-unofficial/wx/stream.h"
    virtual size_t LastRead() const { return wxStreamBase::m_lastcount; }



    virtual bool CanRead() const;





    virtual bool Eof() const;
# 168 "/usr/include/wx-3.1-unofficial/wx/stream.h"
    size_t Ungetch(const void *buffer, size_t size);




    bool Ungetch(char c);
# 183 "/usr/include/wx-3.1-unofficial/wx/stream.h"
    virtual wxFileOffset SeekI(wxFileOffset pos, wxSeekMode mode = wxFromStart);


    virtual wxFileOffset TellI() const;





    wxInputStream& operator>>(wxOutputStream& out) { return Read(out); }
    wxInputStream& operator>>(__wxInputManip func) { return func(*this); }

protected:





    virtual size_t OnSysRead(void *buffer, size_t size) = 0;





    char *AllocSpaceWBack(size_t sizeNeeded);



    size_t GetWBack(void *buf, size_t size);


    char *m_wback;


    size_t m_wbacksize;


    size_t m_wbackcur;

    friend class wxStreamBuffer;

    public:
# 224 "/usr/include/wx-3.1-unofficial/wx/stream.h"
#pragma GCC diagnostic push
# 224 "/usr/include/wx-3.1-unofficial/wx/stream.h"
   
# 224 "/usr/include/wx-3.1-unofficial/wx/stream.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 224 "/usr/include/wx-3.1-unofficial/wx/stream.h"
    virtual wxClassInfo *GetClassInfo() const;
# 224 "/usr/include/wx-3.1-unofficial/wx/stream.h"
#pragma GCC diagnostic pop
# 224 "/usr/include/wx-3.1-unofficial/wx/stream.h"
    static wxClassInfo ms_classInfo;
    private: wxInputStream(const wxInputStream&) = delete; wxInputStream& operator=(const wxInputStream&) = delete;
};





class __attribute__ ((visibility("default"))) wxOutputStream : public wxStreamBase
{
public:
    wxOutputStream();
    virtual ~wxOutputStream();

    void PutC(char c);
    virtual wxOutputStream& Write(const void *buffer, size_t size);




    bool WriteAll(const void *buffer, size_t size);

    wxOutputStream& Write(wxInputStream& stream_in);

    virtual wxFileOffset SeekO(wxFileOffset pos, wxSeekMode mode = wxFromStart);
    virtual wxFileOffset TellO() const;

    virtual size_t LastWrite() const { return wxStreamBase::m_lastcount; }

    virtual void Sync();
    virtual bool Close() { return true; }

    wxOutputStream& operator<<(wxInputStream& out) { return Write(out); }
    wxOutputStream& operator<<( __wxOutputManip func) { return func(*this); }

protected:


    virtual size_t OnSysWrite(const void *buffer, size_t bufsize);

    friend class wxStreamBuffer;

    public:
# 266 "/usr/include/wx-3.1-unofficial/wx/stream.h"
#pragma GCC diagnostic push
# 266 "/usr/include/wx-3.1-unofficial/wx/stream.h"
   
# 266 "/usr/include/wx-3.1-unofficial/wx/stream.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 266 "/usr/include/wx-3.1-unofficial/wx/stream.h"
    virtual wxClassInfo *GetClassInfo() const;
# 266 "/usr/include/wx-3.1-unofficial/wx/stream.h"
#pragma GCC diagnostic pop
# 266 "/usr/include/wx-3.1-unofficial/wx/stream.h"
    static wxClassInfo ms_classInfo;
    private: wxOutputStream(const wxOutputStream&) = delete; wxOutputStream& operator=(const wxOutputStream&) = delete;
};
# 278 "/usr/include/wx-3.1-unofficial/wx/stream.h"
class __attribute__ ((visibility("default"))) wxCountingOutputStream : public wxOutputStream
{
public:
    wxCountingOutputStream();

    virtual wxFileOffset GetLength() const override;
    bool Ok() const { return IsOk(); }
    virtual bool IsOk() const override { return true; }

protected:
    virtual size_t OnSysWrite(const void *buffer, size_t size) override;
    virtual wxFileOffset OnSysSeek(wxFileOffset pos, wxSeekMode mode) override;
    virtual wxFileOffset OnSysTell() const override;

    size_t m_currentPos,
           m_lastPos;

    public:
# 295 "/usr/include/wx-3.1-unofficial/wx/stream.h"
#pragma GCC diagnostic push
# 295 "/usr/include/wx-3.1-unofficial/wx/stream.h"
   
# 295 "/usr/include/wx-3.1-unofficial/wx/stream.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 295 "/usr/include/wx-3.1-unofficial/wx/stream.h"
    virtual wxClassInfo *GetClassInfo() const;
# 295 "/usr/include/wx-3.1-unofficial/wx/stream.h"
#pragma GCC diagnostic pop
# 295 "/usr/include/wx-3.1-unofficial/wx/stream.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
    private: wxCountingOutputStream(const wxCountingOutputStream&) = delete; wxCountingOutputStream& operator=(const wxCountingOutputStream&) = delete;
};





class __attribute__ ((visibility("default"))) wxFilterInputStream : public wxInputStream
{
public:
    wxFilterInputStream();
    wxFilterInputStream(wxInputStream& stream);
    wxFilterInputStream(wxInputStream *stream);
    virtual ~wxFilterInputStream();

    virtual char Peek() override { return m_parent_i_stream->Peek(); }

    virtual wxFileOffset GetLength() const override { return m_parent_i_stream->GetLength(); }

    wxInputStream *GetFilterInputStream() const { return m_parent_i_stream; }

protected:
    wxInputStream *m_parent_i_stream;
    bool m_owns;

    public:
# 321 "/usr/include/wx-3.1-unofficial/wx/stream.h"
#pragma GCC diagnostic push
# 321 "/usr/include/wx-3.1-unofficial/wx/stream.h"
   
# 321 "/usr/include/wx-3.1-unofficial/wx/stream.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 321 "/usr/include/wx-3.1-unofficial/wx/stream.h"
    virtual wxClassInfo *GetClassInfo() const;
# 321 "/usr/include/wx-3.1-unofficial/wx/stream.h"
#pragma GCC diagnostic pop
# 321 "/usr/include/wx-3.1-unofficial/wx/stream.h"
    static wxClassInfo ms_classInfo;
    private: wxFilterInputStream(const wxFilterInputStream&) = delete; wxFilterInputStream& operator=(const wxFilterInputStream&) = delete;
};

class __attribute__ ((visibility("default"))) wxFilterOutputStream : public wxOutputStream
{
public:
    wxFilterOutputStream();
    wxFilterOutputStream(wxOutputStream& stream);
    wxFilterOutputStream(wxOutputStream *stream);
    virtual ~wxFilterOutputStream();

    virtual wxFileOffset GetLength() const override { return m_parent_o_stream->GetLength(); }

    wxOutputStream *GetFilterOutputStream() const { return m_parent_o_stream; }

    bool Close() override;

protected:
    wxOutputStream *m_parent_o_stream;
    bool m_owns;

    public:
# 343 "/usr/include/wx-3.1-unofficial/wx/stream.h"
#pragma GCC diagnostic push
# 343 "/usr/include/wx-3.1-unofficial/wx/stream.h"
   
# 343 "/usr/include/wx-3.1-unofficial/wx/stream.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 343 "/usr/include/wx-3.1-unofficial/wx/stream.h"
    virtual wxClassInfo *GetClassInfo() const;
# 343 "/usr/include/wx-3.1-unofficial/wx/stream.h"
#pragma GCC diagnostic pop
# 343 "/usr/include/wx-3.1-unofficial/wx/stream.h"
    static wxClassInfo ms_classInfo;
    private: wxFilterOutputStream(const wxFilterOutputStream&) = delete; wxFilterOutputStream& operator=(const wxFilterOutputStream&) = delete;
};

enum wxStreamProtocolType
{
    wxSTREAM_PROTOCOL,
    wxSTREAM_MIMETYPE,
    wxSTREAM_ENCODING,
    wxSTREAM_FILEEXT
};

void __attribute__ ((visibility("default"))) wxUseFilterClasses();

class __attribute__ ((visibility("default"))) wxFilterClassFactoryBase : public wxObject
{
public:
    virtual ~wxFilterClassFactoryBase() { }

    wxString GetProtocol() const { return wxString(*GetProtocols()); }
    wxString PopExtension(const wxString& location) const;

    virtual const wxChar * const *GetProtocols(wxStreamProtocolType type
                                               = wxSTREAM_PROTOCOL) const = 0;

    bool CanHandle(const wxString& protocol,
                   wxStreamProtocolType type
                   = wxSTREAM_PROTOCOL) const;

protected:
    wxString::size_type FindExtension(const wxString& location) const;

    public:
# 375 "/usr/include/wx-3.1-unofficial/wx/stream.h"
#pragma GCC diagnostic push
# 375 "/usr/include/wx-3.1-unofficial/wx/stream.h"
   
# 375 "/usr/include/wx-3.1-unofficial/wx/stream.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 375 "/usr/include/wx-3.1-unofficial/wx/stream.h"
    virtual wxClassInfo *GetClassInfo() const;
# 375 "/usr/include/wx-3.1-unofficial/wx/stream.h"
#pragma GCC diagnostic pop
# 375 "/usr/include/wx-3.1-unofficial/wx/stream.h"
    static wxClassInfo ms_classInfo;
};

class __attribute__ ((visibility("default"))) wxFilterClassFactory : public wxFilterClassFactoryBase
{
public:
    virtual ~wxFilterClassFactory() { }

    virtual wxFilterInputStream *NewStream(wxInputStream& stream) const = 0;
    virtual wxFilterOutputStream *NewStream(wxOutputStream& stream) const = 0;
    virtual wxFilterInputStream *NewStream(wxInputStream *stream) const = 0;
    virtual wxFilterOutputStream *NewStream(wxOutputStream *stream) const = 0;

    static const wxFilterClassFactory *Find(const wxString& protocol,
                                            wxStreamProtocolType type
                                            = wxSTREAM_PROTOCOL);

    static const wxFilterClassFactory *GetFirst();
    const wxFilterClassFactory *GetNext() const { return m_next; }

    void PushFront() { Remove(); m_next = sm_first; sm_first = this; }
    void Remove();

protected:
    wxFilterClassFactory() : m_next(this) { }

    wxFilterClassFactory& operator=(const wxFilterClassFactory&)
        { return *this; }

private:
    static wxFilterClassFactory *sm_first;
    wxFilterClassFactory *m_next;

    public:
# 408 "/usr/include/wx-3.1-unofficial/wx/stream.h"
#pragma GCC diagnostic push
# 408 "/usr/include/wx-3.1-unofficial/wx/stream.h"
   
# 408 "/usr/include/wx-3.1-unofficial/wx/stream.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 408 "/usr/include/wx-3.1-unofficial/wx/stream.h"
    virtual wxClassInfo *GetClassInfo() const;
# 408 "/usr/include/wx-3.1-unofficial/wx/stream.h"
#pragma GCC diagnostic pop
# 408 "/usr/include/wx-3.1-unofficial/wx/stream.h"
    static wxClassInfo ms_classInfo;
};
# 420 "/usr/include/wx-3.1-unofficial/wx/stream.h"
class __attribute__ ((visibility("default"))) wxStreamBuffer
{
public:

   

    enum BufMode
    {
        read,
        write,
        read_write
    };

   

    wxStreamBuffer(wxStreamBase& stream, BufMode mode)
    {
        InitWithStream(stream, mode);
    }

    wxStreamBuffer(size_t bufsize, wxInputStream& stream)
    {
        InitWithStream(stream, read);
        SetBufferIO(bufsize);
    }

    wxStreamBuffer(size_t bufsize, wxOutputStream& stream)
    {
        InitWithStream(stream, write);
        SetBufferIO(bufsize);
    }

    wxStreamBuffer(const wxStreamBuffer& buf);
    virtual ~wxStreamBuffer();


    virtual size_t Read(void *buffer, size_t size);
    size_t Read(wxStreamBuffer *buf);
    virtual size_t Write(const void *buffer, size_t size);
    size_t Write(wxStreamBuffer *buf);

    virtual char Peek();
    virtual char GetChar();
    virtual void PutChar(char c);
    virtual wxFileOffset Tell() const;
    virtual wxFileOffset Seek(wxFileOffset pos, wxSeekMode mode);


    void ResetBuffer();
    void Truncate();



    void SetBufferIO(void *start, void *end, bool takeOwnership = false);
    void SetBufferIO(void *start, size_t len, bool takeOwnership = false);
    void SetBufferIO(size_t bufsize);
    void *GetBufferStart() const { return m_buffer_start; }
    void *GetBufferEnd() const { return m_buffer_end; }
    void *GetBufferPos() const { return m_buffer_pos; }
    size_t GetBufferSize() const { return m_buffer_end - m_buffer_start; }
    size_t GetIntPosition() const { return m_buffer_pos - m_buffer_start; }
    void SetIntPosition(size_t pos) { m_buffer_pos = m_buffer_start + pos; }
    size_t GetLastAccess() const { return m_buffer_end - m_buffer_start; }
    size_t GetBytesLeft() const { return m_buffer_end - m_buffer_pos; }

    void Fixed(bool fixed) { m_fixed = fixed; }
    void Flushable(bool f) { m_flushable = f; }

    bool FlushBuffer();
    bool FillBuffer();
    size_t GetDataLeft();


    wxStreamBase *GetStream() const { return m_stream; }
    bool HasBuffer() const { return m_buffer_start != m_buffer_end; }

    bool IsFixed() const { return m_fixed; }
    bool IsFlushable() const { return m_flushable; }


    wxInputStream *GetInputStream() const;
    wxOutputStream *GetOutputStream() const;



    wxStreamBuffer(BufMode mode);

protected:
    void GetFromBuffer(void *buffer, size_t size);
    void PutToBuffer(const void *buffer, size_t size);


    void SetError(wxStreamError err);


    void Init();


    void InitWithStream(wxStreamBase& stream, BufMode mode);


    void InitBuffer();


    void FreeBuffer();



    char *m_buffer_start,
         *m_buffer_end,
         *m_buffer_pos;


    wxStreamBase *m_stream;


    BufMode m_mode;


    bool m_destroybuf,
         m_fixed,
         m_flushable;


    private: wxStreamBuffer& operator=(const wxStreamBuffer&) = delete;
};





class __attribute__ ((visibility("default"))) wxBufferedInputStream : public wxFilterInputStream
{
public:




    wxBufferedInputStream(wxInputStream& stream,
                          wxStreamBuffer *buffer = 
# 559 "/usr/include/wx-3.1-unofficial/wx/stream.h" 3 4
                                                  __null
# 559 "/usr/include/wx-3.1-unofficial/wx/stream.h"
                                                      );




    wxBufferedInputStream(wxInputStream& stream, size_t bufsize);


    virtual ~wxBufferedInputStream();

    virtual char Peek() override;
    virtual wxInputStream& Read(void *buffer, size_t size) override;


    virtual wxFileOffset SeekI(wxFileOffset pos, wxSeekMode mode = wxFromStart) override;
    virtual wxFileOffset TellI() const override;
    virtual bool IsSeekable() const override { return m_parent_i_stream->IsSeekable(); }


    void SetInputStreamBuffer(wxStreamBuffer *buffer);
    wxStreamBuffer *GetInputStreamBuffer() const { return m_i_streambuf; }

protected:
    virtual size_t OnSysRead(void *buffer, size_t bufsize) override;
    virtual wxFileOffset OnSysSeek(wxFileOffset seek, wxSeekMode mode) override;
    virtual wxFileOffset OnSysTell() const override;

    wxStreamBuffer *m_i_streambuf;

    private: wxBufferedInputStream(const wxBufferedInputStream&) = delete; wxBufferedInputStream& operator=(const wxBufferedInputStream&) = delete;
};





class __attribute__ ((visibility("default"))) wxBufferedOutputStream : public wxFilterOutputStream
{
public:




    wxBufferedOutputStream(wxOutputStream& stream,
                           wxStreamBuffer *buffer = 
# 603 "/usr/include/wx-3.1-unofficial/wx/stream.h" 3 4
                                                   __null
# 603 "/usr/include/wx-3.1-unofficial/wx/stream.h"
                                                       );




    wxBufferedOutputStream(wxOutputStream& stream, size_t bufsize);

    virtual ~wxBufferedOutputStream();

    virtual wxOutputStream& Write(const void *buffer, size_t size) override;


    virtual wxFileOffset SeekO(wxFileOffset pos, wxSeekMode mode = wxFromStart) override;
    virtual wxFileOffset TellO() const override;
    virtual bool IsSeekable() const override { return m_parent_o_stream->IsSeekable(); }

    void Sync() override;
    bool Close() override;

    virtual wxFileOffset GetLength() const override;


    void SetOutputStreamBuffer(wxStreamBuffer *buffer);
    wxStreamBuffer *GetOutputStreamBuffer() const { return m_o_streambuf; }

protected:
    virtual size_t OnSysWrite(const void *buffer, size_t bufsize) override;
    virtual wxFileOffset OnSysSeek(wxFileOffset seek, wxSeekMode mode) override;
    virtual wxFileOffset OnSysTell() const override;

    wxStreamBuffer *m_o_streambuf;

    private: wxBufferedOutputStream(const wxBufferedOutputStream&) = delete; wxBufferedOutputStream& operator=(const wxBufferedOutputStream&) = delete;
};





class __attribute__ ((visibility("default"))) wxWrapperInputStream : public wxFilterInputStream
{
public:






    wxWrapperInputStream(wxInputStream& stream);
    wxWrapperInputStream(wxInputStream* stream);


    virtual wxFileOffset GetLength() const override;
    virtual bool IsSeekable() const override;

protected:
    virtual size_t OnSysRead(void *buffer, size_t size) override;
    virtual wxFileOffset OnSysSeek(wxFileOffset pos, wxSeekMode mode) override;
    virtual wxFileOffset OnSysTell() const override;






    void SynchronizeLastError() const
    {
        const_cast<wxWrapperInputStream*>(this)->
            Reset(m_parent_i_stream->GetLastError());
    }


    wxWrapperInputStream();



    void InitParentStream(wxInputStream& stream);
    void InitParentStream(wxInputStream* stream);

    private: wxWrapperInputStream(const wxWrapperInputStream&) = delete; wxWrapperInputStream& operator=(const wxWrapperInputStream&) = delete;
};
# 28 "/usr/include/wx-3.1-unofficial/wx/wx.h" 2


# 1 "/usr/include/wx-3.1-unofficial/wx/stopwatch.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/stopwatch.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 16 "/usr/include/wx-3.1-unofficial/wx/stopwatch.h" 2
# 29 "/usr/include/wx-3.1-unofficial/wx/stopwatch.h"
class __attribute__ ((visibility("default"))) wxStopWatch
{
public:

    wxStopWatch() { m_pauseCount = 0; Start(); }




    void Start(long t0 = 0);


    void Pause()
    {
        if ( m_pauseCount++ == 0 )
            m_elapsedBeforePause = GetCurrentClockValue() - m_t0;
    }


    void Resume()
    {
        do { if ( m_pauseCount > 0 ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/stopwatch.h", 50, __FUNCTION__, "m_pauseCount > 0", L"Resuming stop watch which is not paused"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 )
                                                                      ;

        if ( --m_pauseCount == 0 )
        {
            DoStart();
            m_t0 -= m_elapsedBeforePause;
        }
    }


    wxLongLong TimeInMicro() const;


    long Time() const { return (TimeInMicro()/1000).ToLong(); }

private:


    void DoStart();


    wxLongLong GetCurrentClockValue() const;


    wxLongLong GetClockFreq() const;




    wxLongLong m_t0;



    wxLongLong m_elapsedBeforePause;


    int m_pauseCount;
};
# 31 "/usr/include/wx-3.1-unofficial/wx/wx.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/timer.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/timer.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 16 "/usr/include/wx-3.1-unofficial/wx/timer.h" 2
# 34 "/usr/include/wx-3.1-unofficial/wx/timer.h"
class wxTimerImpl;
class wxTimerEvent;


extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxTimerEvent > wxEVT_TIMER;


class __attribute__ ((visibility("default"))) wxTimer : public wxEvtHandler
{
public:





    wxTimer()
    {
        Init();
        SetOwner(this);
    }




    wxTimer(wxEvtHandler *owner, int timerid = wxID_ANY)
    {
        Init();
        SetOwner(owner, timerid);
    }


    void SetOwner(wxEvtHandler *owner, int timerid = wxID_ANY);

    virtual ~wxTimer();
# 81 "/usr/include/wx-3.1-unofficial/wx/timer.h"
    virtual bool Start(int milliseconds = -1, bool oneShot = false);



    bool StartOnce(int milliseconds = -1) { return Start(milliseconds, true); }


    virtual void Stop();



    virtual void Notify();






    wxEvtHandler *GetOwner() const;


    bool IsRunning() const;


    int GetId() const;


    int GetInterval() const;


    bool IsOneShot() const;

protected:

    void Init();

    wxTimerImpl *m_impl;

    private: wxTimer(const wxTimer&) = delete; wxTimer& operator=(const wxTimer&) = delete;
};





class __attribute__ ((visibility("default"))) wxTimerRunner
{
public:
    wxTimerRunner(wxTimer& timer) : m_timer(timer) { }
    wxTimerRunner(wxTimer& timer, int milli, bool oneShot = false)
        : m_timer(timer)
    {
        m_timer.Start(milli, oneShot);
    }

    void Start(int milli, bool oneShot = false)
    {
        m_timer.Start(milli, oneShot);
    }

    ~wxTimerRunner()
    {
        if ( m_timer.IsRunning() )
        {
            m_timer.Stop();
        }
    }

private:
    wxTimer& m_timer;

    private: wxTimerRunner(const wxTimerRunner&) = delete; wxTimerRunner& operator=(const wxTimerRunner&) = delete;
};





class __attribute__ ((visibility("default"))) wxTimerEvent : public wxEvent
{
public:
    wxTimerEvent(wxTimer& timer)
        : wxEvent(timer.GetId(), wxEVT_TIMER),
          m_timer(&timer)
    {
        SetEventObject(timer.GetOwner());
    }


    int GetInterval() const { return m_timer->GetInterval(); }
    wxTimer& GetTimer() const { return *m_timer; }


    virtual wxEvent *Clone() const override { return new wxTimerEvent(*this); }
    virtual wxEventCategory GetEventCategory() const override { return wxEVT_CATEGORY_TIMER; }




    __attribute__((deprecated("wxTimerEvent not supposed to be created by user code")))
    wxTimerEvent()
        : wxEvent(wxID_ANY, wxEVT_TIMER) { m_timer=
# 182 "/usr/include/wx-3.1-unofficial/wx/timer.h" 3 4
                                                  __null
# 182 "/usr/include/wx-3.1-unofficial/wx/timer.h"
                                                      ; }


private:
    wxTimer* m_timer;

    private: wxTimerEvent& operator=(const wxTimerEvent&) = delete; public:
# 188 "/usr/include/wx-3.1-unofficial/wx/timer.h"
#pragma GCC diagnostic push
# 188 "/usr/include/wx-3.1-unofficial/wx/timer.h"
   
# 188 "/usr/include/wx-3.1-unofficial/wx/timer.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 188 "/usr/include/wx-3.1-unofficial/wx/timer.h"
    virtual wxClassInfo *GetClassInfo() const;
# 188 "/usr/include/wx-3.1-unofficial/wx/timer.h"
#pragma GCC diagnostic pop
# 188 "/usr/include/wx-3.1-unofficial/wx/timer.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};

typedef void (wxEvtHandler::*wxTimerEventFunction)(wxTimerEvent&);
# 32 "/usr/include/wx-3.1-unofficial/wx/wx.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/module.h" 1
# 17 "/usr/include/wx-3.1-unofficial/wx/module.h"
class wxModule;

typedef wxVector<wxModule*> wxModuleList;




class __attribute__ ((visibility("default"))) wxModule : public wxObject
{
public:
    wxModule() {}
    virtual ~wxModule() {}




    bool Init() { return OnInit(); }
    void Exit() { OnExit(); }





    virtual bool OnInit() = 0;




    virtual void OnExit() = 0;

    static void RegisterModule(wxModule *module);
    static void RegisterModules();
    static bool InitializeModules();
    static void CleanUpModules();
    static bool AreInitialized() { return ms_areInitialized; }



    static void UnregisterModule(wxModule *module);

protected:
    static wxModuleList ms_modules;

    static bool ms_areInitialized;




    void AddDependency(wxClassInfo *dep)
    {
        if ( dep ) {} else { do { if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/module.h", 67, __FUNCTION__, "\"dep\"", L"NULL module dependency"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); return; } struct wxDummyCheckStruct67;

        m_dependencies.push_back(dep);
    }



    void AddDependency(const char *className)
    {
        m_namedDependencies.push_back(wxString::FromAscii(className));
    }


private:


    static bool
    DoInitializeModule(wxModule *module, wxModuleList &initializedModules);




    static void DoCleanUpModules(const wxModuleList& modules);


    bool ResolveNamedDependencies();




    typedef wxVector<wxClassInfo*> wxArrayClassInfo;
    wxArrayClassInfo m_dependencies;



    wxVector<wxString> m_namedDependencies;


    enum
    {
        State_Registered,
        State_Initializing,
        State_Initialized
    } m_state;


    public:
# 113 "/usr/include/wx-3.1-unofficial/wx/module.h"
#pragma GCC diagnostic push
# 113 "/usr/include/wx-3.1-unofficial/wx/module.h"
   
# 113 "/usr/include/wx-3.1-unofficial/wx/module.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 113 "/usr/include/wx-3.1-unofficial/wx/module.h"
    virtual wxClassInfo *GetClassInfo() const;
# 113 "/usr/include/wx-3.1-unofficial/wx/module.h"
#pragma GCC diagnostic pop
# 113 "/usr/include/wx-3.1-unofficial/wx/module.h"
    static wxClassInfo ms_classInfo;
};
# 33 "/usr/include/wx-3.1-unofficial/wx/wx.h" 2

# 1 "/usr/include/wx-3.1-unofficial/wx/wxcrtvararg.h" 1
# 242 "/usr/include/wx-3.1-unofficial/wx/wxcrtvararg.h"
   
# 259 "/usr/include/wx-3.1-unofficial/wx/wxcrtvararg.h"
   
# 278 "/usr/include/wx-3.1-unofficial/wx/wxcrtvararg.h"

# 278 "/usr/include/wx-3.1-unofficial/wx/wxcrtvararg.h"
#pragma GCC diagnostic push
# 278 "/usr/include/wx-3.1-unofficial/wx/wxcrtvararg.h"

# 278 "/usr/include/wx-3.1-unofficial/wx/wxcrtvararg.h"
#pragma GCC diagnostic ignored "-Wformat-nonliteral"
# 278 "/usr/include/wx-3.1-unofficial/wx/wxcrtvararg.h"


template<typename T1> int wxPrintf(const wxFormatString& f1, T1 a1) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return wprintf(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get()); } template<typename T1, typename T2> int wxPrintf(const wxFormatString& f1, T1 a1, T2 a2) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return wprintf(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get()); } template<typename T1, typename T2, typename T3> int wxPrintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return wprintf(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get()); } template<typename T1, typename T2, typename T3, typename T4> int wxPrintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return wprintf(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5> int wxPrintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return wprintf(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> int wxPrintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return wprintf(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> int wxPrintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return wprintf(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8> int wxPrintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return wprintf(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> int wxPrintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return wprintf(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10> int wxPrintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return wprintf(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11> int wxPrintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return wprintf(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12> int wxPrintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return wprintf(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13> int wxPrintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return wprintf(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14> int wxPrintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return wprintf(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15> int wxPrintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return wprintf(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16> int wxPrintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return wprintf(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17> int wxPrintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return wprintf(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18> int wxPrintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return wprintf(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19> int wxPrintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return wprintf(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20> int wxPrintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return wprintf(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21> int wxPrintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return wprintf(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22> int wxPrintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return wprintf(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23> int wxPrintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return wprintf(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24> int wxPrintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return wprintf(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25> int wxPrintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return wprintf(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26> int wxPrintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return wprintf(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27> int wxPrintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return wprintf(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28> int wxPrintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return wprintf(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29> int wxPrintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return wprintf(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get(), wxArgNormalizerWchar<T29>(a29, fmt, 29).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29, typename T30> int wxPrintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29, T30 a30) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return wprintf(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get(), wxArgNormalizerWchar<T29>(a29, fmt, 29).get(), wxArgNormalizerWchar<T30>(a30, fmt, 30).get()); }

inline int wxPrintf(const wxFormatString& s)
{
    return wxPrintf(wxString::FromAscii("%s"), s.InputAsString());
}

template<typename T1> int wxFprintf(FILE* f1, const wxFormatString& f2, T1 a1) { typedef FILE* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return fwprintf(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get()); } template<typename T1, typename T2> int wxFprintf(FILE* f1, const wxFormatString& f2, T1 a1, T2 a2) { typedef FILE* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return fwprintf(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get()); } template<typename T1, typename T2, typename T3> int wxFprintf(FILE* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3) { typedef FILE* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return fwprintf(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get()); } template<typename T1, typename T2, typename T3, typename T4> int wxFprintf(FILE* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4) { typedef FILE* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return fwprintf(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5> int wxFprintf(FILE* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5) { typedef FILE* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return fwprintf(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> int wxFprintf(FILE* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6) { typedef FILE* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return fwprintf(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> int wxFprintf(FILE* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7) { typedef FILE* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return fwprintf(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8> int wxFprintf(FILE* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8) { typedef FILE* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return fwprintf(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> int wxFprintf(FILE* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9) { typedef FILE* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return fwprintf(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10> int wxFprintf(FILE* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10) { typedef FILE* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return fwprintf(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11> int wxFprintf(FILE* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11) { typedef FILE* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return fwprintf(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12> int wxFprintf(FILE* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12) { typedef FILE* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return fwprintf(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13> int wxFprintf(FILE* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13) { typedef FILE* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return fwprintf(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14> int wxFprintf(FILE* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14) { typedef FILE* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return fwprintf(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15> int wxFprintf(FILE* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15) { typedef FILE* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return fwprintf(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16> int wxFprintf(FILE* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16) { typedef FILE* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return fwprintf(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17> int wxFprintf(FILE* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17) { typedef FILE* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return fwprintf(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18> int wxFprintf(FILE* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18) { typedef FILE* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return fwprintf(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19> int wxFprintf(FILE* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19) { typedef FILE* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return fwprintf(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20> int wxFprintf(FILE* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20) { typedef FILE* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return fwprintf(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21> int wxFprintf(FILE* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21) { typedef FILE* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return fwprintf(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22> int wxFprintf(FILE* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22) { typedef FILE* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return fwprintf(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23> int wxFprintf(FILE* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23) { typedef FILE* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return fwprintf(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24> int wxFprintf(FILE* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24) { typedef FILE* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return fwprintf(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25> int wxFprintf(FILE* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25) { typedef FILE* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return fwprintf(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26> int wxFprintf(FILE* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26) { typedef FILE* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return fwprintf(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27> int wxFprintf(FILE* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27) { typedef FILE* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return fwprintf(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28> int wxFprintf(FILE* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28) { typedef FILE* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return fwprintf(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29> int wxFprintf(FILE* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29) { typedef FILE* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return fwprintf(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get(), wxArgNormalizerWchar<T29>(a29, fmt, 29).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29, typename T30> int wxFprintf(FILE* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29, T30 a30) { typedef FILE* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return fwprintf(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get(), wxArgNormalizerWchar<T29>(a29, fmt, 29).get(), wxArgNormalizerWchar<T30>(a30, fmt, 30).get()); }

inline int wxFprintf(FILE *f, const wxFormatString& s)
{
    return wxFprintf(f, wxString::FromAscii("%s"), s.InputAsString());
}


# 294 "/usr/include/wx-3.1-unofficial/wx/wxcrtvararg.h"
#pragma GCC diagnostic pop
# 294 "/usr/include/wx-3.1-unofficial/wx/wxcrtvararg.h"

# 316 "/usr/include/wx-3.1-unofficial/wx/wxcrtvararg.h"
inline int
wxVprintf(const wxString& format, va_list ap)
{
    return vwprintf (wxFormatString(format), ap)
                                                       ;
}

inline int
wxVfprintf(FILE *f, const wxString& format, va_list ap)
{
    return vfwprintf (f, wxFormatString(format), ap)
                                                         ;
}
# 337 "/usr/include/wx-3.1-unofficial/wx/wxcrtvararg.h"
int __attribute__ ((visibility("default"))) wxDoSprintfWchar(char *str, const wxChar *format, ...);




inline int wxSprintf(char* f1, const wxFormatString& f2) { return wxDoSprintfWchar(f1, f2); } template<typename T1> int wxSprintf(char* f1, const wxFormatString& f2, T1 a1) { typedef char* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get()); } template<typename T1, typename T2> int wxSprintf(char* f1, const wxFormatString& f2, T1 a1, T2 a2) { typedef char* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get()); } template<typename T1, typename T2, typename T3> int wxSprintf(char* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3) { typedef char* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get()); } template<typename T1, typename T2, typename T3, typename T4> int wxSprintf(char* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4) { typedef char* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5> int wxSprintf(char* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5) { typedef char* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> int wxSprintf(char* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6) { typedef char* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> int wxSprintf(char* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7) { typedef char* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8> int wxSprintf(char* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8) { typedef char* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> int wxSprintf(char* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9) { typedef char* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10> int wxSprintf(char* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10) { typedef char* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11> int wxSprintf(char* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11) { typedef char* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12> int wxSprintf(char* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12) { typedef char* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13> int wxSprintf(char* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13) { typedef char* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14> int wxSprintf(char* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14) { typedef char* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15> int wxSprintf(char* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15) { typedef char* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16> int wxSprintf(char* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16) { typedef char* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17> int wxSprintf(char* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17) { typedef char* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18> int wxSprintf(char* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18) { typedef char* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19> int wxSprintf(char* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19) { typedef char* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20> int wxSprintf(char* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20) { typedef char* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21> int wxSprintf(char* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21) { typedef char* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22> int wxSprintf(char* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22) { typedef char* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23> int wxSprintf(char* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23) { typedef char* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24> int wxSprintf(char* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24) { typedef char* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25> int wxSprintf(char* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25) { typedef char* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26> int wxSprintf(char* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26) { typedef char* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27> int wxSprintf(char* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27) { typedef char* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28> int wxSprintf(char* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28) { typedef char* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29> int wxSprintf(char* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29) { typedef char* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get(), wxArgNormalizerWchar<T29>(a29, fmt, 29).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29, typename T30> int wxSprintf(char* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29, T30 a30) { typedef char* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get(), wxArgNormalizerWchar<T29>(a29, fmt, 29).get(), wxArgNormalizerWchar<T30>(a30, fmt, 30).get()); }


int __attribute__ ((visibility("default")))
wxVsprintf(char *str, const wxString& format, va_list argptr);


int __attribute__ ((visibility("default"))) wxDoSnprintfWchar(char *str, size_t size, const wxChar *format, ...);




inline int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3) { return wxDoSnprintfWchar(f1, f2, f3); } template<typename T1> int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3, T1 a1) { typedef char* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get()); } template<typename T1, typename T2> int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2) { typedef char* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get()); } template<typename T1, typename T2, typename T3> int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3) { typedef char* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get()); } template<typename T1, typename T2, typename T3, typename T4> int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4) { typedef char* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5> int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5) { typedef char* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6) { typedef char* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7) { typedef char* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8> int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8) { typedef char* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9) { typedef char* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10> int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10) { typedef char* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11> int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11) { typedef char* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12> int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12) { typedef char* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13> int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13) { typedef char* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14> int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14) { typedef char* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15> int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15) { typedef char* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16> int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16) { typedef char* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17> int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17) { typedef char* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18> int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18) { typedef char* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19> int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19) { typedef char* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20> int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20) { typedef char* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21> int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21) { typedef char* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22> int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22) { typedef char* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23> int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23) { typedef char* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24> int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24) { typedef char* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25> int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25) { typedef char* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26> int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26) { typedef char* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27> int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27) { typedef char* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28> int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28) { typedef char* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29> int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29) { typedef char* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get(), wxArgNormalizerWchar<T29>(a29, fmt, 29).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29, typename T30> int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29, T30 a30) { typedef char* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get(), wxArgNormalizerWchar<T29>(a29, fmt, 29).get(), wxArgNormalizerWchar<T30>(a30, fmt, 30).get()); }


int __attribute__ ((visibility("default")))
wxVsnprintf(char *str, size_t size, const wxString& format, va_list argptr);




int __attribute__ ((visibility("default"))) wxDoSprintfWchar(wchar_t *str, const wxChar *format, ...);




inline int wxSprintf(wchar_t* f1, const wxFormatString& f2) { return wxDoSprintfWchar(f1, f2); } template<typename T1> int wxSprintf(wchar_t* f1, const wxFormatString& f2, T1 a1) { typedef wchar_t* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get()); } template<typename T1, typename T2> int wxSprintf(wchar_t* f1, const wxFormatString& f2, T1 a1, T2 a2) { typedef wchar_t* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get()); } template<typename T1, typename T2, typename T3> int wxSprintf(wchar_t* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3) { typedef wchar_t* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get()); } template<typename T1, typename T2, typename T3, typename T4> int wxSprintf(wchar_t* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4) { typedef wchar_t* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5> int wxSprintf(wchar_t* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5) { typedef wchar_t* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> int wxSprintf(wchar_t* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6) { typedef wchar_t* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> int wxSprintf(wchar_t* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7) { typedef wchar_t* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8> int wxSprintf(wchar_t* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8) { typedef wchar_t* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> int wxSprintf(wchar_t* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9) { typedef wchar_t* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10> int wxSprintf(wchar_t* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10) { typedef wchar_t* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11> int wxSprintf(wchar_t* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11) { typedef wchar_t* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12> int wxSprintf(wchar_t* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12) { typedef wchar_t* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13> int wxSprintf(wchar_t* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13) { typedef wchar_t* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14> int wxSprintf(wchar_t* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14) { typedef wchar_t* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15> int wxSprintf(wchar_t* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15) { typedef wchar_t* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16> int wxSprintf(wchar_t* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16) { typedef wchar_t* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17> int wxSprintf(wchar_t* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17) { typedef wchar_t* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18> int wxSprintf(wchar_t* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18) { typedef wchar_t* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19> int wxSprintf(wchar_t* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19) { typedef wchar_t* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20> int wxSprintf(wchar_t* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20) { typedef wchar_t* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21> int wxSprintf(wchar_t* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21) { typedef wchar_t* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22> int wxSprintf(wchar_t* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22) { typedef wchar_t* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23> int wxSprintf(wchar_t* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23) { typedef wchar_t* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24> int wxSprintf(wchar_t* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24) { typedef wchar_t* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25> int wxSprintf(wchar_t* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25) { typedef wchar_t* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26> int wxSprintf(wchar_t* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26) { typedef wchar_t* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27> int wxSprintf(wchar_t* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27) { typedef wchar_t* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28> int wxSprintf(wchar_t* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28) { typedef wchar_t* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29> int wxSprintf(wchar_t* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29) { typedef wchar_t* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get(), wxArgNormalizerWchar<T29>(a29, fmt, 29).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29, typename T30> int wxSprintf(wchar_t* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29, T30 a30) { typedef wchar_t* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get(), wxArgNormalizerWchar<T29>(a29, fmt, 29).get(), wxArgNormalizerWchar<T30>(a30, fmt, 30).get()); }


int __attribute__ ((visibility("default")))
wxVsprintf(wchar_t *str, const wxString& format, va_list argptr);


int __attribute__ ((visibility("default"))) wxDoSnprintfWchar(wchar_t *str, size_t size, const wxChar *format, ...);




inline int wxSnprintf(wchar_t* f1, size_t f2, const wxFormatString& f3) { return wxDoSnprintfWchar(f1, f2, f3); } template<typename T1> int wxSnprintf(wchar_t* f1, size_t f2, const wxFormatString& f3, T1 a1) { typedef wchar_t* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get()); } template<typename T1, typename T2> int wxSnprintf(wchar_t* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2) { typedef wchar_t* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get()); } template<typename T1, typename T2, typename T3> int wxSnprintf(wchar_t* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3) { typedef wchar_t* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get()); } template<typename T1, typename T2, typename T3, typename T4> int wxSnprintf(wchar_t* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4) { typedef wchar_t* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5> int wxSnprintf(wchar_t* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5) { typedef wchar_t* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> int wxSnprintf(wchar_t* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6) { typedef wchar_t* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> int wxSnprintf(wchar_t* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7) { typedef wchar_t* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8> int wxSnprintf(wchar_t* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8) { typedef wchar_t* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> int wxSnprintf(wchar_t* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9) { typedef wchar_t* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10> int wxSnprintf(wchar_t* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10) { typedef wchar_t* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11> int wxSnprintf(wchar_t* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11) { typedef wchar_t* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12> int wxSnprintf(wchar_t* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12) { typedef wchar_t* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13> int wxSnprintf(wchar_t* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13) { typedef wchar_t* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14> int wxSnprintf(wchar_t* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14) { typedef wchar_t* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15> int wxSnprintf(wchar_t* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15) { typedef wchar_t* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16> int wxSnprintf(wchar_t* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16) { typedef wchar_t* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17> int wxSnprintf(wchar_t* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17) { typedef wchar_t* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18> int wxSnprintf(wchar_t* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18) { typedef wchar_t* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19> int wxSnprintf(wchar_t* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19) { typedef wchar_t* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20> int wxSnprintf(wchar_t* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20) { typedef wchar_t* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21> int wxSnprintf(wchar_t* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21) { typedef wchar_t* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22> int wxSnprintf(wchar_t* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22) { typedef wchar_t* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23> int wxSnprintf(wchar_t* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23) { typedef wchar_t* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24> int wxSnprintf(wchar_t* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24) { typedef wchar_t* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25> int wxSnprintf(wchar_t* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25) { typedef wchar_t* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26> int wxSnprintf(wchar_t* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26) { typedef wchar_t* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27> int wxSnprintf(wchar_t* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27) { typedef wchar_t* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28> int wxSnprintf(wchar_t* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28) { typedef wchar_t* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29> int wxSnprintf(wchar_t* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29) { typedef wchar_t* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get(), wxArgNormalizerWchar<T29>(a29, fmt, 29).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29, typename T30> int wxSnprintf(wchar_t* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29, T30 a30) { typedef wchar_t* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get(), wxArgNormalizerWchar<T29>(a29, fmt, 29).get(), wxArgNormalizerWchar<T30>(a30, fmt, 30).get()); }


int __attribute__ ((visibility("default")))
wxVsnprintf(wchar_t *str, size_t size, const wxString& format, va_list argptr);
# 424 "/usr/include/wx-3.1-unofficial/wx/wxcrtvararg.h"
    const wxScopedWCharBuffer
    __attribute__ ((visibility("default"))) wxScanfConvertFormatW(const wchar_t *format);


template<typename T1> int wxScanf(const char *format, T1 a1) { return scanf(format, a1); } template<typename T1, typename T2> int wxScanf(const char *format, T1 a1, T2 a2) { return scanf(format, a1, a2); } template<typename T1, typename T2, typename T3> int wxScanf(const char *format, T1 a1, T2 a2, T3 a3) { return scanf(format, a1, a2, a3); } template<typename T1, typename T2, typename T3, typename T4> int wxScanf(const char *format, T1 a1, T2 a2, T3 a3, T4 a4) { return scanf(format, a1, a2, a3, a4); } template<typename T1, typename T2, typename T3, typename T4, typename T5> int wxScanf(const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5) { return scanf(format, a1, a2, a3, a4, a5); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> int wxScanf(const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6) { return scanf(format, a1, a2, a3, a4, a5, a6); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> int wxScanf(const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7) { return scanf(format, a1, a2, a3, a4, a5, a6, a7); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8> int wxScanf(const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8) { return scanf(format, a1, a2, a3, a4, a5, a6, a7, a8); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> int wxScanf(const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9) { return scanf(format, a1, a2, a3, a4, a5, a6, a7, a8, a9); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10> int wxScanf(const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10) { return scanf(format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11> int wxScanf(const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11) { return scanf(format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12> int wxScanf(const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12) { return scanf(format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13> int wxScanf(const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13) { return scanf(format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14> int wxScanf(const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14) { return scanf(format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15> int wxScanf(const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15) { return scanf(format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16> int wxScanf(const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16) { return scanf(format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17> int wxScanf(const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17) { return scanf(format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18> int wxScanf(const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18) { return scanf(format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19> int wxScanf(const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19) { return scanf(format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20> int wxScanf(const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20) { return scanf(format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21> int wxScanf(const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21) { return scanf(format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22> int wxScanf(const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22) { return scanf(format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23> int wxScanf(const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23) { return scanf(format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24> int wxScanf(const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24) { return scanf(format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25> int wxScanf(const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25) { return scanf(format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26> int wxScanf(const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26) { return scanf(format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27> int wxScanf(const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27) { return scanf(format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28> int wxScanf(const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28) { return scanf(format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29> int wxScanf(const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29) { return scanf(format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29, typename T30> int wxScanf(const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29, T30 a30) { return scanf(format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30); }

template<typename T1> int wxScanf(const wchar_t *format, T1 a1) { return wscanf(wxScanfConvertFormatW(format), a1); } template<typename T1, typename T2> int wxScanf(const wchar_t *format, T1 a1, T2 a2) { return wscanf(wxScanfConvertFormatW(format), a1, a2); } template<typename T1, typename T2, typename T3> int wxScanf(const wchar_t *format, T1 a1, T2 a2, T3 a3) { return wscanf(wxScanfConvertFormatW(format), a1, a2, a3); } template<typename T1, typename T2, typename T3, typename T4> int wxScanf(const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4) { return wscanf(wxScanfConvertFormatW(format), a1, a2, a3, a4); } template<typename T1, typename T2, typename T3, typename T4, typename T5> int wxScanf(const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5) { return wscanf(wxScanfConvertFormatW(format), a1, a2, a3, a4, a5); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> int wxScanf(const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6) { return wscanf(wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> int wxScanf(const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7) { return wscanf(wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8> int wxScanf(const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8) { return wscanf(wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> int wxScanf(const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9) { return wscanf(wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10> int wxScanf(const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10) { return wscanf(wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11> int wxScanf(const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11) { return wscanf(wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12> int wxScanf(const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12) { return wscanf(wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13> int wxScanf(const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13) { return wscanf(wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14> int wxScanf(const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14) { return wscanf(wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15> int wxScanf(const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15) { return wscanf(wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16> int wxScanf(const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16) { return wscanf(wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17> int wxScanf(const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17) { return wscanf(wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18> int wxScanf(const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18) { return wscanf(wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19> int wxScanf(const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19) { return wscanf(wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20> int wxScanf(const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20) { return wscanf(wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21> int wxScanf(const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21) { return wscanf(wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22> int wxScanf(const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22) { return wscanf(wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23> int wxScanf(const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23) { return wscanf(wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24> int wxScanf(const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24) { return wscanf(wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25> int wxScanf(const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25) { return wscanf(wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26> int wxScanf(const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26) { return wscanf(wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27> int wxScanf(const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27) { return wscanf(wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28> int wxScanf(const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28) { return wscanf(wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29> int wxScanf(const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29) { return wscanf(wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29, typename T30> int wxScanf(const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29, T30 a30) { return wscanf(wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30); }


template<typename T1> int wxFscanf(FILE *stream, const char *format, T1 a1) { return fscanf(stream, format, a1); } template<typename T1, typename T2> int wxFscanf(FILE *stream, const char *format, T1 a1, T2 a2) { return fscanf(stream, format, a1, a2); } template<typename T1, typename T2, typename T3> int wxFscanf(FILE *stream, const char *format, T1 a1, T2 a2, T3 a3) { return fscanf(stream, format, a1, a2, a3); } template<typename T1, typename T2, typename T3, typename T4> int wxFscanf(FILE *stream, const char *format, T1 a1, T2 a2, T3 a3, T4 a4) { return fscanf(stream, format, a1, a2, a3, a4); } template<typename T1, typename T2, typename T3, typename T4, typename T5> int wxFscanf(FILE *stream, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5) { return fscanf(stream, format, a1, a2, a3, a4, a5); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> int wxFscanf(FILE *stream, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6) { return fscanf(stream, format, a1, a2, a3, a4, a5, a6); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> int wxFscanf(FILE *stream, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7) { return fscanf(stream, format, a1, a2, a3, a4, a5, a6, a7); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8> int wxFscanf(FILE *stream, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8) { return fscanf(stream, format, a1, a2, a3, a4, a5, a6, a7, a8); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> int wxFscanf(FILE *stream, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9) { return fscanf(stream, format, a1, a2, a3, a4, a5, a6, a7, a8, a9); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10> int wxFscanf(FILE *stream, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10) { return fscanf(stream, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11> int wxFscanf(FILE *stream, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11) { return fscanf(stream, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12> int wxFscanf(FILE *stream, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12) { return fscanf(stream, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13> int wxFscanf(FILE *stream, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13) { return fscanf(stream, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14> int wxFscanf(FILE *stream, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14) { return fscanf(stream, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15> int wxFscanf(FILE *stream, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15) { return fscanf(stream, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16> int wxFscanf(FILE *stream, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16) { return fscanf(stream, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17> int wxFscanf(FILE *stream, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17) { return fscanf(stream, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18> int wxFscanf(FILE *stream, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18) { return fscanf(stream, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19> int wxFscanf(FILE *stream, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19) { return fscanf(stream, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20> int wxFscanf(FILE *stream, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20) { return fscanf(stream, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21> int wxFscanf(FILE *stream, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21) { return fscanf(stream, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22> int wxFscanf(FILE *stream, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22) { return fscanf(stream, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23> int wxFscanf(FILE *stream, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23) { return fscanf(stream, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24> int wxFscanf(FILE *stream, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24) { return fscanf(stream, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25> int wxFscanf(FILE *stream, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25) { return fscanf(stream, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26> int wxFscanf(FILE *stream, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26) { return fscanf(stream, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27> int wxFscanf(FILE *stream, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27) { return fscanf(stream, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28> int wxFscanf(FILE *stream, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28) { return fscanf(stream, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29> int wxFscanf(FILE *stream, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29) { return fscanf(stream, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29, typename T30> int wxFscanf(FILE *stream, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29, T30 a30) { return fscanf(stream, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30); }

template<typename T1> int wxFscanf(FILE *stream, const wchar_t *format, T1 a1) { return fwscanf(stream, wxScanfConvertFormatW(format), a1); } template<typename T1, typename T2> int wxFscanf(FILE *stream, const wchar_t *format, T1 a1, T2 a2) { return fwscanf(stream, wxScanfConvertFormatW(format), a1, a2); } template<typename T1, typename T2, typename T3> int wxFscanf(FILE *stream, const wchar_t *format, T1 a1, T2 a2, T3 a3) { return fwscanf(stream, wxScanfConvertFormatW(format), a1, a2, a3); } template<typename T1, typename T2, typename T3, typename T4> int wxFscanf(FILE *stream, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4) { return fwscanf(stream, wxScanfConvertFormatW(format), a1, a2, a3, a4); } template<typename T1, typename T2, typename T3, typename T4, typename T5> int wxFscanf(FILE *stream, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5) { return fwscanf(stream, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> int wxFscanf(FILE *stream, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6) { return fwscanf(stream, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> int wxFscanf(FILE *stream, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7) { return fwscanf(stream, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8> int wxFscanf(FILE *stream, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8) { return fwscanf(stream, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> int wxFscanf(FILE *stream, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9) { return fwscanf(stream, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10> int wxFscanf(FILE *stream, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10) { return fwscanf(stream, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11> int wxFscanf(FILE *stream, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11) { return fwscanf(stream, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12> int wxFscanf(FILE *stream, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12) { return fwscanf(stream, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13> int wxFscanf(FILE *stream, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13) { return fwscanf(stream, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14> int wxFscanf(FILE *stream, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14) { return fwscanf(stream, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15> int wxFscanf(FILE *stream, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15) { return fwscanf(stream, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16> int wxFscanf(FILE *stream, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16) { return fwscanf(stream, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17> int wxFscanf(FILE *stream, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17) { return fwscanf(stream, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18> int wxFscanf(FILE *stream, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18) { return fwscanf(stream, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19> int wxFscanf(FILE *stream, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19) { return fwscanf(stream, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20> int wxFscanf(FILE *stream, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20) { return fwscanf(stream, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21> int wxFscanf(FILE *stream, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21) { return fwscanf(stream, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22> int wxFscanf(FILE *stream, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22) { return fwscanf(stream, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23> int wxFscanf(FILE *stream, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23) { return fwscanf(stream, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24> int wxFscanf(FILE *stream, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24) { return fwscanf(stream, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25> int wxFscanf(FILE *stream, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25) { return fwscanf(stream, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26> int wxFscanf(FILE *stream, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26) { return fwscanf(stream, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27> int wxFscanf(FILE *stream, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27) { return fwscanf(stream, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28> int wxFscanf(FILE *stream, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28) { return fwscanf(stream, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29> int wxFscanf(FILE *stream, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29) { return fwscanf(stream, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29, typename T30> int wxFscanf(FILE *stream, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29, T30 a30) { return fwscanf(stream, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30); }


template<typename T1> int wxSscanf(const char *str, const char *format, T1 a1) { return sscanf(str, format, a1); } template<typename T1, typename T2> int wxSscanf(const char *str, const char *format, T1 a1, T2 a2) { return sscanf(str, format, a1, a2); } template<typename T1, typename T2, typename T3> int wxSscanf(const char *str, const char *format, T1 a1, T2 a2, T3 a3) { return sscanf(str, format, a1, a2, a3); } template<typename T1, typename T2, typename T3, typename T4> int wxSscanf(const char *str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4) { return sscanf(str, format, a1, a2, a3, a4); } template<typename T1, typename T2, typename T3, typename T4, typename T5> int wxSscanf(const char *str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5) { return sscanf(str, format, a1, a2, a3, a4, a5); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> int wxSscanf(const char *str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6) { return sscanf(str, format, a1, a2, a3, a4, a5, a6); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> int wxSscanf(const char *str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7) { return sscanf(str, format, a1, a2, a3, a4, a5, a6, a7); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8> int wxSscanf(const char *str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8) { return sscanf(str, format, a1, a2, a3, a4, a5, a6, a7, a8); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> int wxSscanf(const char *str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9) { return sscanf(str, format, a1, a2, a3, a4, a5, a6, a7, a8, a9); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10> int wxSscanf(const char *str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10) { return sscanf(str, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11> int wxSscanf(const char *str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11) { return sscanf(str, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12> int wxSscanf(const char *str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12) { return sscanf(str, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13> int wxSscanf(const char *str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13) { return sscanf(str, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14> int wxSscanf(const char *str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14) { return sscanf(str, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15> int wxSscanf(const char *str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15) { return sscanf(str, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16> int wxSscanf(const char *str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16) { return sscanf(str, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17> int wxSscanf(const char *str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17) { return sscanf(str, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18> int wxSscanf(const char *str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18) { return sscanf(str, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19> int wxSscanf(const char *str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19) { return sscanf(str, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20> int wxSscanf(const char *str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20) { return sscanf(str, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21> int wxSscanf(const char *str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21) { return sscanf(str, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22> int wxSscanf(const char *str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22) { return sscanf(str, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23> int wxSscanf(const char *str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23) { return sscanf(str, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24> int wxSscanf(const char *str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24) { return sscanf(str, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25> int wxSscanf(const char *str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25) { return sscanf(str, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26> int wxSscanf(const char *str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26) { return sscanf(str, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27> int wxSscanf(const char *str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27) { return sscanf(str, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28> int wxSscanf(const char *str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28) { return sscanf(str, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29> int wxSscanf(const char *str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29) { return sscanf(str, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29, typename T30> int wxSscanf(const char *str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29, T30 a30) { return sscanf(str, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30); }

template<typename T1> int wxSscanf(const wchar_t *str, const wchar_t *format, T1 a1) { return swscanf(str, wxScanfConvertFormatW(format), a1); } template<typename T1, typename T2> int wxSscanf(const wchar_t *str, const wchar_t *format, T1 a1, T2 a2) { return swscanf(str, wxScanfConvertFormatW(format), a1, a2); } template<typename T1, typename T2, typename T3> int wxSscanf(const wchar_t *str, const wchar_t *format, T1 a1, T2 a2, T3 a3) { return swscanf(str, wxScanfConvertFormatW(format), a1, a2, a3); } template<typename T1, typename T2, typename T3, typename T4> int wxSscanf(const wchar_t *str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4) { return swscanf(str, wxScanfConvertFormatW(format), a1, a2, a3, a4); } template<typename T1, typename T2, typename T3, typename T4, typename T5> int wxSscanf(const wchar_t *str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5) { return swscanf(str, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> int wxSscanf(const wchar_t *str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6) { return swscanf(str, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> int wxSscanf(const wchar_t *str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7) { return swscanf(str, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8> int wxSscanf(const wchar_t *str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8) { return swscanf(str, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> int wxSscanf(const wchar_t *str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9) { return swscanf(str, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10> int wxSscanf(const wchar_t *str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10) { return swscanf(str, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11> int wxSscanf(const wchar_t *str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11) { return swscanf(str, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12> int wxSscanf(const wchar_t *str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12) { return swscanf(str, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13> int wxSscanf(const wchar_t *str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13) { return swscanf(str, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14> int wxSscanf(const wchar_t *str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14) { return swscanf(str, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15> int wxSscanf(const wchar_t *str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15) { return swscanf(str, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16> int wxSscanf(const wchar_t *str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16) { return swscanf(str, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17> int wxSscanf(const wchar_t *str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17) { return swscanf(str, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18> int wxSscanf(const wchar_t *str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18) { return swscanf(str, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19> int wxSscanf(const wchar_t *str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19) { return swscanf(str, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20> int wxSscanf(const wchar_t *str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20) { return swscanf(str, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21> int wxSscanf(const wchar_t *str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21) { return swscanf(str, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22> int wxSscanf(const wchar_t *str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22) { return swscanf(str, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23> int wxSscanf(const wchar_t *str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23) { return swscanf(str, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24> int wxSscanf(const wchar_t *str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24) { return swscanf(str, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25> int wxSscanf(const wchar_t *str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25) { return swscanf(str, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26> int wxSscanf(const wchar_t *str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26) { return swscanf(str, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27> int wxSscanf(const wchar_t *str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27) { return swscanf(str, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28> int wxSscanf(const wchar_t *str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28) { return swscanf(str, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29> int wxSscanf(const wchar_t *str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29) { return swscanf(str, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29, typename T30> int wxSscanf(const wchar_t *str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29, T30 a30) { return swscanf(str, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30); }

template<typename T1> int wxSscanf(const wxScopedCharBuffer& str, const char *format, T1 a1) { return sscanf(str.data(), format, a1); } template<typename T1, typename T2> int wxSscanf(const wxScopedCharBuffer& str, const char *format, T1 a1, T2 a2) { return sscanf(str.data(), format, a1, a2); } template<typename T1, typename T2, typename T3> int wxSscanf(const wxScopedCharBuffer& str, const char *format, T1 a1, T2 a2, T3 a3) { return sscanf(str.data(), format, a1, a2, a3); } template<typename T1, typename T2, typename T3, typename T4> int wxSscanf(const wxScopedCharBuffer& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4) { return sscanf(str.data(), format, a1, a2, a3, a4); } template<typename T1, typename T2, typename T3, typename T4, typename T5> int wxSscanf(const wxScopedCharBuffer& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5) { return sscanf(str.data(), format, a1, a2, a3, a4, a5); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> int wxSscanf(const wxScopedCharBuffer& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6) { return sscanf(str.data(), format, a1, a2, a3, a4, a5, a6); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> int wxSscanf(const wxScopedCharBuffer& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7) { return sscanf(str.data(), format, a1, a2, a3, a4, a5, a6, a7); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8> int wxSscanf(const wxScopedCharBuffer& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8) { return sscanf(str.data(), format, a1, a2, a3, a4, a5, a6, a7, a8); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> int wxSscanf(const wxScopedCharBuffer& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9) { return sscanf(str.data(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10> int wxSscanf(const wxScopedCharBuffer& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10) { return sscanf(str.data(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11> int wxSscanf(const wxScopedCharBuffer& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11) { return sscanf(str.data(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12> int wxSscanf(const wxScopedCharBuffer& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12) { return sscanf(str.data(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13> int wxSscanf(const wxScopedCharBuffer& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13) { return sscanf(str.data(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14> int wxSscanf(const wxScopedCharBuffer& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14) { return sscanf(str.data(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15> int wxSscanf(const wxScopedCharBuffer& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15) { return sscanf(str.data(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16> int wxSscanf(const wxScopedCharBuffer& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16) { return sscanf(str.data(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17> int wxSscanf(const wxScopedCharBuffer& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17) { return sscanf(str.data(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18> int wxSscanf(const wxScopedCharBuffer& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18) { return sscanf(str.data(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19> int wxSscanf(const wxScopedCharBuffer& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19) { return sscanf(str.data(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20> int wxSscanf(const wxScopedCharBuffer& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20) { return sscanf(str.data(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21> int wxSscanf(const wxScopedCharBuffer& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21) { return sscanf(str.data(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22> int wxSscanf(const wxScopedCharBuffer& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22) { return sscanf(str.data(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23> int wxSscanf(const wxScopedCharBuffer& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23) { return sscanf(str.data(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24> int wxSscanf(const wxScopedCharBuffer& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24) { return sscanf(str.data(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25> int wxSscanf(const wxScopedCharBuffer& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25) { return sscanf(str.data(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26> int wxSscanf(const wxScopedCharBuffer& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26) { return sscanf(str.data(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27> int wxSscanf(const wxScopedCharBuffer& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27) { return sscanf(str.data(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28> int wxSscanf(const wxScopedCharBuffer& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28) { return sscanf(str.data(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29> int wxSscanf(const wxScopedCharBuffer& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29) { return sscanf(str.data(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29, typename T30> int wxSscanf(const wxScopedCharBuffer& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29, T30 a30) { return sscanf(str.data(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30); }

template<typename T1> int wxSscanf(const wxScopedWCharBuffer& str, const wchar_t *format, T1 a1) { return swscanf(str.data(), wxScanfConvertFormatW(format), a1); } template<typename T1, typename T2> int wxSscanf(const wxScopedWCharBuffer& str, const wchar_t *format, T1 a1, T2 a2) { return swscanf(str.data(), wxScanfConvertFormatW(format), a1, a2); } template<typename T1, typename T2, typename T3> int wxSscanf(const wxScopedWCharBuffer& str, const wchar_t *format, T1 a1, T2 a2, T3 a3) { return swscanf(str.data(), wxScanfConvertFormatW(format), a1, a2, a3); } template<typename T1, typename T2, typename T3, typename T4> int wxSscanf(const wxScopedWCharBuffer& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4) { return swscanf(str.data(), wxScanfConvertFormatW(format), a1, a2, a3, a4); } template<typename T1, typename T2, typename T3, typename T4, typename T5> int wxSscanf(const wxScopedWCharBuffer& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5) { return swscanf(str.data(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> int wxSscanf(const wxScopedWCharBuffer& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6) { return swscanf(str.data(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> int wxSscanf(const wxScopedWCharBuffer& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7) { return swscanf(str.data(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8> int wxSscanf(const wxScopedWCharBuffer& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8) { return swscanf(str.data(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> int wxSscanf(const wxScopedWCharBuffer& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9) { return swscanf(str.data(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10> int wxSscanf(const wxScopedWCharBuffer& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10) { return swscanf(str.data(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11> int wxSscanf(const wxScopedWCharBuffer& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11) { return swscanf(str.data(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12> int wxSscanf(const wxScopedWCharBuffer& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12) { return swscanf(str.data(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13> int wxSscanf(const wxScopedWCharBuffer& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13) { return swscanf(str.data(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14> int wxSscanf(const wxScopedWCharBuffer& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14) { return swscanf(str.data(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15> int wxSscanf(const wxScopedWCharBuffer& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15) { return swscanf(str.data(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16> int wxSscanf(const wxScopedWCharBuffer& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16) { return swscanf(str.data(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17> int wxSscanf(const wxScopedWCharBuffer& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17) { return swscanf(str.data(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18> int wxSscanf(const wxScopedWCharBuffer& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18) { return swscanf(str.data(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19> int wxSscanf(const wxScopedWCharBuffer& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19) { return swscanf(str.data(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20> int wxSscanf(const wxScopedWCharBuffer& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20) { return swscanf(str.data(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21> int wxSscanf(const wxScopedWCharBuffer& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21) { return swscanf(str.data(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22> int wxSscanf(const wxScopedWCharBuffer& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22) { return swscanf(str.data(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23> int wxSscanf(const wxScopedWCharBuffer& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23) { return swscanf(str.data(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24> int wxSscanf(const wxScopedWCharBuffer& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24) { return swscanf(str.data(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25> int wxSscanf(const wxScopedWCharBuffer& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25) { return swscanf(str.data(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26> int wxSscanf(const wxScopedWCharBuffer& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26) { return swscanf(str.data(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27> int wxSscanf(const wxScopedWCharBuffer& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27) { return swscanf(str.data(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28> int wxSscanf(const wxScopedWCharBuffer& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28) { return swscanf(str.data(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29> int wxSscanf(const wxScopedWCharBuffer& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29) { return swscanf(str.data(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29, typename T30> int wxSscanf(const wxScopedWCharBuffer& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29, T30 a30) { return swscanf(str.data(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30); }


template<typename T1> int wxSscanf(const wxString& str, const char *format, T1 a1) { return sscanf(str.mb_str(), format, a1); } template<typename T1, typename T2> int wxSscanf(const wxString& str, const char *format, T1 a1, T2 a2) { return sscanf(str.mb_str(), format, a1, a2); } template<typename T1, typename T2, typename T3> int wxSscanf(const wxString& str, const char *format, T1 a1, T2 a2, T3 a3) { return sscanf(str.mb_str(), format, a1, a2, a3); } template<typename T1, typename T2, typename T3, typename T4> int wxSscanf(const wxString& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4) { return sscanf(str.mb_str(), format, a1, a2, a3, a4); } template<typename T1, typename T2, typename T3, typename T4, typename T5> int wxSscanf(const wxString& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5) { return sscanf(str.mb_str(), format, a1, a2, a3, a4, a5); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> int wxSscanf(const wxString& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6) { return sscanf(str.mb_str(), format, a1, a2, a3, a4, a5, a6); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> int wxSscanf(const wxString& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7) { return sscanf(str.mb_str(), format, a1, a2, a3, a4, a5, a6, a7); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8> int wxSscanf(const wxString& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8) { return sscanf(str.mb_str(), format, a1, a2, a3, a4, a5, a6, a7, a8); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> int wxSscanf(const wxString& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9) { return sscanf(str.mb_str(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10> int wxSscanf(const wxString& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10) { return sscanf(str.mb_str(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11> int wxSscanf(const wxString& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11) { return sscanf(str.mb_str(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12> int wxSscanf(const wxString& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12) { return sscanf(str.mb_str(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13> int wxSscanf(const wxString& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13) { return sscanf(str.mb_str(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14> int wxSscanf(const wxString& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14) { return sscanf(str.mb_str(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15> int wxSscanf(const wxString& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15) { return sscanf(str.mb_str(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16> int wxSscanf(const wxString& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16) { return sscanf(str.mb_str(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17> int wxSscanf(const wxString& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17) { return sscanf(str.mb_str(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18> int wxSscanf(const wxString& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18) { return sscanf(str.mb_str(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19> int wxSscanf(const wxString& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19) { return sscanf(str.mb_str(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20> int wxSscanf(const wxString& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20) { return sscanf(str.mb_str(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21> int wxSscanf(const wxString& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21) { return sscanf(str.mb_str(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22> int wxSscanf(const wxString& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22) { return sscanf(str.mb_str(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23> int wxSscanf(const wxString& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23) { return sscanf(str.mb_str(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24> int wxSscanf(const wxString& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24) { return sscanf(str.mb_str(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25> int wxSscanf(const wxString& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25) { return sscanf(str.mb_str(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26> int wxSscanf(const wxString& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26) { return sscanf(str.mb_str(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27> int wxSscanf(const wxString& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27) { return sscanf(str.mb_str(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28> int wxSscanf(const wxString& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28) { return sscanf(str.mb_str(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29> int wxSscanf(const wxString& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29) { return sscanf(str.mb_str(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29, typename T30> int wxSscanf(const wxString& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29, T30 a30) { return sscanf(str.mb_str(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30); }


template<typename T1> int wxSscanf(const wxString& str, const wchar_t *format, T1 a1) { return swscanf(str.wc_str(), wxScanfConvertFormatW(format), a1); } template<typename T1, typename T2> int wxSscanf(const wxString& str, const wchar_t *format, T1 a1, T2 a2) { return swscanf(str.wc_str(), wxScanfConvertFormatW(format), a1, a2); } template<typename T1, typename T2, typename T3> int wxSscanf(const wxString& str, const wchar_t *format, T1 a1, T2 a2, T3 a3) { return swscanf(str.wc_str(), wxScanfConvertFormatW(format), a1, a2, a3); } template<typename T1, typename T2, typename T3, typename T4> int wxSscanf(const wxString& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4) { return swscanf(str.wc_str(), wxScanfConvertFormatW(format), a1, a2, a3, a4); } template<typename T1, typename T2, typename T3, typename T4, typename T5> int wxSscanf(const wxString& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5) { return swscanf(str.wc_str(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> int wxSscanf(const wxString& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6) { return swscanf(str.wc_str(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> int wxSscanf(const wxString& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7) { return swscanf(str.wc_str(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8> int wxSscanf(const wxString& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8) { return swscanf(str.wc_str(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> int wxSscanf(const wxString& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9) { return swscanf(str.wc_str(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10> int wxSscanf(const wxString& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10) { return swscanf(str.wc_str(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11> int wxSscanf(const wxString& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11) { return swscanf(str.wc_str(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12> int wxSscanf(const wxString& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12) { return swscanf(str.wc_str(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13> int wxSscanf(const wxString& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13) { return swscanf(str.wc_str(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14> int wxSscanf(const wxString& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14) { return swscanf(str.wc_str(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15> int wxSscanf(const wxString& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15) { return swscanf(str.wc_str(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16> int wxSscanf(const wxString& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16) { return swscanf(str.wc_str(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17> int wxSscanf(const wxString& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17) { return swscanf(str.wc_str(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18> int wxSscanf(const wxString& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18) { return swscanf(str.wc_str(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19> int wxSscanf(const wxString& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19) { return swscanf(str.wc_str(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20> int wxSscanf(const wxString& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20) { return swscanf(str.wc_str(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21> int wxSscanf(const wxString& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21) { return swscanf(str.wc_str(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22> int wxSscanf(const wxString& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22) { return swscanf(str.wc_str(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23> int wxSscanf(const wxString& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23) { return swscanf(str.wc_str(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24> int wxSscanf(const wxString& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24) { return swscanf(str.wc_str(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25> int wxSscanf(const wxString& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25) { return swscanf(str.wc_str(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26> int wxSscanf(const wxString& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26) { return swscanf(str.wc_str(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27> int wxSscanf(const wxString& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27) { return swscanf(str.wc_str(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28> int wxSscanf(const wxString& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28) { return swscanf(str.wc_str(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29> int wxSscanf(const wxString& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29) { return swscanf(str.wc_str(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29, typename T30> int wxSscanf(const wxString& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29, T30 a30) { return swscanf(str.wc_str(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30); }


template<typename T1> int wxSscanf(const wxCStrData& str, const char *format, T1 a1) { return sscanf(str.AsCharBuf(), format, a1); } template<typename T1, typename T2> int wxSscanf(const wxCStrData& str, const char *format, T1 a1, T2 a2) { return sscanf(str.AsCharBuf(), format, a1, a2); } template<typename T1, typename T2, typename T3> int wxSscanf(const wxCStrData& str, const char *format, T1 a1, T2 a2, T3 a3) { return sscanf(str.AsCharBuf(), format, a1, a2, a3); } template<typename T1, typename T2, typename T3, typename T4> int wxSscanf(const wxCStrData& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4) { return sscanf(str.AsCharBuf(), format, a1, a2, a3, a4); } template<typename T1, typename T2, typename T3, typename T4, typename T5> int wxSscanf(const wxCStrData& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5) { return sscanf(str.AsCharBuf(), format, a1, a2, a3, a4, a5); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> int wxSscanf(const wxCStrData& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6) { return sscanf(str.AsCharBuf(), format, a1, a2, a3, a4, a5, a6); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> int wxSscanf(const wxCStrData& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7) { return sscanf(str.AsCharBuf(), format, a1, a2, a3, a4, a5, a6, a7); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8> int wxSscanf(const wxCStrData& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8) { return sscanf(str.AsCharBuf(), format, a1, a2, a3, a4, a5, a6, a7, a8); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> int wxSscanf(const wxCStrData& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9) { return sscanf(str.AsCharBuf(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10> int wxSscanf(const wxCStrData& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10) { return sscanf(str.AsCharBuf(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11> int wxSscanf(const wxCStrData& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11) { return sscanf(str.AsCharBuf(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12> int wxSscanf(const wxCStrData& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12) { return sscanf(str.AsCharBuf(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13> int wxSscanf(const wxCStrData& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13) { return sscanf(str.AsCharBuf(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14> int wxSscanf(const wxCStrData& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14) { return sscanf(str.AsCharBuf(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15> int wxSscanf(const wxCStrData& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15) { return sscanf(str.AsCharBuf(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16> int wxSscanf(const wxCStrData& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16) { return sscanf(str.AsCharBuf(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17> int wxSscanf(const wxCStrData& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17) { return sscanf(str.AsCharBuf(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18> int wxSscanf(const wxCStrData& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18) { return sscanf(str.AsCharBuf(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19> int wxSscanf(const wxCStrData& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19) { return sscanf(str.AsCharBuf(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20> int wxSscanf(const wxCStrData& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20) { return sscanf(str.AsCharBuf(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21> int wxSscanf(const wxCStrData& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21) { return sscanf(str.AsCharBuf(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22> int wxSscanf(const wxCStrData& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22) { return sscanf(str.AsCharBuf(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23> int wxSscanf(const wxCStrData& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23) { return sscanf(str.AsCharBuf(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24> int wxSscanf(const wxCStrData& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24) { return sscanf(str.AsCharBuf(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25> int wxSscanf(const wxCStrData& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25) { return sscanf(str.AsCharBuf(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26> int wxSscanf(const wxCStrData& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26) { return sscanf(str.AsCharBuf(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27> int wxSscanf(const wxCStrData& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27) { return sscanf(str.AsCharBuf(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28> int wxSscanf(const wxCStrData& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28) { return sscanf(str.AsCharBuf(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29> int wxSscanf(const wxCStrData& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29) { return sscanf(str.AsCharBuf(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29, typename T30> int wxSscanf(const wxCStrData& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29, T30 a30) { return sscanf(str.AsCharBuf(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30); }


template<typename T1> int wxSscanf(const wxCStrData& str, const wchar_t *format, T1 a1) { return swscanf(str.AsWCharBuf(), wxScanfConvertFormatW(format), a1); } template<typename T1, typename T2> int wxSscanf(const wxCStrData& str, const wchar_t *format, T1 a1, T2 a2) { return swscanf(str.AsWCharBuf(), wxScanfConvertFormatW(format), a1, a2); } template<typename T1, typename T2, typename T3> int wxSscanf(const wxCStrData& str, const wchar_t *format, T1 a1, T2 a2, T3 a3) { return swscanf(str.AsWCharBuf(), wxScanfConvertFormatW(format), a1, a2, a3); } template<typename T1, typename T2, typename T3, typename T4> int wxSscanf(const wxCStrData& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4) { return swscanf(str.AsWCharBuf(), wxScanfConvertFormatW(format), a1, a2, a3, a4); } template<typename T1, typename T2, typename T3, typename T4, typename T5> int wxSscanf(const wxCStrData& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5) { return swscanf(str.AsWCharBuf(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> int wxSscanf(const wxCStrData& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6) { return swscanf(str.AsWCharBuf(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> int wxSscanf(const wxCStrData& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7) { return swscanf(str.AsWCharBuf(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8> int wxSscanf(const wxCStrData& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8) { return swscanf(str.AsWCharBuf(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> int wxSscanf(const wxCStrData& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9) { return swscanf(str.AsWCharBuf(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10> int wxSscanf(const wxCStrData& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10) { return swscanf(str.AsWCharBuf(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11> int wxSscanf(const wxCStrData& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11) { return swscanf(str.AsWCharBuf(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12> int wxSscanf(const wxCStrData& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12) { return swscanf(str.AsWCharBuf(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13> int wxSscanf(const wxCStrData& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13) { return swscanf(str.AsWCharBuf(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14> int wxSscanf(const wxCStrData& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14) { return swscanf(str.AsWCharBuf(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15> int wxSscanf(const wxCStrData& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15) { return swscanf(str.AsWCharBuf(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16> int wxSscanf(const wxCStrData& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16) { return swscanf(str.AsWCharBuf(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17> int wxSscanf(const wxCStrData& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17) { return swscanf(str.AsWCharBuf(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18> int wxSscanf(const wxCStrData& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18) { return swscanf(str.AsWCharBuf(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19> int wxSscanf(const wxCStrData& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19) { return swscanf(str.AsWCharBuf(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20> int wxSscanf(const wxCStrData& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20) { return swscanf(str.AsWCharBuf(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21> int wxSscanf(const wxCStrData& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21) { return swscanf(str.AsWCharBuf(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22> int wxSscanf(const wxCStrData& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22) { return swscanf(str.AsWCharBuf(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23> int wxSscanf(const wxCStrData& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23) { return swscanf(str.AsWCharBuf(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24> int wxSscanf(const wxCStrData& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24) { return swscanf(str.AsWCharBuf(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25> int wxSscanf(const wxCStrData& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25) { return swscanf(str.AsWCharBuf(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26> int wxSscanf(const wxCStrData& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26) { return swscanf(str.AsWCharBuf(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27> int wxSscanf(const wxCStrData& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27) { return swscanf(str.AsWCharBuf(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28> int wxSscanf(const wxCStrData& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28) { return swscanf(str.AsWCharBuf(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29> int wxSscanf(const wxCStrData& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29) { return swscanf(str.AsWCharBuf(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29, typename T30> int wxSscanf(const wxCStrData& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29, T30 a30) { return swscanf(str.AsWCharBuf(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30); }




int __attribute__ ((visibility("default"))) wxVsscanf(const char *str, const char *format, va_list ap);
int __attribute__ ((visibility("default"))) wxVsscanf(const wchar_t *str, const wchar_t *format, va_list ap);
int __attribute__ ((visibility("default"))) wxVsscanf(const wxScopedCharBuffer& str, const char *format, va_list ap);
int __attribute__ ((visibility("default"))) wxVsscanf(const wxScopedWCharBuffer& str, const wchar_t *format, va_list ap);
int __attribute__ ((visibility("default"))) wxVsscanf(const wxString& str, const char *format, va_list ap);
int __attribute__ ((visibility("default"))) wxVsscanf(const wxString& str, const wchar_t *format, va_list ap);
int __attribute__ ((visibility("default"))) wxVsscanf(const wxCStrData& str, const char *format, va_list ap);
int __attribute__ ((visibility("default"))) wxVsscanf(const wxCStrData& str, const wchar_t *format, va_list ap);
# 35 "/usr/include/wx-3.1-unofficial/wx/wx.h" 2



# 1 "/usr/include/wx-3.1-unofficial/wx/window.h" 1
# 23 "/usr/include/wx-3.1-unofficial/wx/window.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/font.h" 1
# 18 "/usr/include/wx-3.1-unofficial/wx/font.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 19 "/usr/include/wx-3.1-unofficial/wx/font.h" 2
# 28 "/usr/include/wx-3.1-unofficial/wx/font.h"
class wxFont;
# 38 "/usr/include/wx-3.1-unofficial/wx/font.h"
enum wxFontFamily
{
    wxFONTFAMILY_DEFAULT = wxDEFAULT,
    wxFONTFAMILY_DECORATIVE = wxDECORATIVE,
    wxFONTFAMILY_ROMAN = wxROMAN,
    wxFONTFAMILY_SCRIPT = wxSCRIPT,
    wxFONTFAMILY_SWISS = wxSWISS,
    wxFONTFAMILY_MODERN = wxMODERN,
    wxFONTFAMILY_TELETYPE = wxTELETYPE,
    wxFONTFAMILY_MAX,
    wxFONTFAMILY_UNKNOWN = wxFONTFAMILY_MAX
};


enum wxFontStyle
{
    wxFONTSTYLE_NORMAL = wxNORMAL,
    wxFONTSTYLE_ITALIC = wxITALIC,
    wxFONTSTYLE_SLANT = wxSLANT,
    wxFONTSTYLE_MAX
};


enum wxFontWeight
{
    wxFONTWEIGHT_INVALID = 0,
    wxFONTWEIGHT_THIN = 100,
    wxFONTWEIGHT_EXTRALIGHT = 200,
    wxFONTWEIGHT_LIGHT = 300,
    wxFONTWEIGHT_NORMAL = 400,
    wxFONTWEIGHT_MEDIUM = 500,
    wxFONTWEIGHT_SEMIBOLD = 600,
    wxFONTWEIGHT_BOLD = 700,
    wxFONTWEIGHT_EXTRABOLD = 800,
    wxFONTWEIGHT_HEAVY = 900,
    wxFONTWEIGHT_EXTRAHEAVY = 1000,
    wxFONTWEIGHT_MAX = wxFONTWEIGHT_EXTRAHEAVY
};


enum wxFontSymbolicSize
{
    wxFONTSIZE_XX_SMALL = -3,
    wxFONTSIZE_X_SMALL,
    wxFONTSIZE_SMALL,
    wxFONTSIZE_MEDIUM,
    wxFONTSIZE_LARGE,
    wxFONTSIZE_X_LARGE,
    wxFONTSIZE_XX_LARGE
};


enum wxFontFlag
{

    wxFONTFLAG_DEFAULT = 0,


    wxFONTFLAG_ITALIC = 1 << 0,
    wxFONTFLAG_SLANT = 1 << 1,


    wxFONTFLAG_LIGHT = 1 << 2,
    wxFONTFLAG_BOLD = 1 << 3,


    wxFONTFLAG_ANTIALIASED = 1 << 4,
    wxFONTFLAG_NOT_ANTIALIASED = 1 << 5,


    wxFONTFLAG_UNDERLINED = 1 << 6,
    wxFONTFLAG_STRIKETHROUGH = 1 << 7,


    wxFONTFLAG_MASK = wxFONTFLAG_ITALIC |
                      wxFONTFLAG_SLANT |
                      wxFONTFLAG_LIGHT |
                      wxFONTFLAG_BOLD |
                      wxFONTFLAG_ANTIALIASED |
                      wxFONTFLAG_NOT_ANTIALIASED |
                      wxFONTFLAG_UNDERLINED |
                      wxFONTFLAG_STRIKETHROUGH
};





class wxFontInfo
{
public:


    wxFontInfo()
        : m_pointSize(-1.0)
        , m_pixelSize(wxDefaultSize)
    {
        Init();
    }


    explicit wxFontInfo(double pointSize)
        : m_pointSize(pointSize >= 0.0 ? pointSize : -1.0)
        , m_pixelSize(wxDefaultSize)
    {
        Init();
        if (!wxIsSameDouble(m_pointSize, pointSize))
        {
            do { if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/font.h", 146, __FUNCTION__, "\"Assert failure\"", "Invalid font point size"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );
        }
    }
    explicit wxFontInfo(const wxSize& pixelSize)
        : m_pointSize(-1.0)
        , m_pixelSize(pixelSize)
    {
        Init();
    }




    wxFontInfo& Family(wxFontFamily family)
        { m_family = family; return *this; }
    wxFontInfo& FaceName(const wxString& faceName)
        { m_faceName = faceName; return *this; }

    wxFontInfo& Weight(int weight)
        { m_weight = weight; return *this; }
    wxFontInfo& Bold(bool bold = true)
        { return Weight(bold ? wxFONTWEIGHT_BOLD : wxFONTWEIGHT_NORMAL); }
    wxFontInfo& Light(bool light = true)
        { return Weight(light ? wxFONTWEIGHT_LIGHT : wxFONTWEIGHT_NORMAL); }

    wxFontInfo& Italic(bool italic = true)
        { SetFlag(wxFONTFLAG_ITALIC, italic); return *this; }
    wxFontInfo& Slant(bool slant = true)
        { SetFlag(wxFONTFLAG_SLANT, slant); return *this; }
    wxFontInfo& Style(wxFontStyle style)
    {
        if ( style == wxFONTSTYLE_ITALIC )
            return Italic();

        if ( style == wxFONTSTYLE_SLANT )
            return Slant();

        return *this;
    }

    wxFontInfo& AntiAliased(bool antiAliased = true)
        { SetFlag(wxFONTFLAG_ANTIALIASED, antiAliased); return *this; }
    wxFontInfo& Underlined(bool underlined = true)
        { SetFlag(wxFONTFLAG_UNDERLINED, underlined); return *this; }
    wxFontInfo& Strikethrough(bool strikethrough = true)
        { SetFlag(wxFONTFLAG_STRIKETHROUGH, strikethrough); return *this; }

    wxFontInfo& Encoding(wxFontEncoding encoding)
        { m_encoding = encoding; return *this; }


    wxFontInfo& AllFlags(int flags)
    {
        m_flags = flags;

        m_weight = m_flags & wxFONTFLAG_BOLD
                        ? wxFONTWEIGHT_BOLD
                        : m_flags & wxFONTFLAG_LIGHT
                            ? wxFONTWEIGHT_LIGHT
                            : wxFONTWEIGHT_NORMAL;

        return *this;
    }




    bool IsUsingSizeInPixels() const { return m_pixelSize != wxDefaultSize; }
    double GetFractionalPointSize() const { return m_pointSize; }
    int GetPointSize() const { return wxRound(m_pointSize); }
    wxSize GetPixelSize() const { return m_pixelSize; }


    bool HasFaceName() const { return !m_faceName.empty(); }
    wxFontFamily GetFamily() const { return m_family; }
    const wxString& GetFaceName() const { return m_faceName; }

    wxFontStyle GetStyle() const
    {
        return m_flags & wxFONTFLAG_ITALIC
                        ? wxFONTSTYLE_ITALIC
                        : m_flags & wxFONTFLAG_SLANT
                            ? wxFONTSTYLE_SLANT
                            : wxFONTSTYLE_NORMAL;
    }

    int GetNumericWeight() const
    {
        return m_weight;
    }

    wxFontWeight GetWeight() const
    {
        return GetWeightClosestToNumericValue(m_weight);
    }

    bool IsAntiAliased() const
    {
        return (m_flags & wxFONTFLAG_ANTIALIASED) != 0;
    }

    bool IsUnderlined() const
    {
        return (m_flags & wxFONTFLAG_UNDERLINED) != 0;
    }

    bool IsStrikethrough() const
    {
        return (m_flags & wxFONTFLAG_STRIKETHROUGH) != 0;
    }

    wxFontEncoding GetEncoding() const { return m_encoding; }






    static wxFontWeight GetWeightClosestToNumericValue(int numWeight)
    {
        do { if ( numWeight > 0 ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/font.h", 266, __FUNCTION__, "numWeight > 0", (const char*)
# 266 "/usr/include/wx-3.1-unofficial/wx/font.h" 3 4
       __null
# 266 "/usr/include/wx-3.1-unofficial/wx/font.h"
       ), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );
        do { if ( numWeight <= 1000 ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/font.h", 267, __FUNCTION__, "numWeight <= 1000", (const char*)
# 267 "/usr/include/wx-3.1-unofficial/wx/font.h" 3 4
       __null
# 267 "/usr/include/wx-3.1-unofficial/wx/font.h"
       ), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );


        int weight = ((numWeight + 50) / 100) * 100;

        if (weight < wxFONTWEIGHT_THIN)
            weight = wxFONTWEIGHT_THIN;
        if (weight > wxFONTWEIGHT_MAX)
            weight = wxFONTWEIGHT_MAX;

        return static_cast<wxFontWeight>(weight);
    }

private:
    void Init()
    {
        m_family = wxFONTFAMILY_DEFAULT;
        m_flags = wxFONTFLAG_DEFAULT;
        m_weight = wxFONTWEIGHT_NORMAL;
        m_encoding = wxFONTENCODING_DEFAULT;
    }



    void SetFlag(int flag, bool on)
    {
        if ( on )
            m_flags |= flag;
        else
            m_flags &= ~flag;
    }




    double m_pointSize;
    wxSize m_pixelSize;

    wxFontFamily m_family;
    wxString m_faceName;
    int m_flags;
    int m_weight;
    wxFontEncoding m_encoding;
};





class wxNativeFontInfo;

class __attribute__ ((visibility("default"))) wxFontBase : public wxGDIObject
{
public:
# 345 "/usr/include/wx-3.1-unofficial/wx/font.h"
    virtual ~wxFontBase();



    static wxFont *New(
        int pointSize,
        wxFontFamily family,
        wxFontStyle style,
        wxFontWeight weight,
        bool underlined = false,
        const wxString& face = wxEmptyString,
        wxFontEncoding encoding = wxFONTENCODING_DEFAULT);


    static wxFont *New(
        const wxSize& pixelSize,
        wxFontFamily family,
        wxFontStyle style,
        wxFontWeight weight,
        bool underlined = false,
        const wxString& face = wxEmptyString,
        wxFontEncoding encoding = wxFONTENCODING_DEFAULT);



    static wxFont *New(int pointSize,
                       wxFontFamily family,
                       int flags = wxFONTFLAG_DEFAULT,
                       const wxString& face = wxEmptyString,
                       wxFontEncoding encoding = wxFONTENCODING_DEFAULT);




    static wxFont *New(const wxSize& pixelSize,
                       wxFontFamily family,
                       int flags = wxFONTFLAG_DEFAULT,
                       const wxString& face = wxEmptyString,
                       wxFontEncoding encoding = wxFONTENCODING_DEFAULT);


    static wxFont *New(const wxNativeFontInfo& nativeFontDesc);


    static wxFont *New(const wxString& strNativeFontDesc);




    static bool AddPrivateFont(const wxString& filename);



    bool operator==(const wxFont& font) const;
    bool operator!=(const wxFont& font) const { return !(*this == font); }


    virtual int GetPointSize() const;
    virtual double GetFractionalPointSize() const = 0;
    virtual wxSize GetPixelSize() const;
    virtual bool IsUsingSizeInPixels() const;
    wxFontFamily GetFamily() const;
    virtual wxFontStyle GetStyle() const = 0;
    virtual int GetNumericWeight() const = 0;
    virtual bool GetUnderlined() const = 0;
    virtual bool GetStrikethrough() const { return false; }
    virtual wxString GetFaceName() const = 0;
    virtual wxFontEncoding GetEncoding() const = 0;
    virtual const wxNativeFontInfo *GetNativeFontInfo() const = 0;



    virtual wxFontWeight GetWeight() const;
    virtual bool IsFixedWidth() const;

    wxString GetNativeFontInfoDesc() const;
    wxString GetNativeFontInfoUserDesc() const;


    virtual void SetPointSize( int pointSize );
    virtual void SetFractionalPointSize( double pointSize ) = 0;
    virtual void SetPixelSize( const wxSize& pixelSize );
    virtual void SetFamily( wxFontFamily family ) = 0;
    virtual void SetStyle( wxFontStyle style ) = 0;
    virtual void SetNumericWeight( int weight ) = 0;

    virtual void SetUnderlined( bool underlined ) = 0;
    virtual void SetStrikethrough( bool ) {}
    virtual void SetEncoding(wxFontEncoding encoding) = 0;
    virtual bool SetFaceName( const wxString& faceName );
    void SetNativeFontInfo(const wxNativeFontInfo& info)
        { DoSetNativeFontInfo(info); }



    virtual void SetWeight( wxFontWeight weight );

    bool SetNativeFontInfo(const wxString& info);
    bool SetNativeFontInfoUserDesc(const wxString& info);




    void SetSymbolicSize(wxFontSymbolicSize size);
    void SetSymbolicSizeRelativeTo(wxFontSymbolicSize size, int base)
    {
        SetPointSize(AdjustToSymbolicSize(size, base));
    }


    static int AdjustToSymbolicSize(wxFontSymbolicSize size, int base);




    wxString GetFamilyString() const;
    wxString GetStyleString() const;
    wxString GetWeightString() const;



    static wxFontEncoding GetDefaultEncoding() { return ms_encodingDefault; }
    static void SetDefaultEncoding(wxFontEncoding encoding);




    static int ConvertFromLegacyWeightIfNecessary(int weight);




    static int GetNumericWeightOf(wxFontWeight weight);







    __attribute__((deprecated("use wxFONTWEIGHT_XXX constants instead of raw values")))
    void SetWeight(int weight)
        { SetWeight(static_cast<wxFontWeight>(weight)); }

    __attribute__((deprecated("use wxFONTWEIGHT_XXX constants instead of wxLIGHT/wxNORMAL/wxBOLD")))
    void SetWeight(wxDeprecatedGUIConstants weight)
        { SetWeight(static_cast<wxFontWeight>(weight)); }


    __attribute__((deprecated("use wxFONT{FAMILY,STYLE,WEIGHT}_XXX constants")))
    static wxFont *New(
        int pointSize,
        int family,
        int style,
        int weight,
        bool underlined = false,
        const wxString& face = wxEmptyString,
        wxFontEncoding encoding = wxFONTENCODING_DEFAULT)
        { return New(pointSize, (wxFontFamily)family, (wxFontStyle)style,
                     (wxFontWeight)weight, underlined, face, encoding); }


    __attribute__((deprecated("use wxFONT{FAMILY,STYLE,WEIGHT}_XXX constants")))
    static wxFont *New(
        const wxSize& pixelSize,
        int family,
        int style,
        int weight,
        bool underlined = false,
        const wxString& face = wxEmptyString,
        wxFontEncoding encoding = wxFONTENCODING_DEFAULT)
        { return New(pixelSize, (wxFontFamily)family, (wxFontStyle)style,
                     (wxFontWeight)weight, underlined, face, encoding); }


protected:

    virtual void DoSetNativeFontInfo(const wxNativeFontInfo& info);



    virtual wxFontFamily DoGetFamily() const = 0;




    static wxFontStyle GetStyleFromFlags(int flags)
    {
        return flags & wxFONTFLAG_ITALIC
                        ? wxFONTSTYLE_ITALIC
                        : flags & wxFONTFLAG_SLANT
                            ? wxFONTSTYLE_SLANT
                            : wxFONTSTYLE_NORMAL;
    }

    static wxFontWeight GetWeightFromFlags(int flags)
    {
        return flags & wxFONTFLAG_LIGHT
                        ? wxFONTWEIGHT_LIGHT
                        : flags & wxFONTFLAG_BOLD
                            ? wxFONTWEIGHT_BOLD
                            : wxFONTWEIGHT_NORMAL;
    }

    static bool GetUnderlinedFromFlags(int flags)
    {
        return (flags & wxFONTFLAG_UNDERLINED) != 0;
    }

    static bool GetStrikethroughFromFlags(int flags)
    {
        return (flags & wxFONTFLAG_STRIKETHROUGH) != 0;
    }





    static wxFontInfo InfoFromLegacyParams(int pointSize,
                                           wxFontFamily family,
                                           wxFontStyle style,
                                           wxFontWeight weight,
                                           bool underlined,
                                           const wxString& face,
                                           wxFontEncoding encoding);

    static wxFontInfo InfoFromLegacyParams(const wxSize& pixelSize,
                                           wxFontFamily family,
                                           wxFontStyle style,
                                           wxFontWeight weight,
                                           bool underlined,
                                           const wxString& face,
                                           wxFontEncoding encoding);

private:




    static wxFontEncoding ms_encodingDefault;
};


__attribute__ ((visibility("default"))) wxString wxToString(const wxFontBase& font);
__attribute__ ((visibility("default"))) bool wxFromString(const wxString& str, wxFontBase* font);
# 631 "/usr/include/wx-3.1-unofficial/wx/font.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/gtk/font.h" 1
# 16 "/usr/include/wx-3.1-unofficial/wx/gtk/font.h"
class __attribute__ ((visibility("default"))) wxFont : public wxFontBase
{
public:
    wxFont() { }

    wxFont(const wxFontInfo& info);

    wxFont(const wxString& nativeFontInfoString)
    {
        Create(nativeFontInfoString);
    }

    wxFont(const wxNativeFontInfo& info);

    wxFont(int size,
           wxFontFamily family,
           wxFontStyle style,
           wxFontWeight weight,
           bool underlined = false,
           const wxString& face = wxEmptyString,
           wxFontEncoding encoding = wxFONTENCODING_DEFAULT)
    {
        Create(size, family, style, weight, underlined, face, encoding);
    }

    wxFont(const wxSize& pixelSize,
           wxFontFamily family,
           wxFontStyle style,
           wxFontWeight weight,
           bool underlined = false,
           const wxString& face = wxEmptyString,
           wxFontEncoding encoding = wxFONTENCODING_DEFAULT)
    {
        Create(10, family, style, weight, underlined, face, encoding);
        SetPixelSize(pixelSize);
    }

    bool Create(int size,
                wxFontFamily family,
                wxFontStyle style,
                wxFontWeight weight,
                bool underlined = false,
                const wxString& face = wxEmptyString,
                wxFontEncoding encoding = wxFONTENCODING_DEFAULT);


    bool Create(const wxString& fontname);

    virtual ~wxFont();


    virtual double GetFractionalPointSize() const override;
    virtual wxFontStyle GetStyle() const override;
    virtual int GetNumericWeight() const override;
    virtual wxString GetFaceName() const override;
    virtual bool GetUnderlined() const override;
    virtual bool GetStrikethrough() const override;
    virtual wxFontEncoding GetEncoding() const override;
    virtual const wxNativeFontInfo *GetNativeFontInfo() const override;
    virtual bool IsFixedWidth() const override;

    virtual void SetFractionalPointSize(double pointSize) override;
    virtual void SetFamily(wxFontFamily family) override;
    virtual void SetStyle(wxFontStyle style) override;
    virtual void SetNumericWeight(int weight) override;
    virtual bool SetFaceName( const wxString& faceName ) override;
    virtual void SetUnderlined( bool underlined ) override;
    virtual void SetStrikethrough(bool strikethrough) override;
    virtual void SetEncoding(wxFontEncoding encoding) override;

    __attribute__((deprecated("use wxFONTFAMILY_XXX constants"))) void SetFamily(int family) { SetFamily((wxFontFamily)family); } __attribute__((deprecated("use wxFONTSTYLE_XXX constants"))) void SetStyle(int style) { SetStyle((wxFontStyle)style); } __attribute__((deprecated("use wxFONTFAMILY_XXX constants"))) void SetFamily(wxDeprecatedGUIConstants family) { SetFamily((wxFontFamily)family); } __attribute__((deprecated("use wxFONTSTYLE_XXX constants"))) void SetStyle(wxDeprecatedGUIConstants style) { SetStyle((wxFontStyle)style); } wxFont& MakeBold(); wxFont& MakeItalic(); wxFont& MakeUnderlined(); wxFont& MakeStrikethrough(); wxFont& MakeLarger() { return Scale(1.2f); } wxFont& MakeSmaller() { return Scale(1/1.2f); } wxFont& Scale(float x); wxFont Bold() const; wxFont GetBaseFont() const; wxFont Italic() const; wxFont Underlined() const; wxFont Strikethrough() const; wxFont Larger() const { return Scaled(1.2f); } wxFont Smaller() const { return Scaled(1/1.2f); } wxFont Scaled(float x) const;

    __attribute__((deprecated("use wxFONT{FAMILY,STYLE,WEIGHT}_XXX constants")))
    wxFont(int size,
           int family,
           int style,
           int weight,
           bool underlined = false,
           const wxString& face = wxEmptyString,
           wxFontEncoding encoding = wxFONTENCODING_DEFAULT)
    {
        (void)Create(size, (wxFontFamily)family, (wxFontStyle)style, (wxFontWeight)weight, underlined, face, encoding);
    }






    bool GTKSetPangoAttrs(PangoLayout* layout) const;

protected:
    virtual void DoSetNativeFontInfo( const wxNativeFontInfo& info ) override;

    virtual wxGDIRefData* CreateGDIRefData() const override;
    virtual wxGDIRefData* CloneGDIRefData(const wxGDIRefData* data) const override;

    virtual wxFontFamily DoGetFamily() const override;

private:
    void Init();

    public:
# 118 "/usr/include/wx-3.1-unofficial/wx/gtk/font.h"
#pragma GCC diagnostic push
# 118 "/usr/include/wx-3.1-unofficial/wx/gtk/font.h"
   
# 118 "/usr/include/wx-3.1-unofficial/wx/gtk/font.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 118 "/usr/include/wx-3.1-unofficial/wx/gtk/font.h"
    virtual wxClassInfo *GetClassInfo() const;
# 118 "/usr/include/wx-3.1-unofficial/wx/gtk/font.h"
#pragma GCC diagnostic pop
# 118 "/usr/include/wx-3.1-unofficial/wx/gtk/font.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 632 "/usr/include/wx-3.1-unofficial/wx/font.h" 2
# 644 "/usr/include/wx-3.1-unofficial/wx/font.h"
class __attribute__ ((visibility("default"))) wxFontList: public wxGDIObjListBase
{
public:
    wxFont *FindOrCreateFont(int pointSize,
                             wxFontFamily family,
                             wxFontStyle style,
                             wxFontWeight weight,
                             bool underline = false,
                             const wxString& face = wxEmptyString,
                             wxFontEncoding encoding = wxFONTENCODING_DEFAULT);

    __attribute__((deprecated("use wxFONT{FAMILY,STYLE,WEIGHT}_XXX constants")))
    wxFont *FindOrCreateFont(int pointSize, int family, int style, int weight,
                              bool underline = false,
                              const wxString& face = wxEmptyString,
                              wxFontEncoding encoding = wxFONTENCODING_DEFAULT)
        { return FindOrCreateFont(pointSize, (wxFontFamily)family, (wxFontStyle)style,
                                  (wxFontWeight)weight, underline, face, encoding); }

    wxFont *FindOrCreateFont(const wxFontInfo& fontInfo)
        { return FindOrCreateFont(fontInfo.GetPointSize(), fontInfo.GetFamily(),
                                  fontInfo.GetStyle(), fontInfo.GetWeight(),
                                  fontInfo.IsUnderlined(), fontInfo.GetFaceName(),
                                  fontInfo.GetEncoding()); }
};

extern __attribute__ ((visibility("default"))) wxFontList* wxTheFontList;
# 680 "/usr/include/wx-3.1-unofficial/wx/font.h"
__attribute__((deprecated("use wxFONTFAMILY_XXX constants")))
 inline bool operator==(wxFontFamily s, wxDeprecatedGUIConstants t)
    { return static_cast<int>(s) == static_cast<int>(t); }
__attribute__((deprecated("use wxFONTFAMILY_XXX constants")))
 inline bool operator!=(wxFontFamily s, wxDeprecatedGUIConstants t)
    { return static_cast<int>(s) != static_cast<int>(t); }
__attribute__((deprecated("use wxFONTSTYLE_XXX constants")))
 inline bool operator==(wxFontStyle s, wxDeprecatedGUIConstants t)
    { return static_cast<int>(s) == static_cast<int>(t); }
__attribute__((deprecated("use wxFONTSTYLE_XXX constants")))
 inline bool operator!=(wxFontStyle s, wxDeprecatedGUIConstants t)
    { return static_cast<int>(s) != static_cast<int>(t); }
__attribute__((deprecated("use wxFONTWEIGHT_XXX constants")))
 inline bool operator==(wxFontWeight s, wxDeprecatedGUIConstants t)
    { return static_cast<int>(s) == static_cast<int>(t); }
__attribute__((deprecated("use wxFONTWEIGHT_XXX constants")))
 inline bool operator!=(wxFontWeight s, wxDeprecatedGUIConstants t)
    { return static_cast<int>(s) != static_cast<int>(t); }
# 24 "/usr/include/wx-3.1-unofficial/wx/window.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/colour.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/colour.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/colour.h" 2


class wxColour;
# 43 "/usr/include/wx-3.1-unofficial/wx/colour.h"
enum {
    wxC2S_NAME = 1,
    wxC2S_CSS_SYNTAX = 2,
    wxC2S_HTML_SYNTAX = 4
};

const unsigned char wxALPHA_TRANSPARENT = 0;
const unsigned char wxALPHA_OPAQUE = 0xff;
# 62 "/usr/include/wx-3.1-unofficial/wx/colour.h"
__attribute__ ((visibility("default"))) wxColour& operator << ( wxColour &object, const wxVariant &variant ); __attribute__ ((visibility("default"))) wxVariant& operator << ( wxVariant &variant, const wxColour &object );
# 80 "/usr/include/wx-3.1-unofficial/wx/colour.h"
class __attribute__ ((visibility("default"))) wxColourBase : public

    wxGDIObject



{
public:

    typedef unsigned char ChannelType;

    wxColourBase() {}
    virtual ~wxColourBase() {}





    void Set(ChannelType red,
             ChannelType green,
             ChannelType blue,
             ChannelType alpha = wxALPHA_OPAQUE)
        { InitRGBA(red, green, blue, alpha); }


    bool Set(const wxString &str)
        { return FromString(str); }

    void Set(unsigned long colRGB)
    {


        Set((ChannelType)(0xFF & colRGB),
            (ChannelType)(0xFF & (colRGB >> 8)),
            (ChannelType)(0xFF & (colRGB >> 16)));
    }






    virtual ChannelType Red() const = 0;
    virtual ChannelType Green() const = 0;
    virtual ChannelType Blue() const = 0;
    virtual ChannelType Alpha() const
        { return wxALPHA_OPAQUE ; }

    virtual bool IsSolid() const
        { return true; }


    virtual wxString GetAsString(long flags = wxC2S_NAME | wxC2S_CSS_SYNTAX) const;

    void SetRGB(wxUint32 colRGB)
    {
        Set((ChannelType)(0xFF & colRGB),
            (ChannelType)(0xFF & (colRGB >> 8)),
            (ChannelType)(0xFF & (colRGB >> 16)));
    }

    void SetRGBA(wxUint32 colRGBA)
    {
        Set((ChannelType)(0xFF & colRGBA),
            (ChannelType)(0xFF & (colRGBA >> 8)),
            (ChannelType)(0xFF & (colRGBA >> 16)),
            (ChannelType)(0xFF & (colRGBA >> 24)));
    }

    wxUint32 GetRGB() const
        { return Red() | (Green() << 8) | (Blue() << 16); }

    wxUint32 GetRGBA() const
        { return Red() | (Green() << 8) | (Blue() << 16) | (Alpha() << 24); }
# 165 "/usr/include/wx-3.1-unofficial/wx/colour.h"
    double GetLuminance() const;







    static void MakeMono (unsigned char* r, unsigned char* g, unsigned char* b, bool on);
    static void MakeDisabled(unsigned char* r, unsigned char* g, unsigned char* b, unsigned char brightness = 255);
    static void MakeGrey (unsigned char* r, unsigned char* g, unsigned char* b);
    static void MakeGrey (unsigned char* r, unsigned char* g, unsigned char* b,
                                      double weight_r, double weight_g, double weight_b);
    static unsigned char AlphaBlend (unsigned char fg, unsigned char bg, double alpha);
    static void ChangeLightness(unsigned char* r, unsigned char* g, unsigned char* b, int ialpha);

    wxColour ChangeLightness(int ialpha) const;
    wxColour& MakeDisabled(unsigned char brightness = 255);

protected:


    void Init() { }

    virtual void
    InitRGBA(ChannelType r, ChannelType g, ChannelType b, ChannelType a) = 0;

    virtual bool FromString(const wxString& s);





    virtual wxGDIRefData *CreateGDIRefData() const override
    {
        do { if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/colour.h", 200, __FUNCTION__, "\"Assert failure\"", "must be overridden if used"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );

        return 
# 202 "/usr/include/wx-3.1-unofficial/wx/colour.h" 3 4
              __null
# 202 "/usr/include/wx-3.1-unofficial/wx/colour.h"
                  ;
    }

    virtual wxGDIRefData *CloneGDIRefData(const wxGDIRefData *) const override
    {
        do { if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/colour.h", 207, __FUNCTION__, "\"Assert failure\"", "must be overridden if used"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );

        return 
# 209 "/usr/include/wx-3.1-unofficial/wx/colour.h" 3 4
              __null
# 209 "/usr/include/wx-3.1-unofficial/wx/colour.h"
                  ;
    }

};



__attribute__ ((visibility("default"))) wxString wxToString(const wxColourBase& col);
__attribute__ ((visibility("default"))) bool wxFromString(const wxString& str, wxColourBase* col);
# 226 "/usr/include/wx-3.1-unofficial/wx/colour.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/gtk/colour.h" 1
# 13 "/usr/include/wx-3.1-unofficial/wx/gtk/colour.h"
typedef struct _GdkRGBA GdkRGBA;






class __attribute__ ((visibility("default"))) wxColour : public wxColourBase
{
public:


    wxColour() { Init(); } wxColour(ChannelType red, ChannelType green, ChannelType blue, ChannelType alpha = wxALPHA_OPAQUE) { Init(); Set(red, green, blue, alpha); } wxColour(unsigned long colRGB) { Init(); Set(colRGB ); } wxColour(const wxString& colourName) { Init(); Set(colourName); } wxColour(const char *colourName) { Init(); Set(colourName); } wxColour(const wchar_t *colourName) { Init(); Set(colourName); }
    wxColour(const GdkColor& gdkColor);

    wxColour(const GdkRGBA& gdkRGBA);


    virtual ~wxColour();

    bool operator==(const wxColour& col) const;
    bool operator!=(const wxColour& col) const { return !(*this == col); }

    unsigned char Red() const override;
    unsigned char Green() const override;
    unsigned char Blue() const override;
    unsigned char Alpha() const override;



    operator const GdkRGBA*() const;




    const GdkColor *GetColor() const;

protected:
    virtual void
    InitRGBA(unsigned char r, unsigned char g, unsigned char b, unsigned char a) override;

    virtual bool FromString(const wxString& str) override;

    public:
# 56 "/usr/include/wx-3.1-unofficial/wx/gtk/colour.h"
#pragma GCC diagnostic push
# 56 "/usr/include/wx-3.1-unofficial/wx/gtk/colour.h"
   
# 56 "/usr/include/wx-3.1-unofficial/wx/gtk/colour.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 56 "/usr/include/wx-3.1-unofficial/wx/gtk/colour.h"
    virtual wxClassInfo *GetClassInfo() const;
# 56 "/usr/include/wx-3.1-unofficial/wx/gtk/colour.h"
#pragma GCC diagnostic pop
# 56 "/usr/include/wx-3.1-unofficial/wx/gtk/colour.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 227 "/usr/include/wx-3.1-unofficial/wx/colour.h" 2
# 25 "/usr/include/wx-3.1-unofficial/wx/window.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/region.h" 1
# 17 "/usr/include/wx-3.1-unofficial/wx/region.h"
class wxBitmap;
class wxColour;
class wxRegion;






enum wxRegionContain
{
    wxOutRegion = 0,
    wxPartRegion = 1,
    wxInRegion = 2
};



enum wxRegionOp
{

    wxRGN_AND,


    wxRGN_COPY,


    wxRGN_DIFF,


    wxRGN_OR,


    wxRGN_XOR
};





class __attribute__ ((visibility("default"))) wxRegionBase : public wxGDIObject
{
public:
# 77 "/usr/include/wx-3.1-unofficial/wx/region.h"
    bool operator==(const wxRegion& region) const { return IsEqual(region); }
    bool operator!=(const wxRegion& region) const { return !(*this == region); }






    virtual bool IsEmpty() const = 0;
    bool Empty() const { return IsEmpty(); }


    bool IsEqual(const wxRegion& region) const;


    bool GetBox(wxCoord& x, wxCoord& y, wxCoord& w, wxCoord& h) const
        { return DoGetBox(x, y, w, h); }
    wxRect GetBox() const
    {
        wxCoord x, y, w, h;
        return DoGetBox(x, y, w, h) ? wxRect(x, y, w, h) : wxRect();
    }


    wxRegionContain Contains(wxCoord x, wxCoord y) const
        { return DoContainsPoint(x, y); }
    wxRegionContain Contains(const wxPoint& pt) const
        { return DoContainsPoint(pt.x, pt.y); }
    wxRegionContain Contains(wxCoord x, wxCoord y, wxCoord w, wxCoord h) const
        { return DoContainsRect(wxRect(x, y, w, h)); }
    wxRegionContain Contains(const wxRect& rect) const
        { return DoContainsRect(rect); }





    virtual void Clear() = 0;


    bool Offset(wxCoord x, wxCoord y)
        { return DoOffset(x, y); }
    bool Offset(const wxPoint& pt)
        { return DoOffset(pt.x, pt.y); }


    bool Union(wxCoord x, wxCoord y, wxCoord w, wxCoord h)
        { return DoUnionWithRect(wxRect(x, y, w, h)); }
    bool Union(const wxRect& rect)
        { return DoUnionWithRect(rect); }
    bool Union(const wxRegion& region)
        { return DoUnionWithRegion(region); }







    bool Union(const wxBitmap& bmp);
    bool Union(const wxBitmap& bmp, const wxColour& transp, int tolerance = 0);



    bool Intersect(wxCoord x, wxCoord y, wxCoord w, wxCoord h);
    bool Intersect(const wxRect& rect);
    bool Intersect(const wxRegion& region)
        { return DoIntersect(region); }



    bool Subtract(wxCoord x, wxCoord y, wxCoord w, wxCoord h);
    bool Subtract(const wxRect& rect);
    bool Subtract(const wxRegion& region)
        { return DoSubtract(region); }


    bool Xor(wxCoord x, wxCoord y, wxCoord w, wxCoord h);
    bool Xor(const wxRect& rect);
    bool Xor(const wxRegion& region)
        { return DoXor(region); }




    wxBitmap ConvertToBitmap() const;

protected:
    virtual bool DoIsEqual(const wxRegion& region) const = 0;
    virtual bool DoGetBox(wxCoord& x, wxCoord& y, wxCoord& w, wxCoord& h) const = 0;
    virtual wxRegionContain DoContainsPoint(wxCoord x, wxCoord y) const = 0;
    virtual wxRegionContain DoContainsRect(const wxRect& rect) const = 0;

    virtual bool DoOffset(wxCoord x, wxCoord y) = 0;

    virtual bool DoUnionWithRect(const wxRect& rect) = 0;
    virtual bool DoUnionWithRegion(const wxRegion& region) = 0;

    virtual bool DoIntersect(const wxRegion& region) = 0;
    virtual bool DoSubtract(const wxRegion& region) = 0;
    virtual bool DoXor(const wxRegion& region) = 0;
};
# 216 "/usr/include/wx-3.1-unofficial/wx/region.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/gtk/region.h" 1
# 13 "/usr/include/wx-3.1-unofficial/wx/gtk/region.h"
typedef struct _cairo_region cairo_region_t;






class __attribute__ ((visibility("default"))) wxRegion : public wxRegionBase
{
public:
    wxRegion() { }

    wxRegion( wxCoord x, wxCoord y, wxCoord w, wxCoord h )
    {
        InitRect(x, y, w, h);
    }

    wxRegion( const wxPoint& topLeft, const wxPoint& bottomRight )
    {
        InitRect(topLeft.x, topLeft.y,
                 bottomRight.x - topLeft.x, bottomRight.y - topLeft.y);
    }

    wxRegion( const wxRect& rect )
    {
        InitRect(rect.x, rect.y, rect.width, rect.height);
    }

    wxRegion( size_t n, const wxPoint *points,
              wxPolygonFillMode fillStyle = wxODDEVEN_RULE );


    wxRegion( const wxBitmap& bmp)
    {
        Union(bmp);
    }
    wxRegion( const wxBitmap& bmp,
              const wxColour& transColour, int tolerance = 0)
    {
        Union(bmp, transColour, tolerance);
    }


    virtual ~wxRegion();


    virtual void Clear() override;
    virtual bool IsEmpty() const override;


    cairo_region_t* GetRegion() const;





protected:
    virtual wxGDIRefData *CreateGDIRefData() const override;
    virtual wxGDIRefData *CloneGDIRefData(const wxGDIRefData *data) const override;


    virtual bool DoIsEqual(const wxRegion& region) const override;
    virtual bool DoGetBox(wxCoord& x, wxCoord& y, wxCoord& w, wxCoord& h) const override;
    virtual wxRegionContain DoContainsPoint(wxCoord x, wxCoord y) const override;
    virtual wxRegionContain DoContainsRect(const wxRect& rect) const override;

    virtual bool DoOffset(wxCoord x, wxCoord y) override;
    virtual bool DoUnionWithRect(const wxRect& rect) override;
    virtual bool DoUnionWithRegion(const wxRegion& region) override;
    virtual bool DoIntersect(const wxRegion& region) override;
    virtual bool DoSubtract(const wxRegion& region) override;
    virtual bool DoXor(const wxRegion& region) override;


    void InitRect(wxCoord x, wxCoord y, wxCoord w, wxCoord h);

private:
    public:
# 90 "/usr/include/wx-3.1-unofficial/wx/gtk/region.h"
#pragma GCC diagnostic push
# 90 "/usr/include/wx-3.1-unofficial/wx/gtk/region.h"
   
# 90 "/usr/include/wx-3.1-unofficial/wx/gtk/region.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 90 "/usr/include/wx-3.1-unofficial/wx/gtk/region.h"
    virtual wxClassInfo *GetClassInfo() const;
# 90 "/usr/include/wx-3.1-unofficial/wx/gtk/region.h"
#pragma GCC diagnostic pop
# 90 "/usr/include/wx-3.1-unofficial/wx/gtk/region.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};





class __attribute__ ((visibility("default"))) wxRegionIterator: public wxObject
{
public:
    wxRegionIterator();
    wxRegionIterator(const wxRegion& region);
    wxRegionIterator(const wxRegionIterator& ri) : wxObject(ri) { Init(); *this = ri; }
    ~wxRegionIterator();

    wxRegionIterator& operator=(const wxRegionIterator& ri);

    void Reset() { m_current = 0u; }
    void Reset(const wxRegion& region);

    bool HaveRects() const;
    operator bool () const { return HaveRects(); }

    wxRegionIterator& operator ++ ();
    wxRegionIterator operator ++ (int);

    wxCoord GetX() const;
    wxCoord GetY() const;
    wxCoord GetW() const;
    wxCoord GetWidth() const { return GetW(); }
    wxCoord GetH() const;
    wxCoord GetHeight() const { return GetH(); }
    wxRect GetRect() const;

private:
    void Init();
    void CreateRects( const wxRegion& r );

    wxRegion m_region;
    wxRect *m_rects;
    int m_numRects;
    int m_current;

    public:
# 133 "/usr/include/wx-3.1-unofficial/wx/gtk/region.h"
#pragma GCC diagnostic push
# 133 "/usr/include/wx-3.1-unofficial/wx/gtk/region.h"
   
# 133 "/usr/include/wx-3.1-unofficial/wx/gtk/region.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 133 "/usr/include/wx-3.1-unofficial/wx/gtk/region.h"
    virtual wxClassInfo *GetClassInfo() const;
# 133 "/usr/include/wx-3.1-unofficial/wx/gtk/region.h"
#pragma GCC diagnostic pop
# 133 "/usr/include/wx-3.1-unofficial/wx/gtk/region.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 217 "/usr/include/wx-3.1-unofficial/wx/region.h" 2
# 237 "/usr/include/wx-3.1-unofficial/wx/region.h"
inline bool wxRegionBase::Intersect(const wxRect& rect)
{
    return DoIntersect(wxRegion(rect));
}

inline bool wxRegionBase::Subtract(const wxRect& rect)
{
    return DoSubtract(wxRegion(rect));
}

inline bool wxRegionBase::Xor(const wxRect& rect)
{
    return DoXor(wxRegion(rect));
}




inline bool wxRegionBase::Intersect(wxCoord x, wxCoord y, wxCoord w, wxCoord h)
{
    return Intersect(wxRect(x, y, w, h));
}

inline bool wxRegionBase::Subtract(wxCoord x, wxCoord y, wxCoord w, wxCoord h)
{
    return Subtract(wxRect(x, y, w, h));
}

inline bool wxRegionBase::Xor(wxCoord x, wxCoord y, wxCoord w, wxCoord h)
{
    return Xor(wxRect(x, y, w, h));
}
# 26 "/usr/include/wx-3.1-unofficial/wx/window.h" 2



# 1 "/usr/include/wx-3.1-unofficial/wx/validate.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/validate.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/validate.h" 2





class wxWindow;
class wxWindowBase;
# 35 "/usr/include/wx-3.1-unofficial/wx/validate.h"
class __attribute__ ((visibility("default"))) wxValidator : public wxEvtHandler
{
public:
    wxValidator();
    wxValidator(const wxValidator& other)
        : wxEvtHandler()
        , m_validatorWindow(other.m_validatorWindow)
    {
    }
    virtual ~wxValidator();





    virtual wxObject *Clone() const
        { return 
# 51 "/usr/include/wx-3.1-unofficial/wx/validate.h" 3 4
                __null
# 51 "/usr/include/wx-3.1-unofficial/wx/validate.h"
                    ; }
    bool Copy(const wxValidator& val)
        { m_validatorWindow = val.m_validatorWindow; return true; }



    virtual bool Validate(wxWindow *) { return false; }


    virtual bool TransferToWindow() { return false; }


    virtual bool TransferFromWindow() { return false; }



    virtual void SetWindow(wxWindow *win) { m_validatorWindow = win; }


    wxWindow *GetWindow() const { return m_validatorWindow; }



    static void SuppressBellOnError(bool suppress = true)
        { ms_isSilent = suppress; }


    static bool IsSilent() { return ms_isSilent; }
# 90 "/usr/include/wx-3.1-unofficial/wx/validate.h"
protected:
    wxWindow *m_validatorWindow;

private:
    static bool ms_isSilent;

    public:
# 96 "/usr/include/wx-3.1-unofficial/wx/validate.h"
#pragma GCC diagnostic push
# 96 "/usr/include/wx-3.1-unofficial/wx/validate.h"
   
# 96 "/usr/include/wx-3.1-unofficial/wx/validate.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 96 "/usr/include/wx-3.1-unofficial/wx/validate.h"
    virtual wxClassInfo *GetClassInfo() const;
# 96 "/usr/include/wx-3.1-unofficial/wx/validate.h"
#pragma GCC diagnostic pop
# 96 "/usr/include/wx-3.1-unofficial/wx/validate.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
    private: wxValidator& operator=(const wxValidator&) = delete;
};



extern __attribute__ ((visibility("default"))) const wxValidator wxDefaultValidator;
# 30 "/usr/include/wx-3.1-unofficial/wx/window.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/windowid.h" 1
# 13 "/usr/include/wx-3.1-unofficial/wx/windowid.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/windowid.h" 2
# 26 "/usr/include/wx-3.1-unofficial/wx/windowid.h"
class __attribute__ ((visibility("default"))) wxWindowIDRef
{
public:

    wxWindowIDRef()
    {
        m_id = wxID_NONE;
    }


    wxWindowIDRef(int id)
    {
        Init(id);
    }

    wxWindowIDRef(long id)
    {
        Init(wxWindowID(id));
    }

    wxWindowIDRef(const wxWindowIDRef& id)
    {
        Init(id.m_id);
    }


    ~wxWindowIDRef()
    {
        Assign(wxID_NONE);
    }


    wxWindowIDRef& operator=(int id)
    {
        Assign(id);
        return *this;
    }

    wxWindowIDRef& operator=(long id)
    {
        Assign(wxWindowID(id));
        return *this;
    }

    wxWindowIDRef& operator=(const wxWindowIDRef& id)
    {
        if (&id != this)
            Assign(id.m_id);
        return *this;
    }


    wxWindowID GetValue() const
    {
        return m_id;
    }

    operator wxWindowID() const
    {
        return m_id;
    }

private:
# 102 "/usr/include/wx-3.1-unofficial/wx/windowid.h"
    void Init(wxWindowID id)
    {
        m_id = id;
    }

    void Assign(wxWindowID id)
    {
        m_id = id;
    }



    wxWindowID m_id;
};


inline bool operator==(const wxWindowIDRef& lhs, const wxWindowIDRef& rhs)
{
    return lhs.GetValue() == rhs.GetValue();
}

inline bool operator==(const wxWindowIDRef& lhs, int rhs)
{
    return lhs.GetValue() == rhs;
}

inline bool operator==(const wxWindowIDRef& lhs, long rhs)
{
    return lhs.GetValue() == rhs;
}

inline bool operator==(int lhs, const wxWindowIDRef& rhs)
{
    return rhs == lhs;
}

inline bool operator==(long lhs, const wxWindowIDRef& rhs)
{
    return rhs == lhs;
}

inline bool operator!=(const wxWindowIDRef& lhs, const wxWindowIDRef& rhs)
{
    return !(lhs == rhs);
}

inline bool operator!=(const wxWindowIDRef& lhs, int rhs)
{
    return !(lhs == rhs);
}

inline bool operator!=(const wxWindowIDRef& lhs, long rhs)
{
    return !(lhs == rhs);
}

inline bool operator!=(int lhs, const wxWindowIDRef& rhs)
{
    return !(lhs == rhs);
}

inline bool operator!=(long lhs, const wxWindowIDRef& rhs)
{
    return !(lhs == rhs);
}





class __attribute__ ((visibility("default"))) wxIdManager
{
public:




    static wxWindowID ReserveId(int count = 1);




    static void UnreserveId(wxWindowID id, int count = 1);
};
# 31 "/usr/include/wx-3.1-unofficial/wx/window.h" 2


# 1 "/usr/include/wx-3.1-unofficial/wx/palette.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/palette.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/palette.h" 2







class __attribute__ ((visibility("default"))) wxPaletteBase: public wxGDIObject
{
public:
    virtual ~wxPaletteBase() { }

    virtual int GetColoursCount() const { do { if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/palette.h", 27, __FUNCTION__, "\"Assert failure\"", L"not implemented"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); return 0; }
};






# 1 "/usr/include/wx-3.1-unofficial/wx/generic/paletteg.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/generic/paletteg.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/generic/paletteg.h" 2
# 23 "/usr/include/wx-3.1-unofficial/wx/generic/paletteg.h"
class wxPalette;





class __attribute__ ((visibility("default"))) wxPalette: public wxPaletteBase
{
public:
    wxPalette();
    wxPalette( int n, const unsigned char *red, const unsigned char *green, const unsigned char *blue );
    virtual ~wxPalette();

    bool Create( int n, const unsigned char *red, const unsigned char *green, const unsigned char *blue);
    int GetPixel( unsigned char red, unsigned char green, unsigned char blue ) const;
    bool GetRGB( int pixel, unsigned char *red, unsigned char *green, unsigned char *blue ) const;

    virtual int GetColoursCount() const override;

protected:
    virtual wxGDIRefData *CreateGDIRefData() const override;
    virtual wxGDIRefData *CloneGDIRefData(const wxGDIRefData *data) const override;

private:
    public:
# 47 "/usr/include/wx-3.1-unofficial/wx/generic/paletteg.h"
#pragma GCC diagnostic push
# 47 "/usr/include/wx-3.1-unofficial/wx/generic/paletteg.h"
   
# 47 "/usr/include/wx-3.1-unofficial/wx/generic/paletteg.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 47 "/usr/include/wx-3.1-unofficial/wx/generic/paletteg.h"
    virtual wxClassInfo *GetClassInfo() const;
# 47 "/usr/include/wx-3.1-unofficial/wx/generic/paletteg.h"
#pragma GCC diagnostic pop
# 47 "/usr/include/wx-3.1-unofficial/wx/generic/paletteg.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 36 "/usr/include/wx-3.1-unofficial/wx/palette.h" 2
# 34 "/usr/include/wx-3.1-unofficial/wx/window.h" 2



# 1 "/usr/include/wx-3.1-unofficial/wx/accel.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/accel.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/accel.h" 2





class wxAcceleratorTable;
class wxMenuItem;
class wxKeyEvent;






enum wxAcceleratorEntryFlags
{
    wxACCEL_NORMAL = 0x0000,
    wxACCEL_ALT = 0x0001,
    wxACCEL_CTRL = 0x0002,
    wxACCEL_SHIFT = 0x0004,



    wxACCEL_RAW_CTRL= wxACCEL_CTRL,

    wxACCEL_CMD = wxACCEL_CTRL
};





class __attribute__ ((visibility("default"))) wxAcceleratorEntry
{
public:
    wxAcceleratorEntry(int flags = 0, int keyCode = 0, int cmd = 0,
                       wxMenuItem *item = 
# 51 "/usr/include/wx-3.1-unofficial/wx/accel.h" 3 4
                                         __null
# 51 "/usr/include/wx-3.1-unofficial/wx/accel.h"
                                             )
        : m_flags(flags)
        , m_keyCode(keyCode)
        , m_command(cmd)
        , m_item(item)
        { }



    static wxAcceleratorEntry *Create(const wxString& str);

    void Set(int flags, int keyCode, int cmd, wxMenuItem *item = 
# 62 "/usr/include/wx-3.1-unofficial/wx/accel.h" 3 4
                                                                __null
# 62 "/usr/include/wx-3.1-unofficial/wx/accel.h"
                                                                    )
    {
        m_flags = flags;
        m_keyCode = keyCode;
        m_command = cmd;
        m_item = item;
    }

    void SetMenuItem(wxMenuItem *item) { m_item = item; }

    int GetFlags() const { return m_flags; }
    int GetKeyCode() const { return m_keyCode; }
    int GetCommand() const { return m_command; }

    wxMenuItem *GetMenuItem() const { return m_item; }

    bool operator==(const wxAcceleratorEntry& entry) const
    {
        return m_flags == entry.m_flags &&
               m_keyCode == entry.m_keyCode &&
               m_command == entry.m_command &&
               m_item == entry.m_item;
    }

    bool operator!=(const wxAcceleratorEntry& entry) const
        { return !(*this == entry); }






    bool IsOk() const
    {
        return m_keyCode != 0;
    }
# 106 "/usr/include/wx-3.1-unofficial/wx/accel.h"
    wxString ToString() const { return AsPossiblyLocalizedString(true); }




    wxString ToRawString() const { return AsPossiblyLocalizedString(false); }



    bool FromString(const wxString& str);


private:
    wxString AsPossiblyLocalizedString(bool localized) const;


    static bool ParseAccel(const wxString& str, int *flags, int *keycode);


    int m_flags;
    int m_keyCode;
    int m_command;


    wxMenuItem *m_item;


    friend class wxMenu;
};
# 148 "/usr/include/wx-3.1-unofficial/wx/accel.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/gtk/accel.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/gtk/accel.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/generic/accel.h" 1
# 12 "/usr/include/wx-3.1-unofficial/wx/generic/accel.h"
class wxKeyEvent;





class __attribute__ ((visibility("default"))) wxAcceleratorTable : public wxObject
{
public:
    wxAcceleratorTable();
    wxAcceleratorTable(int n, const wxAcceleratorEntry entries[]);
    virtual ~wxAcceleratorTable();

    bool Ok() const { return IsOk(); }
    bool IsOk() const;

    void Add(const wxAcceleratorEntry& entry);
    void Remove(const wxAcceleratorEntry& entry);




    wxMenuItem *GetMenuItem(const wxKeyEvent& event) const;
    int GetCommand(const wxKeyEvent& event) const;

    const wxAcceleratorEntry *GetEntry(const wxKeyEvent& event) const;

protected:

    virtual wxObjectRefData *CreateRefData() const override;
    virtual wxObjectRefData *CloneRefData(const wxObjectRefData *data) const override;

private:
    public:
# 45 "/usr/include/wx-3.1-unofficial/wx/generic/accel.h"
#pragma GCC diagnostic push
# 45 "/usr/include/wx-3.1-unofficial/wx/generic/accel.h"
   
# 45 "/usr/include/wx-3.1-unofficial/wx/generic/accel.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 45 "/usr/include/wx-3.1-unofficial/wx/generic/accel.h"
    virtual wxClassInfo *GetClassInfo() const;
# 45 "/usr/include/wx-3.1-unofficial/wx/generic/accel.h"
#pragma GCC diagnostic pop
# 45 "/usr/include/wx-3.1-unofficial/wx/generic/accel.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 15 "/usr/include/wx-3.1-unofficial/wx/gtk/accel.h" 2
# 149 "/usr/include/wx-3.1-unofficial/wx/accel.h" 2
# 157 "/usr/include/wx-3.1-unofficial/wx/accel.h"
extern __attribute__ ((visibility("default"))) wxAcceleratorTable wxNullAcceleratorTable;
# 38 "/usr/include/wx-3.1-unofficial/wx/window.h" 2
# 56 "/usr/include/wx-3.1-unofficial/wx/window.h"
class wxCaret;
class wxControl;
class wxDC;
class wxDropTarget;
class wxLayoutConstraints;
class wxSizer;
class wxTextEntry;
class wxToolTip;
class wxWindowBase;
class wxWindow;
class wxScrollHelper;
# 77 "/usr/include/wx-3.1-unofficial/wx/window.h"
struct __attribute__ ((visibility("default"))) wxVisualAttributes
{

    wxFont font;


    wxColour colFg;



    wxColour colBg;
};



enum wxWindowVariant
{
    wxWINDOW_VARIANT_NORMAL,
    wxWINDOW_VARIANT_SMALL,
    wxWINDOW_VARIANT_MINI,
    wxWINDOW_VARIANT_LARGE,
    wxWINDOW_VARIANT_MAX
};






enum wxShowEffect
{
    wxSHOW_EFFECT_NONE,
    wxSHOW_EFFECT_ROLL_TO_LEFT,
    wxSHOW_EFFECT_ROLL_TO_RIGHT,
    wxSHOW_EFFECT_ROLL_TO_TOP,
    wxSHOW_EFFECT_ROLL_TO_BOTTOM,
    wxSHOW_EFFECT_SLIDE_TO_LEFT,
    wxSHOW_EFFECT_SLIDE_TO_RIGHT,
    wxSHOW_EFFECT_SLIDE_TO_TOP,
    wxSHOW_EFFECT_SLIDE_TO_BOTTOM,
    wxSHOW_EFFECT_BLEND,
    wxSHOW_EFFECT_EXPAND,
    wxSHOW_EFFECT_MAX
};


enum
{
    wxTOUCH_NONE = 0x0000,
    wxTOUCH_VERTICAL_PAN_GESTURE = 0x0001,
    wxTOUCH_HORIZONTAL_PAN_GESTURE = 0x0002,
    wxTOUCH_PAN_GESTURES = wxTOUCH_VERTICAL_PAN_GESTURE |
                                      wxTOUCH_HORIZONTAL_PAN_GESTURE,
    wxTOUCH_ZOOM_GESTURE = 0x0004,
    wxTOUCH_ROTATE_GESTURE = 0x0008,
    wxTOUCH_PRESS_GESTURES = 0x0010,
    wxTOUCH_ALL_GESTURES = 0x001f
};


enum
{
    wxSEND_EVENT_POST = 1
};


enum
{
    wxSIZE_SET_CURRENT = 0x0001,
    wxSIZE_SET_MIN = 0x0002
};





typedef int (*wxSortFuncFor_wxWindowList)(const wxWindow **, const wxWindow **); class __attribute__ ((visibility("default"))) wxWindowListNode : public wxNodeBase { public: wxWindowListNode(wxListBase *list = 
# 153 "/usr/include/wx-3.1-unofficial/wx/window.h" 3 4
__null
# 153 "/usr/include/wx-3.1-unofficial/wx/window.h"
, wxWindowListNode *previous = 
# 153 "/usr/include/wx-3.1-unofficial/wx/window.h" 3 4
__null
# 153 "/usr/include/wx-3.1-unofficial/wx/window.h"
, wxWindowListNode *next = 
# 153 "/usr/include/wx-3.1-unofficial/wx/window.h" 3 4
__null
# 153 "/usr/include/wx-3.1-unofficial/wx/window.h"
, wxWindow *data = 
# 153 "/usr/include/wx-3.1-unofficial/wx/window.h" 3 4
__null
# 153 "/usr/include/wx-3.1-unofficial/wx/window.h"
, const wxListKey& key = wxDefaultListKey) : wxNodeBase(list, previous, next, data, key) { } wxWindowListNode *GetNext() const { return (wxWindowListNode *)wxNodeBase::GetNext(); } wxWindowListNode *GetPrevious() const { return (wxWindowListNode *)wxNodeBase::GetPrevious(); } wxWindow *GetData() const { return (wxWindow *)wxNodeBase::GetData(); } void SetData(wxWindow *data) { wxNodeBase::SetData(data); } protected: virtual void DeleteData() override; private: wxWindowListNode(const wxWindowListNode&) = delete; wxWindowListNode& operator=(const wxWindowListNode&) = delete; }; class __attribute__ ((visibility("default"))) wxWindowList : public wxListBase { public: typedef wxWindowListNode Node; class __attribute__ ((visibility("default"))) compatibility_iterator { public: compatibility_iterator(Node *ptr = 
# 153 "/usr/include/wx-3.1-unofficial/wx/window.h" 3 4
__null
# 153 "/usr/include/wx-3.1-unofficial/wx/window.h"
) : m_ptr(ptr) { } Node *operator->() const { return m_ptr; } operator Node *() const { return m_ptr; } private: Node *m_ptr; }; wxWindowList(wxKeyType keyType = wxKEY_NONE) : wxListBase(keyType) { } wxWindowList(const wxWindowList& list) : wxListBase(list.GetKeyType()) { Assign(list); } wxWindowList& operator=(const wxWindowList& list) { if (&list != this) Assign(list); return *this; } wxWindowListNode *GetFirst() const { return (wxWindowListNode *)wxListBase::GetFirst(); } wxWindowListNode *GetLast() const { return (wxWindowListNode *)wxListBase::GetLast(); } wxWindowListNode *Item(size_t index) const { return (wxWindowListNode *)wxListBase::Item(index); } wxWindow *operator[](size_t index) const { wxWindowListNode *node = Item(index); return node ? (wxWindow*)(node->GetData()) : 
# 153 "/usr/include/wx-3.1-unofficial/wx/window.h" 3 4
__null
# 153 "/usr/include/wx-3.1-unofficial/wx/window.h"
; } wxWindowListNode *Append(wxWindowBase *object) { return (wxWindowListNode *)wxListBase::Append(object); } wxWindowListNode *Insert(wxWindowBase *object) { return (wxWindowListNode *)Insert(static_cast<wxWindowListNode *>(
# 153 "/usr/include/wx-3.1-unofficial/wx/window.h" 3 4
__null
# 153 "/usr/include/wx-3.1-unofficial/wx/window.h"
), object); } wxWindowListNode *Insert(size_t pos, wxWindowBase *object) { return (wxWindowListNode *)wxListBase::Insert(pos, object); } wxWindowListNode *Insert(wxWindowListNode *prev, wxWindowBase *object) { return (wxWindowListNode *)wxListBase::Insert(prev, object); } wxWindowListNode *Append(long key, void *object) { return (wxWindowListNode *)wxListBase::Append(key, object); } wxWindowListNode *Append(const wxChar *key, void *object) { return (wxWindowListNode *)wxListBase::Append(key, object); } wxWindowListNode *DetachNode(wxWindowListNode *node) { return (wxWindowListNode *)wxListBase::DetachNode(node); } bool DeleteNode(wxWindowListNode *node) { return wxListBase::DeleteNode(node); } bool DeleteObject(wxWindowBase *object) { return wxListBase::DeleteObject(object); } void Erase(wxWindowListNode *it) { DeleteNode(it); } wxWindowListNode *Find(const wxWindowBase *object) const { return (wxWindowListNode *)wxListBase::Find(object); } virtual wxWindowListNode *Find(const wxListKey& key) const { return (wxWindowListNode *)wxListBase::Find(key); } bool Member(const wxWindowBase *object) const { return Find(object) != 
# 153 "/usr/include/wx-3.1-unofficial/wx/window.h" 3 4
__null
# 153 "/usr/include/wx-3.1-unofficial/wx/window.h"
; } int IndexOf(wxWindowBase *object) const { return wxListBase::IndexOf(object); } void Sort(wxSortCompareFunction func) { wxListBase::Sort(func); } void Sort(wxSortFuncFor_wxWindowList func) { Sort((wxSortCompareFunction)func); } protected: virtual wxNodeBase *CreateNode(wxNodeBase *prev, wxNodeBase *next, void *data, const wxListKey& key = wxDefaultListKey) override { return new wxWindowListNode(this, (wxWindowListNode *)prev, (wxWindowListNode *)next, (wxWindow *)data, key); } public: typedef size_t size_type; typedef int difference_type; typedef wxWindow* value_type; typedef wxWindowBase* base_value_type; typedef value_type& reference; typedef const value_type& const_reference; typedef base_value_type& base_reference; typedef const base_value_type& const_base_reference; class __attribute__ ((visibility("default"))) iterator { public: typedef std::ptrdiff_t difference_type; typedef std::bidirectional_iterator_tag iterator_category; typedef wxWindow* value_type; typedef value_type* pointer; typedef value_type& reference; typedef wxWindowListNode Node; typedef iterator itor; Node* m_node; Node* m_init; public: typedef reference reference_type; typedef pointer pointer_type; iterator(Node* node, Node* init) : m_node(node), m_init(init) {} iterator() : m_node(
# 153 "/usr/include/wx-3.1-unofficial/wx/window.h" 3 4
__null
# 153 "/usr/include/wx-3.1-unofficial/wx/window.h"
), m_init(
# 153 "/usr/include/wx-3.1-unofficial/wx/window.h" 3 4
__null
# 153 "/usr/include/wx-3.1-unofficial/wx/window.h"
) { } reference_type operator*() const { return *(pointer_type)m_node->GetDataPtr(); } itor& operator++() { do { if ( m_node ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/window.h", 153, __FUNCTION__, "m_node", L"uninitialized iterator"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); m_node = m_node->GetNext(); return *this; } const itor operator++(int) { itor tmp = *this; do { if ( m_node ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/window.h", 153, __FUNCTION__, "m_node", L"uninitialized iterator"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); m_node = m_node->GetNext(); return tmp; } itor& operator--() { m_node = m_node ? m_node->GetPrevious() : m_init; return *this; } const itor operator--(int) { itor tmp = *this; m_node = m_node ? m_node->GetPrevious() : m_init; return tmp; } bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; class __attribute__ ((visibility("default"))) const_iterator { public: typedef std::ptrdiff_t difference_type; typedef std::bidirectional_iterator_tag iterator_category; typedef wxWindow* value_type; typedef const value_type* pointer; typedef const value_type& reference; typedef wxWindowListNode Node; typedef const_iterator itor; Node* m_node; Node* m_init; public: typedef reference reference_type; typedef pointer pointer_type; const_iterator(Node* node, Node* init) : m_node(node), m_init(init) { } const_iterator() : m_node(
# 153 "/usr/include/wx-3.1-unofficial/wx/window.h" 3 4
__null
# 153 "/usr/include/wx-3.1-unofficial/wx/window.h"
), m_init(
# 153 "/usr/include/wx-3.1-unofficial/wx/window.h" 3 4
__null
# 153 "/usr/include/wx-3.1-unofficial/wx/window.h"
) { } const_iterator(const iterator& it) : m_node(it.m_node), m_init(it.m_init) { } reference_type operator*() const { return *(pointer_type)m_node->GetDataPtr(); } itor& operator++() { do { if ( m_node ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/window.h", 153, __FUNCTION__, "m_node", L"uninitialized iterator"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); m_node = m_node->GetNext(); return *this; } const itor operator++(int) { itor tmp = *this; do { if ( m_node ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/window.h", 153, __FUNCTION__, "m_node", L"uninitialized iterator"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); m_node = m_node->GetNext(); return tmp; } itor& operator--() { m_node = m_node ? m_node->GetPrevious() : m_init; return *this; } const itor operator--(int) { itor tmp = *this; m_node = m_node ? m_node->GetPrevious() : m_init; return tmp; } bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; class __attribute__ ((visibility("default"))) reverse_iterator { public: typedef std::ptrdiff_t difference_type; typedef std::bidirectional_iterator_tag iterator_category; typedef wxWindow* value_type; typedef value_type* pointer; typedef value_type& reference; typedef wxWindowListNode Node; typedef reverse_iterator itor; Node* m_node; Node* m_init; public: typedef reference reference_type; typedef pointer pointer_type; reverse_iterator(Node* node, Node* init) : m_node(node), m_init(init) { } reverse_iterator() : m_node(
# 153 "/usr/include/wx-3.1-unofficial/wx/window.h" 3 4
__null
# 153 "/usr/include/wx-3.1-unofficial/wx/window.h"
), m_init(
# 153 "/usr/include/wx-3.1-unofficial/wx/window.h" 3 4
__null
# 153 "/usr/include/wx-3.1-unofficial/wx/window.h"
) { } reference_type operator*() const { return *(pointer_type)m_node->GetDataPtr(); } itor& operator++() { m_node = m_node->GetPrevious(); return *this; } const itor operator++(int) { itor tmp = *this; m_node = m_node->GetPrevious(); return tmp; } itor& operator--() { m_node = m_node ? m_node->GetNext() : m_init; return *this; } const itor operator--(int) { itor tmp = *this; m_node = m_node ? m_node->GetNext() : m_init; return tmp; } bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; class __attribute__ ((visibility("default"))) const_reverse_iterator { public: typedef std::ptrdiff_t difference_type; typedef std::bidirectional_iterator_tag iterator_category; typedef wxWindow* value_type; typedef const value_type* pointer; typedef const value_type& reference; typedef wxWindowListNode Node; typedef const_reverse_iterator itor; Node* m_node; Node* m_init; public: typedef reference reference_type; typedef pointer pointer_type; const_reverse_iterator(Node* node, Node* init) : m_node(node), m_init(init) { } const_reverse_iterator() : m_node(
# 153 "/usr/include/wx-3.1-unofficial/wx/window.h" 3 4
__null
# 153 "/usr/include/wx-3.1-unofficial/wx/window.h"
), m_init(
# 153 "/usr/include/wx-3.1-unofficial/wx/window.h" 3 4
__null
# 153 "/usr/include/wx-3.1-unofficial/wx/window.h"
) { } const_reverse_iterator(const reverse_iterator& it) : m_node(it.m_node), m_init(it.m_init) { } reference_type operator*() const { return *(pointer_type)m_node->GetDataPtr(); } itor& operator++() { m_node = m_node->GetPrevious(); return *this; } const itor operator++(int) { itor tmp = *this; m_node = m_node->GetPrevious(); return tmp; } itor& operator--() { m_node = m_node ? m_node->GetNext() : m_init; return *this;} const itor operator--(int) { itor tmp = *this; m_node = m_node ? m_node->GetNext() : m_init; return tmp; } bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; explicit wxWindowList(size_type n, const_reference v = value_type()) { assign(n, v); } wxWindowList(const const_iterator& first, const const_iterator& last) { assign(first, last); } iterator begin() { return iterator(GetFirst(), GetLast()); } const_iterator begin() const { return const_iterator(GetFirst(), GetLast()); } iterator end() { return iterator(
# 153 "/usr/include/wx-3.1-unofficial/wx/window.h" 3 4
__null
# 153 "/usr/include/wx-3.1-unofficial/wx/window.h"
, GetLast()); } const_iterator end() const { return const_iterator(
# 153 "/usr/include/wx-3.1-unofficial/wx/window.h" 3 4
__null
# 153 "/usr/include/wx-3.1-unofficial/wx/window.h"
, GetLast()); } reverse_iterator rbegin() { return reverse_iterator(GetLast(), GetFirst()); } const_reverse_iterator rbegin() const { return const_reverse_iterator(GetLast(), GetFirst()); } reverse_iterator rend() { return reverse_iterator(
# 153 "/usr/include/wx-3.1-unofficial/wx/window.h" 3 4
__null
# 153 "/usr/include/wx-3.1-unofficial/wx/window.h"
, GetFirst()); } const_reverse_iterator rend() const { return const_reverse_iterator(
# 153 "/usr/include/wx-3.1-unofficial/wx/window.h" 3 4
__null
# 153 "/usr/include/wx-3.1-unofficial/wx/window.h"
, GetFirst()); } void resize(size_type n, value_type v = value_type()) { while (n < size()) pop_back(); while (n > size()) push_back(v); } size_type size() const { return GetCount(); } size_type max_size() const { return 0x7fffffff; } bool empty() const { return IsEmpty(); } reference front() { return *begin(); } const_reference front() const { return *begin(); } reference back() { iterator tmp = end(); return *--tmp; } const_reference back() const { const_iterator tmp = end(); return *--tmp; } void push_front(const_reference v = value_type()) { Insert(GetFirst(), (const_base_reference)v); } void pop_front() { DeleteNode(GetFirst()); } void push_back(const_reference v = value_type()) { Append((const_base_reference)v); } void pop_back() { DeleteNode(GetLast()); } void assign(const_iterator first, const const_iterator& last) { clear(); for(; first != last; ++first) Append((const_base_reference)*first); } void assign(size_type n, const_reference v = value_type()) { clear(); for(size_type i = 0; i < n; ++i) Append((const_base_reference)v); } iterator insert(const iterator& it, const_reference v) { if ( it == end() ) { Append((const_base_reference)v); iterator itins(end()); return --itins; } else { Insert(it.m_node, (const_base_reference)v); iterator itins(it); return --itins; } } void insert(const iterator& it, size_type n, const_reference v) { for(size_type i = 0; i < n; ++i) insert(it, v); } void insert(const iterator& it, const_iterator first, const const_iterator& last) { for(; first != last; ++first) insert(it, *first); } iterator erase(const iterator& it) { iterator next = iterator(it.m_node->GetNext(), GetLast()); DeleteNode(it.m_node); return next; } iterator erase(const iterator& first, const iterator& last) { iterator next = last; if ( next != end() ) ++next; DeleteNodes(first.m_node, last.m_node); return next; } void clear() { Clear(); } void splice(const iterator& it, wxWindowList& l, const iterator& first, const iterator& last) { insert(it, first, last); l.erase(first, last); } void splice(const iterator& it, wxWindowList& l) { splice(it, l, l.begin(), l.end() ); } void splice(const iterator& it, wxWindowList& l, const iterator& first) { if ( it != first ) { insert(it, *first); l.erase(first); } } void remove(const_reference v) { DeleteObject((const_base_reference)v); } void reverse() { Reverse(); } };





extern __attribute__ ((visibility("default"))) wxWindowList wxTopLevelWindows;


extern __attribute__ ((visibility("default"))) wxList wxPendingDelete;
# 175 "/usr/include/wx-3.1-unofficial/wx/window.h"
class __attribute__ ((visibility("default"))) wxWindowBase : public wxEvtHandler
{
public:





    wxWindowBase() ;

    virtual ~wxWindowBase();






    bool Close( bool force = false );






    virtual bool Destroy();

    bool DestroyChildren();


    bool IsBeingDeleted() const;







    virtual void SetLabel(const wxString& label) = 0;
    virtual wxString GetLabel() const = 0;



    virtual void SetName( const wxString &name ) { m_windowName = name; }
    virtual wxString GetName() const { return m_windowName; }



    void SetWindowVariant(wxWindowVariant variant);
    wxWindowVariant GetWindowVariant() const { return m_windowVariant; }




    virtual wxLayoutDirection GetLayoutDirection() const
        { return wxLayout_Default; }
    virtual void SetLayoutDirection(wxLayoutDirection )
        { }



    virtual wxCoord AdjustForLayoutDirection(wxCoord x,
                                             wxCoord width,
                                             wxCoord widthTotal) const;




    virtual void SetId( wxWindowID winid ) { m_windowId = winid; }
    wxWindowID GetId() const { return m_windowId; }





    static wxWindowID NewControlId(int count = 1)
    {
        return wxIdManager::ReserveId(count);
    }



    static void UnreserveControlId(wxWindowID id, int count = 1)
    {
        wxIdManager::UnreserveId(id, count);
    }






    void SetSize( int x, int y, int width, int height,
                  int sizeFlags = (0x0001|0x0002) )
        { DoSetSize(x, y, width, height, sizeFlags); }

    void SetSize( int width, int height )
        { DoSetSize( wxDefaultCoord, wxDefaultCoord, width, height, 0x0000 ); }

    void SetSize( const wxSize& size )
        { SetSize( size.x, size.y); }

    void SetSize(const wxRect& rect, int sizeFlags = (0x0001|0x0002))
        { DoSetSize(rect.x, rect.y, rect.width, rect.height, sizeFlags); }

    void Move(int x, int y, int flags = 0x0000)
        { DoSetSize(x, y, wxDefaultCoord, wxDefaultCoord, flags); }

    void Move(const wxPoint& pt, int flags = 0x0000)
        { Move(pt.x, pt.y, flags); }

    void SetPosition(const wxPoint& pt) { Move(pt); }


    virtual void Raise() = 0;
    virtual void Lower() = 0;


    void SetClientSize( int width, int height )
        { DoSetClientSize(width, height); }

    void SetClientSize( const wxSize& size )
        { DoSetClientSize(size.x, size.y); }

    void SetClientSize(const wxRect& rect)
        { SetClientSize( rect.width, rect.height ); }





    void GetPosition( int *x, int *y ) const { DoGetPosition(x, y); }
    wxPoint GetPosition() const
    {
        int x, y;
        DoGetPosition(&x, &y);

        return wxPoint(x, y);
    }


    void GetScreenPosition(int *x, int *y) const { DoGetScreenPosition(x, y); }
    wxPoint GetScreenPosition() const
    {
        int x, y;
        DoGetScreenPosition(&x, &y);

        return wxPoint(x, y);
    }


    void GetSize( int *w, int *h ) const { DoGetSize(w, h); }
    wxSize GetSize() const
    {
        int w, h;
        DoGetSize(& w, & h);
        return wxSize(w, h);
    }

    void GetClientSize( int *w, int *h ) const { DoGetClientSize(w, h); }
    wxSize GetClientSize() const
    {
        int w, h;
        DoGetClientSize(&w, &h);

        return wxSize(w, h);
    }


    wxRect GetRect() const
    {
        int x, y, w, h;
        GetPosition(&x, &y);
        GetSize(&w, &h);

        return wxRect(x, y, w, h);
    }

    wxRect GetScreenRect() const
    {
        int x, y, w, h;
        GetScreenPosition(&x, &y);
        GetSize(&w, &h);

        return wxRect(x, y, w, h);
    }




    virtual wxPoint GetClientAreaOrigin() const;


    wxRect GetClientRect() const
    {
        return wxRect(GetClientAreaOrigin(), GetClientSize());
    }


    virtual wxSize ClientToWindowSize(const wxSize& size) const;
    virtual wxSize WindowToClientSize(const wxSize& size) const;




    wxSize GetBestSize() const;

    void GetBestSize(int *w, int *h) const
    {
        wxSize s = GetBestSize();
        if ( w )
            *w = s.x;
        if ( h )
            *h = s.y;
    }




    int GetBestHeight(int width) const;
    int GetBestWidth(int height) const;


    void SetScrollHelper( wxScrollHelper *sh ) { m_scrollHelper = sh; }
    wxScrollHelper *GetScrollHelper() { return m_scrollHelper; }



    void InvalidateBestSize();
    void CacheBestSize(const wxSize& size) const
        { const_cast<wxWindowBase *>(this)->m_bestSizeCache = size; }





    virtual wxSize GetEffectiveMinSize() const;
# 419 "/usr/include/wx-3.1-unofficial/wx/window.h"
    void SetInitialSize(const wxSize& size=wxDefaultSize);
# 430 "/usr/include/wx-3.1-unofficial/wx/window.h"
    void Centre(int dir = wxBOTH) { DoCentre(dir); }
    void Center(int dir = wxBOTH) { DoCentre(dir); }


    void CentreOnParent(int dir = wxBOTH) { DoCentre(dir); }
    void CenterOnParent(int dir = wxBOTH) { CentreOnParent(dir); }


    virtual void Fit();


    virtual void FitInside();
# 450 "/usr/include/wx-3.1-unofficial/wx/window.h"
    virtual void SetSizeHints( int minW, int minH,
                               int maxW = wxDefaultCoord, int maxH = wxDefaultCoord,
                               int incW = wxDefaultCoord, int incH = wxDefaultCoord )
    { DoSetSizeHints(minW, minH, maxW, maxH, incW, incH); }

    void SetSizeHints( const wxSize& minSize,
                       const wxSize& maxSize=wxDefaultSize,
                       const wxSize& incSize=wxDefaultSize)
    { DoSetSizeHints(minSize.x, minSize.y, maxSize.x, maxSize.y, incSize.x, incSize.y); }
# 473 "/usr/include/wx-3.1-unofficial/wx/window.h"
    virtual void SetMinSize(const wxSize& minSize);
    virtual void SetMaxSize(const wxSize& maxSize);


    virtual void SetMinClientSize(const wxSize& size)
        { SetMinSize(ClientToWindowSize(size)); }
    virtual void SetMaxClientSize(const wxSize& size)
        { SetMaxSize(ClientToWindowSize(size)); }




    virtual wxSize GetMinSize() const { return wxSize(m_minWidth, m_minHeight); }
    virtual wxSize GetMaxSize() const { return wxSize(m_maxWidth, m_maxHeight); }


    virtual wxSize GetMinClientSize() const
        { return WindowToClientSize(GetMinSize()); }
    virtual wxSize GetMaxClientSize() const
        { return WindowToClientSize(GetMaxSize()); }


    int GetMinWidth() const { return GetMinSize().x; }
    int GetMinHeight() const { return GetMinSize().y; }
    int GetMaxWidth() const { return GetMaxSize().x; }
    int GetMaxHeight() const { return GetMaxSize().y; }
# 507 "/usr/include/wx-3.1-unofficial/wx/window.h"
    void SetVirtualSize( const wxSize &size ) { DoSetVirtualSize( size.x, size.y ); }
    void SetVirtualSize( int x, int y ) { DoSetVirtualSize( x, y ); }

    wxSize GetVirtualSize() const { return DoGetVirtualSize(); }
    void GetVirtualSize( int *x, int *y ) const
    {
        wxSize s( DoGetVirtualSize() );

        if( x )
            *x = s.GetWidth();
        if( y )
            *y = s.GetHeight();
    }





    virtual void DoSetVirtualSize( int x, int y );
    virtual wxSize DoGetVirtualSize() const;




    virtual wxSize GetBestVirtualSize() const
    {
        wxSize client( GetClientSize() );
        wxSize best( GetBestSize() );

        return wxSize( wxMax( client.x, best.x ), wxMax( client.y, best.y ) );
    }





    virtual double GetContentScaleFactor() const;



    virtual double GetDPIScaleFactor() const;



    virtual wxSize GetWindowBorderSize() const;







    virtual bool
    InformFirstDirection(int direction, int size, int availableOtherDir);







    virtual void SendSizeEvent(int flags = 0);






    void SendSizeEventToParent(int flags = 0);


    void PostSizeEvent() { SendSizeEvent(wxSEND_EVENT_POST); }


    void PostSizeEventToParent() { SendSizeEventToParent(wxSEND_EVENT_POST); }
# 590 "/usr/include/wx-3.1-unofficial/wx/window.h"
    virtual bool BeginRepositioningChildren() { return false; }
    virtual void EndRepositioningChildren() { }




    class ChildrenRepositioningGuard
    {
    public:


        explicit ChildrenRepositioningGuard(wxWindowBase* win)
            : m_win(win),
              m_callEnd(win && win->BeginRepositioningChildren())
        {
        }

        ~ChildrenRepositioningGuard()
        {
            if ( m_callEnd )
                m_win->EndRepositioningChildren();
        }

    private:
        wxWindowBase* const m_win;
        const bool m_callEnd;

        private: ChildrenRepositioningGuard(const ChildrenRepositioningGuard&) = delete; ChildrenRepositioningGuard& operator=(const ChildrenRepositioningGuard&) = delete;
    };







    virtual bool Show( bool show = true );
    bool Hide() { return Show(false); }






    virtual bool ShowWithEffect(wxShowEffect ,
                                unsigned = 0)
    {
        return Show();
    }

    virtual bool HideWithEffect(wxShowEffect ,
                                unsigned = 0)
    {
        return Hide();
    }


    virtual bool Enable( bool enable = true );
    bool Disable() { return Enable(false); }

    virtual bool IsShown() const { return m_isShown; }
# 659 "/usr/include/wx-3.1-unofficial/wx/window.h"
    bool IsEnabled() const;





    virtual bool IsThisEnabled() const { return m_isEnabled; }



    virtual bool IsShownOnScreen() const;



    virtual void SetWindowStyleFlag( long style ) { m_windowStyle = style; }
    virtual long GetWindowStyleFlag() const { return m_windowStyle; }


    void SetWindowStyle( long style ) { SetWindowStyleFlag(style); }
    long GetWindowStyle() const { return GetWindowStyleFlag(); }


    bool HasFlag(int flag) const { return (m_windowStyle & flag) != 0; }
    virtual bool IsRetained() const { return HasFlag(0x00000000); }



    bool ToggleWindowStyle(int flag);



    virtual void SetExtraStyle(long exStyle) { m_exStyle = exStyle; }
    long GetExtraStyle() const { return m_exStyle; }

    bool HasExtraStyle(int exFlag) const { return (m_exStyle & exFlag) != 0; }
# 703 "/usr/include/wx-3.1-unofficial/wx/window.h"
    virtual void SetThemeEnabled(bool enableTheme) { m_themeEnabled = enableTheme; }
    virtual bool GetThemeEnabled() const { return m_themeEnabled; }






    virtual void SetFocus() = 0;


    virtual void SetFocusFromKbd() { SetFocus(); }


    static wxWindow *FindFocus();

    static wxWindow *DoFindFocus() ;




    virtual bool HasFocus() const;
# 733 "/usr/include/wx-3.1-unofficial/wx/window.h"
    virtual bool AcceptsFocus() const { return true; }





    virtual bool AcceptsFocusRecursively() const { return AcceptsFocus(); }




    virtual bool AcceptsFocusFromKeyboard() const
        { return !m_disableFocusFromKbd && AcceptsFocus(); }


    void DisableFocusFromKeyboard() { m_disableFocusFromKbd = true; }
# 757 "/usr/include/wx-3.1-unofficial/wx/window.h"
    virtual bool CanBeFocused() const { return IsShown() && IsEnabled(); }


    bool IsFocusable() const { return AcceptsFocus() && CanBeFocused(); }






    bool CanAcceptFocus() const
        { return AcceptsFocusRecursively() && CanBeFocused(); }


    bool CanAcceptFocusFromKeyboard() const
        { return AcceptsFocusFromKeyboard() && CanBeFocused(); }


    virtual void SetCanFocus(bool ) { }


    virtual void EnableVisibleFocus(bool ) { }


    bool NavigateIn(int flags = wxNavigationKeyEvent::IsForward)
        { return DoNavigateIn(flags); }



    bool Navigate(int flags = wxNavigationKeyEvent::IsForward)
        { return m_parent && ((wxWindowBase *)m_parent)->DoNavigateIn(flags); }




    bool HandleAsNavigationKey(const wxKeyEvent& event);



    void MoveBeforeInTabOrder(wxWindow *win)
        { DoMoveInTabOrder(win, OrderBefore); }
    void MoveAfterInTabOrder(wxWindow *win)
        { DoMoveInTabOrder(win, OrderAfter); }






    const wxWindowList& GetChildren() const { return m_children; }
    wxWindowList& GetChildren() { return m_children; }


    const wxWindowList& GetWindowChildren() const { return GetChildren() ; }



    wxWindow *GetPrevSibling() const { return DoGetSibling(OrderBefore); }
    wxWindow *GetNextSibling() const { return DoGetSibling(OrderAfter); }


    wxWindow *GetParent() const { return m_parent; }
    inline wxWindow *GetGrandParent() const;


    virtual bool IsTopLevel() const;



    bool IsDescendant(wxWindowBase* win) const;


    void SetParent( wxWindowBase *parent );


    virtual bool Reparent( wxWindowBase *newParent );


    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );



    virtual bool IsClientAreaChild(const wxWindow *) const
        { return true; }






    wxWindow *FindWindow(long winid) const;
    wxWindow *FindWindow(const wxString& name) const;


    static wxWindow *FindWindowById( long winid, const wxWindow *parent = 
# 852 "/usr/include/wx-3.1-unofficial/wx/window.h" 3 4
                                                                         __null 
# 852 "/usr/include/wx-3.1-unofficial/wx/window.h"
                                                                              );
    static wxWindow *FindWindowByName( const wxString& name,
                                       const wxWindow *parent = 
# 854 "/usr/include/wx-3.1-unofficial/wx/window.h" 3 4
                                                               __null 
# 854 "/usr/include/wx-3.1-unofficial/wx/window.h"
                                                                    );
    static wxWindow *FindWindowByLabel( const wxString& label,
                                        const wxWindow *parent = 
# 856 "/usr/include/wx-3.1-unofficial/wx/window.h" 3 4
                                                                __null 
# 856 "/usr/include/wx-3.1-unofficial/wx/window.h"
                                                                     );





    wxEvtHandler *GetEventHandler() const { return m_eventHandler; }



    void SetEventHandler( wxEvtHandler *handler );



    void PushEventHandler( wxEvtHandler *handler );
    wxEvtHandler *PopEventHandler( bool deleteHandler = false );






    bool RemoveEventHandler(wxEvtHandler *handler);





    bool ProcessWindowEvent(wxEvent& event)
        { return GetEventHandler()->ProcessEvent(event); }





    bool ProcessWindowEventLocally(wxEvent& event)
        { return GetEventHandler()->ProcessEventLocally(event); }






    bool HandleWindowEvent(wxEvent& event) const;


    virtual void SetNextHandler(wxEvtHandler *handler) override;
    virtual void SetPreviousHandler(wxEvtHandler *handler) override;


protected:
# 917 "/usr/include/wx-3.1-unofficial/wx/window.h"
    using wxEvtHandler::ProcessEvent;
    using wxEvtHandler::ProcessEventLocally;

    using wxEvtHandler::ProcessThreadEvent;

    using wxEvtHandler::SafelyProcessEvent;
    using wxEvtHandler::ProcessPendingEvents;
    using wxEvtHandler::AddPendingEvent;
    using wxEvtHandler::QueueEvent;

public:







    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator *GetValidator() { return m_windowValidator; }







    virtual bool Validate();


    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();

    virtual void InitDialog();




    virtual void SetAcceleratorTable( const wxAcceleratorTable& accel )
        { m_acceleratorTable = accel; }
    wxAcceleratorTable *GetAcceleratorTable()
        { return &m_acceleratorTable; }
# 975 "/usr/include/wx-3.1-unofficial/wx/window.h"
    virtual wxSize GetDPI() const;






    virtual void WXAdjustFontToOwnPPI(wxFont& ) const { }
# 996 "/usr/include/wx-3.1-unofficial/wx/window.h"
    static wxSize FromDIP(const wxSize& sz, const wxWindowBase* w);
    static wxPoint FromDIP(const wxPoint& pt, const wxWindowBase* w)
    {
        const wxSize sz = FromDIP(wxSize(pt.x, pt.y), w);
        return wxPoint(sz.x, sz.y);
    }
    static int FromDIP(int d, const wxWindowBase* w)
    {
        return FromDIP(wxSize(d, 0), w).x;
    }

    wxSize FromDIP(const wxSize& sz) const { return FromDIP(sz, this); }
    wxPoint FromDIP(const wxPoint& pt) const { return FromDIP(pt, this); }
    int FromDIP(int d) const { return FromDIP(d, this); }

    static wxSize ToDIP(const wxSize& sz, const wxWindowBase* w);
    static wxPoint ToDIP(const wxPoint& pt, const wxWindowBase* w)
    {
        const wxSize sz = ToDIP(wxSize(pt.x, pt.y), w);
        return wxPoint(sz.x, sz.y);
    }
    static int ToDIP(int d, const wxWindowBase* w)
    {
        return ToDIP(wxSize(d, 0), w).x;
    }

    wxSize ToDIP(const wxSize& sz) const { return ToDIP(sz, this); }
    wxPoint ToDIP(const wxPoint& pt) const { return ToDIP(pt, this); }
    int ToDIP(int d) const { return ToDIP(d, this); }




    wxPoint ConvertPixelsToDialog( const wxPoint& pt ) const;
    wxPoint ConvertDialogToPixels( const wxPoint& pt ) const;
    wxSize ConvertPixelsToDialog( const wxSize& sz ) const
    {
        wxPoint pt(ConvertPixelsToDialog(wxPoint(sz.x, sz.y)));

        return wxSize(pt.x, pt.y);
    }

    wxSize ConvertDialogToPixels( const wxSize& sz ) const
    {
        wxPoint pt(ConvertDialogToPixels(wxPoint(sz.x, sz.y)));

        return wxSize(pt.x, pt.y);
    }





    virtual void WarpPointer(int x, int y) = 0;





    void CaptureMouse();
    void ReleaseMouse();


    static wxWindow *GetCapture();


    virtual bool HasCapture() const
        { return reinterpret_cast<const wxWindow*>(this) == GetCapture(); }



    virtual bool EnableTouchEvents(int )
    {
        return false;
    }






    virtual void Refresh( bool eraseBackground = true,
                          const wxRect *rect = (const wxRect *) 
# 1078 "/usr/include/wx-3.1-unofficial/wx/window.h" 3 4
                                                               __null 
# 1078 "/usr/include/wx-3.1-unofficial/wx/window.h"
                                                                    ) = 0;


    void RefreshRect(const wxRect& rect, bool eraseBackground = true)
    {
        Refresh(eraseBackground, &rect);
    }


    virtual void Update() { }


    virtual void ClearBackground();


    void Freeze();


    void Thaw();


    bool IsFrozen() const { return m_freezeCount != 0; }


    virtual void PrepareDC( wxDC & ) { }


    virtual void SetDoubleBuffered(bool ) { }


    virtual bool IsDoubleBuffered() const { return false; }



    const wxRegion& GetUpdateRegion() const { return m_updateRegion; }
    wxRegion& GetUpdateRegion() { return m_updateRegion; }


    wxRect GetUpdateClientRect() const;



    virtual bool DoIsExposed( int x, int y ) const;
    virtual bool DoIsExposed( int x, int y, int w, int h ) const;

    bool IsExposed( int x, int y ) const
        { return DoIsExposed(x, y); }
    bool IsExposed( int x, int y, int w, int h ) const
    { return DoIsExposed(x, y, w, h); }
    bool IsExposed( const wxPoint& pt ) const
        { return DoIsExposed(pt.x, pt.y); }
    bool IsExposed( const wxRect& rect ) const
        { return DoIsExposed(rect.x, rect.y, rect.width, rect.height); }
# 1142 "/usr/include/wx-3.1-unofficial/wx/window.h"
    virtual wxVisualAttributes GetDefaultAttributes() const
    {
        return GetClassDefaultAttributes(GetWindowVariant());
    }

    static wxVisualAttributes
    GetClassDefaultAttributes(wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL);





    virtual bool SetBackgroundColour(const wxColour& colour);
    void SetOwnBackgroundColour(const wxColour& colour)
    {
        if ( SetBackgroundColour(colour) )
            m_inheritBgCol = false;
    }
    wxColour GetBackgroundColour() const;
    bool InheritsBackgroundColour() const
    {
        return m_inheritBgCol;
    }
    bool UseBgCol() const
    {
        return m_hasBgCol;
    }
    bool UseBackgroundColour() const
    {
        return UseBgCol();
    }

    virtual bool SetForegroundColour(const wxColour& colour);
    void SetOwnForegroundColour(const wxColour& colour)
    {
        if ( SetForegroundColour(colour) )
            m_inheritFgCol = false;
    }
    wxColour GetForegroundColour() const;
    bool UseForegroundColour() const
    {
        return m_hasFgCol;
    }
    bool InheritsForegroundColour() const
    {
        return m_inheritFgCol;
    }


    virtual bool SetBackgroundStyle(wxBackgroundStyle style);
    wxBackgroundStyle GetBackgroundStyle() const
        { return m_backgroundStyle; }




    virtual bool HasTransparentBackground() { return false; }






    virtual bool IsTransparentBackgroundSupported(wxString* reason = 
# 1205 "/usr/include/wx-3.1-unofficial/wx/window.h" 3 4
                                                                    __null
# 1205 "/usr/include/wx-3.1-unofficial/wx/window.h"
                                                                        ) const;



    virtual bool SetFont(const wxFont& font) = 0;
    void SetOwnFont(const wxFont& font)
    {
        if ( SetFont(font) )
            m_inheritFont = false;
    }
    wxFont GetFont() const;



    virtual bool SetCursor( const wxCursor &cursor );
    const wxCursor& GetCursor() const { return m_cursor; }



    void SetCaret(wxCaret *caret);

    wxCaret *GetCaret() const { return m_caret; }



    virtual int GetCharHeight() const = 0;
    virtual int GetCharWidth() const = 0;



    void GetTextExtent(const wxString& string,
                       int *x, int *y,
                       int *descent = 
# 1237 "/usr/include/wx-3.1-unofficial/wx/window.h" 3 4
                                     __null
# 1237 "/usr/include/wx-3.1-unofficial/wx/window.h"
                                         ,
                       int *externalLeading = 
# 1238 "/usr/include/wx-3.1-unofficial/wx/window.h" 3 4
                                             __null
# 1238 "/usr/include/wx-3.1-unofficial/wx/window.h"
                                                 ,
                       const wxFont *font = 
# 1239 "/usr/include/wx-3.1-unofficial/wx/window.h" 3 4
                                           __null
# 1239 "/usr/include/wx-3.1-unofficial/wx/window.h"
                                               ) const
    {
        DoGetTextExtent(string, x, y, descent, externalLeading, font);
    }

    wxSize GetTextExtent(const wxString& string) const
    {
        wxCoord w, h;
        GetTextExtent(string, &w, &h);
        return wxSize(w, h);
    }





    void ClientToScreen( int *x, int *y ) const
        { DoClientToScreen(x, y); }
    void ScreenToClient( int *x, int *y ) const
        { DoScreenToClient(x, y); }


    wxPoint ClientToScreen(const wxPoint& pt) const
    {
        int x = pt.x, y = pt.y;
        DoClientToScreen(&x, &y);

        return wxPoint(x, y);
    }

    wxPoint ScreenToClient(const wxPoint& pt) const
    {
        int x = pt.x, y = pt.y;
        DoScreenToClient(&x, &y);

        return wxPoint(x, y);
    }


    wxHitTest HitTest(wxCoord x, wxCoord y) const
        { return DoHitTest(x, y); }

    wxHitTest HitTest(const wxPoint& pt) const
        { return DoHitTest(pt.x, pt.y); }







    wxBorder GetBorder(long flags) const;


    wxBorder GetBorder() const { return GetBorder(GetWindowStyleFlag()); }


    virtual void UpdateWindowUI(long flags = wxUPDATE_UI_NONE);


    virtual void DoUpdateWindowUI(wxUpdateUIEvent& event) ;




    bool PopupMenu(wxMenu *menu, const wxPoint& pos = wxDefaultPosition)
        { return PopupMenu(menu, pos.x, pos.y); }
    bool PopupMenu(wxMenu *menu, int x, int y);



    int GetPopupMenuSelectionFromUser(wxMenu& menu,
                                      const wxPoint& pos = wxDefaultPosition)
        { return DoGetPopupMenuSelectionFromUser(menu, pos.x, pos.y); }
    int GetPopupMenuSelectionFromUser(wxMenu& menu, int x, int y)
        { return DoGetPopupMenuSelectionFromUser(menu, x, y); }



    virtual bool HasMultiplePages() const { return false; }






    virtual bool CanScroll(int orient) const;


    bool HasScrollbar(int orient) const;


    virtual void SetScrollbar( int orient,
                               int pos,
                               int thumbvisible,
                               int range,
                               bool refresh = true ) = 0;
    virtual void SetScrollPos( int orient, int pos, bool refresh = true ) = 0;
    virtual int GetScrollPos( int orient ) const = 0;
    virtual int GetScrollThumb( int orient ) const = 0;
    virtual int GetScrollRange( int orient ) const = 0;


    virtual void ScrollWindow( int dx, int dy,
                               const wxRect* rect = 
# 1343 "/usr/include/wx-3.1-unofficial/wx/window.h" 3 4
                                                   __null 
# 1343 "/usr/include/wx-3.1-unofficial/wx/window.h"
                                                        ) = 0;




    virtual bool ScrollLines(int ) { return false; }
    virtual bool ScrollPages(int ) { return false; }


    bool LineUp() { return ScrollLines(-1); }
    bool LineDown() { return ScrollLines(1); }
    bool PageUp() { return ScrollPages(-1); }
    bool PageDown() { return ScrollPages(1); }



    virtual void AlwaysShowScrollbars(bool = true,
                                      bool = true)
    {
    }



    virtual bool IsScrollbarAlwaysShown(int ) const
    {
        return false;
    }
# 1378 "/usr/include/wx-3.1-unofficial/wx/window.h"
    void SetHelpText(const wxString& text);
# 1390 "/usr/include/wx-3.1-unofficial/wx/window.h"
    virtual wxString GetHelpTextAtPoint(const wxPoint& pt,
                                        wxHelpEvent::Origin origin) const;

    wxString GetHelpText() const
    {
        return GetHelpTextAtPoint(wxDefaultPosition, wxHelpEvent::Origin_Unknown);
    }
# 1409 "/usr/include/wx-3.1-unofficial/wx/window.h"
    void SetToolTip( const wxString &tip ) { DoSetToolTipText(tip); }


    void SetToolTip( wxToolTip *tip ) { DoSetToolTip(tip); }

    void UnsetToolTip() { SetToolTip(
# 1414 "/usr/include/wx-3.1-unofficial/wx/window.h" 3 4
                                    __null
# 1414 "/usr/include/wx-3.1-unofficial/wx/window.h"
                                        ); }

    wxToolTip* GetToolTip() const { return m_tooltip; }
    wxString GetToolTipText() const;
# 1426 "/usr/include/wx-3.1-unofficial/wx/window.h"
    bool CopyToolTip(wxToolTip *tip);
# 1439 "/usr/include/wx-3.1-unofficial/wx/window.h"
    virtual void SetDropTarget( wxDropTarget *dropTarget ) = 0;
    virtual wxDropTarget *GetDropTarget() const { return m_dropTarget; }


    virtual void DragAcceptFiles(bool accept)





    ;







    void SetConstraints( wxLayoutConstraints *constraints );
    wxLayoutConstraints *GetConstraints() const { return m_constraints; }


    void UnsetConstraints(wxLayoutConstraints *c);
    wxWindowList *GetConstraintsInvolvedIn() const
        { return m_constraintsInvolvedIn; }
    void AddConstraintReference(wxWindowBase *otherWin);
    void RemoveConstraintReference(wxWindowBase *otherWin);
    void DeleteRelatedConstraints();
    void ResetConstraints();


    virtual void SetConstraintSizes(bool recurse = true);
    virtual bool LayoutPhase1(int *noChanges);
    virtual bool LayoutPhase2(int *noChanges);
    virtual bool DoPhase(int phase);


    virtual void SetSizeConstraint(int x, int y, int w, int h);
    virtual void MoveConstraint(int x, int y);
    virtual void GetSizeConstraint(int *w, int *h) const ;
    virtual void GetClientSizeConstraint(int *w, int *h) const ;
    virtual void GetPositionConstraint(int *x, int *y) const ;






    void SetAutoLayout( bool autoLayout ) { m_autoLayout = autoLayout; }
    bool GetAutoLayout() const { return m_autoLayout; }


    virtual bool Layout();


    void SetSizer(wxSizer *sizer, bool deleteOld = true );
    void SetSizerAndFit( wxSizer *sizer, bool deleteOld = true );

    wxSizer *GetSizer() const { return m_windowSizer; }


    void SetContainingSizer(wxSizer* sizer);
    wxSizer *GetContainingSizer() const { return m_containingSizer; }
# 1522 "/usr/include/wx-3.1-unofficial/wx/window.h"
    virtual bool SetTransparent(wxByte ) { return false; }
    virtual bool CanSetTransparent() { return false; }






    void OnSysColourChanged( wxSysColourChangedEvent& event );
    void OnInitDialog( wxInitDialogEvent &event );
    void OnMiddleClick( wxMouseEvent& event );

    void OnHelp(wxHelpEvent& event);




        virtual void OnInternalIdle();



    virtual bool SendIdleEvents(wxIdleEvent& event);





    bool WXSendContextMenuEvent(const wxPoint& posInScreenCoords);






    virtual void WXSetInitialFittingClientSize(int flags);




    virtual WXWidget GetHandle() const = 0;

    virtual void AssociateHandle(WXWidget ) { }

    virtual void DissociateHandle() { }




    wxPalette GetPalette() const { return m_palette; }



    void SetPalette(const wxPalette& pal);


    bool HasCustomPalette() const { return m_hasCustomPalette; }


    wxWindow *GetAncestorWithCustomPalette() const;





    virtual void InheritAttributes();






    virtual bool ShouldInheritColours() const { return false; }



    virtual bool CanBeOutsideClientArea() const { return false; }



    virtual bool CanApplyThemeBorder() const { return true; }




    virtual wxWindow *GetMainWindowOfCompositeControl()
        { return (wxWindow*)this; }

    enum NavigationKind
    {
        Navigation_Tab,
        Navigation_Accel
    };
# 1622 "/usr/include/wx-3.1-unofficial/wx/window.h"
    virtual bool IsTopNavigationDomain(NavigationKind ) const
    {
        return false;
    }


    virtual const wxTextEntry* WXGetTextEntry() const { return 
# 1628 "/usr/include/wx-3.1-unofficial/wx/window.h" 3 4
                                                              __null
# 1628 "/usr/include/wx-3.1-unofficial/wx/window.h"
                                                                  ; }

protected:



    bool CreateBase(wxWindowBase *parent,
                    wxWindowID winid,
                    const wxPoint& pos = wxDefaultPosition,
                    const wxSize& size = wxDefaultSize,
                    long style = 0,
                    const wxValidator& validator = wxDefaultValidator,
                    const wxString& name = wxString::FromAscii(wxPanelNameStr));

    bool CreateBase(wxWindowBase *parent,
                    wxWindowID winid,
                    const wxPoint& pos,
                    const wxSize& size,
                    long style,
                    const wxString& name);


    virtual bool TryBefore(wxEvent& event) override;
    virtual bool TryAfter(wxEvent& event) override;

    enum WindowOrder
    {
        OrderBefore,
        OrderAfter
    };


    wxWindow *DoGetSibling(WindowOrder order) const;


    virtual void DoMoveInTabOrder(wxWindow *win, WindowOrder move);


    virtual bool DoNavigateIn(int flags);



    void SatisfyConstraints();




    void SendDestroyEvent();





    virtual void DoEnable(bool ) { }




    wxWindowIDRef m_windowId;



    wxWindow *m_parent;
    wxWindowList m_children;



    int m_minWidth,
                         m_minHeight,
                         m_maxWidth,
                         m_maxHeight;



    wxEvtHandler *m_eventHandler;



    wxValidator *m_windowValidator;



    wxDropTarget *m_dropTarget;



    wxCursor m_cursor;
    wxFont m_font;
    wxColour m_backgroundColour,
                         m_foregroundColour;


    wxCaret *m_caret;



    wxRegion m_updateRegion;




    wxAcceleratorTable m_acceleratorTable;




    wxToolTip *m_tooltip;





    wxLayoutConstraints *m_constraints;


    wxWindowList *m_constraintsInvolvedIn;



    wxSizer *m_windowSizer;


    wxSizer *m_containingSizer;


    bool m_autoLayout:1;


    bool m_isShown:1;
    bool m_isEnabled:1;
    bool m_isBeingDeleted:1;


    bool m_hasBgCol:1;
    bool m_hasFgCol:1;
    bool m_hasFont:1;


    bool m_inheritBgCol:1;
    bool m_inheritFgCol:1;
    bool m_inheritFont:1;


    bool m_disableFocusFromKbd:1;


    long m_windowStyle,
                         m_exStyle;
    wxString m_windowName;
    bool m_themeEnabled;
    wxBackgroundStyle m_backgroundStyle;

    wxPalette m_palette;
    bool m_hasCustomPalette;







    wxSize m_virtualSize;

    wxScrollHelper *m_scrollHelper;

    wxWindowVariant m_windowVariant ;



    virtual wxBorder GetDefaultBorder() const;




    virtual wxBorder GetDefaultBorderForControl() const { return wxBORDER_THEME; }



    static int WidthDefault(int w) { return w == wxDefaultCoord ? 20 : w; }
    static int HeightDefault(int h) { return h == wxDefaultCoord ? 20 : h; }




    wxSize m_bestSizeCache;
# 1836 "/usr/include/wx-3.1-unofficial/wx/window.h"
    virtual void DoGetTextExtent(const wxString& string,
                                 int *x, int *y,
                                 int *descent = 
# 1838 "/usr/include/wx-3.1-unofficial/wx/window.h" 3 4
                                               __null
# 1838 "/usr/include/wx-3.1-unofficial/wx/window.h"
                                                   ,
                                 int *externalLeading = 
# 1839 "/usr/include/wx-3.1-unofficial/wx/window.h" 3 4
                                                       __null
# 1839 "/usr/include/wx-3.1-unofficial/wx/window.h"
                                                           ,
                                 const wxFont *font = 
# 1840 "/usr/include/wx-3.1-unofficial/wx/window.h" 3 4
                                                     __null
# 1840 "/usr/include/wx-3.1-unofficial/wx/window.h"
                                                         ) const = 0;


    virtual void DoClientToScreen( int *x, int *y ) const = 0;
    virtual void DoScreenToClient( int *x, int *y ) const = 0;

    virtual wxHitTest DoHitTest(wxCoord x, wxCoord y) const;


    virtual void DoCaptureMouse() = 0;
    virtual void DoReleaseMouse() = 0;


    virtual void DoGetPosition(int *x, int *y) const = 0;
    virtual void DoGetScreenPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const = 0;
    virtual void DoGetClientSize(int *width, int *height) const = 0;




    virtual wxSize DoGetBestSize() const;




    virtual wxSize DoGetBestClientSize() const { return wxDefaultSize; }




    virtual int DoGetBestClientHeight(int ) const
        { return wxDefaultCoord; }
    virtual int DoGetBestClientWidth(int ) const
        { return wxDefaultCoord; }




    virtual void DoSetSize(int x, int y,
                           int width, int height,
                           int sizeFlags = (0x0001|0x0002)) = 0;


    virtual void DoSetClientSize(int width, int height) = 0;

    virtual void DoSetSizeHints( int minW, int minH,
                                 int maxW, int maxH,
                                 int incW, int incH );
# 1897 "/usr/include/wx-3.1-unofficial/wx/window.h"
    virtual wxSize DoGetBorderSize() const;
# 1907 "/usr/include/wx-3.1-unofficial/wx/window.h"
    virtual void DoMoveWindow(int x, int y, int width, int height) = 0;




    virtual void DoCentre(int dir);


    virtual void DoSetToolTipText( const wxString &tip );
    virtual void DoSetToolTip( wxToolTip *tip );



    virtual bool DoPopupMenu(wxMenu *menu, int x, int y) = 0;





    virtual void AdjustForParentClientOrigin(int& x, int& y,
                                             int sizeFlags = 0) const;


    virtual void DoSetWindowVariant( wxWindowVariant variant ) ;



    virtual void DoFreeze() { }
    virtual void DoThaw() { }




    static void NotifyCaptureLost();

private:



    void NotifyWindowOnEnableChange(bool enabled);



    void InternalOnPopupMenu(wxCommandEvent& event);
    void InternalOnPopupMenuUpdate(wxUpdateUIEvent& event);


    int DoGetPopupMenuSelectionFromUser(wxMenu& menu, int x, int y);




    void InternalOnSize(wxSizeEvent& event);


    wxSize GetDlgUnitBase() const;




    unsigned int m_freezeCount;

    public:
# 1969 "/usr/include/wx-3.1-unofficial/wx/window.h"
#pragma GCC diagnostic push
# 1969 "/usr/include/wx-3.1-unofficial/wx/window.h"
   
# 1969 "/usr/include/wx-3.1-unofficial/wx/window.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 1969 "/usr/include/wx-3.1-unofficial/wx/window.h"
    virtual wxClassInfo *GetClassInfo() const;
# 1969 "/usr/include/wx-3.1-unofficial/wx/window.h"
#pragma GCC diagnostic pop
# 1969 "/usr/include/wx-3.1-unofficial/wx/window.h"
    static wxClassInfo ms_classInfo;
    private: wxWindowBase(const wxWindowBase&) = delete; wxWindowBase& operator=(const wxWindowBase&) = delete;
    private: static const wxEventTableEntry sm_eventTableEntries[]; protected:
# 1971 "/usr/include/wx-3.1-unofficial/wx/window.h"
#pragma GCC diagnostic push
# 1971 "/usr/include/wx-3.1-unofficial/wx/window.h"
   
# 1971 "/usr/include/wx-3.1-unofficial/wx/window.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 1971 "/usr/include/wx-3.1-unofficial/wx/window.h"
    const wxEventTable* GetEventTable() const; wxEventHashTable& GetEventHashTable() const;
# 1971 "/usr/include/wx-3.1-unofficial/wx/window.h"
#pragma GCC diagnostic pop
# 1971 "/usr/include/wx-3.1-unofficial/wx/window.h"
    static const wxEventTable sm_eventTable; static wxEventHashTable sm_eventHashTable;
};
# 2019 "/usr/include/wx-3.1-unofficial/wx/window.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/gtk/window.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/gtk/window.h"
    typedef struct _cairo cairo_t;
    typedef struct _GtkStyleProvider GtkStyleProvider;
    typedef struct _GtkCssProvider GtkCssProvider;







typedef struct _GdkEventKey GdkEventKey;
typedef struct _GtkIMContext GtkIMContext;

typedef wxBaseArray<GdkWindow *> wxBaseArrayForwxArrayGdkWindows; class wxArrayGdkWindows : public wxBaseArrayForwxArrayGdkWindows { typedef wxBaseArrayForwxArrayGdkWindows Base; public: wxArrayGdkWindows() : Base() { } explicit wxArrayGdkWindows(size_t n) : Base(n) { } wxArrayGdkWindows(size_t n, Base::const_reference v) : Base(n, v) { } template <class InputIterator> wxArrayGdkWindows(InputIterator first, InputIterator last) : Base(first, last) { } };

extern "C"
{

typedef void (*wxGTKCallback)();

}





class __attribute__ ((visibility("default"))) wxWindow : public wxWindowBase
{
public:


    wxWindow();
    wxWindow(wxWindow *parent,
                wxWindowID id,
                const wxPoint& pos = wxDefaultPosition,
                const wxSize& size = wxDefaultSize,
                long style = 0,
                const wxString& name = wxString::FromAscii(wxPanelNameStr));
    bool Create(wxWindow *parent,
                wxWindowID id,
                const wxPoint& pos = wxDefaultPosition,
                const wxSize& size = wxDefaultSize,
                long style = 0,
                const wxString& name = wxString::FromAscii(wxPanelNameStr));
    virtual ~wxWindow();




    virtual void Raise() override;
    virtual void Lower() override;

    virtual bool Show( bool show = true ) override;
    virtual bool IsShown() const override;

    virtual bool IsRetained() const override;

    virtual void SetFocus() override;


    virtual void SetCanFocus(bool canFocus) override;

    virtual bool Reparent( wxWindowBase *newParent ) override;

    virtual void WarpPointer(int x, int y) override;

    virtual bool EnableTouchEvents(int eventsMask) override;


    virtual void Refresh( bool eraseBackground = true,
                          const wxRect *rect = (const wxRect *) 
# 85 "/usr/include/wx-3.1-unofficial/wx/gtk/window.h" 3 4
                                                               __null 
# 85 "/usr/include/wx-3.1-unofficial/wx/gtk/window.h"
                                                                    ) override;
    virtual void Update() override;
    virtual void ClearBackground() override;

    virtual bool SetBackgroundColour( const wxColour &colour ) override;
    virtual bool SetForegroundColour( const wxColour &colour ) override;
    virtual bool SetCursor( const wxCursor &cursor ) override;
    virtual bool SetFont( const wxFont &font ) override;

    virtual bool SetBackgroundStyle(wxBackgroundStyle style) override ;
    virtual bool IsTransparentBackgroundSupported(wxString* reason = 
# 95 "/usr/include/wx-3.1-unofficial/wx/gtk/window.h" 3 4
                                                                    __null
# 95 "/usr/include/wx-3.1-unofficial/wx/gtk/window.h"
                                                                        ) const override;

    virtual int GetCharHeight() const override;
    virtual int GetCharWidth() const override;
    virtual double GetContentScaleFactor() const override;
    virtual double GetDPIScaleFactor() const override;

    virtual void SetScrollbar( int orient, int pos, int thumbVisible,
                               int range, bool refresh = true ) override;
    virtual void SetScrollPos( int orient, int pos, bool refresh = true ) override;
    virtual int GetScrollPos( int orient ) const override;
    virtual int GetScrollThumb( int orient ) const override;
    virtual int GetScrollRange( int orient ) const override;
    virtual void ScrollWindow( int dx, int dy,
                               const wxRect* rect = 
# 109 "/usr/include/wx-3.1-unofficial/wx/gtk/window.h" 3 4
                                                   __null 
# 109 "/usr/include/wx-3.1-unofficial/wx/gtk/window.h"
                                                        ) override;
    virtual bool ScrollLines(int lines) override;
    virtual bool ScrollPages(int pages) override;


    virtual void SetDropTarget( wxDropTarget *dropTarget ) override;


    virtual void AddChild( wxWindowBase *child ) override;
    virtual void RemoveChild( wxWindowBase *child ) override;

    virtual void SetLayoutDirection(wxLayoutDirection dir) override;
    virtual wxLayoutDirection GetLayoutDirection() const override;
    virtual wxCoord AdjustForLayoutDirection(wxCoord x,
                                             wxCoord width,
                                             wxCoord widthTotal) const override;

    virtual bool DoIsExposed( int x, int y ) const override;
    virtual bool DoIsExposed( int x, int y, int w, int h ) const override;

    virtual void SetDoubleBuffered(bool on) override;
    virtual bool IsDoubleBuffered() const override;


    virtual void SetLabel(const wxString& label) override { m_gtkLabel = label; }
    virtual wxString GetLabel() const override { return m_gtkLabel; }




    virtual WXWidget GetHandle() const override { return m_widget; }



    virtual void OnInternalIdle() override;


    void OnIdle(wxIdleEvent& ) {}


    bool PreCreation( wxWindow *parent, const wxPoint &pos, const wxSize &size );
    void PostCreation();


    void DoAddChild(wxWindow *child);




    void GTKSendPaintEvents(cairo_t* cr);
# 169 "/usr/include/wx-3.1-unofficial/wx/gtk/window.h"
    virtual GtkWidget* GetConnectWidget();
    void ConnectWidget( GtkWidget *widget );




    int GTKCallbackCommonPrologue(struct _GdkEventAny *event) const;




    bool GTKShouldIgnoreEvent() const;






    virtual bool GTKProcessEvent(wxEvent& event) const;


    static wxLayoutDirection GTKGetLayout(GtkWidget *widget);
    static void GTKSetLayout(GtkWidget *widget, wxLayoutDirection dir);



    void GTKReleaseMouseAndNotify();
    static void GTKHandleCaptureLost();

    GdkWindow* GTKGetDrawingWindow() const;

    bool GTKHandleFocusIn();
    virtual bool GTKHandleFocusOut();
    void GTKHandleFocusOutNoDeferring();
    void GTKHandleDeferredFocusOut();



    virtual void GTKHandleRealized();
    void GTKHandleUnrealize();





    static void GTKDoApplyWidgetStyle(wxWindow* win, GtkRcStyle *style)
    {
        win->DoApplyWidgetStyle(style);
    }

protected:



    virtual bool GTKNeedsToFilterSameWindowFocus() const { return false; }





    virtual bool GTKWidgetNeedsMnemonic() const;
    virtual void GTKWidgetDoSetMnemonic(GtkWidget* w);
# 239 "/usr/include/wx-3.1-unofficial/wx/gtk/window.h"
    virtual GdkWindow *GTKGetWindow(wxArrayGdkWindows& windows) const;


    bool GTKIsOwnWindow(GdkWindow *window) const;

public:

    PangoContext *GTKGetPangoDefaultContext();



    virtual void GTKApplyToolTip(const char* tip);




    void GTKShowOnIdle() { m_showOnIdle = true; }


    bool GTKShowFromOnIdle();


    virtual bool GTKIsTransparentForMouse() const { return false; }


    wxEventType GTKGetScrollEventType(GtkRange* range);


    int m_x, m_y;
    int m_width, m_height;
    int m_clientWidth, m_clientHeight;



    bool m_useCachedClientSize;

    bool m_isGtkPositionValid;


    GtkWidget *m_widget;
    GtkWidget *m_wxwindow;


    wxString m_gtkLabel;


    bool IsOfStandardClass() const { return m_wxwindow == 
# 285 "/usr/include/wx-3.1-unofficial/wx/gtk/window.h" 3 4
                                                         __null
# 285 "/usr/include/wx-3.1-unofficial/wx/gtk/window.h"
                                                             ; }


    GtkWidget *m_focusWidget;

    void GTKDisableFocusOutEvent();
    void GTKEnableFocusOutEvent();
# 303 "/usr/include/wx-3.1-unofficial/wx/gtk/window.h"
    GtkIMContext* m_imContext;



    GdkEventKey* m_imKeyEvent;





    virtual int GTKIMFilterKeypress(GdkEventKey* event) const;







    bool GTKOnInsertText(const char* text);



    bool GTKDoInsertTextFromIM(const char* text);



    enum ScrollDir { ScrollDir_Horz, ScrollDir_Vert, ScrollDir_Max };


    GtkRange* m_scrollBar[ScrollDir_Max];


    double m_scrollPos[ScrollDir_Max];



    static ScrollDir ScrollDirFromOrient(int orient)
    {
        return orient == wxVERTICAL ? ScrollDir_Vert : ScrollDir_Horz;
    }


    static int OrientFromScrollDir(ScrollDir dir)
    {
        return dir == ScrollDir_Horz ? wxHORIZONTAL : wxVERTICAL;
    }


    ScrollDir ScrollDirFromRange(GtkRange *range) const;

    void GTKUpdateCursor(
        bool isBusyOrGlobalCursor = false,
        bool isRealize = false,
        const wxCursor* overrideCursor = 
# 356 "/usr/include/wx-3.1-unofficial/wx/gtk/window.h" 3 4
                                        __null
# 356 "/usr/include/wx-3.1-unofficial/wx/gtk/window.h"
                                            );


    bool m_noExpose:1;
    bool m_nativeSizeEvent:1;
    bool m_isScrolling:1;
    bool m_clipPaintRegion:1;
    bool m_dirtyTabOrder:1;

    bool m_mouseButtonDown:1;
    bool m_showOnIdle:1;
    bool m_needCursorReset:1;

    wxRegion m_nativeUpdateRegion;

protected:

    virtual void DoGetTextExtent(const wxString& string,
                                 int *x, int *y,
                                 int *descent = 
# 375 "/usr/include/wx-3.1-unofficial/wx/gtk/window.h" 3 4
                                               __null
# 375 "/usr/include/wx-3.1-unofficial/wx/gtk/window.h"
                                                   ,
                                 int *externalLeading = 
# 376 "/usr/include/wx-3.1-unofficial/wx/gtk/window.h" 3 4
                                                       __null
# 376 "/usr/include/wx-3.1-unofficial/wx/gtk/window.h"
                                                           ,
                                 const wxFont *font = 
# 377 "/usr/include/wx-3.1-unofficial/wx/gtk/window.h" 3 4
                                                     __null
# 377 "/usr/include/wx-3.1-unofficial/wx/gtk/window.h"
                                                         ) const override;
    virtual void DoClientToScreen( int *x, int *y ) const override;
    virtual void DoScreenToClient( int *x, int *y ) const override;
    virtual void DoGetPosition( int *x, int *y ) const override;
    virtual void DoGetSize( int *width, int *height ) const override;
    virtual void DoGetClientSize( int *width, int *height ) const override;
    virtual void DoSetSize(int x, int y,
                           int width, int height,
                           int sizeFlags = (0x0001|0x0002)) override;
    virtual void DoSetClientSize(int width, int height) override;
    virtual wxSize DoGetBorderSize() const override;
    virtual void DoMoveWindow(int x, int y, int width, int height) override;
    virtual void DoEnable(bool enable) override;


    virtual bool DoPopupMenu( wxMenu *menu, int x, int y ) override;


    virtual void DoCaptureMouse() override;
    virtual void DoReleaseMouse() override;

    virtual void DoFreeze() override;
    virtual void DoThaw() override;

    void GTKConnectFreezeWidget(GtkWidget* widget);
    void GTKFreezeWidget(GtkWidget *w);
    void GTKThawWidget(GtkWidget *w);
    void GTKDisconnect(void* instance);


    virtual void DoSetToolTip( wxToolTip *tip ) override;
# 416 "/usr/include/wx-3.1-unofficial/wx/gtk/window.h"
    void GTKCreateScrolledWindowWith(GtkWidget* view);

    virtual void DoMoveInTabOrder(wxWindow *win, WindowOrder move) override;
    virtual bool DoNavigateIn(int flags) override;



    void RealizeTabOrder();




    void GTKApplyCssStyle(GtkCssProvider* provider, const char* style);
    void GTKApplyCssStyle(const char* style);







    void GTKApplyWidgetStyle(bool forceStyle = false);






    virtual void DoApplyWidgetStyle(GtkRcStyle *style);

    void GTKApplyStyle(GtkWidget* widget, GtkRcStyle* style);


    static void GTKScrolledWindowSetBorder(GtkWidget* w, int style);





    unsigned long GTKConnectWidget(const char *signal, wxGTKCallback callback);

    void ConstrainSize();


    static GdkWindow* GTKFindWindow(GtkWidget* widget);
    static void GTKFindWindow(GtkWidget* widget, wxArrayGdkWindows& windows);

    bool m_needSizeEvent;


private:
    void Init();




    virtual bool GTKNeedsParent() const { return !IsTopLevel(); }

    enum ScrollUnit { ScrollUnit_Line, ScrollUnit_Page, ScrollUnit_Max };






    bool DoScrollByUnits(ScrollDir dir, ScrollUnit unit, int units);
    virtual void AddChildGTK(wxWindow* child);



    cairo_t* m_paintContext;

    GtkStyleProvider* m_styleProvider;

public:
    cairo_t* GTKPaintContext() const
    {
        return m_paintContext;
    }
    void GTKSizeRevalidate();


    public:
# 498 "/usr/include/wx-3.1-unofficial/wx/gtk/window.h"
#pragma GCC diagnostic push
# 498 "/usr/include/wx-3.1-unofficial/wx/gtk/window.h"
   
# 498 "/usr/include/wx-3.1-unofficial/wx/gtk/window.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 498 "/usr/include/wx-3.1-unofficial/wx/gtk/window.h"
    virtual wxClassInfo *GetClassInfo() const;
# 498 "/usr/include/wx-3.1-unofficial/wx/gtk/window.h"
#pragma GCC diagnostic pop
# 498 "/usr/include/wx-3.1-unofficial/wx/gtk/window.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
    private: wxWindow(const wxWindow&) = delete; wxWindow& operator=(const wxWindow&) = delete;
};
# 2020 "/usr/include/wx-3.1-unofficial/wx/window.h" 2
# 2072 "/usr/include/wx-3.1-unofficial/wx/window.h"
inline wxWindow *wxWindowBase::GetGrandParent() const
{
    return m_parent ? m_parent->GetParent() : 
# 2074 "/usr/include/wx-3.1-unofficial/wx/window.h" 3 4
                                             __null
# 2074 "/usr/include/wx-3.1-unofficial/wx/window.h"
                                                 ;
}







inline wxSize
wxWindowBase::FromDIP(const wxSize& sz, const wxWindowBase* )
{
    return sz;
}


inline wxSize
wxWindowBase::ToDIP(const wxSize& sz, const wxWindowBase* )
{
    return sz;
}
# 2104 "/usr/include/wx-3.1-unofficial/wx/window.h"
extern __attribute__ ((visibility("default"))) wxWindow* wxFindWindowAtPointer(wxPoint& pt);


extern __attribute__ ((visibility("default"))) wxPoint wxGetMousePosition();


extern __attribute__ ((visibility("default"))) wxWindow *wxGetActiveWindow();


__attribute__ ((visibility("default"))) wxWindow* wxGetTopLevelParent(wxWindowBase *win);
# 39 "/usr/include/wx-3.1-unofficial/wx/wx.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/containr.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/containr.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/containr.h" 2






class wxWindow;
class wxWindowBase;
# 36 "/usr/include/wx-3.1-unofficial/wx/containr.h"
class __attribute__ ((visibility("default"))) wxControlContainerBase
{
public:

    wxControlContainerBase()
    {
        m_winParent = 
# 42 "/usr/include/wx-3.1-unofficial/wx/containr.h" 3 4
                     __null
# 42 "/usr/include/wx-3.1-unofficial/wx/containr.h"
                         ;


        m_acceptsFocusSelf = true;

        m_inSetFocus = false;
        m_winLastFocused = 
# 48 "/usr/include/wx-3.1-unofficial/wx/containr.h" 3 4
                          __null
# 48 "/usr/include/wx-3.1-unofficial/wx/containr.h"
                              ;
    }
    virtual ~wxControlContainerBase() {}

    void SetContainerWindow(wxWindow *winParent)
    {
        do { if ( !m_winParent ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/containr.h", 54, __FUNCTION__, "!m_winParent", L"shouldn't be called twice"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );

        m_winParent = winParent;
    }



    void DisableSelfFocus()
        { m_acceptsFocusSelf = false; UpdateParentCanFocus(); }




    void EnableSelfFocus()
        { m_acceptsFocusSelf = true; UpdateParentCanFocus(); }



    bool DoSetFocus();


    bool AcceptsFocus() const;


    bool AcceptsFocusRecursively() const
        { return AcceptsFocus() || HasAnyChildrenAcceptingFocus(); }


    bool AcceptsFocusFromKeyboard() const { return AcceptsFocusRecursively(); }




    bool UpdateCanFocusChildren();
# 99 "/usr/include/wx-3.1-unofficial/wx/containr.h"
protected:

    virtual bool SetFocusToChild();


    bool HasAnyFocusableChildren() const;


    bool HasAnyChildrenAcceptingFocus() const;



    wxWindow *m_winParent;


    wxWindow *m_winLastFocused;

private:

    void UpdateParentCanFocus(bool acceptsFocusChildren);
    void UpdateParentCanFocus()
    {
        UpdateParentCanFocus(HasAnyFocusableChildren());
    }







    bool m_acceptsFocusSelf;


    bool m_inSetFocus;
};
# 143 "/usr/include/wx-3.1-unofficial/wx/containr.h"
class __attribute__ ((visibility("default"))) wxControlContainer : public wxControlContainerBase
{
protected:

    virtual bool SetFocusToChild() override;
};
# 179 "/usr/include/wx-3.1-unofficial/wx/containr.h"
extern __attribute__ ((visibility("default"))) bool wxSetFocusToChild(wxWindow *win, wxWindow **child);
# 188 "/usr/include/wx-3.1-unofficial/wx/containr.h"
template <class W>
class wxNavigationEnabled : public W
{
public:
    typedef W BaseWindowClass;

    wxNavigationEnabled()
    {
        m_container.SetContainerWindow(this);
# 207 "/usr/include/wx-3.1-unofficial/wx/containr.h"
    }

    __attribute__ ((visibility("default"))) virtual bool AcceptsFocus() const override
    {
        return m_container.AcceptsFocus();
    }

    __attribute__ ((visibility("default"))) virtual bool AcceptsFocusRecursively() const override
    {
        return m_container.AcceptsFocusRecursively();
    }

    __attribute__ ((visibility("default"))) virtual bool AcceptsFocusFromKeyboard() const override
    {
        return m_container.AcceptsFocusFromKeyboard();
    }

    __attribute__ ((visibility("default"))) virtual void AddChild(wxWindowBase *child) override
    {
        BaseWindowClass::AddChild(child);

        if ( m_container.UpdateCanFocusChildren() )
        {


            if ( !BaseWindowClass::HasFlag(0x00080000) )
                BaseWindowClass::ToggleWindowStyle(0x00080000);
        }
    }

    __attribute__ ((visibility("default"))) virtual void RemoveChild(wxWindowBase *child) override
    {




        BaseWindowClass::RemoveChild(child);



        m_container.UpdateCanFocusChildren();
    }

    __attribute__ ((visibility("default"))) virtual void SetFocus() override
    {
        if ( !m_container.DoSetFocus() )
            BaseWindowClass::SetFocus();
    }

    void SetFocusIgnoringChildren()
    {
        BaseWindowClass::SetFocus();
    }
# 274 "/usr/include/wx-3.1-unofficial/wx/containr.h"
protected:
# 293 "/usr/include/wx-3.1-unofficial/wx/containr.h"
    wxControlContainer m_container;


    private: wxNavigationEnabled(const wxNavigationEnabled<W>&) = delete; wxNavigationEnabled& operator=(const wxNavigationEnabled<W>&) = delete;
};
# 40 "/usr/include/wx-3.1-unofficial/wx/wx.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/panel.h" 1
# 22 "/usr/include/wx-3.1-unofficial/wx/panel.h"
class wxControlContainer;

extern __attribute__ ((visibility("default"))) const char wxPanelNameStr[];





class __attribute__ ((visibility("default"))) wxPanelBase : public wxNavigationEnabled<wxWindow>
{
public:
    wxPanelBase() { }
# 46 "/usr/include/wx-3.1-unofficial/wx/panel.h"
    bool Create(wxWindow *parent,
                wxWindowID winid = wxID_ANY,
                const wxPoint& pos = wxDefaultPosition,
                const wxSize& size = wxDefaultSize,
                long style = 0x00080000 | wxBORDER_NONE,
                const wxString& name = wxString::FromAscii(wxPanelNameStr));





    virtual void InitDialog() override;

private:
    private: wxPanelBase(const wxPanelBase&) = delete; wxPanelBase& operator=(const wxPanelBase&) = delete;
};







# 1 "/usr/include/wx-3.1-unofficial/wx/generic/panelg.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/generic/panelg.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/bitmap.h" 1
# 21 "/usr/include/wx-3.1-unofficial/wx/bitmap.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/image.h" 1
# 12 "/usr/include/wx-3.1-unofficial/wx/image.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 13 "/usr/include/wx-3.1-unofficial/wx/image.h" 2
# 48 "/usr/include/wx-3.1-unofficial/wx/image.h"
enum wxImageResolution
{

    wxIMAGE_RESOLUTION_NONE = 0,


    wxIMAGE_RESOLUTION_INCHES = 1,


    wxIMAGE_RESOLUTION_CM = 2
};


enum wxImageResizeQuality
{

    wxIMAGE_QUALITY_NEAREST = 0,
    wxIMAGE_QUALITY_BILINEAR = 1,
    wxIMAGE_QUALITY_BICUBIC = 2,
    wxIMAGE_QUALITY_BOX_AVERAGE = 3,


    wxIMAGE_QUALITY_NORMAL = wxIMAGE_QUALITY_NEAREST,


    wxIMAGE_QUALITY_HIGH = 4
};


enum wxImageAlphaBlendMode
{

    wxIMAGE_ALPHA_BLEND_OVER = 0,


    wxIMAGE_ALPHA_BLEND_COMPOSE = 1
};




const unsigned char wxIMAGE_ALPHA_TRANSPARENT = 0;
const unsigned char wxIMAGE_ALPHA_THRESHOLD = 0x80;
const unsigned char wxIMAGE_ALPHA_OPAQUE = 0xff;





class wxImageHandler;
class wxImage;
class wxPalette;







__attribute__ ((visibility("default"))) wxImage& operator << ( wxImage &object, const wxVariant &variant ); __attribute__ ((visibility("default"))) wxVariant& operator << ( wxVariant &variant, const wxImage &object );






class __attribute__ ((visibility("default"))) wxImageHandler: public wxObject
{
public:
    wxImageHandler()
        : m_name(wxEmptyString), m_extension(wxEmptyString), m_mime(), m_type(wxBITMAP_TYPE_INVALID)
        { }




    virtual bool LoadFile( wxImage *, wxInputStream& ,
                           bool =true, int =-1 )
        { return false; }
    virtual bool SaveFile( wxImage *, wxOutputStream& ,
                           bool =true )
        { return false; }

    int GetImageCount( wxInputStream& stream );


    bool CanRead( wxInputStream& stream ) { return CallDoCanRead(stream); }
    bool CanRead( const wxString& name );


    void SetName(const wxString& name) { m_name = name; }
    void SetExtension(const wxString& ext) { m_extension = ext; }
    void SetAltExtensions(const wxArrayString& exts) { m_altExtensions = exts; }
    void SetType(wxBitmapType type) { m_type = type; }
    void SetMimeType(const wxString& type) { m_mime = type; }
    const wxString& GetName() const { return m_name; }
    const wxString& GetExtension() const { return m_extension; }
    const wxArrayString& GetAltExtensions() const { return m_altExtensions; }
    wxBitmapType GetType() const { return m_type; }
    const wxString& GetMimeType() const { return m_mime; }







protected:



    virtual int DoGetImageCount( wxInputStream& )
        { return 1; }



    virtual bool DoCanRead( wxInputStream& stream ) = 0;


    bool CallDoCanRead(wxInputStream& stream);





    static wxImageResolution
    GetResolutionFromOptions(const wxImage& image, int *x, int *y);


    wxString m_name;
    wxString m_extension;
    wxArrayString m_altExtensions;
    wxString m_mime;
    wxBitmapType m_type;

private:
    public:
# 184 "/usr/include/wx-3.1-unofficial/wx/image.h"
#pragma GCC diagnostic push
# 184 "/usr/include/wx-3.1-unofficial/wx/image.h"
   
# 184 "/usr/include/wx-3.1-unofficial/wx/image.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 184 "/usr/include/wx-3.1-unofficial/wx/image.h"
    virtual wxClassInfo *GetClassInfo() const;
# 184 "/usr/include/wx-3.1-unofficial/wx/image.h"
#pragma GCC diagnostic pop
# 184 "/usr/include/wx-3.1-unofficial/wx/image.h"
    static wxClassInfo ms_classInfo;
};





class __attribute__ ((visibility("default"))) wxImageHistogramEntry
{
public:
    wxImageHistogramEntry() { index = value = 0; }
    unsigned long index;
    unsigned long value;
};

class wxImageHistogramBase_wxImplementation_Pair { public: typedef unsigned long first_type; typedef wxImageHistogramEntry second_type; typedef unsigned long t1; typedef wxImageHistogramEntry t2; typedef const unsigned long const_t1; typedef const wxImageHistogramEntry const_t2; wxImageHistogramBase_wxImplementation_Pair(const const_t1& f, const const_t2& s) : first(const_cast<t1&>(f)), second(const_cast<t2&>(s)) {} t1 first; t2 second; }; class wxImageHistogramBase_wxImplementation_KeyEx { typedef unsigned long key_type; typedef wxImageHistogramBase_wxImplementation_Pair pair_type; typedef const key_type const_key_type; typedef const pair_type const_pair_type; typedef const_key_type& const_key_reference; typedef const_pair_type& const_pair_reference; public: wxImageHistogramBase_wxImplementation_KeyEx() { } const_key_reference operator()( const_pair_reference pair ) const { return pair.first; }}; class wxImageHistogramBase_wxImplementation_HashTable : protected _wxHashTableBase2 { public: typedef unsigned long key_type; typedef wxImageHistogramBase_wxImplementation_Pair value_type; typedef wxIntegerHash hasher; typedef wxIntegerEqual key_equal; typedef size_t size_type; typedef ptrdiff_t difference_type; typedef value_type* pointer; typedef const value_type* const_pointer; typedef value_type& reference; typedef const value_type& const_reference; typedef const unsigned long const_key_type; typedef const wxImageHistogramBase_wxImplementation_Pair const_mapped_type; public: typedef wxImageHistogramBase_wxImplementation_KeyEx key_extractor; typedef wxImageHistogramBase_wxImplementation_HashTable Self; protected: _wxHashTable_NodeBase** m_table; size_t m_tableBuckets; size_t m_items; hasher m_hasher; key_equal m_equals; key_extractor m_getKey; public: struct Node:public _wxHashTable_NodeBase { public: Node( const value_type& value ) : m_value( value ) {} Node* next() { return static_cast<Node*>(m_next); } value_type m_value; }; protected: static void DeleteNode( _wxHashTable_NodeBase* node ) { delete static_cast<Node*>(node); } public: class Iterator { public: Node* m_node; Self* m_ht; Iterator() : m_node(
# 199 "/usr/include/wx-3.1-unofficial/wx/image.h" 3 4
__null
# 199 "/usr/include/wx-3.1-unofficial/wx/image.h"
), m_ht(
# 199 "/usr/include/wx-3.1-unofficial/wx/image.h" 3 4
__null
# 199 "/usr/include/wx-3.1-unofficial/wx/image.h"
) {} Iterator( Node* node, const Self* ht ) : m_node(node), m_ht(const_cast<Self*>(ht)) {} bool operator ==( const Iterator& it ) const { return m_node == it.m_node; } bool operator !=( const Iterator& it ) const { return m_node != it.m_node; } protected: Node* GetNextNode() { size_type bucket = GetBucketForNode(m_ht,m_node); for( size_type i = bucket + 1; i < m_ht->m_tableBuckets; ++i ) { if( m_ht->m_table[i] ) return static_cast<Node*>(m_ht->m_table[i]); } return 
# 199 "/usr/include/wx-3.1-unofficial/wx/image.h" 3 4
__null
# 199 "/usr/include/wx-3.1-unofficial/wx/image.h"
; } void PlusPlus() { Node* next = m_node->next(); m_node = next ? next : GetNextNode(); } }; friend class Iterator; public: class iterator : public Iterator { public: iterator() : Iterator() {} iterator( Node* node, Self* ht ) : Iterator( node, ht ) {} iterator& operator++() { PlusPlus(); return *this; } iterator operator++(int) { iterator it=*this;PlusPlus();return it; } reference operator *() const { return m_node->m_value; } pointer operator ->() const { return &(m_node->m_value); } }; class const_iterator : public Iterator { public: const_iterator() : Iterator() {} const_iterator(iterator i) : Iterator(i) {} const_iterator( Node* node, const Self* ht ) : Iterator(node, const_cast<Self*>(ht)) {} const_iterator& operator++() { PlusPlus();return *this; } const_iterator operator++(int) { const_iterator it=*this;PlusPlus();return it; } const_reference operator *() const { return m_node->m_value; } const_pointer operator ->() const { return &(m_node->m_value); } }; wxImageHistogramBase_wxImplementation_HashTable( size_type sz = 10, const hasher& hfun = hasher(), const key_equal& k_eq = key_equal(), const key_extractor& k_ex = key_extractor() ) : m_tableBuckets( GetNextPrime( (unsigned long) sz ) ), m_items( 0 ), m_hasher( hfun ), m_equals( k_eq ), m_getKey( k_ex ) { m_table = (_wxHashTable_NodeBase**)AllocTable(m_tableBuckets); } wxImageHistogramBase_wxImplementation_HashTable( const Self& ht ) : m_table(
# 199 "/usr/include/wx-3.1-unofficial/wx/image.h" 3 4
__null
# 199 "/usr/include/wx-3.1-unofficial/wx/image.h"
), m_tableBuckets( 0 ), m_items( ht.m_items ), m_hasher( ht.m_hasher ), m_equals( ht.m_equals ), m_getKey( ht.m_getKey ) { HashCopy( ht ); } const Self& operator=( const Self& ht ) { if (&ht != this) { clear(); m_hasher = ht.m_hasher; m_equals = ht.m_equals; m_getKey = ht.m_getKey; m_items = ht.m_items; HashCopy( ht ); } return *this; } ~wxImageHistogramBase_wxImplementation_HashTable() { clear(); FreeTable(m_table); } hasher hash_funct() { return m_hasher; } key_equal key_eq() { return m_equals; } void clear() { DeleteNodes(m_tableBuckets, m_table, DeleteNode); m_items = 0; } size_type size() const { return m_items; } size_type max_size() const { return size_type(-1); } bool empty() const { return size() == 0; } const_iterator end() const { return const_iterator(
# 199 "/usr/include/wx-3.1-unofficial/wx/image.h" 3 4
__null
# 199 "/usr/include/wx-3.1-unofficial/wx/image.h"
, this); } iterator end() { return iterator(
# 199 "/usr/include/wx-3.1-unofficial/wx/image.h" 3 4
__null
# 199 "/usr/include/wx-3.1-unofficial/wx/image.h"
, this); } const_iterator begin() const { return const_iterator(static_cast<Node*>(GetFirstNode(m_tableBuckets, m_table)), this); } iterator begin() { return iterator(static_cast<Node*>(GetFirstNode(m_tableBuckets, m_table)), this); } size_type erase( const const_key_type& key ) { _wxHashTable_NodeBase** node = GetNodePtr(key); if( !node ) return 0; --m_items; _wxHashTable_NodeBase* temp = (*node)->m_next; delete static_cast<Node*>(*node); (*node) = temp; if( never_shrink( m_tableBuckets, m_items ) ) ResizeTable( GetPreviousPrime( (unsigned long) m_tableBuckets ) - 1 ); return 1; } protected: static size_type GetBucketForNode( Self* ht, Node* node ) { return ht->m_hasher( ht->m_getKey( node->m_value ) ) % ht->m_tableBuckets; } static Node* CopyNode( Node* node ) { return new Node( *node ); } Node* GetOrCreateNode( const value_type& value, bool& created ) { const const_key_type& key = m_getKey( value ); size_t bucket = m_hasher( key ) % m_tableBuckets; Node* node = static_cast<Node*>(m_table[bucket]); while( node ) { if( m_equals( m_getKey( node->m_value ), key ) ) { created = false; return node; } node = node->next(); } created = true; return CreateNode( value, bucket); } Node * CreateNode( const value_type& value, size_t bucket ) { Node* node = new Node( value ); node->m_next = m_table[bucket]; m_table[bucket] = node; ++m_items; if( grow_lf70( m_tableBuckets, m_items ) ) ResizeTable( m_tableBuckets ); return node; } void CreateNode( const value_type& value ) { CreateNode(value, m_hasher( m_getKey(value) ) % m_tableBuckets ); } _wxHashTable_NodeBase** GetNodePtr(const const_key_type& key) const { size_t bucket = m_hasher( key ) % m_tableBuckets; _wxHashTable_NodeBase** node = &m_table[bucket]; while( *node ) { if (m_equals(m_getKey(static_cast<Node*>(*node)->m_value), key)) return node; node = &(*node)->m_next; } return 
# 199 "/usr/include/wx-3.1-unofficial/wx/image.h" 3 4
__null
# 199 "/usr/include/wx-3.1-unofficial/wx/image.h"
; } Node* GetNode( const const_key_type& key ) const { size_t bucket = m_hasher( key ) % m_tableBuckets; Node* node = static_cast<Node*>(m_table[bucket]); while( node ) { if( m_equals( m_getKey( node->m_value ), key ) ) return node; node = node->next(); } return 
# 199 "/usr/include/wx-3.1-unofficial/wx/image.h" 3 4
__null
# 199 "/usr/include/wx-3.1-unofficial/wx/image.h"
; } void ResizeTable( size_t newSize ) { newSize = GetNextPrime( (unsigned long)newSize ); _wxHashTable_NodeBase** srcTable = m_table; size_t srcBuckets = m_tableBuckets; m_table = (_wxHashTable_NodeBase**)AllocTable( newSize ); m_tableBuckets = newSize; CopyHashTable( srcTable, srcBuckets, this, m_table, (BucketFromNode)GetBucketForNode, (ProcessNode)&DummyProcessNode ); FreeTable(srcTable); } void HashCopy( const Self& ht ) { ResizeTable( ht.size() ); CopyHashTable( ht.m_table, ht.m_tableBuckets, (_wxHashTableBase2*)this, m_table, (BucketFromNode)GetBucketForNode, (ProcessNode)CopyNode ); } }; class wxImageHistogramBase:public wxImageHistogramBase_wxImplementation_HashTable { public: typedef wxImageHistogramEntry mapped_type; class Insert_Result { public: typedef iterator first_type; typedef bool second_type; typedef iterator t1; typedef bool t2; typedef const iterator const_t1; typedef const bool const_t2; Insert_Result(const const_t1& f, const const_t2& s) : first(const_cast<t1&>(f)), second(const_cast<t2&>(s)) {} t1 first; t2 second; }; explicit wxImageHistogramBase( size_type hint = 100, hasher hf = hasher(), key_equal eq = key_equal() ) : wxImageHistogramBase_wxImplementation_HashTable( hint, hf, eq, wxImageHistogramBase_wxImplementation_KeyEx() ) {} mapped_type& operator[]( const const_key_type& key ) { bool created; return GetOrCreateNode( wxImageHistogramBase_wxImplementation_Pair( key, mapped_type() ), created)->m_value.second; } const_iterator find( const const_key_type& key ) const { return const_iterator( GetNode( key ), this ); } iterator find( const const_key_type& key ) { return iterator( GetNode( key ), this ); } Insert_Result insert( const value_type& v ) { bool created; Node *node = GetOrCreateNode( wxImageHistogramBase_wxImplementation_Pair( v.first, v.second ), created); return Insert_Result(iterator(node, this), created); } size_type erase( const key_type& k ) { return wxImageHistogramBase_wxImplementation_HashTable::erase( k ); } void erase( const iterator& it ) { erase( (*it).first ); } size_type count( const const_key_type& key ) { return GetNode( key ) ? 1u : 0u; } }

                                                  ;

class wxImageHistogram : public wxImageHistogramBase
{
public:
    wxImageHistogram() : wxImageHistogramBase(256) { }


    static unsigned long MakeKey(unsigned char r,
                                 unsigned char g,
                                 unsigned char b)
    {
        return (r << 16) | (g << 8) | b;
    }






    bool FindFirstUnusedColour(unsigned char *r,
                               unsigned char *g,
                               unsigned char *b,
                               unsigned char r2 = 1,
                               unsigned char g2 = 0,
                               unsigned char b2 = 0 ) const
    {
        unsigned long key = MakeKey(r2, g2, b2);

        while ( find(key) != end() )
        {

            r2++;
            if ( r2 >= 255 )
            {
                r2 = 0;
                g2++;
                if ( g2 >= 255 )
                {
                    g2 = 0;
                    b2++;
                    if ( b2 >= 255 )
                    {
                        return false;
                    }
                }
            }

            key = MakeKey(r2, g2, b2);
        }

        if ( r )
            *r = r2;
        if ( g )
            *g = g2;
        if ( b )
            *b = b2;

        return true;
    }
};





class __attribute__ ((visibility("default"))) wxImage: public wxObject
{
public:


    class RGBValue
    {
    public:
      RGBValue(unsigned char r=0, unsigned char g=0, unsigned char b=0)
        : red(r), green(g), blue(b) {}
        unsigned char red;
        unsigned char green;
        unsigned char blue;
    };


    class HSVValue
    {
    public:
        HSVValue(double h=0.0, double s=0.0, double v=0.0)
            : hue(h), saturation(s), value(v) {}
        double hue;
        double saturation;
        double value;
    };

    wxImage() {}
    wxImage( int width, int height, bool clear = true )
        { Create( width, height, clear ); }
    wxImage( int width, int height, unsigned char* data, bool static_data = false )
        { Create( width, height, data, static_data ); }
    wxImage( int width, int height, unsigned char* data, unsigned char* alpha, bool static_data = false )
        { Create( width, height, data, alpha, static_data ); }


    wxImage( const wxSize& sz, bool clear = true )
        { Create( sz, clear ); }
    wxImage( const wxSize& sz, unsigned char* data, bool static_data = false )
        { Create( sz, data, static_data ); }
    wxImage( const wxSize& sz, unsigned char* data, unsigned char* alpha, bool static_data = false )
        { Create( sz, data, alpha, static_data ); }

    wxImage( const wxString& name, wxBitmapType type = wxBITMAP_TYPE_ANY, int index = -1 )
        { LoadFile( name, type, index ); }
    wxImage( const wxString& name, const wxString& mimetype, int index = -1 )
        { LoadFile( name, mimetype, index ); }
    wxImage( const char* const* xpmData )
        { Create(xpmData); }


    wxImage( wxInputStream& stream, wxBitmapType type = wxBITMAP_TYPE_ANY, int index = -1 )
        { LoadFile( stream, type, index ); }
    wxImage( wxInputStream& stream, const wxString& mimetype, int index = -1 )
        { LoadFile( stream, mimetype, index ); }


    bool Create( const char* const* xpmData );

    bool Create( int width, int height, bool clear = true );
    bool Create( int width, int height, unsigned char* data, bool static_data = false );
    bool Create( int width, int height, unsigned char* data, unsigned char* alpha, bool static_data = false );


    bool Create( const wxSize& sz, bool clear = true )
        { return Create(sz.GetWidth(), sz.GetHeight(), clear); }
    bool Create( const wxSize& sz, unsigned char* data, bool static_data = false )
        { return Create(sz.GetWidth(), sz.GetHeight(), data, static_data); }
    bool Create( const wxSize& sz, unsigned char* data, unsigned char* alpha, bool static_data = false )
        { return Create(sz.GetWidth(), sz.GetHeight(), data, alpha, static_data); }

    void Destroy();


    void Clear(unsigned char value = 0);



    wxImage Copy() const;


    wxImage GetSubImage( const wxRect& rect) const;





    wxImage Size( const wxSize& size, const wxPoint& pos,
                  int r = -1, int g = -1, int b = -1 ) const;





    void Paste(const wxImage& image, int x, int y,
               wxImageAlphaBlendMode alphaBlend = wxIMAGE_ALPHA_BLEND_OVER);


    wxImage Scale( int width, int height,
                   wxImageResizeQuality quality = wxIMAGE_QUALITY_NORMAL ) const;


    wxImage ResampleNearest(int width, int height) const;
    wxImage ResampleBox(int width, int height) const;
    wxImage ResampleBilinear(int width, int height) const;
    wxImage ResampleBicubic(int width, int height) const;


    wxImage Blur(int radius) const;
    wxImage BlurHorizontal(int radius) const;
    wxImage BlurVertical(int radius) const;

    wxImage ShrinkBy( int xFactor , int yFactor ) const ;


    wxImage& Rescale( int width, int height,
                      wxImageResizeQuality quality = wxIMAGE_QUALITY_NORMAL )
        { return *this = Scale(width, height, quality); }


    wxImage& Resize( const wxSize& size, const wxPoint& pos,
                     int r = -1, int g = -1, int b = -1 ) { return *this = Size(size, pos, r, g, b); }



    wxImage Rotate(double angle, const wxPoint & centre_of_rotation,
                   bool interpolating = true, wxPoint * offset_after_rotation = 
# 392 "/usr/include/wx-3.1-unofficial/wx/image.h" 3 4
                                                                               __null
# 392 "/usr/include/wx-3.1-unofficial/wx/image.h"
                                                                                   ) const;

    wxImage Rotate90( bool clockwise = true ) const;
    wxImage Rotate180() const;
    wxImage Mirror( bool horizontally = true ) const;


    void Replace( unsigned char r1, unsigned char g1, unsigned char b1,
                  unsigned char r2, unsigned char g2, unsigned char b2 );



    wxImage ConvertToGreyscale(double weight_r, double weight_g, double weight_b) const;
    wxImage ConvertToGreyscale() const;



    wxImage ConvertToMono( unsigned char r, unsigned char g, unsigned char b ) const;


    wxImage ConvertToDisabled(unsigned char brightness = 255) const;


    void SetRGB( int x, int y, unsigned char r, unsigned char g, unsigned char b );
    void SetRGB( const wxRect& rect, unsigned char r, unsigned char g, unsigned char b );
    unsigned char GetRed( int x, int y ) const;
    unsigned char GetGreen( int x, int y ) const;
    unsigned char GetBlue( int x, int y ) const;

    void SetAlpha(int x, int y, unsigned char alpha);
    unsigned char GetAlpha(int x, int y) const;



    bool FindFirstUnusedColour( unsigned char *r, unsigned char *g, unsigned char *b,
                                unsigned char startR = 1, unsigned char startG = 0,
                                unsigned char startB = 0 ) const;

    bool SetMaskFromImage(const wxImage & mask,
                          unsigned char mr, unsigned char mg, unsigned char mb);




    bool ConvertAlphaToMask(unsigned char threshold = wxIMAGE_ALPHA_THRESHOLD);
    bool ConvertAlphaToMask(unsigned char mr, unsigned char mg, unsigned char mb,
                            unsigned char threshold = wxIMAGE_ALPHA_THRESHOLD);
# 451 "/usr/include/wx-3.1-unofficial/wx/image.h"
    bool ConvertColourToAlpha( unsigned char r, unsigned char g, unsigned char b );






    enum
    {
        Load_Verbose = 1
    };

    static void SetDefaultLoadFlags(int flags);
    static int GetDefaultLoadFlags();

    void SetLoadFlags(int flags);
    int GetLoadFlags() const;

    static bool CanRead( const wxString& name );
    static int GetImageCount( const wxString& name, wxBitmapType type = wxBITMAP_TYPE_ANY );
    virtual bool LoadFile( const wxString& name, wxBitmapType type = wxBITMAP_TYPE_ANY, int index = -1 );
    virtual bool LoadFile( const wxString& name, const wxString& mimetype, int index = -1 );


    static bool CanRead( wxInputStream& stream );
    static int GetImageCount( wxInputStream& stream, wxBitmapType type = wxBITMAP_TYPE_ANY );
    virtual bool LoadFile( wxInputStream& stream, wxBitmapType type = wxBITMAP_TYPE_ANY, int index = -1 );
    virtual bool LoadFile( wxInputStream& stream, const wxString& mimetype, int index = -1 );


    virtual bool SaveFile( const wxString& name ) const;
    virtual bool SaveFile( const wxString& name, wxBitmapType type ) const;
    virtual bool SaveFile( const wxString& name, const wxString& mimetype ) const;


    virtual bool SaveFile( wxOutputStream& stream, wxBitmapType type ) const;
    virtual bool SaveFile( wxOutputStream& stream, const wxString& mimetype ) const;


    bool Ok() const { return IsOk(); }
    bool IsOk() const;
    int GetWidth() const;
    int GetHeight() const;

    wxSize GetSize() const
        { return wxSize(GetWidth(), GetHeight()); }


    wxBitmapType GetType() const;




    void SetType(wxBitmapType type);



    unsigned char *GetData() const;
    void SetData( unsigned char *data, bool static_data=false );
    void SetData( unsigned char *data, int new_width, int new_height, bool static_data=false );

    unsigned char *GetAlpha() const;
    bool HasAlpha() const { return GetAlpha() != 
# 513 "/usr/include/wx-3.1-unofficial/wx/image.h" 3 4
                                                __null
# 513 "/usr/include/wx-3.1-unofficial/wx/image.h"
                                                    ; }
    void SetAlpha(unsigned char *alpha = 
# 514 "/usr/include/wx-3.1-unofficial/wx/image.h" 3 4
                                        __null
# 514 "/usr/include/wx-3.1-unofficial/wx/image.h"
                                            , bool static_data=false);
    void InitAlpha();
    void ClearAlpha();



    bool IsTransparent(int x, int y,
                       unsigned char threshold = wxIMAGE_ALPHA_THRESHOLD) const;


    void SetMaskColour( unsigned char r, unsigned char g, unsigned char b );


    bool GetOrFindMaskColour( unsigned char *r, unsigned char *g, unsigned char *b ) const;
    unsigned char GetMaskRed() const;
    unsigned char GetMaskGreen() const;
    unsigned char GetMaskBlue() const;
    void SetMask( bool mask = true );
    bool HasMask() const;



    bool HasPalette() const;
    const wxPalette& GetPalette() const;
    void SetPalette(const wxPalette& palette);



    void SetOption(const wxString& name, const wxString& value);
    void SetOption(const wxString& name, int value);
    wxString GetOption(const wxString& name) const;
    int GetOptionInt(const wxString& name) const;
    bool HasOption(const wxString& name) const;

    unsigned long CountColours( unsigned long stopafter = (unsigned long) -1 ) const;







    unsigned long ComputeHistogram( wxImageHistogram &h ) const;



    void RotateHue(double angle);

    static wxList& GetHandlers() { return sm_handlers; }
    static void AddHandler( wxImageHandler *handler );
    static void InsertHandler( wxImageHandler *handler );
    static bool RemoveHandler( const wxString& name );
    static wxImageHandler *FindHandler( const wxString& name );
    static wxImageHandler *FindHandler( const wxString& extension, wxBitmapType imageType );
    static wxImageHandler *FindHandler( wxBitmapType imageType );

    static wxImageHandler *FindHandlerMime( const wxString& mimetype );

    static wxString GetImageExtWildcard();

    static void CleanUpHandlers();
    static void InitStandardHandlers();

    static HSVValue RGBtoHSV(const RGBValue& rgb);
    static RGBValue HSVtoRGB(const HSVValue& hsv);
# 640 "/usr/include/wx-3.1-unofficial/wx/image.h"
protected:
    static wxList sm_handlers;





    long XYToIndex(int x, int y) const;

    virtual wxObjectRefData* CreateRefData() const override;
    virtual wxObjectRefData* CloneRefData(const wxObjectRefData* data) const override;

private:
    friend class wxImageHandler;


    enum
    {


        Clone_SameOrientation = 0,



        Clone_SwapOrientation = 1
    };





    wxImage MakeEmptyClone(int flags = Clone_SameOrientation) const;




    bool DoLoad(wxImageHandler& handler, wxInputStream& stream, int index);



    bool DoSave(wxImageHandler& handler, wxOutputStream& stream) const;


    public:
# 683 "/usr/include/wx-3.1-unofficial/wx/image.h"
#pragma GCC diagnostic push
# 683 "/usr/include/wx-3.1-unofficial/wx/image.h"
   
# 683 "/usr/include/wx-3.1-unofficial/wx/image.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 683 "/usr/include/wx-3.1-unofficial/wx/image.h"
    virtual wxClassInfo *GetClassInfo() const;
# 683 "/usr/include/wx-3.1-unofficial/wx/image.h"
#pragma GCC diagnostic pop
# 683 "/usr/include/wx-3.1-unofficial/wx/image.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};


extern void __attribute__ ((visibility("default"))) wxInitAllImageHandlers();

extern __attribute__ ((visibility("default"))) wxImage wxNullImage;





# 1 "/usr/include/wx-3.1-unofficial/wx/imagbmp.h" 1
# 12 "/usr/include/wx-3.1-unofficial/wx/imagbmp.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/image.h" 1
# 13 "/usr/include/wx-3.1-unofficial/wx/imagbmp.h" 2
# 24 "/usr/include/wx-3.1-unofficial/wx/imagbmp.h"
enum
{
    wxBMP_24BPP = 24,

    wxBMP_8BPP = 8,
    wxBMP_8BPP_GREY = 9,
    wxBMP_8BPP_GRAY = wxBMP_8BPP_GREY,
    wxBMP_8BPP_RED = 10,
    wxBMP_8BPP_PALETTE = 11,
    wxBMP_4BPP = 4,
    wxBMP_1BPP = 1,
    wxBMP_1BPP_BW = 2
};





class __attribute__ ((visibility("default"))) wxBMPHandler : public wxImageHandler
{
public:
    wxBMPHandler()
    {
        m_name = L"Windows bitmap file";
        m_extension = L"bmp";
        m_type = wxBITMAP_TYPE_BMP;
        m_mime = L"image/x-bmp";
    }


    virtual bool SaveFile( wxImage *image, wxOutputStream& stream, bool verbose=true ) override;
    virtual bool LoadFile( wxImage *image, wxInputStream& stream, bool verbose=true, int index=-1 ) override;

protected:
    virtual bool DoCanRead( wxInputStream& stream ) override;
    bool SaveDib(wxImage *image, wxOutputStream& stream, bool verbose,
                 bool IsBmp, bool IsMask);
    bool DoLoadDib(wxImage *image, int width, int height, int bpp, int ncolors,
                   int comp, wxFileOffset bmpOffset, wxInputStream& stream,
                   bool verbose, bool IsBmp, bool hasPalette, int colEntrySize = 4);
    bool LoadDib(wxImage *image, wxInputStream& stream, bool verbose, bool IsBmp);


private:
    public:
# 68 "/usr/include/wx-3.1-unofficial/wx/imagbmp.h"
#pragma GCC diagnostic push
# 68 "/usr/include/wx-3.1-unofficial/wx/imagbmp.h"
   
# 68 "/usr/include/wx-3.1-unofficial/wx/imagbmp.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 68 "/usr/include/wx-3.1-unofficial/wx/imagbmp.h"
    virtual wxClassInfo *GetClassInfo() const;
# 68 "/usr/include/wx-3.1-unofficial/wx/imagbmp.h"
#pragma GCC diagnostic pop
# 68 "/usr/include/wx-3.1-unofficial/wx/imagbmp.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};






class __attribute__ ((visibility("default"))) wxICOHandler : public wxBMPHandler
{
public:
    wxICOHandler()
    {
        m_name = L"Windows icon file";
        m_extension = L"ico";
        m_type = wxBITMAP_TYPE_ICO;
        m_mime = L"image/x-ico";
    }


    virtual bool SaveFile( wxImage *image, wxOutputStream& stream, bool verbose=true ) override;
    virtual bool LoadFile( wxImage *image, wxInputStream& stream, bool verbose=true, int index=-1 ) override;
    virtual bool DoLoadFile( wxImage *image, wxInputStream& stream, bool verbose, int index );

protected:
    virtual int DoGetImageCount( wxInputStream& stream ) override;
    virtual bool DoCanRead( wxInputStream& stream ) override;


private:
    public:
# 98 "/usr/include/wx-3.1-unofficial/wx/imagbmp.h"
#pragma GCC diagnostic push
# 98 "/usr/include/wx-3.1-unofficial/wx/imagbmp.h"
   
# 98 "/usr/include/wx-3.1-unofficial/wx/imagbmp.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 98 "/usr/include/wx-3.1-unofficial/wx/imagbmp.h"
    virtual wxClassInfo *GetClassInfo() const;
# 98 "/usr/include/wx-3.1-unofficial/wx/imagbmp.h"
#pragma GCC diagnostic pop
# 98 "/usr/include/wx-3.1-unofficial/wx/imagbmp.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};






class __attribute__ ((visibility("default"))) wxCURHandler : public wxICOHandler
{
public:
    wxCURHandler()
    {
        m_name = L"Windows cursor file";
        m_extension = L"cur";
        m_type = wxBITMAP_TYPE_CUR;
        m_mime = L"image/x-cur";
    }





protected:

    virtual bool DoCanRead( wxInputStream& stream ) override;


private:
    public:
# 127 "/usr/include/wx-3.1-unofficial/wx/imagbmp.h"
#pragma GCC diagnostic push
# 127 "/usr/include/wx-3.1-unofficial/wx/imagbmp.h"
   
# 127 "/usr/include/wx-3.1-unofficial/wx/imagbmp.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 127 "/usr/include/wx-3.1-unofficial/wx/imagbmp.h"
    virtual wxClassInfo *GetClassInfo() const;
# 127 "/usr/include/wx-3.1-unofficial/wx/imagbmp.h"
#pragma GCC diagnostic pop
# 127 "/usr/include/wx-3.1-unofficial/wx/imagbmp.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};




class __attribute__ ((visibility("default"))) wxANIHandler : public wxCURHandler
{
public:
    wxANIHandler()
    {
        m_name = L"Windows animated cursor file";
        m_extension = L"ani";
        m_type = wxBITMAP_TYPE_ANI;
        m_mime = L"image/x-ani";
    }



    virtual bool SaveFile( wxImage *, wxOutputStream& , bool ) override{return false ;}
    virtual bool LoadFile( wxImage *image, wxInputStream& stream, bool verbose=true, int index=-1 ) override;

protected:
    virtual int DoGetImageCount( wxInputStream& stream ) override;
    virtual bool DoCanRead( wxInputStream& stream ) override;


private:
    public:
# 155 "/usr/include/wx-3.1-unofficial/wx/imagbmp.h"
#pragma GCC diagnostic push
# 155 "/usr/include/wx-3.1-unofficial/wx/imagbmp.h"
   
# 155 "/usr/include/wx-3.1-unofficial/wx/imagbmp.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 155 "/usr/include/wx-3.1-unofficial/wx/imagbmp.h"
    virtual wxClassInfo *GetClassInfo() const;
# 155 "/usr/include/wx-3.1-unofficial/wx/imagbmp.h"
#pragma GCC diagnostic pop
# 155 "/usr/include/wx-3.1-unofficial/wx/imagbmp.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 696 "/usr/include/wx-3.1-unofficial/wx/image.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/imagpng.h" 1
# 12 "/usr/include/wx-3.1-unofficial/wx/imagpng.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 13 "/usr/include/wx-3.1-unofficial/wx/imagpng.h" 2
# 31 "/usr/include/wx-3.1-unofficial/wx/imagpng.h"
enum
{
    wxPNG_TYPE_COLOUR = 0,
    wxPNG_TYPE_GREY = 2,
    wxPNG_TYPE_GREY_RED = 3,
    wxPNG_TYPE_PALETTE = 4
};

class __attribute__ ((visibility("default"))) wxPNGHandler: public wxImageHandler
{
public:
    inline wxPNGHandler()
    {
        m_name = L"PNG file";
        m_extension = L"png";
        m_type = wxBITMAP_TYPE_PNG;
        m_mime = L"image/png";
    }

    static wxVersionInfo GetLibraryVersionInfo();


    virtual bool LoadFile( wxImage *image, wxInputStream& stream, bool verbose=true, int index=-1 ) override;
    virtual bool SaveFile( wxImage *image, wxOutputStream& stream, bool verbose=true ) override;
protected:
    virtual bool DoCanRead( wxInputStream& stream ) override;


private:
    public:
# 60 "/usr/include/wx-3.1-unofficial/wx/imagpng.h"
#pragma GCC diagnostic push
# 60 "/usr/include/wx-3.1-unofficial/wx/imagpng.h"
   
# 60 "/usr/include/wx-3.1-unofficial/wx/imagpng.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 60 "/usr/include/wx-3.1-unofficial/wx/imagpng.h"
    virtual wxClassInfo *GetClassInfo() const;
# 60 "/usr/include/wx-3.1-unofficial/wx/imagpng.h"
#pragma GCC diagnostic pop
# 60 "/usr/include/wx-3.1-unofficial/wx/imagpng.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 697 "/usr/include/wx-3.1-unofficial/wx/image.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/imaggif.h" 1
# 27 "/usr/include/wx-3.1-unofficial/wx/imaggif.h"
struct wxRGB;
struct GifHashTableType;
class wxImageArray;

class __attribute__ ((visibility("default"))) wxGIFHandler : public wxImageHandler
{
public:
    inline wxGIFHandler()
    {
        m_name = L"GIF file";
        m_extension = L"gif";
        m_type = wxBITMAP_TYPE_GIF;
        m_mime = L"image/gif";
        m_hashTable = 
# 40 "/usr/include/wx-3.1-unofficial/wx/imaggif.h" 3 4
                     __null
# 40 "/usr/include/wx-3.1-unofficial/wx/imaggif.h"
                         ;
    }


    virtual bool LoadFile(wxImage *image, wxInputStream& stream,
                          bool verbose = true, int index = -1) override;
    virtual bool SaveFile(wxImage *image, wxOutputStream& stream,
                          bool verbose=true) override;


    bool SaveAnimation(const wxImageArray& images, wxOutputStream *stream,
        bool verbose = true, int delayMilliSecs = 1000);

protected:
    virtual int DoGetImageCount(wxInputStream& stream) override;
    virtual bool DoCanRead(wxInputStream& stream) override;

    bool DoSaveFile(const wxImage&, wxOutputStream *, bool verbose,
        bool first, int delayMilliSecs, bool loop,
        const wxRGB *pal, int palCount,
        int mask_index);

protected:



    unsigned long m_crntShiftDWord;
    int m_pixelCount;
    struct GifHashTableType *m_hashTable;
    wxInt16
      m_EOFCode,
      m_clearCode,
      m_runningCode,
      m_runningBits,
      m_maxCode1,
      m_crntCode,
      m_crntShiftState;
    wxUint8 m_LZBuf[256];

    bool InitHashTable();
    void ClearHashTable();
    void InsertHashTable(unsigned long key, int code);
    int ExistsHashTable(unsigned long key);


    bool CompressOutput(wxOutputStream *, int code);
    bool SetupCompress(wxOutputStream *, int bpp);
    bool CompressLine(wxOutputStream *, const wxUint8 *line, int lineLen);


private:
    public:
# 91 "/usr/include/wx-3.1-unofficial/wx/imaggif.h"
#pragma GCC diagnostic push
# 91 "/usr/include/wx-3.1-unofficial/wx/imaggif.h"
   
# 91 "/usr/include/wx-3.1-unofficial/wx/imaggif.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 91 "/usr/include/wx-3.1-unofficial/wx/imaggif.h"
    virtual wxClassInfo *GetClassInfo() const;
# 91 "/usr/include/wx-3.1-unofficial/wx/imaggif.h"
#pragma GCC diagnostic pop
# 91 "/usr/include/wx-3.1-unofficial/wx/imaggif.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 698 "/usr/include/wx-3.1-unofficial/wx/image.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/imagpcx.h" 1
# 20 "/usr/include/wx-3.1-unofficial/wx/imagpcx.h"
class __attribute__ ((visibility("default"))) wxPCXHandler : public wxImageHandler
{
public:
    inline wxPCXHandler()
    {
        m_name = L"PCX file";
        m_extension = L"pcx";
        m_type = wxBITMAP_TYPE_PCX;
        m_mime = L"image/pcx";
    }


    virtual bool LoadFile( wxImage *image, wxInputStream& stream, bool verbose=true, int index=-1 ) override;
    virtual bool SaveFile( wxImage *image, wxOutputStream& stream, bool verbose=true ) override;
protected:
    virtual bool DoCanRead( wxInputStream& stream ) override;


private:
    public:
# 39 "/usr/include/wx-3.1-unofficial/wx/imagpcx.h"
#pragma GCC diagnostic push
# 39 "/usr/include/wx-3.1-unofficial/wx/imagpcx.h"
   
# 39 "/usr/include/wx-3.1-unofficial/wx/imagpcx.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 39 "/usr/include/wx-3.1-unofficial/wx/imagpcx.h"
    virtual wxClassInfo *GetClassInfo() const;
# 39 "/usr/include/wx-3.1-unofficial/wx/imagpcx.h"
#pragma GCC diagnostic pop
# 39 "/usr/include/wx-3.1-unofficial/wx/imagpcx.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 699 "/usr/include/wx-3.1-unofficial/wx/image.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/imagjpeg.h" 1
# 12 "/usr/include/wx-3.1-unofficial/wx/imagjpeg.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 13 "/usr/include/wx-3.1-unofficial/wx/imagjpeg.h" 2
# 23 "/usr/include/wx-3.1-unofficial/wx/imagjpeg.h"
class __attribute__ ((visibility("default"))) wxJPEGHandler: public wxImageHandler
{
public:
    inline wxJPEGHandler()
    {
        m_name = L"JPEG file";
        m_extension = L"jpg";
        m_altExtensions.Add(L"jpeg");
        m_altExtensions.Add(L"jpe");
        m_type = wxBITMAP_TYPE_JPEG;
        m_mime = L"image/jpeg";
    }

    static wxVersionInfo GetLibraryVersionInfo();


    virtual bool LoadFile( wxImage *image, wxInputStream& stream, bool verbose=true, int index=-1 ) override;
    virtual bool SaveFile( wxImage *image, wxOutputStream& stream, bool verbose=true ) override;
protected:
    virtual bool DoCanRead( wxInputStream& stream ) override;


private:
    public:
# 46 "/usr/include/wx-3.1-unofficial/wx/imagjpeg.h"
#pragma GCC diagnostic push
# 46 "/usr/include/wx-3.1-unofficial/wx/imagjpeg.h"
   
# 46 "/usr/include/wx-3.1-unofficial/wx/imagjpeg.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 46 "/usr/include/wx-3.1-unofficial/wx/imagjpeg.h"
    virtual wxClassInfo *GetClassInfo() const;
# 46 "/usr/include/wx-3.1-unofficial/wx/imagjpeg.h"
#pragma GCC diagnostic pop
# 46 "/usr/include/wx-3.1-unofficial/wx/imagjpeg.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 700 "/usr/include/wx-3.1-unofficial/wx/image.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/imagtga.h" 1
# 20 "/usr/include/wx-3.1-unofficial/wx/imagtga.h"
class __attribute__ ((visibility("default"))) wxTGAHandler : public wxImageHandler
{
public:
    wxTGAHandler()
    {
        m_name = L"TGA file";
        m_extension = L"tga";
        m_altExtensions.Add(L"tpic");
        m_type = wxBITMAP_TYPE_TGA;
        m_mime = L"image/tga";
    }


    virtual bool LoadFile(wxImage* image, wxInputStream& stream,
                            bool verbose = true, int index = -1) override;
    virtual bool SaveFile(wxImage* image, wxOutputStream& stream,
                             bool verbose = true) override;
protected:
    virtual bool DoCanRead(wxInputStream& stream) override;


    public:
# 41 "/usr/include/wx-3.1-unofficial/wx/imagtga.h"
#pragma GCC diagnostic push
# 41 "/usr/include/wx-3.1-unofficial/wx/imagtga.h"
   
# 41 "/usr/include/wx-3.1-unofficial/wx/imagtga.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 41 "/usr/include/wx-3.1-unofficial/wx/imagtga.h"
    virtual wxClassInfo *GetClassInfo() const;
# 41 "/usr/include/wx-3.1-unofficial/wx/imagtga.h"
#pragma GCC diagnostic pop
# 41 "/usr/include/wx-3.1-unofficial/wx/imagtga.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 701 "/usr/include/wx-3.1-unofficial/wx/image.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/imagtiff.h" 1
# 12 "/usr/include/wx-3.1-unofficial/wx/imagtiff.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 13 "/usr/include/wx-3.1-unofficial/wx/imagtiff.h" 2
# 36 "/usr/include/wx-3.1-unofficial/wx/imagtiff.h"
class __attribute__ ((visibility("default"))) wxTIFFHandler: public wxImageHandler
{
public:
    wxTIFFHandler();

    static wxVersionInfo GetLibraryVersionInfo();


    virtual bool LoadFile( wxImage *image, wxInputStream& stream, bool verbose=true, int index=-1 ) override;
    virtual bool SaveFile( wxImage *image, wxOutputStream& stream, bool verbose=true ) override;

protected:
    virtual int DoGetImageCount( wxInputStream& stream ) override;
    virtual bool DoCanRead( wxInputStream& stream ) override;


private:
    public:
# 53 "/usr/include/wx-3.1-unofficial/wx/imagtiff.h"
#pragma GCC diagnostic push
# 53 "/usr/include/wx-3.1-unofficial/wx/imagtiff.h"
   
# 53 "/usr/include/wx-3.1-unofficial/wx/imagtiff.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 53 "/usr/include/wx-3.1-unofficial/wx/imagtiff.h"
    virtual wxClassInfo *GetClassInfo() const;
# 53 "/usr/include/wx-3.1-unofficial/wx/imagtiff.h"
#pragma GCC diagnostic pop
# 53 "/usr/include/wx-3.1-unofficial/wx/imagtiff.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 702 "/usr/include/wx-3.1-unofficial/wx/image.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/imagpnm.h" 1
# 19 "/usr/include/wx-3.1-unofficial/wx/imagpnm.h"
class __attribute__ ((visibility("default"))) wxPNMHandler : public wxImageHandler
{
public:
    inline wxPNMHandler()
    {
        m_name = L"PNM file";
        m_extension = L"pnm";
        m_altExtensions.Add(L"ppm");
        m_altExtensions.Add(L"pgm");
        m_altExtensions.Add(L"pbm");
        m_type = wxBITMAP_TYPE_PNM;
        m_mime = L"image/pnm";
    }


    virtual bool LoadFile( wxImage *image, wxInputStream& stream, bool verbose=true, int index=-1 ) override;
    virtual bool SaveFile( wxImage *image, wxOutputStream& stream, bool verbose=true ) override;
protected:
    virtual bool DoCanRead( wxInputStream& stream ) override;


private:
    public:
# 41 "/usr/include/wx-3.1-unofficial/wx/imagpnm.h"
#pragma GCC diagnostic push
# 41 "/usr/include/wx-3.1-unofficial/wx/imagpnm.h"
   
# 41 "/usr/include/wx-3.1-unofficial/wx/imagpnm.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 41 "/usr/include/wx-3.1-unofficial/wx/imagpnm.h"
    virtual wxClassInfo *GetClassInfo() const;
# 41 "/usr/include/wx-3.1-unofficial/wx/imagpnm.h"
#pragma GCC diagnostic pop
# 41 "/usr/include/wx-3.1-unofficial/wx/imagpnm.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 703 "/usr/include/wx-3.1-unofficial/wx/image.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/imagxpm.h" 1
# 20 "/usr/include/wx-3.1-unofficial/wx/imagxpm.h"
class __attribute__ ((visibility("default"))) wxXPMHandler : public wxImageHandler
{
public:
    inline wxXPMHandler()
    {
        m_name = L"XPM file";
        m_extension = L"xpm";
        m_type = wxBITMAP_TYPE_XPM;
        m_mime = L"image/xpm";
    }


    virtual bool LoadFile( wxImage *image, wxInputStream& stream, bool verbose=true, int index=-1 ) override;
    virtual bool SaveFile( wxImage *image, wxOutputStream& stream, bool verbose=true ) override;
protected:
    virtual bool DoCanRead( wxInputStream& stream ) override;


private:
    public:
# 39 "/usr/include/wx-3.1-unofficial/wx/imagxpm.h"
#pragma GCC diagnostic push
# 39 "/usr/include/wx-3.1-unofficial/wx/imagxpm.h"
   
# 39 "/usr/include/wx-3.1-unofficial/wx/imagxpm.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 39 "/usr/include/wx-3.1-unofficial/wx/imagxpm.h"
    virtual wxClassInfo *GetClassInfo() const;
# 39 "/usr/include/wx-3.1-unofficial/wx/imagxpm.h"
#pragma GCC diagnostic pop
# 39 "/usr/include/wx-3.1-unofficial/wx/imagxpm.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 704 "/usr/include/wx-3.1-unofficial/wx/image.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/imagiff.h" 1
# 20 "/usr/include/wx-3.1-unofficial/wx/imagiff.h"
class __attribute__ ((visibility("default"))) wxIFFHandler : public wxImageHandler
{
public:
    wxIFFHandler()
    {
        m_name = L"IFF file";
        m_extension = L"iff";
        m_type = wxBITMAP_TYPE_IFF;
        m_mime = L"image/x-iff";
    }


    virtual bool LoadFile(wxImage *image, wxInputStream& stream, bool verbose=true, int index=-1) override;
    virtual bool SaveFile(wxImage *image, wxOutputStream& stream, bool verbose=true) override;
protected:
    virtual bool DoCanRead(wxInputStream& stream) override;


    public:
# 38 "/usr/include/wx-3.1-unofficial/wx/imagiff.h"
#pragma GCC diagnostic push
# 38 "/usr/include/wx-3.1-unofficial/wx/imagiff.h"
   
# 38 "/usr/include/wx-3.1-unofficial/wx/imagiff.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 38 "/usr/include/wx-3.1-unofficial/wx/imagiff.h"
    virtual wxClassInfo *GetClassInfo() const;
# 38 "/usr/include/wx-3.1-unofficial/wx/imagiff.h"
#pragma GCC diagnostic pop
# 38 "/usr/include/wx-3.1-unofficial/wx/imagiff.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 705 "/usr/include/wx-3.1-unofficial/wx/image.h" 2
# 22 "/usr/include/wx-3.1-unofficial/wx/bitmap.h" 2

class wxBitmap;
class wxBitmapHandler;
class wxIcon;
class wxMask;
class wxPalette;
class wxDC;







__attribute__ ((visibility("default"))) wxBitmap& operator << ( wxBitmap &object, const wxVariant &variant ); __attribute__ ((visibility("default"))) wxVariant& operator << ( wxVariant &variant, const wxBitmap &object );
# 45 "/usr/include/wx-3.1-unofficial/wx/bitmap.h"
class __attribute__ ((visibility("default"))) wxMaskBase : public wxObject
{
public:

    bool Create(const wxBitmap& bitmap, const wxColour& colour);



    bool Create(const wxBitmap& bitmap, int paletteIndex);



    bool Create(const wxBitmap& bitmap);

protected:

    virtual void FreeData() = 0;




    virtual bool InitFromColour(const wxBitmap& bitmap,
                                const wxColour& colour) = 0;
    virtual bool InitFromMonoBitmap(const wxBitmap& bitmap) = 0;
};
# 95 "/usr/include/wx-3.1-unofficial/wx/bitmap.h"
class __attribute__ ((visibility("default"))) wxBitmapHelpers
{
public:

    static wxBitmap NewFromPNGData(const void* data, size_t size);
};
# 113 "/usr/include/wx-3.1-unofficial/wx/bitmap.h"
class __attribute__ ((visibility("default"))) wxBitmapHandler : public wxObject
{
public:
    wxBitmapHandler() { m_type = wxBITMAP_TYPE_INVALID; }
    virtual ~wxBitmapHandler() { }





    virtual bool Create(wxBitmap *, const void* ,
                         wxBitmapType , int , int ,
                         int = 1)
        { return false; }

    virtual bool LoadFile(wxBitmap *, const wxString& ,
                           wxBitmapType , int ,
                           int )
        { return false; }

    virtual bool SaveFile(const wxBitmap *, const wxString& ,
                           wxBitmapType , const wxPalette * = 
# 134 "/usr/include/wx-3.1-unofficial/wx/bitmap.h" 3 4
                                                                                            __null
# 134 "/usr/include/wx-3.1-unofficial/wx/bitmap.h"
                                                                                                ) const
        { return false; }

    void SetName(const wxString& name) { m_name = name; }
    void SetExtension(const wxString& ext) { m_extension = ext; }
    void SetType(wxBitmapType type) { m_type = type; }
    const wxString& GetName() const { return m_name; }
    const wxString& GetExtension() const { return m_extension; }
    wxBitmapType GetType() const { return m_type; }

private:
    wxString m_name;
    wxString m_extension;
    wxBitmapType m_type;

    public:
# 149 "/usr/include/wx-3.1-unofficial/wx/bitmap.h"
#pragma GCC diagnostic push
# 149 "/usr/include/wx-3.1-unofficial/wx/bitmap.h"
   
# 149 "/usr/include/wx-3.1-unofficial/wx/bitmap.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 149 "/usr/include/wx-3.1-unofficial/wx/bitmap.h"
    virtual wxClassInfo *GetClassInfo() const;
# 149 "/usr/include/wx-3.1-unofficial/wx/bitmap.h"
#pragma GCC diagnostic pop
# 149 "/usr/include/wx-3.1-unofficial/wx/bitmap.h"
    static wxClassInfo ms_classInfo;
};





class __attribute__ ((visibility("default"))) wxBitmapBase : public wxGDIObject,
                                      public wxBitmapHelpers
{
public:
# 175 "/usr/include/wx-3.1-unofficial/wx/bitmap.h"
    virtual bool Create(int width, int height, int depth = (-1)) = 0;
    virtual bool Create(const wxSize& sz, int depth = (-1)) = 0;
    virtual bool CreateScaled(int w, int h, int d, double logicalScale)
        { return Create(wxRound(w*logicalScale), wxRound(h*logicalScale), d); }

    virtual int GetHeight() const = 0;
    virtual int GetWidth() const = 0;
    virtual int GetDepth() const = 0;

    wxSize GetSize() const
        { return wxSize(GetWidth(), GetHeight()); }


    virtual double GetScaleFactor() const { return 1.0; }
    virtual double GetScaledWidth() const { return GetWidth() / GetScaleFactor(); }
    virtual double GetScaledHeight() const { return GetHeight() / GetScaleFactor(); }
    virtual wxSize GetScaledSize() const
        { return wxSize(wxRound(GetScaledWidth()), wxRound(GetScaledHeight())); }


    virtual wxImage ConvertToImage() const = 0;


    wxBitmap ConvertToDisabled(unsigned char brightness = 255) const;


    virtual wxMask *GetMask() const = 0;
    virtual void SetMask(wxMask *mask) = 0;

    virtual wxBitmap GetSubBitmap(const wxRect& rect) const = 0;

    virtual bool SaveFile(const wxString &name, wxBitmapType type,
                          const wxPalette *palette = 
# 207 "/usr/include/wx-3.1-unofficial/wx/bitmap.h" 3 4
                                                    __null
# 207 "/usr/include/wx-3.1-unofficial/wx/bitmap.h"
                                                        ) const = 0;
    virtual bool LoadFile(const wxString &name, wxBitmapType type) = 0;
# 219 "/usr/include/wx-3.1-unofficial/wx/bitmap.h"
    virtual wxPalette *GetPalette() const = 0;
    virtual void SetPalette(const wxPalette& palette) = 0;



    virtual bool CopyFromIcon(const wxIcon& icon) = 0;




    virtual void SetHeight(int height) = 0;
    virtual void SetWidth(int width) = 0;
    virtual void SetDepth(int depth) = 0;



    static inline wxList& GetHandlers() { return sm_handlers; }
    static void AddHandler(wxBitmapHandler *handler);
    static void InsertHandler(wxBitmapHandler *handler);
    static bool RemoveHandler(const wxString& name);
    static wxBitmapHandler *FindHandler(const wxString& name);
    static wxBitmapHandler *FindHandler(const wxString& extension, wxBitmapType bitmapType);
    static wxBitmapHandler *FindHandler(wxBitmapType bitmapType);




    static void CleanUpHandlers();





    virtual wxColour QuantizeColour(const wxColour& colour) const
    {
        return colour;
    }

protected:
    static wxList sm_handlers;

    public:
# 260 "/usr/include/wx-3.1-unofficial/wx/bitmap.h"
#pragma GCC diagnostic push
# 260 "/usr/include/wx-3.1-unofficial/wx/bitmap.h"
   
# 260 "/usr/include/wx-3.1-unofficial/wx/bitmap.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 260 "/usr/include/wx-3.1-unofficial/wx/bitmap.h"
    virtual wxClassInfo *GetClassInfo() const;
# 260 "/usr/include/wx-3.1-unofficial/wx/bitmap.h"
#pragma GCC diagnostic pop
# 260 "/usr/include/wx-3.1-unofficial/wx/bitmap.h"
    static wxClassInfo ms_classInfo;
};
# 280 "/usr/include/wx-3.1-unofficial/wx/bitmap.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/gtk/bitmap.h" 1
# 13 "/usr/include/wx-3.1-unofficial/wx/gtk/bitmap.h"
typedef struct _cairo cairo_t;
typedef struct _cairo_surface cairo_surface_t;

typedef struct _GdkPixbuf GdkPixbuf;
class wxPixelDataBase;
class wxCursor;





class __attribute__ ((visibility("default"))) wxMask: public wxMaskBase
{
public:
    wxMask();
    wxMask(const wxMask& mask);
    wxMask( const wxBitmap& bitmap, const wxColour& colour );

    wxMask( const wxBitmap& bitmap, int paletteIndex );

    wxMask( const wxBitmap& bitmap );
    virtual ~wxMask();
    wxBitmap GetBitmap() const;



    wxMask(cairo_surface_t*);
    operator cairo_surface_t*() const;





protected:
    virtual void FreeData() override;
    virtual bool InitFromColour(const wxBitmap& bitmap, const wxColour& colour) override;
    virtual bool InitFromMonoBitmap(const wxBitmap& bitmap) override;

private:

    cairo_surface_t* m_bitmap;




    public:
# 58 "/usr/include/wx-3.1-unofficial/wx/gtk/bitmap.h"
#pragma GCC diagnostic push
# 58 "/usr/include/wx-3.1-unofficial/wx/gtk/bitmap.h"
   
# 58 "/usr/include/wx-3.1-unofficial/wx/gtk/bitmap.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 58 "/usr/include/wx-3.1-unofficial/wx/gtk/bitmap.h"
    virtual wxClassInfo *GetClassInfo() const;
# 58 "/usr/include/wx-3.1-unofficial/wx/gtk/bitmap.h"
#pragma GCC diagnostic pop
# 58 "/usr/include/wx-3.1-unofficial/wx/gtk/bitmap.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};





class __attribute__ ((visibility("default"))) wxBitmap: public wxBitmapBase
{
public:
    wxBitmap() { }
    wxBitmap( int width, int height, int depth = (-1) )
        { Create(width, height, depth); }
    wxBitmap( const wxSize& sz, int depth = (-1) )
        { Create(sz, depth); }
    wxBitmap( const char bits[], int width, int height, int depth = 1 );
    wxBitmap( const char* const* bits );
    wxBitmap( const wxString &filename, wxBitmapType type = wxBITMAP_TYPE_XPM );

    wxBitmap(const wxImage& image, int depth = (-1), double scale = 1.0);

    wxBitmap(GdkPixbuf* pixbuf, int depth = 0);
    explicit wxBitmap(const wxCursor& cursor);
    virtual ~wxBitmap();

    bool Create(int width, int height, int depth = (-1)) override;
    bool Create(const wxSize& sz, int depth = (-1)) override
        { return Create(sz.GetWidth(), sz.GetHeight(), depth); }
    bool Create(int width, int height, const wxDC& )
        { return Create(width,height); }

    virtual bool CreateScaled(int w, int h, int depth, double scale) override;
    virtual double GetScaleFactor() const override;


    virtual int GetHeight() const override;
    virtual int GetWidth() const override;
    virtual int GetDepth() const override;


    wxImage ConvertToImage() const override;



    virtual bool CopyFromIcon(const wxIcon& icon) override;

    wxMask *GetMask() const override;
    void SetMask( wxMask *mask ) override;

    wxBitmap GetSubBitmap( const wxRect& rect ) const override;

    bool SaveFile(const wxString &name, wxBitmapType type,
                          const wxPalette *palette = 
# 110 "/usr/include/wx-3.1-unofficial/wx/gtk/bitmap.h" 3 4
                                                    __null
# 110 "/usr/include/wx-3.1-unofficial/wx/gtk/bitmap.h"
                                                        ) const override;
    bool LoadFile(const wxString &name, wxBitmapType type = wxBITMAP_TYPE_XPM) override;


    wxPalette *GetPalette() const override;
    void SetPalette(const wxPalette& palette) override;
    wxPalette *GetColourMap() const { return GetPalette(); }


    static void InitStandardHandlers();





    __attribute__((deprecated)) void SetHeight( int height ) override;
    __attribute__((deprecated)) void SetWidth( int width ) override;
    __attribute__((deprecated)) void SetDepth( int depth ) override;



    cairo_t* CairoCreate() const;
    void Draw(cairo_t* cr, int x, int y, bool useMask = true, const wxColour* fg = 
# 132 "/usr/include/wx-3.1-unofficial/wx/gtk/bitmap.h" 3 4
                                                                                  __null
# 132 "/usr/include/wx-3.1-unofficial/wx/gtk/bitmap.h"
                                                                                      , const wxColour* bg = 
# 132 "/usr/include/wx-3.1-unofficial/wx/gtk/bitmap.h" 3 4
                                                                                                             __null
# 132 "/usr/include/wx-3.1-unofficial/wx/gtk/bitmap.h"
                                                                                                                 ) const;
    void SetSourceSurface(cairo_t* cr, int x, int y, const wxColour* fg = 
# 133 "/usr/include/wx-3.1-unofficial/wx/gtk/bitmap.h" 3 4
                                                                         __null
# 133 "/usr/include/wx-3.1-unofficial/wx/gtk/bitmap.h"
                                                                             , const wxColour* bg = 
# 133 "/usr/include/wx-3.1-unofficial/wx/gtk/bitmap.h" 3 4
                                                                                                    __null
# 133 "/usr/include/wx-3.1-unofficial/wx/gtk/bitmap.h"
                                                                                                        ) const;
    wxBitmap CreateDisabled() const;






    GdkPixbuf* GetPixbufNoMask() const;
    GdkPixbuf *GetPixbuf() const;


    void *GetRawData(wxPixelDataBase& data, int bpp);
    void UngetRawData(wxPixelDataBase& data);

    bool HasAlpha() const;

protected:






    virtual wxGDIRefData* CreateGDIRefData() const override;
    virtual wxGDIRefData* CloneGDIRefData(const wxGDIRefData* data) const override;

private:
# 181 "/usr/include/wx-3.1-unofficial/wx/gtk/bitmap.h"
    public:
# 181 "/usr/include/wx-3.1-unofficial/wx/gtk/bitmap.h"
#pragma GCC diagnostic push
# 181 "/usr/include/wx-3.1-unofficial/wx/gtk/bitmap.h"
   
# 181 "/usr/include/wx-3.1-unofficial/wx/gtk/bitmap.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 181 "/usr/include/wx-3.1-unofficial/wx/gtk/bitmap.h"
    virtual wxClassInfo *GetClassInfo() const;
# 181 "/usr/include/wx-3.1-unofficial/wx/gtk/bitmap.h"
#pragma GCC diagnostic pop
# 181 "/usr/include/wx-3.1-unofficial/wx/gtk/bitmap.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 281 "/usr/include/wx-3.1-unofficial/wx/bitmap.h" 2
# 299 "/usr/include/wx-3.1-unofficial/wx/bitmap.h"
inline
wxBitmap

wxBitmapBase::



ConvertToDisabled(unsigned char brightness) const
{
    const wxImage imgDisabled = ConvertToImage().ConvertToDisabled(brightness);
    return wxBitmap(imgDisabled, -1, GetScaleFactor());
}
# 15 "/usr/include/wx-3.1-unofficial/wx/generic/panelg.h" 2

class __attribute__ ((visibility("default"))) wxPanel : public wxPanelBase
{
public:
    wxPanel() { }


    wxPanel(wxWindow *parent,
            wxWindowID winid = wxID_ANY,
            const wxPoint& pos = wxDefaultPosition,
            const wxSize& size = wxDefaultSize,
            long style = 0x00080000 | wxBORDER_NONE,
            const wxString& name = wxString::FromAscii(wxPanelNameStr))
    {
        Create(parent, winid, pos, size, style, name);
    }
# 44 "/usr/include/wx-3.1-unofficial/wx/generic/panelg.h"
private:
    private: wxPanel(const wxPanel&) = delete; wxPanel& operator=(const wxPanel&) = delete; public:
# 45 "/usr/include/wx-3.1-unofficial/wx/generic/panelg.h"
#pragma GCC diagnostic push
# 45 "/usr/include/wx-3.1-unofficial/wx/generic/panelg.h"
   
# 45 "/usr/include/wx-3.1-unofficial/wx/generic/panelg.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 45 "/usr/include/wx-3.1-unofficial/wx/generic/panelg.h"
    virtual wxClassInfo *GetClassInfo() const;
# 45 "/usr/include/wx-3.1-unofficial/wx/generic/panelg.h"
#pragma GCC diagnostic pop
# 45 "/usr/include/wx-3.1-unofficial/wx/generic/panelg.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 70 "/usr/include/wx-3.1-unofficial/wx/panel.h" 2
# 41 "/usr/include/wx-3.1-unofficial/wx/wx.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/toplevel.h" 1
# 20 "/usr/include/wx-3.1-unofficial/wx/toplevel.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/nonownedwnd.h" 1
# 19 "/usr/include/wx-3.1-unofficial/wx/nonownedwnd.h"
class wxGraphicsPath;





class __attribute__ ((visibility("default"))) wxNonOwnedWindowBase : public wxWindow
{
public:



    bool SetShape(const wxRegion& region)
    {




        if ( HasFlag(0x0010) ) {} else { do { if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/nonownedwnd.h", 37, __FUNCTION__, "\"HasFlag(0x0010)\"", L"Shaped windows must be created with the wxFRAME_SHAPED style."), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); return false; } struct wxDummyCheckStruct37



         ;

        return region.IsEmpty() ? DoClearShape() : DoSetRegionShape(region);
    }



    bool SetShape(const wxGraphicsPath& path)
    {
        if ( HasFlag(0x0010) ) {} else { do { if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/nonownedwnd.h", 50, __FUNCTION__, "\"HasFlag(0x0010)\"", L"Shaped windows must be created with the wxFRAME_SHAPED style."), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); return false; } struct wxDummyCheckStruct50



         ;

        return DoSetPathShape(path);
    }






    virtual void AdjustForParentClientOrigin(int& , int& ,
                                             int = 0) const override
    {


    }

    virtual void InheritAttributes() override
    {



    }

protected:
    virtual bool DoClearShape()
    {
        return false;
    }

    virtual bool DoSetRegionShape(const wxRegion& )
    {
        return false;
    }


    virtual bool DoSetPathShape(const wxGraphicsPath& )
    {
        return false;
    }

};




# 1 "/usr/include/wx-3.1-unofficial/wx/gtk/nonownedwnd.h" 1
# 13 "/usr/include/wx-3.1-unofficial/wx/gtk/nonownedwnd.h"
class wxNonOwnedWindowShapeImpl;





class __attribute__ ((visibility("default"))) wxNonOwnedWindow : public wxNonOwnedWindowBase
{
public:
    wxNonOwnedWindow() { m_shapeImpl = 
# 22 "/usr/include/wx-3.1-unofficial/wx/gtk/nonownedwnd.h" 3 4
                                      __null
# 22 "/usr/include/wx-3.1-unofficial/wx/gtk/nonownedwnd.h"
                                          ; }
    virtual ~wxNonOwnedWindow();


    virtual void GTKHandleRealized() override;

protected:
    virtual bool DoClearShape() override;
    virtual bool DoSetRegionShape(const wxRegion& region) override;

    virtual bool DoSetPathShape(const wxGraphicsPath& path) override;



private:

    wxNonOwnedWindowShapeImpl* m_shapeImpl;

    private: wxNonOwnedWindow(const wxNonOwnedWindow&) = delete; wxNonOwnedWindow& operator=(const wxNonOwnedWindow&) = delete;
};
# 101 "/usr/include/wx-3.1-unofficial/wx/nonownedwnd.h" 2
# 21 "/usr/include/wx-3.1-unofficial/wx/toplevel.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/iconbndl.h" 1
# 16 "/usr/include/wx-3.1-unofficial/wx/iconbndl.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/icon.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/icon.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/iconloc.h" 1
# 20 "/usr/include/wx-3.1-unofficial/wx/iconloc.h"
class __attribute__ ((visibility("default"))) wxIconLocationBase
{
public:

    explicit wxIconLocationBase(const wxString& filename = wxEmptyString)
        : m_filename(filename) { }





    bool IsOk() const { return !m_filename.empty(); }


    void SetFileName(const wxString& filename) { m_filename = filename; }
    const wxString& GetFileName() const { return m_filename; }

private:
    wxString m_filename;
};
# 70 "/usr/include/wx-3.1-unofficial/wx/iconloc.h"
class __attribute__ ((visibility("default"))) wxIconLocation : public wxIconLocationBase
{
public:
    explicit wxIconLocation(const wxString& filename = wxEmptyString)
        : wxIconLocationBase(filename) { }
};
# 15 "/usr/include/wx-3.1-unofficial/wx/icon.h" 2
# 37 "/usr/include/wx-3.1-unofficial/wx/icon.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/generic/icon.h" 1
# 20 "/usr/include/wx-3.1-unofficial/wx/generic/icon.h"
class __attribute__ ((visibility("default"))) wxIcon: public wxBitmap
{
public:
    wxIcon();

    wxIcon(const char* const* bits);



    wxIcon( const wxString& filename,
            wxBitmapType type = wxBITMAP_TYPE_XPM,
            int =-1, int =-1 ) :
        wxBitmap(filename, type)
    {
    }

    wxIcon(const wxIconLocation& loc)
        : wxBitmap(loc.GetFileName(), wxBITMAP_TYPE_ANY)
    {
    }

    bool LoadFile(const wxString& name, wxBitmapType flags,
                  int , int )
        { return wxBitmap::LoadFile(name, flags); }


    virtual bool LoadFile(const wxString& name,
                          wxBitmapType flags = wxBITMAP_TYPE_XPM) override
        { return wxBitmap::LoadFile(name, flags); }




    void CopyFromBitmap(const wxBitmap& bmp);

private:
    public:
# 56 "/usr/include/wx-3.1-unofficial/wx/generic/icon.h"
#pragma GCC diagnostic push
# 56 "/usr/include/wx-3.1-unofficial/wx/generic/icon.h"
   
# 56 "/usr/include/wx-3.1-unofficial/wx/generic/icon.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 56 "/usr/include/wx-3.1-unofficial/wx/generic/icon.h"
    virtual wxClassInfo *GetClassInfo() const;
# 56 "/usr/include/wx-3.1-unofficial/wx/generic/icon.h"
#pragma GCC diagnostic pop
# 56 "/usr/include/wx-3.1-unofficial/wx/generic/icon.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 38 "/usr/include/wx-3.1-unofficial/wx/icon.h" 2
# 67 "/usr/include/wx-3.1-unofficial/wx/icon.h"
__attribute__ ((visibility("default"))) wxIcon& operator << ( wxIcon &object, const wxVariant &variant ); __attribute__ ((visibility("default"))) wxVariant& operator << ( wxVariant &variant, const wxIcon &object );
# 17 "/usr/include/wx-3.1-unofficial/wx/iconbndl.h" 2



class wxInputStream;

class __attribute__ ((visibility("default"))) wxObjectArrayTraitsForwxIconArray { public: static wxIcon* Clone(wxIcon const& item); static void Free(wxIcon* p); }; typedef wxBaseObjectArray<wxIcon, wxObjectArrayTraitsForwxIconArray> wxBaseObjectArrayForwxIconArray; class __attribute__ ((visibility("default"))) wxIconArray : public wxBaseObjectArrayForwxIconArray { };


class __attribute__ ((visibility("default"))) wxIconBundle : public wxGDIObject
{
public:


    enum
    {

        FALLBACK_NONE = 0,




        FALLBACK_SYSTEM = 1,



        FALLBACK_NEAREST_LARGER = 2
    };


    wxIconBundle();




    wxIconBundle(const wxString& file, wxBitmapType type = wxBITMAP_TYPE_ANY);

    wxIconBundle(wxInputStream& stream, wxBitmapType type = wxBITMAP_TYPE_ANY);



    wxIconBundle(const wxIcon& icon);
# 71 "/usr/include/wx-3.1-unofficial/wx/iconbndl.h"
    void AddIcon(const wxString& file, wxBitmapType type = wxBITMAP_TYPE_ANY);

    void AddIcon(wxInputStream& stream, wxBitmapType type = wxBITMAP_TYPE_ANY);
# 84 "/usr/include/wx-3.1-unofficial/wx/iconbndl.h"
    void AddIcon(const wxIcon& icon);



    wxIcon GetIcon(const wxSize& size, int flags = FALLBACK_SYSTEM) const;


    wxIcon GetIcon(wxCoord size = wxDefaultCoord,
                   int flags = FALLBACK_SYSTEM) const
        { return GetIcon(wxSize(size, size), flags); }



    wxIcon GetIconOfExactSize(const wxSize& size) const;
    wxIcon GetIconOfExactSize(wxCoord size) const
        { return GetIconOfExactSize(wxSize(size, size)); }





    size_t GetIconCount() const;


    wxIcon GetIconByIndex(size_t n) const;


    bool IsEmpty() const { return GetIconCount() == 0; }
# 129 "/usr/include/wx-3.1-unofficial/wx/iconbndl.h"
protected:
    virtual wxGDIRefData *CreateGDIRefData() const override;
    virtual wxGDIRefData *CloneGDIRefData(const wxGDIRefData *data) const override;

private:

    void DeleteIcons();

    public:
# 137 "/usr/include/wx-3.1-unofficial/wx/iconbndl.h"
#pragma GCC diagnostic push
# 137 "/usr/include/wx-3.1-unofficial/wx/iconbndl.h"
   
# 137 "/usr/include/wx-3.1-unofficial/wx/iconbndl.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 137 "/usr/include/wx-3.1-unofficial/wx/iconbndl.h"
    virtual wxClassInfo *GetClassInfo() const;
# 137 "/usr/include/wx-3.1-unofficial/wx/iconbndl.h"
#pragma GCC diagnostic pop
# 137 "/usr/include/wx-3.1-unofficial/wx/iconbndl.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 22 "/usr/include/wx-3.1-unofficial/wx/toplevel.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/weakref.h" 1
# 17 "/usr/include/wx-3.1-unofficial/wx/weakref.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/meta/int2type.h" 1
# 13 "/usr/include/wx-3.1-unofficial/wx/meta/int2type.h"
template <int N>
struct wxInt2Type { enum { value=N }; };
# 18 "/usr/include/wx-3.1-unofficial/wx/weakref.h" 2

template <class T>
struct wxIsStaticTrackable
{
    enum { value = wxIsPubliclyDerived<T, wxTrackable>::value };
};



template <class T>
class wxWeakRef : public wxTrackerNode
{
public:
    typedef T element_type;


    wxWeakRef() : m_pobj(
# 34 "/usr/include/wx-3.1-unofficial/wx/weakref.h" 3 4
                        __null
# 34 "/usr/include/wx-3.1-unofficial/wx/weakref.h"
                            ), m_ptbase(
# 34 "/usr/include/wx-3.1-unofficial/wx/weakref.h" 3 4
                                        __null
# 34 "/usr/include/wx-3.1-unofficial/wx/weakref.h"
                                            ) { }



    wxWeakRef(T *pobj) : m_pobj(
# 38 "/usr/include/wx-3.1-unofficial/wx/weakref.h" 3 4
                               __null
# 38 "/usr/include/wx-3.1-unofficial/wx/weakref.h"
                                   ), m_ptbase(
# 38 "/usr/include/wx-3.1-unofficial/wx/weakref.h" 3 4
                                               __null
# 38 "/usr/include/wx-3.1-unofficial/wx/weakref.h"
                                                   )
    {
        this->Assign(pobj);
    }



    template <class TDerived>
    wxWeakRef(TDerived* pobj) : m_pobj(
# 46 "/usr/include/wx-3.1-unofficial/wx/weakref.h" 3 4
                                      __null
# 46 "/usr/include/wx-3.1-unofficial/wx/weakref.h"
                                          ), m_ptbase(
# 46 "/usr/include/wx-3.1-unofficial/wx/weakref.h" 3 4
                                                      __null
# 46 "/usr/include/wx-3.1-unofficial/wx/weakref.h"
                                                          )
    {
        this->Assign(pobj);
    }



    wxWeakRef(const wxWeakRef<T>& wr) : m_pobj(
# 53 "/usr/include/wx-3.1-unofficial/wx/weakref.h" 3 4
                                              __null
# 53 "/usr/include/wx-3.1-unofficial/wx/weakref.h"
                                                  ), m_ptbase(
# 53 "/usr/include/wx-3.1-unofficial/wx/weakref.h" 3 4
                                                              __null
# 53 "/usr/include/wx-3.1-unofficial/wx/weakref.h"
                                                                  )
    {
        this->Assign(wr.get());
    }

    wxWeakRef<T>& operator=(const wxWeakRef<T>& wr)
    {
        this->AssignCopy(wr);
        return *this;
    }

    virtual ~wxWeakRef() { this->Release(); }


    T& operator*() const { return *this->m_pobj; }
    T* operator->() const { return this->m_pobj; }

    T* get() const { return this->m_pobj; }
    operator T*() const { return this->m_pobj; }

public:
    void Release()
    {

        if ( m_pobj )
        {

            m_ptbase->RemoveNode(this);
            m_pobj = 
# 81 "/usr/include/wx-3.1-unofficial/wx/weakref.h" 3 4
                    __null
# 81 "/usr/include/wx-3.1-unofficial/wx/weakref.h"
                        ;
            m_ptbase = 
# 82 "/usr/include/wx-3.1-unofficial/wx/weakref.h" 3 4
                      __null
# 82 "/usr/include/wx-3.1-unofficial/wx/weakref.h"
                          ;
        }
    }

    virtual void OnObjectDestroy() override
    {

        do { if ( m_pobj != 
# 89 "/usr/include/wx-3.1-unofficial/wx/weakref.h" 3 4
       __null 
# 89 "/usr/include/wx-3.1-unofficial/wx/weakref.h"
       ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/weakref.h", 89, __FUNCTION__, "m_pobj != __null", (const char*)
# 89 "/usr/include/wx-3.1-unofficial/wx/weakref.h" 3 4
       __null
# 89 "/usr/include/wx-3.1-unofficial/wx/weakref.h"
       ), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );
        m_pobj = 
# 90 "/usr/include/wx-3.1-unofficial/wx/weakref.h" 3 4
                __null
# 90 "/usr/include/wx-3.1-unofficial/wx/weakref.h"
                    ;
        m_ptbase = 
# 91 "/usr/include/wx-3.1-unofficial/wx/weakref.h" 3 4
                  __null
# 91 "/usr/include/wx-3.1-unofficial/wx/weakref.h"
                      ;
    }

protected:

    template <class TDerived>
    void Assign( TDerived* pobj )
    {
        struct wxAssert_99 { unsigned int Tracked_class_should_inherit_from_wxTrackable: wxIsStaticTrackable<TDerived>::value; }
                                                                               ;
        wxTrackable *ptbase = static_cast<wxTrackable*>(pobj);
        DoAssign(pobj, ptbase);
    }

    void AssignCopy(const wxWeakRef& wr)
    {
        DoAssign(wr.m_pobj, wr.m_ptbase);
    }

    void DoAssign(T* pobj, wxTrackable *ptbase)
    {
        if ( m_pobj == pobj )
            return;

        Release();


        if ( pobj )
        {

            ptbase->AddNode( this );
            m_pobj = pobj;
            m_ptbase = ptbase;
        }
    }

    T *m_pobj;
    wxTrackable *m_ptbase;
};






template <class T>
class wxWeakRefDynamic : public wxTrackerNode
{
public:
    wxWeakRefDynamic() : m_pobj(
# 140 "/usr/include/wx-3.1-unofficial/wx/weakref.h" 3 4
                               __null
# 140 "/usr/include/wx-3.1-unofficial/wx/weakref.h"
                                   ) { }

    wxWeakRefDynamic(T* pobj) : m_pobj(pobj)
    {
        Assign(pobj);
    }

    wxWeakRefDynamic(const wxWeakRef<T>& wr)
    {
        Assign(wr.get());
    }

    virtual ~wxWeakRefDynamic() { Release(); }


    T& operator*() const { return *m_pobj; }
    T* operator->() const { return m_pobj; }

    T* get() const { return m_pobj; }
    operator T* () const { return m_pobj; }

    T* operator = (T* pobj) { Assign(pobj); return m_pobj; }


    T* operator = (const wxWeakRef<T> &wr) { Assign( wr.get() ); return m_pobj; }

    void Release()
    {

        if( m_pobj )
        {

            wxTrackable *pt = dynamic_cast<wxTrackable*>(m_pobj);
            pt->RemoveNode(this);
            m_pobj = 
# 174 "/usr/include/wx-3.1-unofficial/wx/weakref.h" 3 4
                    __null
# 174 "/usr/include/wx-3.1-unofficial/wx/weakref.h"
                        ;
        }
    }

    virtual void OnObjectDestroy() override
    {
        do { if ( m_pobj ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/weakref.h", 180, __FUNCTION__, "m_pobj", "tracked object should have removed us itself"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );

        m_pobj = 
# 182 "/usr/include/wx-3.1-unofficial/wx/weakref.h" 3 4
                __null
# 182 "/usr/include/wx-3.1-unofficial/wx/weakref.h"
                    ;
    }

protected:
    void Assign(T *pobj)
    {
        if ( m_pobj == pobj )
            return;

        Release();


        if ( pobj )
        {

            wxTrackable *pt = dynamic_cast<wxTrackable*>(pobj);
            if ( pt )
            {
                pt->AddNode(this);
                m_pobj = pobj;
            }
            else
            {


                do { if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/weakref.h", 207, __FUNCTION__, "\"Assert failure\"", "Tracked class should inherit from wxTrackable"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );
            }
        }
    }

    T *m_pobj;
};





class wxEvtHandler;
class wxWindow;


typedef wxWeakRef<wxEvtHandler> wxEvtHandlerRef;
typedef wxWeakRef<wxWindow> wxWindowRef;
# 23 "/usr/include/wx-3.1-unofficial/wx/toplevel.h" 2


extern __attribute__ ((visibility("default"))) const char wxFrameNameStr[];
# 102 "/usr/include/wx-3.1-unofficial/wx/toplevel.h"
enum
{
    wxFULLSCREEN_NOMENUBAR = 0x0001,
    wxFULLSCREEN_NOTOOLBAR = 0x0002,
    wxFULLSCREEN_NOSTATUSBAR = 0x0004,
    wxFULLSCREEN_NOBORDER = 0x0008,
    wxFULLSCREEN_NOCAPTION = 0x0010,

    wxFULLSCREEN_ALL = wxFULLSCREEN_NOMENUBAR | wxFULLSCREEN_NOTOOLBAR |
                               wxFULLSCREEN_NOSTATUSBAR | wxFULLSCREEN_NOBORDER |
                               wxFULLSCREEN_NOCAPTION
};


enum
{
    wxUSER_ATTENTION_INFO = 1,
    wxUSER_ATTENTION_ERROR = 2
};





class __attribute__ ((visibility("default"))) wxTopLevelWindowBase : public wxNonOwnedWindow
{
public:

    wxTopLevelWindowBase();
    virtual ~wxTopLevelWindowBase();





    virtual void Maximize(bool maximize = true) = 0;


    virtual void Restore() = 0;


    virtual void Iconize(bool iconize = true) = 0;


    virtual bool IsMaximized() const = 0;



    virtual bool IsAlwaysMaximized() const;


    virtual bool IsIconized() const = 0;


    wxIcon GetIcon() const;


    const wxIconBundle& GetIcons() const { return m_icons; }


    void SetIcon(const wxIcon& icon);


    virtual void SetIcons(const wxIconBundle& icons) { m_icons = icons; }

    virtual bool EnableFullScreenView(bool = true)
    {
        return false;
    }


    virtual bool ShowFullScreen(bool show, long style = wxFULLSCREEN_ALL) = 0;



    virtual void ShowWithoutActivating() {
        do { if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/toplevel.h", 178, __FUNCTION__, "\"Assert failure\"", "ShowWithoutActivating not implemented on this platform."), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );
    }


    virtual bool IsFullScreen() const = 0;



    virtual void SetTitle(const wxString& title) = 0;
    virtual wxString GetTitle() const = 0;


    virtual bool EnableCloseButton(bool = true) { return false; }
    virtual bool EnableMaximizeButton(bool = true) { return false; }
    virtual bool EnableMinimizeButton(bool = true) { return false; }



    virtual void RequestUserAttention(int flags = wxUSER_ATTENTION_INFO);




    virtual bool IsActive() { return IsDescendant(FindFocus()); }






    virtual bool ShouldPreventAppExit() const { return true; }


    void CentreOnScreen(int dir = wxBOTH) { DoCentre(dir | 0x0002); }
    void CenterOnScreen(int dir = wxBOTH) { CentreOnScreen(dir); }



    static wxSize GetDefaultSize();
# 226 "/usr/include/wx-3.1-unofficial/wx/toplevel.h"
    wxWindow *GetDefaultItem() const
        { return m_winTmpDefault ? m_winTmpDefault : m_winDefault; }


    wxWindow *SetDefaultItem(wxWindow *win)
        { wxWindow *old = GetDefaultItem(); m_winDefault = win; return old; }


    wxWindow *GetTmpDefaultItem() const { return m_winTmpDefault; }



    wxWindow *SetTmpDefaultItem(wxWindow *win)
        { wxWindow *old = GetDefaultItem(); m_winTmpDefault = win; return old; }
# 249 "/usr/include/wx-3.1-unofficial/wx/toplevel.h"
    class GeometrySerializer
    {
    public:
        virtual ~GeometrySerializer() {}



        virtual bool SaveField(const wxString& name, int value) const = 0;




        virtual bool RestoreField(const wxString& name, int* value) = 0;
    };



    bool SaveGeometry(const GeometrySerializer& ser) const;
    bool RestoreToGeometry(GeometrySerializer& ser);






    virtual bool Destroy() override;
    virtual bool IsTopLevel() const override { return true; }
    virtual bool IsTopNavigationDomain(NavigationKind kind) const override;
    virtual bool IsVisible() const { return IsShown(); }



    virtual bool Layout() override;


    void OnCloseWindow(wxCloseEvent& event);
    void OnSize(wxSizeEvent& ) { Layout(); }


    virtual void GetRectForTopLevelChildren(int *x, int *y, int *w, int *h);



    void OnActivate(wxActivateEvent &) { }


    virtual void DoUpdateWindowUI(wxUpdateUIEvent& event) override ;


    virtual void SetMinSize(const wxSize& minSize) override;
    virtual void SetMaxSize(const wxSize& maxSize) override;

    virtual void OSXSetModified(bool modified) { m_modified = modified; }
    virtual bool OSXIsModified() const { return m_modified; }

    virtual void SetRepresentedFilename(const wxString& ) { }

protected:


    virtual void DoClientToScreen(int *x, int *y) const override;
    virtual void DoScreenToClient(int *x, int *y) const override;


    virtual void DoCentre(int dir) override;



    virtual void DoGetScreenPosition(int *x, int *y) const override
    {
        DoGetPosition(x, y);
    }



    virtual bool IsOneOfBars(const wxWindow *) const
        { return false; }


    bool IsLastBeforeExit() const;


    bool SendIconizeEvent(bool iconized = true);


    void DoLayout() { Layout(); }

    static int WidthDefault(int w) { return w == wxDefaultCoord ? GetDefaultSize().x : w; }
    static int HeightDefault(int h) { return h == wxDefaultCoord ? GetDefaultSize().y : h; }



    wxIconBundle m_icons;


    wxWindowRef m_winDefault;


    wxWindowRef m_winTmpDefault;

    bool m_modified;

    private: wxTopLevelWindowBase(const wxTopLevelWindowBase&) = delete; wxTopLevelWindowBase& operator=(const wxTopLevelWindowBase&) = delete;
    private: static const wxEventTableEntry sm_eventTableEntries[]; protected:
# 352 "/usr/include/wx-3.1-unofficial/wx/toplevel.h"
#pragma GCC diagnostic push
# 352 "/usr/include/wx-3.1-unofficial/wx/toplevel.h"
   
# 352 "/usr/include/wx-3.1-unofficial/wx/toplevel.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 352 "/usr/include/wx-3.1-unofficial/wx/toplevel.h"
    const wxEventTable* GetEventTable() const; wxEventHashTable& GetEventHashTable() const;
# 352 "/usr/include/wx-3.1-unofficial/wx/toplevel.h"
#pragma GCC diagnostic pop
# 352 "/usr/include/wx-3.1-unofficial/wx/toplevel.h"
    static const wxEventTable sm_eventTable; static wxEventHashTable sm_eventHashTable;
};







# 1 "/usr/include/wx-3.1-unofficial/wx/gtk/toplevel.h" 1
# 12 "/usr/include/wx-3.1-unofficial/wx/gtk/toplevel.h"
class wxGUIEventLoop;





class __attribute__ ((visibility("default"))) wxTopLevelWindowGTK : public wxTopLevelWindowBase
{
    typedef wxTopLevelWindowBase base_type;
public:

    wxTopLevelWindowGTK() { Init(); }
    wxTopLevelWindowGTK(wxWindow *parent,
                        wxWindowID id,
                        const wxString& title,
                        const wxPoint& pos = wxDefaultPosition,
                        const wxSize& size = wxDefaultSize,
                        long style = (0x0800 | 0x0040 | 0x0400 | 0x0200 | 0x1000 | 0x20000000 | 0x00400000),
                        const wxString& name = wxString::FromAscii(wxFrameNameStr))
    {
        Init();

        Create(parent, id, title, pos, size, style, name);
    }

    bool Create(wxWindow *parent,
                wxWindowID id,
                const wxString& title,
                const wxPoint& pos = wxDefaultPosition,
                const wxSize& size = wxDefaultSize,
                long style = (0x0800 | 0x0040 | 0x0400 | 0x0200 | 0x1000 | 0x20000000 | 0x00400000),
                const wxString& name = wxString::FromAscii(wxFrameNameStr));

    virtual ~wxTopLevelWindowGTK();


    virtual void Maximize(bool maximize = true) override;
    virtual bool IsMaximized() const override;
    virtual void Iconize(bool iconize = true) override;
    virtual bool IsIconized() const override;
    virtual void SetIcons(const wxIconBundle& icons) override;
    virtual void Restore() override;

    virtual bool EnableCloseButton(bool enable = true) override;

    virtual void ShowWithoutActivating() override;
    virtual bool ShowFullScreen(bool show, long style = wxFULLSCREEN_ALL) override;
    virtual bool IsFullScreen() const override { return m_fsIsShowing; }

    virtual void RequestUserAttention(int flags = wxUSER_ATTENTION_INFO) override;

    virtual void SetWindowStyleFlag( long style ) override;

    virtual bool Show(bool show = true) override;

    virtual void Raise() override;

    virtual bool IsActive() override;

    virtual void SetTitle( const wxString &title ) override;
    virtual wxString GetTitle() const override { return m_title; }

    virtual void SetLabel(const wxString& label) override { SetTitle( label ); }
    virtual wxString GetLabel() const override { return GetTitle(); }

    virtual wxVisualAttributes GetDefaultAttributes() const override;

    virtual bool SetTransparent(wxByte alpha) override;
    virtual bool CanSetTransparent() override;



    virtual void AddGrab();
    virtual void RemoveGrab();
    virtual bool IsGrabbed() const;


    virtual void Refresh( bool eraseBackground = true,
                          const wxRect *rect = (const wxRect *) 
# 90 "/usr/include/wx-3.1-unofficial/wx/gtk/toplevel.h" 3 4
                                                               __null 
# 90 "/usr/include/wx-3.1-unofficial/wx/gtk/toplevel.h"
                                                                    ) override;





    virtual void GTKHandleRealized() override;

    void GTKConfigureEvent(int x, int y);


    void SetIconizeState(bool iconic);

    GtkWidget *m_mainWidget;

    bool m_fsIsShowing;
    int m_fsSaveGdkFunc, m_fsSaveGdkDecor;
    wxRect m_fsSaveFrame;


    int m_gdkFunc,
                  m_gdkDecor;


    struct DecorSize
    {
        DecorSize()
        {
            left =
            right =
            top =
            bottom = 0;
        }

        int left, right, top, bottom;
    };
    DecorSize m_decorSize;



    int m_urgency_hint;

    unsigned m_netFrameExtentsTimerId;


    void GTKDoGetSize(int *width, int *height) const;

    void GTKUpdateDecorSize(const DecorSize& decorSize);

    void GTKDoAfterShow();


    void GTKUpdateClientSizeIfNecessary();

    virtual void SetMinSize(const wxSize& minSize) override;

    virtual void WXSetInitialFittingClientSize(int flags) override;

private:

    int m_pendingFittingClientSizeFlags;


protected:


    virtual void DoSetSizeHints( int minW, int minH,
                                 int maxW, int maxH,
                                 int incW, int incH) override;

    virtual void DoMoveWindow(int x, int y, int width, int height) override;


    virtual void DoSetSize(int x, int y,
                           int width, int height,
                           int sizeFlags = (0x0001|0x0002)) override;

    virtual void DoSetClientSize(int width, int height) override;
    virtual void DoGetClientSize(int *width, int *height) const override;


    wxString m_title;

    bool m_deferShow;

private:
    void Init();
    DecorSize& GetCachedDecorSize();


    int m_incWidth, m_incHeight;


    wxPoint m_lastPos;


    bool m_isIconized;


    wxGUIEventLoop* m_grabbedEventLoop;

    bool m_updateDecorSize;
    bool m_deferShowAllowed;
};
# 362 "/usr/include/wx-3.1-unofficial/wx/toplevel.h" 2
# 386 "/usr/include/wx-3.1-unofficial/wx/toplevel.h"
    class __attribute__ ((visibility("default"))) wxTopLevelWindow : public wxTopLevelWindowGTK
    {
    public:

        wxTopLevelWindow() { }
        wxTopLevelWindow(wxWindow *parent,
                   wxWindowID winid,
                   const wxString& title,
                   const wxPoint& pos = wxDefaultPosition,
                   const wxSize& size = wxDefaultSize,
                   long style = (0x0800 | 0x0040 | 0x0400 | 0x0200 | 0x1000 | 0x20000000 | 0x00400000),
                   const wxString& name = wxString::FromAscii(wxFrameNameStr))
            : wxTopLevelWindowGTK(parent, winid, title,
                                     pos, size, style, name)
        {
        }

        private: wxTopLevelWindow(const wxTopLevelWindow&) = delete; wxTopLevelWindow& operator=(const wxTopLevelWindow&) = delete; public:
# 403 "/usr/include/wx-3.1-unofficial/wx/toplevel.h"
#pragma GCC diagnostic push
# 403 "/usr/include/wx-3.1-unofficial/wx/toplevel.h"
       
# 403 "/usr/include/wx-3.1-unofficial/wx/toplevel.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 403 "/usr/include/wx-3.1-unofficial/wx/toplevel.h"
        virtual wxClassInfo *GetClassInfo() const;
# 403 "/usr/include/wx-3.1-unofficial/wx/toplevel.h"
#pragma GCC diagnostic pop
# 403 "/usr/include/wx-3.1-unofficial/wx/toplevel.h"
        static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
    };
# 42 "/usr/include/wx-3.1-unofficial/wx/wx.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/frame.h" 1
# 19 "/usr/include/wx-3.1-unofficial/wx/frame.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/statusbr.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/statusbr.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/statusbr.h" 2



# 1 "/usr/include/wx-3.1-unofficial/wx/control.h" 1
# 18 "/usr/include/wx-3.1-unofficial/wx/control.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 19 "/usr/include/wx-3.1-unofficial/wx/control.h" 2






extern __attribute__ ((visibility("default"))) const char wxControlNameStr[];






class __attribute__ ((visibility("default"))) wxControlBase : public wxWindow
{
public:
    wxControlBase() { }

    virtual ~wxControlBase();


    bool Create(wxWindow *parent, wxWindowID id,
                const wxPoint& pos = wxDefaultPosition,
                const wxSize& size = wxDefaultSize,
                long style = 0,
                const wxValidator& validator = wxDefaultValidator,
                const wxString& name = wxString::FromAscii(wxControlNameStr));


    int GetAlignment() const { return m_windowStyle & wxALIGN_MASK; }


    virtual void SetLabel(const wxString& label) override
    {
        m_labelOrig = label;

        InvalidateBestSize();

        wxWindow::SetLabel(label);
    }



    virtual wxString GetLabel() const override { return m_labelOrig; }


    virtual void SetLabelText(const wxString& text)
    {
        SetLabel(EscapeMnemonics(text));
    }


    virtual wxString GetLabelText() const { return GetLabelText(GetLabel()); }
# 89 "/usr/include/wx-3.1-unofficial/wx/control.h"
    bool SetLabelMarkup(const wxString& markup)
    {
        return DoSetLabelMarkup(markup);
    }






    virtual bool ShouldInheritColours() const override { return true; }






    virtual void Command(wxCommandEvent &event);

    virtual bool SetFont(const wxFont& font) override;


    virtual void DoUpdateWindowUI(wxUpdateUIEvent& event) override;

    wxSize GetSizeFromTextSize(int xlen, int ylen = -1) const
        { return DoGetSizeFromTextSize(xlen, ylen); }
    wxSize GetSizeFromTextSize(const wxSize& tsize) const
        { return DoGetSizeFromTextSize(tsize.x, tsize.y); }

    wxSize GetSizeFromText(const wxString& text) const
    {
        return GetSizeFromTextSize(GetTextExtent(text).GetWidth());
    }






    static wxString GetLabelText(const wxString& label);




    static wxString RemoveMnemonics(const wxString& str);


    static wxString EscapeMnemonics(const wxString& str);






    static wxString Ellipsize(const wxString& label, const wxDC& dc,
                              wxEllipsizeMode mode, int maxWidth,
                              int flags = wxELLIPSIZE_FLAGS_DEFAULT);



    static int FindAccelIndex(const wxString& label,
                              wxString *labelOnly = 
# 150 "/usr/include/wx-3.1-unofficial/wx/control.h" 3 4
                                                   __null
# 150 "/usr/include/wx-3.1-unofficial/wx/control.h"
                                                       );





    static wxVisualAttributes
        GetCompositeControlsDefaultAttributes(wxWindowVariant variant);

protected:

    virtual wxBorder GetDefaultBorder() const override;



    bool CreateControl(wxWindowBase *parent,
                       wxWindowID id,
                       const wxPoint& pos,
                       const wxSize& size,
                       long style,
                       const wxValidator& validator,
                       const wxString& name);





    virtual bool DoSetLabelMarkup(const wxString& markup);



    virtual wxSize DoGetSizeFromTextSize(int xlen, int ylen = -1) const;


    void InitCommandEvent(wxCommandEvent& event) const;




    static wxString RemoveMarkup(const wxString& markup);





    wxString m_labelOrig;

    private: wxControlBase(const wxControlBase&) = delete; wxControlBase& operator=(const wxControlBase&) = delete;
};
# 211 "/usr/include/wx-3.1-unofficial/wx/control.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/gtk/control.h" 1
# 12 "/usr/include/wx-3.1-unofficial/wx/gtk/control.h"
typedef struct _GtkLabel GtkLabel;
typedef struct _GtkFrame GtkFrame;
typedef struct _GtkEntry GtkEntry;





class __attribute__ ((visibility("default"))) wxControl : public wxControlBase
{
    typedef wxControlBase base_type;
public:
    wxControl();
    wxControl(wxWindow *parent, wxWindowID id,
             const wxPoint& pos = wxDefaultPosition,
             const wxSize& size = wxDefaultSize, long style = 0,
             const wxValidator& validator = wxDefaultValidator,
             const wxString& name = wxString::FromAscii(wxControlNameStr))
    {
        Create(parent, id, pos, size, style, validator, name);
    }

    bool Create(wxWindow *parent, wxWindowID id,
            const wxPoint& pos = wxDefaultPosition,
            const wxSize& size = wxDefaultSize, long style = 0,
            const wxValidator& validator = wxDefaultValidator,
            const wxString& name = wxString::FromAscii(wxControlNameStr));

    virtual wxVisualAttributes GetDefaultAttributes() const override;

    virtual bool SetFont(const wxFont& font) override;


protected:
    virtual wxSize DoGetBestSize() const override;
    void PostCreation(const wxSize& size);


    void GTKSetLabelForLabel(GtkLabel *w, const wxString& label);

    void GTKSetLabelWithMarkupForLabel(GtkLabel *w, const wxString& label);



    GtkWidget* GTKCreateFrame(const wxString& label);
    void GTKSetLabelForFrame(GtkFrame *w, const wxString& label);
    void GTKFrameApplyWidgetStyle(GtkFrame* w, GtkRcStyle* rc);
    void GTKFrameSetMnemonicWidget(GtkFrame* w, GtkWidget* widget);


    static wxString GTKRemoveMnemonics(const wxString& label);


    static wxString GTKConvertMnemonics(const wxString &label);


    static wxString GTKConvertMnemonicsWithMarkup(const wxString& label);


    static wxVisualAttributes
        GetDefaultAttributesFromGTKWidget(GtkWidget* widget,
                                          bool useBase = false,
                                          int state = 0);



    virtual bool UseGTKStyleBase() const { return false; }


    void GTKFixSensitivity(bool onlyIfUnderMouse = true);


    wxSize GTKGetPreferredSize(GtkWidget* widget) const;


    wxSize GTKGetEntryMargins(GtkEntry* entry) const;

private:
    public:
# 90 "/usr/include/wx-3.1-unofficial/wx/gtk/control.h"
#pragma GCC diagnostic push
# 90 "/usr/include/wx-3.1-unofficial/wx/gtk/control.h"
   
# 90 "/usr/include/wx-3.1-unofficial/wx/gtk/control.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 90 "/usr/include/wx-3.1-unofficial/wx/gtk/control.h"
    virtual wxClassInfo *GetClassInfo() const;
# 90 "/usr/include/wx-3.1-unofficial/wx/gtk/control.h"
#pragma GCC diagnostic pop
# 90 "/usr/include/wx-3.1-unofficial/wx/gtk/control.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 212 "/usr/include/wx-3.1-unofficial/wx/control.h" 2
# 19 "/usr/include/wx-3.1-unofficial/wx/statusbr.h" 2



extern __attribute__ ((visibility("default"))) const char wxStatusBarNameStr[];
# 53 "/usr/include/wx-3.1-unofficial/wx/statusbr.h"
class __attribute__ ((visibility("default"))) wxStatusBarPane
{
public:
    wxStatusBarPane(int style = 0x0000, int width = 0)
        : m_nStyle(style), m_nWidth(width)
        { m_bEllipsized = false; }

    int GetWidth() const { return m_nWidth; }
    int GetStyle() const { return m_nStyle; }
    wxString GetText() const { return m_text; }





    bool IsEllipsized() const
        { return m_bEllipsized; }
    void SetIsEllipsized(bool isEllipsized) { m_bEllipsized = isEllipsized; }

    void SetWidth(int width) { m_nWidth = width; }
    void SetStyle(int style) { m_nStyle = style; }



    bool SetText(const wxString& text);



    bool PushText(const wxString& text);




    bool PopText();

private:
    int m_nStyle;
    int m_nWidth;
    wxString m_text;





    wxArrayString m_arrStack;


    bool m_bEllipsized;
};

class __attribute__ ((visibility("default"))) wxObjectArrayTraitsForwxStatusBarPaneArray { public: static wxStatusBarPane* Clone(wxStatusBarPane const& item); static void Free(wxStatusBarPane* p); }; typedef wxBaseObjectArray<wxStatusBarPane, wxObjectArrayTraitsForwxStatusBarPaneArray> wxBaseObjectArrayForwxStatusBarPaneArray; class __attribute__ ((visibility("default"))) wxStatusBarPaneArray : public wxBaseObjectArrayForwxStatusBarPaneArray { };





class __attribute__ ((visibility("default"))) wxStatusBarBase : public wxControl
{
public:
    wxStatusBarBase();

    virtual ~wxStatusBarBase();






    virtual void SetFieldsCount(int number = 1, const int *widths = 
# 121 "/usr/include/wx-3.1-unofficial/wx/statusbr.h" 3 4
                                                                   __null
# 121 "/usr/include/wx-3.1-unofficial/wx/statusbr.h"
                                                                       );
    int GetFieldsCount() const { return (int)m_panes.GetCount(); }





    void SetStatusText(const wxString& text, int number = 0);
    wxString GetStatusText(int number = 0) const;



    void PushStatusText(const wxString& text, int number = 0);
    void PopStatusText(int number = 0);
# 145 "/usr/include/wx-3.1-unofficial/wx/statusbr.h"
    virtual void SetStatusWidths(int n, const int widths[]);

    int GetStatusWidth(int n) const
        { return m_panes[n].GetWidth(); }





    virtual void SetStatusStyles(int n, const int styles[]);

    int GetStatusStyle(int n) const
        { return m_panes[n].GetStyle(); }





    virtual bool GetFieldRect(int i, wxRect& rect) const = 0;


    virtual void SetMinHeight(int height) = 0;


    virtual int GetBorderX() const = 0;
    virtual int GetBorderY() const = 0;

    wxSize GetBorders() const
        { return wxSize(GetBorderX(), GetBorderY()); }




    const wxStatusBarPane& GetField(int n) const
        { return m_panes[n]; }




    virtual bool AcceptsFocus() const override { return false; }


    virtual bool CanBeOutsideClientArea() const override { return true; }

protected:


    virtual void DoUpdateStatusText(int number) = 0;





   virtual void DoSetToolTip( wxToolTip *tip ) override
        {
            do { if ( !HasFlag(0x0020) ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/statusbr.h", 200, __FUNCTION__, "!HasFlag(0x0020)", "Do not set tooltip(s) manually when using wxSTB_SHOW_TIPS!"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 )
                                                                                      ;
            wxWindow::DoSetToolTip(tip);
        }

    virtual wxBorder GetDefaultBorder() const override { return wxBORDER_NONE; }





    wxArrayInt CalculateAbsWidths(wxCoord widthTotal) const;



    void SetEllipsizedFlag(int n, bool isEllipsized);



    wxStatusBarPaneArray m_panes;


    bool m_bSameWidthForAllPanes;

    private: wxStatusBarBase(const wxStatusBarBase&) = delete; wxStatusBarBase& operator=(const wxStatusBarBase&) = delete;
};
# 244 "/usr/include/wx-3.1-unofficial/wx/statusbr.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/generic/statusbr.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/generic/statusbr.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/generic/statusbr.h" 2



# 1 "/usr/include/wx-3.1-unofficial/wx/pen.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/pen.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/peninfobase.h" 1
# 17 "/usr/include/wx-3.1-unofficial/wx/peninfobase.h"
enum wxPenStyle
{
    wxPENSTYLE_INVALID = -1,

    wxPENSTYLE_SOLID = wxSOLID,
    wxPENSTYLE_DOT = wxDOT,
    wxPENSTYLE_LONG_DASH = wxLONG_DASH,
    wxPENSTYLE_SHORT_DASH = wxSHORT_DASH,
    wxPENSTYLE_DOT_DASH = wxDOT_DASH,
    wxPENSTYLE_USER_DASH = wxUSER_DASH,

    wxPENSTYLE_TRANSPARENT = wxTRANSPARENT,

    wxPENSTYLE_STIPPLE_MASK_OPAQUE = wxSTIPPLE_MASK_OPAQUE,
    wxPENSTYLE_STIPPLE_MASK = wxSTIPPLE_MASK,
    wxPENSTYLE_STIPPLE = wxSTIPPLE,

    wxPENSTYLE_BDIAGONAL_HATCH = wxHATCHSTYLE_BDIAGONAL,
    wxPENSTYLE_CROSSDIAG_HATCH = wxHATCHSTYLE_CROSSDIAG,
    wxPENSTYLE_FDIAGONAL_HATCH = wxHATCHSTYLE_FDIAGONAL,
    wxPENSTYLE_CROSS_HATCH = wxHATCHSTYLE_CROSS,
    wxPENSTYLE_HORIZONTAL_HATCH = wxHATCHSTYLE_HORIZONTAL,
    wxPENSTYLE_VERTICAL_HATCH = wxHATCHSTYLE_VERTICAL,
    wxPENSTYLE_FIRST_HATCH = wxHATCHSTYLE_FIRST,
    wxPENSTYLE_LAST_HATCH = wxHATCHSTYLE_LAST
};

enum wxPenJoin
{
    wxJOIN_INVALID = -1,

    wxJOIN_BEVEL = 120,
    wxJOIN_MITER,
    wxJOIN_ROUND
};

enum wxPenCap
{
    wxCAP_INVALID = -1,

    wxCAP_ROUND = 130,
    wxCAP_PROJECTING,
    wxCAP_BUTT
};






template <class T>
class wxPenInfoBase
{
public:



    T& Colour(const wxColour& colour)
        { m_colour = colour; return This(); }

    T& Style(wxPenStyle style)
        { m_style = style; return This(); }
    T& Stipple(const wxBitmap& stipple)
        { m_stipple = stipple; m_style = wxPENSTYLE_STIPPLE; return This(); }
    T& Dashes(int nb_dashes, const wxDash *dash)
        { m_nb_dashes = nb_dashes; m_dash = const_cast<wxDash*>(dash); return This(); }
    T& Join(wxPenJoin join)
        { m_join = join; return This(); }
    T& Cap(wxPenCap cap)
        { m_cap = cap; return This(); }



    wxColour GetColour() const { return m_colour; }
    wxBitmap GetStipple() const { return m_stipple; }
    wxPenStyle GetStyle() const { return m_style; }
    wxPenJoin GetJoin() const { return m_join; }
    wxPenCap GetCap() const { return m_cap; }
    int GetDashes(wxDash **ptr) const { *ptr = m_dash; return m_nb_dashes; }

    int GetDashCount() const { return m_nb_dashes; }
    wxDash* GetDash() const { return m_dash; }



    bool IsTransparent() const { return m_style == wxPENSTYLE_TRANSPARENT; }

protected:
    wxPenInfoBase(const wxColour& colour, wxPenStyle style)
        : m_colour(colour)
    {
        m_nb_dashes = 0;
        m_dash = 
# 109 "/usr/include/wx-3.1-unofficial/wx/peninfobase.h" 3 4
                __null
# 109 "/usr/include/wx-3.1-unofficial/wx/peninfobase.h"
                    ;
        m_join = wxJOIN_ROUND;
        m_cap = wxCAP_ROUND;
        m_style = style;
    }

private:

    T& This() { return static_cast<T&>(*this); }

    wxColour m_colour;
    wxBitmap m_stipple;
    wxPenStyle m_style;
    wxPenJoin m_join;
    wxPenCap m_cap;

    int m_nb_dashes;
    wxDash* m_dash;
};
# 16 "/usr/include/wx-3.1-unofficial/wx/pen.h" 2


enum wxPenQuality
{
    wxPEN_QUALITY_DEFAULT,
    wxPEN_QUALITY_LOW,
    wxPEN_QUALITY_HIGH
};





class wxPenInfo : public wxPenInfoBase<wxPenInfo>
{
public:
    explicit wxPenInfo(const wxColour& colour = wxColour(),
                       int width = 1,
                       wxPenStyle style = wxPENSTYLE_SOLID)
        : wxPenInfoBase<wxPenInfo>(colour, style)
    {
        m_width = width;
        m_quality = wxPEN_QUALITY_DEFAULT;
    }



    wxPenInfo& Width(int width)
        { m_width = width; return *this; }

    wxPenInfo& Quality(wxPenQuality quality)
        { m_quality = quality; return *this; }
    wxPenInfo& LowQuality() { return Quality(wxPEN_QUALITY_LOW); }
    wxPenInfo& HighQuality() { return Quality(wxPEN_QUALITY_HIGH); }



    int GetWidth() const { return m_width; }

    wxPenQuality GetQuality() const { return m_quality; }

private:
    int m_width;
    wxPenQuality m_quality;
};


class __attribute__ ((visibility("default"))) wxPenBase : public wxGDIObject
{
public:
    virtual ~wxPenBase() { }

    virtual void SetColour(const wxColour& col) = 0;
    virtual void SetColour(unsigned char r, unsigned char g, unsigned char b) = 0;

    virtual void SetWidth(int width) = 0;
    virtual void SetStyle(wxPenStyle style) = 0;
    virtual void SetStipple(const wxBitmap& stipple) = 0;
    virtual void SetDashes(int nb_dashes, const wxDash *dash) = 0;
    virtual void SetJoin(wxPenJoin join) = 0;
    virtual void SetCap(wxPenCap cap) = 0;
    virtual void SetQuality(wxPenQuality quality) { wxUnusedVar(quality); }

    virtual wxColour GetColour() const = 0;
    virtual wxBitmap *GetStipple() const = 0;
    virtual wxPenStyle GetStyle() const = 0;
    virtual wxPenJoin GetJoin() const = 0;
    virtual wxPenCap GetCap() const = 0;
    virtual wxPenQuality GetQuality() const { return wxPEN_QUALITY_DEFAULT; }
    virtual int GetWidth() const = 0;
    virtual int GetDashes(wxDash **ptr) const = 0;




    bool IsTransparent() const
    {
        return IsOk() && GetStyle() == wxPENSTYLE_TRANSPARENT;
    }

    bool IsNonTransparent() const
    {
        return IsOk() && GetStyle() != wxPENSTYLE_TRANSPARENT;
    }
};






# 1 "/usr/include/wx-3.1-unofficial/wx/gtk/pen.h" 1
# 16 "/usr/include/wx-3.1-unofficial/wx/gtk/pen.h"
class __attribute__ ((visibility("default"))) wxPen: public wxPenBase
{
public:
    wxPen() { }

    wxPen( const wxColour &colour, int width = 1, wxPenStyle style = wxPENSTYLE_SOLID );

    wxPen( const wxPenInfo& info );

    virtual ~wxPen();

    bool operator==(const wxPen& pen) const;
    bool operator!=(const wxPen& pen) const { return !(*this == pen); }

    void SetColour( const wxColour &colour ) override;
    void SetColour( unsigned char red, unsigned char green, unsigned char blue ) override;
    void SetCap( wxPenCap capStyle ) override;
    void SetJoin( wxPenJoin joinStyle ) override;
    void SetStyle( wxPenStyle style ) override;
    void SetWidth( int width ) override;
    void SetDashes( int number_of_dashes, const wxDash *dash ) override;
    void SetStipple(const wxBitmap& stipple) override;

    wxColour GetColour() const override;
    wxPenCap GetCap() const override;
    wxPenJoin GetJoin() const override;
    wxPenStyle GetStyle() const override;
    int GetWidth() const override;
    int GetDashes(wxDash **ptr) const override;
    int GetDashCount() const;
    wxDash* GetDash() const;
    wxBitmap *GetStipple() const override;


    __attribute__((deprecated("use wxPENSTYLE_XXX constants")))
    wxPen(const wxColour& col, int width, int style);

    __attribute__((deprecated("use wxPENSTYLE_XXX constants")))
    void SetStyle(int style) { SetStyle((wxPenStyle)style); }

protected:
    virtual wxGDIRefData *CreateGDIRefData() const override;
    virtual wxGDIRefData *CloneGDIRefData(const wxGDIRefData *data) const override;

    public:
# 60 "/usr/include/wx-3.1-unofficial/wx/gtk/pen.h"
#pragma GCC diagnostic push
# 60 "/usr/include/wx-3.1-unofficial/wx/gtk/pen.h"
   
# 60 "/usr/include/wx-3.1-unofficial/wx/gtk/pen.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 60 "/usr/include/wx-3.1-unofficial/wx/gtk/pen.h"
    virtual wxClassInfo *GetClassInfo() const;
# 60 "/usr/include/wx-3.1-unofficial/wx/gtk/pen.h"
#pragma GCC diagnostic pop
# 60 "/usr/include/wx-3.1-unofficial/wx/gtk/pen.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 108 "/usr/include/wx-3.1-unofficial/wx/pen.h" 2
# 118 "/usr/include/wx-3.1-unofficial/wx/pen.h"
class __attribute__ ((visibility("default"))) wxPenList: public wxGDIObjListBase
{
public:
    wxPen *FindOrCreatePen(const wxColour& colour,
                           int width = 1,
                           wxPenStyle style = wxPENSTYLE_SOLID);

    __attribute__((deprecated("use wxPENSTYLE_XXX constants")))
    wxPen *FindOrCreatePen(const wxColour& colour, int width, int style)
        { return FindOrCreatePen(colour, width, (wxPenStyle)style); }
};

extern __attribute__ ((visibility("default"))) wxPenList* wxThePenList;
# 139 "/usr/include/wx-3.1-unofficial/wx/pen.h"
__attribute__((deprecated("use wxPENSTYLE_XXX constants")))
inline bool operator==(wxPenStyle s, wxDeprecatedGUIConstants t)
{
    return static_cast<int>(s) == static_cast<int>(t);
}

__attribute__((deprecated("use wxPENSTYLE_XXX constants")))
inline bool operator!=(wxPenStyle s, wxDeprecatedGUIConstants t)
{
    return static_cast<int>(s) != static_cast<int>(t);
}
# 19 "/usr/include/wx-3.1-unofficial/wx/generic/statusbr.h" 2







class __attribute__ ((visibility("default"))) wxStatusBar : public wxStatusBarBase
{
public:
    wxStatusBar() { Init(); }
    wxStatusBar(wxWindow *parent,
                       wxWindowID winid = wxID_ANY,
                       long style = (0x0010|0x0100|0x0020|0x00010000),
                       const wxString& name = wxString::FromAscii(wxStatusBarNameStr))
    {
        Init();

        Create(parent, winid, style, name);
    }

    virtual ~wxStatusBar();

    bool Create(wxWindow *parent, wxWindowID winid = wxID_ANY,
                long style = (0x0010|0x0100|0x0020|0x00010000),
                const wxString& name = wxString::FromAscii(wxStatusBarNameStr));


    virtual void SetStatusWidths(int n, const int widths_field[]) override;
    virtual bool GetFieldRect(int i, wxRect& rect) const override;
    virtual void SetMinHeight(int height) override;

    virtual int GetBorderX() const override { return m_borderX; }
    virtual int GetBorderY() const override { return m_borderY; }




    int GetFieldFromPoint(const wxPoint& point) const;

protected:
    virtual void DoUpdateStatusText(int number) override;


    void OnPaint(wxPaintEvent& event);
    void OnSize(wxSizeEvent& event);

    void OnLeftDown(wxMouseEvent& event);
    void OnRightDown(wxMouseEvent& event);


    void OnSysColourChanged(wxSysColourChangedEvent& event);

protected:
    virtual int GetEffectiveFieldStyle(int i) const { return m_panes[i].GetStyle(); }
    virtual void DrawFieldText(wxDC& dc, const wxRect& rc, int i, int textHeight);
    virtual void DrawField(wxDC& dc, int i, int textHeight);

    void SetBorderX(int x);
    void SetBorderY(int y);

    virtual void InitColours();




    bool ShowsSizeGrip() const;


    wxRect GetSizeGripRect() const;


    void Init();



    wxSize m_lastClientSize;


    wxArrayInt m_widthsAbs;

    int m_borderX;
    int m_borderY;

    wxPen m_mediumShadowPen;
    wxPen m_hilightPen;

    virtual wxSize DoGetBestSize() const override;

private:

    void DoUpdateFieldWidths();

    private: static const wxEventTableEntry sm_eventTableEntries[]; protected:
# 112 "/usr/include/wx-3.1-unofficial/wx/generic/statusbr.h"
#pragma GCC diagnostic push
# 112 "/usr/include/wx-3.1-unofficial/wx/generic/statusbr.h"
   
# 112 "/usr/include/wx-3.1-unofficial/wx/generic/statusbr.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 112 "/usr/include/wx-3.1-unofficial/wx/generic/statusbr.h"
    const wxEventTable* GetEventTable() const; wxEventHashTable& GetEventHashTable() const;
# 112 "/usr/include/wx-3.1-unofficial/wx/generic/statusbr.h"
#pragma GCC diagnostic pop
# 112 "/usr/include/wx-3.1-unofficial/wx/generic/statusbr.h"
    static const wxEventTable sm_eventTable; static wxEventHashTable sm_eventHashTable;
    private: wxStatusBar(const wxStatusBar&) = delete; wxStatusBar& operator=(const wxStatusBar&) = delete; public:
# 113 "/usr/include/wx-3.1-unofficial/wx/generic/statusbr.h"
#pragma GCC diagnostic push
# 113 "/usr/include/wx-3.1-unofficial/wx/generic/statusbr.h"
   
# 113 "/usr/include/wx-3.1-unofficial/wx/generic/statusbr.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 113 "/usr/include/wx-3.1-unofficial/wx/generic/statusbr.h"
    virtual wxClassInfo *GetClassInfo() const;
# 113 "/usr/include/wx-3.1-unofficial/wx/generic/statusbr.h"
#pragma GCC diagnostic pop
# 113 "/usr/include/wx-3.1-unofficial/wx/generic/statusbr.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 245 "/usr/include/wx-3.1-unofficial/wx/statusbr.h" 2
# 20 "/usr/include/wx-3.1-unofficial/wx/frame.h" 2


extern __attribute__ ((visibility("default"))) const char wxStatusLineNameStr[];
extern __attribute__ ((visibility("default"))) const char wxToolBarNameStr[];

class wxFrame;

class wxMenuBar;

class wxMenuItem;
class wxStatusBar;
class wxToolBar;
# 56 "/usr/include/wx-3.1-unofficial/wx/frame.h"
class __attribute__ ((visibility("default"))) wxFrameBase : public wxTopLevelWindow
{
public:

    wxFrameBase();
    virtual ~wxFrameBase();

    wxFrame *New(wxWindow *parent,
                 wxWindowID winid,
                 const wxString& title,
                 const wxPoint& pos = wxDefaultPosition,
                 const wxSize& size = wxDefaultSize,
                 long style = (0x0800 | 0x0040 | 0x0400 | 0x0200 | 0x1000 | 0x20000000 | 0x00400000),
                 const wxString& name = wxString::FromAscii(wxFrameNameStr));






    virtual wxPoint GetClientAreaOrigin() const override;







    virtual void SetMenuBar(wxMenuBar *menubar);
    virtual wxMenuBar *GetMenuBar() const { return m_frameMenuBar; }




    virtual wxMenuItem *FindItemInMenuBar(int menuId) const;




    bool ProcessCommand(wxMenuItem *item);




    bool ProcessCommand(int winid);
# 109 "/usr/include/wx-3.1-unofficial/wx/frame.h"
    virtual wxStatusBar* CreateStatusBar(int number = 1,
                                         long style = (0x0010|0x0100|0x0020|0x00010000),
                                         wxWindowID winid = 0,
                                         const wxString& name = wxString::FromAscii(wxStatusLineNameStr));

    virtual wxStatusBar *OnCreateStatusBar(int number,
                                           long style,
                                           wxWindowID winid,
                                           const wxString& name);

    virtual wxStatusBar *GetStatusBar() const { return m_frameStatusBar; }


    virtual void SetStatusBar(wxStatusBar *statBar);


    virtual void SetStatusText(const wxString &text, int number = 0);
    virtual void SetStatusWidths(int n, const int widths_field[]);
    void PushStatusText(const wxString &text, int number = 0);
    void PopStatusText(int number = 0);


    void SetStatusBarPane(int n) { m_statusBarPane = n; }
    int GetStatusBarPane() const { return m_statusBarPane; }







    virtual wxToolBar* CreateToolBar(long style = -1,
                                     wxWindowID winid = wxID_ANY,
                                     const wxString& name = wxString::FromAscii(wxToolBarNameStr));

    virtual wxToolBar *OnCreateToolBar(long style,
                                       wxWindowID winid,
                                       const wxString& name );


    virtual wxToolBar *GetToolBar() const { return m_frameToolBar; }
    virtual void SetToolBar(wxToolBar *toolbar);







    void OnMenuOpen(wxMenuEvent& event);

    void OnMenuClose(wxMenuEvent& event);
    void OnMenuHighlight(wxMenuEvent& event);




    virtual void DoMenuUpdates(wxMenu* menu = 
# 166 "/usr/include/wx-3.1-unofficial/wx/frame.h" 3 4
                                             __null
# 166 "/usr/include/wx-3.1-unofficial/wx/frame.h"
                                                 );



    virtual void UpdateWindowUI(long flags = wxUPDATE_UI_NONE) override;


    virtual void OnInternalIdle() override;





    virtual void DoGiveHelp(const wxString& text, bool show);


    virtual bool IsClientAreaChild(const wxWindow *child) const override
    {
        return !IsOneOfBars(child) && wxTopLevelWindow::IsClientAreaChild(child);
    }

protected:





    void DeleteAllBars();


    virtual bool IsOneOfBars(const wxWindow *win) const override;



    virtual void PositionMenuBar() { }



    virtual void DetachMenuBar();



    virtual void AttachMenuBar(wxMenuBar *menubar);




    static bool ShouldUpdateMenuFromIdle();


    wxMenuBar *m_frameMenuBar;




    wxString m_oldStatusText;


    wxString m_lastHelpShown;





    virtual void PositionStatusBar() { }




    bool ShowMenuHelp(int helpid);

    wxStatusBar *m_frameStatusBar;



    int m_statusBarPane;




    virtual void PositionToolBar() { }

    wxToolBar *m_frameToolBar;



    private: static const wxEventTableEntry sm_eventTableEntries[]; protected:
# 252 "/usr/include/wx-3.1-unofficial/wx/frame.h"
#pragma GCC diagnostic push
# 252 "/usr/include/wx-3.1-unofficial/wx/frame.h"
   
# 252 "/usr/include/wx-3.1-unofficial/wx/frame.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 252 "/usr/include/wx-3.1-unofficial/wx/frame.h"
    const wxEventTable* GetEventTable() const; wxEventHashTable& GetEventHashTable() const;
# 252 "/usr/include/wx-3.1-unofficial/wx/frame.h"
#pragma GCC diagnostic pop
# 252 "/usr/include/wx-3.1-unofficial/wx/frame.h"
    static const wxEventTable sm_eventTable; static wxEventHashTable sm_eventHashTable;


    private: wxFrameBase(const wxFrameBase&) = delete; wxFrameBase& operator=(const wxFrameBase&) = delete;
};
# 265 "/usr/include/wx-3.1-unofficial/wx/frame.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/gtk/frame.h" 1
# 16 "/usr/include/wx-3.1-unofficial/wx/gtk/frame.h"
class __attribute__ ((visibility("default"))) wxFrame : public wxFrameBase
{
public:

    wxFrame() { Init(); }
    wxFrame(wxWindow *parent,
               wxWindowID id,
               const wxString& title,
               const wxPoint& pos = wxDefaultPosition,
               const wxSize& size = wxDefaultSize,
               long style = (0x0800 | 0x0040 | 0x0400 | 0x0200 | 0x1000 | 0x20000000 | 0x00400000),
               const wxString& name = wxString::FromAscii(wxFrameNameStr))
    {
        Init();

        Create(parent, id, title, pos, size, style, name);
    }

    bool Create(wxWindow *parent,
                wxWindowID id,
                const wxString& title,
                const wxPoint& pos = wxDefaultPosition,
                const wxSize& size = wxDefaultSize,
                long style = (0x0800 | 0x0040 | 0x0400 | 0x0200 | 0x1000 | 0x20000000 | 0x00400000),
                const wxString& name = wxString::FromAscii(wxFrameNameStr));


    void SetStatusBar(wxStatusBar *statbar) override;



    void SetToolBar(wxToolBar *toolbar) override;


    virtual bool ShowFullScreen(bool show, long style = wxFULLSCREEN_ALL) override;
    wxPoint GetClientAreaOrigin() const override { return wxPoint(0, 0); }




    virtual bool SendIdleEvents(wxIdleEvent& event) override;

protected:

    virtual void DoGetClientSize( int *width, int *height ) const override;


    virtual void DetachMenuBar() override;
    virtual void AttachMenuBar(wxMenuBar *menubar) override;


private:
    void Init();

    long m_fsSaveFlag;

    public:
# 72 "/usr/include/wx-3.1-unofficial/wx/gtk/frame.h"
#pragma GCC diagnostic push
# 72 "/usr/include/wx-3.1-unofficial/wx/gtk/frame.h"
   
# 72 "/usr/include/wx-3.1-unofficial/wx/gtk/frame.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 72 "/usr/include/wx-3.1-unofficial/wx/gtk/frame.h"
    virtual wxClassInfo *GetClassInfo() const;
# 72 "/usr/include/wx-3.1-unofficial/wx/gtk/frame.h"
#pragma GCC diagnostic pop
# 72 "/usr/include/wx-3.1-unofficial/wx/gtk/frame.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 266 "/usr/include/wx-3.1-unofficial/wx/frame.h" 2
# 43 "/usr/include/wx-3.1-unofficial/wx/wx.h" 2







# 1 "/usr/include/wx-3.1-unofficial/wx/dc.h" 1
# 24 "/usr/include/wx-3.1-unofficial/wx/dc.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/brush.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/brush.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/brush.h" 2





enum wxBrushStyle
{
    wxBRUSHSTYLE_INVALID = -1,

    wxBRUSHSTYLE_SOLID = wxSOLID,
    wxBRUSHSTYLE_TRANSPARENT = wxTRANSPARENT,
    wxBRUSHSTYLE_STIPPLE_MASK_OPAQUE = wxSTIPPLE_MASK_OPAQUE,
    wxBRUSHSTYLE_STIPPLE_MASK = wxSTIPPLE_MASK,
    wxBRUSHSTYLE_STIPPLE = wxSTIPPLE,
    wxBRUSHSTYLE_BDIAGONAL_HATCH = wxHATCHSTYLE_BDIAGONAL,
    wxBRUSHSTYLE_CROSSDIAG_HATCH = wxHATCHSTYLE_CROSSDIAG,
    wxBRUSHSTYLE_FDIAGONAL_HATCH = wxHATCHSTYLE_FDIAGONAL,
    wxBRUSHSTYLE_CROSS_HATCH = wxHATCHSTYLE_CROSS,
    wxBRUSHSTYLE_HORIZONTAL_HATCH = wxHATCHSTYLE_HORIZONTAL,
    wxBRUSHSTYLE_VERTICAL_HATCH = wxHATCHSTYLE_VERTICAL,
    wxBRUSHSTYLE_FIRST_HATCH = wxHATCHSTYLE_FIRST,
    wxBRUSHSTYLE_LAST_HATCH = wxHATCHSTYLE_LAST
};



class __attribute__ ((visibility("default"))) wxBrushBase: public wxGDIObject
{
public:
    virtual ~wxBrushBase() { }

    virtual void SetColour(const wxColour& col) = 0;
    virtual void SetColour(unsigned char r, unsigned char g, unsigned char b) = 0;
    virtual void SetStyle(wxBrushStyle style) = 0;
    virtual void SetStipple(const wxBitmap& stipple) = 0;

    virtual wxColour GetColour() const = 0;
    virtual wxBrushStyle GetStyle() const = 0;
    virtual wxBitmap *GetStipple() const = 0;

    virtual bool IsHatch() const
        { return (GetStyle()>=wxBRUSHSTYLE_FIRST_HATCH) && (GetStyle()<=wxBRUSHSTYLE_LAST_HATCH); }




    bool IsTransparent() const
    {
        return IsOk() && GetStyle() == wxBRUSHSTYLE_TRANSPARENT;
    }

    bool IsNonTransparent() const
    {
        return IsOk() && GetStyle() != wxBRUSHSTYLE_TRANSPARENT;
    }
};






# 1 "/usr/include/wx-3.1-unofficial/wx/gtk/brush.h" 1
# 12 "/usr/include/wx-3.1-unofficial/wx/gtk/brush.h"
class wxBitmap;
class wxColour;





class __attribute__ ((visibility("default"))) wxBrush: public wxBrushBase
{
public:
    wxBrush() { }

    wxBrush( const wxColour &colour, wxBrushStyle style = wxBRUSHSTYLE_SOLID );
    wxBrush( const wxBitmap &stippleBitmap );
    virtual ~wxBrush();

    bool operator==(const wxBrush& brush) const;
    bool operator!=(const wxBrush& brush) const { return !(*this == brush); }

    wxBrushStyle GetStyle() const override;
    wxColour GetColour() const override;
    wxBitmap *GetStipple() const override;

    void SetColour( const wxColour& col ) override;
    void SetColour( unsigned char r, unsigned char g, unsigned char b ) override;
    void SetStyle( wxBrushStyle style ) override;
    void SetStipple( const wxBitmap& stipple ) override;

    __attribute__((deprecated("use wxBRUSHSTYLE_XXX constants")))
    wxBrush(const wxColour& col, int style);

    __attribute__((deprecated("use wxBRUSHSTYLE_XXX constants")))
    void SetStyle(int style) { SetStyle((wxBrushStyle)style); }

protected:
    virtual wxGDIRefData *CreateGDIRefData() const override;
    virtual wxGDIRefData *CloneGDIRefData(const wxGDIRefData *data) const override;

    public:
# 50 "/usr/include/wx-3.1-unofficial/wx/gtk/brush.h"
#pragma GCC diagnostic push
# 50 "/usr/include/wx-3.1-unofficial/wx/gtk/brush.h"
   
# 50 "/usr/include/wx-3.1-unofficial/wx/gtk/brush.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 50 "/usr/include/wx-3.1-unofficial/wx/gtk/brush.h"
    virtual wxClassInfo *GetClassInfo() const;
# 50 "/usr/include/wx-3.1-unofficial/wx/gtk/brush.h"
#pragma GCC diagnostic pop
# 50 "/usr/include/wx-3.1-unofficial/wx/gtk/brush.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 78 "/usr/include/wx-3.1-unofficial/wx/brush.h" 2
# 88 "/usr/include/wx-3.1-unofficial/wx/brush.h"
class __attribute__ ((visibility("default"))) wxBrushList: public wxGDIObjListBase
{
public:
    wxBrush *FindOrCreateBrush(const wxColour& colour,
                               wxBrushStyle style = wxBRUSHSTYLE_SOLID);

    __attribute__((deprecated("use wxBRUSHSTYLE_XXX constants")))
    wxBrush *FindOrCreateBrush(const wxColour& colour, int style)
        { return FindOrCreateBrush(colour, (wxBrushStyle)style); }
};

extern __attribute__ ((visibility("default"))) wxBrushList* wxTheBrushList;
# 108 "/usr/include/wx-3.1-unofficial/wx/brush.h"
__attribute__((deprecated("use wxBRUSHSTYLE_XXX constants only")))
inline bool operator==(wxBrushStyle s, wxDeprecatedGUIConstants t)
{
    return static_cast<int>(s) == static_cast<int>(t);
}

__attribute__((deprecated("use wxBRUSHSTYLE_XXX constants only")))
inline bool operator!=(wxBrushStyle s, wxDeprecatedGUIConstants t)
{
    return static_cast<int>(s) != static_cast<int>(t);
}
# 25 "/usr/include/wx-3.1-unofficial/wx/dc.h" 2






# 1 "/usr/include/wx-3.1-unofficial/wx/affinematrix2d.h" 1
# 13 "/usr/include/wx-3.1-unofficial/wx/affinematrix2d.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/affinematrix2d.h" 2



# 1 "/usr/include/wx-3.1-unofficial/wx/affinematrix2dbase.h" 1
# 13 "/usr/include/wx-3.1-unofficial/wx/affinematrix2dbase.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/affinematrix2dbase.h" 2



# 1 "/usr/include/wx-3.1-unofficial/wx/geometry.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/geometry.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/geometry.h" 2







class wxDataInputStream;
class wxDataOutputStream;



enum wxOutCode
{
    wxInside = 0x00 ,
    wxOutLeft = 0x01 ,
    wxOutRight = 0x02 ,
    wxOutTop = 0x08 ,
    wxOutBottom = 0x04
};

class __attribute__ ((visibility("default"))) wxPoint2DInt
{
public :
    inline wxPoint2DInt();
    inline wxPoint2DInt( wxInt32 x , wxInt32 y );
    inline wxPoint2DInt( const wxPoint &pt );



    inline void GetFloor( wxInt32 *x , wxInt32 *y ) const;
    inline void GetRounded( wxInt32 *x , wxInt32 *y ) const;

    inline wxDouble GetVectorLength() const;
           wxDouble GetVectorAngle() const;
    inline void SetVectorLength( wxDouble length );
           void SetVectorAngle( wxDouble degrees );

    inline void Normalize();

    inline wxDouble GetDistance( const wxPoint2DInt &pt ) const;
    inline wxDouble GetDistanceSquare( const wxPoint2DInt &pt ) const;
    inline wxInt32 GetDotProduct( const wxPoint2DInt &vec ) const;
    inline wxInt32 GetCrossProduct( const wxPoint2DInt &vec ) const;


    wxPoint2DInt operator-() const;

    inline wxPoint2DInt& operator+=(const wxPoint2DInt& pt);
    inline wxPoint2DInt& operator-=(const wxPoint2DInt& pt);
    inline wxPoint2DInt& operator*=(const wxPoint2DInt& pt);
    inline wxPoint2DInt& operator*=(wxDouble n);
    inline wxPoint2DInt& operator*=(wxInt32 n);
    inline wxPoint2DInt& operator/=(const wxPoint2DInt& pt);
    inline wxPoint2DInt& operator/=(wxDouble n);
    inline wxPoint2DInt& operator/=(wxInt32 n);
    inline operator wxPoint() const;
    inline bool operator==(const wxPoint2DInt& pt) const;
    inline bool operator!=(const wxPoint2DInt& pt) const;


    void WriteTo( wxDataOutputStream &stream ) const;
    void ReadFrom( wxDataInputStream &stream );


    wxInt32 m_x;
    wxInt32 m_y;
};

inline wxPoint2DInt operator+(const wxPoint2DInt& pt1 , const wxPoint2DInt& pt2);
inline wxPoint2DInt operator-(const wxPoint2DInt& pt1 , const wxPoint2DInt& pt2);
inline wxPoint2DInt operator*(const wxPoint2DInt& pt1 , const wxPoint2DInt& pt2);
inline wxPoint2DInt operator*(wxInt32 n , const wxPoint2DInt& pt);
inline wxPoint2DInt operator*(wxDouble n , const wxPoint2DInt& pt);
inline wxPoint2DInt operator*(const wxPoint2DInt& pt , wxInt32 n);
inline wxPoint2DInt operator*(const wxPoint2DInt& pt , wxDouble n);
inline wxPoint2DInt operator/(const wxPoint2DInt& pt1 , const wxPoint2DInt& pt2);
inline wxPoint2DInt operator/(const wxPoint2DInt& pt , wxInt32 n);
inline wxPoint2DInt operator/(const wxPoint2DInt& pt , wxDouble n);

inline wxPoint2DInt::wxPoint2DInt()
{
    m_x = 0;
    m_y = 0;
}

inline wxPoint2DInt::wxPoint2DInt( wxInt32 x , wxInt32 y )
{
    m_x = x;
    m_y = y;
}

inline wxPoint2DInt::wxPoint2DInt( const wxPoint &pt )
{
    m_x = pt.x;
    m_y = pt.y;
}

inline void wxPoint2DInt::GetFloor( wxInt32 *x , wxInt32 *y ) const
{
    if ( x )
        *x = m_x;
    if ( y )
        *y = m_y;
}

inline void wxPoint2DInt::GetRounded( wxInt32 *x , wxInt32 *y ) const
{
    GetFloor(x, y);
}

inline wxDouble wxPoint2DInt::GetVectorLength() const
{

    return sqrt( (wxDouble)(m_x)*(m_x) + (wxDouble)(m_y)*(m_y) );
}

inline void wxPoint2DInt::SetVectorLength( wxDouble length )
{
    wxDouble before = GetVectorLength();
    m_x = (wxInt32)(m_x * length / before);
    m_y = (wxInt32)(m_y * length / before);
}

inline void wxPoint2DInt::Normalize()
{
    SetVectorLength( 1 );
}

inline wxDouble wxPoint2DInt::GetDistance( const wxPoint2DInt &pt ) const
{
    return sqrt( GetDistanceSquare( pt ) );
}

inline wxDouble wxPoint2DInt::GetDistanceSquare( const wxPoint2DInt &pt ) const
{
    return ( ((wxDouble)pt.m_x-m_x)*((wxDouble)pt.m_x-m_x) +
             ((wxDouble)pt.m_y-m_y)*((wxDouble)pt.m_y-m_y) );
}

inline wxInt32 wxPoint2DInt::GetDotProduct( const wxPoint2DInt &vec ) const
{
    return ( m_x * vec.m_x + m_y * vec.m_y );
}

inline wxInt32 wxPoint2DInt::GetCrossProduct( const wxPoint2DInt &vec ) const
{
    return ( m_x * vec.m_y - vec.m_x * m_y );
}

inline wxPoint2DInt::operator wxPoint() const
{
    return wxPoint( m_x, m_y);
}

inline wxPoint2DInt wxPoint2DInt::operator-() const
{
    return wxPoint2DInt( -m_x, -m_y);
}

inline wxPoint2DInt& wxPoint2DInt::operator+=(const wxPoint2DInt& pt)
{
    m_x = m_x + pt.m_x;
    m_y = m_y + pt.m_y;
    return *this;
}

inline wxPoint2DInt& wxPoint2DInt::operator-=(const wxPoint2DInt& pt)
{
    m_x = m_x - pt.m_x;
    m_y = m_y - pt.m_y;
    return *this;
}

inline wxPoint2DInt& wxPoint2DInt::operator*=(const wxPoint2DInt& pt)
{
    m_x = m_x * pt.m_x;
    m_y = m_y * pt.m_y;
    return *this;
}

inline wxPoint2DInt& wxPoint2DInt::operator/=(const wxPoint2DInt& pt)
{
    m_x = m_x / pt.m_x;
    m_y = m_y / pt.m_y;
    return *this;
}

inline bool wxPoint2DInt::operator==(const wxPoint2DInt& pt) const
{
    return m_x == pt.m_x && m_y == pt.m_y;
}

inline bool wxPoint2DInt::operator!=(const wxPoint2DInt& pt) const
{
    return m_x != pt.m_x || m_y != pt.m_y;
}

inline wxPoint2DInt operator+(const wxPoint2DInt& pt1 , const wxPoint2DInt& pt2)
{
    return wxPoint2DInt( pt1.m_x + pt2.m_x , pt1.m_y + pt2.m_y );
}

inline wxPoint2DInt operator-(const wxPoint2DInt& pt1 , const wxPoint2DInt& pt2)
{
    return wxPoint2DInt( pt1.m_x - pt2.m_x , pt1.m_y - pt2.m_y );
}


inline wxPoint2DInt operator*(const wxPoint2DInt& pt1 , const wxPoint2DInt& pt2)
{
    return wxPoint2DInt( pt1.m_x * pt2.m_x , pt1.m_y * pt2.m_y );
}

inline wxPoint2DInt operator*(wxInt32 n , const wxPoint2DInt& pt)
{
    return wxPoint2DInt( pt.m_x * n , pt.m_y * n );
}

inline wxPoint2DInt operator*(wxDouble n , const wxPoint2DInt& pt)
{
    return wxPoint2DInt( static_cast<wxInt32>(pt.m_x * n) ,
        static_cast<wxInt32>(pt.m_y * n) );
}

inline wxPoint2DInt operator*(const wxPoint2DInt& pt , wxInt32 n)
{
    return wxPoint2DInt( pt.m_x * n , pt.m_y * n );
}

inline wxPoint2DInt operator*(const wxPoint2DInt& pt , wxDouble n)
{
    return wxPoint2DInt( static_cast<wxInt32>(pt.m_x * n) ,
        static_cast<wxInt32>(pt.m_y * n) );
}

inline wxPoint2DInt operator/(const wxPoint2DInt& pt1 , const wxPoint2DInt& pt2)
{
    return wxPoint2DInt( pt1.m_x / pt2.m_x , pt1.m_y / pt2.m_y );
}

inline wxPoint2DInt operator/(const wxPoint2DInt& pt , wxInt32 n)
{
    return wxPoint2DInt( pt.m_x / n , pt.m_y / n );
}

inline wxPoint2DInt operator/(const wxPoint2DInt& pt , wxDouble n)
{
    return wxPoint2DInt( static_cast<wxInt32>(pt.m_x / n) ,
        static_cast<wxInt32>(pt.m_y / n) );
}



class __attribute__ ((visibility("default"))) wxPoint2DDouble
{
public :
    inline wxPoint2DDouble();
    inline wxPoint2DDouble( wxDouble x , wxDouble y );
    wxPoint2DDouble( const wxPoint2DInt &pt )
        { m_x = (wxDouble) pt.m_x ; m_y = (wxDouble) pt.m_y ; }
    wxPoint2DDouble( const wxPoint &pt )
        { m_x = (wxDouble) pt.x ; m_y = (wxDouble) pt.y ; }



    inline void GetFloor( wxInt32 *x , wxInt32 *y ) const;
    inline void GetRounded( wxInt32 *x , wxInt32 *y ) const;

    inline wxDouble GetVectorLength() const;
     wxDouble GetVectorAngle() const ;
    void SetVectorLength( wxDouble length );
    void SetVectorAngle( wxDouble degrees );

    void Normalize();

    inline wxDouble GetDistance( const wxPoint2DDouble &pt ) const;
    inline wxDouble GetDistanceSquare( const wxPoint2DDouble &pt ) const;
    inline wxDouble GetDotProduct( const wxPoint2DDouble &vec ) const;
    inline wxDouble GetCrossProduct( const wxPoint2DDouble &vec ) const;


    wxPoint2DDouble operator-() const;

    inline wxPoint2DDouble& operator+=(const wxPoint2DDouble& pt);
    inline wxPoint2DDouble& operator-=(const wxPoint2DDouble& pt);
    inline wxPoint2DDouble& operator*=(const wxPoint2DDouble& pt);
    inline wxPoint2DDouble& operator*=(wxDouble n);
    inline wxPoint2DDouble& operator*=(wxInt32 n);
    inline wxPoint2DDouble& operator/=(const wxPoint2DDouble& pt);
    inline wxPoint2DDouble& operator/=(wxDouble n);
    inline wxPoint2DDouble& operator/=(wxInt32 n);

    inline bool operator==(const wxPoint2DDouble& pt) const;
    inline bool operator!=(const wxPoint2DDouble& pt) const;

    wxDouble m_x;
    wxDouble m_y;
};

inline wxPoint2DDouble operator+(const wxPoint2DDouble& pt1 , const wxPoint2DDouble& pt2);
inline wxPoint2DDouble operator-(const wxPoint2DDouble& pt1 , const wxPoint2DDouble& pt2);
inline wxPoint2DDouble operator*(const wxPoint2DDouble& pt1 , const wxPoint2DDouble& pt2);
inline wxPoint2DDouble operator*(wxDouble n , const wxPoint2DDouble& pt);
inline wxPoint2DDouble operator*(wxInt32 n , const wxPoint2DDouble& pt);
inline wxPoint2DDouble operator*(const wxPoint2DDouble& pt , wxDouble n);
inline wxPoint2DDouble operator*(const wxPoint2DDouble& pt , wxInt32 n);
inline wxPoint2DDouble operator/(const wxPoint2DDouble& pt1 , const wxPoint2DDouble& pt2);
inline wxPoint2DDouble operator/(const wxPoint2DDouble& pt , wxDouble n);
inline wxPoint2DDouble operator/(const wxPoint2DDouble& pt , wxInt32 n);

inline wxPoint2DDouble::wxPoint2DDouble()
{
    m_x = 0.0;
    m_y = 0.0;
}

inline wxPoint2DDouble::wxPoint2DDouble( wxDouble x , wxDouble y )
{
    m_x = x;
    m_y = y;
}

inline void wxPoint2DDouble::GetFloor( wxInt32 *x , wxInt32 *y ) const
{
    *x = (wxInt32) floor( m_x );
    *y = (wxInt32) floor( m_y );
}

inline void wxPoint2DDouble::GetRounded( wxInt32 *x , wxInt32 *y ) const
{
    *x = (wxInt32) floor( m_x + 0.5 );
    *y = (wxInt32) floor( m_y + 0.5);
}

inline wxDouble wxPoint2DDouble::GetVectorLength() const
{
    return sqrt( (m_x)*(m_x) + (m_y)*(m_y) ) ;
}

inline void wxPoint2DDouble::SetVectorLength( wxDouble length )
{
    wxDouble before = GetVectorLength() ;
    m_x = (m_x * length / before) ;
    m_y = (m_y * length / before) ;
}

inline void wxPoint2DDouble::Normalize()
{
    SetVectorLength( 1 );
}

inline wxDouble wxPoint2DDouble::GetDistance( const wxPoint2DDouble &pt ) const
{
    return sqrt( GetDistanceSquare( pt ) );
}

inline wxDouble wxPoint2DDouble::GetDistanceSquare( const wxPoint2DDouble &pt ) const
{
    return ( (pt.m_x-m_x)*(pt.m_x-m_x) + (pt.m_y-m_y)*(pt.m_y-m_y) );
}

inline wxDouble wxPoint2DDouble::GetDotProduct( const wxPoint2DDouble &vec ) const
{
    return ( m_x * vec.m_x + m_y * vec.m_y );
}

inline wxDouble wxPoint2DDouble::GetCrossProduct( const wxPoint2DDouble &vec ) const
{
    return ( m_x * vec.m_y - vec.m_x * m_y );
}

inline wxPoint2DDouble wxPoint2DDouble::operator-() const
{
    return wxPoint2DDouble( -m_x, -m_y);
}

inline wxPoint2DDouble& wxPoint2DDouble::operator+=(const wxPoint2DDouble& pt)
{
    m_x = m_x + pt.m_x;
    m_y = m_y + pt.m_y;
    return *this;
}

inline wxPoint2DDouble& wxPoint2DDouble::operator-=(const wxPoint2DDouble& pt)
{
    m_x = m_x - pt.m_x;
    m_y = m_y - pt.m_y;
    return *this;
}

inline wxPoint2DDouble& wxPoint2DDouble::operator*=(const wxPoint2DDouble& pt)
{
    m_x = m_x * pt.m_x;
    m_y = m_y * pt.m_y;
    return *this;
}

inline wxPoint2DDouble& wxPoint2DDouble::operator/=(const wxPoint2DDouble& pt)
{
    m_x = m_x / pt.m_x;
    m_y = m_y / pt.m_y;
    return *this;
}

inline bool wxPoint2DDouble::operator==(const wxPoint2DDouble& pt) const
{
    return wxIsSameDouble(m_x, pt.m_x) && wxIsSameDouble(m_y, pt.m_y);
}

inline bool wxPoint2DDouble::operator!=(const wxPoint2DDouble& pt) const
{
    return !(*this == pt);
}

inline wxPoint2DDouble operator+(const wxPoint2DDouble& pt1 , const wxPoint2DDouble& pt2)
{
    return wxPoint2DDouble( pt1.m_x + pt2.m_x , pt1.m_y + pt2.m_y );
}

inline wxPoint2DDouble operator-(const wxPoint2DDouble& pt1 , const wxPoint2DDouble& pt2)
{
    return wxPoint2DDouble( pt1.m_x - pt2.m_x , pt1.m_y - pt2.m_y );
}


inline wxPoint2DDouble operator*(const wxPoint2DDouble& pt1 , const wxPoint2DDouble& pt2)
{
    return wxPoint2DDouble( pt1.m_x * pt2.m_x , pt1.m_y * pt2.m_y );
}

inline wxPoint2DDouble operator*(wxDouble n , const wxPoint2DDouble& pt)
{
    return wxPoint2DDouble( pt.m_x * n , pt.m_y * n );
}

inline wxPoint2DDouble operator*(wxInt32 n , const wxPoint2DDouble& pt)
{
    return wxPoint2DDouble( pt.m_x * n , pt.m_y * n );
}

inline wxPoint2DDouble operator*(const wxPoint2DDouble& pt , wxDouble n)
{
    return wxPoint2DDouble( pt.m_x * n , pt.m_y * n );
}

inline wxPoint2DDouble operator*(const wxPoint2DDouble& pt , wxInt32 n)
{
    return wxPoint2DDouble( pt.m_x * n , pt.m_y * n );
}

inline wxPoint2DDouble operator/(const wxPoint2DDouble& pt1 , const wxPoint2DDouble& pt2)
{
    return wxPoint2DDouble( pt1.m_x / pt2.m_x , pt1.m_y / pt2.m_y );
}

inline wxPoint2DDouble operator/(const wxPoint2DDouble& pt , wxDouble n)
{
    return wxPoint2DDouble( pt.m_x / n , pt.m_y / n );
}

inline wxPoint2DDouble operator/(const wxPoint2DDouble& pt , wxInt32 n)
{
    return wxPoint2DDouble( pt.m_x / n , pt.m_y / n );
}





class __attribute__ ((visibility("default"))) wxRect2DDouble
{
public:
    wxRect2DDouble()
        { m_x = m_y = m_width = m_height = 0; }
    wxRect2DDouble(wxDouble x, wxDouble y, wxDouble w, wxDouble h)
        { m_x = x; m_y = y; m_width = w; m_height = h; }







    wxPoint2DDouble GetPosition() const
        { return wxPoint2DDouble(m_x, m_y); }
    wxSize GetSize() const
        { return wxSize((int) m_width, (int) m_height); }




    inline wxDouble GetLeft() const { return m_x; }
    inline void SetLeft( wxDouble n ) { m_width += m_x - n; m_x = n; }
    inline void MoveLeftTo( wxDouble n ) { m_x = n; }
    inline wxDouble GetTop() const { return m_y; }
    inline void SetTop( wxDouble n ) { m_height += m_y - n; m_y = n; }
    inline void MoveTopTo( wxDouble n ) { m_y = n; }
    inline wxDouble GetBottom() const { return m_y + m_height; }
    inline void SetBottom( wxDouble n ) { m_height += n - (m_y+m_height);}
    inline void MoveBottomTo( wxDouble n ) { m_y = n - m_height; }
    inline wxDouble GetRight() const { return m_x + m_width; }
    inline void SetRight( wxDouble n ) { m_width += n - (m_x+m_width) ; }
    inline void MoveRightTo( wxDouble n ) { m_x = n - m_width; }

    inline wxPoint2DDouble GetLeftTop() const
        { return wxPoint2DDouble( m_x , m_y ); }
    inline void SetLeftTop( const wxPoint2DDouble &pt )
        { m_width += m_x - pt.m_x; m_height += m_y - pt.m_y; m_x = pt.m_x; m_y = pt.m_y; }
    inline void MoveLeftTopTo( const wxPoint2DDouble &pt )
        { m_x = pt.m_x; m_y = pt.m_y; }
    inline wxPoint2DDouble GetLeftBottom() const
        { return wxPoint2DDouble( m_x , m_y + m_height ); }
    inline void SetLeftBottom( const wxPoint2DDouble &pt )
        { m_width += m_x - pt.m_x; m_height += pt.m_y - (m_y+m_height) ; m_x = pt.m_x; }
    inline void MoveLeftBottomTo( const wxPoint2DDouble &pt )
        { m_x = pt.m_x; m_y = pt.m_y - m_height; }
    inline wxPoint2DDouble GetRightTop() const
        { return wxPoint2DDouble( m_x+m_width , m_y ); }
    inline void SetRightTop( const wxPoint2DDouble &pt )
        { m_width += pt.m_x - ( m_x + m_width ); m_height += m_y - pt.m_y; m_y = pt.m_y; }
    inline void MoveRightTopTo( const wxPoint2DDouble &pt )
        { m_x = pt.m_x - m_width; m_y = pt.m_y; }
    inline wxPoint2DDouble GetRightBottom() const
        { return wxPoint2DDouble( m_x+m_width , m_y + m_height ); }
    inline void SetRightBottom( const wxPoint2DDouble &pt )
        { m_width += pt.m_x - ( m_x + m_width ); m_height += pt.m_y - (m_y+m_height);}
    inline void MoveRightBottomTo( const wxPoint2DDouble &pt )
        { m_x = pt.m_x - m_width; m_y = pt.m_y - m_height; }
    inline wxPoint2DDouble GetCentre() const
        { return wxPoint2DDouble( m_x+m_width/2 , m_y+m_height/2 ); }
    inline void SetCentre( const wxPoint2DDouble &pt )
        { MoveCentreTo( pt ); }
    inline void MoveCentreTo( const wxPoint2DDouble &pt )
        { m_x += pt.m_x - (m_x+m_width/2); m_y += pt.m_y -(m_y+m_height/2); }
    inline wxOutCode GetOutCode( const wxPoint2DDouble &pt ) const
        { return (wxOutCode) (( ( pt.m_x < m_x ) ? wxOutLeft : 0 ) +
                     ( ( pt.m_x > m_x + m_width ) ? wxOutRight : 0 ) +
                     ( ( pt.m_y < m_y ) ? wxOutTop : 0 ) +
                     ( ( pt.m_y > m_y + m_height ) ? wxOutBottom : 0 )); }
    inline wxOutCode GetOutcode(const wxPoint2DDouble &pt) const
        { return GetOutCode(pt) ; }
    inline bool Contains( const wxPoint2DDouble &pt ) const
        { return GetOutCode( pt ) == wxInside; }
    inline bool Contains( const wxRect2DDouble &rect ) const
        { return ( ( ( m_x <= rect.m_x ) && ( rect.m_x + rect.m_width <= m_x + m_width ) ) &&
                ( ( m_y <= rect.m_y ) && ( rect.m_y + rect.m_height <= m_y + m_height ) ) ); }
    inline bool IsEmpty() const
        { return m_width <= 0 || m_height <= 0; }
    inline bool HaveEqualSize( const wxRect2DDouble &rect ) const
        { return wxIsSameDouble(rect.m_width, m_width) && wxIsSameDouble(rect.m_height, m_height); }

    inline void Inset( wxDouble x , wxDouble y )
        { m_x += x; m_y += y; m_width -= 2 * x; m_height -= 2 * y; }
    inline void Inset( wxDouble left , wxDouble top ,wxDouble right , wxDouble bottom )
        { m_x += left; m_y += top; m_width -= left + right; m_height -= top + bottom;}
    inline void Offset( const wxPoint2DDouble &pt )
        { m_x += pt.m_x; m_y += pt.m_y; }

    void ConstrainTo( const wxRect2DDouble &rect );

    wxPoint2DDouble Interpolate( wxInt32 widthfactor, wxInt32 heightfactor ) const
        { return wxPoint2DDouble( m_x + m_width * widthfactor , m_y + m_height * heightfactor ); }

    static void Intersect( const wxRect2DDouble &src1 , const wxRect2DDouble &src2 , wxRect2DDouble *dest );
    inline void Intersect( const wxRect2DDouble &otherRect )
        { Intersect( *this , otherRect , this ); }
    inline wxRect2DDouble CreateIntersection( const wxRect2DDouble &otherRect ) const
        { wxRect2DDouble result; Intersect( *this , otherRect , &result); return result; }
    bool Intersects( const wxRect2DDouble &rect ) const;

    static void Union( const wxRect2DDouble &src1 , const wxRect2DDouble &src2 , wxRect2DDouble *dest );
    void Union( const wxRect2DDouble &otherRect )
        { Union( *this , otherRect , this ); }
    void Union( const wxPoint2DDouble &pt );
    inline wxRect2DDouble CreateUnion( const wxRect2DDouble &otherRect ) const
        { wxRect2DDouble result; Union( *this , otherRect , &result); return result; }

    inline void Scale( wxDouble f )
        { m_x *= f; m_y *= f; m_width *= f; m_height *= f;}
    inline void Scale( wxInt32 num , wxInt32 denum )
        { m_x *= ((wxDouble)num)/((wxDouble)denum); m_y *= ((wxDouble)num)/((wxDouble)denum);
                m_width *= ((wxDouble)num)/((wxDouble)denum); m_height *= ((wxDouble)num)/((wxDouble)denum);}

    inline bool operator == (const wxRect2DDouble& rect) const
        { return wxIsSameDouble(m_x, rect.m_x) && wxIsSameDouble(m_y, rect.m_y) && HaveEqualSize(rect); }
    inline bool operator != (const wxRect2DDouble& rect) const
        { return !(*this == rect); }

    wxDouble m_x;
    wxDouble m_y;
    wxDouble m_width;
    wxDouble m_height;
};






class __attribute__ ((visibility("default"))) wxRect2DInt
{
public:
       wxRect2DInt() { m_x = m_y = m_width = m_height = 0; }
       wxRect2DInt( const wxRect& r ) { m_x = r.x ; m_y = r.y ; m_width = r.width ; m_height = r.height ; }
       wxRect2DInt(wxInt32 x, wxInt32 y, wxInt32 w, wxInt32 h) { m_x = x; m_y = y; m_width = w; m_height = h; }
       wxRect2DInt(const wxPoint2DInt& topLeft, const wxPoint2DInt& bottomRight);
       inline wxRect2DInt(const wxPoint2DInt& pos, const wxSize& size);




       wxPoint2DInt GetPosition() const { return wxPoint2DInt(m_x, m_y); }
       wxSize GetSize() const { return wxSize(m_width, m_height); }




      inline wxInt32 GetLeft() const { return m_x; }
       inline void SetLeft( wxInt32 n ) { m_width += m_x - n; m_x = n; }
       inline void MoveLeftTo( wxInt32 n ) { m_x = n; }
       inline wxInt32 GetTop() const { return m_y; }
       inline void SetTop( wxInt32 n ) { m_height += m_y - n; m_y = n; }
       inline void MoveTopTo( wxInt32 n ) { m_y = n; }
       inline wxInt32 GetBottom() const { return m_y + m_height; }
       inline void SetBottom( wxInt32 n ) { m_height += n - (m_y+m_height);}
       inline void MoveBottomTo( wxInt32 n ) { m_y = n - m_height; }
       inline wxInt32 GetRight() const { return m_x + m_width; }
       inline void SetRight( wxInt32 n ) { m_width += n - (m_x+m_width) ; }
       inline void MoveRightTo( wxInt32 n ) { m_x = n - m_width; }

        inline wxPoint2DInt GetLeftTop() const { return wxPoint2DInt( m_x , m_y ); }
        inline void SetLeftTop( const wxPoint2DInt &pt ) { m_width += m_x - pt.m_x; m_height += m_y - pt.m_y; m_x = pt.m_x; m_y = pt.m_y; }
        inline void MoveLeftTopTo( const wxPoint2DInt &pt ) { m_x = pt.m_x; m_y = pt.m_y; }
        inline wxPoint2DInt GetLeftBottom() const { return wxPoint2DInt( m_x , m_y + m_height ); }
        inline void SetLeftBottom( const wxPoint2DInt &pt ) { m_width += m_x - pt.m_x; m_height += pt.m_y - (m_y+m_height) ; m_x = pt.m_x; }
        inline void MoveLeftBottomTo( const wxPoint2DInt &pt ) { m_x = pt.m_x; m_y = pt.m_y - m_height; }
        inline wxPoint2DInt GetRightTop() const { return wxPoint2DInt( m_x+m_width , m_y ); }
        inline void SetRightTop( const wxPoint2DInt &pt ) { m_width += pt.m_x - ( m_x + m_width ); m_height += m_y - pt.m_y; m_y = pt.m_y; }
        inline void MoveRightTopTo( const wxPoint2DInt &pt ) { m_x = pt.m_x - m_width; m_y = pt.m_y; }
        inline wxPoint2DInt GetRightBottom() const { return wxPoint2DInt( m_x+m_width , m_y + m_height ); }
        inline void SetRightBottom( const wxPoint2DInt &pt ) { m_width += pt.m_x - ( m_x + m_width ); m_height += pt.m_y - (m_y+m_height);}
        inline void MoveRightBottomTo( const wxPoint2DInt &pt ) { m_x = pt.m_x - m_width; m_y = pt.m_y - m_height; }
        inline wxPoint2DInt GetCentre() const { return wxPoint2DInt( m_x+m_width/2 , m_y+m_height/2 ); }
        inline void SetCentre( const wxPoint2DInt &pt ) { MoveCentreTo( pt ); }
        inline void MoveCentreTo( const wxPoint2DInt &pt ) { m_x += pt.m_x - (m_x+m_width/2); m_y += pt.m_y -(m_y+m_height/2); }
        inline wxOutCode GetOutCode( const wxPoint2DInt &pt ) const
            { return (wxOutCode) (( ( pt.m_x < m_x ) ? wxOutLeft : 0 ) +
                     ( ( pt.m_x >= m_x + m_width ) ? wxOutRight : 0 ) +
                     ( ( pt.m_y < m_y ) ? wxOutTop : 0 ) +
                     ( ( pt.m_y >= m_y + m_height ) ? wxOutBottom : 0 )); }
        inline wxOutCode GetOutcode( const wxPoint2DInt &pt ) const
            { return GetOutCode( pt ) ; }
        inline bool Contains( const wxPoint2DInt &pt ) const
            { return GetOutCode( pt ) == wxInside; }
        inline bool Contains( const wxRect2DInt &rect ) const
            { return ( ( ( m_x <= rect.m_x ) && ( rect.m_x + rect.m_width <= m_x + m_width ) ) &&
                ( ( m_y <= rect.m_y ) && ( rect.m_y + rect.m_height <= m_y + m_height ) ) ); }
        inline bool IsEmpty() const
            { return ( m_width <= 0 || m_height <= 0 ); }
        inline bool HaveEqualSize( const wxRect2DInt &rect ) const
            { return ( rect.m_width == m_width && rect.m_height == m_height ); }

        inline void Inset( wxInt32 x , wxInt32 y ) { m_x += x; m_y += y; m_width -= 2 * x; m_height -= 2 * y; }
        inline void Inset( wxInt32 left , wxInt32 top ,wxInt32 right , wxInt32 bottom )
            { m_x += left; m_y += top; m_width -= left + right; m_height -= top + bottom;}
        inline void Offset( const wxPoint2DInt &pt ) { m_x += pt.m_x; m_y += pt.m_y; }
        void ConstrainTo( const wxRect2DInt &rect );
        wxPoint2DInt Interpolate( wxInt32 widthfactor, wxInt32 heightfactor ) const
            { return wxPoint2DInt( m_x + m_width * widthfactor, m_y + m_height * heightfactor ); }

        static void Intersect( const wxRect2DInt &src1 , const wxRect2DInt &src2 , wxRect2DInt *dest );
        inline void Intersect( const wxRect2DInt &otherRect ) { Intersect( *this , otherRect , this ); }
        inline wxRect2DInt CreateIntersection( const wxRect2DInt &otherRect ) const { wxRect2DInt result; Intersect( *this , otherRect , &result); return result; }
        bool Intersects( const wxRect2DInt &rect ) const;

        static void Union( const wxRect2DInt &src1 , const wxRect2DInt &src2 , wxRect2DInt *dest );
        void Union( const wxRect2DInt &otherRect ) { Union( *this , otherRect , this ); }
        void Union( const wxPoint2DInt &pt );
        inline wxRect2DInt CreateUnion( const wxRect2DInt &otherRect ) const { wxRect2DInt result; Union( *this , otherRect , &result); return result; }

        inline void Scale( wxInt32 f ) { m_x *= f; m_y *= f; m_width *= f; m_height *= f;}
        inline void Scale( wxInt32 num , wxInt32 denum )
            { m_x *= ((wxInt32)num)/((wxInt32)denum); m_y *= ((wxInt32)num)/((wxInt32)denum);
                m_width *= ((wxInt32)num)/((wxInt32)denum); m_height *= ((wxInt32)num)/((wxInt32)denum);}

       bool operator == (const wxRect2DInt& rect) const;
       bool operator != (const wxRect2DInt& rect) const;


       void WriteTo( wxDataOutputStream &stream ) const;
       void ReadFrom( wxDataInputStream &stream );


       wxInt32 m_x;
       wxInt32 m_y;
       wxInt32 m_width;
       wxInt32 m_height;
};

inline wxRect2DInt::wxRect2DInt( const wxPoint2DInt &a , const wxPoint2DInt &b)
{
    m_x = wxMin( a.m_x , b.m_x );
    m_y = wxMin( a.m_y , b.m_y );
    m_width = abs( a.m_x - b.m_x );
    m_height = abs( a.m_y - b.m_y );
}

inline wxRect2DInt::wxRect2DInt( const wxPoint2DInt& pos, const wxSize& size)
{
    m_x = pos.m_x;
    m_y = pos.m_y;
    m_width = size.x;
    m_height = size.y;
}

inline bool wxRect2DInt::operator == (const wxRect2DInt& rect) const
{
    return (m_x==rect.m_x && m_y==rect.m_y &&
            m_width==rect.m_width && m_height==rect.m_height);
}

inline bool wxRect2DInt::operator != (const wxRect2DInt& rect) const
{
    return !(*this == rect);
}

class __attribute__ ((visibility("default"))) wxTransform2D
{
public :
    virtual ~wxTransform2D() { }
    virtual void Transform( wxPoint2DInt* pt )const = 0;
    virtual void Transform( wxRect2DInt* r ) const;
    virtual wxPoint2DInt Transform( const wxPoint2DInt &pt ) const;
    virtual wxRect2DInt Transform( const wxRect2DInt &r ) const ;

    virtual void InverseTransform( wxPoint2DInt* pt ) const = 0;
    virtual void InverseTransform( wxRect2DInt* r ) const ;
    virtual wxPoint2DInt InverseTransform( const wxPoint2DInt &pt ) const ;
    virtual wxRect2DInt InverseTransform( const wxRect2DInt &r ) const ;
};
# 18 "/usr/include/wx-3.1-unofficial/wx/affinematrix2dbase.h" 2

struct wxMatrix2D
{
    wxMatrix2D(wxDouble v11 = 1,
               wxDouble v12 = 0,
               wxDouble v21 = 0,
               wxDouble v22 = 1)
    {
        m_11 = v11; m_12 = v12;
        m_21 = v21; m_22 = v22;
    }

    wxDouble m_11, m_12, m_21, m_22;
};






class __attribute__ ((visibility("default"))) wxAffineMatrix2DBase
{
public:
    wxAffineMatrix2DBase() {}
    virtual ~wxAffineMatrix2DBase() {}


    virtual void Set(const wxMatrix2D& mat2D, const wxPoint2DDouble& tr) = 0;


    virtual void Get(wxMatrix2D* mat2D, wxPoint2DDouble* tr) const = 0;


    virtual void Concat(const wxAffineMatrix2DBase& t) = 0;


    virtual bool Invert() = 0;


    virtual bool IsIdentity() const = 0;


    virtual bool IsEqual(const wxAffineMatrix2DBase& t) const = 0;
    bool operator==(const wxAffineMatrix2DBase& t) const { return IsEqual(t); }
    bool operator!=(const wxAffineMatrix2DBase& t) const { return !IsEqual(t); }







    virtual void Translate(wxDouble dx, wxDouble dy) = 0;


    virtual void Scale(wxDouble xScale, wxDouble yScale) = 0;


    virtual void Rotate(wxDouble ccRadians) = 0;


    void Mirror(int direction = wxHORIZONTAL)
    {
        wxDouble x = (direction & wxHORIZONTAL) ? -1 : 1;
        wxDouble y = (direction & wxVERTICAL) ? -1 : 1;
        Scale(x, y);
    }



    wxPoint2DDouble TransformPoint(const wxPoint2DDouble& src) const
    {
        return DoTransformPoint(src);
    }

    void TransformPoint(wxDouble* x, wxDouble* y) const
    {
        if ( x && y ) {} else { do { if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/affinematrix2dbase.h", 95, __FUNCTION__, "\"x && y\"", "Can't be NULL"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); return; } struct wxDummyCheckStruct95;

        const wxPoint2DDouble dst = DoTransformPoint(wxPoint2DDouble(*x, *y));
        *x = dst.m_x;
        *y = dst.m_y;
    }


    wxPoint2DDouble TransformDistance(const wxPoint2DDouble& src) const
    {
        return DoTransformDistance(src);
    }

    void TransformDistance(wxDouble* dx, wxDouble* dy) const
    {
        if ( dx && dy ) {} else { do { if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/affinematrix2dbase.h", 110, __FUNCTION__, "\"dx && dy\"", "Can't be NULL"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); return; } struct wxDummyCheckStruct110;

        const wxPoint2DDouble
            dst = DoTransformDistance(wxPoint2DDouble(*dx, *dy));
        *dx = dst.m_x;
        *dy = dst.m_y;
    }

protected:
    virtual
        wxPoint2DDouble DoTransformPoint(const wxPoint2DDouble& p) const = 0;
    virtual
        wxPoint2DDouble DoTransformDistance(const wxPoint2DDouble& p) const = 0;
};
# 18 "/usr/include/wx-3.1-unofficial/wx/affinematrix2d.h" 2



class __attribute__ ((visibility("default"))) wxAffineMatrix2D : public wxAffineMatrix2DBase
{
public:
    wxAffineMatrix2D() : m_11(1), m_12(0),
                         m_21(0), m_22(1),
                         m_tx(0), m_ty(0)
    {
    }


    virtual void Set(const wxMatrix2D& mat2D, const wxPoint2DDouble& tr) override;
    virtual void Get(wxMatrix2D* mat2D, wxPoint2DDouble* tr) const override;
    virtual void Concat(const wxAffineMatrix2DBase& t) override;
    virtual bool Invert() override;
    virtual bool IsIdentity() const override;
    virtual bool IsEqual(const wxAffineMatrix2DBase& t) const override;
    virtual void Translate(wxDouble dx, wxDouble dy) override;
    virtual void Scale(wxDouble xScale, wxDouble yScale) override;
    virtual void Rotate(wxDouble cRadians) override;

protected:
    virtual wxPoint2DDouble DoTransformPoint(const wxPoint2DDouble& p) const override;
    virtual wxPoint2DDouble DoTransformDistance(const wxPoint2DDouble& p) const override;

private:
    wxDouble m_11, m_12, m_21, m_22, m_tx, m_ty;
};
# 32 "/usr/include/wx-3.1-unofficial/wx/dc.h" 2



class wxDC;
class wxClientDC;
class wxPaintDC;
class wxWindowDC;
class wxScreenDC;
class wxMemoryDC;
class wxPrinterDC;
class wxPrintData;
class wxWindow;


class wxGraphicsContext;



enum wxRasterOperationMode
{
    wxCLEAR,
    wxXOR,
    wxINVERT,
    wxOR_REVERSE,
    wxAND_REVERSE,
    wxCOPY,
    wxAND,
    wxAND_INVERT,
    wxNO_OP,
    wxNOR,
    wxEQUIV,
    wxSRC_INVERT,
    wxOR_INVERT,
    wxNAND,
    wxOR,
    wxSET
# 102 "/usr/include/wx-3.1-unofficial/wx/dc.h"
};


enum wxFloodFillStyle
{
    wxFLOOD_SURFACE = 1,
    wxFLOOD_BORDER
};


enum wxMappingMode
{
    wxMM_TEXT = 1,
    wxMM_METRIC,
    wxMM_LOMETRIC,
    wxMM_TWIPS,
    wxMM_POINTS
};


struct wxFontMetrics
{
    wxFontMetrics()
    {
        height =
        ascent =
        descent =
        internalLeading =
        externalLeading =
        averageWidth = 0;
    }

    int height,
        ascent,
        descent,
        internalLeading,
        externalLeading,
        averageWidth;
};
# 211 "/usr/include/wx-3.1-unofficial/wx/dc.h"
class wxDCImpl;

class __attribute__ ((visibility("default"))) wxDCFactory
{
public:
    wxDCFactory() {}
    virtual ~wxDCFactory() {}

    virtual wxDCImpl* CreateWindowDC( wxWindowDC *owner, wxWindow *window ) = 0;
    virtual wxDCImpl* CreateClientDC( wxClientDC *owner, wxWindow *window ) = 0;
    virtual wxDCImpl* CreatePaintDC( wxPaintDC *owner, wxWindow *window ) = 0;
    virtual wxDCImpl* CreateMemoryDC( wxMemoryDC *owner ) = 0;
    virtual wxDCImpl* CreateMemoryDC( wxMemoryDC *owner, wxBitmap &bitmap ) = 0;
    virtual wxDCImpl* CreateMemoryDC( wxMemoryDC *owner, wxDC *dc ) = 0;
    virtual wxDCImpl* CreateScreenDC( wxScreenDC *owner ) = 0;

    virtual wxDCImpl* CreatePrinterDC( wxPrinterDC *owner, const wxPrintData &data ) = 0;


    static void Set(wxDCFactory *factory);
    static wxDCFactory *Get();

private:
    static wxDCFactory *m_factory;
};





class __attribute__ ((visibility("default"))) wxNativeDCFactory: public wxDCFactory
{
public:
    wxNativeDCFactory() {}

    virtual wxDCImpl* CreateWindowDC( wxWindowDC *owner, wxWindow *window ) override;
    virtual wxDCImpl* CreateClientDC( wxClientDC *owner, wxWindow *window ) override;
    virtual wxDCImpl* CreatePaintDC( wxPaintDC *owner, wxWindow *window ) override;
    virtual wxDCImpl* CreateMemoryDC( wxMemoryDC *owner ) override;
    virtual wxDCImpl* CreateMemoryDC( wxMemoryDC *owner, wxBitmap &bitmap ) override;
    virtual wxDCImpl* CreateMemoryDC( wxMemoryDC *owner, wxDC *dc ) override;
    virtual wxDCImpl* CreateScreenDC( wxScreenDC *owner ) override;

    virtual wxDCImpl* CreatePrinterDC( wxPrinterDC *owner, const wxPrintData &data ) override;

};





class __attribute__ ((visibility("default"))) wxDCImpl: public wxObject
{
public:
    wxDCImpl( wxDC *owner );
    virtual ~wxDCImpl();

    wxDC *GetOwner() const { return m_owner; }

    wxWindow* GetWindow() const { return m_window; }

    void SetWindow(wxWindow* w) { m_window = w; }

    virtual bool IsOk() const { return m_ok; }



    virtual bool CanDrawBitmap() const = 0;
    virtual bool CanGetTextExtent() const = 0;


    virtual void* GetCairoContext() const
    {
        return 
# 284 "/usr/include/wx-3.1-unofficial/wx/dc.h" 3 4
              __null
# 284 "/usr/include/wx-3.1-unofficial/wx/dc.h"
                  ;
    }

    virtual void* GetHandle() const { return 
# 287 "/usr/include/wx-3.1-unofficial/wx/dc.h" 3 4
                                            __null
# 287 "/usr/include/wx-3.1-unofficial/wx/dc.h"
                                                ; }



    virtual void DoGetSize(int *width, int *height) const = 0;
    void GetSize(int *width, int *height) const
    {
        DoGetSize(width, height);
    }

    wxSize GetSize() const
    {
        int w, h;
        DoGetSize(&w, &h);
        return wxSize(w, h);
    }

    virtual void DoGetSizeMM(int* width, int* height) const = 0;

    virtual int GetDepth() const = 0;
    virtual wxSize GetPPI() const = 0;



    virtual void SetLayoutDirection(wxLayoutDirection ) { }
    virtual wxLayoutDirection GetLayoutDirection() const { return wxLayout_Default; }



    virtual bool StartDoc(const wxString& ) { return true; }
    virtual void EndDoc() { }

    virtual void StartPage() { }
    virtual void EndPage() { }


    virtual void Flush() { }


    virtual wxPoint DeviceToLogical(wxCoord x, wxCoord y) const;
    virtual wxPoint LogicalToDevice(wxCoord x, wxCoord y) const;
    virtual wxSize DeviceToLogicalRel(int x, int y) const;
    virtual wxSize LogicalToDeviceRel(int x, int y) const;



    virtual void CalcBoundingBox(wxCoord x, wxCoord y)
    {

      wxPoint ptDev = LogicalToDevice(x, y);
      x = ptDev.x;
      y = ptDev.y;
      if ( m_isBBoxValid )
      {
         if ( x < m_minX ) m_minX = x;
         if ( y < m_minY ) m_minY = y;
         if ( x > m_maxX ) m_maxX = x;
         if ( y > m_maxY ) m_maxY = y;
      }
      else
      {
         m_isBBoxValid = true;

         m_minX = x;
         m_minY = y;
         m_maxX = x;
         m_maxY = y;
      }
    }
    void ResetBoundingBox()
    {
        m_isBBoxValid = false;

        m_minX = m_maxX = m_minY = m_maxY = 0;
    }


    wxCoord MinX() const { return m_isBBoxValid ? DeviceToLogical(m_minX, m_minY).x : 0; }
    wxCoord MaxX() const { return m_isBBoxValid ? DeviceToLogical(m_maxX, m_maxY).x : 0; }
    wxCoord MinY() const { return m_isBBoxValid ? DeviceToLogical(m_minX, m_minY).y : 0; }
    wxCoord MaxY() const { return m_isBBoxValid ? DeviceToLogical(m_maxX, m_maxY).y : 0; }



    virtual void SetFont(const wxFont& font) = 0;
    virtual const wxFont& GetFont() const { return m_font; }

    virtual void SetPen(const wxPen& pen) = 0;
    virtual const wxPen& GetPen() const { return m_pen; }

    virtual void SetBrush(const wxBrush& brush) = 0;
    virtual const wxBrush& GetBrush() const { return m_brush; }

    virtual void SetBackground(const wxBrush& brush) = 0;
    virtual const wxBrush& GetBackground() const { return m_backgroundBrush; }

    virtual void SetBackgroundMode(int mode) = 0;
    virtual int GetBackgroundMode() const { return m_backgroundMode; }

    virtual void SetTextForeground(const wxColour& colour)
        { m_textForegroundColour = colour; }
    virtual const wxColour& GetTextForeground() const
        { return m_textForegroundColour; }

    virtual void SetTextBackground(const wxColour& colour)
        { m_textBackgroundColour = colour; }
    virtual const wxColour& GetTextBackground() const
        { return m_textBackgroundColour; }


    virtual void SetPalette(const wxPalette& palette) = 0;






    virtual void InheritAttributes(wxWindow *win);




    virtual void SetLogicalFunction(wxRasterOperationMode function) = 0;
    virtual wxRasterOperationMode GetLogicalFunction() const
                                      { return m_logicalFunction; }



    virtual wxCoord GetCharHeight() const = 0;
    virtual wxCoord GetCharWidth() const = 0;





    virtual void DoGetFontMetrics(int *height,
                                  int *ascent,
                                  int *descent,
                                  int *internalLeading,
                                  int *externalLeading,
                                  int *averageWidth) const;

    virtual void DoGetTextExtent(const wxString& string,
                                 wxCoord *x, wxCoord *y,
                                 wxCoord *descent = 
# 431 "/usr/include/wx-3.1-unofficial/wx/dc.h" 3 4
                                                   __null
# 431 "/usr/include/wx-3.1-unofficial/wx/dc.h"
                                                       ,
                                 wxCoord *externalLeading = 
# 432 "/usr/include/wx-3.1-unofficial/wx/dc.h" 3 4
                                                           __null
# 432 "/usr/include/wx-3.1-unofficial/wx/dc.h"
                                                               ,
                                 const wxFont *theFont = 
# 433 "/usr/include/wx-3.1-unofficial/wx/dc.h" 3 4
                                                        __null
# 433 "/usr/include/wx-3.1-unofficial/wx/dc.h"
                                                            ) const = 0;
    virtual void GetMultiLineTextExtent(const wxString& string,
                                        wxCoord *width,
                                        wxCoord *height,
                                        wxCoord *heightLine = 
# 437 "/usr/include/wx-3.1-unofficial/wx/dc.h" 3 4
                                                             __null
# 437 "/usr/include/wx-3.1-unofficial/wx/dc.h"
                                                                 ,
                                        const wxFont *font = 
# 438 "/usr/include/wx-3.1-unofficial/wx/dc.h" 3 4
                                                            __null
# 438 "/usr/include/wx-3.1-unofficial/wx/dc.h"
                                                                ) const;
    virtual bool DoGetPartialTextExtents(const wxString& text, wxArrayInt& widths) const;



    virtual void Clear() = 0;







    virtual void DoSetClippingRegion(wxCoord x, wxCoord y,
                                     wxCoord w, wxCoord h) = 0;


    virtual void DoSetDeviceClippingRegion(const wxRegion& region) = 0;






    virtual bool DoGetClippingRect(wxRect& rect) const;





    __attribute__((deprecated)) virtual void DoGetClippingBox(wxCoord *x, wxCoord *y, wxCoord *w, wxCoord *h) const


     ;


    virtual void DestroyClippingRegion() { ResetClipping(); }




    virtual wxCoord DeviceToLogicalX(wxCoord x) const;
    virtual wxCoord DeviceToLogicalY(wxCoord y) const;
    virtual wxCoord DeviceToLogicalXRel(wxCoord x) const;
    virtual wxCoord DeviceToLogicalYRel(wxCoord y) const;
    virtual wxCoord LogicalToDeviceX(wxCoord x) const;
    virtual wxCoord LogicalToDeviceY(wxCoord y) const;
    virtual wxCoord LogicalToDeviceXRel(wxCoord x) const;
    virtual wxCoord LogicalToDeviceYRel(wxCoord y) const;

    virtual void SetMapMode(wxMappingMode mode);
    virtual wxMappingMode GetMapMode() const { return m_mappingMode; }

    virtual void SetUserScale(double x, double y);
    virtual void GetUserScale(double *x, double *y) const
    {
        if ( x ) *x = m_userScaleX;
        if ( y ) *y = m_userScaleY;
    }

    virtual void SetLogicalScale(double x, double y);
    virtual void GetLogicalScale(double *x, double *y) const
    {
        if ( x ) *x = m_logicalScaleX;
        if ( y ) *y = m_logicalScaleY;
    }

    virtual void SetLogicalOrigin(wxCoord x, wxCoord y);
    virtual void DoGetLogicalOrigin(wxCoord *x, wxCoord *y) const
    {
        if ( x ) *x = m_logicalOriginX;
        if ( y ) *y = m_logicalOriginY;
    }

    virtual void SetDeviceOrigin(wxCoord x, wxCoord y);
    virtual void DoGetDeviceOrigin(wxCoord *x, wxCoord *y) const
    {
        if ( x ) *x = m_deviceOriginX;
        if ( y ) *y = m_deviceOriginY;
    }





    virtual bool CanUseTransformMatrix() const
        { return false; }
    virtual bool SetTransformMatrix(const wxAffineMatrix2D& )
        { return false; }
    virtual wxAffineMatrix2D GetTransformMatrix() const
        { return wxAffineMatrix2D(); }
    virtual void ResetTransformMatrix()
        { }


    virtual void SetDeviceLocalOrigin( wxCoord x, wxCoord y );

    virtual void ComputeScaleAndOrigin();


    virtual void SetAxisOrientation(bool xLeftRight, bool yBottomUp);

    virtual double GetContentScaleFactor() const { return m_contentScaleFactor; }
# 558 "/usr/include/wx-3.1-unofficial/wx/dc.h"
    virtual bool DoFloodFill(wxCoord x, wxCoord y, const wxColour& col,
                             wxFloodFillStyle style = wxFLOOD_SURFACE) = 0;

    virtual void DoGradientFillLinear(const wxRect& rect,
                                      const wxColour& initialColour,
                                      const wxColour& destColour,
                                      wxDirection nDirection = wxEAST);

    virtual void DoGradientFillConcentric(const wxRect& rect,
                                        const wxColour& initialColour,
                                        const wxColour& destColour,
                                        const wxPoint& circleCenter);

    virtual bool DoGetPixel(wxCoord x, wxCoord y, wxColour *col) const = 0;

    virtual void DoDrawPoint(wxCoord x, wxCoord y) = 0;
    virtual void DoDrawLine(wxCoord x1, wxCoord y1, wxCoord x2, wxCoord y2) = 0;

    virtual void DoDrawArc(wxCoord x1, wxCoord y1,
                           wxCoord x2, wxCoord y2,
                           wxCoord xc, wxCoord yc) = 0;
    virtual void DoDrawCheckMark(wxCoord x, wxCoord y,
                                 wxCoord width, wxCoord height);
    virtual void DoDrawEllipticArc(wxCoord x, wxCoord y, wxCoord w, wxCoord h,
                                   double sa, double ea) = 0;

    virtual void DoDrawRectangle(wxCoord x, wxCoord y, wxCoord width, wxCoord height) = 0;
    virtual void DoDrawRoundedRectangle(wxCoord x, wxCoord y,
                                        wxCoord width, wxCoord height,
                                        double radius) = 0;
    virtual void DoDrawEllipse(wxCoord x, wxCoord y,
                               wxCoord width, wxCoord height) = 0;

    virtual void DoCrossHair(wxCoord x, wxCoord y) = 0;

    virtual void DoDrawIcon(const wxIcon& icon, wxCoord x, wxCoord y) = 0;
    virtual void DoDrawBitmap(const wxBitmap &bmp, wxCoord x, wxCoord y,
                              bool useMask = false) = 0;

    virtual void DoDrawText(const wxString& text, wxCoord x, wxCoord y) = 0;
    virtual void DoDrawRotatedText(const wxString& text,
                                   wxCoord x, wxCoord y, double angle) = 0;

    virtual bool DoBlit(wxCoord xdest, wxCoord ydest,
                        wxCoord width, wxCoord height,
                        wxDC *source,
                        wxCoord xsrc, wxCoord ysrc,
                        wxRasterOperationMode rop = wxCOPY,
                        bool useMask = false,
                        wxCoord xsrcMask = wxDefaultCoord,
                        wxCoord ysrcMask = wxDefaultCoord) = 0;

    virtual bool DoStretchBlit(wxCoord xdest, wxCoord ydest,
                               wxCoord dstWidth, wxCoord dstHeight,
                               wxDC *source,
                               wxCoord xsrc, wxCoord ysrc,
                               wxCoord srcWidth, wxCoord srcHeight,
                               wxRasterOperationMode rop = wxCOPY,
                               bool useMask = false,
                               wxCoord xsrcMask = wxDefaultCoord,
                               wxCoord ysrcMask = wxDefaultCoord);

    virtual wxBitmap DoGetAsBitmap(const wxRect *) const
        { return wxNullBitmap; }


    virtual void DoDrawLines(int n, const wxPoint points[],
                             wxCoord xoffset, wxCoord yoffset ) = 0;
    virtual void DrawLines(const wxPointList *list,
                           wxCoord xoffset, wxCoord yoffset );

    virtual void DoDrawPolygon(int n, const wxPoint points[],
                           wxCoord xoffset, wxCoord yoffset,
                           wxPolygonFillMode fillStyle = wxODDEVEN_RULE) = 0;
    virtual void DoDrawPolyPolygon(int n, const int count[], const wxPoint points[],
                               wxCoord xoffset, wxCoord yoffset,
                               wxPolygonFillMode fillStyle);
    void DrawPolygon(const wxPointList *list,
                     wxCoord xoffset, wxCoord yoffset,
                     wxPolygonFillMode fillStyle );



    void DrawSpline(wxCoord x1, wxCoord y1,
                            wxCoord x2, wxCoord y2,
                            wxCoord x3, wxCoord y3);
    void DrawSpline(int n, const wxPoint points[]);
    void DrawSpline(const wxPointList *points) { DoDrawSpline(points); }

    virtual void DoDrawSpline(const wxPointList *points);





    virtual void DoSelect(const wxBitmap& )
       { }

    virtual const wxBitmap& GetSelectedBitmap() const
        { return wxNullBitmap; }
    virtual wxBitmap& GetSelectedBitmap()
        { return wxNullBitmap; }




    virtual wxRect GetPaperRect() const
        { int w = 0; int h = 0; DoGetSize( &w, &h ); return wxRect(0,0,w,h); }

    virtual int GetResolution() const
        { return -1; }


    virtual wxGraphicsContext* GetGraphicsContext() const
        { return 
# 672 "/usr/include/wx-3.1-unofficial/wx/dc.h" 3 4
                __null
# 672 "/usr/include/wx-3.1-unofficial/wx/dc.h"
                    ; }
    virtual void SetGraphicsContext( wxGraphicsContext* )
        {}


private:
    wxDC *m_owner;

protected:




    void ResetClipping()
    {
        m_clipping = false;

        m_clipX1 = m_clipX2 = m_clipY1 = m_clipY2 = 0;
    }




    static float GetFontPointSizeAdjustment(float dpi);







    double GetMMToPXx() const;
    double GetMMToPXy() const;



    wxWindow *m_window;


    bool m_colour:1;
    bool m_ok:1;
    bool m_clipping:1;
    bool m_isInteractive:1;
    bool m_isBBoxValid:1;



    wxCoord m_logicalOriginX, m_logicalOriginY;
    wxCoord m_deviceOriginX, m_deviceOriginY;

    wxCoord m_deviceLocalOriginX, m_deviceLocalOriginY;





    double m_logicalScaleX, m_logicalScaleY;
    double m_userScaleX, m_userScaleY;
    double m_scaleX, m_scaleY;

    int m_signX, m_signY;

    double m_contentScaleFactor;





    mutable double m_mm_to_pix_x,
                   m_mm_to_pix_y;


    wxCoord m_minX, m_minY, m_maxX, m_maxY;
    wxCoord m_clipX1, m_clipY1, m_clipX2, m_clipY2;

    wxRasterOperationMode m_logicalFunction;
    int m_backgroundMode;
    wxMappingMode m_mappingMode;

    wxPen m_pen;
    wxBrush m_brush;
    wxBrush m_backgroundBrush;
    wxColour m_textForegroundColour;
    wxColour m_textBackgroundColour;
    wxFont m_font;


    wxPalette m_palette;
    bool m_hasCustomPalette;


private:

    wxRect GetLogicalArea() const;

    public:
# 767 "/usr/include/wx-3.1-unofficial/wx/dc.h"
#pragma GCC diagnostic push
# 767 "/usr/include/wx-3.1-unofficial/wx/dc.h"
   
# 767 "/usr/include/wx-3.1-unofficial/wx/dc.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 767 "/usr/include/wx-3.1-unofficial/wx/dc.h"
    virtual wxClassInfo *GetClassInfo() const;
# 767 "/usr/include/wx-3.1-unofficial/wx/dc.h"
#pragma GCC diagnostic pop
# 767 "/usr/include/wx-3.1-unofficial/wx/dc.h"
    static wxClassInfo ms_classInfo;
};


class __attribute__ ((visibility("default"))) wxDC : public wxObject
{
public:

    void CopyAttributes(const wxDC& dc);

    virtual ~wxDC() { delete m_pimpl; }

    wxDCImpl *GetImpl()
        { return m_pimpl; }
    const wxDCImpl *GetImpl() const
        { return m_pimpl; }

    wxWindow *GetWindow() const
        { return m_pimpl->GetWindow(); }

    void *GetHandle() const
        { return m_pimpl->GetHandle(); }

    bool IsOk() const
        { return m_pimpl && m_pimpl->IsOk(); }



    bool CanDrawBitmap() const
        { return m_pimpl->CanDrawBitmap(); }
    bool CanGetTextExtent() const
        { return m_pimpl->CanGetTextExtent(); }



    void GetSize(int *width, int *height) const
        { m_pimpl->DoGetSize(width, height); }
    wxSize GetSize() const
        { return m_pimpl->GetSize(); }

    void GetSizeMM(int* width, int* height) const
        { m_pimpl->DoGetSizeMM(width, height); }
    wxSize GetSizeMM() const
    {
        int w, h;
        m_pimpl->DoGetSizeMM(&w, &h);
        return wxSize(w, h);
    }

    int GetDepth() const
        { return m_pimpl->GetDepth(); }
    wxSize GetPPI() const
        { return m_pimpl->GetPPI(); }

    virtual int GetResolution() const
        { return m_pimpl->GetResolution(); }

    double GetContentScaleFactor() const
        { return m_pimpl->GetContentScaleFactor(); }



    void SetLayoutDirection(wxLayoutDirection dir)
        { m_pimpl->SetLayoutDirection( dir ); }
    wxLayoutDirection GetLayoutDirection() const
        { return m_pimpl->GetLayoutDirection(); }



    bool StartDoc(const wxString& message)
        { return m_pimpl->StartDoc(message); }
    void EndDoc()
        { m_pimpl->EndDoc(); }

    void StartPage()
        { m_pimpl->StartPage(); }
    void EndPage()
        { m_pimpl->EndPage(); }



    void CalcBoundingBox(wxCoord x, wxCoord y)
        { m_pimpl->CalcBoundingBox(x,y); }
    void ResetBoundingBox()
        { m_pimpl->ResetBoundingBox(); }

    wxCoord MinX() const
        { return m_pimpl->MinX(); }
    wxCoord MaxX() const
        { return m_pimpl->MaxX(); }
    wxCoord MinY() const
        { return m_pimpl->MinY(); }
    wxCoord MaxY() const
        { return m_pimpl->MaxY(); }



    void SetFont(const wxFont& font)
        { m_pimpl->SetFont( font ); }
    const wxFont& GetFont() const
        { return m_pimpl->GetFont(); }

    void SetPen(const wxPen& pen)
        { m_pimpl->SetPen( pen ); }
    const wxPen& GetPen() const
        { return m_pimpl->GetPen(); }

    void SetBrush(const wxBrush& brush)
        { m_pimpl->SetBrush( brush ); }
    const wxBrush& GetBrush() const
        { return m_pimpl->GetBrush(); }

    void SetBackground(const wxBrush& brush)
        { m_pimpl->SetBackground( brush ); }
    const wxBrush& GetBackground() const
        { return m_pimpl->GetBackground(); }

    void SetBackgroundMode(int mode)
        { m_pimpl->SetBackgroundMode( mode ); }
    int GetBackgroundMode() const
        { return m_pimpl->GetBackgroundMode(); }

    void SetTextForeground(const wxColour& colour)
        { m_pimpl->SetTextForeground(colour); }
    const wxColour& GetTextForeground() const
        { return m_pimpl->GetTextForeground(); }

    void SetTextBackground(const wxColour& colour)
        { m_pimpl->SetTextBackground(colour); }
    const wxColour& GetTextBackground() const
        { return m_pimpl->GetTextBackground(); }


    void SetPalette(const wxPalette& palette)
        { m_pimpl->SetPalette(palette); }




    void SetLogicalFunction(wxRasterOperationMode function)
        { m_pimpl->SetLogicalFunction(function); }
    wxRasterOperationMode GetLogicalFunction() const
        { return m_pimpl->GetLogicalFunction(); }



    wxCoord GetCharHeight() const
        { return m_pimpl->GetCharHeight(); }
    wxCoord GetCharWidth() const
        { return m_pimpl->GetCharWidth(); }

    wxFontMetrics GetFontMetrics() const
    {
        wxFontMetrics fm;
        m_pimpl->DoGetFontMetrics(&fm.height, &fm.ascent, &fm.descent,
                                  &fm.internalLeading, &fm.externalLeading,
                                  &fm.averageWidth);
        return fm;
    }

    void GetTextExtent(const wxString& string,
                       wxCoord *x, wxCoord *y,
                       wxCoord *descent = 
# 929 "/usr/include/wx-3.1-unofficial/wx/dc.h" 3 4
                                         __null
# 929 "/usr/include/wx-3.1-unofficial/wx/dc.h"
                                             ,
                       wxCoord *externalLeading = 
# 930 "/usr/include/wx-3.1-unofficial/wx/dc.h" 3 4
                                                 __null
# 930 "/usr/include/wx-3.1-unofficial/wx/dc.h"
                                                     ,
                       const wxFont *theFont = 
# 931 "/usr/include/wx-3.1-unofficial/wx/dc.h" 3 4
                                              __null
# 931 "/usr/include/wx-3.1-unofficial/wx/dc.h"
                                                  ) const
        { m_pimpl->DoGetTextExtent(string, x, y, descent, externalLeading, theFont); }

    wxSize GetTextExtent(const wxString& string) const
    {
        wxCoord w, h;
        m_pimpl->DoGetTextExtent(string, &w, &h);
        return wxSize(w, h);
    }

    void GetMultiLineTextExtent(const wxString& string,
                                        wxCoord *width,
                                        wxCoord *height,
                                        wxCoord *heightLine = 
# 944 "/usr/include/wx-3.1-unofficial/wx/dc.h" 3 4
                                                             __null
# 944 "/usr/include/wx-3.1-unofficial/wx/dc.h"
                                                                 ,
                                        const wxFont *font = 
# 945 "/usr/include/wx-3.1-unofficial/wx/dc.h" 3 4
                                                            __null
# 945 "/usr/include/wx-3.1-unofficial/wx/dc.h"
                                                                ) const
        { m_pimpl->GetMultiLineTextExtent( string, width, height, heightLine, font ); }

    wxSize GetMultiLineTextExtent(const wxString& string) const
    {
        wxCoord w, h;
        m_pimpl->GetMultiLineTextExtent(string, &w, &h);
        return wxSize(w, h);
    }

    bool GetPartialTextExtents(const wxString& text, wxArrayInt& widths) const
        { return m_pimpl->DoGetPartialTextExtents(text, widths); }



    void Clear()
        { m_pimpl->Clear(); }



    void SetClippingRegion(wxCoord x, wxCoord y, wxCoord width, wxCoord height)
        { m_pimpl->DoSetClippingRegion(x, y, width, height); }
    void SetClippingRegion(const wxPoint& pt, const wxSize& sz)
        { m_pimpl->DoSetClippingRegion(pt.x, pt.y, sz.x, sz.y); }
    void SetClippingRegion(const wxRect& rect)
        { m_pimpl->DoSetClippingRegion(rect.x, rect.y, rect.width, rect.height); }



    void SetDeviceClippingRegion(const wxRegion& region)
        { m_pimpl->DoSetDeviceClippingRegion(region); }
# 984 "/usr/include/wx-3.1-unofficial/wx/dc.h"
    __attribute__((deprecated)) void SetClippingRegion(const wxRegion& region) { SetDeviceClippingRegion(region); }


    void DestroyClippingRegion()
        { m_pimpl->DestroyClippingRegion(); }

    bool GetClippingBox(wxCoord *x, wxCoord *y, wxCoord *w, wxCoord *h) const
    {
        wxRect r;
        const bool clipping = m_pimpl->DoGetClippingRect(r);
        if ( x )
            *x = r.x;
        if ( y )
            *y = r.y;
        if ( w )
            *w = r.width;
        if ( h )
            *h = r.height;
        return clipping;
    }
    bool GetClippingBox(wxRect& rect) const
        { return m_pimpl->DoGetClippingRect(rect); }



    wxCoord DeviceToLogicalX(wxCoord x) const
        { return m_pimpl->DeviceToLogicalX(x); }
    wxCoord DeviceToLogicalY(wxCoord y) const
        { return m_pimpl->DeviceToLogicalY(y); }
    wxCoord DeviceToLogicalXRel(wxCoord x) const
        { return m_pimpl->DeviceToLogicalXRel(x); }
    wxCoord DeviceToLogicalYRel(wxCoord y) const
        { return m_pimpl->DeviceToLogicalYRel(y); }
    wxPoint DeviceToLogical(const wxPoint& pt) const
        { return m_pimpl->DeviceToLogical(pt.x, pt.y); }
    wxPoint DeviceToLogical(wxCoord x, wxCoord y) const
        { return m_pimpl->DeviceToLogical(x, y); }
    wxSize DeviceToLogicalRel(const wxSize& dim) const
        { return m_pimpl->DeviceToLogicalRel(dim.x, dim.y); }
    wxSize DeviceToLogicalRel(int x, int y) const
        { return m_pimpl->DeviceToLogicalRel(x, y); }
    wxCoord LogicalToDeviceX(wxCoord x) const
        { return m_pimpl->LogicalToDeviceX(x); }
    wxCoord LogicalToDeviceY(wxCoord y) const
        { return m_pimpl->LogicalToDeviceY(y); }
    wxCoord LogicalToDeviceXRel(wxCoord x) const
        { return m_pimpl->LogicalToDeviceXRel(x); }
    wxCoord LogicalToDeviceYRel(wxCoord y) const
        { return m_pimpl->LogicalToDeviceYRel(y); }
    wxPoint LogicalToDevice(const wxPoint& pt) const
        { return m_pimpl->LogicalToDevice(pt.x, pt.y); }
    wxPoint LogicalToDevice(wxCoord x, wxCoord y) const
        { return m_pimpl->LogicalToDevice(x, y); }
    wxSize LogicalToDeviceRel(const wxSize& dim) const
        { return m_pimpl->LogicalToDeviceRel(dim.x, dim.y); }
    wxSize LogicalToDeviceRel(int x, int y) const
        { return m_pimpl->LogicalToDeviceRel(x, y); }

    void SetMapMode(wxMappingMode mode)
        { m_pimpl->SetMapMode(mode); }
    wxMappingMode GetMapMode() const
        { return m_pimpl->GetMapMode(); }

    void SetUserScale(double x, double y)
        { m_pimpl->SetUserScale(x,y); }
    void GetUserScale(double *x, double *y) const
        { m_pimpl->GetUserScale( x, y ); }

    void SetLogicalScale(double x, double y)
        { m_pimpl->SetLogicalScale( x, y ); }
    void GetLogicalScale(double *x, double *y) const
        { m_pimpl->GetLogicalScale( x, y ); }

    void SetLogicalOrigin(wxCoord x, wxCoord y)
        { m_pimpl->SetLogicalOrigin(x,y); }
    void GetLogicalOrigin(wxCoord *x, wxCoord *y) const
        { m_pimpl->DoGetLogicalOrigin(x, y); }
    wxPoint GetLogicalOrigin() const
        { wxCoord x, y; m_pimpl->DoGetLogicalOrigin(&x, &y); return wxPoint(x, y); }

    void SetDeviceOrigin(wxCoord x, wxCoord y)
        { m_pimpl->SetDeviceOrigin( x, y); }
    void GetDeviceOrigin(wxCoord *x, wxCoord *y) const
        { m_pimpl->DoGetDeviceOrigin(x, y); }
    wxPoint GetDeviceOrigin() const
        { wxCoord x, y; m_pimpl->DoGetDeviceOrigin(&x, &y); return wxPoint(x, y); }

    void SetAxisOrientation(bool xLeftRight, bool yBottomUp)
        { m_pimpl->SetAxisOrientation(xLeftRight, yBottomUp); }


    bool CanUseTransformMatrix() const
        { return m_pimpl->CanUseTransformMatrix(); }

    bool SetTransformMatrix(const wxAffineMatrix2D &matrix)
        { return m_pimpl->SetTransformMatrix(matrix); }

    wxAffineMatrix2D GetTransformMatrix() const
        { return m_pimpl->GetTransformMatrix(); }

    void ResetTransformMatrix()
        { m_pimpl->ResetTransformMatrix(); }



    void SetDeviceLocalOrigin( wxCoord x, wxCoord y )
        { m_pimpl->SetDeviceLocalOrigin( x, y ); }





    bool FloodFill(wxCoord x, wxCoord y, const wxColour& col,
                   wxFloodFillStyle style = wxFLOOD_SURFACE)
        { return m_pimpl->DoFloodFill(x, y, col, style); }
    bool FloodFill(const wxPoint& pt, const wxColour& col,
                   wxFloodFillStyle style = wxFLOOD_SURFACE)
        { return m_pimpl->DoFloodFill(pt.x, pt.y, col, style); }



    void GradientFillConcentric(const wxRect& rect,
                                const wxColour& initialColour,
                                const wxColour& destColour)
        { m_pimpl->DoGradientFillConcentric( rect, initialColour, destColour,
                                             wxPoint(rect.GetWidth() / 2,
                                                     rect.GetHeight() / 2)); }

    void GradientFillConcentric(const wxRect& rect,
                                const wxColour& initialColour,
                                const wxColour& destColour,
                                const wxPoint& circleCenter)
        { m_pimpl->DoGradientFillConcentric(rect, initialColour, destColour, circleCenter); }


    void GradientFillLinear(const wxRect& rect,
                            const wxColour& initialColour,
                            const wxColour& destColour,
                            wxDirection nDirection = wxEAST)
        { m_pimpl->DoGradientFillLinear(rect, initialColour, destColour, nDirection); }

    bool GetPixel(wxCoord x, wxCoord y, wxColour *col) const
        { return m_pimpl->DoGetPixel(x, y, col); }
    bool GetPixel(const wxPoint& pt, wxColour *col) const
        { return m_pimpl->DoGetPixel(pt.x, pt.y, col); }

    void DrawLine(wxCoord x1, wxCoord y1, wxCoord x2, wxCoord y2)
        { m_pimpl->DoDrawLine(x1, y1, x2, y2); }
    void DrawLine(const wxPoint& pt1, const wxPoint& pt2)
        { m_pimpl->DoDrawLine(pt1.x, pt1.y, pt2.x, pt2.y); }

    void CrossHair(wxCoord x, wxCoord y)
        { m_pimpl->DoCrossHair(x, y); }
    void CrossHair(const wxPoint& pt)
        { m_pimpl->DoCrossHair(pt.x, pt.y); }

    void DrawArc(wxCoord x1, wxCoord y1, wxCoord x2, wxCoord y2,
                 wxCoord xc, wxCoord yc)
        { m_pimpl->DoDrawArc(x1, y1, x2, y2, xc, yc); }
    void DrawArc(const wxPoint& pt1, const wxPoint& pt2, const wxPoint& centre)
        { m_pimpl->DoDrawArc(pt1.x, pt1.y, pt2.x, pt2.y, centre.x, centre.y); }

    void DrawCheckMark(wxCoord x, wxCoord y,
                       wxCoord width, wxCoord height)
        { m_pimpl->DoDrawCheckMark(x, y, width, height); }
    void DrawCheckMark(const wxRect& rect)
        { m_pimpl->DoDrawCheckMark(rect.x, rect.y, rect.width, rect.height); }

    void DrawEllipticArc(wxCoord x, wxCoord y, wxCoord w, wxCoord h,
                         double sa, double ea)
        { m_pimpl->DoDrawEllipticArc(x, y, w, h, sa, ea); }
    void DrawEllipticArc(const wxPoint& pt, const wxSize& sz,
                         double sa, double ea)
        { m_pimpl->DoDrawEllipticArc(pt.x, pt.y, sz.x, sz.y, sa, ea); }

    void DrawPoint(wxCoord x, wxCoord y)
        { m_pimpl->DoDrawPoint(x, y); }
    void DrawPoint(const wxPoint& pt)
        { m_pimpl->DoDrawPoint(pt.x, pt.y); }

    void DrawLines(int n, const wxPoint points[],
                   wxCoord xoffset = 0, wxCoord yoffset = 0)
        { m_pimpl->DoDrawLines(n, points, xoffset, yoffset); }
    void DrawLines(const wxPointList *list,
                   wxCoord xoffset = 0, wxCoord yoffset = 0)
        { m_pimpl->DrawLines( list, xoffset, yoffset ); }





    void DrawPolygon(int n, const wxPoint points[],
                     wxCoord xoffset = 0, wxCoord yoffset = 0,
                     wxPolygonFillMode fillStyle = wxODDEVEN_RULE)
        { m_pimpl->DoDrawPolygon(n, points, xoffset, yoffset, fillStyle); }
    void DrawPolygon(const wxPointList *list,
                     wxCoord xoffset = 0, wxCoord yoffset = 0,
                     wxPolygonFillMode fillStyle = wxODDEVEN_RULE)
        { m_pimpl->DrawPolygon( list, xoffset, yoffset, fillStyle ); }
    void DrawPolyPolygon(int n, const int count[], const wxPoint points[],
                         wxCoord xoffset = 0, wxCoord yoffset = 0,
                         wxPolygonFillMode fillStyle = wxODDEVEN_RULE)
        { m_pimpl->DoDrawPolyPolygon(n, count, points, xoffset, yoffset, fillStyle); }






    void DrawRectangle(wxCoord x, wxCoord y, wxCoord width, wxCoord height)
        { m_pimpl->DoDrawRectangle(x, y, width, height); }
    void DrawRectangle(const wxPoint& pt, const wxSize& sz)
        { m_pimpl->DoDrawRectangle(pt.x, pt.y, sz.x, sz.y); }
    void DrawRectangle(const wxRect& rect)
        { m_pimpl->DoDrawRectangle(rect.x, rect.y, rect.width, rect.height); }

    void DrawRoundedRectangle(wxCoord x, wxCoord y, wxCoord width, wxCoord height,
                              double radius)
        { m_pimpl->DoDrawRoundedRectangle(x, y, width, height, radius); }
    void DrawRoundedRectangle(const wxPoint& pt, const wxSize& sz,
                             double radius)
        { m_pimpl->DoDrawRoundedRectangle(pt.x, pt.y, sz.x, sz.y, radius); }
    void DrawRoundedRectangle(const wxRect& r, double radius)
        { m_pimpl->DoDrawRoundedRectangle(r.x, r.y, r.width, r.height, radius); }

    void DrawCircle(wxCoord x, wxCoord y, wxCoord radius)
        { m_pimpl->DoDrawEllipse(x - radius, y - radius, 2*radius, 2*radius); }
    void DrawCircle(const wxPoint& pt, wxCoord radius)
        { m_pimpl->DoDrawEllipse(pt.x - radius, pt.y - radius, 2*radius, 2*radius); }

    void DrawEllipse(wxCoord x, wxCoord y, wxCoord width, wxCoord height)
        { m_pimpl->DoDrawEllipse(x, y, width, height); }
    void DrawEllipse(const wxPoint& pt, const wxSize& sz)
        { m_pimpl->DoDrawEllipse(pt.x, pt.y, sz.x, sz.y); }
    void DrawEllipse(const wxRect& rect)
        { m_pimpl->DoDrawEllipse(rect.x, rect.y, rect.width, rect.height); }

    void DrawIcon(const wxIcon& icon, wxCoord x, wxCoord y)
        { m_pimpl->DoDrawIcon(icon, x, y); }
    void DrawIcon(const wxIcon& icon, const wxPoint& pt)
        { m_pimpl->DoDrawIcon(icon, pt.x, pt.y); }

    void DrawBitmap(const wxBitmap &bmp, wxCoord x, wxCoord y,
                    bool useMask = false)
        { m_pimpl->DoDrawBitmap(bmp, x, y, useMask); }
    void DrawBitmap(const wxBitmap &bmp, const wxPoint& pt,
                    bool useMask = false)
        { m_pimpl->DoDrawBitmap(bmp, pt.x, pt.y, useMask); }

    void DrawText(const wxString& text, wxCoord x, wxCoord y)
        { m_pimpl->DoDrawText(text, x, y); }
    void DrawText(const wxString& text, const wxPoint& pt)
        { m_pimpl->DoDrawText(text, pt.x, pt.y); }

    void DrawRotatedText(const wxString& text, wxCoord x, wxCoord y, double angle)
        { m_pimpl->DoDrawRotatedText(text, x, y, angle); }
    void DrawRotatedText(const wxString& text, const wxPoint& pt, double angle)
        { m_pimpl->DoDrawRotatedText(text, pt.x, pt.y, angle); }





    void DrawLabel(const wxString& text,
                           const wxBitmap& image,
                           const wxRect& rect,
                           int alignment = wxALIGN_LEFT | wxALIGN_TOP,
                           int indexAccel = -1,
                           wxRect *rectBounding = 
# 1252 "/usr/include/wx-3.1-unofficial/wx/dc.h" 3 4
                                                 __null
# 1252 "/usr/include/wx-3.1-unofficial/wx/dc.h"
                                                     );

    void DrawLabel(const wxString& text, const wxRect& rect,
                   int alignment = wxALIGN_LEFT | wxALIGN_TOP,
                   int indexAccel = -1)
        { DrawLabel(text, wxNullBitmap, rect, alignment, indexAccel); }

    bool Blit(wxCoord xdest, wxCoord ydest, wxCoord width, wxCoord height,
              wxDC *source, wxCoord xsrc, wxCoord ysrc,
              wxRasterOperationMode rop = wxCOPY, bool useMask = false,
              wxCoord xsrcMask = wxDefaultCoord, wxCoord ysrcMask = wxDefaultCoord)
    {
        return m_pimpl->DoBlit(xdest, ydest, width, height,
                      source, xsrc, ysrc, rop, useMask, xsrcMask, ysrcMask);
    }
    bool Blit(const wxPoint& destPt, const wxSize& sz,
              wxDC *source, const wxPoint& srcPt,
              wxRasterOperationMode rop = wxCOPY, bool useMask = false,
              const wxPoint& srcPtMask = wxDefaultPosition)
    {
        return m_pimpl->DoBlit(destPt.x, destPt.y, sz.x, sz.y,
                      source, srcPt.x, srcPt.y, rop, useMask, srcPtMask.x, srcPtMask.y);
    }

    bool StretchBlit(wxCoord dstX, wxCoord dstY,
                     wxCoord dstWidth, wxCoord dstHeight,
                     wxDC *source,
                     wxCoord srcX, wxCoord srcY,
                     wxCoord srcWidth, wxCoord srcHeight,
                     wxRasterOperationMode rop = wxCOPY, bool useMask = false,
                     wxCoord srcMaskX = wxDefaultCoord, wxCoord srcMaskY = wxDefaultCoord)
    {
        return m_pimpl->DoStretchBlit(dstX, dstY, dstWidth, dstHeight,
                      source, srcX, srcY, srcWidth, srcHeight, rop, useMask, srcMaskX, srcMaskY);
    }
    bool StretchBlit(const wxPoint& dstPt, const wxSize& dstSize,
                     wxDC *source, const wxPoint& srcPt, const wxSize& srcSize,
                     wxRasterOperationMode rop = wxCOPY, bool useMask = false,
                     const wxPoint& srcMaskPt = wxDefaultPosition)
    {
        return m_pimpl->DoStretchBlit(dstPt.x, dstPt.y, dstSize.x, dstSize.y,
                      source, srcPt.x, srcPt.y, srcSize.x, srcSize.y, rop, useMask, srcMaskPt.x, srcMaskPt.y);
    }

    wxBitmap GetAsBitmap(const wxRect *subrect = (const wxRect *) 
# 1296 "/usr/include/wx-3.1-unofficial/wx/dc.h" 3 4
                                                                 __null
# 1296 "/usr/include/wx-3.1-unofficial/wx/dc.h"
                                                                     ) const
    {
        return m_pimpl->DoGetAsBitmap(subrect);
    }


    void DrawSpline(wxCoord x1, wxCoord y1,
                    wxCoord x2, wxCoord y2,
                    wxCoord x3, wxCoord y3)
        { m_pimpl->DrawSpline(x1,y1,x2,y2,x3,y3); }
    void DrawSpline(int n, const wxPoint points[])
        { m_pimpl->DrawSpline(n,points); }
    void DrawSpline(const wxPointList *points)
        { m_pimpl->DrawSpline(points); }
# 1375 "/usr/include/wx-3.1-unofficial/wx/dc.h"
    virtual wxGraphicsContext* GetGraphicsContext() const
    {
        return m_pimpl->GetGraphicsContext();
    }
    virtual void SetGraphicsContext( wxGraphicsContext* ctx )
    {
        m_pimpl->SetGraphicsContext(ctx);
    }


protected:

    wxDC(wxDCImpl *pimpl) : m_pimpl(pimpl) { }

    wxDCImpl * const m_pimpl;

    void SetWindow(wxWindow* w)
        { return m_pimpl->SetWindow(w); }

private:
    public:
# 1395 "/usr/include/wx-3.1-unofficial/wx/dc.h"
#pragma GCC diagnostic push
# 1395 "/usr/include/wx-3.1-unofficial/wx/dc.h"
   
# 1395 "/usr/include/wx-3.1-unofficial/wx/dc.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 1395 "/usr/include/wx-3.1-unofficial/wx/dc.h"
    virtual wxClassInfo *GetClassInfo() const;
# 1395 "/usr/include/wx-3.1-unofficial/wx/dc.h"
#pragma GCC diagnostic pop
# 1395 "/usr/include/wx-3.1-unofficial/wx/dc.h"
    static wxClassInfo ms_classInfo;
    private: wxDC(const wxDC&) = delete; wxDC& operator=(const wxDC&) = delete;
};






class __attribute__ ((visibility("default"))) wxDCTextColourChanger
{
public:
    wxDCTextColourChanger(wxDC& dc) : m_dc(dc), m_colFgOld() { }

    wxDCTextColourChanger(wxDC& dc, const wxColour& col) : m_dc(dc)
    {
        Set(col);
    }

    ~wxDCTextColourChanger()
    {
        if ( m_colFgOld.IsOk() )
            m_dc.SetTextForeground(m_colFgOld);
    }

    void Set(const wxColour& col)
    {
        if ( !m_colFgOld.IsOk() )
            m_colFgOld = m_dc.GetTextForeground();
        m_dc.SetTextForeground(col);
    }

private:
    wxDC& m_dc;

    wxColour m_colFgOld;

    private: wxDCTextColourChanger(const wxDCTextColourChanger&) = delete; wxDCTextColourChanger& operator=(const wxDCTextColourChanger&) = delete;
};






class __attribute__ ((visibility("default"))) wxDCTextBgColourChanger
{
public:
    wxDCTextBgColourChanger(wxDC& dc) : m_dc(dc) { }

    wxDCTextBgColourChanger(wxDC& dc, const wxColour& col) : m_dc(dc)
    {
        Set(col);
    }

    ~wxDCTextBgColourChanger()
    {
        if ( m_colBgOld.IsOk() )
            m_dc.SetTextBackground(m_colBgOld);
    }

    void Set(const wxColour& col)
    {
        if ( !m_colBgOld.IsOk() )
            m_colBgOld = m_dc.GetTextBackground();
        m_dc.SetTextBackground(col);
    }

private:
    wxDC& m_dc;

    wxColour m_colBgOld;

    private: wxDCTextBgColourChanger(const wxDCTextBgColourChanger&) = delete; wxDCTextBgColourChanger& operator=(const wxDCTextBgColourChanger&) = delete;
};






class __attribute__ ((visibility("default"))) wxDCTextBgModeChanger
{
public:
    wxDCTextBgModeChanger(wxDC& dc) : m_dc(dc), m_modeOld(wxBRUSHSTYLE_INVALID) { }

    wxDCTextBgModeChanger(wxDC& dc, int mode) : m_dc(dc)
    {
        Set(mode);
    }

    ~wxDCTextBgModeChanger()
    {
        if ( m_modeOld != wxBRUSHSTYLE_INVALID )
            m_dc.SetBackgroundMode(m_modeOld);
    }

    void Set(int mode)
    {
        if ( m_modeOld == wxBRUSHSTYLE_INVALID )
            m_modeOld = m_dc.GetBackgroundMode();
        m_dc.SetBackgroundMode(mode);
    }

private:
    wxDC& m_dc;

    int m_modeOld;

    private: wxDCTextBgModeChanger(const wxDCTextBgModeChanger&) = delete; wxDCTextBgModeChanger& operator=(const wxDCTextBgModeChanger&) = delete;
};






class __attribute__ ((visibility("default"))) wxDCPenChanger
{
public:
    wxDCPenChanger(wxDC& dc, const wxPen& pen) : m_dc(dc), m_penOld(dc.GetPen())
    {
        m_dc.SetPen(pen);
    }

    ~wxDCPenChanger()
    {
        if ( m_penOld.IsOk() )
            m_dc.SetPen(m_penOld);
    }

private:
    wxDC& m_dc;

    wxPen m_penOld;

    private: wxDCPenChanger(const wxDCPenChanger&) = delete; wxDCPenChanger& operator=(const wxDCPenChanger&) = delete;
};






class __attribute__ ((visibility("default"))) wxDCBrushChanger
{
public:
    wxDCBrushChanger(wxDC& dc, const wxBrush& brush) : m_dc(dc), m_brushOld(dc.GetBrush())
    {
        m_dc.SetBrush(brush);
    }

    ~wxDCBrushChanger()
    {
        if ( m_brushOld.IsOk() )
            m_dc.SetBrush(m_brushOld);
    }

private:
    wxDC& m_dc;

    wxBrush m_brushOld;

    private: wxDCBrushChanger(const wxDCBrushChanger&) = delete; wxDCBrushChanger& operator=(const wxDCBrushChanger&) = delete;
};






class __attribute__ ((visibility("default"))) wxDCClipper
{
public:
    wxDCClipper(wxDC& dc, const wxRegion& r) : m_dc(dc)
    {
        Init(r.GetBox());
    }
    wxDCClipper(wxDC& dc, const wxRect& r) : m_dc(dc)
    {
        Init(r);
    }
    wxDCClipper(wxDC& dc, wxCoord x, wxCoord y, wxCoord w, wxCoord h) : m_dc(dc)
    {
        Init(wxRect(x, y, w, h));
    }

    ~wxDCClipper()
    {
        m_dc.DestroyClippingRegion();
        if ( m_restoreOld )
            m_dc.SetClippingRegion(m_oldClipRect);
    }

private:

    void Init(const wxRect& r)
    {
        m_restoreOld = m_dc.GetClippingBox(m_oldClipRect);
        m_dc.SetClippingRegion(r);
    }

    wxDC& m_dc;
    wxRect m_oldClipRect;
    bool m_restoreOld;

    private: wxDCClipper(const wxDCClipper&) = delete; wxDCClipper& operator=(const wxDCClipper&) = delete;
};






class __attribute__ ((visibility("default"))) wxDCFontChanger
{
public:
    wxDCFontChanger(wxDC& dc)
        : m_dc(dc), m_fontOld()
    {
    }

    wxDCFontChanger(wxDC& dc, const wxFont& font)
        : m_dc(dc), m_fontOld(dc.GetFont())
    {
        m_dc.SetFont(font);
    }

    void Set(const wxFont& font)
    {
        if ( !m_fontOld.IsOk() )
            m_fontOld = m_dc.GetFont();
        m_dc.SetFont(font);
    }

    ~wxDCFontChanger()
    {
        if ( m_fontOld.IsOk() )
            m_dc.SetFont(m_fontOld);
    }

private:
    wxDC& m_dc;

    wxFont m_fontOld;

    private: wxDCFontChanger(const wxDCFontChanger&) = delete; wxDCFontChanger& operator=(const wxDCFontChanger&) = delete;
};
# 51 "/usr/include/wx-3.1-unofficial/wx/wx.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/dcclient.h" 1
# 18 "/usr/include/wx-3.1-unofficial/wx/dcclient.h"
class __attribute__ ((visibility("default"))) wxWindowDC : public wxDC
{
public:
    wxWindowDC(wxWindow *win);

protected:
    wxWindowDC(wxDCImpl *impl) : wxDC(impl) { }

private:
    public:
# 27 "/usr/include/wx-3.1-unofficial/wx/dcclient.h"
#pragma GCC diagnostic push
# 27 "/usr/include/wx-3.1-unofficial/wx/dcclient.h"
   
# 27 "/usr/include/wx-3.1-unofficial/wx/dcclient.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 27 "/usr/include/wx-3.1-unofficial/wx/dcclient.h"
    virtual wxClassInfo *GetClassInfo() const;
# 27 "/usr/include/wx-3.1-unofficial/wx/dcclient.h"
#pragma GCC diagnostic pop
# 27 "/usr/include/wx-3.1-unofficial/wx/dcclient.h"
    static wxClassInfo ms_classInfo;
};





class __attribute__ ((visibility("default"))) wxClientDC : public wxWindowDC
{
public:
    wxClientDC(wxWindow *win);

protected:
    wxClientDC(wxDCImpl *impl) : wxWindowDC(impl) { }

private:
    public:
# 43 "/usr/include/wx-3.1-unofficial/wx/dcclient.h"
#pragma GCC diagnostic push
# 43 "/usr/include/wx-3.1-unofficial/wx/dcclient.h"
   
# 43 "/usr/include/wx-3.1-unofficial/wx/dcclient.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 43 "/usr/include/wx-3.1-unofficial/wx/dcclient.h"
    virtual wxClassInfo *GetClassInfo() const;
# 43 "/usr/include/wx-3.1-unofficial/wx/dcclient.h"
#pragma GCC diagnostic pop
# 43 "/usr/include/wx-3.1-unofficial/wx/dcclient.h"
    static wxClassInfo ms_classInfo;
};





class __attribute__ ((visibility("default"))) wxPaintDC : public wxClientDC
{
public:
    wxPaintDC(wxWindow *win);

protected:
    wxPaintDC(wxDCImpl *impl) : wxClientDC(impl) { }

private:
    public:
# 59 "/usr/include/wx-3.1-unofficial/wx/dcclient.h"
#pragma GCC diagnostic push
# 59 "/usr/include/wx-3.1-unofficial/wx/dcclient.h"
   
# 59 "/usr/include/wx-3.1-unofficial/wx/dcclient.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 59 "/usr/include/wx-3.1-unofficial/wx/dcclient.h"
    virtual wxClassInfo *GetClassInfo() const;
# 59 "/usr/include/wx-3.1-unofficial/wx/dcclient.h"
#pragma GCC diagnostic pop
# 59 "/usr/include/wx-3.1-unofficial/wx/dcclient.h"
    static wxClassInfo ms_classInfo;
};
# 52 "/usr/include/wx-3.1-unofficial/wx/wx.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/dcmemory.h" 1
# 21 "/usr/include/wx-3.1-unofficial/wx/dcmemory.h"
class __attribute__ ((visibility("default"))) wxMemoryDC: public wxDC
{
public:
    wxMemoryDC();
    wxMemoryDC( wxBitmap& bitmap );
    wxMemoryDC( wxDC *dc );


    void SelectObject(wxBitmap& bmp);


    void SelectObjectAsSource(const wxBitmap& bmp);


    const wxBitmap& GetSelectedBitmap() const;
    wxBitmap& GetSelectedBitmap();

private:
    public:
# 39 "/usr/include/wx-3.1-unofficial/wx/dcmemory.h"
#pragma GCC diagnostic push
# 39 "/usr/include/wx-3.1-unofficial/wx/dcmemory.h"
   
# 39 "/usr/include/wx-3.1-unofficial/wx/dcmemory.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 39 "/usr/include/wx-3.1-unofficial/wx/dcmemory.h"
    virtual wxClassInfo *GetClassInfo() const;
# 39 "/usr/include/wx-3.1-unofficial/wx/dcmemory.h"
#pragma GCC diagnostic pop
# 39 "/usr/include/wx-3.1-unofficial/wx/dcmemory.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 53 "/usr/include/wx-3.1-unofficial/wx/wx.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/dcprint.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/dcprint.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/dcprint.h" 2
# 24 "/usr/include/wx-3.1-unofficial/wx/dcprint.h"
class __attribute__ ((visibility("default"))) wxPrinterDC : public wxDC
{
public:
    wxPrinterDC();
    wxPrinterDC(const wxPrintData& data);

    wxRect GetPaperRect() const;
    int GetResolution() const override;

protected:
    wxPrinterDC(wxDCImpl *impl) : wxDC(impl) { }

private:
    public:
# 37 "/usr/include/wx-3.1-unofficial/wx/dcprint.h"
#pragma GCC diagnostic push
# 37 "/usr/include/wx-3.1-unofficial/wx/dcprint.h"
   
# 37 "/usr/include/wx-3.1-unofficial/wx/dcprint.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 37 "/usr/include/wx-3.1-unofficial/wx/dcprint.h"
    virtual wxClassInfo *GetClassInfo() const;
# 37 "/usr/include/wx-3.1-unofficial/wx/dcprint.h"
#pragma GCC diagnostic pop
# 37 "/usr/include/wx-3.1-unofficial/wx/dcprint.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 54 "/usr/include/wx-3.1-unofficial/wx/wx.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/dcscreen.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/dcscreen.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/dcscreen.h" 2


class __attribute__ ((visibility("default"))) wxScreenDC : public wxDC
{
public:
    wxScreenDC();

    static bool StartDrawingOnTop(wxWindow * )
        { return true; }
    static bool StartDrawingOnTop(wxRect * = 
# 24 "/usr/include/wx-3.1-unofficial/wx/dcscreen.h" 3 4
                                                            __null
# 24 "/usr/include/wx-3.1-unofficial/wx/dcscreen.h"
                                                                )
        { return true; }
    static bool EndDrawingOnTop()
        { return true; }

private:
    public:
# 30 "/usr/include/wx-3.1-unofficial/wx/dcscreen.h"
#pragma GCC diagnostic push
# 30 "/usr/include/wx-3.1-unofficial/wx/dcscreen.h"
   
# 30 "/usr/include/wx-3.1-unofficial/wx/dcscreen.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 30 "/usr/include/wx-3.1-unofficial/wx/dcscreen.h"
    virtual wxClassInfo *GetClassInfo() const;
# 30 "/usr/include/wx-3.1-unofficial/wx/dcscreen.h"
#pragma GCC diagnostic pop
# 30 "/usr/include/wx-3.1-unofficial/wx/dcscreen.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 55 "/usr/include/wx-3.1-unofficial/wx/wx.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/button.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/button.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/button.h" 2



# 1 "/usr/include/wx-3.1-unofficial/wx/anybutton.h" 1
# 13 "/usr/include/wx-3.1-unofficial/wx/anybutton.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/anybutton.h" 2
# 51 "/usr/include/wx-3.1-unofficial/wx/anybutton.h"
class __attribute__ ((visibility("default"))) wxAnyButtonBase : public wxControl
{
public:
    wxAnyButtonBase() { }



    void SetBitmap(const wxBitmap& bitmap, wxDirection dir = wxLEFT)
    {
        SetBitmapLabel(bitmap);
        SetBitmapPosition(dir);
    }

    wxBitmap GetBitmap() const { return DoGetBitmap(State_Normal); }
# 74 "/usr/include/wx-3.1-unofficial/wx/anybutton.h"
    void SetBitmapLabel(const wxBitmap& bitmap)
        { DoSetBitmap(bitmap, State_Normal); }
    void SetBitmapPressed(const wxBitmap& bitmap)
        { DoSetBitmap(bitmap, State_Pressed); }
    void SetBitmapDisabled(const wxBitmap& bitmap)
        { DoSetBitmap(bitmap, State_Disabled); }
    void SetBitmapCurrent(const wxBitmap& bitmap)
        { DoSetBitmap(bitmap, State_Current); }
    void SetBitmapFocus(const wxBitmap& bitmap)
        { DoSetBitmap(bitmap, State_Focused); }

    wxBitmap GetBitmapLabel() const { return DoGetBitmap(State_Normal); }
    wxBitmap GetBitmapPressed() const { return DoGetBitmap(State_Pressed); }
    wxBitmap GetBitmapDisabled() const { return DoGetBitmap(State_Disabled); }
    wxBitmap GetBitmapCurrent() const { return DoGetBitmap(State_Current); }
    wxBitmap GetBitmapFocus() const { return DoGetBitmap(State_Focused); }



    void SetBitmapMargins(wxCoord x, wxCoord y) { DoSetBitmapMargins(x, y); }
    void SetBitmapMargins(const wxSize& sz) { DoSetBitmapMargins(sz.x, sz.y); }
    wxSize GetBitmapMargins() { return DoGetBitmapMargins(); }



    void SetBitmapPosition(wxDirection dir);





    virtual bool ShouldInheritColours() const override { return false; }
# 116 "/usr/include/wx-3.1-unofficial/wx/anybutton.h"
    wxBitmap GetBitmapSelected() const { return GetBitmapPressed(); }
    wxBitmap GetBitmapHover() const { return GetBitmapCurrent(); }

    void SetBitmapSelected(const wxBitmap& bitmap) { SetBitmapPressed(bitmap); }
    void SetBitmapHover(const wxBitmap& bitmap) { SetBitmapCurrent(bitmap); }







    enum State
    {
        State_Normal,
        State_Current,
        State_Pressed,
        State_Disabled,
        State_Focused,
        State_Max
    };



    virtual State GetNormalState() const
    {
        return State_Normal;
    }



    bool DontShowLabel() const
    {
        return HasFlag(0x0002) || GetLabel().empty();
    }


    bool ShowsLabel() const
    {
        return !DontShowLabel();
    }

protected:

    virtual wxBorder GetDefaultBorder() const override { return wxBORDER_NONE; }

    virtual wxBitmap DoGetBitmap(State ) const
        { return wxBitmap(); }
    virtual void DoSetBitmap(const wxBitmap& ,
                             State )
        { }

    virtual wxSize DoGetBitmapMargins() const
        { return wxSize(0, 0); }

    virtual void DoSetBitmapMargins(wxCoord , wxCoord )
        { }

    virtual void DoSetBitmapPosition(wxDirection )
        { }

    virtual bool DoGetAuthNeeded() const { return false; }
    virtual void DoSetAuthNeeded(bool ) { }


    private: wxAnyButtonBase(const wxAnyButtonBase&) = delete; wxAnyButtonBase& operator=(const wxAnyButtonBase&) = delete;
};
# 191 "/usr/include/wx-3.1-unofficial/wx/anybutton.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/gtk/anybutton.h" 1
# 17 "/usr/include/wx-3.1-unofficial/wx/gtk/anybutton.h"
class __attribute__ ((visibility("default"))) wxAnyButton : public wxAnyButtonBase
{
public:
    wxAnyButton()
    {
        m_isCurrent =
        m_isPressed = false;
    }




    static wxVisualAttributes
    GetClassDefaultAttributes(wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL);



    void GTKMouseEnters();
    void GTKMouseLeaves();
    void GTKPressed();
    void GTKReleased();

protected:
    virtual GdkWindow *GTKGetWindow(wxArrayGdkWindows& windows) const override;

    virtual void DoEnable(bool enable) override;

    virtual wxBitmap DoGetBitmap(State which) const override;
    virtual void DoSetBitmap(const wxBitmap& bitmap, State which) override;
    virtual void DoSetBitmapPosition(wxDirection dir) override;


    void GTKUpdateBitmap();

private:
    typedef wxAnyButtonBase base_type;


    void GTKOnFocus(wxFocusEvent& event);




    State GTKGetCurrentBitmapState() const;


    void GTKDoShowBitmap(const wxBitmap& bitmap);





    wxBitmap m_bitmaps[State_Max];


    bool m_isCurrent;


    bool m_isPressed;

    private: wxAnyButton(const wxAnyButton&) = delete; wxAnyButton& operator=(const wxAnyButton&) = delete;
};
# 192 "/usr/include/wx-3.1-unofficial/wx/anybutton.h" 2
# 19 "/usr/include/wx-3.1-unofficial/wx/button.h" 2

extern __attribute__ ((visibility("default"))) const char wxButtonNameStr[];





class __attribute__ ((visibility("default"))) wxButtonBase : public wxAnyButton
{
public:
    wxButtonBase() { }




    void SetAuthNeeded(bool show = true) { DoSetAuthNeeded(show); }
    bool GetAuthNeeded() const { return DoGetAuthNeeded(); }




    virtual wxWindow *SetDefault();



    static wxSize GetDefaultSize(wxWindow* win = 
# 44 "/usr/include/wx-3.1-unofficial/wx/button.h" 3 4
                                                __null
# 44 "/usr/include/wx-3.1-unofficial/wx/button.h"
                                                    );

protected:
    private: wxButtonBase(const wxButtonBase&) = delete; wxButtonBase& operator=(const wxButtonBase&) = delete;
};
# 57 "/usr/include/wx-3.1-unofficial/wx/button.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/gtk/button.h" 1
# 16 "/usr/include/wx-3.1-unofficial/wx/gtk/button.h"
class __attribute__ ((visibility("default"))) wxButton : public wxButtonBase
{
public:
    wxButton() {}
    wxButton(wxWindow *parent, wxWindowID id,
           const wxString& label = wxEmptyString,
           const wxPoint& pos = wxDefaultPosition,
           const wxSize& size = wxDefaultSize, long style = 0,
           const wxValidator& validator = wxDefaultValidator,
           const wxString& name = wxString::FromAscii(wxButtonNameStr))
    {
        Create(parent, id, label, pos, size, style, validator, name);
    }

    bool Create(wxWindow *parent, wxWindowID id,
           const wxString& label = wxEmptyString,
           const wxPoint& pos = wxDefaultPosition,
           const wxSize& size = wxDefaultSize, long style = 0,
           const wxValidator& validator = wxDefaultValidator,
           const wxString& name = wxString::FromAscii(wxButtonNameStr));

    virtual wxWindow *SetDefault() override;
    virtual void SetLabel( const wxString &label ) override;




    static wxVisualAttributes
    GetClassDefaultAttributes(wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL);


    void MoveWindow(int x, int y, int width, int height) { DoMoveWindow(x, y, width, height); }



    void GTKMouseEnters();
    void GTKMouseLeaves();
    void GTKPressed();
    void GTKReleased();

protected:
    virtual wxSize DoGetBestSize() const override;
    virtual void DoApplyWidgetStyle(GtkRcStyle *style) override;


    virtual bool DoSetLabelMarkup(const wxString& markup) override;


private:
    typedef wxButtonBase base_type;


    GtkLabel *GTKGetLabel() const;







    public:
# 76 "/usr/include/wx-3.1-unofficial/wx/gtk/button.h"
#pragma GCC diagnostic push
# 76 "/usr/include/wx-3.1-unofficial/wx/gtk/button.h"
   
# 76 "/usr/include/wx-3.1-unofficial/wx/gtk/button.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 76 "/usr/include/wx-3.1-unofficial/wx/gtk/button.h"
    virtual wxClassInfo *GetClassInfo() const;
# 76 "/usr/include/wx-3.1-unofficial/wx/gtk/button.h"
#pragma GCC diagnostic pop
# 76 "/usr/include/wx-3.1-unofficial/wx/gtk/button.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 58 "/usr/include/wx-3.1-unofficial/wx/button.h" 2
# 56 "/usr/include/wx-3.1-unofficial/wx/wx.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/menuitem.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/menuitem.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/menuitem.h" 2
# 31 "/usr/include/wx-3.1-unofficial/wx/menuitem.h"
class wxAcceleratorEntry;

class wxMenuItem;
class wxMenu;






class __attribute__ ((visibility("default"))) wxMenuItemBase : public wxObject
{
public:

    static wxMenuItem *New(wxMenu *parentMenu = 
# 45 "/usr/include/wx-3.1-unofficial/wx/menuitem.h" 3 4
                                               __null
# 45 "/usr/include/wx-3.1-unofficial/wx/menuitem.h"
                                                   ,
                           int itemid = wxID_SEPARATOR,
                           const wxString& text = wxEmptyString,
                           const wxString& help = wxEmptyString,
                           wxItemKind kind = wxITEM_NORMAL,
                           wxMenu *subMenu = 
# 50 "/usr/include/wx-3.1-unofficial/wx/menuitem.h" 3 4
                                            __null
# 50 "/usr/include/wx-3.1-unofficial/wx/menuitem.h"
                                                );


    virtual ~wxMenuItemBase();


    wxMenu *GetMenu() const { return m_parentMenu; }
    void SetMenu(wxMenu* menu) { m_parentMenu = menu; }


    void SetId(int itemid) { m_id = itemid; }
    int GetId() const { return m_id; }







    virtual void SetItemLabel(const wxString& str);



    virtual wxString GetItemLabel() const { return m_text; }



    virtual wxString GetItemLabelText() const { return GetLabelText(m_text); }



    static wxString GetLabelText(const wxString& label);


    wxItemKind GetKind() const { return m_kind; }
    void SetKind(wxItemKind kind) { m_kind = kind; }
    bool IsSeparator() const { return m_kind == wxITEM_SEPARATOR; }

    bool IsCheck() const { return m_kind == wxITEM_CHECK; }
    bool IsRadio() const { return m_kind == wxITEM_RADIO; }

    virtual void SetCheckable(bool checkable)
        { m_kind = checkable ? wxITEM_CHECK : wxITEM_NORMAL; }


    bool IsCheckable() const
        { return m_kind == wxITEM_CHECK || m_kind == wxITEM_RADIO; }

    bool IsSubMenu() const { return m_subMenu != 
# 98 "/usr/include/wx-3.1-unofficial/wx/menuitem.h" 3 4
                                                __null
# 98 "/usr/include/wx-3.1-unofficial/wx/menuitem.h"
                                                    ; }
    void SetSubMenu(wxMenu *menu) { m_subMenu = menu; }
    wxMenu *GetSubMenu() const { return m_subMenu; }


    virtual void Enable(bool enable = true) { m_isEnabled = enable; }
    virtual bool IsEnabled() const { return m_isEnabled; }

    virtual void Check(bool check = true) { m_isChecked = check; }
    virtual bool IsChecked() const { return m_isChecked; }
    void Toggle() { Check(!m_isChecked); }


    void SetHelp(const wxString& str);
    const wxString& GetHelp() const { return m_help; }




    static wxAcceleratorEntry *GetAccelFromString(const wxString& label);


    virtual wxAcceleratorEntry *GetAccel() const;



    virtual void SetAccel(wxAcceleratorEntry *accel);
# 145 "/usr/include/wx-3.1-unofficial/wx/menuitem.h"
    static wxMenuItem *New(wxMenu *parentMenu,
                           int itemid,
                           const wxString& text,
                           const wxString& help,
                           bool isCheckable,
                           wxMenu *subMenu = 
# 150 "/usr/include/wx-3.1-unofficial/wx/menuitem.h" 3 4
                                            __null
# 150 "/usr/include/wx-3.1-unofficial/wx/menuitem.h"
                                                )
    {
        return New(parentMenu, itemid, text, help,
                   isCheckable ? wxITEM_CHECK : wxITEM_NORMAL, subMenu);
    }

protected:
    wxWindowIDRef m_id;
    wxMenu *m_parentMenu,
                 *m_subMenu;
    wxString m_text,
                  m_help;
    wxItemKind m_kind;
    bool m_isChecked;
    bool m_isEnabled;


    wxMenuItemBase(wxMenu *parentMenu = 
# 167 "/usr/include/wx-3.1-unofficial/wx/menuitem.h" 3 4
                                       __null
# 167 "/usr/include/wx-3.1-unofficial/wx/menuitem.h"
                                           ,
                   int itemid = wxID_SEPARATOR,
                   const wxString& text = wxEmptyString,
                   const wxString& help = wxEmptyString,
                   wxItemKind kind = wxITEM_NORMAL,
                   wxMenu *subMenu = 
# 172 "/usr/include/wx-3.1-unofficial/wx/menuitem.h" 3 4
                                    __null
# 172 "/usr/include/wx-3.1-unofficial/wx/menuitem.h"
                                        );

private:


    wxMenuItemBase(const wxMenuItemBase& item);
    wxMenuItemBase& operator=(const wxMenuItemBase& item);
};
# 206 "/usr/include/wx-3.1-unofficial/wx/menuitem.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/gtk/menuitem.h" 1
# 18 "/usr/include/wx-3.1-unofficial/wx/gtk/menuitem.h"
class __attribute__ ((visibility("default"))) wxMenuItem : public wxMenuItemBase
{
public:
    wxMenuItem(wxMenu *parentMenu = 
# 21 "/usr/include/wx-3.1-unofficial/wx/gtk/menuitem.h" 3 4
                                   __null
# 21 "/usr/include/wx-3.1-unofficial/wx/gtk/menuitem.h"
                                       ,
               int id = wxID_SEPARATOR,
               const wxString& text = wxEmptyString,
               const wxString& help = wxEmptyString,
               wxItemKind kind = wxITEM_NORMAL,
               wxMenu *subMenu = 
# 26 "/usr/include/wx-3.1-unofficial/wx/gtk/menuitem.h" 3 4
                                __null
# 26 "/usr/include/wx-3.1-unofficial/wx/gtk/menuitem.h"
                                    );
    virtual ~wxMenuItem();


    virtual void SetItemLabel( const wxString& str ) override;
    virtual void Enable( bool enable = true ) override;
    virtual void Check( bool check = true ) override;
    virtual bool IsChecked() const override;
    virtual void SetBitmap(const wxBitmap& bitmap);
    virtual const wxBitmap& GetBitmap() const { return m_bitmap; }


    void SetMenuItem(GtkWidget *menuItem);
    GtkWidget *GetMenuItem() const { return m_menuItem; }
    void SetGtkLabel();
# 54 "/usr/include/wx-3.1-unofficial/wx/gtk/menuitem.h"
private:
    wxBitmap m_bitmap;
    GtkWidget *m_menuItem;

    public:
# 58 "/usr/include/wx-3.1-unofficial/wx/gtk/menuitem.h"
#pragma GCC diagnostic push
# 58 "/usr/include/wx-3.1-unofficial/wx/gtk/menuitem.h"
   
# 58 "/usr/include/wx-3.1-unofficial/wx/gtk/menuitem.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 58 "/usr/include/wx-3.1-unofficial/wx/gtk/menuitem.h"
    virtual wxClassInfo *GetClassInfo() const;
# 58 "/usr/include/wx-3.1-unofficial/wx/gtk/menuitem.h"
#pragma GCC diagnostic pop
# 58 "/usr/include/wx-3.1-unofficial/wx/gtk/menuitem.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 207 "/usr/include/wx-3.1-unofficial/wx/menuitem.h" 2
# 57 "/usr/include/wx-3.1-unofficial/wx/wx.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/menu.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/menu.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/menu.h" 2
# 29 "/usr/include/wx-3.1-unofficial/wx/menu.h"
class wxFrame;
class wxMenu;
class wxMenuBarBase;
class wxMenuBar;
class wxMenuItem;


typedef wxMenu _WX_LIST_ITEM_TYPE_wxMenuList; typedef int (*wxSortFuncFor_wxMenuList)(const wxMenu **, const wxMenu **); class __attribute__ ((visibility("default"))) wxwxMenuListNode : public wxNodeBase { public: wxwxMenuListNode(wxListBase *list = 
# 36 "/usr/include/wx-3.1-unofficial/wx/menu.h" 3 4
__null
# 36 "/usr/include/wx-3.1-unofficial/wx/menu.h"
, wxwxMenuListNode *previous = 
# 36 "/usr/include/wx-3.1-unofficial/wx/menu.h" 3 4
__null
# 36 "/usr/include/wx-3.1-unofficial/wx/menu.h"
, wxwxMenuListNode *next = 
# 36 "/usr/include/wx-3.1-unofficial/wx/menu.h" 3 4
__null
# 36 "/usr/include/wx-3.1-unofficial/wx/menu.h"
, wxMenu *data = 
# 36 "/usr/include/wx-3.1-unofficial/wx/menu.h" 3 4
__null
# 36 "/usr/include/wx-3.1-unofficial/wx/menu.h"
, const wxListKey& key = wxDefaultListKey) : wxNodeBase(list, previous, next, data, key) { } wxwxMenuListNode *GetNext() const { return (wxwxMenuListNode *)wxNodeBase::GetNext(); } wxwxMenuListNode *GetPrevious() const { return (wxwxMenuListNode *)wxNodeBase::GetPrevious(); } wxMenu *GetData() const { return (wxMenu *)wxNodeBase::GetData(); } void SetData(wxMenu *data) { wxNodeBase::SetData(data); } protected: virtual void DeleteData() override; private: wxwxMenuListNode(const wxwxMenuListNode&) = delete; wxwxMenuListNode& operator=(const wxwxMenuListNode&) = delete; }; class __attribute__ ((visibility("default"))) wxMenuList : public wxListBase { public: typedef wxwxMenuListNode Node; class __attribute__ ((visibility("default"))) compatibility_iterator { public: compatibility_iterator(Node *ptr = 
# 36 "/usr/include/wx-3.1-unofficial/wx/menu.h" 3 4
__null
# 36 "/usr/include/wx-3.1-unofficial/wx/menu.h"
) : m_ptr(ptr) { } Node *operator->() const { return m_ptr; } operator Node *() const { return m_ptr; } private: Node *m_ptr; }; wxMenuList(wxKeyType keyType = wxKEY_NONE) : wxListBase(keyType) { } wxMenuList(const wxMenuList& list) : wxListBase(list.GetKeyType()) { Assign(list); } wxMenuList& operator=(const wxMenuList& list) { if (&list != this) Assign(list); return *this; } wxwxMenuListNode *GetFirst() const { return (wxwxMenuListNode *)wxListBase::GetFirst(); } wxwxMenuListNode *GetLast() const { return (wxwxMenuListNode *)wxListBase::GetLast(); } wxwxMenuListNode *Item(size_t index) const { return (wxwxMenuListNode *)wxListBase::Item(index); } wxMenu *operator[](size_t index) const { wxwxMenuListNode *node = Item(index); return node ? (wxMenu*)(node->GetData()) : 
# 36 "/usr/include/wx-3.1-unofficial/wx/menu.h" 3 4
__null
# 36 "/usr/include/wx-3.1-unofficial/wx/menu.h"
; } wxwxMenuListNode *Append(wxMenu *object) { return (wxwxMenuListNode *)wxListBase::Append(object); } wxwxMenuListNode *Insert(wxMenu *object) { return (wxwxMenuListNode *)Insert(static_cast<wxwxMenuListNode *>(
# 36 "/usr/include/wx-3.1-unofficial/wx/menu.h" 3 4
__null
# 36 "/usr/include/wx-3.1-unofficial/wx/menu.h"
), object); } wxwxMenuListNode *Insert(size_t pos, wxMenu *object) { return (wxwxMenuListNode *)wxListBase::Insert(pos, object); } wxwxMenuListNode *Insert(wxwxMenuListNode *prev, wxMenu *object) { return (wxwxMenuListNode *)wxListBase::Insert(prev, object); } wxwxMenuListNode *Append(long key, void *object) { return (wxwxMenuListNode *)wxListBase::Append(key, object); } wxwxMenuListNode *Append(const wxChar *key, void *object) { return (wxwxMenuListNode *)wxListBase::Append(key, object); } wxwxMenuListNode *DetachNode(wxwxMenuListNode *node) { return (wxwxMenuListNode *)wxListBase::DetachNode(node); } bool DeleteNode(wxwxMenuListNode *node) { return wxListBase::DeleteNode(node); } bool DeleteObject(wxMenu *object) { return wxListBase::DeleteObject(object); } void Erase(wxwxMenuListNode *it) { DeleteNode(it); } wxwxMenuListNode *Find(const wxMenu *object) const { return (wxwxMenuListNode *)wxListBase::Find(object); } virtual wxwxMenuListNode *Find(const wxListKey& key) const { return (wxwxMenuListNode *)wxListBase::Find(key); } bool Member(const wxMenu *object) const { return Find(object) != 
# 36 "/usr/include/wx-3.1-unofficial/wx/menu.h" 3 4
__null
# 36 "/usr/include/wx-3.1-unofficial/wx/menu.h"
; } int IndexOf(wxMenu *object) const { return wxListBase::IndexOf(object); } void Sort(wxSortCompareFunction func) { wxListBase::Sort(func); } void Sort(wxSortFuncFor_wxMenuList func) { Sort((wxSortCompareFunction)func); } protected: virtual wxNodeBase *CreateNode(wxNodeBase *prev, wxNodeBase *next, void *data, const wxListKey& key = wxDefaultListKey) override { return new wxwxMenuListNode(this, (wxwxMenuListNode *)prev, (wxwxMenuListNode *)next, (wxMenu *)data, key); } public: typedef size_t size_type; typedef int difference_type; typedef wxMenu* value_type; typedef wxMenu* base_value_type; typedef value_type& reference; typedef const value_type& const_reference; typedef base_value_type& base_reference; typedef const base_value_type& const_base_reference; class __attribute__ ((visibility("default"))) iterator { public: typedef std::ptrdiff_t difference_type; typedef std::bidirectional_iterator_tag iterator_category; typedef wxMenu* value_type; typedef value_type* pointer; typedef value_type& reference; typedef wxwxMenuListNode Node; typedef iterator itor; Node* m_node; Node* m_init; public: typedef reference reference_type; typedef pointer pointer_type; iterator(Node* node, Node* init) : m_node(node), m_init(init) {} iterator() : m_node(
# 36 "/usr/include/wx-3.1-unofficial/wx/menu.h" 3 4
__null
# 36 "/usr/include/wx-3.1-unofficial/wx/menu.h"
), m_init(
# 36 "/usr/include/wx-3.1-unofficial/wx/menu.h" 3 4
__null
# 36 "/usr/include/wx-3.1-unofficial/wx/menu.h"
) { } reference_type operator*() const { return *(pointer_type)m_node->GetDataPtr(); } itor& operator++() { do { if ( m_node ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/menu.h", 36, __FUNCTION__, "m_node", L"uninitialized iterator"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); m_node = m_node->GetNext(); return *this; } const itor operator++(int) { itor tmp = *this; do { if ( m_node ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/menu.h", 36, __FUNCTION__, "m_node", L"uninitialized iterator"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); m_node = m_node->GetNext(); return tmp; } itor& operator--() { m_node = m_node ? m_node->GetPrevious() : m_init; return *this; } const itor operator--(int) { itor tmp = *this; m_node = m_node ? m_node->GetPrevious() : m_init; return tmp; } bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; class __attribute__ ((visibility("default"))) const_iterator { public: typedef std::ptrdiff_t difference_type; typedef std::bidirectional_iterator_tag iterator_category; typedef wxMenu* value_type; typedef const value_type* pointer; typedef const value_type& reference; typedef wxwxMenuListNode Node; typedef const_iterator itor; Node* m_node; Node* m_init; public: typedef reference reference_type; typedef pointer pointer_type; const_iterator(Node* node, Node* init) : m_node(node), m_init(init) { } const_iterator() : m_node(
# 36 "/usr/include/wx-3.1-unofficial/wx/menu.h" 3 4
__null
# 36 "/usr/include/wx-3.1-unofficial/wx/menu.h"
), m_init(
# 36 "/usr/include/wx-3.1-unofficial/wx/menu.h" 3 4
__null
# 36 "/usr/include/wx-3.1-unofficial/wx/menu.h"
) { } const_iterator(const iterator& it) : m_node(it.m_node), m_init(it.m_init) { } reference_type operator*() const { return *(pointer_type)m_node->GetDataPtr(); } itor& operator++() { do { if ( m_node ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/menu.h", 36, __FUNCTION__, "m_node", L"uninitialized iterator"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); m_node = m_node->GetNext(); return *this; } const itor operator++(int) { itor tmp = *this; do { if ( m_node ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/menu.h", 36, __FUNCTION__, "m_node", L"uninitialized iterator"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); m_node = m_node->GetNext(); return tmp; } itor& operator--() { m_node = m_node ? m_node->GetPrevious() : m_init; return *this; } const itor operator--(int) { itor tmp = *this; m_node = m_node ? m_node->GetPrevious() : m_init; return tmp; } bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; class __attribute__ ((visibility("default"))) reverse_iterator { public: typedef std::ptrdiff_t difference_type; typedef std::bidirectional_iterator_tag iterator_category; typedef wxMenu* value_type; typedef value_type* pointer; typedef value_type& reference; typedef wxwxMenuListNode Node; typedef reverse_iterator itor; Node* m_node; Node* m_init; public: typedef reference reference_type; typedef pointer pointer_type; reverse_iterator(Node* node, Node* init) : m_node(node), m_init(init) { } reverse_iterator() : m_node(
# 36 "/usr/include/wx-3.1-unofficial/wx/menu.h" 3 4
__null
# 36 "/usr/include/wx-3.1-unofficial/wx/menu.h"
), m_init(
# 36 "/usr/include/wx-3.1-unofficial/wx/menu.h" 3 4
__null
# 36 "/usr/include/wx-3.1-unofficial/wx/menu.h"
) { } reference_type operator*() const { return *(pointer_type)m_node->GetDataPtr(); } itor& operator++() { m_node = m_node->GetPrevious(); return *this; } const itor operator++(int) { itor tmp = *this; m_node = m_node->GetPrevious(); return tmp; } itor& operator--() { m_node = m_node ? m_node->GetNext() : m_init; return *this; } const itor operator--(int) { itor tmp = *this; m_node = m_node ? m_node->GetNext() : m_init; return tmp; } bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; class __attribute__ ((visibility("default"))) const_reverse_iterator { public: typedef std::ptrdiff_t difference_type; typedef std::bidirectional_iterator_tag iterator_category; typedef wxMenu* value_type; typedef const value_type* pointer; typedef const value_type& reference; typedef wxwxMenuListNode Node; typedef const_reverse_iterator itor; Node* m_node; Node* m_init; public: typedef reference reference_type; typedef pointer pointer_type; const_reverse_iterator(Node* node, Node* init) : m_node(node), m_init(init) { } const_reverse_iterator() : m_node(
# 36 "/usr/include/wx-3.1-unofficial/wx/menu.h" 3 4
__null
# 36 "/usr/include/wx-3.1-unofficial/wx/menu.h"
), m_init(
# 36 "/usr/include/wx-3.1-unofficial/wx/menu.h" 3 4
__null
# 36 "/usr/include/wx-3.1-unofficial/wx/menu.h"
) { } const_reverse_iterator(const reverse_iterator& it) : m_node(it.m_node), m_init(it.m_init) { } reference_type operator*() const { return *(pointer_type)m_node->GetDataPtr(); } itor& operator++() { m_node = m_node->GetPrevious(); return *this; } const itor operator++(int) { itor tmp = *this; m_node = m_node->GetPrevious(); return tmp; } itor& operator--() { m_node = m_node ? m_node->GetNext() : m_init; return *this;} const itor operator--(int) { itor tmp = *this; m_node = m_node ? m_node->GetNext() : m_init; return tmp; } bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; explicit wxMenuList(size_type n, const_reference v = value_type()) { assign(n, v); } wxMenuList(const const_iterator& first, const const_iterator& last) { assign(first, last); } iterator begin() { return iterator(GetFirst(), GetLast()); } const_iterator begin() const { return const_iterator(GetFirst(), GetLast()); } iterator end() { return iterator(
# 36 "/usr/include/wx-3.1-unofficial/wx/menu.h" 3 4
__null
# 36 "/usr/include/wx-3.1-unofficial/wx/menu.h"
, GetLast()); } const_iterator end() const { return const_iterator(
# 36 "/usr/include/wx-3.1-unofficial/wx/menu.h" 3 4
__null
# 36 "/usr/include/wx-3.1-unofficial/wx/menu.h"
, GetLast()); } reverse_iterator rbegin() { return reverse_iterator(GetLast(), GetFirst()); } const_reverse_iterator rbegin() const { return const_reverse_iterator(GetLast(), GetFirst()); } reverse_iterator rend() { return reverse_iterator(
# 36 "/usr/include/wx-3.1-unofficial/wx/menu.h" 3 4
__null
# 36 "/usr/include/wx-3.1-unofficial/wx/menu.h"
, GetFirst()); } const_reverse_iterator rend() const { return const_reverse_iterator(
# 36 "/usr/include/wx-3.1-unofficial/wx/menu.h" 3 4
__null
# 36 "/usr/include/wx-3.1-unofficial/wx/menu.h"
, GetFirst()); } void resize(size_type n, value_type v = value_type()) { while (n < size()) pop_back(); while (n > size()) push_back(v); } size_type size() const { return GetCount(); } size_type max_size() const { return 0x7fffffff; } bool empty() const { return IsEmpty(); } reference front() { return *begin(); } const_reference front() const { return *begin(); } reference back() { iterator tmp = end(); return *--tmp; } const_reference back() const { const_iterator tmp = end(); return *--tmp; } void push_front(const_reference v = value_type()) { Insert(GetFirst(), (const_base_reference)v); } void pop_front() { DeleteNode(GetFirst()); } void push_back(const_reference v = value_type()) { Append((const_base_reference)v); } void pop_back() { DeleteNode(GetLast()); } void assign(const_iterator first, const const_iterator& last) { clear(); for(; first != last; ++first) Append((const_base_reference)*first); } void assign(size_type n, const_reference v = value_type()) { clear(); for(size_type i = 0; i < n; ++i) Append((const_base_reference)v); } iterator insert(const iterator& it, const_reference v) { if ( it == end() ) { Append((const_base_reference)v); iterator itins(end()); return --itins; } else { Insert(it.m_node, (const_base_reference)v); iterator itins(it); return --itins; } } void insert(const iterator& it, size_type n, const_reference v) { for(size_type i = 0; i < n; ++i) insert(it, v); } void insert(const iterator& it, const_iterator first, const const_iterator& last) { for(; first != last; ++first) insert(it, *first); } iterator erase(const iterator& it) { iterator next = iterator(it.m_node->GetNext(), GetLast()); DeleteNode(it.m_node); return next; } iterator erase(const iterator& first, const iterator& last) { iterator next = last; if ( next != end() ) ++next; DeleteNodes(first.m_node, last.m_node); return next; } void clear() { Clear(); } void splice(const iterator& it, wxMenuList& l, const iterator& first, const iterator& last) { insert(it, first, last); l.erase(first, last); } void splice(const iterator& it, wxMenuList& l) { splice(it, l, l.begin(), l.end() ); } void splice(const iterator& it, wxMenuList& l, const iterator& first) { if ( it != first ) { insert(it, *first); l.erase(first); } } void remove(const_reference v) { DeleteObject((const_base_reference)v); } void reverse() { Reverse(); } };
typedef wxMenuItem _WX_LIST_ITEM_TYPE_wxMenuItemList; typedef int (*wxSortFuncFor_wxMenuItemList)(const wxMenuItem **, const wxMenuItem **); class __attribute__ ((visibility("default"))) wxwxMenuItemListNode : public wxNodeBase { public: wxwxMenuItemListNode(wxListBase *list = 
# 37 "/usr/include/wx-3.1-unofficial/wx/menu.h" 3 4
__null
# 37 "/usr/include/wx-3.1-unofficial/wx/menu.h"
, wxwxMenuItemListNode *previous = 
# 37 "/usr/include/wx-3.1-unofficial/wx/menu.h" 3 4
__null
# 37 "/usr/include/wx-3.1-unofficial/wx/menu.h"
, wxwxMenuItemListNode *next = 
# 37 "/usr/include/wx-3.1-unofficial/wx/menu.h" 3 4
__null
# 37 "/usr/include/wx-3.1-unofficial/wx/menu.h"
, wxMenuItem *data = 
# 37 "/usr/include/wx-3.1-unofficial/wx/menu.h" 3 4
__null
# 37 "/usr/include/wx-3.1-unofficial/wx/menu.h"
, const wxListKey& key = wxDefaultListKey) : wxNodeBase(list, previous, next, data, key) { } wxwxMenuItemListNode *GetNext() const { return (wxwxMenuItemListNode *)wxNodeBase::GetNext(); } wxwxMenuItemListNode *GetPrevious() const { return (wxwxMenuItemListNode *)wxNodeBase::GetPrevious(); } wxMenuItem *GetData() const { return (wxMenuItem *)wxNodeBase::GetData(); } void SetData(wxMenuItem *data) { wxNodeBase::SetData(data); } protected: virtual void DeleteData() override; private: wxwxMenuItemListNode(const wxwxMenuItemListNode&) = delete; wxwxMenuItemListNode& operator=(const wxwxMenuItemListNode&) = delete; }; class __attribute__ ((visibility("default"))) wxMenuItemList : public wxListBase { public: typedef wxwxMenuItemListNode Node; class __attribute__ ((visibility("default"))) compatibility_iterator { public: compatibility_iterator(Node *ptr = 
# 37 "/usr/include/wx-3.1-unofficial/wx/menu.h" 3 4
__null
# 37 "/usr/include/wx-3.1-unofficial/wx/menu.h"
) : m_ptr(ptr) { } Node *operator->() const { return m_ptr; } operator Node *() const { return m_ptr; } private: Node *m_ptr; }; wxMenuItemList(wxKeyType keyType = wxKEY_NONE) : wxListBase(keyType) { } wxMenuItemList(const wxMenuItemList& list) : wxListBase(list.GetKeyType()) { Assign(list); } wxMenuItemList& operator=(const wxMenuItemList& list) { if (&list != this) Assign(list); return *this; } wxwxMenuItemListNode *GetFirst() const { return (wxwxMenuItemListNode *)wxListBase::GetFirst(); } wxwxMenuItemListNode *GetLast() const { return (wxwxMenuItemListNode *)wxListBase::GetLast(); } wxwxMenuItemListNode *Item(size_t index) const { return (wxwxMenuItemListNode *)wxListBase::Item(index); } wxMenuItem *operator[](size_t index) const { wxwxMenuItemListNode *node = Item(index); return node ? (wxMenuItem*)(node->GetData()) : 
# 37 "/usr/include/wx-3.1-unofficial/wx/menu.h" 3 4
__null
# 37 "/usr/include/wx-3.1-unofficial/wx/menu.h"
; } wxwxMenuItemListNode *Append(wxMenuItem *object) { return (wxwxMenuItemListNode *)wxListBase::Append(object); } wxwxMenuItemListNode *Insert(wxMenuItem *object) { return (wxwxMenuItemListNode *)Insert(static_cast<wxwxMenuItemListNode *>(
# 37 "/usr/include/wx-3.1-unofficial/wx/menu.h" 3 4
__null
# 37 "/usr/include/wx-3.1-unofficial/wx/menu.h"
), object); } wxwxMenuItemListNode *Insert(size_t pos, wxMenuItem *object) { return (wxwxMenuItemListNode *)wxListBase::Insert(pos, object); } wxwxMenuItemListNode *Insert(wxwxMenuItemListNode *prev, wxMenuItem *object) { return (wxwxMenuItemListNode *)wxListBase::Insert(prev, object); } wxwxMenuItemListNode *Append(long key, void *object) { return (wxwxMenuItemListNode *)wxListBase::Append(key, object); } wxwxMenuItemListNode *Append(const wxChar *key, void *object) { return (wxwxMenuItemListNode *)wxListBase::Append(key, object); } wxwxMenuItemListNode *DetachNode(wxwxMenuItemListNode *node) { return (wxwxMenuItemListNode *)wxListBase::DetachNode(node); } bool DeleteNode(wxwxMenuItemListNode *node) { return wxListBase::DeleteNode(node); } bool DeleteObject(wxMenuItem *object) { return wxListBase::DeleteObject(object); } void Erase(wxwxMenuItemListNode *it) { DeleteNode(it); } wxwxMenuItemListNode *Find(const wxMenuItem *object) const { return (wxwxMenuItemListNode *)wxListBase::Find(object); } virtual wxwxMenuItemListNode *Find(const wxListKey& key) const { return (wxwxMenuItemListNode *)wxListBase::Find(key); } bool Member(const wxMenuItem *object) const { return Find(object) != 
# 37 "/usr/include/wx-3.1-unofficial/wx/menu.h" 3 4
__null
# 37 "/usr/include/wx-3.1-unofficial/wx/menu.h"
; } int IndexOf(wxMenuItem *object) const { return wxListBase::IndexOf(object); } void Sort(wxSortCompareFunction func) { wxListBase::Sort(func); } void Sort(wxSortFuncFor_wxMenuItemList func) { Sort((wxSortCompareFunction)func); } protected: virtual wxNodeBase *CreateNode(wxNodeBase *prev, wxNodeBase *next, void *data, const wxListKey& key = wxDefaultListKey) override { return new wxwxMenuItemListNode(this, (wxwxMenuItemListNode *)prev, (wxwxMenuItemListNode *)next, (wxMenuItem *)data, key); } public: typedef size_t size_type; typedef int difference_type; typedef wxMenuItem* value_type; typedef wxMenuItem* base_value_type; typedef value_type& reference; typedef const value_type& const_reference; typedef base_value_type& base_reference; typedef const base_value_type& const_base_reference; class __attribute__ ((visibility("default"))) iterator { public: typedef std::ptrdiff_t difference_type; typedef std::bidirectional_iterator_tag iterator_category; typedef wxMenuItem* value_type; typedef value_type* pointer; typedef value_type& reference; typedef wxwxMenuItemListNode Node; typedef iterator itor; Node* m_node; Node* m_init; public: typedef reference reference_type; typedef pointer pointer_type; iterator(Node* node, Node* init) : m_node(node), m_init(init) {} iterator() : m_node(
# 37 "/usr/include/wx-3.1-unofficial/wx/menu.h" 3 4
__null
# 37 "/usr/include/wx-3.1-unofficial/wx/menu.h"
), m_init(
# 37 "/usr/include/wx-3.1-unofficial/wx/menu.h" 3 4
__null
# 37 "/usr/include/wx-3.1-unofficial/wx/menu.h"
) { } reference_type operator*() const { return *(pointer_type)m_node->GetDataPtr(); } itor& operator++() { do { if ( m_node ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/menu.h", 37, __FUNCTION__, "m_node", L"uninitialized iterator"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); m_node = m_node->GetNext(); return *this; } const itor operator++(int) { itor tmp = *this; do { if ( m_node ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/menu.h", 37, __FUNCTION__, "m_node", L"uninitialized iterator"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); m_node = m_node->GetNext(); return tmp; } itor& operator--() { m_node = m_node ? m_node->GetPrevious() : m_init; return *this; } const itor operator--(int) { itor tmp = *this; m_node = m_node ? m_node->GetPrevious() : m_init; return tmp; } bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; class __attribute__ ((visibility("default"))) const_iterator { public: typedef std::ptrdiff_t difference_type; typedef std::bidirectional_iterator_tag iterator_category; typedef wxMenuItem* value_type; typedef const value_type* pointer; typedef const value_type& reference; typedef wxwxMenuItemListNode Node; typedef const_iterator itor; Node* m_node; Node* m_init; public: typedef reference reference_type; typedef pointer pointer_type; const_iterator(Node* node, Node* init) : m_node(node), m_init(init) { } const_iterator() : m_node(
# 37 "/usr/include/wx-3.1-unofficial/wx/menu.h" 3 4
__null
# 37 "/usr/include/wx-3.1-unofficial/wx/menu.h"
), m_init(
# 37 "/usr/include/wx-3.1-unofficial/wx/menu.h" 3 4
__null
# 37 "/usr/include/wx-3.1-unofficial/wx/menu.h"
) { } const_iterator(const iterator& it) : m_node(it.m_node), m_init(it.m_init) { } reference_type operator*() const { return *(pointer_type)m_node->GetDataPtr(); } itor& operator++() { do { if ( m_node ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/menu.h", 37, __FUNCTION__, "m_node", L"uninitialized iterator"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); m_node = m_node->GetNext(); return *this; } const itor operator++(int) { itor tmp = *this; do { if ( m_node ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/menu.h", 37, __FUNCTION__, "m_node", L"uninitialized iterator"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); m_node = m_node->GetNext(); return tmp; } itor& operator--() { m_node = m_node ? m_node->GetPrevious() : m_init; return *this; } const itor operator--(int) { itor tmp = *this; m_node = m_node ? m_node->GetPrevious() : m_init; return tmp; } bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; class __attribute__ ((visibility("default"))) reverse_iterator { public: typedef std::ptrdiff_t difference_type; typedef std::bidirectional_iterator_tag iterator_category; typedef wxMenuItem* value_type; typedef value_type* pointer; typedef value_type& reference; typedef wxwxMenuItemListNode Node; typedef reverse_iterator itor; Node* m_node; Node* m_init; public: typedef reference reference_type; typedef pointer pointer_type; reverse_iterator(Node* node, Node* init) : m_node(node), m_init(init) { } reverse_iterator() : m_node(
# 37 "/usr/include/wx-3.1-unofficial/wx/menu.h" 3 4
__null
# 37 "/usr/include/wx-3.1-unofficial/wx/menu.h"
), m_init(
# 37 "/usr/include/wx-3.1-unofficial/wx/menu.h" 3 4
__null
# 37 "/usr/include/wx-3.1-unofficial/wx/menu.h"
) { } reference_type operator*() const { return *(pointer_type)m_node->GetDataPtr(); } itor& operator++() { m_node = m_node->GetPrevious(); return *this; } const itor operator++(int) { itor tmp = *this; m_node = m_node->GetPrevious(); return tmp; } itor& operator--() { m_node = m_node ? m_node->GetNext() : m_init; return *this; } const itor operator--(int) { itor tmp = *this; m_node = m_node ? m_node->GetNext() : m_init; return tmp; } bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; class __attribute__ ((visibility("default"))) const_reverse_iterator { public: typedef std::ptrdiff_t difference_type; typedef std::bidirectional_iterator_tag iterator_category; typedef wxMenuItem* value_type; typedef const value_type* pointer; typedef const value_type& reference; typedef wxwxMenuItemListNode Node; typedef const_reverse_iterator itor; Node* m_node; Node* m_init; public: typedef reference reference_type; typedef pointer pointer_type; const_reverse_iterator(Node* node, Node* init) : m_node(node), m_init(init) { } const_reverse_iterator() : m_node(
# 37 "/usr/include/wx-3.1-unofficial/wx/menu.h" 3 4
__null
# 37 "/usr/include/wx-3.1-unofficial/wx/menu.h"
), m_init(
# 37 "/usr/include/wx-3.1-unofficial/wx/menu.h" 3 4
__null
# 37 "/usr/include/wx-3.1-unofficial/wx/menu.h"
) { } const_reverse_iterator(const reverse_iterator& it) : m_node(it.m_node), m_init(it.m_init) { } reference_type operator*() const { return *(pointer_type)m_node->GetDataPtr(); } itor& operator++() { m_node = m_node->GetPrevious(); return *this; } const itor operator++(int) { itor tmp = *this; m_node = m_node->GetPrevious(); return tmp; } itor& operator--() { m_node = m_node ? m_node->GetNext() : m_init; return *this;} const itor operator--(int) { itor tmp = *this; m_node = m_node ? m_node->GetNext() : m_init; return tmp; } bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; explicit wxMenuItemList(size_type n, const_reference v = value_type()) { assign(n, v); } wxMenuItemList(const const_iterator& first, const const_iterator& last) { assign(first, last); } iterator begin() { return iterator(GetFirst(), GetLast()); } const_iterator begin() const { return const_iterator(GetFirst(), GetLast()); } iterator end() { return iterator(
# 37 "/usr/include/wx-3.1-unofficial/wx/menu.h" 3 4
__null
# 37 "/usr/include/wx-3.1-unofficial/wx/menu.h"
, GetLast()); } const_iterator end() const { return const_iterator(
# 37 "/usr/include/wx-3.1-unofficial/wx/menu.h" 3 4
__null
# 37 "/usr/include/wx-3.1-unofficial/wx/menu.h"
, GetLast()); } reverse_iterator rbegin() { return reverse_iterator(GetLast(), GetFirst()); } const_reverse_iterator rbegin() const { return const_reverse_iterator(GetLast(), GetFirst()); } reverse_iterator rend() { return reverse_iterator(
# 37 "/usr/include/wx-3.1-unofficial/wx/menu.h" 3 4
__null
# 37 "/usr/include/wx-3.1-unofficial/wx/menu.h"
, GetFirst()); } const_reverse_iterator rend() const { return const_reverse_iterator(
# 37 "/usr/include/wx-3.1-unofficial/wx/menu.h" 3 4
__null
# 37 "/usr/include/wx-3.1-unofficial/wx/menu.h"
, GetFirst()); } void resize(size_type n, value_type v = value_type()) { while (n < size()) pop_back(); while (n > size()) push_back(v); } size_type size() const { return GetCount(); } size_type max_size() const { return 0x7fffffff; } bool empty() const { return IsEmpty(); } reference front() { return *begin(); } const_reference front() const { return *begin(); } reference back() { iterator tmp = end(); return *--tmp; } const_reference back() const { const_iterator tmp = end(); return *--tmp; } void push_front(const_reference v = value_type()) { Insert(GetFirst(), (const_base_reference)v); } void pop_front() { DeleteNode(GetFirst()); } void push_back(const_reference v = value_type()) { Append((const_base_reference)v); } void pop_back() { DeleteNode(GetLast()); } void assign(const_iterator first, const const_iterator& last) { clear(); for(; first != last; ++first) Append((const_base_reference)*first); } void assign(size_type n, const_reference v = value_type()) { clear(); for(size_type i = 0; i < n; ++i) Append((const_base_reference)v); } iterator insert(const iterator& it, const_reference v) { if ( it == end() ) { Append((const_base_reference)v); iterator itins(end()); return --itins; } else { Insert(it.m_node, (const_base_reference)v); iterator itins(it); return --itins; } } void insert(const iterator& it, size_type n, const_reference v) { for(size_type i = 0; i < n; ++i) insert(it, v); } void insert(const iterator& it, const_iterator first, const const_iterator& last) { for(; first != last; ++first) insert(it, *first); } iterator erase(const iterator& it) { iterator next = iterator(it.m_node->GetNext(), GetLast()); DeleteNode(it.m_node); return next; } iterator erase(const iterator& first, const iterator& last) { iterator next = last; if ( next != end() ) ++next; DeleteNodes(first.m_node, last.m_node); return next; } void clear() { Clear(); } void splice(const iterator& it, wxMenuItemList& l, const iterator& first, const iterator& last) { insert(it, first, last); l.erase(first, last); } void splice(const iterator& it, wxMenuItemList& l) { splice(it, l, l.begin(), l.end() ); } void splice(const iterator& it, wxMenuItemList& l, const iterator& first) { if ( it != first ) { insert(it, *first); l.erase(first); } } void remove(const_reference v) { DeleteObject((const_base_reference)v); } void reverse() { Reverse(); } };





class __attribute__ ((visibility("default"))) wxMenuBase : public wxEvtHandler
{
public:

    static wxMenu *New(const wxString& title = wxEmptyString, long style = 0);


    wxMenuBase(const wxString& title, long style = 0) : m_title(title)
        { Init(style); }
    wxMenuBase(long style = 0)
        { Init(style); }


    virtual ~wxMenuBase();





    wxMenuItem* Append(int itemid,
                       const wxString& text = wxEmptyString,
                       const wxString& help = wxEmptyString,
                       wxItemKind kind = wxITEM_NORMAL)
    {
        return DoAppend(wxMenuItem::New((wxMenu *)this, itemid, text, help, kind));
    }


    wxMenuItem* AppendSeparator() { return Append(wxID_SEPARATOR); }


    wxMenuItem* AppendCheckItem(int itemid,
                                const wxString& text,
                                const wxString& help = wxEmptyString)
    {
        return Append(itemid, text, help, wxITEM_CHECK);
    }


    wxMenuItem* AppendRadioItem(int itemid,
                                const wxString& text,
                                const wxString& help = wxEmptyString)
    {
        return Append(itemid, text, help, wxITEM_RADIO);
    }


    wxMenuItem* AppendSubMenu(wxMenu *submenu,
                              const wxString& text,
                              const wxString& help = wxEmptyString)
    {
        return DoAppend(wxMenuItem::New((wxMenu *)this, wxID_ANY, text, help,
                                        wxITEM_NORMAL, submenu));
    }


    wxMenuItem* Append(wxMenuItem *item) { return DoAppend(item); }



    virtual void Break() { }


    wxMenuItem* Insert(size_t pos, wxMenuItem *item);


    wxMenuItem* Insert(size_t pos,
                       int itemid,
                       const wxString& text = wxEmptyString,
                       const wxString& help = wxEmptyString,
                       wxItemKind kind = wxITEM_NORMAL)
    {
        return Insert(pos, wxMenuItem::New((wxMenu *)this, itemid, text, help, kind));
    }


    wxMenuItem* InsertSeparator(size_t pos)
    {
        return Insert(pos, wxMenuItem::New((wxMenu *)this, wxID_SEPARATOR));
    }


    wxMenuItem* InsertCheckItem(size_t pos,
                                int itemid,
                                const wxString& text,
                                const wxString& help = wxEmptyString)
    {
        return Insert(pos, itemid, text, help, wxITEM_CHECK);
    }


     wxMenuItem* InsertRadioItem(size_t pos,
                                 int itemid,
                                 const wxString& text,
                                 const wxString& help = wxEmptyString)
    {
        return Insert(pos, itemid, text, help, wxITEM_RADIO);
    }


    wxMenuItem* Insert(size_t pos,
                       int itemid,
                       const wxString& text,
                       wxMenu *submenu,
                       const wxString& help = wxEmptyString)
    {
        return Insert(pos, wxMenuItem::New((wxMenu *)this, itemid, text, help,
                                           wxITEM_NORMAL, submenu));
    }


    wxMenuItem* Prepend(wxMenuItem *item)
    {
        return Insert(0u, item);
    }


    wxMenuItem* Prepend(int itemid,
                        const wxString& text = wxEmptyString,
                        const wxString& help = wxEmptyString,
                        wxItemKind kind = wxITEM_NORMAL)
    {
        return Insert(0u, itemid, text, help, kind);
    }


    wxMenuItem* PrependSeparator()
    {
        return InsertSeparator(0u);
    }


    wxMenuItem* PrependCheckItem(int itemid,
                                 const wxString& text,
                                 const wxString& help = wxEmptyString)
    {
        return InsertCheckItem(0u, itemid, text, help);
    }


    wxMenuItem* PrependRadioItem(int itemid,
                                 const wxString& text,
                                 const wxString& help = wxEmptyString)
    {
        return InsertRadioItem(0u, itemid, text, help);
    }


    wxMenuItem* Prepend(int itemid,
                        const wxString& text,
                        wxMenu *submenu,
                        const wxString& help = wxEmptyString)
    {
        return Insert(0u, itemid, text, submenu, help);
    }




    wxMenuItem *Remove(int itemid) { return Remove(FindChildItem(itemid)); }
    wxMenuItem *Remove(wxMenuItem *item);



    bool Delete(int itemid) { return Delete(FindChildItem(itemid)); }
    bool Delete(wxMenuItem *item);


    bool Destroy(int itemid) { return Destroy(FindChildItem(itemid)); }
    bool Destroy(wxMenuItem *item);





    size_t GetMenuItemCount() const { return m_items.GetCount(); }

    const wxMenuItemList& GetMenuItems() const { return m_items; }
    wxMenuItemList& GetMenuItems() { return m_items; }


    virtual int FindItem(const wxString& item) const;
    wxMenuItem* FindItem(int itemid, wxMenu **menu = 
# 225 "/usr/include/wx-3.1-unofficial/wx/menu.h" 3 4
                                                    __null
# 225 "/usr/include/wx-3.1-unofficial/wx/menu.h"
                                                        ) const;


    wxMenuItem* FindItemByPosition(size_t position) const;


    void Enable(int itemid, bool enable);
    bool IsEnabled(int itemid) const;

    void Check(int itemid, bool check);
    bool IsChecked(int itemid) const;

    void SetLabel(int itemid, const wxString& label);
    wxString GetLabel(int itemid) const;


    wxString GetLabelText(int itemid) const { return wxMenuItem::GetLabelText(GetLabel(itemid)); }

    virtual void SetHelpString(int itemid, const wxString& helpString);
    virtual wxString GetHelpString(int itemid) const;





    virtual void SetTitle(const wxString& title) { m_title = title; }
    const wxString& GetTitle() const { return m_title; }


    void SetEventHandler(wxEvtHandler *handler) { m_eventHandler = handler; }
    wxEvtHandler *GetEventHandler() const { return m_eventHandler; }
# 264 "/usr/include/wx-3.1-unofficial/wx/menu.h"
    void SetInvokingWindow(wxWindow *win);
    wxWindow *GetInvokingWindow() const { return m_invokingWindow; }




    wxWindow *GetWindow() const;


    long GetStyle() const { return m_style; }
# 283 "/usr/include/wx-3.1-unofficial/wx/menu.h"
    void UpdateUI(wxEvtHandler* source = 
# 283 "/usr/include/wx-3.1-unofficial/wx/menu.h" 3 4
                                        __null
# 283 "/usr/include/wx-3.1-unofficial/wx/menu.h"
                                            );




    wxMenuBar *GetMenuBar() const;


    virtual void Attach(wxMenuBarBase *menubar);
    virtual void Detach();


    bool IsAttached() const { return GetMenuBar() != 
# 295 "/usr/include/wx-3.1-unofficial/wx/menu.h" 3 4
                                                    __null
# 295 "/usr/include/wx-3.1-unofficial/wx/menu.h"
                                                        ; }



    void SetParent(wxMenu *parent) { m_menuParent = parent; }
    wxMenu *GetParent() const { return m_menuParent; }







    wxMenuItem *FindChildItem(int itemid, size_t *pos = 
# 308 "/usr/include/wx-3.1-unofficial/wx/menu.h" 3 4
                                                       __null
# 308 "/usr/include/wx-3.1-unofficial/wx/menu.h"
                                                           ) const;





    bool SendEvent(int itemid, int checked = -1);




    static
    bool ProcessMenuEvent(wxMenu* menu, wxMenuEvent& event, wxWindow* win);







    void Append(int itemid,
                const wxString& text,
                const wxString& help,
                bool isCheckable)
    {
        Append(itemid, text, help, isCheckable ? wxITEM_CHECK : wxITEM_NORMAL);
    }


    wxMenuItem* Append(int itemid,
                       const wxString& text,
                       wxMenu *submenu,
                       const wxString& help = wxEmptyString)
    {
        return DoAppend(wxMenuItem::New((wxMenu *)this, itemid, text, help,
                                        wxITEM_NORMAL, submenu));
    }

    void Insert(size_t pos,
                int itemid,
                const wxString& text,
                const wxString& help,
                bool isCheckable)
    {
        Insert(pos, itemid, text, help, isCheckable ? wxITEM_CHECK : wxITEM_NORMAL);
    }

    void Prepend(int itemid,
                 const wxString& text,
                 const wxString& help,
                 bool isCheckable)
    {
        Insert(0u, itemid, text, help, isCheckable);
    }

    static void LockAccels(bool locked)
    {
        ms_locked = locked;
    }

protected:



    virtual wxMenuItem* DoAppend(wxMenuItem *item);
    virtual wxMenuItem* DoInsert(size_t pos, wxMenuItem *item);

    virtual wxMenuItem *DoRemove(wxMenuItem *item);
    virtual bool DoDelete(wxMenuItem *item);
    virtual bool DoDestroy(wxMenuItem *item);





    void Init(long style);


    void AddSubMenu(wxMenu *submenu);

    wxMenuBar *m_menuBar;
    wxMenu *m_menuParent;

    wxString m_title;
    wxMenuItemList m_items;

    wxWindow *m_invokingWindow;

    long m_style;

    wxEvtHandler *m_eventHandler;

    static bool ms_locked;


protected:


    static bool DoProcessEvent(wxMenuBase* menu, wxEvent& event, wxWindow* win);

    private: wxMenuBase(const wxMenuBase&) = delete; wxMenuBase& operator=(const wxMenuBase&) = delete;
};
# 450 "/usr/include/wx-3.1-unofficial/wx/menu.h"
class __attribute__ ((visibility("default"))) wxMenuBarBase : public wxWindow
{
public:

    wxMenuBarBase();


    virtual ~wxMenuBarBase();





    virtual bool Append(wxMenu *menu, const wxString& title);



    virtual bool Insert(size_t pos, wxMenu *menu, const wxString& title);





    size_t GetMenuCount() const { return m_menus.GetCount(); }


    wxMenu *GetMenu(size_t pos) const;



    virtual wxMenu *Replace(size_t pos, wxMenu *menu, const wxString& title);



    virtual wxMenu *Remove(size_t pos);


    virtual void EnableTop(size_t pos, bool enable) = 0;


    virtual bool IsEnabledTop(size_t ) const { return true; }


    virtual void SetMenuLabel(size_t pos, const wxString& label) = 0;
    virtual wxString GetMenuLabel(size_t pos) const = 0;


    virtual wxString GetMenuLabelText(size_t pos) const { return wxMenuItem::GetLabelText(GetMenuLabel(pos)); }






    virtual int FindMenuItem(const wxString& menu, const wxString& item) const;




    virtual wxMenuItem* FindItem(int itemid, wxMenu **menu = 
# 509 "/usr/include/wx-3.1-unofficial/wx/menu.h" 3 4
                                                            __null
# 509 "/usr/include/wx-3.1-unofficial/wx/menu.h"
                                                                ) const;


    int FindMenu(const wxString& title) const;
# 523 "/usr/include/wx-3.1-unofficial/wx/menu.h"
    void Enable(int itemid, bool enable);
    void Check(int itemid, bool check);
    bool IsChecked(int itemid) const;
    bool IsEnabled(int itemid) const;
    virtual bool IsEnabled() const { return wxWindow::IsEnabled(); }

    void SetLabel(int itemid, const wxString &label);
    wxString GetLabel(int itemid) const;

    void SetHelpString(int itemid, const wxString& helpString);
    wxString GetHelpString(int itemid) const;




    wxFrame *GetFrame() const { return m_menuBarFrame; }


    bool IsAttached() const { return GetFrame() != 
# 541 "/usr/include/wx-3.1-unofficial/wx/menu.h" 3 4
                                                  __null
# 541 "/usr/include/wx-3.1-unofficial/wx/menu.h"
                                                      ; }


    virtual void Attach(wxFrame *frame);


    virtual void Detach();


    virtual bool Enable(bool enable = true) override { return wxWindow::Enable(enable); }
    virtual void SetLabel(const wxString& s) override { wxWindow::SetLabel(s); }
    virtual wxString GetLabel() const override { return wxWindow::GetLabel(); }


    virtual bool AcceptsFocusFromKeyboard() const override { return false; }


    virtual void UpdateMenus();

    virtual bool CanBeOutsideClientArea() const override { return true; }
# 577 "/usr/include/wx-3.1-unofficial/wx/menu.h"
protected:

    wxMenuList m_menus;







    wxFrame *m_menuBarFrame;

    private: wxMenuBarBase(const wxMenuBarBase&) = delete; wxMenuBarBase& operator=(const wxMenuBarBase&) = delete;
};
# 607 "/usr/include/wx-3.1-unofficial/wx/menu.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/gtk/menu.h" 1
# 16 "/usr/include/wx-3.1-unofficial/wx/gtk/menu.h"
class __attribute__ ((visibility("default"))) wxMenuBar : public wxMenuBarBase
{
public:

    wxMenuBar();
    wxMenuBar(long style);
    wxMenuBar(size_t n, wxMenu *menus[], const wxString titles[], long style = 0);
    ~wxMenuBar();


    virtual bool Append( wxMenu *menu, const wxString &title ) override;
    virtual bool Insert(size_t pos, wxMenu *menu, const wxString& title) override;
    virtual wxMenu *Replace(size_t pos, wxMenu *menu, const wxString& title) override;
    virtual wxMenu *Remove(size_t pos) override;

    virtual int FindMenuItem(const wxString& menuString,
                             const wxString& itemString) const override;
    virtual wxMenuItem* FindItem( int id, wxMenu **menu = 
# 33 "/usr/include/wx-3.1-unofficial/wx/gtk/menu.h" 3 4
                                                         __null 
# 33 "/usr/include/wx-3.1-unofficial/wx/gtk/menu.h"
                                                              ) const override;

    virtual void EnableTop( size_t pos, bool flag ) override;
    virtual bool IsEnabledTop(size_t pos) const override;
    virtual void SetMenuLabel( size_t pos, const wxString& label ) override;
    virtual wxString GetMenuLabel( size_t pos ) const override;

    void SetLayoutDirection(wxLayoutDirection dir) override;
    wxLayoutDirection GetLayoutDirection() const override;

    virtual void Attach(wxFrame *frame) override;
    virtual void Detach() override;

private:

    void GtkAppend(wxMenu* menu, const wxString& title, int pos = -1);

    void Init(size_t n, wxMenu *menus[], const wxString titles[], long style);



    virtual bool GTKNeedsParent() const override { return false; }

    GtkWidget* m_menubar;

    public:
# 58 "/usr/include/wx-3.1-unofficial/wx/gtk/menu.h"
#pragma GCC diagnostic push
# 58 "/usr/include/wx-3.1-unofficial/wx/gtk/menu.h"
   
# 58 "/usr/include/wx-3.1-unofficial/wx/gtk/menu.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 58 "/usr/include/wx-3.1-unofficial/wx/gtk/menu.h"
    virtual wxClassInfo *GetClassInfo() const;
# 58 "/usr/include/wx-3.1-unofficial/wx/gtk/menu.h"
#pragma GCC diagnostic pop
# 58 "/usr/include/wx-3.1-unofficial/wx/gtk/menu.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};





class __attribute__ ((visibility("default"))) wxMenu : public wxMenuBase
{
public:

    wxMenu(const wxString& title, long style = 0)
        : wxMenuBase(title, style) { Init(); }

    wxMenu(long style = 0) : wxMenuBase(style) { Init(); }

    virtual ~wxMenu();

    void Attach(wxMenuBarBase *menubar) override;

    void SetLayoutDirection(wxLayoutDirection dir);
    wxLayoutDirection GetLayoutDirection() const;


    wxString GetTitle() const;


    virtual void SetTitle(const wxString& title) override;


    GtkWidget *m_menu;
    GtkWidget *m_owner;
    GtkAccelGroup *m_accel;
    bool m_popupShown;

protected:
    virtual wxMenuItem* DoAppend(wxMenuItem *item) override;
    virtual wxMenuItem* DoInsert(size_t pos, wxMenuItem *item) override;
    virtual wxMenuItem* DoRemove(wxMenuItem *item) override;

private:

    void Init();


    void GtkAppend(wxMenuItem* item, int pos = -1);


    public:
# 106 "/usr/include/wx-3.1-unofficial/wx/gtk/menu.h"
#pragma GCC diagnostic push
# 106 "/usr/include/wx-3.1-unofficial/wx/gtk/menu.h"
   
# 106 "/usr/include/wx-3.1-unofficial/wx/gtk/menu.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 106 "/usr/include/wx-3.1-unofficial/wx/gtk/menu.h"
    virtual wxClassInfo *GetClassInfo() const;
# 106 "/usr/include/wx-3.1-unofficial/wx/gtk/menu.h"
#pragma GCC diagnostic pop
# 106 "/usr/include/wx-3.1-unofficial/wx/gtk/menu.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 608 "/usr/include/wx-3.1-unofficial/wx/menu.h" 2
# 622 "/usr/include/wx-3.1-unofficial/wx/menu.h"
class wxMenuInvokingWindowSetter
{
public:



    wxMenuInvokingWindowSetter(wxMenu& menu, wxWindow *win)
        : m_menu(menu)
    {
        menu.SetInvokingWindow(win);
    }


    ~wxMenuInvokingWindowSetter()
    {
        m_menu.SetInvokingWindow(
# 637 "/usr/include/wx-3.1-unofficial/wx/menu.h" 3 4
                                __null
# 637 "/usr/include/wx-3.1-unofficial/wx/menu.h"
                                    );
    }

private:
    wxMenu& m_menu;

    private: wxMenuInvokingWindowSetter(const wxMenuInvokingWindowSetter&) = delete; wxMenuInvokingWindowSetter& operator=(const wxMenuInvokingWindowSetter&) = delete;
};
# 58 "/usr/include/wx-3.1-unofficial/wx/wx.h" 2





# 1 "/usr/include/wx-3.1-unofficial/wx/dialog.h" 1
# 16 "/usr/include/wx-3.1-unofficial/wx/dialog.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/sharedptr.h" 1
# 13 "/usr/include/wx-3.1-unofficial/wx/sharedptr.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/sharedptr.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/atomic.h" 1
# 18 "/usr/include/wx-3.1-unofficial/wx/atomic.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 19 "/usr/include/wx-3.1-unofficial/wx/atomic.h" 2
# 34 "/usr/include/wx-3.1-unofficial/wx/atomic.h"
inline void wxAtomicInc (wxUint32 &value)
{
    __sync_fetch_and_add(&value, 1);
}

inline wxUint32 wxAtomicDec (wxUint32 &value)
{
    return __sync_sub_and_fetch(&value, 1);
}
# 147 "/usr/include/wx-3.1-unofficial/wx/atomic.h"
inline void wxAtomicInc(wxInt32 &value) { wxAtomicInc((wxUint32&)value); }
inline wxInt32 wxAtomicDec(wxInt32 &value) { return wxAtomicDec((wxUint32&)value); }

typedef wxInt32 wxAtomicInt32;






typedef wxAtomicInt32 wxAtomicInt;
# 15 "/usr/include/wx-3.1-unofficial/wx/sharedptr.h" 2





template <class T>
class wxSharedPtr
{
public:
    typedef T element_type;

    explicit wxSharedPtr( T* ptr = 
# 26 "/usr/include/wx-3.1-unofficial/wx/sharedptr.h" 3 4
                                  __null 
# 26 "/usr/include/wx-3.1-unofficial/wx/sharedptr.h"
                                       )
        : m_ref(
# 27 "/usr/include/wx-3.1-unofficial/wx/sharedptr.h" 3 4
               __null
# 27 "/usr/include/wx-3.1-unofficial/wx/sharedptr.h"
                   )
    {
        if (ptr)
            m_ref = new reftype(ptr);
    }

    template<typename Deleter>
    explicit wxSharedPtr(T* ptr, Deleter d)
        : m_ref(
# 35 "/usr/include/wx-3.1-unofficial/wx/sharedptr.h" 3 4
               __null
# 35 "/usr/include/wx-3.1-unofficial/wx/sharedptr.h"
                   )
    {
        if (ptr)
            m_ref = new reftype_with_deleter<Deleter>(ptr, d);
    }

    ~wxSharedPtr() { Release(); }
    wxSharedPtr(const wxSharedPtr& tocopy) { Acquire(tocopy.m_ref); }

    wxSharedPtr& operator=( const wxSharedPtr& tocopy )
    {
        if (this != &tocopy)
        {
            Release();
            Acquire(tocopy.m_ref);
        }
        return *this;
    }

    wxSharedPtr& operator=( T* ptr )
    {
        if (get() != ptr)
        {
            Release();
            if (ptr)
                m_ref = new reftype(ptr);
        }
        return *this;
    }



    typedef T *(wxSharedPtr<T>::*unspecified_bool_type)() const;
    operator unspecified_bool_type() const
    {
        if (m_ref && m_ref->m_ptr)
           return &wxSharedPtr<T>::get;
        else
           return 
# 73 "/usr/include/wx-3.1-unofficial/wx/sharedptr.h" 3 4
                 __null
# 73 "/usr/include/wx-3.1-unofficial/wx/sharedptr.h"
                     ;
    }

    T& operator*() const
    {
        do { if ( m_ref != 
# 78 "/usr/include/wx-3.1-unofficial/wx/sharedptr.h" 3 4
       __null 
# 78 "/usr/include/wx-3.1-unofficial/wx/sharedptr.h"
       ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/sharedptr.h", 78, __FUNCTION__, "m_ref != __null", (const char*)
# 78 "/usr/include/wx-3.1-unofficial/wx/sharedptr.h" 3 4
       __null
# 78 "/usr/include/wx-3.1-unofficial/wx/sharedptr.h"
       ), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );
        do { if ( m_ref->m_ptr != 
# 79 "/usr/include/wx-3.1-unofficial/wx/sharedptr.h" 3 4
       __null 
# 79 "/usr/include/wx-3.1-unofficial/wx/sharedptr.h"
       ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/sharedptr.h", 79, __FUNCTION__, "m_ref->m_ptr != __null", (const char*)
# 79 "/usr/include/wx-3.1-unofficial/wx/sharedptr.h" 3 4
       __null
# 79 "/usr/include/wx-3.1-unofficial/wx/sharedptr.h"
       ), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );
        return *(m_ref->m_ptr);
    }

    T* operator->() const
    {
        do { if ( m_ref != 
# 85 "/usr/include/wx-3.1-unofficial/wx/sharedptr.h" 3 4
       __null 
# 85 "/usr/include/wx-3.1-unofficial/wx/sharedptr.h"
       ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/sharedptr.h", 85, __FUNCTION__, "m_ref != __null", (const char*)
# 85 "/usr/include/wx-3.1-unofficial/wx/sharedptr.h" 3 4
       __null
# 85 "/usr/include/wx-3.1-unofficial/wx/sharedptr.h"
       ), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );
        do { if ( m_ref->m_ptr != 
# 86 "/usr/include/wx-3.1-unofficial/wx/sharedptr.h" 3 4
       __null 
# 86 "/usr/include/wx-3.1-unofficial/wx/sharedptr.h"
       ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/sharedptr.h", 86, __FUNCTION__, "m_ref->m_ptr != __null", (const char*)
# 86 "/usr/include/wx-3.1-unofficial/wx/sharedptr.h" 3 4
       __null
# 86 "/usr/include/wx-3.1-unofficial/wx/sharedptr.h"
       ), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );
        return m_ref->m_ptr;
    }

    T* get() const
    {
        return m_ref ? m_ref->m_ptr : 
# 92 "/usr/include/wx-3.1-unofficial/wx/sharedptr.h" 3 4
                                     __null
# 92 "/usr/include/wx-3.1-unofficial/wx/sharedptr.h"
                                         ;
    }

    void reset( T* ptr = 
# 95 "/usr/include/wx-3.1-unofficial/wx/sharedptr.h" 3 4
                        __null 
# 95 "/usr/include/wx-3.1-unofficial/wx/sharedptr.h"
                             )
    {
        Release();
        if (ptr)
            m_ref = new reftype(ptr);
    }

    template<typename Deleter>
    void reset(T* ptr, Deleter d)
    {
        Release();
        if (ptr)
            m_ref = new reftype_with_deleter<Deleter>(ptr, d);
    }

    bool unique() const { return (m_ref ? m_ref->m_count == 1 : true); }
    long use_count() const { return (m_ref ? (long)m_ref->m_count : 0); }

private:

    struct reftype
    {
        reftype(T* ptr) : m_ptr(ptr), m_count(1) {}
        virtual ~reftype() {}
        virtual void delete_ptr() { delete m_ptr; }

        T* m_ptr;
        wxAtomicInt m_count;
    };

    template<typename Deleter>
    struct reftype_with_deleter : public reftype
    {
        reftype_with_deleter(T* ptr, Deleter d) : reftype(ptr), m_deleter(d) {}
        virtual void delete_ptr() override { m_deleter(this->m_ptr); }

        Deleter m_deleter;
    };

    reftype* m_ref;

    void Acquire(reftype* ref)
    {
        m_ref = ref;
        if (ref)
            wxAtomicInc( ref->m_count );
    }

    void Release()
    {
        if (m_ref)
        {
            if (!wxAtomicDec( m_ref->m_count ))
            {
                m_ref->delete_ptr();
                delete m_ref;
            }
            m_ref = 
# 152 "/usr/include/wx-3.1-unofficial/wx/sharedptr.h" 3 4
                   __null
# 152 "/usr/include/wx-3.1-unofficial/wx/sharedptr.h"
                       ;
        }
    }
};

template <class T, class U>
bool operator == (wxSharedPtr<T> const &a, wxSharedPtr<U> const &b )
{
    return a.get() == b.get();
}

template <class T, class U>
bool operator != (wxSharedPtr<T> const &a, wxSharedPtr<U> const &b )
{
    return a.get() != b.get();
}
# 17 "/usr/include/wx-3.1-unofficial/wx/dialog.h" 2

class wxSizer;
class wxStdDialogButtonSizer;
class wxBoxSizer;
class wxDialogLayoutAdapter;
class wxDialog;
class wxButton;
class wxScrolledWindow;
class wxTextSizerWrapper;
# 48 "/usr/include/wx-3.1-unofficial/wx/dialog.h"
enum wxDialogLayoutAdaptationMode
{
    wxDIALOG_ADAPTATION_MODE_DEFAULT = 0,
    wxDIALOG_ADAPTATION_MODE_ENABLED = 1,
    wxDIALOG_ADAPTATION_MODE_DISABLED = 2
};

enum wxDialogModality
{
    wxDIALOG_MODALITY_NONE = 0,
    wxDIALOG_MODALITY_WINDOW_MODAL = 1,
    wxDIALOG_MODALITY_APP_MODAL = 2
};

extern __attribute__ ((visibility("default"))) const char wxDialogNameStr[];

class __attribute__ ((visibility("default"))) wxDialogBase : public wxNavigationEnabled<wxTopLevelWindow>
{
public:
    wxDialogBase();
    virtual ~wxDialogBase() { }


    virtual int ShowModal() = 0;
    virtual void EndModal(int retCode) = 0;
    virtual bool IsModal() const = 0;


    virtual void ShowWindowModal () ;
    virtual void SendWindowModalDialogEvent ( wxEventType type );

    template<typename Functor>
    void ShowWindowModalThenDo(const Functor& onEndModal);



    void SetReturnCode(int returnCode) { m_returnCode = returnCode; }
    int GetReturnCode() const { return m_returnCode; }



    void SetAffirmativeId(int affirmativeId);
    int GetAffirmativeId() const { return m_affirmativeId; }





    void SetEscapeId(int escapeId);
    int GetEscapeId() const { return m_escapeId; }
# 108 "/usr/include/wx-3.1-unofficial/wx/dialog.h"
    wxWindow *GetParentForModalDialog(wxWindow *parent, long style) const;



    wxWindow *GetParentForModalDialog() const
    {
        return GetParentForModalDialog(GetParent(), GetWindowStyle());
    }





    wxSizer *CreateTextSizer(const wxString& message, int widthMax = -1);



    wxSizer *CreateTextSizer(const wxString& message,
                             wxTextSizerWrapper& wrapper,
                             int widthMax = -1);







    wxSizer *CreateButtonSizer(long flags);



    wxSizer *CreateSeparatedSizer(wxSizer *sizer);







    wxSizer *CreateSeparatedButtonSizer(long flags);


    wxStdDialogButtonSizer *CreateStdDialogButtonSizer( long flags );



    virtual bool DoLayoutAdaptation();


    virtual bool CanDoLayoutAdaptation();



    virtual wxWindow* GetContentWindow() const { return 
# 161 "/usr/include/wx-3.1-unofficial/wx/dialog.h" 3 4
                                                       __null
# 161 "/usr/include/wx-3.1-unofficial/wx/dialog.h"
                                                           ; }


    void AddMainButtonId(wxWindowID id) { m_mainButtonIds.Add((int) id); }
    wxArrayInt& GetMainButtonIds() { return m_mainButtonIds; }


    bool IsMainButtonId(wxWindowID id) const { return (m_mainButtonIds.Index((int) id) != (-1)); }





    void SetLayoutAdaptationLevel(int level) { m_layoutAdaptationLevel = level; }
    int GetLayoutAdaptationLevel() const { return m_layoutAdaptationLevel; }


    void SetLayoutAdaptationMode(wxDialogLayoutAdaptationMode mode) { m_layoutAdaptationMode = mode; }
    wxDialogLayoutAdaptationMode GetLayoutAdaptationMode() const { return m_layoutAdaptationMode; }


    void SetLayoutAdaptationDone(bool adaptationDone) { m_layoutAdaptationDone = adaptationDone; }
    bool GetLayoutAdaptationDone() const { return m_layoutAdaptationDone; }


    static wxDialogLayoutAdapter* SetLayoutAdapter(wxDialogLayoutAdapter* adapter);
    static wxDialogLayoutAdapter* GetLayoutAdapter() { return sm_layoutAdapter; }


    static bool IsLayoutAdaptationEnabled() { return sm_layoutAdaptation; }
    static void EnableLayoutAdaptation(bool enable) { sm_layoutAdaptation = enable; }


    virtual wxDialogModality GetModality() const;
protected:



    bool EmulateButtonClickIfPresent(int id);







    virtual bool IsEscapeKey(const wxKeyEvent& event);



    void EndDialog(int rc);



    void AcceptAndClose();


    int m_returnCode;


    int m_affirmativeId;


    int m_escapeId;


    bool m_layoutAdaptationDone;



    wxArrayInt m_mainButtonIds;


    int m_layoutAdaptationLevel;


    wxDialogLayoutAdaptationMode m_layoutAdaptationMode;


    static wxDialogLayoutAdapter* sm_layoutAdapter;


    static bool sm_layoutAdaptation;

private:


    wxWindow *CheckIfCanBeUsedAsParent(wxWindow *parent) const;






    bool SendCloseButtonClickEvent();


    void OnCharHook(wxKeyEvent& event);


    void OnCloseWindow(wxCloseEvent& event);


    void OnButton(wxCommandEvent& event);


    void OnSysColourChanged(wxSysColourChangedEvent& event);


    private: wxDialogBase(const wxDialogBase&) = delete; wxDialogBase& operator=(const wxDialogBase&) = delete;
    private: static const wxEventTableEntry sm_eventTableEntries[]; protected:
# 271 "/usr/include/wx-3.1-unofficial/wx/dialog.h"
#pragma GCC diagnostic push
# 271 "/usr/include/wx-3.1-unofficial/wx/dialog.h"
   
# 271 "/usr/include/wx-3.1-unofficial/wx/dialog.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 271 "/usr/include/wx-3.1-unofficial/wx/dialog.h"
    const wxEventTable* GetEventTable() const; wxEventHashTable& GetEventHashTable() const;
# 271 "/usr/include/wx-3.1-unofficial/wx/dialog.h"
#pragma GCC diagnostic pop
# 271 "/usr/include/wx-3.1-unofficial/wx/dialog.h"
    static const wxEventTable sm_eventTable; static wxEventHashTable sm_eventHashTable;
};
# 281 "/usr/include/wx-3.1-unofficial/wx/dialog.h"
class __attribute__ ((visibility("default"))) wxDialogLayoutAdapter: public wxObject
{
    public:
# 283 "/usr/include/wx-3.1-unofficial/wx/dialog.h"
#pragma GCC diagnostic push
# 283 "/usr/include/wx-3.1-unofficial/wx/dialog.h"
   
# 283 "/usr/include/wx-3.1-unofficial/wx/dialog.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 283 "/usr/include/wx-3.1-unofficial/wx/dialog.h"
    virtual wxClassInfo *GetClassInfo() const;
# 283 "/usr/include/wx-3.1-unofficial/wx/dialog.h"
#pragma GCC diagnostic pop
# 283 "/usr/include/wx-3.1-unofficial/wx/dialog.h"
    static wxClassInfo ms_classInfo;
public:
    wxDialogLayoutAdapter() {}


    virtual bool CanDoLayoutAdaptation(wxDialog* dialog) = 0;


    virtual bool DoLayoutAdaptation(wxDialog* dialog) = 0;
};






class __attribute__ ((visibility("default"))) wxStandardDialogLayoutAdapter: public wxDialogLayoutAdapter
{
    public:
# 301 "/usr/include/wx-3.1-unofficial/wx/dialog.h"
#pragma GCC diagnostic push
# 301 "/usr/include/wx-3.1-unofficial/wx/dialog.h"
   
# 301 "/usr/include/wx-3.1-unofficial/wx/dialog.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 301 "/usr/include/wx-3.1-unofficial/wx/dialog.h"
    virtual wxClassInfo *GetClassInfo() const;
# 301 "/usr/include/wx-3.1-unofficial/wx/dialog.h"
#pragma GCC diagnostic pop
# 301 "/usr/include/wx-3.1-unofficial/wx/dialog.h"
    static wxClassInfo ms_classInfo;
public:
    wxStandardDialogLayoutAdapter() {}




    virtual bool CanDoLayoutAdaptation(wxDialog* dialog) override;


    virtual bool DoLayoutAdaptation(wxDialog* dialog) override;




    virtual wxScrolledWindow* CreateScrolledWindow(wxWindow* parent);



    virtual wxSizer* FindButtonSizer(bool stdButtonSizer, wxDialog* dialog, wxSizer* sizer, int& retBorder, int accumlatedBorder = 0);


    virtual bool IsOrdinaryButtonSizer(wxDialog* dialog, wxBoxSizer* sizer);


    virtual bool IsStandardButton(wxDialog* dialog, wxButton* button);


    virtual bool FindLooseButtons(wxDialog* dialog, wxStdDialogButtonSizer* buttonSizer, wxSizer* sizer, int& count);



    virtual void ReparentControls(wxWindow* parent, wxWindow* reparentTo, wxSizer* buttonSizer = 
# 333 "/usr/include/wx-3.1-unofficial/wx/dialog.h" 3 4
                                                                                                __null
# 333 "/usr/include/wx-3.1-unofficial/wx/dialog.h"
                                                                                                    );
    static void DoReparentControls(wxWindow* parent, wxWindow* reparentTo, wxSizer* buttonSizer = 
# 334 "/usr/include/wx-3.1-unofficial/wx/dialog.h" 3 4
                                                                                                 __null
# 334 "/usr/include/wx-3.1-unofficial/wx/dialog.h"
                                                                                                     );



    virtual bool FitWithScrolling(wxDialog* dialog, wxScrolledWindow* scrolledWindow);
    virtual bool FitWithScrolling(wxDialog* dialog, wxWindowList& windows);
    static bool DoFitWithScrolling(wxDialog* dialog, wxScrolledWindow* scrolledWindow);
    static bool DoFitWithScrolling(wxDialog* dialog, wxWindowList& windows);


    virtual int MustScroll(wxDialog* dialog, wxSize& windowSize, wxSize& displaySize);
    static int DoMustScroll(wxDialog* dialog, wxSize& windowSize, wxSize& displaySize);
};
# 356 "/usr/include/wx-3.1-unofficial/wx/dialog.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/gtk/dialog.h" 1
# 13 "/usr/include/wx-3.1-unofficial/wx/gtk/dialog.h"
class wxGUIEventLoop;





class __attribute__ ((visibility("default"))) wxDialog: public wxDialogBase
{
public:
    wxDialog() { Init(); }
    wxDialog( wxWindow *parent, wxWindowID id,
            const wxString &title,
            const wxPoint &pos = wxDefaultPosition,
            const wxSize &size = wxDefaultSize,
            long style = (0x20000000 | 0x0800 | 0x1000),
            const wxString &name = wxString::FromAscii(wxDialogNameStr) );
    bool Create( wxWindow *parent, wxWindowID id,
            const wxString &title,
            const wxPoint &pos = wxDefaultPosition,
            const wxSize &size = wxDefaultSize,
            long style = (0x20000000 | 0x0800 | 0x1000),
            const wxString &name = wxString::FromAscii(wxDialogNameStr) );
    virtual ~wxDialog();

    virtual bool Show( bool show = true ) override;
    virtual int ShowModal() override;
    virtual void EndModal( int retCode ) override;
    virtual bool IsModal() const override;

private:

    void Init();

    bool m_modalShowing;
    wxGUIEventLoop *m_modalLoop;

    public:
# 49 "/usr/include/wx-3.1-unofficial/wx/gtk/dialog.h"
#pragma GCC diagnostic push
# 49 "/usr/include/wx-3.1-unofficial/wx/gtk/dialog.h"
   
# 49 "/usr/include/wx-3.1-unofficial/wx/gtk/dialog.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 49 "/usr/include/wx-3.1-unofficial/wx/gtk/dialog.h"
    virtual wxClassInfo *GetClassInfo() const;
# 49 "/usr/include/wx-3.1-unofficial/wx/gtk/dialog.h"
#pragma GCC diagnostic pop
# 49 "/usr/include/wx-3.1-unofficial/wx/gtk/dialog.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 357 "/usr/include/wx-3.1-unofficial/wx/dialog.h" 2
# 366 "/usr/include/wx-3.1-unofficial/wx/dialog.h"
class __attribute__ ((visibility("default"))) wxWindowModalDialogEvent : public wxCommandEvent
{
public:
    wxWindowModalDialogEvent (wxEventType commandType = wxEVT_NULL, int id = 0)
        : wxCommandEvent(commandType, id) { }

    wxDialog *GetDialog() const
        { return wxCheckCast<wxDialog>(GetEventObject()); }

    int GetReturnCode() const
        { return GetDialog()->GetReturnCode(); }

    virtual wxEvent *Clone() const override { return new wxWindowModalDialogEvent (*this); }

private:
    private: wxWindowModalDialogEvent& operator=(const wxWindowModalDialogEvent&) = delete; public:
# 381 "/usr/include/wx-3.1-unofficial/wx/dialog.h"
#pragma GCC diagnostic push
# 381 "/usr/include/wx-3.1-unofficial/wx/dialog.h"
   
# 381 "/usr/include/wx-3.1-unofficial/wx/dialog.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 381 "/usr/include/wx-3.1-unofficial/wx/dialog.h"
    virtual wxClassInfo *GetClassInfo() const;
# 381 "/usr/include/wx-3.1-unofficial/wx/dialog.h"
#pragma GCC diagnostic pop
# 381 "/usr/include/wx-3.1-unofficial/wx/dialog.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};

extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxWindowModalDialogEvent > wxEVT_WINDOW_MODAL_DIALOG_CLOSED;

typedef void (wxEvtHandler::*wxWindowModalDialogEventFunction)(wxWindowModalDialogEvent &);







template<typename Functor>
class wxWindowModalDialogEventFunctor
{
public:
    wxWindowModalDialogEventFunctor(const Functor& f)
        : m_f(new Functor(f))
    {}

    void operator()(wxWindowModalDialogEvent& event)
    {
        if ( m_f )
        {



            wxSharedPtr<Functor> functor(m_f);
            m_f.reset();

            (*functor)(event.GetReturnCode());
        }
        else
        {
            event.Skip();
        }
    }

private:
    wxSharedPtr<Functor> m_f;
};

template<typename Functor>
void wxDialogBase::ShowWindowModalThenDo(const Functor& onEndModal)
{
    Bind(wxEVT_WINDOW_MODAL_DIALOG_CLOSED,
         wxWindowModalDialogEventFunctor<Functor>(onEndModal));
    ShowWindowModal();
}
# 64 "/usr/include/wx-3.1-unofficial/wx/wx.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/settings.h" 1
# 17 "/usr/include/wx-3.1-unofficial/wx/settings.h"
class wxWindow;





enum wxSystemFont
{
    wxSYS_OEM_FIXED_FONT = 10,
    wxSYS_ANSI_FIXED_FONT,
    wxSYS_ANSI_VAR_FONT,
    wxSYS_SYSTEM_FONT,
    wxSYS_DEVICE_DEFAULT_FONT,



    wxSYS_DEFAULT_PALETTE,



    wxSYS_SYSTEM_FIXED_FONT,

    wxSYS_DEFAULT_GUI_FONT,


    wxSYS_ICONTITLE_FONT = wxSYS_DEFAULT_GUI_FONT
};





enum wxSystemColour
{
    wxSYS_COLOUR_SCROLLBAR,
    wxSYS_COLOUR_DESKTOP,
    wxSYS_COLOUR_ACTIVECAPTION,
    wxSYS_COLOUR_INACTIVECAPTION,
    wxSYS_COLOUR_MENU,
    wxSYS_COLOUR_WINDOW,
    wxSYS_COLOUR_WINDOWFRAME,
    wxSYS_COLOUR_MENUTEXT,
    wxSYS_COLOUR_WINDOWTEXT,
    wxSYS_COLOUR_CAPTIONTEXT,
    wxSYS_COLOUR_ACTIVEBORDER,
    wxSYS_COLOUR_INACTIVEBORDER,
    wxSYS_COLOUR_APPWORKSPACE,
    wxSYS_COLOUR_HIGHLIGHT,
    wxSYS_COLOUR_HIGHLIGHTTEXT,
    wxSYS_COLOUR_BTNFACE,
    wxSYS_COLOUR_BTNSHADOW,
    wxSYS_COLOUR_GRAYTEXT,
    wxSYS_COLOUR_BTNTEXT,
    wxSYS_COLOUR_INACTIVECAPTIONTEXT,
    wxSYS_COLOUR_BTNHIGHLIGHT,
    wxSYS_COLOUR_3DDKSHADOW,
    wxSYS_COLOUR_3DLIGHT,
    wxSYS_COLOUR_INFOTEXT,
    wxSYS_COLOUR_INFOBK,
    wxSYS_COLOUR_LISTBOX,
    wxSYS_COLOUR_HOTLIGHT,
    wxSYS_COLOUR_GRADIENTACTIVECAPTION,
    wxSYS_COLOUR_GRADIENTINACTIVECAPTION,
    wxSYS_COLOUR_MENUHILIGHT,
    wxSYS_COLOUR_MENUBAR,
    wxSYS_COLOUR_LISTBOXTEXT,
    wxSYS_COLOUR_LISTBOXHIGHLIGHTTEXT,

    wxSYS_COLOUR_MAX,


    wxSYS_COLOUR_BACKGROUND = wxSYS_COLOUR_DESKTOP,
    wxSYS_COLOUR_3DFACE = wxSYS_COLOUR_BTNFACE,
    wxSYS_COLOUR_3DSHADOW = wxSYS_COLOUR_BTNSHADOW,
    wxSYS_COLOUR_BTNHILIGHT = wxSYS_COLOUR_BTNHIGHLIGHT,
    wxSYS_COLOUR_3DHIGHLIGHT = wxSYS_COLOUR_BTNHIGHLIGHT,
    wxSYS_COLOUR_3DHILIGHT = wxSYS_COLOUR_BTNHIGHLIGHT,
    wxSYS_COLOUR_FRAMEBK = wxSYS_COLOUR_BTNFACE
};





enum wxSystemMetric
{
    wxSYS_MOUSE_BUTTONS = 1,
    wxSYS_BORDER_X,
    wxSYS_BORDER_Y,
    wxSYS_CURSOR_X,
    wxSYS_CURSOR_Y,
    wxSYS_DCLICK_X,
    wxSYS_DCLICK_Y,
    wxSYS_DRAG_X,
    wxSYS_DRAG_Y,
    wxSYS_EDGE_X,
    wxSYS_EDGE_Y,
    wxSYS_HSCROLL_ARROW_X,
    wxSYS_HSCROLL_ARROW_Y,
    wxSYS_HTHUMB_X,
    wxSYS_ICON_X,
    wxSYS_ICON_Y,
    wxSYS_ICONSPACING_X,
    wxSYS_ICONSPACING_Y,
    wxSYS_WINDOWMIN_X,
    wxSYS_WINDOWMIN_Y,
    wxSYS_SCREEN_X,
    wxSYS_SCREEN_Y,
    wxSYS_FRAMESIZE_X,
    wxSYS_FRAMESIZE_Y,
    wxSYS_SMALLICON_X,
    wxSYS_SMALLICON_Y,
    wxSYS_HSCROLL_Y,
    wxSYS_VSCROLL_X,
    wxSYS_VSCROLL_ARROW_X,
    wxSYS_VSCROLL_ARROW_Y,
    wxSYS_VTHUMB_Y,
    wxSYS_CAPTION_Y,
    wxSYS_MENU_Y,
    wxSYS_NETWORK_PRESENT,
    wxSYS_PENWINDOWS_PRESENT,
    wxSYS_SHOW_SOUNDS,
    wxSYS_SWAP_BUTTONS,
    wxSYS_DCLICK_MSEC,
    wxSYS_CARET_ON_MSEC,
    wxSYS_CARET_OFF_MSEC,
    wxSYS_CARET_TIMEOUT_MSEC
};


enum wxSystemFeature
{
    wxSYS_CAN_DRAW_FRAME_DECORATIONS = 1,
    wxSYS_CAN_ICONIZE_FRAME,
    wxSYS_TABLET_PRESENT
};


enum wxSystemScreenType
{
    wxSYS_SCREEN_NONE = 0,

    wxSYS_SCREEN_TINY,
    wxSYS_SCREEN_PDA,
    wxSYS_SCREEN_SMALL,
    wxSYS_SCREEN_DESKTOP
};





class __attribute__ ((visibility("default"))) wxSystemAppearance
{
public:

    wxString GetName() const;



    bool IsDark() const;




    bool IsUsingDarkBackground() const;

private:
    friend class wxSystemSettingsNative;



    wxSystemAppearance() { }






};
# 209 "/usr/include/wx-3.1-unofficial/wx/settings.h"
class __attribute__ ((visibility("default"))) wxSystemSettingsNative
{
public:

    static wxColour GetColour(wxSystemColour index);


    static wxFont GetFont(wxSystemFont index);


    static int GetMetric(wxSystemMetric index, const wxWindow* win = 
# 219 "/usr/include/wx-3.1-unofficial/wx/settings.h" 3 4
                                                                    __null
# 219 "/usr/include/wx-3.1-unofficial/wx/settings.h"
                                                                        );


    static wxSystemAppearance GetAppearance();


    static bool HasFeature(wxSystemFeature index);
};





class __attribute__ ((visibility("default"))) wxSystemSettings : public wxSystemSettingsNative
{
public:
# 248 "/usr/include/wx-3.1-unofficial/wx/settings.h"
    static wxSystemScreenType GetScreenType();


    static void SetScreenType( wxSystemScreenType screen );


    static wxSystemScreenType ms_screen;

};
# 65 "/usr/include/wx-3.1-unofficial/wx/wx.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/msgdlg.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/msgdlg.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/msgdlg.h" 2




# 1 "/usr/include/wx-3.1-unofficial/wx/stockitem.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/stockitem.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/stockitem.h" 2
# 24 "/usr/include/wx-3.1-unofficial/wx/stockitem.h"
__attribute__ ((visibility("default"))) bool wxIsStockID(wxWindowID id);



__attribute__ ((visibility("default"))) bool wxIsStockLabel(wxWindowID id, const wxString& label);

enum wxStockLabelQueryFlag
{
    wxSTOCK_NOFLAGS = 0,

    wxSTOCK_WITH_MNEMONIC = 1,
    wxSTOCK_WITH_ACCELERATOR = 2,



    wxSTOCK_WITHOUT_ELLIPSIS = 4,



    wxSTOCK_FOR_BUTTON = wxSTOCK_WITHOUT_ELLIPSIS | wxSTOCK_WITH_MNEMONIC
};





__attribute__ ((visibility("default"))) wxString wxGetStockLabel(wxWindowID id,
                                     long flags = wxSTOCK_WITH_MNEMONIC);





    __attribute__ ((visibility("default"))) wxAcceleratorEntry wxGetStockAccelerator(wxWindowID id);





enum wxStockHelpStringClient
{
    wxSTOCK_MENU
};


__attribute__ ((visibility("default"))) wxString wxGetStockHelpString(wxWindowID id,
                                          wxStockHelpStringClient client = wxSTOCK_MENU);





__attribute__ ((visibility("default"))) const char *wxGetStockGtkID(wxWindowID id);
# 20 "/usr/include/wx-3.1-unofficial/wx/msgdlg.h" 2

extern __attribute__ ((visibility("default"))) const char wxMessageBoxCaptionStr[];





class __attribute__ ((visibility("default"))) wxMessageDialogBase : public wxDialog
{
public:


    class ButtonLabel
    {
    public:


        ButtonLabel(int stockId)
            : m_stockId(stockId)
        {
            do { if ( wxIsStockID(stockId) ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/msgdlg.h", 40, __FUNCTION__, "wxIsStockID(stockId)", "invalid stock id"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );
        }

        ButtonLabel(const wxString& label)
            : m_label(label), m_stockId(wxID_NONE)
        {
        }


        ButtonLabel(const char *label)
            : m_label(label), m_stockId(wxID_NONE)
        {
        }


        ButtonLabel(const wchar_t *label)
            : m_label(label), m_stockId(wxID_NONE)
        {
        }

        ButtonLabel(const wxCStrData& label)
            : m_label(label), m_stockId(wxID_NONE)
        {
        }






        wxString GetAsString() const
        {
            return m_stockId == wxID_NONE
                    ? m_label
                    : wxGetStockLabel(m_stockId, wxSTOCK_FOR_BUTTON);
        }


        int GetStockId() const { return m_stockId; }

    private:

        const wxString m_label;


        const int m_stockId;
    };


    wxMessageDialogBase() { m_dialogStyle = 0; }
    wxMessageDialogBase(wxWindow *parent,
                        const wxString& message,
                        const wxString& caption,
                        long style)
        : m_message(message),
          m_caption(caption)
    {
        m_parent = GetParentForModalDialog(parent, style);
        SetMessageDialogStyle(style);
    }


    virtual ~wxMessageDialogBase() { }

    wxString GetCaption() const { return m_caption; }



    virtual void SetTitle(const wxString& title) override { m_caption = title; }
    virtual wxString GetTitle() const override { return m_caption; }


    virtual void SetMessage(const wxString& message)
    {
        m_message = message;
    }

    wxString GetMessage() const { return m_message; }

    void SetExtendedMessage(const wxString& extendedMessage)
    {
        m_extendedMessage = extendedMessage;
    }

    wxString GetExtendedMessage() const { return m_extendedMessage; }


    void SetMessageDialogStyle(long style)
    {
        do { if ( ((style & (0x00000002 | 0x00000008)) == (0x00000002 | 0x00000008)) || !(style & (0x00000002 | 0x00000008)) ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/msgdlg.h", 129, __FUNCTION__, "((style & (0x00000002 | 0x00000008)) == (0x00000002 | 0x00000008)) || !(style & (0x00000002 | 0x00000008))", "wxYES and wxNO may only be used together"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 )
                                                                  ;

        do { if ( !(style & 0x00000002) || !(style & 0x00000004) ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/msgdlg.h", 132, __FUNCTION__, "!(style & 0x00000002) || !(style & 0x00000004)", "wxOK and wxYES/wxNO can't be used together"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 )
                                                                    ;





        if ( !(style & 0x00000002) && !(style & 0x00000004) )
            style |= 0x00000004;

        do { if ( (style & wxID_OK) != wxID_OK ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/msgdlg.h", 142, __FUNCTION__, "(style & wxID_OK) != wxID_OK", "wxMessageBox: Did you mean wxOK (and not wxID_OK)?"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 )
                                                                            ;

        do { if ( !(style & 0x00000080) || (style & 0x00000008) ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/msgdlg.h", 145, __FUNCTION__, "!(style & 0x00000080) || (style & 0x00000008)", "wxNO_DEFAULT is invalid without wxNO"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 )
                                                              ;

        do { if ( !(style & 0x80000000) || (style & 0x00000010) ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/msgdlg.h", 148, __FUNCTION__, "!(style & 0x80000000) || (style & 0x00000010)", "wxCANCEL_DEFAULT is invalid without wxCANCEL"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 )
                                                                      ;

        do { if ( !(style & 0x80000000) || !(style & 0x00000080) ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/msgdlg.h", 151, __FUNCTION__, "!(style & 0x80000000) || !(style & 0x00000080)", "only one default button can be specified"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 )
                                                                  ;

        m_dialogStyle = style;
    }

    long GetMessageDialogStyle() const { return m_dialogStyle; }


    virtual bool SetYesNoLabels(const ButtonLabel& yes,const ButtonLabel& no)
    {
        DoSetCustomLabel(m_yes, yes);
        DoSetCustomLabel(m_no, no);
        return true;
    }

    virtual bool SetYesNoCancelLabels(const ButtonLabel& yes,
                                      const ButtonLabel& no,
                                      const ButtonLabel& cancel)
    {
        DoSetCustomLabel(m_yes, yes);
        DoSetCustomLabel(m_no, no);
        DoSetCustomLabel(m_cancel, cancel);
        return true;
    }

    virtual bool SetOKLabel(const ButtonLabel& ok)
    {
        DoSetCustomLabel(m_ok, ok);
        return true;
    }

    virtual bool SetOKCancelLabels(const ButtonLabel& ok,
                                   const ButtonLabel& cancel)
    {
        DoSetCustomLabel(m_ok, ok);
        DoSetCustomLabel(m_cancel, cancel);
        return true;
    }

    virtual bool SetHelpLabel(const ButtonLabel& help)
    {
        DoSetCustomLabel(m_help, help);
        return true;
    }

    bool HasCustomLabels() const
    {
        return !(m_ok.empty() && m_cancel.empty() && m_help.empty() &&
                 m_yes.empty() && m_no.empty());
    }




    wxString GetYesLabel() const
        { return m_yes.empty() ? GetDefaultYesLabel() : m_yes; }
    wxString GetNoLabel() const
        { return m_no.empty() ? GetDefaultNoLabel() : m_no; }
    wxString GetOKLabel() const
        { return m_ok.empty() ? GetDefaultOKLabel() : m_ok; }
    wxString GetCancelLabel() const
        { return m_cancel.empty() ? GetDefaultCancelLabel() : m_cancel; }
    wxString GetHelpLabel() const
        { return m_help.empty() ? GetDefaultHelpLabel() : m_help; }




    virtual long GetEffectiveIcon() const
    {
        if ( m_dialogStyle & 0x00040000 )
            return 0x00040000;
        else if ( m_dialogStyle & 0x00000200 )
            return 0x00000200;
        else if ( m_dialogStyle & 0x00000100 )
            return 0x00000100;
        else if ( m_dialogStyle & 0x00000400 )
            return 0x00000400;
        else if ( m_dialogStyle & 0x00000800 )
            return 0x00000800;
        else if ( m_dialogStyle & 0x00000002 )
            return 0x00000400;
        else
            return 0x00000800;
    }

protected:


    wxString GetFullMessage() const
    {
        wxString msg = m_message;
        if ( !m_extendedMessage.empty() )
            msg << wxString::FromAscii("\n\n") << m_extendedMessage;

        return msg;
    }

    wxString m_message,
             m_extendedMessage,
             m_caption;
    long m_dialogStyle;





    virtual void DoSetCustomLabel(wxString& var, const ButtonLabel& label)
    {
        var = label.GetAsString();
    }






    const wxString& GetCustomYesLabel() const { return m_yes; }
    const wxString& GetCustomNoLabel() const { return m_no; }
    const wxString& GetCustomOKLabel() const { return m_ok; }
    const wxString& GetCustomHelpLabel() const { return m_help; }
    const wxString& GetCustomCancelLabel() const { return m_cancel; }

private:


    virtual wxString GetDefaultYesLabel() const { return wxGetTranslation("Yes"); }
    virtual wxString GetDefaultNoLabel() const { return wxGetTranslation("No"); }
    virtual wxString GetDefaultOKLabel() const { return wxGetTranslation("OK"); }
    virtual wxString GetDefaultCancelLabel() const { return wxGetTranslation("Cancel"); }
    virtual wxString GetDefaultHelpLabel() const { return wxGetTranslation("Help"); }



    wxString m_yes,
             m_no,
             m_ok,
             m_cancel,
             m_help;

    private: wxMessageDialogBase(const wxMessageDialogBase&) = delete; wxMessageDialogBase& operator=(const wxMessageDialogBase&) = delete;
};

# 1 "/usr/include/wx-3.1-unofficial/wx/generic/msgdlgg.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/generic/msgdlgg.h"
class wxSizer;

class __attribute__ ((visibility("default"))) wxGenericMessageDialog : public wxMessageDialogBase
{
public:
    wxGenericMessageDialog(wxWindow *parent,
                           const wxString& message,
                           const wxString& caption = wxString::FromAscii(wxMessageBoxCaptionStr),
                           long style = 0x00000004|wxCENTRE,
                           const wxPoint& pos = wxDefaultPosition);

    virtual int ShowModal() override;

protected:


    void DoCreateMsgdialog();

    void OnYes(wxCommandEvent& event);
    void OnNo(wxCommandEvent& event);
    void OnHelp(wxCommandEvent& event);
    void OnCancel(wxCommandEvent& event);


    virtual void AddMessageDialogCheckBox(wxSizer *) { }
    virtual void AddMessageDialogDetails(wxSizer *) { }

private:




    wxSizer *CreateMsgDlgButtonSizer();

    wxPoint m_pos;
    bool m_created;

    private: static const wxEventTableEntry sm_eventTableEntries[]; protected:
# 51 "/usr/include/wx-3.1-unofficial/wx/generic/msgdlgg.h"
#pragma GCC diagnostic push
# 51 "/usr/include/wx-3.1-unofficial/wx/generic/msgdlgg.h"
   
# 51 "/usr/include/wx-3.1-unofficial/wx/generic/msgdlgg.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 51 "/usr/include/wx-3.1-unofficial/wx/generic/msgdlgg.h"
    const wxEventTable* GetEventTable() const; wxEventHashTable& GetEventHashTable() const;
# 51 "/usr/include/wx-3.1-unofficial/wx/generic/msgdlgg.h"
#pragma GCC diagnostic pop
# 51 "/usr/include/wx-3.1-unofficial/wx/generic/msgdlgg.h"
    static const wxEventTable sm_eventTable; static wxEventHashTable sm_eventHashTable;
    public:
# 52 "/usr/include/wx-3.1-unofficial/wx/generic/msgdlgg.h"
#pragma GCC diagnostic push
# 52 "/usr/include/wx-3.1-unofficial/wx/generic/msgdlgg.h"
   
# 52 "/usr/include/wx-3.1-unofficial/wx/generic/msgdlgg.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 52 "/usr/include/wx-3.1-unofficial/wx/generic/msgdlgg.h"
    virtual wxClassInfo *GetClassInfo() const;
# 52 "/usr/include/wx-3.1-unofficial/wx/generic/msgdlgg.h"
#pragma GCC diagnostic pop
# 52 "/usr/include/wx-3.1-unofficial/wx/generic/msgdlgg.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 296 "/usr/include/wx-3.1-unofficial/wx/msgdlg.h" 2
# 307 "/usr/include/wx-3.1-unofficial/wx/msgdlg.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/gtk/msgdlg.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/gtk/msgdlg.h"
class __attribute__ ((visibility("default"))) wxMessageDialog : public wxMessageDialogBase
{
public:
    wxMessageDialog(wxWindow *parent, const wxString& message,
                    const wxString& caption = wxString::FromAscii(wxMessageBoxCaptionStr),
                    long style = 0x00000004|wxCENTRE,
                    const wxPoint& pos = wxDefaultPosition);

    virtual int ShowModal() override;
    virtual bool Show(bool = true) override { return false; }

protected:


    virtual void DoSetSize(int , int ,
                           int , int ,
                           int = (0x0001|0x0002)) override {}
    virtual void DoMoveWindow(int , int ,
                              int , int ) override {}

    virtual void DoSetCustomLabel(wxString& var, const ButtonLabel& label) override;

private:

    virtual wxString GetDefaultYesLabel() const override;
    virtual wxString GetDefaultNoLabel() const override;
    virtual wxString GetDefaultOKLabel() const override;
    virtual wxString GetDefaultCancelLabel() const override;
    virtual wxString GetDefaultHelpLabel() const override;



    void GTKCreateMsgDialog();

    public:
# 48 "/usr/include/wx-3.1-unofficial/wx/gtk/msgdlg.h"
#pragma GCC diagnostic push
# 48 "/usr/include/wx-3.1-unofficial/wx/gtk/msgdlg.h"
   
# 48 "/usr/include/wx-3.1-unofficial/wx/gtk/msgdlg.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 48 "/usr/include/wx-3.1-unofficial/wx/gtk/msgdlg.h"
    virtual wxClassInfo *GetClassInfo() const;
# 48 "/usr/include/wx-3.1-unofficial/wx/gtk/msgdlg.h"
#pragma GCC diagnostic pop
# 48 "/usr/include/wx-3.1-unofficial/wx/gtk/msgdlg.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 308 "/usr/include/wx-3.1-unofficial/wx/msgdlg.h" 2
# 318 "/usr/include/wx-3.1-unofficial/wx/msgdlg.h"
int __attribute__ ((visibility("default"))) wxMessageBox(const wxString& message,
                             const wxString& caption = wxString::FromAscii(wxMessageBoxCaptionStr),
                             long style = 0x00000004 | wxCENTRE,
                             wxWindow *parent = 
# 321 "/usr/include/wx-3.1-unofficial/wx/msgdlg.h" 3 4
                                               __null
# 321 "/usr/include/wx-3.1-unofficial/wx/msgdlg.h"
                                                   ,
                             int x = wxDefaultCoord, int y = wxDefaultCoord);
# 66 "/usr/include/wx-3.1-unofficial/wx/wx.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/dataobj.h" 1
# 17 "/usr/include/wx-3.1-unofficial/wx/dataobj.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 18 "/usr/include/wx-3.1-unofficial/wx/dataobj.h" 2
# 81 "/usr/include/wx-3.1-unofficial/wx/dataobj.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/gtk/dataform.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/gtk/dataform.h"
class __attribute__ ((visibility("default"))) wxDataFormat
{
public:

    typedef GdkAtom NativeFormat;

    wxDataFormat();
    wxDataFormat( wxDataFormatId type );
    wxDataFormat( NativeFormat format );



    wxDataFormat( const wxString& id ) { InitFromString(id); }

    wxDataFormat( const char *id ) { InitFromString(id); }

    wxDataFormat( const wchar_t *id ) { InitFromString(id); }
    wxDataFormat( const wxCStrData& id ) { InitFromString(id); }

    wxDataFormat& operator=(NativeFormat format)
        { SetId(format); return *this; }


    bool operator==(NativeFormat format) const
        { return m_format == (NativeFormat)format; }
    bool operator!=(NativeFormat format) const
        { return m_format != (NativeFormat)format; }
    bool operator==(wxDataFormatId format) const
        { return m_type == (wxDataFormatId)format; }
    bool operator!=(wxDataFormatId format) const
        { return m_type != (wxDataFormatId)format; }




    NativeFormat GetFormatId() const { return m_format; }
    operator NativeFormat() const { return m_format; }

    void SetId( NativeFormat format );



    wxString GetId() const;
    void SetId( const wxString& id );


    wxDataFormatId GetType() const;
    void SetType( wxDataFormatId type );

private:

    void InitFromString(const wxString& id);

    wxDataFormatId m_type;
    NativeFormat m_format;

    void PrepareFormats();
};
# 82 "/usr/include/wx-3.1-unofficial/wx/dataobj.h" 2
# 94 "/usr/include/wx-3.1-unofficial/wx/dataobj.h"
extern __attribute__ ((visibility("default"))) const wxDataFormat& wxFormatInvalid;
# 116 "/usr/include/wx-3.1-unofficial/wx/dataobj.h"
class __attribute__ ((visibility("default"))) wxDataObjectBase
{
public:
    enum Direction
    {
        Get = 0x01,
        Set = 0x02,
        Both = 0x03
    };


    virtual ~wxDataObjectBase();


    virtual wxDataFormat GetPreferredFormat(Direction dir = Get) const = 0;


    virtual size_t GetFormatCount(Direction dir = Get) const = 0;


    virtual void GetAllFormats(wxDataFormat *formats,
                               Direction dir = Get) const = 0;


    virtual size_t GetDataSize(const wxDataFormat& format) const = 0;



    virtual bool GetDataHere(const wxDataFormat& format, void *buf) const = 0;



    virtual bool SetData(const wxDataFormat& ,
                         size_t , const void * )
    {
        return false;
    }


    bool IsSupported(const wxDataFormat& format, Direction dir = Get) const;
};
# 169 "/usr/include/wx-3.1-unofficial/wx/dataobj.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/gtk/dataobj.h" 1
# 16 "/usr/include/wx-3.1-unofficial/wx/gtk/dataobj.h"
class __attribute__ ((visibility("default"))) wxDataObject : public wxDataObjectBase
{
public:
    wxDataObject();
    virtual ~wxDataObject();

    virtual bool IsSupportedFormat( const wxDataFormat& format, Direction dir = Get ) const;
};
# 170 "/usr/include/wx-3.1-unofficial/wx/dataobj.h" 2
# 194 "/usr/include/wx-3.1-unofficial/wx/dataobj.h"
class __attribute__ ((visibility("default"))) wxDataObjectSimple : public wxDataObject
{
public:


    wxDataObjectSimple(const wxDataFormat& format = wxFormatInvalid)
        : m_format(format)
        {
        }


    const wxDataFormat& GetFormat() const { return m_format; }
    void SetFormat(const wxDataFormat& format) { m_format = format; }






    virtual size_t GetDataSize() const
        { return 0; }


    virtual bool GetDataHere(void *) const
        { return false; }


    virtual bool SetData(size_t , const void *)
        { return false; }



    virtual wxDataFormat GetPreferredFormat(wxDataObjectBase::Direction = Get) const override
        { return m_format; }
    virtual size_t GetFormatCount(wxDataObjectBase::Direction = Get) const override
        { return 1; }
    virtual void GetAllFormats(wxDataFormat *formats,
                               wxDataObjectBase::Direction = Get) const override
        { *formats = m_format; }
    virtual size_t GetDataSize(const wxDataFormat& ) const override
        { return GetDataSize(); }
    virtual bool GetDataHere(const wxDataFormat& ,
                             void *buf) const override
        { return GetDataHere(buf); }
    virtual bool SetData(const wxDataFormat& ,
                         size_t len, const void *buf) override
        { return SetData(len, buf); }

private:

    wxDataFormat m_format;

    private: wxDataObjectSimple(const wxDataObjectSimple&) = delete; wxDataObjectSimple& operator=(const wxDataObjectSimple&) = delete;
};
# 259 "/usr/include/wx-3.1-unofficial/wx/dataobj.h"
typedef wxDataObjectSimple _WX_LIST_ITEM_TYPE_wxSimpleDataObjectList; typedef int (*wxSortFuncFor_wxSimpleDataObjectList)(const wxDataObjectSimple **, const wxDataObjectSimple **); class __attribute__ ((visibility("default"))) wxwxSimpleDataObjectListNode : public wxNodeBase { public: wxwxSimpleDataObjectListNode(wxListBase *list = 
# 259 "/usr/include/wx-3.1-unofficial/wx/dataobj.h" 3 4
__null
# 259 "/usr/include/wx-3.1-unofficial/wx/dataobj.h"
, wxwxSimpleDataObjectListNode *previous = 
# 259 "/usr/include/wx-3.1-unofficial/wx/dataobj.h" 3 4
__null
# 259 "/usr/include/wx-3.1-unofficial/wx/dataobj.h"
, wxwxSimpleDataObjectListNode *next = 
# 259 "/usr/include/wx-3.1-unofficial/wx/dataobj.h" 3 4
__null
# 259 "/usr/include/wx-3.1-unofficial/wx/dataobj.h"
, wxDataObjectSimple *data = 
# 259 "/usr/include/wx-3.1-unofficial/wx/dataobj.h" 3 4
__null
# 259 "/usr/include/wx-3.1-unofficial/wx/dataobj.h"
, const wxListKey& key = wxDefaultListKey) : wxNodeBase(list, previous, next, data, key) { } wxwxSimpleDataObjectListNode *GetNext() const { return (wxwxSimpleDataObjectListNode *)wxNodeBase::GetNext(); } wxwxSimpleDataObjectListNode *GetPrevious() const { return (wxwxSimpleDataObjectListNode *)wxNodeBase::GetPrevious(); } wxDataObjectSimple *GetData() const { return (wxDataObjectSimple *)wxNodeBase::GetData(); } void SetData(wxDataObjectSimple *data) { wxNodeBase::SetData(data); } protected: virtual void DeleteData() override; private: wxwxSimpleDataObjectListNode(const wxwxSimpleDataObjectListNode&) = delete; wxwxSimpleDataObjectListNode& operator=(const wxwxSimpleDataObjectListNode&) = delete; }; class __attribute__ ((visibility("default"))) wxSimpleDataObjectList : public wxListBase { public: typedef wxwxSimpleDataObjectListNode Node; class __attribute__ ((visibility("default"))) compatibility_iterator { public: compatibility_iterator(Node *ptr = 
# 259 "/usr/include/wx-3.1-unofficial/wx/dataobj.h" 3 4
__null
# 259 "/usr/include/wx-3.1-unofficial/wx/dataobj.h"
) : m_ptr(ptr) { } Node *operator->() const { return m_ptr; } operator Node *() const { return m_ptr; } private: Node *m_ptr; }; wxSimpleDataObjectList(wxKeyType keyType = wxKEY_NONE) : wxListBase(keyType) { } wxSimpleDataObjectList(const wxSimpleDataObjectList& list) : wxListBase(list.GetKeyType()) { Assign(list); } wxSimpleDataObjectList& operator=(const wxSimpleDataObjectList& list) { if (&list != this) Assign(list); return *this; } wxwxSimpleDataObjectListNode *GetFirst() const { return (wxwxSimpleDataObjectListNode *)wxListBase::GetFirst(); } wxwxSimpleDataObjectListNode *GetLast() const { return (wxwxSimpleDataObjectListNode *)wxListBase::GetLast(); } wxwxSimpleDataObjectListNode *Item(size_t index) const { return (wxwxSimpleDataObjectListNode *)wxListBase::Item(index); } wxDataObjectSimple *operator[](size_t index) const { wxwxSimpleDataObjectListNode *node = Item(index); return node ? (wxDataObjectSimple*)(node->GetData()) : 
# 259 "/usr/include/wx-3.1-unofficial/wx/dataobj.h" 3 4
__null
# 259 "/usr/include/wx-3.1-unofficial/wx/dataobj.h"
; } wxwxSimpleDataObjectListNode *Append(wxDataObjectSimple *object) { return (wxwxSimpleDataObjectListNode *)wxListBase::Append(object); } wxwxSimpleDataObjectListNode *Insert(wxDataObjectSimple *object) { return (wxwxSimpleDataObjectListNode *)Insert(static_cast<wxwxSimpleDataObjectListNode *>(
# 259 "/usr/include/wx-3.1-unofficial/wx/dataobj.h" 3 4
__null
# 259 "/usr/include/wx-3.1-unofficial/wx/dataobj.h"
), object); } wxwxSimpleDataObjectListNode *Insert(size_t pos, wxDataObjectSimple *object) { return (wxwxSimpleDataObjectListNode *)wxListBase::Insert(pos, object); } wxwxSimpleDataObjectListNode *Insert(wxwxSimpleDataObjectListNode *prev, wxDataObjectSimple *object) { return (wxwxSimpleDataObjectListNode *)wxListBase::Insert(prev, object); } wxwxSimpleDataObjectListNode *Append(long key, void *object) { return (wxwxSimpleDataObjectListNode *)wxListBase::Append(key, object); } wxwxSimpleDataObjectListNode *Append(const wxChar *key, void *object) { return (wxwxSimpleDataObjectListNode *)wxListBase::Append(key, object); } wxwxSimpleDataObjectListNode *DetachNode(wxwxSimpleDataObjectListNode *node) { return (wxwxSimpleDataObjectListNode *)wxListBase::DetachNode(node); } bool DeleteNode(wxwxSimpleDataObjectListNode *node) { return wxListBase::DeleteNode(node); } bool DeleteObject(wxDataObjectSimple *object) { return wxListBase::DeleteObject(object); } void Erase(wxwxSimpleDataObjectListNode *it) { DeleteNode(it); } wxwxSimpleDataObjectListNode *Find(const wxDataObjectSimple *object) const { return (wxwxSimpleDataObjectListNode *)wxListBase::Find(object); } virtual wxwxSimpleDataObjectListNode *Find(const wxListKey& key) const { return (wxwxSimpleDataObjectListNode *)wxListBase::Find(key); } bool Member(const wxDataObjectSimple *object) const { return Find(object) != 
# 259 "/usr/include/wx-3.1-unofficial/wx/dataobj.h" 3 4
__null
# 259 "/usr/include/wx-3.1-unofficial/wx/dataobj.h"
; } int IndexOf(wxDataObjectSimple *object) const { return wxListBase::IndexOf(object); } void Sort(wxSortCompareFunction func) { wxListBase::Sort(func); } void Sort(wxSortFuncFor_wxSimpleDataObjectList func) { Sort((wxSortCompareFunction)func); } protected: virtual wxNodeBase *CreateNode(wxNodeBase *prev, wxNodeBase *next, void *data, const wxListKey& key = wxDefaultListKey) override { return new wxwxSimpleDataObjectListNode(this, (wxwxSimpleDataObjectListNode *)prev, (wxwxSimpleDataObjectListNode *)next, (wxDataObjectSimple *)data, key); } public: typedef size_t size_type; typedef int difference_type; typedef wxDataObjectSimple* value_type; typedef wxDataObjectSimple* base_value_type; typedef value_type& reference; typedef const value_type& const_reference; typedef base_value_type& base_reference; typedef const base_value_type& const_base_reference; class __attribute__ ((visibility("default"))) iterator { public: typedef std::ptrdiff_t difference_type; typedef std::bidirectional_iterator_tag iterator_category; typedef wxDataObjectSimple* value_type; typedef value_type* pointer; typedef value_type& reference; typedef wxwxSimpleDataObjectListNode Node; typedef iterator itor; Node* m_node; Node* m_init; public: typedef reference reference_type; typedef pointer pointer_type; iterator(Node* node, Node* init) : m_node(node), m_init(init) {} iterator() : m_node(
# 259 "/usr/include/wx-3.1-unofficial/wx/dataobj.h" 3 4
__null
# 259 "/usr/include/wx-3.1-unofficial/wx/dataobj.h"
), m_init(
# 259 "/usr/include/wx-3.1-unofficial/wx/dataobj.h" 3 4
__null
# 259 "/usr/include/wx-3.1-unofficial/wx/dataobj.h"
) { } reference_type operator*() const { return *(pointer_type)m_node->GetDataPtr(); } itor& operator++() { do { if ( m_node ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/dataobj.h", 259, __FUNCTION__, "m_node", L"uninitialized iterator"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); m_node = m_node->GetNext(); return *this; } const itor operator++(int) { itor tmp = *this; do { if ( m_node ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/dataobj.h", 259, __FUNCTION__, "m_node", L"uninitialized iterator"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); m_node = m_node->GetNext(); return tmp; } itor& operator--() { m_node = m_node ? m_node->GetPrevious() : m_init; return *this; } const itor operator--(int) { itor tmp = *this; m_node = m_node ? m_node->GetPrevious() : m_init; return tmp; } bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; class __attribute__ ((visibility("default"))) const_iterator { public: typedef std::ptrdiff_t difference_type; typedef std::bidirectional_iterator_tag iterator_category; typedef wxDataObjectSimple* value_type; typedef const value_type* pointer; typedef const value_type& reference; typedef wxwxSimpleDataObjectListNode Node; typedef const_iterator itor; Node* m_node; Node* m_init; public: typedef reference reference_type; typedef pointer pointer_type; const_iterator(Node* node, Node* init) : m_node(node), m_init(init) { } const_iterator() : m_node(
# 259 "/usr/include/wx-3.1-unofficial/wx/dataobj.h" 3 4
__null
# 259 "/usr/include/wx-3.1-unofficial/wx/dataobj.h"
), m_init(
# 259 "/usr/include/wx-3.1-unofficial/wx/dataobj.h" 3 4
__null
# 259 "/usr/include/wx-3.1-unofficial/wx/dataobj.h"
) { } const_iterator(const iterator& it) : m_node(it.m_node), m_init(it.m_init) { } reference_type operator*() const { return *(pointer_type)m_node->GetDataPtr(); } itor& operator++() { do { if ( m_node ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/dataobj.h", 259, __FUNCTION__, "m_node", L"uninitialized iterator"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); m_node = m_node->GetNext(); return *this; } const itor operator++(int) { itor tmp = *this; do { if ( m_node ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/dataobj.h", 259, __FUNCTION__, "m_node", L"uninitialized iterator"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); m_node = m_node->GetNext(); return tmp; } itor& operator--() { m_node = m_node ? m_node->GetPrevious() : m_init; return *this; } const itor operator--(int) { itor tmp = *this; m_node = m_node ? m_node->GetPrevious() : m_init; return tmp; } bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; class __attribute__ ((visibility("default"))) reverse_iterator { public: typedef std::ptrdiff_t difference_type; typedef std::bidirectional_iterator_tag iterator_category; typedef wxDataObjectSimple* value_type; typedef value_type* pointer; typedef value_type& reference; typedef wxwxSimpleDataObjectListNode Node; typedef reverse_iterator itor; Node* m_node; Node* m_init; public: typedef reference reference_type; typedef pointer pointer_type; reverse_iterator(Node* node, Node* init) : m_node(node), m_init(init) { } reverse_iterator() : m_node(
# 259 "/usr/include/wx-3.1-unofficial/wx/dataobj.h" 3 4
__null
# 259 "/usr/include/wx-3.1-unofficial/wx/dataobj.h"
), m_init(
# 259 "/usr/include/wx-3.1-unofficial/wx/dataobj.h" 3 4
__null
# 259 "/usr/include/wx-3.1-unofficial/wx/dataobj.h"
) { } reference_type operator*() const { return *(pointer_type)m_node->GetDataPtr(); } itor& operator++() { m_node = m_node->GetPrevious(); return *this; } const itor operator++(int) { itor tmp = *this; m_node = m_node->GetPrevious(); return tmp; } itor& operator--() { m_node = m_node ? m_node->GetNext() : m_init; return *this; } const itor operator--(int) { itor tmp = *this; m_node = m_node ? m_node->GetNext() : m_init; return tmp; } bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; class __attribute__ ((visibility("default"))) const_reverse_iterator { public: typedef std::ptrdiff_t difference_type; typedef std::bidirectional_iterator_tag iterator_category; typedef wxDataObjectSimple* value_type; typedef const value_type* pointer; typedef const value_type& reference; typedef wxwxSimpleDataObjectListNode Node; typedef const_reverse_iterator itor; Node* m_node; Node* m_init; public: typedef reference reference_type; typedef pointer pointer_type; const_reverse_iterator(Node* node, Node* init) : m_node(node), m_init(init) { } const_reverse_iterator() : m_node(
# 259 "/usr/include/wx-3.1-unofficial/wx/dataobj.h" 3 4
__null
# 259 "/usr/include/wx-3.1-unofficial/wx/dataobj.h"
), m_init(
# 259 "/usr/include/wx-3.1-unofficial/wx/dataobj.h" 3 4
__null
# 259 "/usr/include/wx-3.1-unofficial/wx/dataobj.h"
) { } const_reverse_iterator(const reverse_iterator& it) : m_node(it.m_node), m_init(it.m_init) { } reference_type operator*() const { return *(pointer_type)m_node->GetDataPtr(); } itor& operator++() { m_node = m_node->GetPrevious(); return *this; } const itor operator++(int) { itor tmp = *this; m_node = m_node->GetPrevious(); return tmp; } itor& operator--() { m_node = m_node ? m_node->GetNext() : m_init; return *this;} const itor operator--(int) { itor tmp = *this; m_node = m_node ? m_node->GetNext() : m_init; return tmp; } bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; explicit wxSimpleDataObjectList(size_type n, const_reference v = value_type()) { assign(n, v); } wxSimpleDataObjectList(const const_iterator& first, const const_iterator& last) { assign(first, last); } iterator begin() { return iterator(GetFirst(), GetLast()); } const_iterator begin() const { return const_iterator(GetFirst(), GetLast()); } iterator end() { return iterator(
# 259 "/usr/include/wx-3.1-unofficial/wx/dataobj.h" 3 4
__null
# 259 "/usr/include/wx-3.1-unofficial/wx/dataobj.h"
, GetLast()); } const_iterator end() const { return const_iterator(
# 259 "/usr/include/wx-3.1-unofficial/wx/dataobj.h" 3 4
__null
# 259 "/usr/include/wx-3.1-unofficial/wx/dataobj.h"
, GetLast()); } reverse_iterator rbegin() { return reverse_iterator(GetLast(), GetFirst()); } const_reverse_iterator rbegin() const { return const_reverse_iterator(GetLast(), GetFirst()); } reverse_iterator rend() { return reverse_iterator(
# 259 "/usr/include/wx-3.1-unofficial/wx/dataobj.h" 3 4
__null
# 259 "/usr/include/wx-3.1-unofficial/wx/dataobj.h"
, GetFirst()); } const_reverse_iterator rend() const { return const_reverse_iterator(
# 259 "/usr/include/wx-3.1-unofficial/wx/dataobj.h" 3 4
__null
# 259 "/usr/include/wx-3.1-unofficial/wx/dataobj.h"
, GetFirst()); } void resize(size_type n, value_type v = value_type()) { while (n < size()) pop_back(); while (n > size()) push_back(v); } size_type size() const { return GetCount(); } size_type max_size() const { return 0x7fffffff; } bool empty() const { return IsEmpty(); } reference front() { return *begin(); } const_reference front() const { return *begin(); } reference back() { iterator tmp = end(); return *--tmp; } const_reference back() const { const_iterator tmp = end(); return *--tmp; } void push_front(const_reference v = value_type()) { Insert(GetFirst(), (const_base_reference)v); } void pop_front() { DeleteNode(GetFirst()); } void push_back(const_reference v = value_type()) { Append((const_base_reference)v); } void pop_back() { DeleteNode(GetLast()); } void assign(const_iterator first, const const_iterator& last) { clear(); for(; first != last; ++first) Append((const_base_reference)*first); } void assign(size_type n, const_reference v = value_type()) { clear(); for(size_type i = 0; i < n; ++i) Append((const_base_reference)v); } iterator insert(const iterator& it, const_reference v) { if ( it == end() ) { Append((const_base_reference)v); iterator itins(end()); return --itins; } else { Insert(it.m_node, (const_base_reference)v); iterator itins(it); return --itins; } } void insert(const iterator& it, size_type n, const_reference v) { for(size_type i = 0; i < n; ++i) insert(it, v); } void insert(const iterator& it, const_iterator first, const const_iterator& last) { for(; first != last; ++first) insert(it, *first); } iterator erase(const iterator& it) { iterator next = iterator(it.m_node->GetNext(), GetLast()); DeleteNode(it.m_node); return next; } iterator erase(const iterator& first, const iterator& last) { iterator next = last; if ( next != end() ) ++next; DeleteNodes(first.m_node, last.m_node); return next; } void clear() { Clear(); } void splice(const iterator& it, wxSimpleDataObjectList& l, const iterator& first, const iterator& last) { insert(it, first, last); l.erase(first, last); } void splice(const iterator& it, wxSimpleDataObjectList& l) { splice(it, l, l.begin(), l.end() ); } void splice(const iterator& it, wxSimpleDataObjectList& l, const iterator& first) { if ( it != first ) { insert(it, *first); l.erase(first); } } void remove(const_reference v) { DeleteObject((const_base_reference)v); } void reverse() { Reverse(); } };

class __attribute__ ((visibility("default"))) wxDataObjectComposite : public wxDataObject
{
public:

    wxDataObjectComposite();
    virtual ~wxDataObjectComposite();




    void Add(wxDataObjectSimple *dataObject, bool preferred = false);





    wxDataFormat GetReceivedFormat() const;




    wxDataObjectSimple *GetObject(const wxDataFormat& format,
                                  wxDataObjectBase::Direction dir = Get) const;



    virtual wxDataFormat GetPreferredFormat(wxDataObjectBase::Direction dir = Get) const override;
    virtual size_t GetFormatCount(wxDataObjectBase::Direction dir = Get) const override;
    virtual void GetAllFormats(wxDataFormat *formats, wxDataObjectBase::Direction dir = Get) const override;
    virtual size_t GetDataSize(const wxDataFormat& format) const override;
    virtual bool GetDataHere(const wxDataFormat& format, void *buf) const override;
    virtual bool SetData(const wxDataFormat& format, size_t len, const void *buf) override;
# 301 "/usr/include/wx-3.1-unofficial/wx/dataobj.h"
private:

    wxSimpleDataObjectList m_dataObjects;



    size_t m_preferred;

    wxDataFormat m_receivedFormat;

    private: wxDataObjectComposite(const wxDataObjectComposite&) = delete; wxDataObjectComposite& operator=(const wxDataObjectComposite&) = delete;
};
# 334 "/usr/include/wx-3.1-unofficial/wx/dataobj.h"
class __attribute__ ((visibility("default"))) wxHTMLDataObject : public wxDataObjectSimple
{
public:


    wxHTMLDataObject(const wxString& html = wxEmptyString)
        : wxDataObjectSimple(wxDF_HTML),
          m_html(html)
        {
        }



    virtual size_t GetLength() const { return m_html.Len() + 1; }
    virtual wxString GetHTML() const { return m_html; }
    virtual void SetHTML(const wxString& html) { m_html = html; }

    virtual size_t GetDataSize() const override;
    virtual bool GetDataHere(void *buf) const override;
    virtual bool SetData(size_t len, const void *buf) override;


    virtual size_t GetDataSize(const wxDataFormat&) const override
    {
        return GetDataSize();
    }
    virtual bool GetDataHere(const wxDataFormat&, void *buf) const override
    {
        return GetDataHere(buf);
    }
    virtual bool SetData(const wxDataFormat&, size_t len, const void *buf) override
    {
        return SetData(len, buf);
    }

private:
    wxString m_html;
};

class __attribute__ ((visibility("default"))) wxTextDataObject : public wxDataObjectSimple
{
public:


    wxTextDataObject(const wxString& text = wxEmptyString)
        : wxDataObjectSimple(

                             wxDF_UNICODETEXT



                            ),
          m_text(text)
        {
        }



    virtual size_t GetTextLength() const { return m_text.Len() + 1; }
    virtual wxString GetText() const { return m_text; }
    virtual void SetText(const wxString& text) { m_text = text; }






    virtual size_t GetFormatCount(Direction = Get) const override { return 2; }
    virtual void GetAllFormats(wxDataFormat *formats,
                               wxDataObjectBase::Direction = Get) const override;

    virtual size_t GetDataSize() const override { return GetDataSize(GetPreferredFormat()); }
    virtual bool GetDataHere(void *buf) const override { return GetDataHere(GetPreferredFormat(), buf); }
    virtual bool SetData(size_t len, const void *buf) override { return SetData(GetPreferredFormat(), len, buf); }

    size_t GetDataSize(const wxDataFormat& format) const override;
    bool GetDataHere(const wxDataFormat& format, void *pBuf) const override;
    bool SetData(const wxDataFormat& format, size_t nLen, const void* pBuf) override;
# 431 "/usr/include/wx-3.1-unofficial/wx/dataobj.h"
private:





    wxString m_text;

    private: wxTextDataObject(const wxTextDataObject&) = delete; wxTextDataObject& operator=(const wxTextDataObject&) = delete;
};





class __attribute__ ((visibility("default"))) wxBitmapDataObjectBase : public wxDataObjectSimple
{
public:


    wxBitmapDataObjectBase(const wxBitmap& bitmap = wxNullBitmap)
        : wxDataObjectSimple(wxDF_BITMAP), m_bitmap(bitmap)
        {
        }



    virtual wxBitmap GetBitmap() const { return m_bitmap; }
    virtual void SetBitmap(const wxBitmap& bitmap) { m_bitmap = bitmap; }

protected:
    wxBitmap m_bitmap;

    private: wxBitmapDataObjectBase(const wxBitmapDataObjectBase&) = delete; wxBitmapDataObjectBase& operator=(const wxBitmapDataObjectBase&) = delete;
};
# 474 "/usr/include/wx-3.1-unofficial/wx/dataobj.h"
class __attribute__ ((visibility("default"))) wxFileDataObjectBase : public wxDataObjectSimple
{
public:

    wxFileDataObjectBase() : wxDataObjectSimple(wxDF_FILENAME) { }


    const wxArrayString& GetFilenames() const { return m_filenames; }

protected:
    wxArrayString m_filenames;

    private: wxFileDataObjectBase(const wxFileDataObjectBase&) = delete; wxFileDataObjectBase& operator=(const wxFileDataObjectBase&) = delete;
};







class __attribute__ ((visibility("default"))) wxCustomDataObject : public wxDataObjectSimple
{
public:


    wxCustomDataObject(const wxDataFormat& format = wxFormatInvalid);


    virtual ~wxCustomDataObject();




    void TakeData(size_t size, void *data);



    virtual void *Alloc(size_t size);




    virtual void Free();



    virtual size_t GetSize() const { return m_size; }
    virtual void *GetData() const { return m_data; }



    virtual size_t GetDataSize() const override;
    virtual bool GetDataHere(void *buf) const override;
    virtual bool SetData(size_t size, const void *buf) override;

    virtual size_t GetDataSize(const wxDataFormat&) const override
    {
        return GetDataSize();
    }
    virtual bool GetDataHere(const wxDataFormat&, void *buf) const override
    {
        return GetDataHere(buf);
    }
    virtual bool SetData(const wxDataFormat&, size_t len, const void *buf) override
    {
        return SetData(len, buf);
    }

private:
    size_t m_size;
    void *m_data;

    private: wxCustomDataObject(const wxCustomDataObject&) = delete; wxCustomDataObject& operator=(const wxCustomDataObject&) = delete;
};





class __attribute__ ((visibility("default"))) wxImageDataObject : public wxCustomDataObject
{
public:
    explicit wxImageDataObject(const wxImage& image = wxNullImage);

    void SetImage(const wxImage& image);
    wxImage GetImage() const;

private:
    private: wxImageDataObject(const wxImageDataObject&) = delete; wxImageDataObject& operator=(const wxImageDataObject&) = delete;
};
# 574 "/usr/include/wx-3.1-unofficial/wx/dataobj.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/gtk/dataobj2.h" 1
# 17 "/usr/include/wx-3.1-unofficial/wx/gtk/dataobj2.h"
class __attribute__ ((visibility("default"))) wxBitmapDataObject : public wxBitmapDataObjectBase
{
public:

    wxBitmapDataObject();
    wxBitmapDataObject(const wxBitmap& bitmap);


    virtual ~wxBitmapDataObject();


    virtual void SetBitmap(const wxBitmap& bitmap) override;




    virtual size_t GetDataSize() const override { return m_pngSize; }
    virtual bool GetDataHere(void *buf) const override;
    virtual bool SetData(size_t len, const void *buf) override;

    virtual size_t GetDataSize(const wxDataFormat&) const override
    {
        return GetDataSize();
    }
    virtual bool GetDataHere(const wxDataFormat&, void *buf) const override
    {
        return GetDataHere(buf);
    }
    virtual bool SetData(const wxDataFormat&, size_t len, const void *buf) override
    {
        return SetData(len, buf);
    }

protected:
    void Clear() { free(m_pngData); }
    void ClearAll() { Clear(); Init(); }

    size_t m_pngSize;
    void *m_pngData;

    void DoConvertToPng();

private:
    void Init() { m_pngData = 
# 60 "/usr/include/wx-3.1-unofficial/wx/gtk/dataobj2.h" 3 4
                             __null
# 60 "/usr/include/wx-3.1-unofficial/wx/gtk/dataobj2.h"
                                 ; m_pngSize = 0; }
};





class __attribute__ ((visibility("default"))) wxFileDataObject : public wxFileDataObjectBase
{
public:



    void AddFile( const wxString &filename );

    virtual size_t GetDataSize() const override;
    virtual bool GetDataHere(void *buf) const override;
    virtual bool SetData(size_t len, const void *buf) override;

    virtual size_t GetDataSize(const wxDataFormat&) const override
    {
        return GetDataSize();
    }
    virtual bool GetDataHere(const wxDataFormat&, void *buf) const override
    {
        return GetDataHere(buf);
    }
    virtual bool SetData(const wxDataFormat&, size_t len, const void *buf) override
    {
        return SetData(len, buf);
    }
};





class __attribute__ ((visibility("default"))) wxURLDataObject : public wxDataObjectComposite
{
public:
    wxURLDataObject(const wxString& url = wxEmptyString);

    wxString GetURL() const;
    void SetURL(const wxString& url);

private:
    class wxTextURIListDataObject* const m_dobjURIList;
    wxTextDataObject* const m_dobjText;

    private: wxURLDataObject(const wxURLDataObject&) = delete; wxURLDataObject& operator=(const wxURLDataObject&) = delete;
};
# 575 "/usr/include/wx-3.1-unofficial/wx/dataobj.h" 2
# 67 "/usr/include/wx-3.1-unofficial/wx/wx.h" 2


# 1 "/usr/include/wx-3.1-unofficial/wx/ctrlsub.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/ctrlsub.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/ctrlsub.h" 2
# 36 "/usr/include/wx-3.1-unofficial/wx/ctrlsub.h"
class __attribute__ ((visibility("default"))) wxItemContainerImmutable
{
public:
    wxItemContainerImmutable() { }
    virtual ~wxItemContainerImmutable();




    virtual unsigned int GetCount() const = 0;
    bool IsEmpty() const { return GetCount() == 0; }

    virtual wxString GetString(unsigned int n) const = 0;
    wxArrayString GetStrings() const;
    virtual void SetString(unsigned int n, const wxString& s) = 0;




    virtual int FindString(const wxString& s, bool bCase = false) const
    {
        unsigned int count = GetCount();

        for ( unsigned int i = 0; i < count ; ++i )
        {
            if (GetString(i).IsSameAs( s , bCase ))
                return (int)i;
        }

        return (-1);
    }





    virtual void SetSelection(int n) = 0;
    virtual int GetSelection() const = 0;


    bool SetStringSelection(const wxString& s);


    virtual wxString GetStringSelection() const;



    void Select(int n) { SetSelection(n); }


protected:

    bool IsValid(unsigned int n) const { return n < GetCount(); }
    bool IsValidInsert(unsigned int n) const { return n <= GetCount(); }
};
# 103 "/usr/include/wx-3.1-unofficial/wx/ctrlsub.h"
class __attribute__ ((visibility("default"))) wxItemContainer : public wxItemContainerImmutable
{
private:




    int AppendItems(const wxArrayStringsAdapter& items,
                    void **clientData,
                    wxClientDataType type)
    {
        if ( items.IsEmpty() )
            return (-1);

        return DoAppendItems(items, clientData, type);
    }

    int AppendItems(const wxArrayStringsAdapter& items)
    {
        return AppendItems(items, 
# 122 "/usr/include/wx-3.1-unofficial/wx/ctrlsub.h" 3 4
                                 __null
# 122 "/usr/include/wx-3.1-unofficial/wx/ctrlsub.h"
                                     , wxClientData_None);
    }

    int AppendItems(const wxArrayStringsAdapter& items, void **clientData)
    {
        do { if ( GetClientDataType() != wxClientData_Object ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/ctrlsub.h", 127, __FUNCTION__, "GetClientDataType() != wxClientData_Object", L"can't mix different types of client data"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 )
                                                                       ;

        return AppendItems(items, clientData, wxClientData_Void);
    }

    int AppendItems(const wxArrayStringsAdapter& items,
                    wxClientData **clientData)
    {
        do { if ( GetClientDataType() != wxClientData_Void ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/ctrlsub.h", 136, __FUNCTION__, "GetClientDataType() != wxClientData_Void", L"can't mix different types of client data"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 )
                                                                       ;

        return AppendItems(items, reinterpret_cast<void **>(clientData),
                           wxClientData_Object);
    }

    int InsertItems(const wxArrayStringsAdapter& items,
                    unsigned int pos,
                    void **clientData,
                    wxClientDataType type)
    {
        do { if ( !IsSorted() ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/ctrlsub.h", 148, __FUNCTION__, "!IsSorted()", L"can't insert items in sorted control"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );

        if ( pos <= GetCount() ) {} else { do { if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/ctrlsub.h", 150, __FUNCTION__, "\"pos <= GetCount()\"", L"position out of range"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); return (-1); } struct wxDummyCheckStruct150
                                                   ;





        if ( !items.IsEmpty() ) {} else { do { if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/ctrlsub.h", 157, __FUNCTION__, "\"!items.IsEmpty()\"", L"need something to insert"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); return (-1); } struct wxDummyCheckStruct157
                                                      ;

        return DoInsertItems(items, pos, clientData, type);
    }

    int InsertItems(const wxArrayStringsAdapter& items, unsigned int pos)
    {
        return InsertItems(items, pos, 
# 165 "/usr/include/wx-3.1-unofficial/wx/ctrlsub.h" 3 4
                                      __null
# 165 "/usr/include/wx-3.1-unofficial/wx/ctrlsub.h"
                                          , wxClientData_None);
    }

    int InsertItems(const wxArrayStringsAdapter& items,
                     unsigned int pos,
                     void **clientData)
    {
        do { if ( GetClientDataType() != wxClientData_Object ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/ctrlsub.h", 172, __FUNCTION__, "GetClientDataType() != wxClientData_Object", L"can't mix different types of client data"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 )
                                                                       ;

        return InsertItems(items, pos, clientData, wxClientData_Void);
    }

    int InsertItems(const wxArrayStringsAdapter& items,
                     unsigned int pos,
                     wxClientData **clientData)
    {
        do { if ( GetClientDataType() != wxClientData_Void ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/ctrlsub.h", 182, __FUNCTION__, "GetClientDataType() != wxClientData_Void", L"can't mix different types of client data"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 )
                                                                       ;

        return InsertItems(items, pos,
                           reinterpret_cast<void **>(clientData),
                           wxClientData_Object);
    }

public:
    wxItemContainer() { m_clientDataItemsType = wxClientData_None; }
    virtual ~wxItemContainer();






    int Append(const wxString& item)
        { return AppendItems(item); }
    int Append(const wxString& item, void *clientData)
        { return AppendItems(item, &clientData); }
    int Append(const wxString& item, wxClientData *clientData)
        { return AppendItems(item, &clientData); }



    int Append(const wxArrayString& items)
        { return AppendItems(items); }
    int Append(const wxArrayString& items, void **clientData)
        { return AppendItems(items, clientData); }
    int Append(const wxArrayString& items, wxClientData **clientData)
        { return AppendItems(items, clientData); }
    int Append(unsigned int n, const wxString *items)
        { return AppendItems(wxArrayStringsAdapter(n, items)); }
    int Append(unsigned int n, const wxString *items, void **clientData)
        { return AppendItems(wxArrayStringsAdapter(n, items), clientData); }
    int Append(unsigned int n,
               const wxString *items,
               wxClientData **clientData)
        { return AppendItems(wxArrayStringsAdapter(n, items), clientData); }


    int Append(const std::vector<wxString>& items)
        { return AppendItems(items); }



    void AppendString(const wxString& item)
        { Append(item); }






    int Insert(const wxString& item, unsigned int pos)
        { return InsertItems(item, pos); }
    int Insert(const wxString& item, unsigned int pos, void *clientData)
        { return InsertItems(item, pos, &clientData); }
    int Insert(const wxString& item, unsigned int pos, wxClientData *clientData)
        { return InsertItems(item, pos, &clientData); }



    int Insert(const wxArrayString& items, unsigned int pos)
        { return InsertItems(items, pos); }
    int Insert(const wxArrayString& items, unsigned int pos, void **clientData)
        { return InsertItems(items, pos, clientData); }
    int Insert(const wxArrayString& items,
               unsigned int pos,
               wxClientData **clientData)
        { return InsertItems(items, pos, clientData); }
    int Insert(unsigned int n, const wxString *items, unsigned int pos)
        { return InsertItems(wxArrayStringsAdapter(n, items), pos); }
    int Insert(unsigned int n,
               const wxString *items,
               unsigned int pos,
               void **clientData)
        { return InsertItems(wxArrayStringsAdapter(n, items), pos, clientData); }
    int Insert(unsigned int n,
               const wxString *items,
               unsigned int pos,
               wxClientData **clientData)
        { return InsertItems(wxArrayStringsAdapter(n, items), pos, clientData); }


    int Insert(const std::vector<wxString>& items, unsigned int pos)
        { return InsertItems(items, pos); }





    void Set(const wxArrayString& items)
        { Clear(); Append(items); }
    void Set(const wxArrayString& items, void **clientData)
        { Clear(); Append(items, clientData); }
    void Set(const wxArrayString& items, wxClientData **clientData)
        { Clear(); Append(items, clientData); }
    void Set(unsigned int n, const wxString *items)
        { Clear(); Append(n, items); }
    void Set(unsigned int n, const wxString *items, void **clientData)
        { Clear(); Append(n, items, clientData); }
    void Set(unsigned int n, const wxString *items, wxClientData **clientData)
        { Clear(); Append(n, items, clientData); }


    void Set(const std::vector<wxString>& items)
        { Clear(); Append(items); }





    virtual void Clear();
    void Delete(unsigned int pos);
# 307 "/usr/include/wx-3.1-unofficial/wx/ctrlsub.h"
    virtual bool IsSorted() const { return false; }





    void SetClientData(unsigned int n, void* clientData);
    void* GetClientData(unsigned int n) const;





    void SetClientObject(unsigned int n, wxClientData* clientData);
    wxClientData* GetClientObject(unsigned int n) const;
    wxClientData* DetachClientObject(unsigned int n);
# 332 "/usr/include/wx-3.1-unofficial/wx/ctrlsub.h"
    virtual wxClientDataType GetClientDataType() const
        { return m_clientDataItemsType; }

    bool HasClientData() const
        { return GetClientDataType() != wxClientData_None; }
    bool HasClientObjectData() const
        { return GetClientDataType() == wxClientData_Object; }
    bool HasClientUntypedData() const
        { return GetClientDataType() == wxClientData_Void; }

protected:





    virtual int DoAppendItems(const wxArrayStringsAdapter& items,
                              void **clientData,
                              wxClientDataType type)
    {
        return DoInsertItems(items, GetCount(), clientData, type);
    }
# 364 "/usr/include/wx-3.1-unofficial/wx/ctrlsub.h"
    virtual int DoInsertItems(const wxArrayStringsAdapter & items,
                              unsigned int pos,
                              void **clientData,
                              wxClientDataType type) = 0;





    virtual void DoInitItemClientData() { }
    virtual void DoSetItemClientData(unsigned int n, void *clientData) = 0;
    virtual void *DoGetItemClientData(unsigned int n) const = 0;

    virtual void DoClear() = 0;
    virtual void DoDeleteOneItem(unsigned int pos) = 0;






    virtual int DoInsertOneItem(const wxString& item, unsigned int pos);
    int DoInsertItemsInLoop(const wxArrayStringsAdapter& items,
                            unsigned int pos,
                            void **clientData,
                            wxClientDataType type);




    void AssignNewItemClientData(unsigned int pos,
                                 void **clientData,
                                 unsigned int n,
                                 wxClientDataType type);



    void ResetItemClientObject(unsigned int n);



    virtual void SetClientDataType(wxClientDataType clientDataItemsType)
    {
        m_clientDataItemsType = clientDataItemsType;
    }

private:

    wxClientDataType m_clientDataItemsType;
};
# 423 "/usr/include/wx-3.1-unofficial/wx/ctrlsub.h"
template <class W, class C>
class wxWindowWithItems : public W, public C
{
public:
    typedef W BaseWindowClass;
    typedef C BaseContainerInterface;

    wxWindowWithItems() { }

    void SetClientData(void *data)
        { BaseWindowClass::SetClientData(data); }
    void *GetClientData() const
        { return BaseWindowClass::GetClientData(); }
    void SetClientObject(wxClientData *data)
        { BaseWindowClass::SetClientObject(data); }
    wxClientData *GetClientObject() const
        { return BaseWindowClass::GetClientObject(); }

    void SetClientData(unsigned int n, void* clientData)
        { wxItemContainer::SetClientData(n, clientData); }
    void* GetClientData(unsigned int n) const
        { return wxItemContainer::GetClientData(n); }
    void SetClientObject(unsigned int n, wxClientData* clientData)
        { wxItemContainer::SetClientObject(n, clientData); }
    wxClientData* GetClientObject(unsigned int n) const
        { return wxItemContainer::GetClientObject(n); }
};

class __attribute__ ((visibility("default"))) wxControlWithItemsBase :
    public wxWindowWithItems<wxControl, wxItemContainer>
{
public:
    wxControlWithItemsBase() { }



    virtual bool ShouldInheritColours() const override { return false; }





    void SendSelectionChangedEvent(wxEventType eventType);

protected:




    void InitCommandEventWithItems(wxCommandEvent& event, int n);

private:
    private: wxControlWithItemsBase(const wxControlWithItemsBase&) = delete; wxControlWithItemsBase& operator=(const wxControlWithItemsBase&) = delete;
};
# 486 "/usr/include/wx-3.1-unofficial/wx/ctrlsub.h"
    class __attribute__ ((visibility("default"))) wxControlWithItems : public wxControlWithItemsBase
    {
    public:
        wxControlWithItems() { }

    private:
        public:
# 492 "/usr/include/wx-3.1-unofficial/wx/ctrlsub.h"
#pragma GCC diagnostic push
# 492 "/usr/include/wx-3.1-unofficial/wx/ctrlsub.h"
       
# 492 "/usr/include/wx-3.1-unofficial/wx/ctrlsub.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 492 "/usr/include/wx-3.1-unofficial/wx/ctrlsub.h"
        virtual wxClassInfo *GetClassInfo() const;
# 492 "/usr/include/wx-3.1-unofficial/wx/ctrlsub.h"
#pragma GCC diagnostic pop
# 492 "/usr/include/wx-3.1-unofficial/wx/ctrlsub.h"
        static wxClassInfo ms_classInfo;
        private: wxControlWithItems(const wxControlWithItems&) = delete; wxControlWithItems& operator=(const wxControlWithItems&) = delete;
    };
# 70 "/usr/include/wx-3.1-unofficial/wx/wx.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/bmpbuttn.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/bmpbuttn.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/bmpbuttn.h" 2
# 27 "/usr/include/wx-3.1-unofficial/wx/bmpbuttn.h"
class wxBitmapButton;






class __attribute__ ((visibility("default"))) wxBitmapButtonBase : public wxButton
{
public:
    wxBitmapButtonBase()
    {




    }

    bool Create(wxWindow *parent,
                wxWindowID winid,
                const wxPoint& pos,
                const wxSize& size,
                long style,
                const wxValidator& validator,
                const wxString& name)
    {
# 62 "/usr/include/wx-3.1-unofficial/wx/bmpbuttn.h"
        return wxButton::Create(parent, winid, wxString(),
                                pos, size,
                                style | 0x0002 | 0x0001,
                                validator, name);
    }
# 83 "/usr/include/wx-3.1-unofficial/wx/bmpbuttn.h"
    static wxBitmapButton*
    NewCloseButton(wxWindow* parent,
                   wxWindowID winid,
                   const wxString& name = wxString());


    virtual void SetMargins(int x, int y)
    {
        DoSetBitmapMargins(x, y);
    }

    int GetMarginX() const { return DoGetBitmapMargins().x; }
    int GetMarginY() const { return DoGetBitmapMargins().y; }

protected:
# 125 "/usr/include/wx-3.1-unofficial/wx/bmpbuttn.h"
    private: wxBitmapButtonBase(const wxBitmapButtonBase&) = delete; wxBitmapButtonBase& operator=(const wxBitmapButtonBase&) = delete;
};
# 135 "/usr/include/wx-3.1-unofficial/wx/bmpbuttn.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/gtk/bmpbuttn.h" 1
# 16 "/usr/include/wx-3.1-unofficial/wx/gtk/bmpbuttn.h"
class __attribute__ ((visibility("default"))) wxBitmapButton : public wxBitmapButtonBase
{
public:
    wxBitmapButton() { }

    wxBitmapButton(wxWindow *parent,
                   wxWindowID id,
                   const wxBitmap& bitmap,
                   const wxPoint& pos = wxDefaultPosition,
                   const wxSize& size = wxDefaultSize,
                   long style = 0,
                   const wxValidator& validator = wxDefaultValidator,
                   const wxString& name = wxString::FromAscii(wxButtonNameStr))
    {
        Create(parent, id, bitmap, pos, size, style, validator, name);
    }

    bool Create(wxWindow *parent,
                wxWindowID id,
                const wxBitmap& bitmap,
                const wxPoint& pos = wxDefaultPosition,
                const wxSize& size = wxDefaultSize,
                long style = 0,
                const wxValidator& validator = wxDefaultValidator,
                const wxString& name = wxString::FromAscii(wxButtonNameStr));

    bool CreateCloseButton(wxWindow* parent,
                           wxWindowID winid,
                           const wxString& name = wxString());
private:
    public:
# 46 "/usr/include/wx-3.1-unofficial/wx/gtk/bmpbuttn.h"
#pragma GCC diagnostic push
# 46 "/usr/include/wx-3.1-unofficial/wx/gtk/bmpbuttn.h"
   
# 46 "/usr/include/wx-3.1-unofficial/wx/gtk/bmpbuttn.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 46 "/usr/include/wx-3.1-unofficial/wx/gtk/bmpbuttn.h"
    virtual wxClassInfo *GetClassInfo() const;
# 46 "/usr/include/wx-3.1-unofficial/wx/gtk/bmpbuttn.h"
#pragma GCC diagnostic pop
# 46 "/usr/include/wx-3.1-unofficial/wx/gtk/bmpbuttn.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 136 "/usr/include/wx-3.1-unofficial/wx/bmpbuttn.h" 2
# 71 "/usr/include/wx-3.1-unofficial/wx/wx.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/checkbox.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/checkbox.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/checkbox.h" 2
# 43 "/usr/include/wx-3.1-unofficial/wx/checkbox.h"
extern __attribute__ ((visibility("default"))) const char wxCheckBoxNameStr[];





class __attribute__ ((visibility("default"))) wxCheckBoxBase : public wxControl
{
public:
    wxCheckBoxBase() { }


    virtual void SetValue(bool value) = 0;
    virtual bool GetValue() const = 0;

    bool IsChecked() const
    {
        do { if ( !Is3State() ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/checkbox.h", 60, __FUNCTION__, "!Is3State()", L"Calling IsChecked() doesn't make sense for" L" a three state checkbox, Use Get3StateValue() instead"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 )
                                                                          ;

        return GetValue();
    }

    wxCheckBoxState Get3StateValue() const
    {
        wxCheckBoxState state = DoGet3StateValue();

        if ( state == wxCHK_UNDETERMINED && !Is3State() )
        {

            do { if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/checkbox.h", 73, __FUNCTION__, "\"Assert failure\"", L"DoGet3StateValue() says the 2-state checkbox is " L"in an undetermined/third state"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 )
                                                       ;

            state = wxCHK_UNCHECKED;
        }

        return state;
    }

    void Set3StateValue(wxCheckBoxState state)
    {
        if ( state == wxCHK_UNDETERMINED && !Is3State() )
        {
            do { if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/checkbox.h", 86, __FUNCTION__, "\"Assert failure\"", L"Setting a 2-state checkbox to undetermined state"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );
            state = wxCHK_UNCHECKED;
        }

        DoSet3StateValue(state);
    }

    bool Is3State() const { return HasFlag(0x1000); }

    bool Is3rdStateAllowedForUser() const
    {
        return HasFlag(0x2000);
    }

    virtual bool HasTransparentBackground() override { return true; }




    virtual void SetTransparentPartColour(const wxColour& ) { }


    virtual void DoUpdateWindowUI(wxUpdateUIEvent& event) override
    {
        wxControl::DoUpdateWindowUI(event);

        if ( event.GetSetChecked() )
            SetValue(event.GetChecked());
    }

protected:

    virtual wxBorder GetDefaultBorder() const override { return wxBORDER_NONE; }

    virtual void DoSet3StateValue(wxCheckBoxState ) { do { if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/checkbox.h", 120, __FUNCTION__, "\"Assert failure\"", (const char*)
# 120 "/usr/include/wx-3.1-unofficial/wx/checkbox.h" 3 4
                                                                    __null
# 120 "/usr/include/wx-3.1-unofficial/wx/checkbox.h"
                                                                    ), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); }

    virtual wxCheckBoxState DoGet3StateValue() const
    {
        do { if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/checkbox.h", 124, __FUNCTION__, "\"Assert failure\"", (const char*)
# 124 "/usr/include/wx-3.1-unofficial/wx/checkbox.h" 3 4
       __null
# 124 "/usr/include/wx-3.1-unofficial/wx/checkbox.h"
       ), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );
        return wxCHK_UNCHECKED;
    }




    static void WXValidateStyle(long *stylePtr)
    {
        long& style = *stylePtr;

        if ( !(style & (0x4000 | 0x1000)) )
        {






            style |= 0x4000;
        }

        if ( style & 0x1000 )
        {
            if ( style & 0x4000 )
            {
                do { if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/checkbox.h", 150, __FUNCTION__, "\"Assert failure\"", "wxCHK_2STATE and wxCHK_3STATE can't be used " "together"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 )
                                        ;
                style &= ~0x1000;
            }
        }
        else
        {
            if ( style & 0x2000 )
            {
                do { if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/checkbox.h", 159, __FUNCTION__, "\"Assert failure\"", "wxCHK_ALLOW_3RD_STATE_FOR_USER doesn't make sense " "without wxCHK_3STATE"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 )
                                                    ;
                style &= ~0x2000;
            }
        }
    }

private:
    private: wxCheckBoxBase(const wxCheckBoxBase&) = delete; wxCheckBoxBase& operator=(const wxCheckBoxBase&) = delete;
};
# 180 "/usr/include/wx-3.1-unofficial/wx/checkbox.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/gtk/checkbox.h" 1
# 16 "/usr/include/wx-3.1-unofficial/wx/gtk/checkbox.h"
class __attribute__ ((visibility("default"))) wxCheckBox : public wxCheckBoxBase
{
public:
    wxCheckBox();
    ~wxCheckBox();
    wxCheckBox( wxWindow *parent, wxWindowID id, const wxString& label,
            const wxPoint& pos = wxDefaultPosition,
            const wxSize& size = wxDefaultSize, long style = 0,
            const wxValidator& validator = wxDefaultValidator,
            const wxString& name = wxString::FromAscii(wxCheckBoxNameStr))
    {
        Create(parent, id, label, pos, size, style, validator, name);
    }
    bool Create(wxWindow *parent,
                wxWindowID id,
                const wxString& label,
                const wxPoint& pos = wxDefaultPosition,
                const wxSize& size = wxDefaultSize,
                long style = 0,
                const wxValidator& validator = wxDefaultValidator,
                const wxString& name = wxString::FromAscii(wxCheckBoxNameStr) );

    void SetValue( bool state ) override;
    bool GetValue() const override;

    virtual void SetLabel( const wxString& label ) override;

    static wxVisualAttributes
    GetClassDefaultAttributes(wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL);


    void GTKDisableEvents();
    void GTKEnableEvents();

protected:
    virtual void DoApplyWidgetStyle(GtkRcStyle *style) override;
    virtual GdkWindow *GTKGetWindow(wxArrayGdkWindows& windows) const override;

    virtual void DoEnable(bool enable) override;

    void DoSet3StateValue(wxCheckBoxState state) override;
    wxCheckBoxState DoGet3StateValue() const override;

private:
    typedef wxCheckBoxBase base_type;

    GtkWidget *m_widgetCheckbox;
    GtkWidget *m_widgetLabel;

    public:
# 65 "/usr/include/wx-3.1-unofficial/wx/gtk/checkbox.h"
#pragma GCC diagnostic push
# 65 "/usr/include/wx-3.1-unofficial/wx/gtk/checkbox.h"
   
# 65 "/usr/include/wx-3.1-unofficial/wx/gtk/checkbox.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 65 "/usr/include/wx-3.1-unofficial/wx/gtk/checkbox.h"
    virtual wxClassInfo *GetClassInfo() const;
# 65 "/usr/include/wx-3.1-unofficial/wx/gtk/checkbox.h"
#pragma GCC diagnostic pop
# 65 "/usr/include/wx-3.1-unofficial/wx/gtk/checkbox.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 181 "/usr/include/wx-3.1-unofficial/wx/checkbox.h" 2
# 72 "/usr/include/wx-3.1-unofficial/wx/wx.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/checklst.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/checklst.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/checklst.h" 2



# 1 "/usr/include/wx-3.1-unofficial/wx/listbox.h" 1
# 18 "/usr/include/wx-3.1-unofficial/wx/listbox.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 19 "/usr/include/wx-3.1-unofficial/wx/listbox.h" 2






class wxArrayInt;
class wxArrayString;





extern __attribute__ ((visibility("default"))) const char wxListBoxNameStr[];





class __attribute__ ((visibility("default"))) wxListBoxBase : public wxControlWithItems
{
public:
    wxListBoxBase() { }
    virtual ~wxListBoxBase();

    void InsertItems(unsigned int nItems, const wxString *items, unsigned int pos)
        { Insert(nItems, items, pos); }
    void InsertItems(const wxArrayString& items, unsigned int pos)
        { Insert(items, pos); }


    virtual bool IsSelected(int n) const = 0;
    virtual void SetSelection(int n) override;
    void SetSelection(int n, bool select) { DoSetSelection(n, select); }
    void Deselect(int n) { DoSetSelection(n, false); }
    void DeselectAll(int itemToLeaveSelected = -1);

    virtual bool SetStringSelection(const wxString& s, bool select);
    virtual bool SetStringSelection(const wxString& s)
    {
        return SetStringSelection(s, true);
    }



    virtual int GetSelections(wxArrayInt& aSelections) const = 0;



    void SetFirstItem(int n) { DoSetFirstItem(n); }
    void SetFirstItem(const wxString& s);



    virtual void EnsureVisible(int n);

    virtual int GetTopItem() const { return (-1); }
    virtual int GetCountPerPage() const { return -1; }



    void AppendAndEnsureVisible(const wxString& s);


    bool HasMultipleSelection() const
    {
        return (m_windowStyle & 0x0040) ||
               (m_windowStyle & 0x0080);
    }


    virtual bool IsSorted() const override { return HasFlag( 0x0010 ); }



    void Command(wxCommandEvent& event) override;


    int HitTest(const wxPoint& point) const { return DoListHitTest(point); }
    int HitTest(int x, int y) const { return DoListHitTest(wxPoint(x, y)); }


protected:
    virtual void DoSetFirstItem(int n) = 0;

    virtual void DoSetSelection(int n, bool select) = 0;


    virtual int DoListHitTest(const wxPoint& ) const
        { return (-1); }




    bool DoChangeSingleSelection(int item);





    bool CalcAndSendEvent();




    bool SendEvent(wxEventType evtType, int item, bool selected);
# 133 "/usr/include/wx-3.1-unofficial/wx/listbox.h"
    wxArrayInt m_oldSelections;



    void UpdateOldSelections();

private:
    private: wxListBoxBase(const wxListBoxBase&) = delete; wxListBoxBase& operator=(const wxListBoxBase&) = delete;
};
# 154 "/usr/include/wx-3.1-unofficial/wx/listbox.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/gtk/listbox.h" 1
# 12 "/usr/include/wx-3.1-unofficial/wx/gtk/listbox.h"
struct _wxTreeEntry;
struct _GtkTreeIter;





class __attribute__ ((visibility("default"))) wxListBox : public wxListBoxBase
{
public:

    wxListBox()
    {
        Init();
    }
    wxListBox( wxWindow *parent, wxWindowID id,
            const wxPoint& pos = wxDefaultPosition,
            const wxSize& size = wxDefaultSize,
            int n = 0, const wxString choices[] = (const wxString *) 
# 30 "/usr/include/wx-3.1-unofficial/wx/gtk/listbox.h" 3 4
                                                                    __null
# 30 "/usr/include/wx-3.1-unofficial/wx/gtk/listbox.h"
                                                                        ,
            long style = 0,
            const wxValidator& validator = wxDefaultValidator,
            const wxString& name = wxString::FromAscii(wxListBoxNameStr) )
    {
        Init();
        Create(parent, id, pos, size, n, choices, style, validator, name);
    }
    wxListBox( wxWindow *parent, wxWindowID id,
            const wxPoint& pos,
            const wxSize& size,
            const wxArrayString& choices,
            long style = 0,
            const wxValidator& validator = wxDefaultValidator,
            const wxString& name = wxString::FromAscii(wxListBoxNameStr) )
    {
        Init();
        Create(parent, id, pos, size, choices, style, validator, name);
    }
    virtual ~wxListBox();

    bool Create(wxWindow *parent, wxWindowID id,
                const wxPoint& pos = wxDefaultPosition,
                const wxSize& size = wxDefaultSize,
                int n = 0, const wxString choices[] = (const wxString *) 
# 54 "/usr/include/wx-3.1-unofficial/wx/gtk/listbox.h" 3 4
                                                                        __null
# 54 "/usr/include/wx-3.1-unofficial/wx/gtk/listbox.h"
                                                                            ,
                long style = 0,
                const wxValidator& validator = wxDefaultValidator,
                const wxString& name = wxString::FromAscii(wxListBoxNameStr));
    bool Create(wxWindow *parent, wxWindowID id,
                const wxPoint& pos,
                const wxSize& size,
                const wxArrayString& choices,
                long style = 0,
                const wxValidator& validator = wxDefaultValidator,
                const wxString& name = wxString::FromAscii(wxListBoxNameStr));

    virtual unsigned int GetCount() const override;
    virtual wxString GetString(unsigned int n) const override;
    virtual void SetString(unsigned int n, const wxString& s) override;
    virtual int FindString(const wxString& s, bool bCase = false) const override;

    virtual bool IsSelected(int n) const override;
    virtual int GetSelection() const override;
    virtual int GetSelections(wxArrayInt& aSelections) const override;

    virtual void EnsureVisible(int n) override;

    virtual int GetTopItem() const override;
    virtual int GetCountPerPage() const override;

    virtual void Update() override;

    static wxVisualAttributes
    GetClassDefaultAttributes(wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL);



    virtual GtkWidget *GetConnectWidget() override;

    struct _GtkTreeView *m_treeview;
    struct _GtkListStore *m_liststore;


    bool m_hasCheckBoxes;


    struct _wxTreeEntry* GTKGetEntry(unsigned pos) const;

    void GTKDisableEvents();
    void GTKEnableEvents();

    void GTKOnSelectionChanged();
    void GTKOnActivated(int item);

protected:
    virtual void DoClear() override;
    virtual void DoDeleteOneItem(unsigned int n) override;
    virtual wxSize DoGetBestSize() const override;
    virtual void DoApplyWidgetStyle(GtkRcStyle *style) override;
    virtual GdkWindow *GTKGetWindow(wxArrayGdkWindows& windows) const override;

    virtual void DoSetSelection(int n, bool select) override;

    virtual int DoInsertItems(const wxArrayStringsAdapter& items,
                              unsigned int pos,
                              void **clientData, wxClientDataType type) override;
    virtual int DoInsertOneItem(const wxString& item, unsigned int pos) override;

    virtual void DoSetFirstItem(int n) override;
    virtual void DoSetItemClientData(unsigned int n, void* clientData) override;
    virtual void* DoGetItemClientData(unsigned int n) const override;
    virtual int DoListHitTest(const wxPoint& point) const override;


    bool GTKGetIteratorFor(unsigned pos, _GtkTreeIter *iter) const;


    int GTKGetIndexFor(_GtkTreeIter& iter) const;


    void DoScrollToCell(int n, float alignY, float alignX);

private:
    void Init();

    public:
# 135 "/usr/include/wx-3.1-unofficial/wx/gtk/listbox.h"
#pragma GCC diagnostic push
# 135 "/usr/include/wx-3.1-unofficial/wx/gtk/listbox.h"
   
# 135 "/usr/include/wx-3.1-unofficial/wx/gtk/listbox.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 135 "/usr/include/wx-3.1-unofficial/wx/gtk/listbox.h"
    virtual wxClassInfo *GetClassInfo() const;
# 135 "/usr/include/wx-3.1-unofficial/wx/gtk/listbox.h"
#pragma GCC diagnostic pop
# 135 "/usr/include/wx-3.1-unofficial/wx/gtk/listbox.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 155 "/usr/include/wx-3.1-unofficial/wx/listbox.h" 2
# 19 "/usr/include/wx-3.1-unofficial/wx/checklst.h" 2





class __attribute__ ((visibility("default"))) wxCheckListBoxBase : public wxListBox
{
public:
    wxCheckListBoxBase() { }


    virtual bool IsChecked(unsigned int item) const = 0;
    virtual void Check(unsigned int item, bool check = true) = 0;

    virtual unsigned int GetCheckedItems(wxArrayInt& checkedItems) const;

    private: wxCheckListBoxBase(const wxCheckListBoxBase&) = delete; wxCheckListBoxBase& operator=(const wxCheckListBoxBase&) = delete;
};
# 45 "/usr/include/wx-3.1-unofficial/wx/checklst.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/gtk/checklst.h" 1
# 17 "/usr/include/wx-3.1-unofficial/wx/gtk/checklst.h"
class __attribute__ ((visibility("default"))) wxCheckListBox : public wxCheckListBoxBase
{
public:
    wxCheckListBox();
    wxCheckListBox(wxWindow *parent, wxWindowID id,
            const wxPoint& pos = wxDefaultPosition,
            const wxSize& size = wxDefaultSize,
            int nStrings = 0,
            const wxString *choices = 
# 25 "/usr/include/wx-3.1-unofficial/wx/gtk/checklst.h" 3 4
                                     __null
# 25 "/usr/include/wx-3.1-unofficial/wx/gtk/checklst.h"
                                         ,
            long style = 0,
            const wxValidator& validator = wxDefaultValidator,
            const wxString& name = wxString::FromAscii(wxListBoxNameStr));
    wxCheckListBox(wxWindow *parent, wxWindowID id,
            const wxPoint& pos,
            const wxSize& size,
            const wxArrayString& choices,
            long style = 0,
            const wxValidator& validator = wxDefaultValidator,
            const wxString& name = wxString::FromAscii(wxListBoxNameStr));

    virtual bool IsChecked(unsigned int index) const override;
    virtual void Check(unsigned int index, bool check = true) override;

    int GetItemHeight() const;

    void DoCreateCheckList();

private:
    public:
# 45 "/usr/include/wx-3.1-unofficial/wx/gtk/checklst.h"
#pragma GCC diagnostic push
# 45 "/usr/include/wx-3.1-unofficial/wx/gtk/checklst.h"
   
# 45 "/usr/include/wx-3.1-unofficial/wx/gtk/checklst.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 45 "/usr/include/wx-3.1-unofficial/wx/gtk/checklst.h"
    virtual wxClassInfo *GetClassInfo() const;
# 45 "/usr/include/wx-3.1-unofficial/wx/gtk/checklst.h"
#pragma GCC diagnostic pop
# 45 "/usr/include/wx-3.1-unofficial/wx/gtk/checklst.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 46 "/usr/include/wx-3.1-unofficial/wx/checklst.h" 2
# 73 "/usr/include/wx-3.1-unofficial/wx/wx.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/choice.h" 1
# 18 "/usr/include/wx-3.1-unofficial/wx/choice.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 19 "/usr/include/wx-3.1-unofficial/wx/choice.h" 2
# 28 "/usr/include/wx-3.1-unofficial/wx/choice.h"
extern __attribute__ ((visibility("default"))) const char wxChoiceNameStr[];





class __attribute__ ((visibility("default"))) wxChoiceBase : public wxControlWithItems
{
public:
    wxChoiceBase() { }
    virtual ~wxChoiceBase();
# 47 "/usr/include/wx-3.1-unofficial/wx/choice.h"
    virtual int GetCurrentSelection() const { return GetSelection(); }



    virtual void SetColumns(int = 1 ) { }
    virtual int GetColumns() const { return 1 ; }


    void Command(wxCommandEvent& event) override;


    virtual bool IsSorted() const override { return HasFlag(0x0008); }

protected:




    virtual wxSize DoGetBestSize() const override;

private:
    private: wxChoiceBase(const wxChoiceBase&) = delete; wxChoiceBase& operator=(const wxChoiceBase&) = delete;
};
# 82 "/usr/include/wx-3.1-unofficial/wx/choice.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/gtk/choice.h" 1
# 12 "/usr/include/wx-3.1-unofficial/wx/gtk/choice.h"
class wxSortedArrayString;
class wxArrayString;





class wxGtkCollatedArrayString;

class __attribute__ ((visibility("default"))) wxChoice : public wxChoiceBase
{
public:
    wxChoice()
    {
        Init();
    }
    wxChoice( wxWindow *parent, wxWindowID id,
            const wxPoint& pos = wxDefaultPosition,
            const wxSize& size = wxDefaultSize,
            int n = 0, const wxString choices[] = (const wxString *) 
# 31 "/usr/include/wx-3.1-unofficial/wx/gtk/choice.h" 3 4
                                                                    __null
# 31 "/usr/include/wx-3.1-unofficial/wx/gtk/choice.h"
                                                                        ,
            long style = 0,
            const wxValidator& validator = wxDefaultValidator,
            const wxString& name = wxString::FromAscii(wxChoiceNameStr) )
    {
        Init();
        Create(parent, id, pos, size, n, choices, style, validator, name);
    }
    wxChoice( wxWindow *parent, wxWindowID id,
            const wxPoint& pos,
            const wxSize& size,
            const wxArrayString& choices,
            long style = 0,
            const wxValidator& validator = wxDefaultValidator,
            const wxString& name = wxString::FromAscii(wxChoiceNameStr) )
    {
        Init();
        Create(parent, id, pos, size, choices, style, validator, name);
    }
    virtual ~wxChoice();
    bool Create( wxWindow *parent, wxWindowID id,
            const wxPoint& pos = wxDefaultPosition,
            const wxSize& size = wxDefaultSize,
            int n = 0, const wxString choices[] = 
# 54 "/usr/include/wx-3.1-unofficial/wx/gtk/choice.h" 3 4
                                                 __null
# 54 "/usr/include/wx-3.1-unofficial/wx/gtk/choice.h"
                                                     ,
            long style = 0,
            const wxValidator& validator = wxDefaultValidator,
            const wxString& name = wxString::FromAscii(wxChoiceNameStr) );
    bool Create( wxWindow *parent, wxWindowID id,
            const wxPoint& pos,
            const wxSize& size,
            const wxArrayString& choices,
            long style = 0,
            const wxValidator& validator = wxDefaultValidator,
            const wxString& name = wxString::FromAscii(wxChoiceNameStr) );

    int GetSelection() const override;
    void SetSelection(int n) override;

    virtual unsigned int GetCount() const override;
    virtual int FindString(const wxString& s, bool bCase = false) const override;
    virtual wxString GetString(unsigned int n) const override;
    virtual void SetString(unsigned int n, const wxString& string) override;

    virtual void SetColumns(int n=1) override;
    virtual int GetColumns() const override;

    virtual void GTKDisableEvents();
    virtual void GTKEnableEvents();

    static wxVisualAttributes
    GetClassDefaultAttributes(wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL);

protected:


    wxGtkCollatedArrayString *m_strings;


    wxArrayPtrVoid m_clientData;


    int m_stringCellIndex;

    virtual wxSize DoGetBestSize() const override;
    virtual wxSize DoGetSizeFromTextSize(int xlen, int ylen = -1) const override;
    virtual int DoInsertItems(const wxArrayStringsAdapter& items,
                              unsigned int pos,
                              void **clientData, wxClientDataType type) override;
    virtual void DoSetItemClientData(unsigned int n, void* clientData) override;
    virtual void* DoGetItemClientData(unsigned int n) const override;
    virtual void DoClear() override;
    virtual void DoDeleteOneItem(unsigned int n) override;

    virtual bool GTKHandleFocusOut() override;
    virtual GdkWindow *GTKGetWindow(wxArrayGdkWindows& windows) const override;
    virtual void DoApplyWidgetStyle(GtkRcStyle *style) override;



    virtual void GTKInsertComboBoxTextItem( unsigned int n, const wxString& text );

private:
    void Init();

    public:
# 115 "/usr/include/wx-3.1-unofficial/wx/gtk/choice.h"
#pragma GCC diagnostic push
# 115 "/usr/include/wx-3.1-unofficial/wx/gtk/choice.h"
   
# 115 "/usr/include/wx-3.1-unofficial/wx/gtk/choice.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 115 "/usr/include/wx-3.1-unofficial/wx/gtk/choice.h"
    virtual wxClassInfo *GetClassInfo() const;
# 115 "/usr/include/wx-3.1-unofficial/wx/gtk/choice.h"
#pragma GCC diagnostic pop
# 115 "/usr/include/wx-3.1-unofficial/wx/gtk/choice.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 83 "/usr/include/wx-3.1-unofficial/wx/choice.h" 2
# 74 "/usr/include/wx-3.1-unofficial/wx/wx.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/scrolbar.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/scrolbar.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/scrolbar.h" 2





extern __attribute__ ((visibility("default"))) const char wxScrollBarNameStr[];





class __attribute__ ((visibility("default"))) wxScrollBarBase : public wxControl
{
public:
    wxScrollBarBase() { }
# 45 "/usr/include/wx-3.1-unofficial/wx/scrolbar.h"
    virtual int GetThumbPosition() const = 0;
    virtual int GetThumbSize() const = 0;
    virtual int GetPageSize() const = 0;
    virtual int GetRange() const = 0;

    bool IsVertical() const { return (m_windowStyle & wxVERTICAL) != 0; }


    virtual void SetThumbPosition(int viewStart) = 0;
    virtual void SetScrollbar(int position, int thumbSize,
                              int range, int pageSize,
                              bool refresh = true) override = 0;


    bool IsNeeded() const { return GetRange() > GetThumbSize(); }

private:
    private: wxScrollBarBase(const wxScrollBarBase&) = delete; wxScrollBarBase& operator=(const wxScrollBarBase&) = delete;
};
# 72 "/usr/include/wx-3.1-unofficial/wx/scrolbar.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/gtk/scrolbar.h" 1
# 16 "/usr/include/wx-3.1-unofficial/wx/gtk/scrolbar.h"
class __attribute__ ((visibility("default"))) wxScrollBar: public wxScrollBarBase
{
public:
    wxScrollBar();
    inline wxScrollBar( wxWindow *parent, wxWindowID id,
           const wxPoint& pos = wxDefaultPosition,
           const wxSize& size = wxDefaultSize,
           long style = wxHORIZONTAL,
           const wxValidator& validator = wxDefaultValidator,
           const wxString& name = wxString::FromAscii(wxScrollBarNameStr) )
    {
        Create( parent, id, pos, size, style, validator, name );
    }
    bool Create( wxWindow *parent, wxWindowID id,
           const wxPoint& pos = wxDefaultPosition,
           const wxSize& size = wxDefaultSize,
           long style = wxHORIZONTAL,
           const wxValidator& validator = wxDefaultValidator,
           const wxString& name = wxString::FromAscii(wxScrollBarNameStr) );
    virtual ~wxScrollBar();
    int GetThumbPosition() const override;
    int GetThumbSize() const override;
    int GetPageSize() const override;
    int GetRange() const override;
    virtual void SetThumbPosition( int viewStart ) override;
    virtual void SetScrollbar( int position, int thumbSize, int range, int pageSize,
      bool refresh = true ) override;

    void SetThumbSize(int thumbSize);
    void SetPageSize( int pageLength );
    void SetRange(int range);

    static wxVisualAttributes
    GetClassDefaultAttributes(wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL);

    public:
# 51 "/usr/include/wx-3.1-unofficial/wx/gtk/scrolbar.h"
#pragma GCC diagnostic push
# 51 "/usr/include/wx-3.1-unofficial/wx/gtk/scrolbar.h"
   
# 51 "/usr/include/wx-3.1-unofficial/wx/gtk/scrolbar.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 51 "/usr/include/wx-3.1-unofficial/wx/gtk/scrolbar.h"
    virtual wxClassInfo *GetClassInfo() const;
# 51 "/usr/include/wx-3.1-unofficial/wx/gtk/scrolbar.h"
#pragma GCC diagnostic pop
# 51 "/usr/include/wx-3.1-unofficial/wx/gtk/scrolbar.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 73 "/usr/include/wx-3.1-unofficial/wx/scrolbar.h" 2
# 75 "/usr/include/wx-3.1-unofficial/wx/wx.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/stattext.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/stattext.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/stattext.h" 2
# 32 "/usr/include/wx-3.1-unofficial/wx/stattext.h"
extern __attribute__ ((visibility("default"))) const char wxStaticTextNameStr[];

class __attribute__ ((visibility("default"))) wxStaticTextBase : public wxControl
{
public:
    wxStaticTextBase() { }




    void Wrap(int width);


    virtual bool AcceptsFocus() const override { return false; }
    virtual bool HasTransparentBackground() override { return true; }

    bool IsEllipsized() const
    {
        return (GetWindowStyle() & (0x0004 | 0x0008 | 0x0010)) != 0;
    }

protected:


    virtual wxBorder GetDefaultBorder() const override { return wxBORDER_NONE; }



    virtual wxString GetEllipsizedLabel() const;



    wxString Ellipsize(const wxString& label) const;
# 74 "/usr/include/wx-3.1-unofficial/wx/stattext.h"
    void UpdateLabel();






    virtual wxString WXGetVisibleLabel() const = 0;




    virtual void WXSetVisibleLabel(const wxString& str) = 0;



    void AutoResizeIfNecessary();

private:
    private: wxStaticTextBase(const wxStaticTextBase&) = delete; wxStaticTextBase& operator=(const wxStaticTextBase&) = delete;
};
# 106 "/usr/include/wx-3.1-unofficial/wx/stattext.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/gtk/stattext.h" 1
# 16 "/usr/include/wx-3.1-unofficial/wx/gtk/stattext.h"
class __attribute__ ((visibility("default"))) wxStaticText : public wxStaticTextBase
{
public:
    wxStaticText();
    wxStaticText(wxWindow *parent,
                 wxWindowID id,
                 const wxString &label,
                 const wxPoint &pos = wxDefaultPosition,
                 const wxSize &size = wxDefaultSize,
                 long style = 0,
                 const wxString &name = wxString::FromAscii(wxStaticTextNameStr) );

    bool Create(wxWindow *parent,
                wxWindowID id,
                const wxString &label,
                const wxPoint &pos = wxDefaultPosition,
                const wxSize &size = wxDefaultSize,
                long style = 0,
                const wxString &name = wxString::FromAscii(wxStaticTextNameStr) );

    void SetLabel( const wxString &label ) override;

    bool SetFont( const wxFont &font ) override;

    static wxVisualAttributes
    GetClassDefaultAttributes(wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL);




protected:
    virtual bool GTKWidgetNeedsMnemonic() const override;
    virtual void GTKWidgetDoSetMnemonic(GtkWidget* w) override;

    virtual wxSize DoGetBestSize() const override;

    virtual wxString WXGetVisibleLabel() const override;
    virtual void WXSetVisibleLabel(const wxString& str) override;

    virtual bool DoSetLabelMarkup(const wxString& markup) override;


private:

    typedef void (wxStaticText::*GTKLabelSetter)(GtkLabel *, const wxString&);

    void GTKDoSetLabel(GTKLabelSetter setter, const wxString& label);


    public:
# 65 "/usr/include/wx-3.1-unofficial/wx/gtk/stattext.h"
#pragma GCC diagnostic push
# 65 "/usr/include/wx-3.1-unofficial/wx/gtk/stattext.h"
   
# 65 "/usr/include/wx-3.1-unofficial/wx/gtk/stattext.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 65 "/usr/include/wx-3.1-unofficial/wx/gtk/stattext.h"
    virtual wxClassInfo *GetClassInfo() const;
# 65 "/usr/include/wx-3.1-unofficial/wx/gtk/stattext.h"
#pragma GCC diagnostic pop
# 65 "/usr/include/wx-3.1-unofficial/wx/gtk/stattext.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 107 "/usr/include/wx-3.1-unofficial/wx/stattext.h" 2
# 76 "/usr/include/wx-3.1-unofficial/wx/wx.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/statbmp.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/statbmp.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/statbmp.h" 2







extern __attribute__ ((visibility("default"))) const char wxStaticBitmapNameStr[];


class __attribute__ ((visibility("default"))) wxStaticBitmapBase : public wxControl
{
public:
    enum ScaleMode
    {
        Scale_None,
        Scale_Fill,
        Scale_AspectFit,
        Scale_AspectFill
    };

    wxStaticBitmapBase() { }
    virtual ~wxStaticBitmapBase();


    virtual void SetIcon(const wxIcon& icon) = 0;
    virtual void SetBitmap(const wxBitmap& bitmap) = 0;
    virtual wxBitmap GetBitmap() const = 0;
    virtual wxIcon GetIcon() const
    {


        return wxIcon();
    }
    virtual void SetScaleMode(ScaleMode ) { }
    virtual ScaleMode GetScaleMode() const { return Scale_None; }


    virtual bool AcceptsFocus() const override { return false; }
    virtual bool HasTransparentBackground() override { return true; }

protected:

    virtual wxBorder GetDefaultBorder() const override { return wxBORDER_NONE; }

    virtual wxSize DoGetBestSize() const override;

    private: wxStaticBitmapBase(const wxStaticBitmapBase&) = delete; wxStaticBitmapBase& operator=(const wxStaticBitmapBase&) = delete;
};
# 72 "/usr/include/wx-3.1-unofficial/wx/statbmp.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/gtk/statbmp.h" 1
# 18 "/usr/include/wx-3.1-unofficial/wx/gtk/statbmp.h"
class __attribute__ ((visibility("default"))) wxStaticBitmap : public wxStaticBitmapBase
{
public:
    wxStaticBitmap();
    wxStaticBitmap( wxWindow *parent,
                    wxWindowID id,
                    const wxBitmap& label,
                    const wxPoint& pos = wxDefaultPosition,
                    const wxSize& size = wxDefaultSize,
                    long style = 0,
                    const wxString& name = wxString::FromAscii(wxStaticBitmapNameStr));
    bool Create( wxWindow *parent,
                 wxWindowID id,
                 const wxBitmap& label,
                 const wxPoint& pos = wxDefaultPosition,
                 const wxSize& size = wxDefaultSize,
                 long style = 0,
                 const wxString& name = wxString::FromAscii(wxStaticBitmapNameStr));

    virtual void SetIcon(const wxIcon& icon) override { SetBitmap( icon ); }
    virtual void SetBitmap( const wxBitmap& bitmap ) override;
    virtual wxBitmap GetBitmap() const override { return m_bitmap; }


    wxIcon GetIcon() const override
    {


        return (const wxIcon &)m_bitmap;
    }

    static wxVisualAttributes
    GetClassDefaultAttributes(wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL);

private:
    wxBitmap m_bitmap;

    public:
# 55 "/usr/include/wx-3.1-unofficial/wx/gtk/statbmp.h"
#pragma GCC diagnostic push
# 55 "/usr/include/wx-3.1-unofficial/wx/gtk/statbmp.h"
   
# 55 "/usr/include/wx-3.1-unofficial/wx/gtk/statbmp.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 55 "/usr/include/wx-3.1-unofficial/wx/gtk/statbmp.h"
    virtual wxClassInfo *GetClassInfo() const;
# 55 "/usr/include/wx-3.1-unofficial/wx/gtk/statbmp.h"
#pragma GCC diagnostic pop
# 55 "/usr/include/wx-3.1-unofficial/wx/gtk/statbmp.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 73 "/usr/include/wx-3.1-unofficial/wx/statbmp.h" 2
# 77 "/usr/include/wx-3.1-unofficial/wx/wx.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/statbox.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/statbox.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/statbox.h" 2






extern __attribute__ ((visibility("default"))) const char wxStaticBoxNameStr[];





class __attribute__ ((visibility("default"))) wxStaticBoxBase : public wxNavigationEnabled<wxControl>
{
public:
    wxStaticBoxBase();


    virtual bool HasTransparentBackground() override { return true; }
    virtual bool Enable(bool enable = true) override;






    virtual void GetBordersForSizer(int *borderTop, int *borderOther) const;





    void WXDestroyWithoutChildren();

protected:

    virtual wxBorder GetDefaultBorder() const override { return wxBORDER_NONE; }



    wxWindow* m_labelWin;






    bool m_areChildrenEnabled;

    private: wxStaticBoxBase(const wxStaticBoxBase&) = delete; wxStaticBoxBase& operator=(const wxStaticBoxBase&) = delete;
};
# 74 "/usr/include/wx-3.1-unofficial/wx/statbox.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/gtk/statbox.h" 1
# 16 "/usr/include/wx-3.1-unofficial/wx/gtk/statbox.h"
class __attribute__ ((visibility("default"))) wxStaticBox : public wxStaticBoxBase
{
public:
    wxStaticBox()
    {
    }

    wxStaticBox( wxWindow *parent,
                 wxWindowID id,
                 const wxString &label,
                 const wxPoint &pos = wxDefaultPosition,
                 const wxSize &size = wxDefaultSize,
                 long style = 0,
                 const wxString &name = wxString::FromAscii(wxStaticBoxNameStr) )
    {
        Create( parent, id, label, pos, size, style, name );
    }

    wxStaticBox( wxWindow *parent,
                 wxWindowID id,
                 wxWindow* label,
                 const wxPoint &pos = wxDefaultPosition,
                 const wxSize &size = wxDefaultSize,
                 long style = 0,
                 const wxString &name = wxString::FromAscii(wxStaticBoxNameStr) )
    {
        Create( parent, id, label, pos, size, style, name );
    }

    bool Create( wxWindow *parent,
                 wxWindowID id,
                 const wxString &label,
                 const wxPoint &pos = wxDefaultPosition,
                 const wxSize &size = wxDefaultSize,
                 long style = 0,
                 const wxString &name = wxString::FromAscii(wxStaticBoxNameStr) )
    {
        return DoCreate( parent, id, &label, 
# 53 "/usr/include/wx-3.1-unofficial/wx/gtk/statbox.h" 3 4
                                            __null
# 53 "/usr/include/wx-3.1-unofficial/wx/gtk/statbox.h"
                                                , pos, size, style, name );
    }

    bool Create( wxWindow *parent,
                 wxWindowID id,
                 wxWindow* label,
                 const wxPoint &pos = wxDefaultPosition,
                 const wxSize &size = wxDefaultSize,
                 long style = 0,
                 const wxString &name = wxString::FromAscii(wxStaticBoxNameStr) )
    {
        return DoCreate( parent, id, 
# 64 "/usr/include/wx-3.1-unofficial/wx/gtk/statbox.h" 3 4
                                    __null
# 64 "/usr/include/wx-3.1-unofficial/wx/gtk/statbox.h"
                                        , label, pos, size, style, name );
    }

    virtual void SetLabel( const wxString &label ) override;

    static wxVisualAttributes
    GetClassDefaultAttributes(wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL);



    virtual bool GTKIsTransparentForMouse() const override { return true; }

    virtual void GetBordersForSizer(int *borderTop, int *borderOther) const override;

    virtual void AddChild( wxWindowBase *child ) override;

protected:


    bool DoCreate(wxWindow *parent,
                  wxWindowID id,
                  const wxString* labelStr,
                  wxWindow* labelWin,
                  const wxPoint& pos,
                  const wxSize& size,
                  long style,
                  const wxString& name);

    virtual bool GTKWidgetNeedsMnemonic() const override;
    virtual void GTKWidgetDoSetMnemonic(GtkWidget* w) override;

    void DoApplyWidgetStyle(GtkRcStyle *style) override;

    public:
# 97 "/usr/include/wx-3.1-unofficial/wx/gtk/statbox.h"
#pragma GCC diagnostic push
# 97 "/usr/include/wx-3.1-unofficial/wx/gtk/statbox.h"
   
# 97 "/usr/include/wx-3.1-unofficial/wx/gtk/statbox.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 97 "/usr/include/wx-3.1-unofficial/wx/gtk/statbox.h"
    virtual wxClassInfo *GetClassInfo() const;
# 97 "/usr/include/wx-3.1-unofficial/wx/gtk/statbox.h"
#pragma GCC diagnostic pop
# 97 "/usr/include/wx-3.1-unofficial/wx/gtk/statbox.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 75 "/usr/include/wx-3.1-unofficial/wx/statbox.h" 2
# 78 "/usr/include/wx-3.1-unofficial/wx/wx.h" 2

# 1 "/usr/include/wx-3.1-unofficial/wx/radiobox.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/radiobox.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/radiobox.h" 2
# 24 "/usr/include/wx-3.1-unofficial/wx/radiobox.h"
class wxToolTip;

typedef wxBaseArray<wxToolTip *> wxBaseArrayForwxToolTipArray; class wxToolTipArray : public wxBaseArrayForwxToolTipArray { typedef wxBaseArrayForwxToolTipArray Base; public: wxToolTipArray() : Base() { } explicit wxToolTipArray(size_t n) : Base(n) { } wxToolTipArray(size_t n, Base::const_reference v) : Base(n, v) { } template <class InputIterator> wxToolTipArray(InputIterator first, InputIterator last) : Base(first, last) { } };



extern __attribute__ ((visibility("default"))) const char wxRadioBoxNameStr[];







class __attribute__ ((visibility("default"))) wxRadioBoxBase : public wxItemContainerImmutable
{
public:
    virtual ~wxRadioBoxBase();


    virtual bool Enable(unsigned int n, bool enable = true) = 0;
    virtual bool Show(unsigned int n, bool show = true) = 0;
    virtual bool IsItemEnabled(unsigned int n) const = 0;
    virtual bool IsItemShown(unsigned int n) const = 0;


    unsigned int GetColumnCount() const { return m_numCols; }
    unsigned int GetRowCount() const { return m_numRows; }



    int GetNextItem(int item, wxDirection dir, long style) const;



    void SetItemToolTip(unsigned int item, const wxString& text);


    wxToolTip *GetItemToolTip(unsigned int item) const
        { return m_itemsTooltips ? (*m_itemsTooltips)[item] : 
# 63 "/usr/include/wx-3.1-unofficial/wx/radiobox.h" 3 4
                                                             __null
# 63 "/usr/include/wx-3.1-unofficial/wx/radiobox.h"
                                                                 ; }




    void SetItemHelpText(unsigned int n, const wxString& helpText);


    wxString GetItemHelpText(unsigned int n) const;
# 83 "/usr/include/wx-3.1-unofficial/wx/radiobox.h"
    virtual int GetItemFromPoint(const wxPoint& ) const
    {
        return (-1);
    }


protected:
    wxRadioBoxBase()
    {
        m_numCols =
        m_numRows =
        m_majorDim = 0;


        m_itemsTooltips = 
# 97 "/usr/include/wx-3.1-unofficial/wx/radiobox.h" 3 4
                         __null
# 97 "/usr/include/wx-3.1-unofficial/wx/radiobox.h"
                             ;

    }

    virtual wxBorder GetDefaultBorder() const { return wxBORDER_NONE; }



    unsigned int GetMajorDim() const { return m_majorDim; }




    void SetMajorDim(unsigned int majorDim, long style);
# 119 "/usr/include/wx-3.1-unofficial/wx/radiobox.h"
    virtual void DoSetItemToolTip(unsigned int item, wxToolTip *tooltip);


    bool HasItemToolTips() const { return m_itemsTooltips != 
# 122 "/usr/include/wx-3.1-unofficial/wx/radiobox.h" 3 4
                                                            __null
# 122 "/usr/include/wx-3.1-unofficial/wx/radiobox.h"
                                                                ; }





    wxString DoGetHelpTextAtPoint(const wxWindow *derived,
                                  const wxPoint& pt,
                                  wxHelpEvent::Origin origin) const;


private:



    unsigned int m_majorDim,
                 m_numCols,
                 m_numRows;





    wxToolTipArray *m_itemsTooltips;




    wxArrayString m_itemsHelpTexts;

};
# 161 "/usr/include/wx-3.1-unofficial/wx/radiobox.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/gtk/radiobox.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/gtk/radiobox.h"
class wxGTKRadioButtonInfo;



typedef wxGTKRadioButtonInfo _WX_LIST_ITEM_TYPE_wxRadioBoxButtonsInfoList; typedef int (*wxSortFuncFor_wxRadioBoxButtonsInfoList)(const wxGTKRadioButtonInfo **, const wxGTKRadioButtonInfo **); class __attribute__ ((visibility("default"))) wxwxRadioBoxButtonsInfoListNode : public wxNodeBase { public: wxwxRadioBoxButtonsInfoListNode(wxListBase *list = 
# 18 "/usr/include/wx-3.1-unofficial/wx/gtk/radiobox.h" 3 4
__null
# 18 "/usr/include/wx-3.1-unofficial/wx/gtk/radiobox.h"
, wxwxRadioBoxButtonsInfoListNode *previous = 
# 18 "/usr/include/wx-3.1-unofficial/wx/gtk/radiobox.h" 3 4
__null
# 18 "/usr/include/wx-3.1-unofficial/wx/gtk/radiobox.h"
, wxwxRadioBoxButtonsInfoListNode *next = 
# 18 "/usr/include/wx-3.1-unofficial/wx/gtk/radiobox.h" 3 4
__null
# 18 "/usr/include/wx-3.1-unofficial/wx/gtk/radiobox.h"
, wxGTKRadioButtonInfo *data = 
# 18 "/usr/include/wx-3.1-unofficial/wx/gtk/radiobox.h" 3 4
__null
# 18 "/usr/include/wx-3.1-unofficial/wx/gtk/radiobox.h"
, const wxListKey& key = wxDefaultListKey) : wxNodeBase(list, previous, next, data, key) { } wxwxRadioBoxButtonsInfoListNode *GetNext() const { return (wxwxRadioBoxButtonsInfoListNode *)wxNodeBase::GetNext(); } wxwxRadioBoxButtonsInfoListNode *GetPrevious() const { return (wxwxRadioBoxButtonsInfoListNode *)wxNodeBase::GetPrevious(); } wxGTKRadioButtonInfo *GetData() const { return (wxGTKRadioButtonInfo *)wxNodeBase::GetData(); } void SetData(wxGTKRadioButtonInfo *data) { wxNodeBase::SetData(data); } protected: virtual void DeleteData() override; private: wxwxRadioBoxButtonsInfoListNode(const wxwxRadioBoxButtonsInfoListNode&) = delete; wxwxRadioBoxButtonsInfoListNode& operator=(const wxwxRadioBoxButtonsInfoListNode&) = delete; }; class __attribute__ ((visibility("default"))) wxRadioBoxButtonsInfoList : public wxListBase { public: typedef wxwxRadioBoxButtonsInfoListNode Node; class __attribute__ ((visibility("default"))) compatibility_iterator { public: compatibility_iterator(Node *ptr = 
# 18 "/usr/include/wx-3.1-unofficial/wx/gtk/radiobox.h" 3 4
__null
# 18 "/usr/include/wx-3.1-unofficial/wx/gtk/radiobox.h"
) : m_ptr(ptr) { } Node *operator->() const { return m_ptr; } operator Node *() const { return m_ptr; } private: Node *m_ptr; }; wxRadioBoxButtonsInfoList(wxKeyType keyType = wxKEY_NONE) : wxListBase(keyType) { } wxRadioBoxButtonsInfoList(const wxRadioBoxButtonsInfoList& list) : wxListBase(list.GetKeyType()) { Assign(list); } wxRadioBoxButtonsInfoList& operator=(const wxRadioBoxButtonsInfoList& list) { if (&list != this) Assign(list); return *this; } wxwxRadioBoxButtonsInfoListNode *GetFirst() const { return (wxwxRadioBoxButtonsInfoListNode *)wxListBase::GetFirst(); } wxwxRadioBoxButtonsInfoListNode *GetLast() const { return (wxwxRadioBoxButtonsInfoListNode *)wxListBase::GetLast(); } wxwxRadioBoxButtonsInfoListNode *Item(size_t index) const { return (wxwxRadioBoxButtonsInfoListNode *)wxListBase::Item(index); } wxGTKRadioButtonInfo *operator[](size_t index) const { wxwxRadioBoxButtonsInfoListNode *node = Item(index); return node ? (wxGTKRadioButtonInfo*)(node->GetData()) : 
# 18 "/usr/include/wx-3.1-unofficial/wx/gtk/radiobox.h" 3 4
__null
# 18 "/usr/include/wx-3.1-unofficial/wx/gtk/radiobox.h"
; } wxwxRadioBoxButtonsInfoListNode *Append(wxGTKRadioButtonInfo *object) { return (wxwxRadioBoxButtonsInfoListNode *)wxListBase::Append(object); } wxwxRadioBoxButtonsInfoListNode *Insert(wxGTKRadioButtonInfo *object) { return (wxwxRadioBoxButtonsInfoListNode *)Insert(static_cast<wxwxRadioBoxButtonsInfoListNode *>(
# 18 "/usr/include/wx-3.1-unofficial/wx/gtk/radiobox.h" 3 4
__null
# 18 "/usr/include/wx-3.1-unofficial/wx/gtk/radiobox.h"
), object); } wxwxRadioBoxButtonsInfoListNode *Insert(size_t pos, wxGTKRadioButtonInfo *object) { return (wxwxRadioBoxButtonsInfoListNode *)wxListBase::Insert(pos, object); } wxwxRadioBoxButtonsInfoListNode *Insert(wxwxRadioBoxButtonsInfoListNode *prev, wxGTKRadioButtonInfo *object) { return (wxwxRadioBoxButtonsInfoListNode *)wxListBase::Insert(prev, object); } wxwxRadioBoxButtonsInfoListNode *Append(long key, void *object) { return (wxwxRadioBoxButtonsInfoListNode *)wxListBase::Append(key, object); } wxwxRadioBoxButtonsInfoListNode *Append(const wxChar *key, void *object) { return (wxwxRadioBoxButtonsInfoListNode *)wxListBase::Append(key, object); } wxwxRadioBoxButtonsInfoListNode *DetachNode(wxwxRadioBoxButtonsInfoListNode *node) { return (wxwxRadioBoxButtonsInfoListNode *)wxListBase::DetachNode(node); } bool DeleteNode(wxwxRadioBoxButtonsInfoListNode *node) { return wxListBase::DeleteNode(node); } bool DeleteObject(wxGTKRadioButtonInfo *object) { return wxListBase::DeleteObject(object); } void Erase(wxwxRadioBoxButtonsInfoListNode *it) { DeleteNode(it); } wxwxRadioBoxButtonsInfoListNode *Find(const wxGTKRadioButtonInfo *object) const { return (wxwxRadioBoxButtonsInfoListNode *)wxListBase::Find(object); } virtual wxwxRadioBoxButtonsInfoListNode *Find(const wxListKey& key) const { return (wxwxRadioBoxButtonsInfoListNode *)wxListBase::Find(key); } bool Member(const wxGTKRadioButtonInfo *object) const { return Find(object) != 
# 18 "/usr/include/wx-3.1-unofficial/wx/gtk/radiobox.h" 3 4
__null
# 18 "/usr/include/wx-3.1-unofficial/wx/gtk/radiobox.h"
; } int IndexOf(wxGTKRadioButtonInfo *object) const { return wxListBase::IndexOf(object); } void Sort(wxSortCompareFunction func) { wxListBase::Sort(func); } void Sort(wxSortFuncFor_wxRadioBoxButtonsInfoList func) { Sort((wxSortCompareFunction)func); } protected: virtual wxNodeBase *CreateNode(wxNodeBase *prev, wxNodeBase *next, void *data, const wxListKey& key = wxDefaultListKey) override { return new wxwxRadioBoxButtonsInfoListNode(this, (wxwxRadioBoxButtonsInfoListNode *)prev, (wxwxRadioBoxButtonsInfoListNode *)next, (wxGTKRadioButtonInfo *)data, key); } public: typedef size_t size_type; typedef int difference_type; typedef wxGTKRadioButtonInfo* value_type; typedef wxGTKRadioButtonInfo* base_value_type; typedef value_type& reference; typedef const value_type& const_reference; typedef base_value_type& base_reference; typedef const base_value_type& const_base_reference; class __attribute__ ((visibility("default"))) iterator { public: typedef std::ptrdiff_t difference_type; typedef std::bidirectional_iterator_tag iterator_category; typedef wxGTKRadioButtonInfo* value_type; typedef value_type* pointer; typedef value_type& reference; typedef wxwxRadioBoxButtonsInfoListNode Node; typedef iterator itor; Node* m_node; Node* m_init; public: typedef reference reference_type; typedef pointer pointer_type; iterator(Node* node, Node* init) : m_node(node), m_init(init) {} iterator() : m_node(
# 18 "/usr/include/wx-3.1-unofficial/wx/gtk/radiobox.h" 3 4
__null
# 18 "/usr/include/wx-3.1-unofficial/wx/gtk/radiobox.h"
), m_init(
# 18 "/usr/include/wx-3.1-unofficial/wx/gtk/radiobox.h" 3 4
__null
# 18 "/usr/include/wx-3.1-unofficial/wx/gtk/radiobox.h"
) { } reference_type operator*() const { return *(pointer_type)m_node->GetDataPtr(); } itor& operator++() { do { if ( m_node ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/gtk/radiobox.h", 18, __FUNCTION__, "m_node", L"uninitialized iterator"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); m_node = m_node->GetNext(); return *this; } const itor operator++(int) { itor tmp = *this; do { if ( m_node ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/gtk/radiobox.h", 18, __FUNCTION__, "m_node", L"uninitialized iterator"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); m_node = m_node->GetNext(); return tmp; } itor& operator--() { m_node = m_node ? m_node->GetPrevious() : m_init; return *this; } const itor operator--(int) { itor tmp = *this; m_node = m_node ? m_node->GetPrevious() : m_init; return tmp; } bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; class __attribute__ ((visibility("default"))) const_iterator { public: typedef std::ptrdiff_t difference_type; typedef std::bidirectional_iterator_tag iterator_category; typedef wxGTKRadioButtonInfo* value_type; typedef const value_type* pointer; typedef const value_type& reference; typedef wxwxRadioBoxButtonsInfoListNode Node; typedef const_iterator itor; Node* m_node; Node* m_init; public: typedef reference reference_type; typedef pointer pointer_type; const_iterator(Node* node, Node* init) : m_node(node), m_init(init) { } const_iterator() : m_node(
# 18 "/usr/include/wx-3.1-unofficial/wx/gtk/radiobox.h" 3 4
__null
# 18 "/usr/include/wx-3.1-unofficial/wx/gtk/radiobox.h"
), m_init(
# 18 "/usr/include/wx-3.1-unofficial/wx/gtk/radiobox.h" 3 4
__null
# 18 "/usr/include/wx-3.1-unofficial/wx/gtk/radiobox.h"
) { } const_iterator(const iterator& it) : m_node(it.m_node), m_init(it.m_init) { } reference_type operator*() const { return *(pointer_type)m_node->GetDataPtr(); } itor& operator++() { do { if ( m_node ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/gtk/radiobox.h", 18, __FUNCTION__, "m_node", L"uninitialized iterator"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); m_node = m_node->GetNext(); return *this; } const itor operator++(int) { itor tmp = *this; do { if ( m_node ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/gtk/radiobox.h", 18, __FUNCTION__, "m_node", L"uninitialized iterator"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); m_node = m_node->GetNext(); return tmp; } itor& operator--() { m_node = m_node ? m_node->GetPrevious() : m_init; return *this; } const itor operator--(int) { itor tmp = *this; m_node = m_node ? m_node->GetPrevious() : m_init; return tmp; } bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; class __attribute__ ((visibility("default"))) reverse_iterator { public: typedef std::ptrdiff_t difference_type; typedef std::bidirectional_iterator_tag iterator_category; typedef wxGTKRadioButtonInfo* value_type; typedef value_type* pointer; typedef value_type& reference; typedef wxwxRadioBoxButtonsInfoListNode Node; typedef reverse_iterator itor; Node* m_node; Node* m_init; public: typedef reference reference_type; typedef pointer pointer_type; reverse_iterator(Node* node, Node* init) : m_node(node), m_init(init) { } reverse_iterator() : m_node(
# 18 "/usr/include/wx-3.1-unofficial/wx/gtk/radiobox.h" 3 4
__null
# 18 "/usr/include/wx-3.1-unofficial/wx/gtk/radiobox.h"
), m_init(
# 18 "/usr/include/wx-3.1-unofficial/wx/gtk/radiobox.h" 3 4
__null
# 18 "/usr/include/wx-3.1-unofficial/wx/gtk/radiobox.h"
) { } reference_type operator*() const { return *(pointer_type)m_node->GetDataPtr(); } itor& operator++() { m_node = m_node->GetPrevious(); return *this; } const itor operator++(int) { itor tmp = *this; m_node = m_node->GetPrevious(); return tmp; } itor& operator--() { m_node = m_node ? m_node->GetNext() : m_init; return *this; } const itor operator--(int) { itor tmp = *this; m_node = m_node ? m_node->GetNext() : m_init; return tmp; } bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; class __attribute__ ((visibility("default"))) const_reverse_iterator { public: typedef std::ptrdiff_t difference_type; typedef std::bidirectional_iterator_tag iterator_category; typedef wxGTKRadioButtonInfo* value_type; typedef const value_type* pointer; typedef const value_type& reference; typedef wxwxRadioBoxButtonsInfoListNode Node; typedef const_reverse_iterator itor; Node* m_node; Node* m_init; public: typedef reference reference_type; typedef pointer pointer_type; const_reverse_iterator(Node* node, Node* init) : m_node(node), m_init(init) { } const_reverse_iterator() : m_node(
# 18 "/usr/include/wx-3.1-unofficial/wx/gtk/radiobox.h" 3 4
__null
# 18 "/usr/include/wx-3.1-unofficial/wx/gtk/radiobox.h"
), m_init(
# 18 "/usr/include/wx-3.1-unofficial/wx/gtk/radiobox.h" 3 4
__null
# 18 "/usr/include/wx-3.1-unofficial/wx/gtk/radiobox.h"
) { } const_reverse_iterator(const reverse_iterator& it) : m_node(it.m_node), m_init(it.m_init) { } reference_type operator*() const { return *(pointer_type)m_node->GetDataPtr(); } itor& operator++() { m_node = m_node->GetPrevious(); return *this; } const itor operator++(int) { itor tmp = *this; m_node = m_node->GetPrevious(); return tmp; } itor& operator--() { m_node = m_node ? m_node->GetNext() : m_init; return *this;} const itor operator--(int) { itor tmp = *this; m_node = m_node ? m_node->GetNext() : m_init; return tmp; } bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; explicit wxRadioBoxButtonsInfoList(size_type n, const_reference v = value_type()) { assign(n, v); } wxRadioBoxButtonsInfoList(const const_iterator& first, const const_iterator& last) { assign(first, last); } iterator begin() { return iterator(GetFirst(), GetLast()); } const_iterator begin() const { return const_iterator(GetFirst(), GetLast()); } iterator end() { return iterator(
# 18 "/usr/include/wx-3.1-unofficial/wx/gtk/radiobox.h" 3 4
__null
# 18 "/usr/include/wx-3.1-unofficial/wx/gtk/radiobox.h"
, GetLast()); } const_iterator end() const { return const_iterator(
# 18 "/usr/include/wx-3.1-unofficial/wx/gtk/radiobox.h" 3 4
__null
# 18 "/usr/include/wx-3.1-unofficial/wx/gtk/radiobox.h"
, GetLast()); } reverse_iterator rbegin() { return reverse_iterator(GetLast(), GetFirst()); } const_reverse_iterator rbegin() const { return const_reverse_iterator(GetLast(), GetFirst()); } reverse_iterator rend() { return reverse_iterator(
# 18 "/usr/include/wx-3.1-unofficial/wx/gtk/radiobox.h" 3 4
__null
# 18 "/usr/include/wx-3.1-unofficial/wx/gtk/radiobox.h"
, GetFirst()); } const_reverse_iterator rend() const { return const_reverse_iterator(
# 18 "/usr/include/wx-3.1-unofficial/wx/gtk/radiobox.h" 3 4
__null
# 18 "/usr/include/wx-3.1-unofficial/wx/gtk/radiobox.h"
, GetFirst()); } void resize(size_type n, value_type v = value_type()) { while (n < size()) pop_back(); while (n > size()) push_back(v); } size_type size() const { return GetCount(); } size_type max_size() const { return 0x7fffffff; } bool empty() const { return IsEmpty(); } reference front() { return *begin(); } const_reference front() const { return *begin(); } reference back() { iterator tmp = end(); return *--tmp; } const_reference back() const { const_iterator tmp = end(); return *--tmp; } void push_front(const_reference v = value_type()) { Insert(GetFirst(), (const_base_reference)v); } void pop_front() { DeleteNode(GetFirst()); } void push_back(const_reference v = value_type()) { Append((const_base_reference)v); } void pop_back() { DeleteNode(GetLast()); } void assign(const_iterator first, const const_iterator& last) { clear(); for(; first != last; ++first) Append((const_base_reference)*first); } void assign(size_type n, const_reference v = value_type()) { clear(); for(size_type i = 0; i < n; ++i) Append((const_base_reference)v); } iterator insert(const iterator& it, const_reference v) { if ( it == end() ) { Append((const_base_reference)v); iterator itins(end()); return --itins; } else { Insert(it.m_node, (const_base_reference)v); iterator itins(it); return --itins; } } void insert(const iterator& it, size_type n, const_reference v) { for(size_type i = 0; i < n; ++i) insert(it, v); } void insert(const iterator& it, const_iterator first, const const_iterator& last) { for(; first != last; ++first) insert(it, *first); } iterator erase(const iterator& it) { iterator next = iterator(it.m_node->GetNext(), GetLast()); DeleteNode(it.m_node); return next; } iterator erase(const iterator& first, const iterator& last) { iterator next = last; if ( next != end() ) ++next; DeleteNodes(first.m_node, last.m_node); return next; } void clear() { Clear(); } void splice(const iterator& it, wxRadioBoxButtonsInfoList& l, const iterator& first, const iterator& last) { insert(it, first, last); l.erase(first, last); } void splice(const iterator& it, wxRadioBoxButtonsInfoList& l) { splice(it, l, l.begin(), l.end() ); } void splice(const iterator& it, wxRadioBoxButtonsInfoList& l, const iterator& first) { if ( it != first ) { insert(it, *first); l.erase(first); } } void remove(const_reference v) { DeleteObject((const_base_reference)v); } void reverse() { Reverse(); } };






class __attribute__ ((visibility("default"))) wxRadioBox : public wxControl,
                                    public wxRadioBoxBase
{
public:

    wxRadioBox() { }
    wxRadioBox(wxWindow *parent,
               wxWindowID id,
               const wxString& title,
               const wxPoint& pos = wxDefaultPosition,
               const wxSize& size = wxDefaultSize,
               int n = 0,
               const wxString choices[] = (const wxString *) 
# 37 "/usr/include/wx-3.1-unofficial/wx/gtk/radiobox.h" 3 4
                                                            __null
# 37 "/usr/include/wx-3.1-unofficial/wx/gtk/radiobox.h"
                                                                ,
               int majorDim = 0,
               long style = wxHORIZONTAL,
               const wxValidator& val = wxDefaultValidator,
               const wxString& name = wxString::FromAscii(wxRadioBoxNameStr))
    {
        Create( parent, id, title, pos, size, n, choices, majorDim, style, val, name );
    }

    wxRadioBox(wxWindow *parent,
               wxWindowID id,
               const wxString& title,
               const wxPoint& pos,
               const wxSize& size,
               const wxArrayString& choices,
               int majorDim = 0,
               long style = wxHORIZONTAL,
               const wxValidator& val = wxDefaultValidator,
               const wxString& name = wxString::FromAscii(wxRadioBoxNameStr))
    {
        Create( parent, id, title, pos, size, choices, majorDim, style, val, name );
    }

    bool Create(wxWindow *parent,
                wxWindowID id,
                const wxString& title,
                const wxPoint& pos = wxDefaultPosition,
                const wxSize& size = wxDefaultSize,
                int n = 0,
                const wxString choices[] = (const wxString *) 
# 66 "/usr/include/wx-3.1-unofficial/wx/gtk/radiobox.h" 3 4
                                                             __null
# 66 "/usr/include/wx-3.1-unofficial/wx/gtk/radiobox.h"
                                                                 ,
                int majorDim = 0,
                long style = wxHORIZONTAL,
                const wxValidator& val = wxDefaultValidator,
                const wxString& name = wxString::FromAscii(wxRadioBoxNameStr));
    bool Create(wxWindow *parent,
                wxWindowID id,
                const wxString& title,
                const wxPoint& pos,
                const wxSize& size,
                const wxArrayString& choices,
                int majorDim = 0,
                long style = wxHORIZONTAL,
                const wxValidator& val = wxDefaultValidator,
                const wxString& name = wxString::FromAscii(wxRadioBoxNameStr));

    virtual ~wxRadioBox();



    virtual unsigned int GetCount() const override;

    virtual wxString GetString(unsigned int n) const override;
    virtual void SetString(unsigned int n, const wxString& s) override;

    virtual void SetSelection(int n) override;
    virtual int GetSelection() const override;



    virtual bool Show(unsigned int n, bool show = true) override;
    virtual bool Enable(unsigned int n, bool enable = true) override;

    virtual bool IsItemEnabled(unsigned int n) const override;
    virtual bool IsItemShown(unsigned int n) const override;



    virtual bool Show( bool show = true ) override;
    virtual bool Enable( bool enable = true ) override;

    virtual void SetLabel( const wxString& label ) override;

    static wxVisualAttributes
    GetClassDefaultAttributes(wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL);

    virtual int GetItemFromPoint( const wxPoint& pt ) const override;




    virtual wxString GetHelpTextAtPoint(const wxPoint & pt, wxHelpEvent::Origin origin) const override
    {
        return wxRadioBoxBase::DoGetHelpTextAtPoint( this, pt, origin );
    }





    void GtkDisableEvents();
    void GtkEnableEvents();

    virtual void GTKApplyToolTip(const char* tip) override;


    wxRadioBoxButtonsInfoList m_buttonsInfo;

protected:
    virtual wxBorder GetDefaultBorder() const override { return wxBORDER_NONE; }


    virtual void DoSetItemToolTip(unsigned int n, wxToolTip *tooltip) override;


    virtual void DoApplyWidgetStyle(GtkRcStyle *style) override;
    virtual GdkWindow *GTKGetWindow(wxArrayGdkWindows& windows) const override;

    virtual void DoEnable(bool enable) override;

    virtual bool GTKNeedsToFilterSameWindowFocus() const override { return true; }

    virtual bool GTKWidgetNeedsMnemonic() const override;
    virtual void GTKWidgetDoSetMnemonic(GtkWidget* w) override;

private:
    public:
# 152 "/usr/include/wx-3.1-unofficial/wx/gtk/radiobox.h"
#pragma GCC diagnostic push
# 152 "/usr/include/wx-3.1-unofficial/wx/gtk/radiobox.h"
   
# 152 "/usr/include/wx-3.1-unofficial/wx/gtk/radiobox.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 152 "/usr/include/wx-3.1-unofficial/wx/gtk/radiobox.h"
    virtual wxClassInfo *GetClassInfo() const;
# 152 "/usr/include/wx-3.1-unofficial/wx/gtk/radiobox.h"
#pragma GCC diagnostic pop
# 152 "/usr/include/wx-3.1-unofficial/wx/gtk/radiobox.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 162 "/usr/include/wx-3.1-unofficial/wx/radiobox.h" 2
# 80 "/usr/include/wx-3.1-unofficial/wx/wx.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/radiobut.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/radiobut.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/radiobut.h" 2





class wxRadioButton;
# 31 "/usr/include/wx-3.1-unofficial/wx/radiobut.h"
    typedef wxControl wxRadioButtonBaseBase;


class __attribute__ ((visibility("default"))) wxRadioButtonBase : public wxRadioButtonBaseBase
{
public:
    wxRadioButtonBase() { }


    virtual void SetValue(bool value) = 0;
    virtual bool GetValue() const = 0;



    wxRadioButton* GetFirstInGroup() const;
    wxRadioButton* GetLastInGroup() const;
    wxRadioButton* GetPreviousInGroup() const;
    wxRadioButton* GetNextInGroup() const;

private:
    private: wxRadioButtonBase(const wxRadioButtonBase&) = delete; wxRadioButtonBase& operator=(const wxRadioButtonBase&) = delete;
};

extern __attribute__ ((visibility("default"))) const char wxRadioButtonNameStr[];
# 63 "/usr/include/wx-3.1-unofficial/wx/radiobut.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/gtk/radiobut.h" 1
# 16 "/usr/include/wx-3.1-unofficial/wx/gtk/radiobut.h"
class __attribute__ ((visibility("default"))) wxRadioButton: public wxRadioButtonBase
{
public:
    wxRadioButton() { }
    wxRadioButton( wxWindow *parent,
                   wxWindowID id,
                   const wxString& label,
                   const wxPoint& pos = wxDefaultPosition,
                   const wxSize& size = wxDefaultSize,
                   long style = 0,
                   const wxValidator& validator = wxDefaultValidator,
                   const wxString& name = wxString::FromAscii(wxRadioButtonNameStr) )
    {
        Create( parent, id, label, pos, size, style, validator, name );
    }

    bool Create( wxWindow *parent,
                 wxWindowID id,
                 const wxString& label,
                 const wxPoint& pos = wxDefaultPosition,
                 const wxSize& size = wxDefaultSize,
                 long style = 0,
                 const wxValidator& validator = wxDefaultValidator,
                 const wxString& name = wxString::FromAscii(wxRadioButtonNameStr) );

    virtual void SetLabel(const wxString& label) override;
    virtual void SetValue(bool val) override;
    virtual bool GetValue() const override;

    static wxVisualAttributes
    GetClassDefaultAttributes(wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL);

protected:
    virtual wxBorder GetDefaultBorder() const override { return wxBORDER_NONE; }

    virtual void DoApplyWidgetStyle(GtkRcStyle *style) override;
    virtual GdkWindow *GTKGetWindow(wxArrayGdkWindows& windows) const override;

    virtual void DoEnable(bool enable) override;

private:
    typedef wxControl base_type;

    public:
# 59 "/usr/include/wx-3.1-unofficial/wx/gtk/radiobut.h"
#pragma GCC diagnostic push
# 59 "/usr/include/wx-3.1-unofficial/wx/gtk/radiobut.h"
   
# 59 "/usr/include/wx-3.1-unofficial/wx/gtk/radiobut.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 59 "/usr/include/wx-3.1-unofficial/wx/gtk/radiobut.h"
    virtual wxClassInfo *GetClassInfo() const;
# 59 "/usr/include/wx-3.1-unofficial/wx/gtk/radiobut.h"
#pragma GCC diagnostic pop
# 59 "/usr/include/wx-3.1-unofficial/wx/gtk/radiobut.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 64 "/usr/include/wx-3.1-unofficial/wx/radiobut.h" 2
# 81 "/usr/include/wx-3.1-unofficial/wx/wx.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/textctrl.h" 1
# 18 "/usr/include/wx-3.1-unofficial/wx/textctrl.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 19 "/usr/include/wx-3.1-unofficial/wx/textctrl.h" 2




# 1 "/usr/include/wx-3.1-unofficial/wx/textentry.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/textentry.h"
typedef long wxTextPos;

class wxArrayString;
class wxTextCompleter;
class wxTextEntryHintData;
class wxWindow;
# 29 "/usr/include/wx-3.1-unofficial/wx/textentry.h"
class __attribute__ ((visibility("default"))) wxTextEntryBase
{
public:
    wxTextEntryBase() { m_eventsBlock = 0; m_hintData = 
# 32 "/usr/include/wx-3.1-unofficial/wx/textentry.h" 3 4
                                                       __null
# 32 "/usr/include/wx-3.1-unofficial/wx/textentry.h"
                                                           ; }
    virtual ~wxTextEntryBase();






    virtual void SetValue(const wxString& value)
        { DoSetValue(value, SetValue_SendEvent); }
    virtual void ChangeValue(const wxString& value);




    virtual void WriteText(const wxString& text) = 0;
    virtual void AppendText(const wxString& text);

    virtual wxString GetValue() const;
    virtual wxString GetRange(long from, long to) const;
    bool IsEmpty() const { return GetLastPosition() <= 0; }





    virtual void Replace(long from, long to, const wxString& value);
    virtual void Remove(long from, long to) = 0;
    virtual void Clear() { Remove(0, -1); }
    void RemoveSelection();





    virtual void Copy() = 0;
    virtual void Cut() = 0;
    virtual void Paste() = 0;

    virtual bool CanCopy() const;
    virtual bool CanCut() const;
    virtual bool CanPaste() const;




    virtual void Undo() = 0;
    virtual void Redo() = 0;

    virtual bool CanUndo() const = 0;
    virtual bool CanRedo() const = 0;






    virtual void SetInsertionPoint(long pos) = 0;
    virtual void SetInsertionPointEnd() { SetInsertionPoint(-1); }
    virtual long GetInsertionPoint() const = 0;
    virtual long GetLastPosition() const = 0;





    virtual void SetSelection(long from, long to) = 0;
    virtual void SelectAll() { SetSelection(-1, -1); }
    virtual void SelectNone()
        { const long pos = GetInsertionPoint(); SetSelection(pos, pos); }
    virtual void GetSelection(long *from, long *to) const = 0;
    bool HasSelection() const;
    virtual wxString GetStringSelection() const;
# 118 "/usr/include/wx-3.1-unofficial/wx/textentry.h"
    bool AutoComplete(const wxArrayString& choices)
        { return DoAutoCompleteStrings(choices); }

    bool AutoCompleteFileNames()
        { return DoAutoCompleteFileNames(1); }

    bool AutoCompleteDirectories()
        { return DoAutoCompleteFileNames(2); }




    bool AutoComplete(wxTextCompleter *completer)
        { return DoAutoCompleteCustom(completer); }





    virtual bool IsEditable() const = 0;
    virtual void SetEditable(bool editable) = 0;







    virtual void SetMaxLength(unsigned long ) { }


    virtual void ForceUpper();
# 159 "/usr/include/wx-3.1-unofficial/wx/textentry.h"
    virtual bool SetHint(const wxString& hint);
    virtual wxString GetHint() const;
# 170 "/usr/include/wx-3.1-unofficial/wx/textentry.h"
    bool SetMargins(const wxPoint& pt)
        { return DoSetMargins(pt); }
    bool SetMargins(wxCoord left, wxCoord top = -1)
        { return DoSetMargins(wxPoint(left, top)); }
    wxPoint GetMargins() const
        { return DoGetMargins(); }
# 185 "/usr/include/wx-3.1-unofficial/wx/textentry.h"
    static bool SendTextUpdatedEvent(wxWindow *win);


    bool SendTextUpdatedEvent()
    {
        return SendTextUpdatedEvent(GetEditableWindow());
    }




    void SendTextUpdatedEventIfAllowed()
    {
        if ( EventsAllowed() )
            SendTextUpdatedEvent();
    }





    void ForwardEnableTextChangedEvents(bool enable)
    {



        if ( enable )
            ResumeTextChangedEvents();
        else
            SuppressTextChangedEvents();
    }



    void ConvertToUpperCase();

protected:


    enum
    {
        SetValue_NoEvent = 0,
        SetValue_SendEvent = 1,
        SetValue_SelectionOnly = 2
    };

    virtual void DoSetValue(const wxString& value, int flags);
    virtual wxString DoGetValue() const = 0;



    virtual wxWindow *GetEditableWindow() = 0;


    virtual bool DoSetMargins(const wxPoint& pt);
    virtual wxPoint DoGetMargins() const;





    virtual bool DoAutoCompleteStrings(const wxArrayString& )
        { return false; }
    virtual bool DoAutoCompleteFileNames(int )
        { return false; }
    virtual bool DoAutoCompleteCustom(wxTextCompleter *completer);





    class EventsSuppressor
    {
    public:
        EventsSuppressor(wxTextEntryBase *text, bool suppress = true)
            : m_text(text),
              m_suppress(suppress)
        {
            if ( m_suppress )
                m_text->SuppressTextChangedEvents();
        }

        ~EventsSuppressor()
        {
            if ( m_suppress )
                m_text->ResumeTextChangedEvents();
        }

    private:
        wxTextEntryBase *m_text;
        bool m_suppress;
    };

    friend class EventsSuppressor;

private:


    void SuppressTextChangedEvents()
    {
        if ( !m_eventsBlock++ )
            EnableTextChangedEvents(false);
    }

    void ResumeTextChangedEvents()
    {
        if ( !--m_eventsBlock )
            EnableTextChangedEvents(true);
    }







    virtual void EnableTextChangedEvents(bool ) { }


    bool EventsAllowed() const { return m_eventsBlock == 0; }



    unsigned m_eventsBlock;


    wxTextEntryHintData *m_hintData;



    friend class wxTextEntryHintData;
};
# 325 "/usr/include/wx-3.1-unofficial/wx/textentry.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/gtk/textentry.h" 1
# 13 "/usr/include/wx-3.1-unofficial/wx/gtk/textentry.h"
typedef struct _GdkEventKey GdkEventKey;
typedef struct _GtkEditable GtkEditable;
typedef struct _GtkEntry GtkEntry;

class wxTextAutoCompleteData;
class wxTextCoalesceData;





class __attribute__ ((visibility("default"))) wxTextEntry : public wxTextEntryBase
{
public:
    wxTextEntry();
    virtual ~wxTextEntry();


    virtual void WriteText(const wxString& text) override;
    virtual void Remove(long from, long to) override;

    virtual void Copy() override;
    virtual void Cut() override;
    virtual void Paste() override;

    virtual void Undo() override;
    virtual void Redo() override;
    virtual bool CanUndo() const override;
    virtual bool CanRedo() const override;

    virtual void SetInsertionPoint(long pos) override;
    virtual long GetInsertionPoint() const override;
    virtual long GetLastPosition() const override;

    virtual void SetSelection(long from, long to) override;
    virtual void GetSelection(long *from, long *to) const override;

    virtual bool IsEditable() const override;
    virtual void SetEditable(bool editable) override;

    virtual void SetMaxLength(unsigned long len) override;
    virtual void ForceUpper() override;


    virtual bool SetHint(const wxString& hint) override;
    virtual wxString GetHint() const override;



    void SendMaxLenEvent();
    bool GTKEntryOnInsertText(const char* text);
    bool GTKIsUpperCase() const { return m_isUpperCase; }






    virtual void GTKOnTextChanged() { SendTextUpdatedEvent(); }


    wxTextCoalesceData* GTKGetCoalesceData() const { return m_coalesceData; }

protected:


    void GTKConnectClipboardSignals(GtkWidget* entry);


    void GTKConnectInsertTextSignal(GtkEntry* entry);



    void GTKConnectChangedSignal();


    virtual void DoSetValue(const wxString& value, int flags) override;
    virtual wxString DoGetValue() const override;


    virtual bool DoSetMargins(const wxPoint& pt) override;
    virtual wxPoint DoGetMargins() const override;

    virtual bool DoAutoCompleteStrings(const wxArrayString& choices) override;
    virtual bool DoAutoCompleteCustom(wxTextCompleter *completer) override;



    int GTKEntryIMFilterKeypress(GdkEventKey* event) const;




    void GTKEntryOnKeypress(GtkWidget* widget) const;


    static int GTKGetEntryTextLength(GtkEntry* entry);





    virtual void EnableTextChangedEvents(bool enable) override;



    bool ClickDefaultButtonIfPossible();

private:


    virtual GtkEditable *GetEditable() const = 0;


    virtual GtkEntry *GetEntry() const = 0;




    virtual void *GetTextObject() const { return GetEntry(); }




    wxTextAutoCompleteData *m_autoCompleteData;


    friend class wxTextAutoCompleteData;



    mutable wxTextCoalesceData* m_coalesceData;

    bool m_isUpperCase;
};
# 326 "/usr/include/wx-3.1-unofficial/wx/textentry.h" 2
# 24 "/usr/include/wx-3.1-unofficial/wx/textctrl.h" 2




# 1 "/usr/include/wx-3.1-unofficial/wx/ioswrap.h" 1
# 13 "/usr/include/wx-3.1-unofficial/wx/ioswrap.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/beforestd.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/ioswrap.h" 2

# 1 "/usr/include/c++/10/iostream" 1 3
# 36 "/usr/include/c++/10/iostream" 3
       
# 37 "/usr/include/c++/10/iostream" 3


# 1 "/usr/include/c++/10/ostream" 1 3
# 36 "/usr/include/c++/10/ostream" 3
       
# 37 "/usr/include/c++/10/ostream" 3

# 1 "/usr/include/c++/10/ios" 1 3
# 36 "/usr/include/c++/10/ios" 3
       
# 37 "/usr/include/c++/10/ios" 3







# 1 "/usr/include/c++/10/bits/basic_ios.h" 1 3
# 33 "/usr/include/c++/10/bits/basic_ios.h" 3
       
# 34 "/usr/include/c++/10/bits/basic_ios.h" 3



# 1 "/usr/include/c++/10/bits/locale_facets.h" 1 3
# 37 "/usr/include/c++/10/bits/locale_facets.h" 3
       
# 38 "/usr/include/c++/10/bits/locale_facets.h" 3

# 1 "/usr/include/c++/10/cwctype" 1 3
# 39 "/usr/include/c++/10/cwctype" 3
       
# 40 "/usr/include/c++/10/cwctype" 3
# 80 "/usr/include/c++/10/cwctype" 3

# 80 "/usr/include/c++/10/cwctype" 3
namespace std
{
  using ::wctrans_t;
  using ::wctype_t;
  using ::wint_t;

  using ::iswalnum;
  using ::iswalpha;

  using ::iswblank;

  using ::iswcntrl;
  using ::iswctype;
  using ::iswdigit;
  using ::iswgraph;
  using ::iswlower;
  using ::iswprint;
  using ::iswpunct;
  using ::iswspace;
  using ::iswupper;
  using ::iswxdigit;
  using ::towctrans;
  using ::towlower;
  using ::towupper;
  using ::wctrans;
  using ::wctype;
}
# 40 "/usr/include/c++/10/bits/locale_facets.h" 2 3
# 1 "/usr/include/c++/10/cctype" 1 3
# 39 "/usr/include/c++/10/cctype" 3
       
# 40 "/usr/include/c++/10/cctype" 3
# 41 "/usr/include/c++/10/bits/locale_facets.h" 2 3
# 1 "/usr/include/x86_64-linux-gnu/c++/10/bits/ctype_base.h" 1 3
# 36 "/usr/include/x86_64-linux-gnu/c++/10/bits/ctype_base.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  struct ctype_base
  {

    typedef const int* __to_type;



    typedef unsigned short mask;
    static const mask upper = _ISupper;
    static const mask lower = _ISlower;
    static const mask alpha = _ISalpha;
    static const mask digit = _ISdigit;
    static const mask xdigit = _ISxdigit;
    static const mask space = _ISspace;
    static const mask print = _ISprint;
    static const mask graph = _ISalpha | _ISdigit | _ISpunct;
    static const mask cntrl = _IScntrl;
    static const mask punct = _ISpunct;
    static const mask alnum = _ISalpha | _ISdigit;

    static const mask blank = _ISblank;

  };


}
# 42 "/usr/include/c++/10/bits/locale_facets.h" 2 3
# 50 "/usr/include/c++/10/bits/locale_facets.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 71 "/usr/include/c++/10/bits/locale_facets.h" 3
  template<typename _Tp>
    void
    __convert_to_v(const char*, _Tp&, ios_base::iostate&,
     const __c_locale&) throw();


  template<>
    void
    __convert_to_v(const char*, float&, ios_base::iostate&,
     const __c_locale&) throw();

  template<>
    void
    __convert_to_v(const char*, double&, ios_base::iostate&,
     const __c_locale&) throw();

  template<>
    void
    __convert_to_v(const char*, long double&, ios_base::iostate&,
     const __c_locale&) throw();



  template<typename _CharT, typename _Traits>
    struct __pad
    {
      static void
      _S_pad(ios_base& __io, _CharT __fill, _CharT* __news,
      const _CharT* __olds, streamsize __newlen, streamsize __oldlen);
    };






  template<typename _CharT>
    _CharT*
    __add_grouping(_CharT* __s, _CharT __sep,
     const char* __gbeg, size_t __gsize,
     const _CharT* __first, const _CharT* __last);




  template<typename _CharT>
    inline
    ostreambuf_iterator<_CharT>
    __write(ostreambuf_iterator<_CharT> __s, const _CharT* __ws, int __len)
    {
      __s._M_put(__ws, __len);
      return __s;
    }


  template<typename _CharT, typename _OutIter>
    inline
    _OutIter
    __write(_OutIter __s, const _CharT* __ws, int __len)
    {
      for (int __j = 0; __j < __len; __j++, ++__s)
 *__s = __ws[__j];
      return __s;
    }
# 149 "/usr/include/c++/10/bits/locale_facets.h" 3
  template<typename _CharT>
    class __ctype_abstract_base : public locale::facet, public ctype_base
    {
    public:


      typedef _CharT char_type;
# 168 "/usr/include/c++/10/bits/locale_facets.h" 3
      bool
      is(mask __m, char_type __c) const
      { return this->do_is(__m, __c); }
# 185 "/usr/include/c++/10/bits/locale_facets.h" 3
      const char_type*
      is(const char_type *__lo, const char_type *__hi, mask *__vec) const
      { return this->do_is(__lo, __hi, __vec); }
# 201 "/usr/include/c++/10/bits/locale_facets.h" 3
      const char_type*
      scan_is(mask __m, const char_type* __lo, const char_type* __hi) const
      { return this->do_scan_is(__m, __lo, __hi); }
# 217 "/usr/include/c++/10/bits/locale_facets.h" 3
      const char_type*
      scan_not(mask __m, const char_type* __lo, const char_type* __hi) const
      { return this->do_scan_not(__m, __lo, __hi); }
# 231 "/usr/include/c++/10/bits/locale_facets.h" 3
      char_type
      toupper(char_type __c) const
      { return this->do_toupper(__c); }
# 246 "/usr/include/c++/10/bits/locale_facets.h" 3
      const char_type*
      toupper(char_type *__lo, const char_type* __hi) const
      { return this->do_toupper(__lo, __hi); }
# 260 "/usr/include/c++/10/bits/locale_facets.h" 3
      char_type
      tolower(char_type __c) const
      { return this->do_tolower(__c); }
# 275 "/usr/include/c++/10/bits/locale_facets.h" 3
      const char_type*
      tolower(char_type* __lo, const char_type* __hi) const
      { return this->do_tolower(__lo, __hi); }
# 292 "/usr/include/c++/10/bits/locale_facets.h" 3
      char_type
      widen(char __c) const
      { return this->do_widen(__c); }
# 311 "/usr/include/c++/10/bits/locale_facets.h" 3
      const char*
      widen(const char* __lo, const char* __hi, char_type* __to) const
      { return this->do_widen(__lo, __hi, __to); }
# 330 "/usr/include/c++/10/bits/locale_facets.h" 3
      char
      narrow(char_type __c, char __dfault) const
      { return this->do_narrow(__c, __dfault); }
# 352 "/usr/include/c++/10/bits/locale_facets.h" 3
      const char_type*
      narrow(const char_type* __lo, const char_type* __hi,
       char __dfault, char* __to) const
      { return this->do_narrow(__lo, __hi, __dfault, __to); }

    protected:
      explicit
      __ctype_abstract_base(size_t __refs = 0): facet(__refs) { }

      virtual
      ~__ctype_abstract_base() { }
# 377 "/usr/include/c++/10/bits/locale_facets.h" 3
      virtual bool
      do_is(mask __m, char_type __c) const = 0;
# 396 "/usr/include/c++/10/bits/locale_facets.h" 3
      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi,
     mask* __vec) const = 0;
# 415 "/usr/include/c++/10/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo,
   const char_type* __hi) const = 0;
# 434 "/usr/include/c++/10/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const = 0;
# 452 "/usr/include/c++/10/bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type __c) const = 0;
# 469 "/usr/include/c++/10/bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const = 0;
# 485 "/usr/include/c++/10/bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type __c) const = 0;
# 502 "/usr/include/c++/10/bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const = 0;
# 521 "/usr/include/c++/10/bits/locale_facets.h" 3
      virtual char_type
      do_widen(char __c) const = 0;
# 542 "/usr/include/c++/10/bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __to) const = 0;
# 563 "/usr/include/c++/10/bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type __c, char __dfault) const = 0;
# 588 "/usr/include/c++/10/bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __to) const = 0;
    };
# 611 "/usr/include/c++/10/bits/locale_facets.h" 3
  template<typename _CharT>
    class ctype : public __ctype_abstract_base<_CharT>
    {
    public:

      typedef _CharT char_type;
      typedef typename __ctype_abstract_base<_CharT>::mask mask;


      static locale::id id;

      explicit
      ctype(size_t __refs = 0) : __ctype_abstract_base<_CharT>(__refs) { }

   protected:
      virtual
      ~ctype();

      virtual bool
      do_is(mask __m, char_type __c) const;

      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;

      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;

      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const;

      virtual char_type
      do_toupper(char_type __c) const;

      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;

      virtual char_type
      do_tolower(char_type __c) const;

      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;

      virtual char_type
      do_widen(char __c) const;

      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __dest) const;

      virtual char
      do_narrow(char_type, char __dfault) const;

      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __to) const;
    };

  template<typename _CharT>
    locale::id ctype<_CharT>::id;
# 680 "/usr/include/c++/10/bits/locale_facets.h" 3
  template<>
    class ctype<char> : public locale::facet, public ctype_base
    {
    public:


      typedef char char_type;

    protected:

      __c_locale _M_c_locale_ctype;
      bool _M_del;
      __to_type _M_toupper;
      __to_type _M_tolower;
      const mask* _M_table;
      mutable char _M_widen_ok;
      mutable char _M_widen[1 + static_cast<unsigned char>(-1)];
      mutable char _M_narrow[1 + static_cast<unsigned char>(-1)];
      mutable char _M_narrow_ok;


    public:

      static locale::id id;

      static const size_t table_size = 1 + static_cast<unsigned char>(-1);
# 717 "/usr/include/c++/10/bits/locale_facets.h" 3
      explicit
      ctype(const mask* __table = 0, bool __del = false, size_t __refs = 0);
# 730 "/usr/include/c++/10/bits/locale_facets.h" 3
      explicit
      ctype(__c_locale __cloc, const mask* __table = 0, bool __del = false,
     size_t __refs = 0);
# 743 "/usr/include/c++/10/bits/locale_facets.h" 3
      inline bool
      is(mask __m, char __c) const;
# 758 "/usr/include/c++/10/bits/locale_facets.h" 3
      inline const char*
      is(const char* __lo, const char* __hi, mask* __vec) const;
# 772 "/usr/include/c++/10/bits/locale_facets.h" 3
      inline const char*
      scan_is(mask __m, const char* __lo, const char* __hi) const;
# 786 "/usr/include/c++/10/bits/locale_facets.h" 3
      inline const char*
      scan_not(mask __m, const char* __lo, const char* __hi) const;
# 801 "/usr/include/c++/10/bits/locale_facets.h" 3
      char_type
      toupper(char_type __c) const
      { return this->do_toupper(__c); }
# 818 "/usr/include/c++/10/bits/locale_facets.h" 3
      const char_type*
      toupper(char_type *__lo, const char_type* __hi) const
      { return this->do_toupper(__lo, __hi); }
# 834 "/usr/include/c++/10/bits/locale_facets.h" 3
      char_type
      tolower(char_type __c) const
      { return this->do_tolower(__c); }
# 851 "/usr/include/c++/10/bits/locale_facets.h" 3
      const char_type*
      tolower(char_type* __lo, const char_type* __hi) const
      { return this->do_tolower(__lo, __hi); }
# 871 "/usr/include/c++/10/bits/locale_facets.h" 3
      char_type
      widen(char __c) const
      {
 if (_M_widen_ok)
   return _M_widen[static_cast<unsigned char>(__c)];
 this->_M_widen_init();
 return this->do_widen(__c);
      }
# 898 "/usr/include/c++/10/bits/locale_facets.h" 3
      const char*
      widen(const char* __lo, const char* __hi, char_type* __to) const
      {
 if (_M_widen_ok == 1)
   {
     if (__builtin_expect(__hi != __lo, true))
       __builtin_memcpy(__to, __lo, __hi - __lo);
     return __hi;
   }
 if (!_M_widen_ok)
   _M_widen_init();
 return this->do_widen(__lo, __hi, __to);
      }
# 930 "/usr/include/c++/10/bits/locale_facets.h" 3
      char
      narrow(char_type __c, char __dfault) const
      {
 if (_M_narrow[static_cast<unsigned char>(__c)])
   return _M_narrow[static_cast<unsigned char>(__c)];
 const char __t = do_narrow(__c, __dfault);
 if (__t != __dfault)
   _M_narrow[static_cast<unsigned char>(__c)] = __t;
 return __t;
      }
# 963 "/usr/include/c++/10/bits/locale_facets.h" 3
      const char_type*
      narrow(const char_type* __lo, const char_type* __hi,
      char __dfault, char* __to) const
      {
 if (__builtin_expect(_M_narrow_ok == 1, true))
   {
     if (__builtin_expect(__hi != __lo, true))
       __builtin_memcpy(__to, __lo, __hi - __lo);
     return __hi;
   }
 if (!_M_narrow_ok)
   _M_narrow_init();
 return this->do_narrow(__lo, __hi, __dfault, __to);
      }





      const mask*
      table() const throw()
      { return _M_table; }


      static const mask*
      classic_table() throw();
    protected:







      virtual
      ~ctype();
# 1013 "/usr/include/c++/10/bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type __c) const;
# 1030 "/usr/include/c++/10/bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;
# 1046 "/usr/include/c++/10/bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type __c) const;
# 1063 "/usr/include/c++/10/bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;
# 1083 "/usr/include/c++/10/bits/locale_facets.h" 3
      virtual char_type
      do_widen(char __c) const
      { return __c; }
# 1106 "/usr/include/c++/10/bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __to) const
      {
 if (__builtin_expect(__hi != __lo, true))
   __builtin_memcpy(__to, __lo, __hi - __lo);
 return __hi;
      }
# 1133 "/usr/include/c++/10/bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type __c, char __dfault __attribute__((__unused__))) const
      { return __c; }
# 1159 "/usr/include/c++/10/bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault __attribute__((__unused__)), char* __to) const
      {
 if (__builtin_expect(__hi != __lo, true))
   __builtin_memcpy(__to, __lo, __hi - __lo);
 return __hi;
      }

    private:
      void _M_narrow_init() const;
      void _M_widen_init() const;
    };
# 1185 "/usr/include/c++/10/bits/locale_facets.h" 3
  template<>
    class ctype<wchar_t> : public __ctype_abstract_base<wchar_t>
    {
    public:


      typedef wchar_t char_type;
      typedef wctype_t __wmask_type;

    protected:
      __c_locale _M_c_locale_ctype;


      bool _M_narrow_ok;
      char _M_narrow[128];
      wint_t _M_widen[1 + static_cast<unsigned char>(-1)];


      mask _M_bit[16];
      __wmask_type _M_wmask[16];

    public:


      static locale::id id;
# 1218 "/usr/include/c++/10/bits/locale_facets.h" 3
      explicit
      ctype(size_t __refs = 0);
# 1229 "/usr/include/c++/10/bits/locale_facets.h" 3
      explicit
      ctype(__c_locale __cloc, size_t __refs = 0);

    protected:
      __wmask_type
      _M_convert_to_wmask(const mask __m) const throw();


      virtual
      ~ctype();
# 1253 "/usr/include/c++/10/bits/locale_facets.h" 3
      virtual bool
      do_is(mask __m, char_type __c) const;
# 1272 "/usr/include/c++/10/bits/locale_facets.h" 3
      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;
# 1290 "/usr/include/c++/10/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;
# 1308 "/usr/include/c++/10/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const;
# 1325 "/usr/include/c++/10/bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type __c) const;
# 1342 "/usr/include/c++/10/bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;
# 1358 "/usr/include/c++/10/bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type __c) const;
# 1375 "/usr/include/c++/10/bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;
# 1395 "/usr/include/c++/10/bits/locale_facets.h" 3
      virtual char_type
      do_widen(char __c) const;
# 1417 "/usr/include/c++/10/bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __to) const;
# 1440 "/usr/include/c++/10/bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type __c, char __dfault) const;
# 1466 "/usr/include/c++/10/bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __to) const;


      void
      _M_initialize_ctype() throw();
    };



  template<typename _CharT>
    class ctype_byname : public ctype<_CharT>
    {
    public:
      typedef typename ctype<_CharT>::mask mask;

      explicit
      ctype_byname(const char* __s, size_t __refs = 0);


      explicit
      ctype_byname(const string& __s, size_t __refs = 0)
      : ctype_byname(__s.c_str(), __refs) { }


    protected:
      virtual
      ~ctype_byname() { }
    };


  template<>
    class ctype_byname<char> : public ctype<char>
    {
    public:
      explicit
      ctype_byname(const char* __s, size_t __refs = 0);


      explicit
      ctype_byname(const string& __s, size_t __refs = 0);


    protected:
      virtual
      ~ctype_byname();
    };


  template<>
    class ctype_byname<wchar_t> : public ctype<wchar_t>
    {
    public:
      explicit
      ctype_byname(const char* __s, size_t __refs = 0);


      explicit
      ctype_byname(const string& __s, size_t __refs = 0);


    protected:
      virtual
      ~ctype_byname();
    };



}


# 1 "/usr/include/x86_64-linux-gnu/c++/10/bits/ctype_inline.h" 1 3
# 37 "/usr/include/x86_64-linux-gnu/c++/10/bits/ctype_inline.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  bool
  ctype<char>::
  is(mask __m, char __c) const
  { return _M_table[static_cast<unsigned char>(__c)] & __m; }

  const char*
  ctype<char>::
  is(const char* __low, const char* __high, mask* __vec) const
  {
    while (__low < __high)
      *__vec++ = _M_table[static_cast<unsigned char>(*__low++)];
    return __high;
  }

  const char*
  ctype<char>::
  scan_is(mask __m, const char* __low, const char* __high) const
  {
    while (__low < __high
    && !(_M_table[static_cast<unsigned char>(*__low)] & __m))
      ++__low;
    return __low;
  }

  const char*
  ctype<char>::
  scan_not(mask __m, const char* __low, const char* __high) const
  {
    while (__low < __high
    && (_M_table[static_cast<unsigned char>(*__low)] & __m) != 0)
      ++__low;
    return __low;
  }


}
# 1539 "/usr/include/c++/10/bits/locale_facets.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  class __num_base
  {
  public:


    enum
      {
 _S_ominus,
 _S_oplus,
 _S_ox,
 _S_oX,
 _S_odigits,
 _S_odigits_end = _S_odigits + 16,
 _S_oudigits = _S_odigits_end,
 _S_oudigits_end = _S_oudigits + 16,
 _S_oe = _S_odigits + 14,
 _S_oE = _S_oudigits + 14,
 _S_oend = _S_oudigits_end
      };






    static const char* _S_atoms_out;



    static const char* _S_atoms_in;

    enum
    {
      _S_iminus,
      _S_iplus,
      _S_ix,
      _S_iX,
      _S_izero,
      _S_ie = _S_izero + 14,
      _S_iE = _S_izero + 20,
      _S_iend = 26
    };



    static void
    _S_format_float(const ios_base& __io, char* __fptr, char __mod) throw();
  };

  template<typename _CharT>
    struct __numpunct_cache : public locale::facet
    {
      const char* _M_grouping;
      size_t _M_grouping_size;
      bool _M_use_grouping;
      const _CharT* _M_truename;
      size_t _M_truename_size;
      const _CharT* _M_falsename;
      size_t _M_falsename_size;
      _CharT _M_decimal_point;
      _CharT _M_thousands_sep;





      _CharT _M_atoms_out[__num_base::_S_oend];





      _CharT _M_atoms_in[__num_base::_S_iend];

      bool _M_allocated;

      __numpunct_cache(size_t __refs = 0)
      : facet(__refs), _M_grouping(0), _M_grouping_size(0),
 _M_use_grouping(false),
 _M_truename(0), _M_truename_size(0), _M_falsename(0),
 _M_falsename_size(0), _M_decimal_point(_CharT()),
 _M_thousands_sep(_CharT()), _M_allocated(false)
 { }

      ~__numpunct_cache();

      void
      _M_cache(const locale& __loc);

    private:
      __numpunct_cache&
      operator=(const __numpunct_cache&);

      explicit
      __numpunct_cache(const __numpunct_cache&);
    };

  template<typename _CharT>
    __numpunct_cache<_CharT>::~__numpunct_cache()
    {
      if (_M_allocated)
 {
   delete [] _M_grouping;
   delete [] _M_truename;
   delete [] _M_falsename;
 }
    }

namespace __cxx11 {
# 1669 "/usr/include/c++/10/bits/locale_facets.h" 3
  template<typename _CharT>
    class numpunct : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      typedef __numpunct_cache<_CharT> __cache_type;

    protected:
      __cache_type* _M_data;

    public:

      static locale::id id;






      explicit
      numpunct(size_t __refs = 0)
      : facet(__refs), _M_data(0)
      { _M_initialize_numpunct(); }
# 1707 "/usr/include/c++/10/bits/locale_facets.h" 3
      explicit
      numpunct(__cache_type* __cache, size_t __refs = 0)
      : facet(__refs), _M_data(__cache)
      { _M_initialize_numpunct(); }
# 1721 "/usr/include/c++/10/bits/locale_facets.h" 3
      explicit
      numpunct(__c_locale __cloc, size_t __refs = 0)
      : facet(__refs), _M_data(0)
      { _M_initialize_numpunct(__cloc); }
# 1735 "/usr/include/c++/10/bits/locale_facets.h" 3
      char_type
      decimal_point() const
      { return this->do_decimal_point(); }
# 1748 "/usr/include/c++/10/bits/locale_facets.h" 3
      char_type
      thousands_sep() const
      { return this->do_thousands_sep(); }
# 1779 "/usr/include/c++/10/bits/locale_facets.h" 3
      string
      grouping() const
      { return this->do_grouping(); }
# 1792 "/usr/include/c++/10/bits/locale_facets.h" 3
      string_type
      truename() const
      { return this->do_truename(); }
# 1805 "/usr/include/c++/10/bits/locale_facets.h" 3
      string_type
      falsename() const
      { return this->do_falsename(); }

    protected:

      virtual
      ~numpunct();
# 1822 "/usr/include/c++/10/bits/locale_facets.h" 3
      virtual char_type
      do_decimal_point() const
      { return _M_data->_M_decimal_point; }
# 1834 "/usr/include/c++/10/bits/locale_facets.h" 3
      virtual char_type
      do_thousands_sep() const
      { return _M_data->_M_thousands_sep; }
# 1847 "/usr/include/c++/10/bits/locale_facets.h" 3
      virtual string
      do_grouping() const
      { return _M_data->_M_grouping; }
# 1860 "/usr/include/c++/10/bits/locale_facets.h" 3
      virtual string_type
      do_truename() const
      { return _M_data->_M_truename; }
# 1873 "/usr/include/c++/10/bits/locale_facets.h" 3
      virtual string_type
      do_falsename() const
      { return _M_data->_M_falsename; }


      void
      _M_initialize_numpunct(__c_locale __cloc = 0);
    };

  template<typename _CharT>
    locale::id numpunct<_CharT>::id;

  template<>
    numpunct<char>::~numpunct();

  template<>
    void
    numpunct<char>::_M_initialize_numpunct(__c_locale __cloc);


  template<>
    numpunct<wchar_t>::~numpunct();

  template<>
    void
    numpunct<wchar_t>::_M_initialize_numpunct(__c_locale __cloc);



  template<typename _CharT>
    class numpunct_byname : public numpunct<_CharT>
    {
    public:
      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      explicit
      numpunct_byname(const char* __s, size_t __refs = 0)
      : numpunct<_CharT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     __c_locale __tmp;
     this->_S_create_c_locale(__tmp, __s);
     this->_M_initialize_numpunct(__tmp);
     this->_S_destroy_c_locale(__tmp);
   }
      }


      explicit
      numpunct_byname(const string& __s, size_t __refs = 0)
      : numpunct_byname(__s.c_str(), __refs) { }


    protected:
      virtual
      ~numpunct_byname() { }
    };

}


# 1951 "/usr/include/c++/10/bits/locale_facets.h" 3
  template<typename _CharT, typename _InIter>
    class num_get : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef _InIter iter_type;



      static locale::id id;
# 1972 "/usr/include/c++/10/bits/locale_facets.h" 3
      explicit
      num_get(size_t __refs = 0) : facet(__refs) { }
# 1998 "/usr/include/c++/10/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, bool& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2035 "/usr/include/c++/10/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned short& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned int& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }


      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned long long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2095 "/usr/include/c++/10/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, float& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, double& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long double& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2138 "/usr/include/c++/10/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, void*& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

    protected:

      virtual ~num_get() { }

      __attribute ((__abi_tag__ ("cxx11")))
      iter_type
      _M_extract_float(iter_type, iter_type, ios_base&, ios_base::iostate&,
         string&) const;

      template<typename _ValueT>
 __attribute ((__abi_tag__ ("cxx11")))
 iter_type
 _M_extract_int(iter_type, iter_type, ios_base&, ios_base::iostate&,
         _ValueT&) const;

      template<typename _CharT2>
      typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value, int>::__type
 _M_find(const _CharT2*, size_t __len, _CharT2 __c) const
 {
   int __ret = -1;
   if (__len <= 10)
     {
       if (__c >= _CharT2('0') && __c < _CharT2(_CharT2('0') + __len))
  __ret = __c - _CharT2('0');
     }
   else
     {
       if (__c >= _CharT2('0') && __c <= _CharT2('9'))
  __ret = __c - _CharT2('0');
       else if (__c >= _CharT2('a') && __c <= _CharT2('f'))
  __ret = 10 + (__c - _CharT2('a'));
       else if (__c >= _CharT2('A') && __c <= _CharT2('F'))
  __ret = 10 + (__c - _CharT2('A'));
     }
   return __ret;
 }

      template<typename _CharT2>
      typename __gnu_cxx::__enable_if<!__is_char<_CharT2>::__value,
          int>::__type
 _M_find(const _CharT2* __zero, size_t __len, _CharT2 __c) const
 {
   int __ret = -1;
   const char_type* __q = char_traits<_CharT2>::find(__zero, __len, __c);
   if (__q)
     {
       __ret = __q - __zero;
       if (__ret > 15)
  __ret -= 6;
     }
   return __ret;
 }
# 2211 "/usr/include/c++/10/bits/locale_facets.h" 3
      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, bool&) const;

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned short& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned int& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }


      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, long long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned long long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }


      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, float&) const;

      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&,
      double&) const;







      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&,
      long double&) const;


      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, void*&) const;
# 2274 "/usr/include/c++/10/bits/locale_facets.h" 3
    };

  template<typename _CharT, typename _InIter>
    locale::id num_get<_CharT, _InIter>::id;
# 2292 "/usr/include/c++/10/bits/locale_facets.h" 3
  template<typename _CharT, typename _OutIter>
    class num_put : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef _OutIter iter_type;



      static locale::id id;
# 2313 "/usr/include/c++/10/bits/locale_facets.h" 3
      explicit
      num_put(size_t __refs = 0) : facet(__refs) { }
# 2331 "/usr/include/c++/10/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const
      { return this->do_put(__s, __io, __fill, __v); }
# 2373 "/usr/include/c++/10/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill, long __v) const
      { return this->do_put(__s, __io, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill,
   unsigned long __v) const
      { return this->do_put(__s, __io, __fill, __v); }


      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill, long long __v) const
      { return this->do_put(__s, __io, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill,
   unsigned long long __v) const
      { return this->do_put(__s, __io, __fill, __v); }
# 2436 "/usr/include/c++/10/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill, double __v) const
      { return this->do_put(__s, __io, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill,
   long double __v) const
      { return this->do_put(__s, __io, __fill, __v); }
# 2461 "/usr/include/c++/10/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill,
   const void* __v) const
      { return this->do_put(__s, __io, __fill, __v); }

    protected:
      template<typename _ValueT>
 iter_type
 _M_insert_float(iter_type, ios_base& __io, char_type __fill,
   char __mod, _ValueT __v) const;

      void
      _M_group_float(const char* __grouping, size_t __grouping_size,
       char_type __sep, const char_type* __p, char_type* __new,
       char_type* __cs, int& __len) const;

      template<typename _ValueT>
 iter_type
 _M_insert_int(iter_type, ios_base& __io, char_type __fill,
        _ValueT __v) const;

      void
      _M_group_int(const char* __grouping, size_t __grouping_size,
     char_type __sep, ios_base& __io, char_type* __new,
     char_type* __cs, int& __len) const;

      void
      _M_pad(char_type __fill, streamsize __w, ios_base& __io,
      char_type* __new, const char_type* __cs, int& __len) const;


      virtual
      ~num_put() { }
# 2509 "/usr/include/c++/10/bits/locale_facets.h" 3
      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const;

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill, long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      unsigned long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }


      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      long long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      unsigned long long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }


      virtual iter_type
      do_put(iter_type, ios_base&, char_type, double) const;






      virtual iter_type
      do_put(iter_type, ios_base&, char_type, long double) const;


      virtual iter_type
      do_put(iter_type, ios_base&, char_type, const void*) const;







    };

  template <typename _CharT, typename _OutIter>
    locale::id num_put<_CharT, _OutIter>::id;









  template<typename _CharT>
    inline bool
    isspace(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::space, __c); }


  template<typename _CharT>
    inline bool
    isprint(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::print, __c); }


  template<typename _CharT>
    inline bool
    iscntrl(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::cntrl, __c); }


  template<typename _CharT>
    inline bool
    isupper(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::upper, __c); }


  template<typename _CharT>
    inline bool
    islower(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::lower, __c); }


  template<typename _CharT>
    inline bool
    isalpha(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alpha, __c); }


  template<typename _CharT>
    inline bool
    isdigit(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::digit, __c); }


  template<typename _CharT>
    inline bool
    ispunct(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::punct, __c); }


  template<typename _CharT>
    inline bool
    isxdigit(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::xdigit, __c); }


  template<typename _CharT>
    inline bool
    isalnum(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alnum, __c); }


  template<typename _CharT>
    inline bool
    isgraph(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::graph, __c); }



  template<typename _CharT>
    inline bool
    isblank(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::blank, __c); }



  template<typename _CharT>
    inline _CharT
    toupper(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).toupper(__c); }


  template<typename _CharT>
    inline _CharT
    tolower(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).tolower(__c); }


}

# 1 "/usr/include/c++/10/bits/locale_facets.tcc" 1 3
# 33 "/usr/include/c++/10/bits/locale_facets.tcc" 3
       
# 34 "/usr/include/c++/10/bits/locale_facets.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{




  template<typename _Facet>
    struct __use_cache
    {
      const _Facet*
      operator() (const locale& __loc) const;
    };


  template<typename _CharT>
    struct __use_cache<__numpunct_cache<_CharT> >
    {
      const __numpunct_cache<_CharT>*
      operator() (const locale& __loc) const
      {
 const size_t __i = numpunct<_CharT>::id._M_id();
 const locale::facet** __caches = __loc._M_impl->_M_caches;
 if (!__caches[__i])
   {
     __numpunct_cache<_CharT>* __tmp = 0;
     try
       {
  __tmp = new __numpunct_cache<_CharT>;
  __tmp->_M_cache(__loc);
       }
     catch(...)
       {
  delete __tmp;
  throw;
       }
     __loc._M_impl->_M_install_cache(__tmp, __i);
   }
 return static_cast<const __numpunct_cache<_CharT>*>(__caches[__i]);
      }
    };

  template<typename _CharT>
    void
    __numpunct_cache<_CharT>::_M_cache(const locale& __loc)
    {
      const numpunct<_CharT>& __np = use_facet<numpunct<_CharT> >(__loc);

      char* __grouping = 0;
      _CharT* __truename = 0;
      _CharT* __falsename = 0;
      try
 {
   const string& __g = __np.grouping();
   _M_grouping_size = __g.size();
   __grouping = new char[_M_grouping_size];
   __g.copy(__grouping, _M_grouping_size);
   _M_use_grouping = (_M_grouping_size
        && static_cast<signed char>(__grouping[0]) > 0
        && (__grouping[0]
     != __gnu_cxx::__numeric_traits<char>::__max));

   const basic_string<_CharT>& __tn = __np.truename();
   _M_truename_size = __tn.size();
   __truename = new _CharT[_M_truename_size];
   __tn.copy(__truename, _M_truename_size);

   const basic_string<_CharT>& __fn = __np.falsename();
   _M_falsename_size = __fn.size();
   __falsename = new _CharT[_M_falsename_size];
   __fn.copy(__falsename, _M_falsename_size);

   _M_decimal_point = __np.decimal_point();
   _M_thousands_sep = __np.thousands_sep();

   const ctype<_CharT>& __ct = use_facet<ctype<_CharT> >(__loc);
   __ct.widen(__num_base::_S_atoms_out,
       __num_base::_S_atoms_out
       + __num_base::_S_oend, _M_atoms_out);
   __ct.widen(__num_base::_S_atoms_in,
       __num_base::_S_atoms_in
       + __num_base::_S_iend, _M_atoms_in);

   _M_grouping = __grouping;
   _M_truename = __truename;
   _M_falsename = __falsename;
   _M_allocated = true;
 }
      catch(...)
 {
   delete [] __grouping;
   delete [] __truename;
   delete [] __falsename;
   throw;
 }
    }
# 139 "/usr/include/c++/10/bits/locale_facets.tcc" 3
  __attribute__ ((__pure__)) bool
  __verify_grouping(const char* __grouping, size_t __grouping_size,
      const string& __grouping_tmp) throw ();



  template<typename _CharT, typename _InIter>
    __attribute ((__abi_tag__ ("cxx11")))
    _InIter
    num_get<_CharT, _InIter>::
    _M_extract_float(_InIter __beg, _InIter __end, ios_base& __io,
       ios_base::iostate& __err, string& __xtrc) const
    {
      typedef char_traits<_CharT> __traits_type;
      typedef __numpunct_cache<_CharT> __cache_type;
      __use_cache<__cache_type> __uc;
      const locale& __loc = __io._M_getloc();
      const __cache_type* __lc = __uc(__loc);
      const _CharT* __lit = __lc->_M_atoms_in;
      char_type __c = char_type();


      bool __testeof = __beg == __end;


      if (!__testeof)
 {
   __c = *__beg;
   const bool __plus = __c == __lit[__num_base::_S_iplus];
   if ((__plus || __c == __lit[__num_base::_S_iminus])
       && !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       && !(__c == __lc->_M_decimal_point))
     {
       __xtrc += __plus ? '+' : '-';
       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
 }


      bool __found_mantissa = false;
      int __sep_pos = 0;
      while (!__testeof)
 {
   if ((__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       || __c == __lc->_M_decimal_point)
     break;
   else if (__c == __lit[__num_base::_S_izero])
     {
       if (!__found_mantissa)
  {
    __xtrc += '0';
    __found_mantissa = true;
  }
       ++__sep_pos;

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
   else
     break;
 }


      bool __found_dec = false;
      bool __found_sci = false;
      string __found_grouping;
      if (__lc->_M_use_grouping)
 __found_grouping.reserve(32);
      const char_type* __lit_zero = __lit + __num_base::_S_izero;

      if (!__lc->_M_allocated)

 while (!__testeof)
   {
     const int __digit = _M_find(__lit_zero, 10, __c);
     if (__digit != -1)
       {
  __xtrc += '0' + __digit;
  __found_mantissa = true;
       }
     else if (__c == __lc->_M_decimal_point
       && !__found_dec && !__found_sci)
       {
  __xtrc += '.';
  __found_dec = true;
       }
     else if ((__c == __lit[__num_base::_S_ie]
        || __c == __lit[__num_base::_S_iE])
       && !__found_sci && __found_mantissa)
       {

  __xtrc += 'e';
  __found_sci = true;


  if (++__beg != __end)
    {
      __c = *__beg;
      const bool __plus = __c == __lit[__num_base::_S_iplus];
      if (__plus || __c == __lit[__num_base::_S_iminus])
        __xtrc += __plus ? '+' : '-';
      else
        continue;
    }
  else
    {
      __testeof = true;
      break;
    }
       }
     else
       break;

     if (++__beg != __end)
       __c = *__beg;
     else
       __testeof = true;
   }
      else
 while (!__testeof)
   {


     if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       {
  if (!__found_dec && !__found_sci)
    {


      if (__sep_pos)
        {
   __found_grouping += static_cast<char>(__sep_pos);
   __sep_pos = 0;
        }
      else
        {


   __xtrc.clear();
   break;
        }
    }
  else
    break;
       }
     else if (__c == __lc->_M_decimal_point)
       {
  if (!__found_dec && !__found_sci)
    {



      if (__found_grouping.size())
        __found_grouping += static_cast<char>(__sep_pos);
      __xtrc += '.';
      __found_dec = true;
    }
  else
    break;
       }
     else
       {
  const char_type* __q =
    __traits_type::find(__lit_zero, 10, __c);
  if (__q)
    {
      __xtrc += '0' + (__q - __lit_zero);
      __found_mantissa = true;
      ++__sep_pos;
    }
  else if ((__c == __lit[__num_base::_S_ie]
     || __c == __lit[__num_base::_S_iE])
    && !__found_sci && __found_mantissa)
    {

      if (__found_grouping.size() && !__found_dec)
        __found_grouping += static_cast<char>(__sep_pos);
      __xtrc += 'e';
      __found_sci = true;


      if (++__beg != __end)
        {
   __c = *__beg;
   const bool __plus = __c == __lit[__num_base::_S_iplus];
   if ((__plus || __c == __lit[__num_base::_S_iminus])
       && !(__lc->_M_use_grouping
     && __c == __lc->_M_thousands_sep)
       && !(__c == __lc->_M_decimal_point))
        __xtrc += __plus ? '+' : '-';
   else
     continue;
        }
      else
        {
   __testeof = true;
   break;
        }
    }
  else
    break;
       }

     if (++__beg != __end)
       __c = *__beg;
     else
       __testeof = true;
   }



      if (__found_grouping.size())
        {

   if (!__found_dec && !__found_sci)
     __found_grouping += static_cast<char>(__sep_pos);

          if (!std::__verify_grouping(__lc->_M_grouping,
          __lc->_M_grouping_size,
          __found_grouping))
     __err = ios_base::failbit;
        }

      return __beg;
    }

  template<typename _CharT, typename _InIter>
    template<typename _ValueT>
      __attribute ((__abi_tag__ ("cxx11")))
      _InIter
      num_get<_CharT, _InIter>::
      _M_extract_int(_InIter __beg, _InIter __end, ios_base& __io,
       ios_base::iostate& __err, _ValueT& __v) const
      {
        typedef char_traits<_CharT> __traits_type;
 using __gnu_cxx::__add_unsigned;
 typedef typename __add_unsigned<_ValueT>::__type __unsigned_type;
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);
 const _CharT* __lit = __lc->_M_atoms_in;
 char_type __c = char_type();


 const ios_base::fmtflags __basefield = __io.flags()
                                        & ios_base::basefield;
 const bool __oct = __basefield == ios_base::oct;
 int __base = __oct ? 8 : (__basefield == ios_base::hex ? 16 : 10);


 bool __testeof = __beg == __end;


 bool __negative = false;
 if (!__testeof)
   {
     __c = *__beg;
     __negative = __c == __lit[__num_base::_S_iminus];
     if ((__negative || __c == __lit[__num_base::_S_iplus])
  && !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  && !(__c == __lc->_M_decimal_point))
       {
  if (++__beg != __end)
    __c = *__beg;
  else
    __testeof = true;
       }
   }



 bool __found_zero = false;
 int __sep_pos = 0;
 while (!__testeof)
   {
     if ((__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  || __c == __lc->_M_decimal_point)
       break;
     else if (__c == __lit[__num_base::_S_izero]
       && (!__found_zero || __base == 10))
       {
  __found_zero = true;
  ++__sep_pos;
  if (__basefield == 0)
    __base = 8;
  if (__base == 8)
    __sep_pos = 0;
       }
     else if (__found_zero
       && (__c == __lit[__num_base::_S_ix]
    || __c == __lit[__num_base::_S_iX]))
       {
  if (__basefield == 0)
    __base = 16;
  if (__base == 16)
    {
      __found_zero = false;
      __sep_pos = 0;
    }
  else
    break;
       }
     else
       break;

     if (++__beg != __end)
       {
  __c = *__beg;
  if (!__found_zero)
    break;
       }
     else
       __testeof = true;
   }



 const size_t __len = (__base == 16 ? __num_base::_S_iend
         - __num_base::_S_izero : __base);


 typedef __gnu_cxx::__numeric_traits<_ValueT> __num_traits;
 string __found_grouping;
 if (__lc->_M_use_grouping)
   __found_grouping.reserve(32);
 bool __testfail = false;
 bool __testoverflow = false;
 const __unsigned_type __max =
   (__negative && __num_traits::__is_signed)
   ? -static_cast<__unsigned_type>(__num_traits::__min)
   : __num_traits::__max;
 const __unsigned_type __smax = __max / __base;
 __unsigned_type __result = 0;
 int __digit = 0;
 const char_type* __lit_zero = __lit + __num_base::_S_izero;

 if (!__lc->_M_allocated)

   while (!__testeof)
     {
       __digit = _M_find(__lit_zero, __len, __c);
       if (__digit == -1)
  break;

       if (__result > __smax)
  __testoverflow = true;
       else
  {
    __result *= __base;
    __testoverflow |= __result > __max - __digit;
    __result += __digit;
    ++__sep_pos;
  }

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
 else
   while (!__testeof)
     {


       if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  {


    if (__sep_pos)
      {
        __found_grouping += static_cast<char>(__sep_pos);
        __sep_pos = 0;
      }
    else
      {
        __testfail = true;
        break;
      }
  }
       else if (__c == __lc->_M_decimal_point)
  break;
       else
  {
    const char_type* __q =
      __traits_type::find(__lit_zero, __len, __c);
    if (!__q)
      break;

    __digit = __q - __lit_zero;
    if (__digit > 15)
      __digit -= 6;
    if (__result > __smax)
      __testoverflow = true;
    else
      {
        __result *= __base;
        __testoverflow |= __result > __max - __digit;
        __result += __digit;
        ++__sep_pos;
      }
  }

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }



 if (__found_grouping.size())
   {

     __found_grouping += static_cast<char>(__sep_pos);

     if (!std::__verify_grouping(__lc->_M_grouping,
     __lc->_M_grouping_size,
     __found_grouping))
       __err = ios_base::failbit;
   }



 if ((!__sep_pos && !__found_zero && !__found_grouping.size())
     || __testfail)
   {
     __v = 0;
     __err = ios_base::failbit;
   }
 else if (__testoverflow)
   {
     if (__negative && __num_traits::__is_signed)
       __v = __num_traits::__min;
     else
       __v = __num_traits::__max;
     __err = ios_base::failbit;
   }
 else
   __v = __negative ? -__result : __result;

 if (__testeof)
   __err |= ios_base::eofbit;
 return __beg;
      }



  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, bool& __v) const
    {
      if (!(__io.flags() & ios_base::boolalpha))
        {



   long __l = -1;
          __beg = _M_extract_int(__beg, __end, __io, __err, __l);
   if (__l == 0 || __l == 1)
     __v = bool(__l);
   else
     {


       __v = true;
       __err = ios_base::failbit;
       if (__beg == __end)
  __err |= ios_base::eofbit;
     }
        }
      else
        {

   typedef __numpunct_cache<_CharT> __cache_type;
   __use_cache<__cache_type> __uc;
   const locale& __loc = __io._M_getloc();
   const __cache_type* __lc = __uc(__loc);

   bool __testf = true;
   bool __testt = true;
   bool __donef = __lc->_M_falsename_size == 0;
   bool __donet = __lc->_M_truename_size == 0;
   bool __testeof = false;
   size_t __n = 0;
   while (!__donef || !__donet)
     {
       if (__beg == __end)
  {
    __testeof = true;
    break;
  }

       const char_type __c = *__beg;

       if (!__donef)
  __testf = __c == __lc->_M_falsename[__n];

       if (!__testf && __donet)
  break;

       if (!__donet)
  __testt = __c == __lc->_M_truename[__n];

       if (!__testt && __donef)
  break;

       if (!__testt && !__testf)
  break;

       ++__n;
       ++__beg;

       __donef = !__testf || __n >= __lc->_M_falsename_size;
       __donet = !__testt || __n >= __lc->_M_truename_size;
     }
   if (__testf && __n == __lc->_M_falsename_size && __n)
     {
       __v = false;
       if (__testt && __n == __lc->_M_truename_size)
  __err = ios_base::failbit;
       else
  __err = __testeof ? ios_base::eofbit : ios_base::goodbit;
     }
   else if (__testt && __n == __lc->_M_truename_size && __n)
     {
       __v = true;
       __err = __testeof ? ios_base::eofbit : ios_base::goodbit;
     }
   else
     {


       __v = false;
       __err = ios_base::failbit;
       if (__testeof)
  __err |= ios_base::eofbit;
     }
 }
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
    ios_base::iostate& __err, float& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, double& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }
# 735 "/usr/include/c++/10/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, long double& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, void*& __v) const
    {

      typedef ios_base::fmtflags fmtflags;
      const fmtflags __fmt = __io.flags();
      __io.flags((__fmt & ~ios_base::basefield) | ios_base::hex);

      typedef __gnu_cxx::__conditional_type<(sizeof(void*)
          <= sizeof(unsigned long)),
 unsigned long, unsigned long long>::__type _UIntPtrType;

      _UIntPtrType __ul;
      __beg = _M_extract_int(__beg, __end, __io, __err, __ul);


      __io.flags(__fmt);

      __v = reinterpret_cast<void*>(__ul);
      return __beg;
    }



  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_pad(_CharT __fill, streamsize __w, ios_base& __io,
    _CharT* __new, const _CharT* __cs, int& __len) const
    {


      __pad<_CharT, char_traits<_CharT> >::_S_pad(__io, __fill, __new,
        __cs, __w, __len);
      __len = static_cast<int>(__w);
    }



  template<typename _CharT, typename _ValueT>
    int
    __int_to_char(_CharT* __bufend, _ValueT __v, const _CharT* __lit,
    ios_base::fmtflags __flags, bool __dec)
    {
      _CharT* __buf = __bufend;
      if (__builtin_expect(__dec, true))
 {

   do
     {
       *--__buf = __lit[(__v % 10) + __num_base::_S_odigits];
       __v /= 10;
     }
   while (__v != 0);
 }
      else if ((__flags & ios_base::basefield) == ios_base::oct)
 {

   do
     {
       *--__buf = __lit[(__v & 0x7) + __num_base::_S_odigits];
       __v >>= 3;
     }
   while (__v != 0);
 }
      else
 {

   const bool __uppercase = __flags & ios_base::uppercase;
   const int __case_offset = __uppercase ? __num_base::_S_oudigits
                                         : __num_base::_S_odigits;
   do
     {
       *--__buf = __lit[(__v & 0xf) + __case_offset];
       __v >>= 4;
     }
   while (__v != 0);
 }
      return __bufend - __buf;
    }



  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_group_int(const char* __grouping, size_t __grouping_size, _CharT __sep,
   ios_base&, _CharT* __new, _CharT* __cs, int& __len) const
    {
      _CharT* __p = std::__add_grouping(__new, __sep, __grouping,
     __grouping_size, __cs, __cs + __len);
      __len = __p - __new;
    }

  template<typename _CharT, typename _OutIter>
    template<typename _ValueT>
      _OutIter
      num_put<_CharT, _OutIter>::
      _M_insert_int(_OutIter __s, ios_base& __io, _CharT __fill,
      _ValueT __v) const
      {
 using __gnu_cxx::__add_unsigned;
 typedef typename __add_unsigned<_ValueT>::__type __unsigned_type;
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);
 const _CharT* __lit = __lc->_M_atoms_out;
 const ios_base::fmtflags __flags = __io.flags();


 const int __ilen = 5 * sizeof(_ValueT);
 _CharT* __cs = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
            * __ilen));



 const ios_base::fmtflags __basefield = __flags & ios_base::basefield;
 const bool __dec = (__basefield != ios_base::oct
       && __basefield != ios_base::hex);
 const __unsigned_type __u = ((__v > 0 || !__dec)
         ? __unsigned_type(__v)
         : -__unsigned_type(__v));
  int __len = __int_to_char(__cs + __ilen, __u, __lit, __flags, __dec);
 __cs += __ilen - __len;


 if (__lc->_M_use_grouping)
   {


     _CharT* __cs2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * (__len + 1)
          * 2));
     _M_group_int(__lc->_M_grouping, __lc->_M_grouping_size,
    __lc->_M_thousands_sep, __io, __cs2 + 2, __cs, __len);
     __cs = __cs2 + 2;
   }


 if (__builtin_expect(__dec, true))
   {

     if (__v >= 0)
       {
  if (bool(__flags & ios_base::showpos)
      && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
    *--__cs = __lit[__num_base::_S_oplus], ++__len;
       }
     else
       *--__cs = __lit[__num_base::_S_ominus], ++__len;
   }
 else if (bool(__flags & ios_base::showbase) && __v)
   {
     if (__basefield == ios_base::oct)
       *--__cs = __lit[__num_base::_S_odigits], ++__len;
     else
       {

  const bool __uppercase = __flags & ios_base::uppercase;
  *--__cs = __lit[__num_base::_S_ox + __uppercase];

  *--__cs = __lit[__num_base::_S_odigits];
  __len += 2;
       }
   }


 const streamsize __w = __io.width();
 if (__w > static_cast<streamsize>(__len))
   {
     _CharT* __cs3 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __w));
     _M_pad(__fill, __w, __io, __cs3, __cs, __len);
     __cs = __cs3;
   }
 __io.width(0);



 return std::__write(__s, __cs, __len);
      }

  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_group_float(const char* __grouping, size_t __grouping_size,
     _CharT __sep, const _CharT* __p, _CharT* __new,
     _CharT* __cs, int& __len) const
    {



      const int __declen = __p ? __p - __cs : __len;
      _CharT* __p2 = std::__add_grouping(__new, __sep, __grouping,
      __grouping_size,
      __cs, __cs + __declen);


      int __newlen = __p2 - __new;
      if (__p)
 {
   char_traits<_CharT>::copy(__p2, __p, __len - __declen);
   __newlen += __len - __declen;
 }
      __len = __newlen;
    }
# 971 "/usr/include/c++/10/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _OutIter>
    template<typename _ValueT>
      _OutIter
      num_put<_CharT, _OutIter>::
      _M_insert_float(_OutIter __s, ios_base& __io, _CharT __fill, char __mod,
         _ValueT __v) const
      {
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);


 const streamsize __prec = __io.precision() < 0 ? 6 : __io.precision();

 const int __max_digits =
   __gnu_cxx::__numeric_traits<_ValueT>::__digits10;


 int __len;

 char __fbuf[16];
 __num_base::_S_format_float(__io, __fbuf, __mod);



 const bool __use_prec =
   (__io.flags() & ios_base::floatfield) != ios_base::floatfield;



 int __cs_size = __max_digits * 3;
 char* __cs = static_cast<char*>(__builtin_alloca(__cs_size));
 if (__use_prec)
   __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
     __fbuf, __prec, __v);
 else
   __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
     __fbuf, __v);


 if (__len >= __cs_size)
   {
     __cs_size = __len + 1;
     __cs = static_cast<char*>(__builtin_alloca(__cs_size));
     if (__use_prec)
       __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
         __fbuf, __prec, __v);
     else
       __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
         __fbuf, __v);
   }
# 1044 "/usr/include/c++/10/bits/locale_facets.tcc" 3
 const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

 _CharT* __ws = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
            * __len));
 __ctype.widen(__cs, __cs + __len, __ws);


 _CharT* __wp = 0;
 const char* __p = char_traits<char>::find(__cs, __len, '.');
 if (__p)
   {
     __wp = __ws + (__p - __cs);
     *__wp = __lc->_M_decimal_point;
   }




 if (__lc->_M_use_grouping
     && (__wp || __len < 3 || (__cs[1] <= '9' && __cs[2] <= '9'
          && __cs[1] >= '0' && __cs[2] >= '0')))
   {


     _CharT* __ws2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __len * 2));

     streamsize __off = 0;
     if (__cs[0] == '-' || __cs[0] == '+')
       {
  __off = 1;
  __ws2[0] = __ws[0];
  __len -= 1;
       }

     _M_group_float(__lc->_M_grouping, __lc->_M_grouping_size,
      __lc->_M_thousands_sep, __wp, __ws2 + __off,
      __ws + __off, __len);
     __len += __off;

     __ws = __ws2;
   }


 const streamsize __w = __io.width();
 if (__w > static_cast<streamsize>(__len))
   {
     _CharT* __ws3 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __w));
     _M_pad(__fill, __w, __io, __ws3, __ws, __len);
     __ws = __ws3;
   }
 __io.width(0);



 return std::__write(__s, __ws, __len);
      }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const
    {
      const ios_base::fmtflags __flags = __io.flags();
      if ((__flags & ios_base::boolalpha) == 0)
        {
          const long __l = __v;
          __s = _M_insert_int(__s, __io, __fill, __l);
        }
      else
        {
   typedef __numpunct_cache<_CharT> __cache_type;
   __use_cache<__cache_type> __uc;
   const locale& __loc = __io._M_getloc();
   const __cache_type* __lc = __uc(__loc);

   const _CharT* __name = __v ? __lc->_M_truename
                              : __lc->_M_falsename;
   int __len = __v ? __lc->_M_truename_size
                   : __lc->_M_falsename_size;

   const streamsize __w = __io.width();
   if (__w > static_cast<streamsize>(__len))
     {
       const streamsize __plen = __w - __len;
       _CharT* __ps
  = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
       * __plen));

       char_traits<_CharT>::assign(__ps, __plen, __fill);
       __io.width(0);

       if ((__flags & ios_base::adjustfield) == ios_base::left)
  {
    __s = std::__write(__s, __name, __len);
    __s = std::__write(__s, __ps, __plen);
  }
       else
  {
    __s = std::__write(__s, __ps, __plen);
    __s = std::__write(__s, __name, __len);
  }
       return __s;
     }
   __io.width(0);
   __s = std::__write(__s, __name, __len);
 }
      return __s;
    }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill, double __v) const
    { return _M_insert_float(__s, __io, __fill, char(), __v); }
# 1169 "/usr/include/c++/10/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill,
    long double __v) const
    { return _M_insert_float(__s, __io, __fill, 'L', __v); }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill,
           const void* __v) const
    {
      const ios_base::fmtflags __flags = __io.flags();
      const ios_base::fmtflags __fmt = ~(ios_base::basefield
      | ios_base::uppercase);
      __io.flags((__flags & __fmt) | (ios_base::hex | ios_base::showbase));

      typedef __gnu_cxx::__conditional_type<(sizeof(const void*)
          <= sizeof(unsigned long)),
 unsigned long, unsigned long long>::__type _UIntPtrType;

      __s = _M_insert_int(__s, __io, __fill,
     reinterpret_cast<_UIntPtrType>(__v));
      __io.flags(__flags);
      return __s;
    }


# 1206 "/usr/include/c++/10/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _Traits>
    void
    __pad<_CharT, _Traits>::_S_pad(ios_base& __io, _CharT __fill,
       _CharT* __news, const _CharT* __olds,
       streamsize __newlen, streamsize __oldlen)
    {
      const size_t __plen = static_cast<size_t>(__newlen - __oldlen);
      const ios_base::fmtflags __adjust = __io.flags() & ios_base::adjustfield;


      if (__adjust == ios_base::left)
 {
   _Traits::copy(__news, __olds, __oldlen);
   _Traits::assign(__news + __oldlen, __plen, __fill);
   return;
 }

      size_t __mod = 0;
      if (__adjust == ios_base::internal)
 {



          const locale& __loc = __io._M_getloc();
   const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

   if (__ctype.widen('-') == __olds[0]
       || __ctype.widen('+') == __olds[0])
     {
       __news[0] = __olds[0];
       __mod = 1;
       ++__news;
     }
   else if (__ctype.widen('0') == __olds[0]
     && __oldlen > 1
     && (__ctype.widen('x') == __olds[1]
         || __ctype.widen('X') == __olds[1]))
     {
       __news[0] = __olds[0];
       __news[1] = __olds[1];
       __mod = 2;
       __news += 2;
     }

 }
      _Traits::assign(__news, __plen, __fill);
      _Traits::copy(__news + __plen, __olds + __mod, __oldlen - __mod);
    }

  template<typename _CharT>
    _CharT*
    __add_grouping(_CharT* __s, _CharT __sep,
     const char* __gbeg, size_t __gsize,
     const _CharT* __first, const _CharT* __last)
    {
      size_t __idx = 0;
      size_t __ctr = 0;

      while (__last - __first > __gbeg[__idx]
      && static_cast<signed char>(__gbeg[__idx]) > 0
      && __gbeg[__idx] != __gnu_cxx::__numeric_traits<char>::__max)
 {
   __last -= __gbeg[__idx];
   __idx < __gsize - 1 ? ++__idx : ++__ctr;
 }

      while (__first != __last)
 *__s++ = *__first++;

      while (__ctr--)
 {
   *__s++ = __sep;
   for (char __i = __gbeg[__idx]; __i > 0; --__i)
     *__s++ = *__first++;
 }

      while (__idx--)
 {
   *__s++ = __sep;
   for (char __i = __gbeg[__idx]; __i > 0; --__i)
     *__s++ = *__first++;
 }

      return __s;
    }




  extern template class __cxx11:: numpunct<char>;
  extern template class __cxx11:: numpunct_byname<char>;
  extern template class num_get<char>;
  extern template class num_put<char>;
  extern template class ctype_byname<char>;

  extern template
    const ctype<char>&
    use_facet<ctype<char> >(const locale&);

  extern template
    const numpunct<char>&
    use_facet<numpunct<char> >(const locale&);

  extern template
    const num_put<char>&
    use_facet<num_put<char> >(const locale&);

  extern template
    const num_get<char>&
    use_facet<num_get<char> >(const locale&);

  extern template
    bool
    has_facet<ctype<char> >(const locale&);

  extern template
    bool
    has_facet<numpunct<char> >(const locale&);

  extern template
    bool
    has_facet<num_put<char> >(const locale&);

  extern template
    bool
    has_facet<num_get<char> >(const locale&);


  extern template class __cxx11:: numpunct<wchar_t>;
  extern template class __cxx11:: numpunct_byname<wchar_t>;
  extern template class num_get<wchar_t>;
  extern template class num_put<wchar_t>;
  extern template class ctype_byname<wchar_t>;

  extern template
    const ctype<wchar_t>&
    use_facet<ctype<wchar_t> >(const locale&);

  extern template
    const numpunct<wchar_t>&
    use_facet<numpunct<wchar_t> >(const locale&);

  extern template
    const num_put<wchar_t>&
    use_facet<num_put<wchar_t> >(const locale&);

  extern template
    const num_get<wchar_t>&
    use_facet<num_get<wchar_t> >(const locale&);

 extern template
    bool
    has_facet<ctype<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<numpunct<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<num_put<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<num_get<wchar_t> >(const locale&);




}
# 2656 "/usr/include/c++/10/bits/locale_facets.h" 2 3
# 38 "/usr/include/c++/10/bits/basic_ios.h" 2 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Facet>
    inline const _Facet&
    __check_facet(const _Facet* __f)
    {
      if (!__f)
 __throw_bad_cast();
      return *__f;
    }
# 66 "/usr/include/c++/10/bits/basic_ios.h" 3
  template<typename _CharT, typename _Traits>
    class basic_ios : public ios_base
    {
    public:






      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;






      typedef ctype<_CharT> __ctype_type;
      typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
           __num_put_type;
      typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >
           __num_get_type;



    protected:
      basic_ostream<_CharT, _Traits>* _M_tie;
      mutable char_type _M_fill;
      mutable bool _M_fill_init;
      basic_streambuf<_CharT, _Traits>* _M_streambuf;


      const __ctype_type* _M_ctype;

      const __num_put_type* _M_num_put;

      const __num_get_type* _M_num_get;

    public:
# 117 "/usr/include/c++/10/bits/basic_ios.h" 3
      explicit operator bool() const
      { return !this->fail(); }





      bool
      operator!() const
      { return this->fail(); }
# 136 "/usr/include/c++/10/bits/basic_ios.h" 3
      iostate
      rdstate() const
      { return _M_streambuf_state; }
# 147 "/usr/include/c++/10/bits/basic_ios.h" 3
      void
      clear(iostate __state = goodbit);







      void
      setstate(iostate __state)
      { this->clear(this->rdstate() | __state); }




      void
      _M_setstate(iostate __state)
      {


 _M_streambuf_state |= __state;
 if (this->exceptions() & __state)
   throw;
      }







      bool
      good() const
      { return this->rdstate() == 0; }







      bool
      eof() const
      { return (this->rdstate() & eofbit) != 0; }
# 200 "/usr/include/c++/10/bits/basic_ios.h" 3
      bool
      fail() const
      { return (this->rdstate() & (badbit | failbit)) != 0; }







      bool
      bad() const
      { return (this->rdstate() & badbit) != 0; }
# 221 "/usr/include/c++/10/bits/basic_ios.h" 3
      iostate
      exceptions() const
      { return _M_exception; }
# 256 "/usr/include/c++/10/bits/basic_ios.h" 3
      void
      exceptions(iostate __except)
      {
        _M_exception = __except;
        this->clear(_M_streambuf_state);
      }







      explicit
      basic_ios(basic_streambuf<_CharT, _Traits>* __sb)
      : ios_base(), _M_tie(0), _M_fill(), _M_fill_init(false), _M_streambuf(0),
 _M_ctype(0), _M_num_put(0), _M_num_get(0)
      { this->init(__sb); }







      virtual
      ~basic_ios() { }
# 294 "/usr/include/c++/10/bits/basic_ios.h" 3
      basic_ostream<_CharT, _Traits>*
      tie() const
      { return _M_tie; }
# 306 "/usr/include/c++/10/bits/basic_ios.h" 3
      basic_ostream<_CharT, _Traits>*
      tie(basic_ostream<_CharT, _Traits>* __tiestr)
      {
        basic_ostream<_CharT, _Traits>* __old = _M_tie;
        _M_tie = __tiestr;
        return __old;
      }







      basic_streambuf<_CharT, _Traits>*
      rdbuf() const
      { return _M_streambuf; }
# 346 "/usr/include/c++/10/bits/basic_ios.h" 3
      basic_streambuf<_CharT, _Traits>*
      rdbuf(basic_streambuf<_CharT, _Traits>* __sb);
# 360 "/usr/include/c++/10/bits/basic_ios.h" 3
      basic_ios&
      copyfmt(const basic_ios& __rhs);







      char_type
      fill() const
      {
 if (!_M_fill_init)
   {
     _M_fill = this->widen(' ');
     _M_fill_init = true;
   }
 return _M_fill;
      }
# 389 "/usr/include/c++/10/bits/basic_ios.h" 3
      char_type
      fill(char_type __ch)
      {
 char_type __old = this->fill();
 _M_fill = __ch;
 return __old;
      }
# 409 "/usr/include/c++/10/bits/basic_ios.h" 3
      locale
      imbue(const locale& __loc);
# 429 "/usr/include/c++/10/bits/basic_ios.h" 3
      char
      narrow(char_type __c, char __dfault) const
      { return __check_facet(_M_ctype).narrow(__c, __dfault); }
# 448 "/usr/include/c++/10/bits/basic_ios.h" 3
      char_type
      widen(char __c) const
      { return __check_facet(_M_ctype).widen(__c); }

    protected:







      basic_ios()
      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false),
 _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
      { }







      void
      init(basic_streambuf<_CharT, _Traits>* __sb);


      basic_ios(const basic_ios&) = delete;
      basic_ios& operator=(const basic_ios&) = delete;

      void
      move(basic_ios& __rhs)
      {
 ios_base::_M_move(__rhs);
 _M_cache_locale(_M_ios_locale);
 this->tie(__rhs.tie(nullptr));
 _M_fill = __rhs._M_fill;
 _M_fill_init = __rhs._M_fill_init;
 _M_streambuf = nullptr;
      }

      void
      move(basic_ios&& __rhs)
      { this->move(__rhs); }

      void
      swap(basic_ios& __rhs) noexcept
      {
 ios_base::_M_swap(__rhs);
 _M_cache_locale(_M_ios_locale);
 __rhs._M_cache_locale(__rhs._M_ios_locale);
 std::swap(_M_tie, __rhs._M_tie);
 std::swap(_M_fill, __rhs._M_fill);
 std::swap(_M_fill_init, __rhs._M_fill_init);
      }

      void
      set_rdbuf(basic_streambuf<_CharT, _Traits>* __sb)
      { _M_streambuf = __sb; }


      void
      _M_cache_locale(const locale& __loc);
    };


}

# 1 "/usr/include/c++/10/bits/basic_ios.tcc" 1 3
# 33 "/usr/include/c++/10/bits/basic_ios.tcc" 3
       
# 34 "/usr/include/c++/10/bits/basic_ios.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::clear(iostate __state)
    {
      if (this->rdbuf())
 _M_streambuf_state = __state;
      else
   _M_streambuf_state = __state | badbit;
      if (this->exceptions() & this->rdstate())
 __throw_ios_failure(("basic_ios::clear"));
    }

  template<typename _CharT, typename _Traits>
    basic_streambuf<_CharT, _Traits>*
    basic_ios<_CharT, _Traits>::rdbuf(basic_streambuf<_CharT, _Traits>* __sb)
    {
      basic_streambuf<_CharT, _Traits>* __old = _M_streambuf;
      _M_streambuf = __sb;
      this->clear();
      return __old;
    }

  template<typename _CharT, typename _Traits>
    basic_ios<_CharT, _Traits>&
    basic_ios<_CharT, _Traits>::copyfmt(const basic_ios& __rhs)
    {


      if (this != &__rhs)
 {




   _Words* __words = (__rhs._M_word_size <= _S_local_word_size) ?
                      _M_local_word : new _Words[__rhs._M_word_size];


   _Callback_list* __cb = __rhs._M_callbacks;
   if (__cb)
     __cb->_M_add_reference();
   _M_call_callbacks(erase_event);
   if (_M_word != _M_local_word)
     {
       delete [] _M_word;
       _M_word = 0;
     }
   _M_dispose_callbacks();


   _M_callbacks = __cb;
   for (int __i = 0; __i < __rhs._M_word_size; ++__i)
     __words[__i] = __rhs._M_word[__i];
   _M_word = __words;
   _M_word_size = __rhs._M_word_size;

   this->flags(__rhs.flags());
   this->width(__rhs.width());
   this->precision(__rhs.precision());
   this->tie(__rhs.tie());
   this->fill(__rhs.fill());
   _M_ios_locale = __rhs.getloc();
   _M_cache_locale(_M_ios_locale);

   _M_call_callbacks(copyfmt_event);


   this->exceptions(__rhs.exceptions());
 }
      return *this;
    }


  template<typename _CharT, typename _Traits>
    locale
    basic_ios<_CharT, _Traits>::imbue(const locale& __loc)
    {
      locale __old(this->getloc());
      ios_base::imbue(__loc);
      _M_cache_locale(__loc);
      if (this->rdbuf() != 0)
 this->rdbuf()->pubimbue(__loc);
      return __old;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::init(basic_streambuf<_CharT, _Traits>* __sb)
    {

      ios_base::_M_init();


      _M_cache_locale(_M_ios_locale);
# 146 "/usr/include/c++/10/bits/basic_ios.tcc" 3
      _M_fill = _CharT();
      _M_fill_init = false;

      _M_tie = 0;
      _M_exception = goodbit;
      _M_streambuf = __sb;
      _M_streambuf_state = __sb ? goodbit : badbit;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::_M_cache_locale(const locale& __loc)
    {
      if (__builtin_expect(has_facet<__ctype_type>(__loc), true))
 _M_ctype = std::__addressof(use_facet<__ctype_type>(__loc));
      else
 _M_ctype = 0;

      if (__builtin_expect(has_facet<__num_put_type>(__loc), true))
 _M_num_put = std::__addressof(use_facet<__num_put_type>(__loc));
      else
 _M_num_put = 0;

      if (__builtin_expect(has_facet<__num_get_type>(__loc), true))
 _M_num_get = std::__addressof(use_facet<__num_get_type>(__loc));
      else
 _M_num_get = 0;
    }




  extern template class basic_ios<char>;


  extern template class basic_ios<wchar_t>;




}
# 517 "/usr/include/c++/10/bits/basic_ios.h" 2 3
# 45 "/usr/include/c++/10/ios" 2 3
# 39 "/usr/include/c++/10/ostream" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{

# 57 "/usr/include/c++/10/ostream" 3
  template<typename _CharT, typename _Traits>
    class basic_ostream : virtual public basic_ios<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_ios<_CharT, _Traits> __ios_type;
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
             __num_put_type;
      typedef ctype<_CharT> __ctype_type;
# 83 "/usr/include/c++/10/ostream" 3
      explicit
      basic_ostream(__streambuf_type* __sb)
      { this->init(__sb); }






      virtual
      ~basic_ostream() { }


      class sentry;
      friend class sentry;
# 107 "/usr/include/c++/10/ostream" 3
      __ostream_type&
      operator<<(__ostream_type& (*__pf)(__ostream_type&))
      {



 return __pf(*this);
      }

      __ostream_type&
      operator<<(__ios_type& (*__pf)(__ios_type&))
      {



 __pf(*this);
 return *this;
      }

      __ostream_type&
      operator<<(ios_base& (*__pf) (ios_base&))
      {



 __pf(*this);
 return *this;
      }
# 165 "/usr/include/c++/10/ostream" 3
      __ostream_type&
      operator<<(long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(unsigned long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(bool __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(short __n);

      __ostream_type&
      operator<<(unsigned short __n)
      {


 return _M_insert(static_cast<unsigned long>(__n));
      }

      __ostream_type&
      operator<<(int __n);

      __ostream_type&
      operator<<(unsigned int __n)
      {


 return _M_insert(static_cast<unsigned long>(__n));
      }


      __ostream_type&
      operator<<(long long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(unsigned long long __n)
      { return _M_insert(__n); }
# 219 "/usr/include/c++/10/ostream" 3
      __ostream_type&
      operator<<(double __f)
      { return _M_insert(__f); }

      __ostream_type&
      operator<<(float __f)
      {


 return _M_insert(static_cast<double>(__f));
      }

      __ostream_type&
      operator<<(long double __f)
      { return _M_insert(__f); }
# 244 "/usr/include/c++/10/ostream" 3
      __ostream_type&
      operator<<(const void* __p)
      { return _M_insert(__p); }
# 275 "/usr/include/c++/10/ostream" 3
      __ostream_type&
      operator<<(__streambuf_type* __sb);
# 308 "/usr/include/c++/10/ostream" 3
      __ostream_type&
      put(char_type __c);






      void
      _M_write(const char_type* __s, streamsize __n)
      {
 const streamsize __put = this->rdbuf()->sputn(__s, __n);
 if (__put != __n)
   this->setstate(ios_base::badbit);
      }
# 340 "/usr/include/c++/10/ostream" 3
      __ostream_type&
      write(const char_type* __s, streamsize __n);
# 353 "/usr/include/c++/10/ostream" 3
      __ostream_type&
      flush();
# 363 "/usr/include/c++/10/ostream" 3
      pos_type
      tellp();
# 374 "/usr/include/c++/10/ostream" 3
      __ostream_type&
      seekp(pos_type);
# 386 "/usr/include/c++/10/ostream" 3
       __ostream_type&
      seekp(off_type, ios_base::seekdir);

    protected:
      basic_ostream()
      { this->init(0); }



      basic_ostream(basic_iostream<_CharT, _Traits>&) { }

      basic_ostream(const basic_ostream&) = delete;

      basic_ostream(basic_ostream&& __rhs)
      : __ios_type()
      { __ios_type::move(__rhs); }



      basic_ostream& operator=(const basic_ostream&) = delete;

      basic_ostream&
      operator=(basic_ostream&& __rhs)
      {
 swap(__rhs);
 return *this;
      }

      void
      swap(basic_ostream& __rhs)
      { __ios_type::swap(__rhs); }


      template<typename _ValueT>
 __ostream_type&
 _M_insert(_ValueT __v);
    };
# 431 "/usr/include/c++/10/ostream" 3
  template <typename _CharT, typename _Traits>
    class basic_ostream<_CharT, _Traits>::sentry
    {

      bool _M_ok;
      basic_ostream<_CharT, _Traits>& _M_os;

    public:
# 450 "/usr/include/c++/10/ostream" 3
      explicit
      sentry(basic_ostream<_CharT, _Traits>& __os);

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"







      ~sentry()
      {

 if (bool(_M_os.flags() & ios_base::unitbuf) && !uncaught_exception())
   {

     if (_M_os.rdbuf() && _M_os.rdbuf()->pubsync() == -1)
       _M_os.setstate(ios_base::badbit);
   }
      }
#pragma GCC diagnostic pop
# 482 "/usr/include/c++/10/ostream" 3
      explicit

      operator bool() const
      { return _M_ok; }
    };
# 504 "/usr/include/c++/10/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, _CharT __c)
    { return __ostream_insert(__out, &__c, 1); }

  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, char __c)
    { return (__out << __out.widen(__c)); }


  template<typename _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, char __c)
    { return __ostream_insert(__out, &__c, 1); }


  template<typename _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, signed char __c)
    { return (__out << static_cast<char>(__c)); }

  template<typename _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, unsigned char __c)
    { return (__out << static_cast<char>(__c)); }
# 587 "/usr/include/c++/10/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, const _CharT* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 __ostream_insert(__out, __s,
    static_cast<streamsize>(_Traits::length(__s)));
      return __out;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits> &
    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s);


  template<typename _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 __ostream_insert(__out, __s,
    static_cast<streamsize>(_Traits::length(__s)));
      return __out;
    }


  template<typename _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, const signed char* __s)
    { return (__out << reinterpret_cast<const char*>(__s)); }

  template<typename _Traits>
    inline basic_ostream<char, _Traits> &
    operator<<(basic_ostream<char, _Traits>& __out, const unsigned char* __s)
    { return (__out << reinterpret_cast<const char*>(__s)); }
# 679 "/usr/include/c++/10/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    endl(basic_ostream<_CharT, _Traits>& __os)
    { return flush(__os.put(__os.widen('\n'))); }
# 691 "/usr/include/c++/10/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    ends(basic_ostream<_CharT, _Traits>& __os)
    { return __os.put(_CharT()); }






  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    flush(basic_ostream<_CharT, _Traits>& __os)
    { return __os.flush(); }


  template<typename _Ch, typename _Up>
    basic_ostream<_Ch, _Up>&
    __is_convertible_to_basic_ostream_test(basic_ostream<_Ch, _Up>*);

  template<typename _Tp, typename = void>
    struct __is_convertible_to_basic_ostream_impl
    {
      using __ostream_type = void;
    };

  template<typename _Tp>
    using __do_is_convertible_to_basic_ostream_impl =
    decltype(__is_convertible_to_basic_ostream_test
      (declval<typename remove_reference<_Tp>::type*>()));

  template<typename _Tp>
    struct __is_convertible_to_basic_ostream_impl
    <_Tp,
     __void_t<__do_is_convertible_to_basic_ostream_impl<_Tp>>>
    {
      using __ostream_type =
 __do_is_convertible_to_basic_ostream_impl<_Tp>;
    };

  template<typename _Tp>
    struct __is_convertible_to_basic_ostream
    : __is_convertible_to_basic_ostream_impl<_Tp>
    {
    public:
      using type = __not_<is_void<
        typename __is_convertible_to_basic_ostream_impl<_Tp>::__ostream_type>>;
      constexpr static bool value = type::value;
    };

  template<typename _Ostream, typename _Tp, typename = void>
    struct __is_insertable : false_type {};

  template<typename _Ostream, typename _Tp>
    struct __is_insertable<_Ostream, _Tp,
      __void_t<decltype(declval<_Ostream&>()
          << declval<const _Tp&>())>>
        : true_type {};

  template<typename _Ostream>
    using __rvalue_ostream_type =
      typename __is_convertible_to_basic_ostream<
 _Ostream>::__ostream_type;
# 765 "/usr/include/c++/10/ostream" 3
  template<typename _Ostream, typename _Tp>
    inline
    typename enable_if<__and_<__not_<is_lvalue_reference<_Ostream>>,
         __is_convertible_to_basic_ostream<_Ostream>,
         __is_insertable<
    __rvalue_ostream_type<_Ostream>,
    const _Tp&>>::value,
         __rvalue_ostream_type<_Ostream>>::type
    operator<<(_Ostream&& __os, const _Tp& __x)
    {
      __rvalue_ostream_type<_Ostream> __ret_os = __os;
      __ret_os << __x;
      return __ret_os;
    }



}

# 1 "/usr/include/c++/10/bits/ostream.tcc" 1 3
# 37 "/usr/include/c++/10/bits/ostream.tcc" 3
       
# 38 "/usr/include/c++/10/bits/ostream.tcc" 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>::sentry::
    sentry(basic_ostream<_CharT, _Traits>& __os)
    : _M_ok(false), _M_os(__os)
    {

      if (__os.tie() && __os.good())
 __os.tie()->flush();

      if (__os.good())
 _M_ok = true;
      else
 __os.setstate(ios_base::failbit);
    }

  template<typename _CharT, typename _Traits>
    template<typename _ValueT>
      basic_ostream<_CharT, _Traits>&
      basic_ostream<_CharT, _Traits>::
      _M_insert(_ValueT __v)
      {
 sentry __cerb(*this);
 if (__cerb)
   {
     ios_base::iostate __err = ios_base::goodbit;
     try
       {
  const __num_put_type& __np = __check_facet(this->_M_num_put);
  if (__np.put(*this, *this, this->fill(), __v).failed())
    __err |= ios_base::badbit;
       }
     catch(__cxxabiv1::__forced_unwind&)
       {
  this->_M_setstate(ios_base::badbit);
  throw;
       }
     catch(...)
       { this->_M_setstate(ios_base::badbit); }
     if (__err)
       this->setstate(__err);
   }
 return *this;
      }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(short __n)
    {


      const ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;
      if (__fmt == ios_base::oct || __fmt == ios_base::hex)
 return _M_insert(static_cast<long>(static_cast<unsigned short>(__n)));
      else
 return _M_insert(static_cast<long>(__n));
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(int __n)
    {


      const ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;
      if (__fmt == ios_base::oct || __fmt == ios_base::hex)
 return _M_insert(static_cast<long>(static_cast<unsigned int>(__n)));
      else
 return _M_insert(static_cast<long>(__n));
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(__streambuf_type* __sbin)
    {
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this);
      if (__cerb && __sbin)
 {
   try
     {
       if (!__copy_streambufs(__sbin, this->rdbuf()))
  __err |= ios_base::failbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::failbit); }
 }
      else if (!__sbin)
 __err |= ios_base::badbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    put(char_type __c)
    {






      sentry __cerb(*this);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const int_type __put = this->rdbuf()->sputc(__c);
       if (traits_type::eq_int_type(__put, traits_type::eof()))
  __err |= ios_base::badbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    write(const _CharT* __s, streamsize __n)
    {







      sentry __cerb(*this);
      if (__cerb)
 {
   try
     { _M_write(__s, __n); }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    flush()
    {



      ios_base::iostate __err = ios_base::goodbit;
      try
 {
   if (this->rdbuf() && this->rdbuf()->pubsync() == -1)
     __err |= ios_base::badbit;
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_ostream<_CharT, _Traits>::pos_type
    basic_ostream<_CharT, _Traits>::
    tellp()
    {
      pos_type __ret = pos_type(-1);
      try
 {
   if (!this->fail())
     __ret = this->rdbuf()->pubseekoff(0, ios_base::cur, ios_base::out);
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    seekp(pos_type __pos)
    {
      ios_base::iostate __err = ios_base::goodbit;
      try
 {
   if (!this->fail())
     {


       const pos_type __p = this->rdbuf()->pubseekpos(__pos,
            ios_base::out);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    seekp(off_type __off, ios_base::seekdir __dir)
    {
      ios_base::iostate __err = ios_base::goodbit;
      try
 {
   if (!this->fail())
     {


       const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,
            ios_base::out);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 {


   const size_t __clen = char_traits<char>::length(__s);
   try
     {
       struct __ptr_guard
       {
  _CharT *__p;
  __ptr_guard (_CharT *__ip): __p(__ip) { }
  ~__ptr_guard() { delete[] __p; }
  _CharT* __get() { return __p; }
       } __pg (new _CharT[__clen]);

       _CharT *__ws = __pg.__get();
       for (size_t __i = 0; __i < __clen; ++__i)
  __ws[__i] = __out.widen(__s[__i]);
       __ostream_insert(__out, __ws, __clen);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __out._M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { __out._M_setstate(ios_base::badbit); }
 }
      return __out;
    }




  extern template class basic_ostream<char>;
  extern template ostream& endl(ostream&);
  extern template ostream& ends(ostream&);
  extern template ostream& flush(ostream&);
  extern template ostream& operator<<(ostream&, char);
  extern template ostream& operator<<(ostream&, unsigned char);
  extern template ostream& operator<<(ostream&, signed char);
  extern template ostream& operator<<(ostream&, const char*);
  extern template ostream& operator<<(ostream&, const unsigned char*);
  extern template ostream& operator<<(ostream&, const signed char*);

  extern template ostream& ostream::_M_insert(long);
  extern template ostream& ostream::_M_insert(unsigned long);
  extern template ostream& ostream::_M_insert(bool);

  extern template ostream& ostream::_M_insert(long long);
  extern template ostream& ostream::_M_insert(unsigned long long);

  extern template ostream& ostream::_M_insert(double);
  extern template ostream& ostream::_M_insert(long double);
  extern template ostream& ostream::_M_insert(const void*);


  extern template class basic_ostream<wchar_t>;
  extern template wostream& endl(wostream&);
  extern template wostream& ends(wostream&);
  extern template wostream& flush(wostream&);
  extern template wostream& operator<<(wostream&, wchar_t);
  extern template wostream& operator<<(wostream&, char);
  extern template wostream& operator<<(wostream&, const wchar_t*);
  extern template wostream& operator<<(wostream&, const char*);

  extern template wostream& wostream::_M_insert(long);
  extern template wostream& wostream::_M_insert(unsigned long);
  extern template wostream& wostream::_M_insert(bool);

  extern template wostream& wostream::_M_insert(long long);
  extern template wostream& wostream::_M_insert(unsigned long long);

  extern template wostream& wostream::_M_insert(double);
  extern template wostream& wostream::_M_insert(long double);
  extern template wostream& wostream::_M_insert(const void*);




}
# 785 "/usr/include/c++/10/ostream" 2 3
# 40 "/usr/include/c++/10/iostream" 2 3
# 1 "/usr/include/c++/10/istream" 1 3
# 36 "/usr/include/c++/10/istream" 3
       
# 37 "/usr/include/c++/10/istream" 3




namespace std __attribute__ ((__visibility__ ("default")))
{

# 57 "/usr/include/c++/10/istream" 3
  template<typename _CharT, typename _Traits>
    class basic_istream : virtual public basic_ios<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_ios<_CharT, _Traits> __ios_type;
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >
        __num_get_type;
      typedef ctype<_CharT> __ctype_type;

    protected:





      streamsize _M_gcount;

    public:







      explicit
      basic_istream(__streambuf_type* __sb)
      : _M_gcount(streamsize(0))
      { this->init(__sb); }






      virtual
      ~basic_istream()
      { _M_gcount = streamsize(0); }


      class sentry;
      friend class sentry;
# 119 "/usr/include/c++/10/istream" 3
      __istream_type&
      operator>>(__istream_type& (*__pf)(__istream_type&))
      { return __pf(*this); }

      __istream_type&
      operator>>(__ios_type& (*__pf)(__ios_type&))
      {
 __pf(*this);
 return *this;
      }

      __istream_type&
      operator>>(ios_base& (*__pf)(ios_base&))
      {
 __pf(*this);
 return *this;
      }
# 167 "/usr/include/c++/10/istream" 3
      __istream_type&
      operator>>(bool& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(short& __n);

      __istream_type&
      operator>>(unsigned short& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(int& __n);

      __istream_type&
      operator>>(unsigned int& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(long& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(unsigned long& __n)
      { return _M_extract(__n); }


      __istream_type&
      operator>>(long long& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(unsigned long long& __n)
      { return _M_extract(__n); }
# 213 "/usr/include/c++/10/istream" 3
      __istream_type&
      operator>>(float& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(double& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(long double& __f)
      { return _M_extract(__f); }
# 234 "/usr/include/c++/10/istream" 3
      __istream_type&
      operator>>(void*& __p)
      { return _M_extract(__p); }
# 258 "/usr/include/c++/10/istream" 3
      __istream_type&
      operator>>(__streambuf_type* __sb);
# 268 "/usr/include/c++/10/istream" 3
      streamsize
      gcount() const
      { return _M_gcount; }
# 301 "/usr/include/c++/10/istream" 3
      int_type
      get();
# 315 "/usr/include/c++/10/istream" 3
      __istream_type&
      get(char_type& __c);
# 342 "/usr/include/c++/10/istream" 3
      __istream_type&
      get(char_type* __s, streamsize __n, char_type __delim);
# 353 "/usr/include/c++/10/istream" 3
      __istream_type&
      get(char_type* __s, streamsize __n)
      { return this->get(__s, __n, this->widen('\n')); }
# 376 "/usr/include/c++/10/istream" 3
      __istream_type&
      get(__streambuf_type& __sb, char_type __delim);
# 386 "/usr/include/c++/10/istream" 3
      __istream_type&
      get(__streambuf_type& __sb)
      { return this->get(__sb, this->widen('\n')); }
# 415 "/usr/include/c++/10/istream" 3
      __istream_type&
      getline(char_type* __s, streamsize __n, char_type __delim);
# 426 "/usr/include/c++/10/istream" 3
      __istream_type&
      getline(char_type* __s, streamsize __n)
      { return this->getline(__s, __n, this->widen('\n')); }
# 450 "/usr/include/c++/10/istream" 3
      __istream_type&
      ignore(streamsize __n, int_type __delim);

      __istream_type&
      ignore(streamsize __n);

      __istream_type&
      ignore();
# 467 "/usr/include/c++/10/istream" 3
      int_type
      peek();
# 485 "/usr/include/c++/10/istream" 3
      __istream_type&
      read(char_type* __s, streamsize __n);
# 504 "/usr/include/c++/10/istream" 3
      streamsize
      readsome(char_type* __s, streamsize __n);
# 521 "/usr/include/c++/10/istream" 3
      __istream_type&
      putback(char_type __c);
# 537 "/usr/include/c++/10/istream" 3
      __istream_type&
      unget();
# 555 "/usr/include/c++/10/istream" 3
      int
      sync();
# 570 "/usr/include/c++/10/istream" 3
      pos_type
      tellg();
# 585 "/usr/include/c++/10/istream" 3
      __istream_type&
      seekg(pos_type);
# 601 "/usr/include/c++/10/istream" 3
      __istream_type&
      seekg(off_type, ios_base::seekdir);


    protected:
      basic_istream()
      : _M_gcount(streamsize(0))
      { this->init(0); }


      basic_istream(const basic_istream&) = delete;

      basic_istream(basic_istream&& __rhs)
      : __ios_type(), _M_gcount(__rhs._M_gcount)
      {
 __ios_type::move(__rhs);
 __rhs._M_gcount = 0;
      }



      basic_istream& operator=(const basic_istream&) = delete;

      basic_istream&
      operator=(basic_istream&& __rhs)
      {
 swap(__rhs);
 return *this;
      }

      void
      swap(basic_istream& __rhs)
      {
 __ios_type::swap(__rhs);
 std::swap(_M_gcount, __rhs._M_gcount);
      }


      template<typename _ValueT>
 __istream_type&
 _M_extract(_ValueT& __v);
    };


  template<>
    basic_istream<char>&
    basic_istream<char>::
    getline(char_type* __s, streamsize __n, char_type __delim);

  template<>
    basic_istream<char>&
    basic_istream<char>::
    ignore(streamsize __n);

  template<>
    basic_istream<char>&
    basic_istream<char>::
    ignore(streamsize __n, int_type __delim);


  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    getline(char_type* __s, streamsize __n, char_type __delim);

  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    ignore(streamsize __n);

  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    ignore(streamsize __n, int_type __delim);
# 685 "/usr/include/c++/10/istream" 3
  template<typename _CharT, typename _Traits>
    class basic_istream<_CharT, _Traits>::sentry
    {

      bool _M_ok;

    public:

      typedef _Traits traits_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::__ctype_type __ctype_type;
      typedef typename _Traits::int_type __int_type;
# 721 "/usr/include/c++/10/istream" 3
      explicit
      sentry(basic_istream<_CharT, _Traits>& __is, bool __noskipws = false);
# 732 "/usr/include/c++/10/istream" 3
      explicit

      operator bool() const
      { return _M_ok; }
    };
# 750 "/usr/include/c++/10/istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c);

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, unsigned char& __c)
    { return (__in >> reinterpret_cast<char&>(__c)); }

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, signed char& __c)
    { return (__in >> reinterpret_cast<char&>(__c)); }
# 792 "/usr/include/c++/10/istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s);


  template<>
    basic_istream<char>&
    operator>>(basic_istream<char>& __in, char* __s);

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, unsigned char* __s)
    { return (__in >> reinterpret_cast<char*>(__s)); }

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, signed char* __s)
    { return (__in >> reinterpret_cast<char*>(__s)); }
# 823 "/usr/include/c++/10/istream" 3
  template<typename _CharT, typename _Traits>
    class basic_iostream
    : public basic_istream<_CharT, _Traits>,
      public basic_ostream<_CharT, _Traits>
    {
    public:



      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_ostream<_CharT, _Traits> __ostream_type;







      explicit
      basic_iostream(basic_streambuf<_CharT, _Traits>* __sb)
      : __istream_type(__sb), __ostream_type(__sb) { }




      virtual
      ~basic_iostream() { }

    protected:
      basic_iostream()
      : __istream_type(), __ostream_type() { }


      basic_iostream(const basic_iostream&) = delete;

      basic_iostream(basic_iostream&& __rhs)
      : __istream_type(std::move(__rhs)), __ostream_type(*this)
      { }



      basic_iostream& operator=(const basic_iostream&) = delete;

      basic_iostream&
      operator=(basic_iostream&& __rhs)
      {
 swap(__rhs);
 return *this;
      }

      void
      swap(basic_iostream& __rhs)
      { __istream_type::swap(__rhs); }

    };
# 906 "/usr/include/c++/10/istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    ws(basic_istream<_CharT, _Traits>& __is);


  template<typename _Ch, typename _Up>
    basic_istream<_Ch, _Up>&
    __is_convertible_to_basic_istream_test(basic_istream<_Ch, _Up>*);

  template<typename _Tp, typename = void>
    struct __is_convertible_to_basic_istream_impl
    {
      using __istream_type = void;
    };

  template<typename _Tp>
    using __do_is_convertible_to_basic_istream_impl =
    decltype(__is_convertible_to_basic_istream_test
      (declval<typename remove_reference<_Tp>::type*>()));

  template<typename _Tp>
    struct __is_convertible_to_basic_istream_impl
    <_Tp,
     __void_t<__do_is_convertible_to_basic_istream_impl<_Tp>>>
    {
      using __istream_type =
 __do_is_convertible_to_basic_istream_impl<_Tp>;
    };

  template<typename _Tp>
    struct __is_convertible_to_basic_istream
    : __is_convertible_to_basic_istream_impl<_Tp>
    {
    public:
      using type = __not_<is_void<
        typename __is_convertible_to_basic_istream_impl<_Tp>::__istream_type>>;
      constexpr static bool value = type::value;
    };

  template<typename _Istream, typename _Tp, typename = void>
    struct __is_extractable : false_type {};

  template<typename _Istream, typename _Tp>
    struct __is_extractable<_Istream, _Tp,
       __void_t<decltype(declval<_Istream&>()
           >> declval<_Tp>())>>
    : true_type {};

  template<typename _Istream>
    using __rvalue_istream_type =
      typename __is_convertible_to_basic_istream<
 _Istream>::__istream_type;
# 972 "/usr/include/c++/10/istream" 3
  template<typename _Istream, typename _Tp>
    inline
    typename enable_if<__and_<__not_<is_lvalue_reference<_Istream>>,
         __is_convertible_to_basic_istream<_Istream>,
         __is_extractable<
    __rvalue_istream_type<_Istream>,
    _Tp&&>>::value,
         __rvalue_istream_type<_Istream>>::type
    operator>>(_Istream&& __is, _Tp&& __x)
    {
      __rvalue_istream_type<_Istream> __ret_is = __is;
      __ret_is >> std::forward<_Tp>(__x);
      return __ret_is;
    }



}

# 1 "/usr/include/c++/10/bits/istream.tcc" 1 3
# 37 "/usr/include/c++/10/bits/istream.tcc" 3
       
# 38 "/usr/include/c++/10/bits/istream.tcc" 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>::sentry::
    sentry(basic_istream<_CharT, _Traits>& __in, bool __noskip) : _M_ok(false)
    {
      ios_base::iostate __err = ios_base::goodbit;
      if (__in.good())
 try
   {
     if (__in.tie())
       __in.tie()->flush();
     if (!__noskip && bool(__in.flags() & ios_base::skipws))
       {
  const __int_type __eof = traits_type::eof();
  __streambuf_type* __sb = __in.rdbuf();
  __int_type __c = __sb->sgetc();

  const __ctype_type& __ct = __check_facet(__in._M_ctype);
  while (!traits_type::eq_int_type(__c, __eof)
         && __ct.is(ctype_base::space,
      traits_type::to_char_type(__c)))
    __c = __sb->snextc();




  if (traits_type::eq_int_type(__c, __eof))
    __err |= ios_base::eofbit;
       }
   }
 catch(__cxxabiv1::__forced_unwind&)
   {
     __in._M_setstate(ios_base::badbit);
     throw;
   }
 catch(...)
   { __in._M_setstate(ios_base::badbit); }

      if (__in.good() && __err == ios_base::goodbit)
 _M_ok = true;
      else
 {
   __err |= ios_base::failbit;
   __in.setstate(__err);
 }
    }

  template<typename _CharT, typename _Traits>
    template<typename _ValueT>
      basic_istream<_CharT, _Traits>&
      basic_istream<_CharT, _Traits>::
      _M_extract(_ValueT& __v)
      {
 sentry __cerb(*this, false);
 if (__cerb)
   {
     ios_base::iostate __err = ios_base::goodbit;
     try
       {
  const __num_get_type& __ng = __check_facet(this->_M_num_get);
  __ng.get(*this, 0, *this, __err, __v);
       }
     catch(__cxxabiv1::__forced_unwind&)
       {
  this->_M_setstate(ios_base::badbit);
  throw;
       }
     catch(...)
       { this->_M_setstate(ios_base::badbit); }
     if (__err)
       this->setstate(__err);
   }
 return *this;
      }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(short& __n)
    {


      sentry __cerb(*this, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       long __l;
       const __num_get_type& __ng = __check_facet(this->_M_num_get);
       __ng.get(*this, 0, *this, __err, __l);



       if (__l < __gnu_cxx::__numeric_traits<short>::__min)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<short>::__min;
  }
       else if (__l > __gnu_cxx::__numeric_traits<short>::__max)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<short>::__max;
  }
       else
  __n = short(__l);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(int& __n)
    {


      sentry __cerb(*this, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       long __l;
       const __num_get_type& __ng = __check_facet(this->_M_num_get);
       __ng.get(*this, 0, *this, __err, __l);



       if (__l < __gnu_cxx::__numeric_traits<int>::__min)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<int>::__min;
  }
       else if (__l > __gnu_cxx::__numeric_traits<int>::__max)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<int>::__max;
  }
       else
  __n = int(__l);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(__streambuf_type* __sbout)
    {
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, false);
      if (__cerb && __sbout)
 {
   try
     {
       bool __ineof;
       if (!__copy_streambufs_eof(this->rdbuf(), __sbout, __ineof))
  __err |= ios_base::failbit;
       if (__ineof)
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::failbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::failbit); }
 }
      else if (!__sbout)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::int_type
    basic_istream<_CharT, _Traits>::
    get(void)
    {
      const int_type __eof = traits_type::eof();
      int_type __c = __eof;
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       __c = this->rdbuf()->sbumpc();

       if (!traits_type::eq_int_type(__c, __eof))
  _M_gcount = 1;
       else
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return __c;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(char_type& __c)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       const int_type __cb = this->rdbuf()->sbumpc();

       if (!traits_type::eq_int_type(__cb, traits_type::eof()))
  {
    _M_gcount = 1;
    __c = traits_type::to_char_type(__cb);
  }
       else
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(char_type* __s, streamsize __n, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       const int_type __idelim = traits_type::to_int_type(__delim);
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       int_type __c = __sb->sgetc();

       while (_M_gcount + 1 < __n
       && !traits_type::eq_int_type(__c, __eof)
       && !traits_type::eq_int_type(__c, __idelim))
  {
    *__s++ = traits_type::to_char_type(__c);
    ++_M_gcount;
    __c = __sb->snextc();
  }
       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }


      if (__n > 0)
 *__s = char_type();
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(__streambuf_type& __sb, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       const int_type __idelim = traits_type::to_int_type(__delim);
       const int_type __eof = traits_type::eof();
       __streambuf_type* __this_sb = this->rdbuf();
       int_type __c = __this_sb->sgetc();
       char_type __c2 = traits_type::to_char_type(__c);

       while (!traits_type::eq_int_type(__c, __eof)
       && !traits_type::eq_int_type(__c, __idelim)
       && !traits_type::eq_int_type(__sb.sputc(__c2), __eof))
  {
    ++_M_gcount;
    __c = __this_sb->snextc();
    __c2 = traits_type::to_char_type(__c);
  }
       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    getline(char_type* __s, streamsize __n, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
        {
          try
            {
              const int_type __idelim = traits_type::to_int_type(__delim);
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();

              while (_M_gcount + 1 < __n
                     && !traits_type::eq_int_type(__c, __eof)
                     && !traits_type::eq_int_type(__c, __idelim))
                {
                  *__s++ = traits_type::to_char_type(__c);
                  __c = __sb->snextc();
                  ++_M_gcount;
                }
              if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
              else
                {
                  if (traits_type::eq_int_type(__c, __idelim))
                    {
                      __sb->sbumpc();
                      ++_M_gcount;
                    }
                  else
                    __err |= ios_base::failbit;
                }
            }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
          catch(...)
            { this->_M_setstate(ios_base::badbit); }
        }


      if (__n > 0)
 *__s = char_type();
      if (!_M_gcount)
        __err |= ios_base::failbit;
      if (__err)
        this->setstate(__err);
      return *this;
    }




  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(void)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();

       if (traits_type::eq_int_type(__sb->sbumpc(), __eof))
  __err |= ios_base::eofbit;
       else
  _M_gcount = 1;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb && __n > 0)
        {
          ios_base::iostate __err = ios_base::goodbit;
          try
            {
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();
# 521 "/usr/include/c++/10/bits/istream.tcc" 3
       bool __large_ignore = false;
       while (true)
  {
    while (_M_gcount < __n
    && !traits_type::eq_int_type(__c, __eof))
      {
        ++_M_gcount;
        __c = __sb->snextc();
      }
    if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max
        && !traits_type::eq_int_type(__c, __eof))
      {
        _M_gcount =
   __gnu_cxx::__numeric_traits<streamsize>::__min;
        __large_ignore = true;
      }
    else
      break;
  }

       if (__large_ignore)
  _M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;

       if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
            }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
          catch(...)
            { this->_M_setstate(ios_base::badbit); }
          if (__err)
            this->setstate(__err);
        }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(streamsize __n, int_type __delim)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb && __n > 0)
        {
          ios_base::iostate __err = ios_base::goodbit;
          try
            {
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();


       bool __large_ignore = false;
       while (true)
  {
    while (_M_gcount < __n
    && !traits_type::eq_int_type(__c, __eof)
    && !traits_type::eq_int_type(__c, __delim))
      {
        ++_M_gcount;
        __c = __sb->snextc();
      }
    if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max
        && !traits_type::eq_int_type(__c, __eof)
        && !traits_type::eq_int_type(__c, __delim))
      {
        _M_gcount =
   __gnu_cxx::__numeric_traits<streamsize>::__min;
        __large_ignore = true;
      }
    else
      break;
  }

       if (__large_ignore)
  _M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;

              if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
       else if (traits_type::eq_int_type(__c, __delim))
  {
    if (_M_gcount
        < __gnu_cxx::__numeric_traits<streamsize>::__max)
      ++_M_gcount;
    __sb->sbumpc();
  }
            }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
          catch(...)
            { this->_M_setstate(ios_base::badbit); }
          if (__err)
            this->setstate(__err);
        }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::int_type
    basic_istream<_CharT, _Traits>::
    peek(void)
    {
      int_type __c = traits_type::eof();
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       __c = this->rdbuf()->sgetc();
       if (traits_type::eq_int_type(__c, traits_type::eof()))
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return __c;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    read(char_type* __s, streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       _M_gcount = this->rdbuf()->sgetn(__s, __n);
       if (_M_gcount != __n)
  __err |= (ios_base::eofbit | ios_base::failbit);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_istream<_CharT, _Traits>::
    readsome(char_type* __s, streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {

       const streamsize __num = this->rdbuf()->in_avail();
       if (__num > 0)
  _M_gcount = this->rdbuf()->sgetn(__s, std::min(__num, __n));
       else if (__num == -1)
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return _M_gcount;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    putback(char_type __c)
    {


      _M_gcount = 0;

      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       if (!__sb
    || traits_type::eq_int_type(__sb->sputbackc(__c), __eof))
  __err |= ios_base::badbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    unget(void)
    {


      _M_gcount = 0;

      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       if (!__sb
    || traits_type::eq_int_type(__sb->sungetc(), __eof))
  __err |= ios_base::badbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    int
    basic_istream<_CharT, _Traits>::
    sync(void)
    {


      int __ret = -1;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       __streambuf_type* __sb = this->rdbuf();
       if (__sb)
  {
    if (__sb->pubsync() == -1)
      __err |= ios_base::badbit;
    else
      __ret = 0;
  }
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::pos_type
    basic_istream<_CharT, _Traits>::
    tellg(void)
    {


      pos_type __ret = pos_type(-1);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       if (!this->fail())
  __ret = this->rdbuf()->pubseekoff(0, ios_base::cur,
        ios_base::in);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    seekg(pos_type __pos)
    {



      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       if (!this->fail())
  {

    const pos_type __p = this->rdbuf()->pubseekpos(__pos,
         ios_base::in);


    if (__p == pos_type(off_type(-1)))
      __err |= ios_base::failbit;
  }
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    seekg(off_type __off, ios_base::seekdir __dir)
    {



      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       if (!this->fail())
  {

    const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,
         ios_base::in);


    if (__p == pos_type(off_type(-1)))
      __err |= ios_base::failbit;
  }
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::int_type __int_type;

      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const __int_type __cb = __in.rdbuf()->sbumpc();
       if (!_Traits::eq_int_type(__cb, _Traits::eof()))
  __c = _Traits::to_char_type(__cb);
       else
  __err |= (ios_base::eofbit | ios_base::failbit);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { __in._M_setstate(ios_base::badbit); }
   if (__err)
     __in.setstate(__err);
 }
      return __in;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef typename _Traits::int_type int_type;
      typedef _CharT char_type;
      typedef ctype<_CharT> __ctype_type;

      streamsize __extracted = 0;
      ios_base::iostate __err = ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   try
     {

       streamsize __num = __in.width();
       if (__num <= 0)
  __num = __gnu_cxx::__numeric_traits<streamsize>::__max;

       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());

       const int_type __eof = _Traits::eof();
       __streambuf_type* __sb = __in.rdbuf();
       int_type __c = __sb->sgetc();

       while (__extracted < __num - 1
       && !_Traits::eq_int_type(__c, __eof)
       && !__ct.is(ctype_base::space,
     _Traits::to_char_type(__c)))
  {
    *__s++ = _Traits::to_char_type(__c);
    ++__extracted;
    __c = __sb->snextc();
  }
       if (_Traits::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;



       *__s = char_type();
       __in.width(0);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { __in._M_setstate(ios_base::badbit); }
 }
      if (!__extracted)
 __err |= ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    ws(basic_istream<_CharT, _Traits>& __in)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef typename __istream_type::int_type __int_type;
      typedef ctype<_CharT> __ctype_type;

      const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
      const __int_type __eof = _Traits::eof();
      __streambuf_type* __sb = __in.rdbuf();
      __int_type __c = __sb->sgetc();

      while (!_Traits::eq_int_type(__c, __eof)
      && __ct.is(ctype_base::space, _Traits::to_char_type(__c)))
 __c = __sb->snextc();

       if (_Traits::eq_int_type(__c, __eof))
  __in.setstate(ios_base::eofbit);
      return __in;
    }




  extern template class basic_istream<char>;
  extern template istream& ws(istream&);
  extern template istream& operator>>(istream&, char&);
  extern template istream& operator>>(istream&, char*);
  extern template istream& operator>>(istream&, unsigned char&);
  extern template istream& operator>>(istream&, signed char&);
  extern template istream& operator>>(istream&, unsigned char*);
  extern template istream& operator>>(istream&, signed char*);

  extern template istream& istream::_M_extract(unsigned short&);
  extern template istream& istream::_M_extract(unsigned int&);
  extern template istream& istream::_M_extract(long&);
  extern template istream& istream::_M_extract(unsigned long&);
  extern template istream& istream::_M_extract(bool&);

  extern template istream& istream::_M_extract(long long&);
  extern template istream& istream::_M_extract(unsigned long long&);

  extern template istream& istream::_M_extract(float&);
  extern template istream& istream::_M_extract(double&);
  extern template istream& istream::_M_extract(long double&);
  extern template istream& istream::_M_extract(void*&);

  extern template class basic_iostream<char>;


  extern template class basic_istream<wchar_t>;
  extern template wistream& ws(wistream&);
  extern template wistream& operator>>(wistream&, wchar_t&);
  extern template wistream& operator>>(wistream&, wchar_t*);

  extern template wistream& wistream::_M_extract(unsigned short&);
  extern template wistream& wistream::_M_extract(unsigned int&);
  extern template wistream& wistream::_M_extract(long&);
  extern template wistream& wistream::_M_extract(unsigned long&);
  extern template wistream& wistream::_M_extract(bool&);

  extern template wistream& wistream::_M_extract(long long&);
  extern template wistream& wistream::_M_extract(unsigned long long&);

  extern template wistream& wistream::_M_extract(float&);
  extern template wistream& wistream::_M_extract(double&);
  extern template wistream& wistream::_M_extract(long double&);
  extern template wistream& wistream::_M_extract(void*&);

  extern template class basic_iostream<wchar_t>;




}
# 992 "/usr/include/c++/10/istream" 2 3
# 41 "/usr/include/c++/10/iostream" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 60 "/usr/include/c++/10/iostream" 3
  extern istream cin;
  extern ostream cout;
  extern ostream cerr;
  extern ostream clog;


  extern wistream wcin;
  extern wostream wcout;
  extern wostream wcerr;
  extern wostream wclog;




  static ios_base::Init __ioinit;


}
# 16 "/usr/include/wx-3.1-unofficial/wx/ioswrap.h" 2

# 1 "/usr/include/wx-3.1-unofficial/wx/afterstd.h" 1
# 18 "/usr/include/wx-3.1-unofficial/wx/ioswrap.h" 2
# 29 "/usr/include/wx-3.1-unofficial/wx/textctrl.h" 2






# 34 "/usr/include/wx-3.1-unofficial/wx/textctrl.h"
class wxTextCtrl;
class wxTextCtrlBase;







typedef long wxTextCoord;





extern __attribute__ ((visibility("default"))) const char wxTextCtrlNameStr[];



const wxTextCoord wxOutOfRangeTextCoord = -1;
const wxTextCoord wxInvalidTextCoord = -2;
# 124 "/usr/include/wx-3.1-unofficial/wx/textctrl.h"
enum wxTextCtrlHitTestResult
{
    wxTE_HT_UNKNOWN = -2,
    wxTE_HT_BEFORE,
    wxTE_HT_ON_TEXT,
    wxTE_HT_BELOW,
    wxTE_HT_BEYOND
};
# 140 "/usr/include/wx-3.1-unofficial/wx/textctrl.h"
enum wxTextAttrAlignment
{
    wxTEXT_ALIGNMENT_DEFAULT,
    wxTEXT_ALIGNMENT_LEFT,
    wxTEXT_ALIGNMENT_CENTRE,
    wxTEXT_ALIGNMENT_CENTER = wxTEXT_ALIGNMENT_CENTRE,
    wxTEXT_ALIGNMENT_RIGHT,
    wxTEXT_ALIGNMENT_JUSTIFIED
};


enum wxTextAttrFlags
{
    wxTEXT_ATTR_TEXT_COLOUR = 0x00000001,
    wxTEXT_ATTR_BACKGROUND_COLOUR = 0x00000002,

    wxTEXT_ATTR_FONT_FACE = 0x00000004,
    wxTEXT_ATTR_FONT_POINT_SIZE = 0x00000008,
    wxTEXT_ATTR_FONT_PIXEL_SIZE = 0x10000000,
    wxTEXT_ATTR_FONT_WEIGHT = 0x00000010,
    wxTEXT_ATTR_FONT_ITALIC = 0x00000020,
    wxTEXT_ATTR_FONT_UNDERLINE = 0x00000040,
    wxTEXT_ATTR_FONT_STRIKETHROUGH = 0x08000000,
    wxTEXT_ATTR_FONT_ENCODING = 0x02000000,
    wxTEXT_ATTR_FONT_FAMILY = 0x04000000,
    wxTEXT_ATTR_FONT_SIZE =
        ( wxTEXT_ATTR_FONT_POINT_SIZE | wxTEXT_ATTR_FONT_PIXEL_SIZE ),
    wxTEXT_ATTR_FONT =
        ( wxTEXT_ATTR_FONT_FACE | wxTEXT_ATTR_FONT_SIZE | wxTEXT_ATTR_FONT_WEIGHT |
            wxTEXT_ATTR_FONT_ITALIC | wxTEXT_ATTR_FONT_UNDERLINE | wxTEXT_ATTR_FONT_STRIKETHROUGH | wxTEXT_ATTR_FONT_ENCODING | wxTEXT_ATTR_FONT_FAMILY ),

    wxTEXT_ATTR_ALIGNMENT = 0x00000080,
    wxTEXT_ATTR_LEFT_INDENT = 0x00000100,
    wxTEXT_ATTR_RIGHT_INDENT = 0x00000200,
    wxTEXT_ATTR_TABS = 0x00000400,
    wxTEXT_ATTR_PARA_SPACING_AFTER = 0x00000800,
    wxTEXT_ATTR_PARA_SPACING_BEFORE = 0x00001000,
    wxTEXT_ATTR_LINE_SPACING = 0x00002000,
    wxTEXT_ATTR_CHARACTER_STYLE_NAME = 0x00004000,
    wxTEXT_ATTR_PARAGRAPH_STYLE_NAME = 0x00008000,
    wxTEXT_ATTR_LIST_STYLE_NAME = 0x00010000,

    wxTEXT_ATTR_BULLET_STYLE = 0x00020000,
    wxTEXT_ATTR_BULLET_NUMBER = 0x00040000,
    wxTEXT_ATTR_BULLET_TEXT = 0x00080000,
    wxTEXT_ATTR_BULLET_NAME = 0x00100000,

    wxTEXT_ATTR_BULLET =
        ( wxTEXT_ATTR_BULLET_STYLE | wxTEXT_ATTR_BULLET_NUMBER | wxTEXT_ATTR_BULLET_TEXT |
          wxTEXT_ATTR_BULLET_NAME ),


    wxTEXT_ATTR_URL = 0x00200000,
    wxTEXT_ATTR_PAGE_BREAK = 0x00400000,
    wxTEXT_ATTR_EFFECTS = 0x00800000,
    wxTEXT_ATTR_OUTLINE_LEVEL = 0x01000000,

    wxTEXT_ATTR_AVOID_PAGE_BREAK_BEFORE = 0x20000000,
    wxTEXT_ATTR_AVOID_PAGE_BREAK_AFTER = 0x40000000,





    wxTEXT_ATTR_CHARACTER =
        (wxTEXT_ATTR_FONT|wxTEXT_ATTR_EFFECTS|
            wxTEXT_ATTR_BACKGROUND_COLOUR|wxTEXT_ATTR_TEXT_COLOUR|wxTEXT_ATTR_CHARACTER_STYLE_NAME|wxTEXT_ATTR_URL),

    wxTEXT_ATTR_PARAGRAPH =
        (wxTEXT_ATTR_ALIGNMENT|wxTEXT_ATTR_LEFT_INDENT|wxTEXT_ATTR_RIGHT_INDENT|wxTEXT_ATTR_TABS|
            wxTEXT_ATTR_PARA_SPACING_BEFORE|wxTEXT_ATTR_PARA_SPACING_AFTER|wxTEXT_ATTR_LINE_SPACING|
            wxTEXT_ATTR_BULLET|wxTEXT_ATTR_PARAGRAPH_STYLE_NAME|wxTEXT_ATTR_LIST_STYLE_NAME|wxTEXT_ATTR_OUTLINE_LEVEL|
            wxTEXT_ATTR_PAGE_BREAK|wxTEXT_ATTR_AVOID_PAGE_BREAK_BEFORE|wxTEXT_ATTR_AVOID_PAGE_BREAK_AFTER),

    wxTEXT_ATTR_ALL = (wxTEXT_ATTR_CHARACTER|wxTEXT_ATTR_PARAGRAPH)
};




enum wxTextAttrBulletStyle
{
    wxTEXT_ATTR_BULLET_STYLE_NONE = 0x00000000,
    wxTEXT_ATTR_BULLET_STYLE_ARABIC = 0x00000001,
    wxTEXT_ATTR_BULLET_STYLE_LETTERS_UPPER = 0x00000002,
    wxTEXT_ATTR_BULLET_STYLE_LETTERS_LOWER = 0x00000004,
    wxTEXT_ATTR_BULLET_STYLE_ROMAN_UPPER = 0x00000008,
    wxTEXT_ATTR_BULLET_STYLE_ROMAN_LOWER = 0x00000010,
    wxTEXT_ATTR_BULLET_STYLE_SYMBOL = 0x00000020,
    wxTEXT_ATTR_BULLET_STYLE_BITMAP = 0x00000040,
    wxTEXT_ATTR_BULLET_STYLE_PARENTHESES = 0x00000080,
    wxTEXT_ATTR_BULLET_STYLE_PERIOD = 0x00000100,
    wxTEXT_ATTR_BULLET_STYLE_STANDARD = 0x00000200,
    wxTEXT_ATTR_BULLET_STYLE_RIGHT_PARENTHESIS = 0x00000400,
    wxTEXT_ATTR_BULLET_STYLE_OUTLINE = 0x00000800,

    wxTEXT_ATTR_BULLET_STYLE_ALIGN_LEFT = 0x00000000,
    wxTEXT_ATTR_BULLET_STYLE_ALIGN_RIGHT = 0x00001000,
    wxTEXT_ATTR_BULLET_STYLE_ALIGN_CENTRE = 0x00002000,

    wxTEXT_ATTR_BULLET_STYLE_CONTINUATION = 0x00004000
};




enum wxTextAttrEffects
{
    wxTEXT_ATTR_EFFECT_NONE = 0x00000000,
    wxTEXT_ATTR_EFFECT_CAPITALS = 0x00000001,
    wxTEXT_ATTR_EFFECT_SMALL_CAPITALS = 0x00000002,
    wxTEXT_ATTR_EFFECT_STRIKETHROUGH = 0x00000004,
    wxTEXT_ATTR_EFFECT_DOUBLE_STRIKETHROUGH = 0x00000008,
    wxTEXT_ATTR_EFFECT_SHADOW = 0x00000010,
    wxTEXT_ATTR_EFFECT_EMBOSS = 0x00000020,
    wxTEXT_ATTR_EFFECT_OUTLINE = 0x00000040,
    wxTEXT_ATTR_EFFECT_ENGRAVE = 0x00000080,
    wxTEXT_ATTR_EFFECT_SUPERSCRIPT = 0x00000100,
    wxTEXT_ATTR_EFFECT_SUBSCRIPT = 0x00000200,
    wxTEXT_ATTR_EFFECT_RTL = 0x00000400,
    wxTEXT_ATTR_EFFECT_SUPPRESS_HYPHENATION = 0x00001000
};




enum wxTextAttrLineSpacing
{
    wxTEXT_ATTR_LINE_SPACING_NORMAL = 10,
    wxTEXT_ATTR_LINE_SPACING_HALF = 15,
    wxTEXT_ATTR_LINE_SPACING_TWICE = 20
};

enum wxTextAttrUnderlineType
{
     wxTEXT_ATTR_UNDERLINE_NONE,
     wxTEXT_ATTR_UNDERLINE_SOLID,
     wxTEXT_ATTR_UNDERLINE_DOUBLE,
     wxTEXT_ATTR_UNDERLINE_SPECIAL
};





class __attribute__ ((visibility("default"))) wxTextAttr
{
public:

    wxTextAttr() { Init(); }
    wxTextAttr(const wxTextAttr& attr) { Init(); Copy(attr); }
    wxTextAttr(const wxColour& colText,
               const wxColour& colBack = wxNullColour,
               const wxFont& font = wxNullFont,
               wxTextAttrAlignment alignment = wxTEXT_ALIGNMENT_DEFAULT);


    void Init();


    void Copy(const wxTextAttr& attr);


    void operator= (const wxTextAttr& attr);


    bool operator== (const wxTextAttr& attr) const;





    bool EqPartial(const wxTextAttr& attr, bool weakTest = true) const;


    bool GetFontAttributes(const wxFont& font, int flags = wxTEXT_ATTR_FONT);


    void SetTextColour(const wxColour& colText) { m_colText = colText; m_flags |= wxTEXT_ATTR_TEXT_COLOUR; }
    void SetBackgroundColour(const wxColour& colBack) { m_colBack = colBack; m_flags |= wxTEXT_ATTR_BACKGROUND_COLOUR; }
    void SetAlignment(wxTextAttrAlignment alignment) { m_textAlignment = alignment; m_flags |= wxTEXT_ATTR_ALIGNMENT; }
    void SetTabs(const wxArrayInt& tabs) { m_tabs = tabs; m_flags |= wxTEXT_ATTR_TABS; }
    void SetLeftIndent(int indent, int subIndent = 0) { m_leftIndent = indent; m_leftSubIndent = subIndent; m_flags |= wxTEXT_ATTR_LEFT_INDENT; }
    void SetRightIndent(int indent) { m_rightIndent = indent; m_flags |= wxTEXT_ATTR_RIGHT_INDENT; }

    void SetFontSize(int pointSize) { m_fontSize = pointSize; m_flags &= ~wxTEXT_ATTR_FONT_SIZE; m_flags |= wxTEXT_ATTR_FONT_POINT_SIZE; }
    void SetFontPointSize(int pointSize) { m_fontSize = pointSize; m_flags &= ~wxTEXT_ATTR_FONT_SIZE; m_flags |= wxTEXT_ATTR_FONT_POINT_SIZE; }
    void SetFontPixelSize(int pixelSize) { m_fontSize = pixelSize; m_flags &= ~wxTEXT_ATTR_FONT_SIZE; m_flags |= wxTEXT_ATTR_FONT_PIXEL_SIZE; }
    void SetFontStyle(wxFontStyle fontStyle) { m_fontStyle = fontStyle; m_flags |= wxTEXT_ATTR_FONT_ITALIC; }
    void SetFontWeight(wxFontWeight fontWeight) { m_fontWeight = fontWeight; m_flags |= wxTEXT_ATTR_FONT_WEIGHT; }
    void SetFontFaceName(const wxString& faceName) { m_fontFaceName = faceName; m_flags |= wxTEXT_ATTR_FONT_FACE; }
    void SetFontUnderlined(bool underlined) { SetFontUnderlined(underlined ? wxTEXT_ATTR_UNDERLINE_SOLID : wxTEXT_ATTR_UNDERLINE_NONE); }
    void SetFontUnderlined(wxTextAttrUnderlineType type, const wxColour& colour = wxNullColour)
    {
        m_flags |= wxTEXT_ATTR_FONT_UNDERLINE;
        m_fontUnderlineType = type;
        m_colUnderline = colour;
    }
    void SetFontStrikethrough(bool strikethrough) { m_fontStrikethrough = strikethrough; m_flags |= wxTEXT_ATTR_FONT_STRIKETHROUGH; }
    void SetFontEncoding(wxFontEncoding encoding) { m_fontEncoding = encoding; m_flags |= wxTEXT_ATTR_FONT_ENCODING; }
    void SetFontFamily(wxFontFamily family) { m_fontFamily = family; m_flags |= wxTEXT_ATTR_FONT_FAMILY; }


    void SetFont(const wxFont& font, int flags = (wxTEXT_ATTR_FONT & ~wxTEXT_ATTR_FONT_PIXEL_SIZE)) { GetFontAttributes(font, flags); }

    void SetFlags(long flags) { m_flags = flags; }

    void SetCharacterStyleName(const wxString& name) { m_characterStyleName = name; m_flags |= wxTEXT_ATTR_CHARACTER_STYLE_NAME; }
    void SetParagraphStyleName(const wxString& name) { m_paragraphStyleName = name; m_flags |= wxTEXT_ATTR_PARAGRAPH_STYLE_NAME; }
    void SetListStyleName(const wxString& name) { m_listStyleName = name; SetFlags(GetFlags() | wxTEXT_ATTR_LIST_STYLE_NAME); }
    void SetParagraphSpacingAfter(int spacing) { m_paragraphSpacingAfter = spacing; m_flags |= wxTEXT_ATTR_PARA_SPACING_AFTER; }
    void SetParagraphSpacingBefore(int spacing) { m_paragraphSpacingBefore = spacing; m_flags |= wxTEXT_ATTR_PARA_SPACING_BEFORE; }
    void SetLineSpacing(int spacing) { m_lineSpacing = spacing; m_flags |= wxTEXT_ATTR_LINE_SPACING; }
    void SetBulletStyle(int style) { m_bulletStyle = style; m_flags |= wxTEXT_ATTR_BULLET_STYLE; }
    void SetBulletNumber(int n) { m_bulletNumber = n; m_flags |= wxTEXT_ATTR_BULLET_NUMBER; }
    void SetBulletText(const wxString& text) { m_bulletText = text; m_flags |= wxTEXT_ATTR_BULLET_TEXT; }
    void SetBulletFont(const wxString& bulletFont) { m_bulletFont = bulletFont; }
    void SetBulletName(const wxString& name) { m_bulletName = name; m_flags |= wxTEXT_ATTR_BULLET_NAME; }
    void SetURL(const wxString& url) { m_urlTarget = url; m_flags |= wxTEXT_ATTR_URL; }
    void SetPageBreak(bool pageBreak = true) { SetFlags(pageBreak ? (GetFlags() | wxTEXT_ATTR_PAGE_BREAK) : (GetFlags() & ~wxTEXT_ATTR_PAGE_BREAK)); }
    void SetTextEffects(int effects) { m_textEffects = effects; SetFlags(GetFlags() | wxTEXT_ATTR_EFFECTS); }
    void SetTextEffectFlags(int effects) { m_textEffectFlags = effects; }
    void SetOutlineLevel(int level) { m_outlineLevel = level; SetFlags(GetFlags() | wxTEXT_ATTR_OUTLINE_LEVEL); }

    const wxColour& GetTextColour() const { return m_colText; }
    const wxColour& GetBackgroundColour() const { return m_colBack; }
    wxTextAttrAlignment GetAlignment() const { return m_textAlignment; }
    const wxArrayInt& GetTabs() const { return m_tabs; }
    long GetLeftIndent() const { return m_leftIndent; }
    long GetLeftSubIndent() const { return m_leftSubIndent; }
    long GetRightIndent() const { return m_rightIndent; }
    long GetFlags() const { return m_flags; }

    int GetFontSize() const { return m_fontSize; }
    wxFontStyle GetFontStyle() const { return m_fontStyle; }
    wxFontWeight GetFontWeight() const { return m_fontWeight; }
    bool GetFontUnderlined() const { return m_fontUnderlineType != wxTEXT_ATTR_UNDERLINE_NONE; }
    wxTextAttrUnderlineType GetUnderlineType() const { return m_fontUnderlineType; }
    const wxColour& GetUnderlineColour() const { return m_colUnderline; }
    bool GetFontStrikethrough() const { return m_fontStrikethrough; }
    const wxString& GetFontFaceName() const { return m_fontFaceName; }
    wxFontEncoding GetFontEncoding() const { return m_fontEncoding; }
    wxFontFamily GetFontFamily() const { return m_fontFamily; }

    wxFont GetFont() const;

    const wxString& GetCharacterStyleName() const { return m_characterStyleName; }
    const wxString& GetParagraphStyleName() const { return m_paragraphStyleName; }
    const wxString& GetListStyleName() const { return m_listStyleName; }
    int GetParagraphSpacingAfter() const { return m_paragraphSpacingAfter; }
    int GetParagraphSpacingBefore() const { return m_paragraphSpacingBefore; }

    int GetLineSpacing() const { return m_lineSpacing; }
    int GetBulletStyle() const { return m_bulletStyle; }
    int GetBulletNumber() const { return m_bulletNumber; }
    const wxString& GetBulletText() const { return m_bulletText; }
    const wxString& GetBulletFont() const { return m_bulletFont; }
    const wxString& GetBulletName() const { return m_bulletName; }
    const wxString& GetURL() const { return m_urlTarget; }
    int GetTextEffects() const { return m_textEffects; }
    int GetTextEffectFlags() const { return m_textEffectFlags; }
    int GetOutlineLevel() const { return m_outlineLevel; }


    bool HasTextColour() const { return m_colText.IsOk() && HasFlag(wxTEXT_ATTR_TEXT_COLOUR) ; }
    bool HasBackgroundColour() const { return m_colBack.IsOk() && HasFlag(wxTEXT_ATTR_BACKGROUND_COLOUR) ; }
    bool HasAlignment() const { return (m_textAlignment != wxTEXT_ALIGNMENT_DEFAULT) && HasFlag(wxTEXT_ATTR_ALIGNMENT) ; }
    bool HasTabs() const { return HasFlag(wxTEXT_ATTR_TABS) ; }
    bool HasLeftIndent() const { return HasFlag(wxTEXT_ATTR_LEFT_INDENT); }
    bool HasRightIndent() const { return HasFlag(wxTEXT_ATTR_RIGHT_INDENT); }
    bool HasFontWeight() const { return HasFlag(wxTEXT_ATTR_FONT_WEIGHT); }
    bool HasFontSize() const { return HasFlag(wxTEXT_ATTR_FONT_SIZE); }
    bool HasFontPointSize() const { return HasFlag(wxTEXT_ATTR_FONT_POINT_SIZE); }
    bool HasFontPixelSize() const { return HasFlag(wxTEXT_ATTR_FONT_PIXEL_SIZE); }
    bool HasFontItalic() const { return HasFlag(wxTEXT_ATTR_FONT_ITALIC); }
    bool HasFontUnderlined() const { return HasFlag(wxTEXT_ATTR_FONT_UNDERLINE); }
    bool HasFontStrikethrough() const { return HasFlag(wxTEXT_ATTR_FONT_STRIKETHROUGH); }
    bool HasFontFaceName() const { return HasFlag(wxTEXT_ATTR_FONT_FACE); }
    bool HasFontEncoding() const { return HasFlag(wxTEXT_ATTR_FONT_ENCODING); }
    bool HasFontFamily() const { return HasFlag(wxTEXT_ATTR_FONT_FAMILY); }
    bool HasFont() const { return HasFlag(wxTEXT_ATTR_FONT); }

    bool HasParagraphSpacingAfter() const { return HasFlag(wxTEXT_ATTR_PARA_SPACING_AFTER); }
    bool HasParagraphSpacingBefore() const { return HasFlag(wxTEXT_ATTR_PARA_SPACING_BEFORE); }
    bool HasLineSpacing() const { return HasFlag(wxTEXT_ATTR_LINE_SPACING); }
    bool HasCharacterStyleName() const { return HasFlag(wxTEXT_ATTR_CHARACTER_STYLE_NAME) && !m_characterStyleName.IsEmpty(); }
    bool HasParagraphStyleName() const { return HasFlag(wxTEXT_ATTR_PARAGRAPH_STYLE_NAME) && !m_paragraphStyleName.IsEmpty(); }
    bool HasListStyleName() const { return HasFlag(wxTEXT_ATTR_LIST_STYLE_NAME) || !m_listStyleName.IsEmpty(); }
    bool HasBulletStyle() const { return HasFlag(wxTEXT_ATTR_BULLET_STYLE); }
    bool HasBulletNumber() const { return HasFlag(wxTEXT_ATTR_BULLET_NUMBER); }
    bool HasBulletText() const { return HasFlag(wxTEXT_ATTR_BULLET_TEXT); }
    bool HasBulletName() const { return HasFlag(wxTEXT_ATTR_BULLET_NAME); }
    bool HasURL() const { return HasFlag(wxTEXT_ATTR_URL); }
    bool HasPageBreak() const { return HasFlag(wxTEXT_ATTR_PAGE_BREAK); }
    bool HasTextEffects() const { return HasFlag(wxTEXT_ATTR_EFFECTS); }
    bool HasTextEffect(int effect) const { return HasFlag(wxTEXT_ATTR_EFFECTS) && ((GetTextEffectFlags() & effect) != 0); }
    bool HasOutlineLevel() const { return HasFlag(wxTEXT_ATTR_OUTLINE_LEVEL); }

    bool HasFlag(long flag) const { return (m_flags & flag) != 0; }
    void RemoveFlag(long flag) { m_flags &= ~flag; }
    void AddFlag(long flag) { m_flags |= flag; }


    bool IsCharacterStyle() const { return HasFlag(wxTEXT_ATTR_CHARACTER); }
    bool IsParagraphStyle() const { return HasFlag(wxTEXT_ATTR_PARAGRAPH); }


    bool IsDefault() const
    {
        return GetFlags() == 0;
    }




    bool Apply(const wxTextAttr& style, const wxTextAttr* compareWith = 
# 455 "/usr/include/wx-3.1-unofficial/wx/textctrl.h" 3 4
                                                                       __null
# 455 "/usr/include/wx-3.1-unofficial/wx/textctrl.h"
                                                                           );





    static wxTextAttr Merge(const wxTextAttr& base, const wxTextAttr& overlay)
    {
        return Combine(overlay, base, 
# 463 "/usr/include/wx-3.1-unofficial/wx/textctrl.h" 3 4
                                     __null
# 463 "/usr/include/wx-3.1-unofficial/wx/textctrl.h"
                                         );
    }


    void Merge(const wxTextAttr& overlay)
    {
        *this = Merge(*this, overlay);
    }




    static wxTextAttr Combine(const wxTextAttr& attr,
                              const wxTextAttr& attrDef,
                              const wxTextCtrlBase *text);


    static bool TabsEq(const wxArrayInt& tabs1, const wxArrayInt& tabs2);


    static bool RemoveStyle(wxTextAttr& destStyle, const wxTextAttr& style);


    static bool CombineBitlists(int& valueA, int valueB, int& flagsA, int flagsB);


    static bool BitlistsEqPartial(int valueA, int valueB, int flags);


    static bool SplitParaCharStyles(const wxTextAttr& style, wxTextAttr& parStyle, wxTextAttr& charStyle);

private:
    long m_flags;


    wxArrayInt m_tabs;
    int m_leftIndent;
    int m_leftSubIndent;


    int m_rightIndent;
    wxTextAttrAlignment m_textAlignment;

    int m_paragraphSpacingAfter;
    int m_paragraphSpacingBefore;
    int m_lineSpacing;
    int m_bulletStyle;
    int m_bulletNumber;
    int m_textEffects;
    int m_textEffectFlags;
    int m_outlineLevel;
    wxString m_bulletText;
    wxString m_bulletFont;
    wxString m_bulletName;
    wxString m_urlTarget;
    wxFontEncoding m_fontEncoding;


    wxColour m_colText,
                        m_colBack;
    int m_fontSize;
    wxFontStyle m_fontStyle;
    wxFontWeight m_fontWeight;
    wxFontFamily m_fontFamily;
    wxTextAttrUnderlineType m_fontUnderlineType;
    wxColour m_colUnderline;
    bool m_fontStrikethrough;
    wxString m_fontFaceName;


    wxString m_characterStyleName;


    wxString m_paragraphStyleName;


    wxString m_listStyleName;
};





class __attribute__ ((visibility("default"))) wxTextAreaBase
{
public:
    wxTextAreaBase() { }
    virtual ~wxTextAreaBase() { }




    virtual int GetLineLength(long lineNo) const = 0;
    virtual wxString GetLineText(long lineNo) const = 0;
    virtual int GetNumberOfLines() const = 0;





    bool LoadFile(const wxString& file, int fileType = 0)
        { return DoLoadFile(file, fileType); }
    bool SaveFile(const wxString& file = wxEmptyString,
                  int fileType = 0);




    virtual bool IsModified() const = 0;
    virtual void MarkDirty() = 0;
    virtual void DiscardEdits() = 0;
    void SetModified(bool modified)
    {
        if ( modified )
            MarkDirty();
        else
            DiscardEdits();
    }
# 589 "/usr/include/wx-3.1-unofficial/wx/textctrl.h"
    virtual bool SetStyle(long start, long end, const wxTextAttr& style) = 0;
    virtual bool GetStyle(long position, wxTextAttr& style) = 0;
    virtual bool SetDefaultStyle(const wxTextAttr& style) = 0;
    virtual const wxTextAttr& GetDefaultStyle() const { return m_defaultStyle; }
# 601 "/usr/include/wx-3.1-unofficial/wx/textctrl.h"
    virtual long XYToPosition(long x, long y) const = 0;
    virtual bool PositionToXY(long pos, long *x, long *y) const = 0;



    wxPoint PositionToCoords(long pos) const;


    virtual void ShowPosition(long pos) = 0;





    virtual wxTextCtrlHitTestResult HitTest(const wxPoint& pt, long *pos) const;
    virtual wxTextCtrlHitTestResult HitTest(const wxPoint& pt,
                                            wxTextCoord *col,
                                            wxTextCoord *row) const;
    virtual wxString GetValue() const = 0;
    virtual void SetValue(const wxString& value) = 0;

protected:

    virtual bool DoLoadFile(const wxString& file, int fileType);
    virtual bool DoSaveFile(const wxString& file, int fileType);



    virtual bool IsValidPosition(long pos) const = 0;



    virtual wxPoint DoPositionToCoords(long pos) const;



    wxString m_filename;


    wxTextAttr m_defaultStyle;


    private: wxTextAreaBase(const wxTextAreaBase&) = delete; wxTextAreaBase& operator=(const wxTextAreaBase&) = delete;
};






class __attribute__ ((visibility("default"))) wxTextCtrlIface : public wxTextAreaBase,
                                         public wxTextEntryBase
{
public:
    wxTextCtrlIface() { }


    virtual wxString GetValue() const override
    {
       return wxTextEntryBase::GetValue();
    }
    virtual void SetValue(const wxString& value) override
    {
       wxTextEntryBase::SetValue(value);
    }

protected:
    virtual bool IsValidPosition(long pos) const override
    {
        return pos >= 0 && pos <= GetLastPosition();
    }

private:
    private: wxTextCtrlIface(const wxTextCtrlIface&) = delete; wxTextCtrlIface& operator=(const wxTextCtrlIface&) = delete;
};





class __attribute__ ((visibility("default"))) wxTextCtrlBase : public wxControl,

                                   public std:: streambuf,

                                   public wxTextAreaBase,
                                   public wxTextEntry
{
public:



    wxTextCtrlBase() { }
    virtual ~wxTextCtrlBase() { }



    bool IsSingleLine() const { return !HasFlag(0x0020); }
    bool IsMultiLine() const { return !IsSingleLine(); }



    wxTextCtrl& operator<<(const wxString& s);
    wxTextCtrl& operator<<(int i);
    wxTextCtrl& operator<<(long i);
    wxTextCtrl& operator<<(float f) { return *this << double(f); }
    wxTextCtrl& operator<<(double d);
    wxTextCtrl& operator<<(char c) { return *this << wxString(c); }
    wxTextCtrl& operator<<(wchar_t c) { return *this << wxString(c); }



    virtual bool EmulateKeyPress(const wxKeyEvent& event);



    virtual void DoUpdateWindowUI(wxUpdateUIEvent& event) override;

    virtual bool ShouldInheritColours() const override { return false; }



    virtual wxTextCtrlHitTestResult HitTest(const wxPoint& pt, long *pos) const override
    {
        return wxTextAreaBase::HitTest(pt, pos);
    }

    virtual wxTextCtrlHitTestResult HitTest(const wxPoint& pt,
                                            wxTextCoord *col,
                                            wxTextCoord *row) const override
    {
        return wxTextAreaBase::HitTest(pt, col, row);
    }



    virtual bool SetStyle(long start, long end, const wxTextAttr& style) override;
    virtual bool GetStyle(long position, wxTextAttr& style) override;
    virtual bool SetDefaultStyle(const wxTextAttr& style) override;


    virtual wxString GetValue() const override
    {
       return wxTextEntry::GetValue();
    }
    virtual void SetValue(const wxString& value) override
    {
       wxTextEntry::SetValue(value);
    }


    virtual wxVisualAttributes GetDefaultAttributes() const override
    {
        return GetClassDefaultAttributes(GetWindowVariant());
    }

    static wxVisualAttributes
    GetClassDefaultAttributes(wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL)
    {
        return GetCompositeControlsDefaultAttributes(variant);
    }

    virtual const wxTextEntry* WXGetTextEntry() const override { return this; }

protected:



    virtual bool OnDynamicBind(wxDynamicEventTableEntry& entry) override;



    int overflow(int i) override;



    virtual bool IsValidPosition(long pos) const override
    {
        return pos >= 0 && pos <= GetLastPosition();
    }


    virtual wxWindow *GetEditableWindow() override { return this; }

    private: wxTextCtrlBase(const wxTextCtrlBase&) = delete; wxTextCtrlBase& operator=(const wxTextCtrlBase&) = delete;
    public:
# 785 "/usr/include/wx-3.1-unofficial/wx/textctrl.h"
#pragma GCC diagnostic push
# 785 "/usr/include/wx-3.1-unofficial/wx/textctrl.h"
   
# 785 "/usr/include/wx-3.1-unofficial/wx/textctrl.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 785 "/usr/include/wx-3.1-unofficial/wx/textctrl.h"
    virtual wxClassInfo *GetClassInfo() const;
# 785 "/usr/include/wx-3.1-unofficial/wx/textctrl.h"
#pragma GCC diagnostic pop
# 785 "/usr/include/wx-3.1-unofficial/wx/textctrl.h"
    static wxClassInfo ms_classInfo;
};
# 801 "/usr/include/wx-3.1-unofficial/wx/textctrl.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/gtk/textctrl.h" 1
# 13 "/usr/include/wx-3.1-unofficial/wx/gtk/textctrl.h"
typedef struct _GtkTextMark GtkTextMark;





class __attribute__ ((visibility("default"))) wxTextCtrl: public wxTextCtrlBase
{
public:
    wxTextCtrl() { Init(); }
    wxTextCtrl(wxWindow *parent,
               wxWindowID id,
               const wxString &value = wxEmptyString,
               const wxPoint &pos = wxDefaultPosition,
               const wxSize &size = wxDefaultSize,
               long style = 0,
               const wxValidator& validator = wxDefaultValidator,
               const wxString &name = wxString::FromAscii(wxTextCtrlNameStr));

    virtual ~wxTextCtrl();

    bool Create(wxWindow *parent,
                wxWindowID id,
                const wxString &value = wxEmptyString,
                const wxPoint &pos = wxDefaultPosition,
                const wxSize &size = wxDefaultSize,
                long style = 0,
                const wxValidator& validator = wxDefaultValidator,
                const wxString &name = wxString::FromAscii(wxTextCtrlNameStr));




    virtual void WriteText(const wxString& text) override;
    virtual wxString GetValue() const override;
    virtual bool IsEmpty() const;

    virtual int GetLineLength(long lineNo) const override;
    virtual wxString GetLineText(long lineNo) const override;
    virtual int GetNumberOfLines() const override;

    virtual bool IsModified() const override;
    virtual bool IsEditable() const override;

    virtual void GetSelection(long* from, long* to) const override;

    virtual void Remove(long from, long to) override;

    virtual void MarkDirty() override;
    virtual void DiscardEdits() override;

    virtual bool SetStyle(long start, long end, const wxTextAttr& style) override;
    virtual bool GetStyle(long position, wxTextAttr& style) override;




    virtual long XYToPosition(long x, long y) const override;
    virtual bool PositionToXY(long pos, long *x, long *y) const override;

    virtual void ShowPosition(long pos) override;

    virtual wxTextCtrlHitTestResult HitTest(const wxPoint& pt, long *pos) const override;
    virtual wxTextCtrlHitTestResult HitTest(const wxPoint& pt,
                                            wxTextCoord *col,
                                            wxTextCoord *row) const override
    {
        return wxTextCtrlBase::HitTest(pt, col, row);
    }


    virtual void Copy() override;
    virtual void Cut() override;
    virtual void Paste() override;


    virtual void SetInsertionPoint(long pos) override;
    virtual long GetInsertionPoint() const override;
    virtual wxTextPos GetLastPosition() const override;

    virtual void SetSelection(long from, long to) override;
    virtual void SetEditable(bool editable) override;


    virtual void SetWindowStyleFlag( long style ) override;


    void OnDropFiles( wxDropFilesEvent &event );
    void OnChar( wxKeyEvent &event );

    void OnCut(wxCommandEvent& event);
    void OnCopy(wxCommandEvent& event);
    void OnPaste(wxCommandEvent& event);
    void OnUndo(wxCommandEvent& event);
    void OnRedo(wxCommandEvent& event);

    void OnUpdateCut(wxUpdateUIEvent& event);
    void OnUpdateCopy(wxUpdateUIEvent& event);
    void OnUpdatePaste(wxUpdateUIEvent& event);
    void OnUpdateUndo(wxUpdateUIEvent& event);
    void OnUpdateRedo(wxUpdateUIEvent& event);

    bool SetFont(const wxFont& font) override;
    bool SetForegroundColour(const wxColour& colour) override;
    bool SetBackgroundColour(const wxColour& colour) override;

    GtkWidget* GetConnectWidget() override;

    void SetUpdateFont(bool ) { }




    void IgnoreNextTextUpdate(int n = 1) { m_countUpdatesToIgnore = n; }


    bool IgnoreTextUpdate();



    void DontMarkDirtyOnNextChange() { m_dontMarkDirty = true; }


    bool MarkDirtyOnChange();


    virtual bool GTKProcessEvent(wxEvent& event) const override;


    static wxVisualAttributes
    GetClassDefaultAttributes(wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL);

    void GTKOnTextChanged() override;
    void GTKAfterLayout();

protected:

    virtual wxSize DoGetBestSize() const override;
    virtual void DoApplyWidgetStyle(GtkRcStyle *style) override;
    virtual GdkWindow *GTKGetWindow(wxArrayGdkWindows& windows) const override;

    virtual wxSize DoGetSizeFromTextSize(int xlen, int ylen = -1) const override;

    virtual void DoFreeze() override;
    virtual void DoThaw() override;

    virtual void DoEnable(bool enable) override;



    virtual bool UseGTKStyleBase() const override { return true; }

    virtual wxString DoGetValue() const override;



    virtual int GTKIMFilterKeypress(GdkEventKey* event) const override;

    virtual wxPoint DoPositionToCoords(long pos) const override;




    void GTKSetEditable();
    void GTKSetVisibility();
    void GTKSetActivatesDefault();
    void GTKSetWrapMode();
    void GTKSetJustification();

private:
    void Init();


    virtual GtkEditable *GetEditable() const override;
    virtual GtkEntry *GetEntry() const override;


    void ChangeFontGlobally();





    wxFontEncoding GetTextEncoding() const;




    void *GetTextObject() const override
    {
        return IsMultiLine() ? static_cast<void *>(m_buffer)
                             : static_cast<void *>(m_text);
    }



    GtkWidget *m_text;

    bool m_modified;
    bool m_dontMarkDirty;

    int m_countUpdatesToIgnore;



    GtkTextBuffer *m_buffer;

    GtkTextMark* m_showPositionDefer;
    GSList* m_anonymousMarkList;
    unsigned m_afterLayoutId;


    void OnUrlMouseEvent(wxMouseEvent&);

    private: static const wxEventTableEntry sm_eventTableEntries[]; protected:
# 227 "/usr/include/wx-3.1-unofficial/wx/gtk/textctrl.h"
#pragma GCC diagnostic push
# 227 "/usr/include/wx-3.1-unofficial/wx/gtk/textctrl.h"
   
# 227 "/usr/include/wx-3.1-unofficial/wx/gtk/textctrl.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 227 "/usr/include/wx-3.1-unofficial/wx/gtk/textctrl.h"
    const wxEventTable* GetEventTable() const; wxEventHashTable& GetEventHashTable() const;
# 227 "/usr/include/wx-3.1-unofficial/wx/gtk/textctrl.h"
#pragma GCC diagnostic pop
# 227 "/usr/include/wx-3.1-unofficial/wx/gtk/textctrl.h"
    static const wxEventTable sm_eventTable; static wxEventHashTable sm_eventHashTable;
    public:
# 228 "/usr/include/wx-3.1-unofficial/wx/gtk/textctrl.h"
#pragma GCC diagnostic push
# 228 "/usr/include/wx-3.1-unofficial/wx/gtk/textctrl.h"
   
# 228 "/usr/include/wx-3.1-unofficial/wx/gtk/textctrl.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 228 "/usr/include/wx-3.1-unofficial/wx/gtk/textctrl.h"
    virtual wxClassInfo *GetClassInfo() const;
# 228 "/usr/include/wx-3.1-unofficial/wx/gtk/textctrl.h"
#pragma GCC diagnostic pop
# 228 "/usr/include/wx-3.1-unofficial/wx/gtk/textctrl.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 802 "/usr/include/wx-3.1-unofficial/wx/textctrl.h" 2
# 814 "/usr/include/wx-3.1-unofficial/wx/textctrl.h"
class wxTextUrlEvent;

extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxCommandEvent > wxEVT_TEXT;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxCommandEvent > wxEVT_TEXT_ENTER;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxTextUrlEvent > wxEVT_TEXT_URL;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxCommandEvent > wxEVT_TEXT_MAXLEN;

class __attribute__ ((visibility("default"))) wxTextUrlEvent : public wxCommandEvent
{
public:
    wxTextUrlEvent(int winid, const wxMouseEvent& evtMouse,
                   long start, long end)
        : wxCommandEvent(wxEVT_TEXT_URL, winid),
          m_evtMouse(evtMouse), m_start(start), m_end(end)
        { }
    wxTextUrlEvent(const wxTextUrlEvent& event)
        : wxCommandEvent(event),
          m_evtMouse(event.m_evtMouse),
          m_start(event.m_start),
          m_end(event.m_end) { }


    const wxMouseEvent& GetMouseEvent() const { return m_evtMouse; }


    long GetURLStart() const { return m_start; }


    long GetURLEnd() const { return m_end; }

    virtual wxEvent *Clone() const override { return new wxTextUrlEvent(*this); }

protected:

    wxMouseEvent m_evtMouse;


    long m_start,
         m_end;

private:
    private: wxTextUrlEvent& operator=(const wxTextUrlEvent&) = delete; public:
# 855 "/usr/include/wx-3.1-unofficial/wx/textctrl.h"
#pragma GCC diagnostic push
# 855 "/usr/include/wx-3.1-unofficial/wx/textctrl.h"
   
# 855 "/usr/include/wx-3.1-unofficial/wx/textctrl.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 855 "/usr/include/wx-3.1-unofficial/wx/textctrl.h"
    virtual wxClassInfo *GetClassInfo() const;
# 855 "/usr/include/wx-3.1-unofficial/wx/textctrl.h"
#pragma GCC diagnostic pop
# 855 "/usr/include/wx-3.1-unofficial/wx/textctrl.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();

public:

    wxTextUrlEvent() : m_evtMouse(), m_start(0), m_end(0) { }
};

typedef void (wxEvtHandler::*wxTextUrlEventFunction)(wxTextUrlEvent&);
# 886 "/usr/include/wx-3.1-unofficial/wx/textctrl.h"
class __attribute__ ((visibility("default"))) wxStreamToTextRedirector
{
private:
    void Init(wxTextCtrl *text)
    {
        m_sbufOld = m_ostr.rdbuf();
        m_ostr.rdbuf(text);
    }

public:
    wxStreamToTextRedirector(wxTextCtrl *text)
        : m_ostr(std:: cout)
    {
        Init(text);
    }

    wxStreamToTextRedirector(wxTextCtrl *text, std:: ostream *ostr)
        : m_ostr(*ostr)
    {
        Init(text);
    }

    ~wxStreamToTextRedirector()
    {
        m_ostr.rdbuf(m_sbufOld);
    }

private:

    std:: ostream& m_ostr;


    std:: streambuf *m_sbufOld;
};
# 82 "/usr/include/wx-3.1-unofficial/wx/wx.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/slider.h" 1
# 18 "/usr/include/wx-3.1-unofficial/wx/slider.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 19 "/usr/include/wx-3.1-unofficial/wx/slider.h" 2
# 44 "/usr/include/wx-3.1-unofficial/wx/slider.h"
extern __attribute__ ((visibility("default"))) const char wxSliderNameStr[];





class __attribute__ ((visibility("default"))) wxSliderBase : public wxControl
{
public:
# 64 "/usr/include/wx-3.1-unofficial/wx/slider.h"
    wxSliderBase() { }


    virtual int GetValue() const = 0;
    virtual void SetValue(int value) = 0;


    virtual void SetRange(int minValue, int maxValue) = 0;
    virtual int GetMin() const = 0;
    virtual int GetMax() const = 0;
    void SetMin( int minValue ) { SetRange( minValue , GetMax() ) ; }
    void SetMax( int maxValue ) { SetRange( GetMin() , maxValue ) ; }




    virtual void SetLineSize(int lineSize) = 0;
    virtual void SetPageSize(int pageSize) = 0;
    virtual int GetLineSize() const = 0;
    virtual int GetPageSize() const = 0;


    virtual void SetThumbLength(int lenPixels) = 0;
    virtual int GetThumbLength() const = 0;




    void SetTickFreq(int freq) { DoSetTickFreq(freq); }
    virtual int GetTickFreq() const { return 0; }
    virtual void ClearTicks() { }
    virtual void SetTick(int ) { }

    virtual void ClearSel() { }
    virtual int GetSelEnd() const { return GetMin(); }
    virtual int GetSelStart() const { return GetMax(); }
    virtual void SetSelection(int , int ) { }





protected:

    virtual void DoSetTickFreq(int ) { }


    virtual wxBorder GetDefaultBorder() const override { return wxBORDER_NONE; }


    virtual int ValueInvertOrNot(int value) const
    {
        if (HasFlag(0x1000))
            return (GetMax() + GetMin()) - value;
        else
            return value;
    }

private:
    private: wxSliderBase(const wxSliderBase&) = delete; wxSliderBase& operator=(const wxSliderBase&) = delete;
};
# 137 "/usr/include/wx-3.1-unofficial/wx/slider.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/gtk/slider.h" 1
# 16 "/usr/include/wx-3.1-unofficial/wx/gtk/slider.h"
class __attribute__ ((visibility("default"))) wxSlider : public wxSliderBase
{
public:
    wxSlider();
    wxSlider(wxWindow *parent,
             wxWindowID id,
             int value, int minValue, int maxValue,
             const wxPoint& pos = wxDefaultPosition,
             const wxSize& size = wxDefaultSize,
             long style = wxHORIZONTAL,
             const wxValidator& validator = wxDefaultValidator,
             const wxString& name = wxString::FromAscii(wxSliderNameStr))
    {
        Create( parent, id, value, minValue, maxValue,
                pos, size, style, validator, name );
    }
    ~wxSlider();

    bool Create(wxWindow *parent,
                wxWindowID id,
                int value, int minValue, int maxValue,
                const wxPoint& pos = wxDefaultPosition,
                const wxSize& size = wxDefaultSize,
                long style = wxHORIZONTAL,
                const wxValidator& validator = wxDefaultValidator,
                const wxString& name = wxString::FromAscii(wxSliderNameStr));


    virtual int GetValue() const override;
    virtual void SetValue(int value) override;

    virtual void SetRange(int minValue, int maxValue) override;
    virtual int GetMin() const override;
    virtual int GetMax() const override;

    virtual void SetLineSize(int lineSize) override;
    virtual void SetPageSize(int pageSize) override;
    virtual int GetLineSize() const override;
    virtual int GetPageSize() const override;

    virtual void SetThumbLength(int lenPixels) override;
    virtual int GetThumbLength() const override;

    virtual void ClearTicks() override;
    virtual void SetTick(int tickPos) override;
    int GetTickFreq() const override;

    static wxVisualAttributes
    GetClassDefaultAttributes(wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL);


    void GTKDisableEvents();
    void GTKEnableEvents();
    bool GTKEventsDisabled() const;

    double m_pos;
    int m_scrollEventType;
    bool m_needThumbRelease;
    GtkWidget *m_scale;

protected:
    virtual wxSize DoGetBestSize() const override;

    GtkWidget *m_minLabel,*m_maxLabel;
    bool m_blockScrollEvent;


    int m_tickFreq;

    virtual GdkWindow *GTKGetWindow(wxArrayGdkWindows& windows) const override;


    void GTKSetValue(int value);


    virtual void DoSetTickFreq(int freq) override;

private:
    void Init();

    public:
# 96 "/usr/include/wx-3.1-unofficial/wx/gtk/slider.h"
#pragma GCC diagnostic push
# 96 "/usr/include/wx-3.1-unofficial/wx/gtk/slider.h"
   
# 96 "/usr/include/wx-3.1-unofficial/wx/gtk/slider.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 96 "/usr/include/wx-3.1-unofficial/wx/gtk/slider.h"
    virtual wxClassInfo *GetClassInfo() const;
# 96 "/usr/include/wx-3.1-unofficial/wx/gtk/slider.h"
#pragma GCC diagnostic pop
# 96 "/usr/include/wx-3.1-unofficial/wx/gtk/slider.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 138 "/usr/include/wx-3.1-unofficial/wx/slider.h" 2
# 83 "/usr/include/wx-3.1-unofficial/wx/wx.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/gauge.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/gauge.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/gauge.h" 2
# 43 "/usr/include/wx-3.1-unofficial/wx/gauge.h"
extern __attribute__ ((visibility("default"))) const char wxGaugeNameStr[];

class wxAppProgressIndicator;





class __attribute__ ((visibility("default"))) wxGaugeBase : public wxControl
{
public:
    wxGaugeBase() : m_rangeMax(0), m_gaugePos(0),



        m_appProgressIndicator(
# 58 "/usr/include/wx-3.1-unofficial/wx/gauge.h" 3 4
                              __null
# 58 "/usr/include/wx-3.1-unofficial/wx/gauge.h"
                                  ) { }

    virtual ~wxGaugeBase();

    bool Create(wxWindow *parent,
                wxWindowID id,
                int range,
                const wxPoint& pos = wxDefaultPosition,
                const wxSize& size = wxDefaultSize,
                long style = wxHORIZONTAL,
                const wxValidator& validator = wxDefaultValidator,
                const wxString& name = wxString::FromAscii(wxGaugeNameStr));




    virtual void SetRange(int range);
    virtual int GetRange() const;

    virtual void SetValue(int pos);
    virtual int GetValue() const;


    virtual void Pulse();


    bool IsVertical() const { return HasFlag(wxVERTICAL); }


    virtual bool AcceptsFocus() const override { return false; }


    __attribute__((deprecated("Remove calls to this method, it doesn't do anything")))
    void SetShadowWidth(int ) { }

    __attribute__((deprecated("Remove calls to this method, it always returns 0")))
    int GetShadowWidth() const { return 0; }

    __attribute__((deprecated("Remove calls to this method, it doesn't do anything")))
    void SetBezelFace(int ) { }

    __attribute__((deprecated("Remove calls to this method, it always returns 0")))
    int GetBezelFace() const { return 0; }

protected:
    virtual wxBorder GetDefaultBorder() const override { return wxBORDER_NONE; }





    void InitProgressIndicatorIfNeeded();



    int m_rangeMax;


    int m_gaugePos;





    wxAppProgressIndicator *m_appProgressIndicator;

    private: wxGaugeBase(const wxGaugeBase&) = delete; wxGaugeBase& operator=(const wxGaugeBase&) = delete;
};
# 134 "/usr/include/wx-3.1-unofficial/wx/gauge.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/gtk/gauge.h" 1
# 16 "/usr/include/wx-3.1-unofficial/wx/gtk/gauge.h"
class __attribute__ ((visibility("default"))) wxGauge: public wxGaugeBase
{
public:
    wxGauge() { Init(); }

    wxGauge( wxWindow *parent,
             wxWindowID id,
             int range,
             const wxPoint& pos = wxDefaultPosition,
             const wxSize& size = wxDefaultSize,
             long style = wxHORIZONTAL,
             const wxValidator& validator = wxDefaultValidator,
             const wxString& name = wxString::FromAscii(wxGaugeNameStr) )
    {
        Init();

        Create(parent, id, range, pos, size, style, validator, name);
    }

    bool Create( wxWindow *parent,
                 wxWindowID id, int range,
                 const wxPoint& pos = wxDefaultPosition,
                 const wxSize& size = wxDefaultSize,
                 long style = wxHORIZONTAL,
                 const wxValidator& validator = wxDefaultValidator,
                 const wxString& name = wxString::FromAscii(wxGaugeNameStr) );


    void SetRange(int range) override;
    int GetRange() const override;

    void SetValue(int pos) override;
    int GetValue() const override;

    virtual void Pulse() override;

    static wxVisualAttributes
    GetClassDefaultAttributes(wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL);

    virtual wxVisualAttributes GetDefaultAttributes() const override;





    int m_rangeMax,
        m_gaugePos;

protected:

    void DoSetGauge();

private:
    void Init() { m_rangeMax = m_gaugePos = 0; }

    public:
# 71 "/usr/include/wx-3.1-unofficial/wx/gtk/gauge.h"
#pragma GCC diagnostic push
# 71 "/usr/include/wx-3.1-unofficial/wx/gtk/gauge.h"
   
# 71 "/usr/include/wx-3.1-unofficial/wx/gtk/gauge.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 71 "/usr/include/wx-3.1-unofficial/wx/gtk/gauge.h"
    virtual wxClassInfo *GetClassInfo() const;
# 71 "/usr/include/wx-3.1-unofficial/wx/gtk/gauge.h"
#pragma GCC diagnostic pop
# 71 "/usr/include/wx-3.1-unofficial/wx/gtk/gauge.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 135 "/usr/include/wx-3.1-unofficial/wx/gauge.h" 2
# 84 "/usr/include/wx-3.1-unofficial/wx/wx.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/scrolwin.h" 1
# 21 "/usr/include/wx-3.1-unofficial/wx/scrolwin.h"
class wxScrollHelperEvtHandler;
class wxTimer;





enum wxScrollbarVisibility
{
    wxSHOW_SB_NEVER = -1,
    wxSHOW_SB_DEFAULT,
    wxSHOW_SB_ALWAYS
};
# 69 "/usr/include/wx-3.1-unofficial/wx/scrolwin.h"
class __attribute__ ((visibility("default"))) wxAnyScrollHelperBase
{
public:
    explicit wxAnyScrollHelperBase(wxWindow* win);
    virtual ~wxAnyScrollHelperBase() {}
# 84 "/usr/include/wx-3.1-unofficial/wx/scrolwin.h"
    void DisableKeyboardScrolling() { m_kbdScrollingEnabled = false; }


    virtual void OnDraw(wxDC& ) { }


    virtual void DoPrepareDC(wxDC& dc) = 0;


    wxWindow *GetTargetWindow() const { return m_targetWindow; }



    void HandleOnChar(wxKeyEvent& event);
    void HandleOnPaint(wxPaintEvent& event);

protected:


    wxWindow *m_win,
             *m_targetWindow;


    bool m_kbdScrollingEnabled;
};


class __attribute__ ((visibility("default"))) wxScrollHelperBase : public wxAnyScrollHelperBase
{
public:

    wxScrollHelperBase(wxWindow *winToScroll);
    virtual ~wxScrollHelperBase();


    virtual void SetScrollbars(int pixelsPerUnitX, int pixelsPerUnitY,
                               int noUnitsX, int noUnitsY,
                               int xPos = 0, int yPos = 0,
                               bool noRefresh = false );






    virtual void Scroll(int x, int y) { DoScroll(x, y); }
    virtual void Scroll(const wxPoint& pt) { DoScroll(pt.x, pt.y); }


    int GetScrollPageSize(int orient) const;
    void SetScrollPageSize(int orient, int pageSize);



    int GetScrollLines( int orient ) const;


    void SetScrollRate( int xstep, int ystep );


    void GetScrollPixelsPerUnit(int *pixelsPerUnitX, int *pixelsPerUnitY) const;






    void ShowScrollbars(wxScrollbarVisibility horz, wxScrollbarVisibility vert)
    {
        DoShowScrollbars(horz, vert);
    }


    virtual bool IsScrollbarShown(int orient) const = 0;
# 168 "/usr/include/wx-3.1-unofficial/wx/scrolwin.h"
    virtual void EnableScrolling(bool x_scrolling, bool y_scrolling);


    void GetViewStart(int *x, int *y) const { DoGetViewStart(x, y); }

    wxPoint GetViewStart() const
    {
        wxPoint pt;
        DoGetViewStart(&pt.x, &pt.y);
        return pt;
    }


    void SetScale(double xs, double ys) { m_scaleX = xs; m_scaleY = ys; }
    double GetScaleX() const { return m_scaleX; }
    double GetScaleY() const { return m_scaleY; }


    void CalcScrolledPosition(int x, int y, int *xx, int *yy) const
        { DoCalcScrolledPosition(x, y, xx, yy); }
    wxPoint CalcScrolledPosition(const wxPoint& pt) const
    {
        wxPoint p2;
        DoCalcScrolledPosition(pt.x, pt.y, &p2.x, &p2.y);
        return p2;
    }

    void CalcUnscrolledPosition(int x, int y, int *xx, int *yy) const
        { DoCalcUnscrolledPosition(x, y, xx, yy); }
    wxPoint CalcUnscrolledPosition(const wxPoint& pt) const
    {
        wxPoint p2;
        DoCalcUnscrolledPosition(pt.x, pt.y, &p2.x, &p2.y);
        return p2;
    }

    void DoCalcScrolledPosition(int x, int y, int *xx, int *yy) const;
    void DoCalcUnscrolledPosition(int x, int y, int *xx, int *yy) const;


    virtual void AdjustScrollbars() = 0;


    int CalcScrollInc(wxScrollWinEvent& event);





    void SetTargetWindow(wxWindow *target);

    void SetTargetRect(const wxRect& rect) { m_rectToScroll = rect; }
    wxRect GetTargetRect() const { return m_rectToScroll; }

    virtual void DoPrepareDC(wxDC& dc) override;


    bool IsAutoScrolling() const { return m_timerAutoScroll != 
# 225 "/usr/include/wx-3.1-unofficial/wx/scrolwin.h" 3 4
                                                              __null
# 225 "/usr/include/wx-3.1-unofficial/wx/scrolwin.h"
                                                                  ; }


    void StopAutoScrolling();







    virtual bool SendAutoScrollEvents(wxScrollWinEvent& event) const;


    void HandleOnScroll(wxScrollWinEvent& event);
    void HandleOnSize(wxSizeEvent& event);
    void HandleOnMouseEnter(wxMouseEvent& event);
    void HandleOnMouseLeave(wxMouseEvent& event);

    void HandleOnMouseWheel(wxMouseEvent& event);

    void HandleOnChildFocus(wxChildFocusEvent& event);







protected:

    const wxRect *GetScrollRect() const
    {
        return m_rectToScroll.width != 0 ? &m_rectToScroll : 
# 258 "/usr/include/wx-3.1-unofficial/wx/scrolwin.h" 3 4
                                                            __null
# 258 "/usr/include/wx-3.1-unofficial/wx/scrolwin.h"
                                                                ;
    }


    wxSize GetTargetSize() const
    {
        return m_rectToScroll.width != 0 ? m_rectToScroll.GetSize()
                                         : m_targetWindow->GetClientSize();
    }

    void GetTargetSize(int *w, int *h) const
    {
        wxSize size = GetTargetSize();
        if ( w )
            *w = size.x;
        if ( h )
            *h = size.y;
    }


    virtual void DoGetViewStart(int *x, int *y) const;
    virtual void DoScroll(int x, int y) = 0;
    virtual void DoShowScrollbars(wxScrollbarVisibility horz,
                                  wxScrollbarVisibility vert) = 0;



    bool ScrollLayout();
    void ScrollDoSetVirtualSize(int x, int y);
    wxSize ScrollGetBestVirtualSize() const;



    void DoSetTargetWindow(wxWindow *target);


    void DeleteEvtHandler();






    virtual wxSize GetSizeAvailableForScrollTarget(const wxSize& size)
    {






        return size;
    }




    virtual bool ShouldScrollToChildOnFocus(wxWindow* child)
    {




        wxUnusedVar(child);


        return true;
    }


    double m_scaleX;
    double m_scaleY;

    wxRect m_rectToScroll;

    wxTimer *m_timerAutoScroll;





    int m_xScrollPixelsPerLine;
    int m_yScrollPixelsPerLine;
    int m_xScrollPosition;
    int m_yScrollPosition;
    int m_xScrollLines;
    int m_yScrollLines;
    int m_xScrollLinesPerPage;
    int m_yScrollLinesPerPage;

    bool m_xScrollingEnabled;
    bool m_yScrollingEnabled;


    int m_wheelRotation;


    wxScrollHelperEvtHandler *m_handler;

    private: wxScrollHelperBase(const wxScrollHelperBase&) = delete; wxScrollHelperBase& operator=(const wxScrollHelperBase&) = delete;
};
# 375 "/usr/include/wx-3.1-unofficial/wx/scrolwin.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/gtk/scrolwin.h" 1
# 18 "/usr/include/wx-3.1-unofficial/wx/gtk/scrolwin.h"
class __attribute__ ((visibility("default"))) wxScrollHelper : public wxScrollHelperBase
{
    typedef wxScrollHelperBase base_type;
public:

    wxScrollHelper(wxWindow *win) : wxScrollHelperBase(win) { }


    virtual void SetScrollbars(int pixelsPerUnitX, int pixelsPerUnitY,
                               int noUnitsX, int noUnitsY,
                               int xPos = 0, int yPos = 0,
                               bool noRefresh = false) override;
    virtual void AdjustScrollbars() override;

    virtual bool IsScrollbarShown(int orient) const override;

protected:
    virtual void DoScroll(int x, int y) override;
    virtual void DoShowScrollbars(wxScrollbarVisibility horz,
                                  wxScrollbarVisibility vert) override;

private:

    void DoAdjustScrollbar(GtkRange* range,
                           int pixelsPerLine,
                           int winSize,
                           int virtSize,
                           int *pos,
                           int *lines,
                           int *linesPerPage);

    void DoAdjustHScrollbar(int winSize, int virtSize)
    {
        DoAdjustScrollbar
        (
            m_win->m_scrollBar[wxWindow::ScrollDir_Horz],
            m_xScrollPixelsPerLine, winSize, virtSize,
            &m_xScrollPosition, &m_xScrollLines, &m_xScrollLinesPerPage
        );
    }

    void DoAdjustVScrollbar(int winSize, int virtSize)
    {
        DoAdjustScrollbar
        (
            m_win->m_scrollBar[wxWindow::ScrollDir_Vert],
            m_yScrollPixelsPerLine, winSize, virtSize,
            &m_yScrollPosition, &m_yScrollLines, &m_yScrollLinesPerPage
        );
    }


    void DoScrollOneDir(int orient,
                        int pos,
                        int pixelsPerLine,
                        int *posOld);

    private: wxScrollHelper(const wxScrollHelper&) = delete; wxScrollHelper& operator=(const wxScrollHelper&) = delete;
};
# 376 "/usr/include/wx-3.1-unofficial/wx/scrolwin.h" 2
# 388 "/usr/include/wx-3.1-unofficial/wx/scrolwin.h"
struct __attribute__ ((visibility("default"))) wxScrolledT_Helper
{
    static wxSize FilterBestSize(const wxWindow *win,
                                 const wxScrollHelper *helper,
                                 const wxSize& origBest);



};




template<class T>
bool wxCreateScrolled(T* self,
                      wxWindow *parent, wxWindowID winid,
                      const wxPoint& pos, const wxSize& size,
                      long style, const wxString& name)
{
    return self->Create(parent, winid, pos, size, style, name);
}





inline bool wxCreateScrolled(wxControl* self,
                     wxWindow *parent, wxWindowID winid,
                     const wxPoint& pos, const wxSize& size,
                     long style, const wxString& name)
{
     return self->Create(parent, winid, pos, size, style, wxDefaultValidator, name);
}


template<class T>
class wxScrolled : public T,
                   public wxScrollHelper,
                   private wxScrolledT_Helper
{
public:
    wxScrolled() : wxScrollHelper(this) { }
    wxScrolled(wxWindow *parent,
               wxWindowID winid = wxID_ANY,
               const wxPoint& pos = wxDefaultPosition,
               const wxSize& size = wxDefaultSize,
               long style = (0x40000000 | ((int)0x80000000)),
               const wxString& name = wxString::FromAscii(wxPanelNameStr))
        : wxScrollHelper(this)
    {
        Create(parent, winid, pos, size, style, name);
    }

    bool Create(wxWindow *parent,
                wxWindowID winid,
                const wxPoint& pos = wxDefaultPosition,
                const wxSize& size = wxDefaultSize,
                long style = (0x40000000 | ((int)0x80000000)),
                const wxString& name = wxString::FromAscii(wxPanelNameStr))
    {
        m_targetWindow = this;
# 457 "/usr/include/wx-3.1-unofficial/wx/scrolwin.h"
        if ( !(style & (0x40000000 | ((int)0x80000000))) )
            style |= 0x40000000 | ((int)0x80000000);

        return wxCreateScrolled((T*)this, parent, winid, pos, size, style, name);
    }
# 478 "/usr/include/wx-3.1-unofficial/wx/scrolwin.h"
    public: virtual void PrepareDC(wxDC& dc) override { DoPrepareDC(dc); } virtual bool Layout() override { return ScrollLayout(); } virtual bool CanScroll(int orient) const override { return IsScrollbarShown(orient); } virtual void DoSetVirtualSize(int x, int y) override { ScrollDoSetVirtualSize(x, y); } virtual wxSize GetBestVirtualSize() const override { return ScrollGetBestVirtualSize(); }

protected:
    virtual wxSize DoGetBestSize() const override
    {
        return FilterBestSize(this, this, T::DoGetBestSize());
    }

private:
    private: wxScrolled(const wxScrolled&) = delete; wxScrolled& operator=(const wxScrolled&) = delete;
};





class __attribute__ ((visibility("default"))) wxScrolledWindow : public wxScrolled<wxPanel>
{
public:
    wxScrolledWindow() : wxScrolled<wxPanel>() {}
    wxScrolledWindow(wxWindow *parent,
                     wxWindowID winid = wxID_ANY,
                     const wxPoint& pos = wxDefaultPosition,
                     const wxSize& size = wxDefaultSize,
                     long style = (0x40000000 | ((int)0x80000000)),
                     const wxString& name = wxString::FromAscii(wxPanelNameStr))
        : wxScrolled<wxPanel>(parent, winid, pos, size, style, name) {}

    private: wxScrolledWindow(const wxScrolledWindow&) = delete; wxScrolledWindow& operator=(const wxScrolledWindow&) = delete; public:
# 506 "/usr/include/wx-3.1-unofficial/wx/scrolwin.h"
#pragma GCC diagnostic push
# 506 "/usr/include/wx-3.1-unofficial/wx/scrolwin.h"
   
# 506 "/usr/include/wx-3.1-unofficial/wx/scrolwin.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 506 "/usr/include/wx-3.1-unofficial/wx/scrolwin.h"
    virtual wxClassInfo *GetClassInfo() const;
# 506 "/usr/include/wx-3.1-unofficial/wx/scrolwin.h"
#pragma GCC diagnostic pop
# 506 "/usr/include/wx-3.1-unofficial/wx/scrolwin.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};

typedef wxScrolled<wxWindow> wxScrolledCanvas;
# 85 "/usr/include/wx-3.1-unofficial/wx/wx.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/dirdlg.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/dirdlg.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/dirdlg.h" 2
# 24 "/usr/include/wx-3.1-unofficial/wx/dirdlg.h"
extern __attribute__ ((visibility("default"))) const char wxDirDialogNameStr[];
extern __attribute__ ((visibility("default"))) const char wxDirDialogDefaultFolderStr[];
extern __attribute__ ((visibility("default"))) const char wxDirSelectorPromptStr[];
# 54 "/usr/include/wx-3.1-unofficial/wx/dirdlg.h"
class __attribute__ ((visibility("default"))) wxDirDialogBase : public wxDialog
{
public:
    wxDirDialogBase() {}
    wxDirDialogBase(wxWindow *parent,
                    const wxString& title = wxString::FromAscii(wxDirSelectorPromptStr),
                    const wxString& defaultPath = wxEmptyString,
                    long style = ((0x20000000 | 0x0800 | 0x1000)|0x0040),
                    const wxPoint& pos = wxDefaultPosition,
                    const wxSize& sz = wxDefaultSize,
                    const wxString& name = wxString::FromAscii(wxDirDialogNameStr))
    {
        Create(parent, title, defaultPath, style, pos, sz, name);
    }

    virtual ~wxDirDialogBase() {}


    bool Create(wxWindow *parent,
                const wxString& title = wxString::FromAscii(wxDirSelectorPromptStr),
                const wxString& defaultPath = wxEmptyString,
                long style = ((0x20000000 | 0x0800 | 0x1000)|0x0040),
                const wxPoint& pos = wxDefaultPosition,
                const wxSize& sz = wxDefaultSize,
                const wxString& name = wxString::FromAscii(wxDirDialogNameStr))
    {
        if (!wxDialog::Create(parent, wxID_ANY, title, pos, sz, style, name))
            return false;
        m_path = defaultPath;
        m_message = title;
        return true;
    }

    virtual void SetMessage(const wxString& message) { m_message = message; }
    virtual void SetPath(const wxString& path) { m_path = path; }

    virtual wxString GetMessage() const { return m_message; }
    virtual wxString GetPath() const
    {
        if ( !HasFlag(0x0400) ) {} else { do { if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/dirdlg.h", 93, __FUNCTION__, "\"!HasFlag(0x0400)\"", "When using wxDD_MULTIPLE, must call GetPaths() instead"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); return wxString(); } struct wxDummyCheckStruct93
                                                                               ;
        return m_path;
    }

    virtual void GetPaths(wxArrayString& paths) const
    {
        paths = m_paths;
    }

protected:
    wxString m_message;
    wxString m_path;
    wxArrayString m_paths;
};
# 120 "/usr/include/wx-3.1-unofficial/wx/dirdlg.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/gtk/dirdlg.h" 1
# 16 "/usr/include/wx-3.1-unofficial/wx/gtk/dirdlg.h"
class __attribute__ ((visibility("default"))) wxDirDialog : public wxDirDialogBase
{
public:
    wxDirDialog() { }

    wxDirDialog(wxWindow *parent,
                const wxString& message = wxString::FromAscii(wxDirSelectorPromptStr),
                const wxString& defaultPath = wxEmptyString,
                long style = ((0x20000000 | 0x0800 | 0x1000)|0x0040),
                const wxPoint& pos = wxDefaultPosition,
                const wxSize& size = wxDefaultSize,
                const wxString& name = wxString::FromAscii(wxDirDialogNameStr));
    bool Create(wxWindow *parent,
                const wxString& message = wxString::FromAscii(wxDirSelectorPromptStr),
                const wxString& defaultPath = wxEmptyString,
                long style = ((0x20000000 | 0x0800 | 0x1000)|0x0040),
                const wxPoint& pos = wxDefaultPosition,
                const wxSize& size = wxDefaultSize,
                const wxString& name = wxString::FromAscii(wxDirDialogNameStr));
    virtual ~wxDirDialog() { }


public:

    void SetPath(const wxString& path) override;




    void GTKOnAccept();
    void GTKOnCancel();

protected:


    virtual void DoSetSize(int x, int y,
                           int width, int height,
                           int sizeFlags = (0x0001|0x0002)) override;


private:
    public:
# 57 "/usr/include/wx-3.1-unofficial/wx/gtk/dirdlg.h"
#pragma GCC diagnostic push
# 57 "/usr/include/wx-3.1-unofficial/wx/gtk/dirdlg.h"
   
# 57 "/usr/include/wx-3.1-unofficial/wx/gtk/dirdlg.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 57 "/usr/include/wx-3.1-unofficial/wx/gtk/dirdlg.h"
    virtual wxClassInfo *GetClassInfo() const;
# 57 "/usr/include/wx-3.1-unofficial/wx/gtk/dirdlg.h"
#pragma GCC diagnostic pop
# 57 "/usr/include/wx-3.1-unofficial/wx/gtk/dirdlg.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 121 "/usr/include/wx-3.1-unofficial/wx/dirdlg.h" 2
# 138 "/usr/include/wx-3.1-unofficial/wx/dirdlg.h"
__attribute__ ((visibility("default"))) wxString
wxDirSelector(const wxString& message = wxString::FromAscii(wxDirSelectorPromptStr),
              const wxString& defaultPath = wxEmptyString,
              long style = ((0x20000000 | 0x0800 | 0x1000)|0x0040),
              const wxPoint& pos = wxDefaultPosition,
              wxWindow *parent = 
# 143 "/usr/include/wx-3.1-unofficial/wx/dirdlg.h" 3 4
                                __null
# 143 "/usr/include/wx-3.1-unofficial/wx/dirdlg.h"
                                    );
# 86 "/usr/include/wx-3.1-unofficial/wx/wx.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/toolbar.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/toolbar.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/toolbar.h" 2





enum
{

    wxTB_HORIZONTAL = wxHORIZONTAL,
    wxTB_TOP = wxTB_HORIZONTAL,


    wxTB_VERTICAL = wxVERTICAL,
    wxTB_LEFT = wxTB_VERTICAL,


    wxTB_FLAT = 0x0020,


    wxTB_DOCKABLE = 0x0040,


    wxTB_NOICONS = 0x0080,


    wxTB_TEXT = 0x0100,


    wxTB_NODIVIDER = 0x0200,


    wxTB_NOALIGN = 0x0400,


    wxTB_HORZ_LAYOUT = 0x0800,
    wxTB_HORZ_TEXT = wxTB_HORZ_LAYOUT | wxTB_TEXT,


    wxTB_NO_TOOLTIPS = 0x1000,


    wxTB_BOTTOM = 0x2000,


    wxTB_RIGHT = 0x4000,

    wxTB_DEFAULT_STYLE = wxTB_HORIZONTAL
};


# 1 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h" 1
# 18 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 19 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h" 2







class wxToolBarBase;
class wxToolBarToolBase;
class wxImage;





extern __attribute__ ((visibility("default"))) const char wxToolBarNameStr[];
extern __attribute__ ((visibility("default"))) const wxSize wxDefaultSize;
extern __attribute__ ((visibility("default"))) const wxPoint wxDefaultPosition;

enum wxToolBarToolStyle
{
    wxTOOL_STYLE_BUTTON = 1,
    wxTOOL_STYLE_SEPARATOR = 2,
    wxTOOL_STYLE_CONTROL
};
# 56 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h"
class __attribute__ ((visibility("default"))) wxToolBarToolBase : public wxObject
{
public:




    wxToolBarToolBase(wxToolBarBase *tbar = 
# 63 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h" 3 4
                                           __null
# 63 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h"
                                               ,
                      int toolid = wxID_SEPARATOR,
                      const wxString& label = wxEmptyString,
                      const wxBitmap& bmpNormal = wxNullBitmap,
                      const wxBitmap& bmpDisabled = wxNullBitmap,
                      wxItemKind kind = wxITEM_NORMAL,
                      wxObject *clientData = 
# 69 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h" 3 4
                                            __null
# 69 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h"
                                                ,
                      const wxString& shortHelpString = wxEmptyString,
                      const wxString& longHelpString = wxEmptyString)
        : m_label(label),
          m_shortHelpString(shortHelpString),
          m_longHelpString(longHelpString)
    {
        Init
        (
            tbar,
            toolid == wxID_SEPARATOR ? wxTOOL_STYLE_SEPARATOR
                                     : wxTOOL_STYLE_BUTTON,
            toolid == wxID_ANY ? wxWindow::NewControlId()
                               : toolid,
            kind
        );

        m_clientData = clientData;

        m_bmpNormal = bmpNormal;
        m_bmpDisabled = bmpDisabled;
    }


    wxToolBarToolBase(wxToolBarBase *tbar,
                      wxControl *control,
                      const wxString& label)
        : m_label(label)
    {
        Init(tbar, wxTOOL_STYLE_CONTROL, control->GetId(), wxITEM_MAX);

        m_control = control;
    }

    virtual ~wxToolBarToolBase();





    int GetId() const { return m_id; }

    wxControl *GetControl() const
    {
        do { if ( IsControl() ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/tbarbase.h", 113, __FUNCTION__, "IsControl()", L"this toolbar tool is not a control"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );

        return m_control;
    }

    wxToolBarBase *GetToolBar() const { return m_tbar; }


    bool IsStretchable() const { return m_stretchable; }
    bool IsButton() const { return m_toolStyle == wxTOOL_STYLE_BUTTON; }
    bool IsControl() const { return m_toolStyle == wxTOOL_STYLE_CONTROL; }
    bool IsSeparator() const { return m_toolStyle == wxTOOL_STYLE_SEPARATOR; }
    bool IsStretchableSpace() const { return IsSeparator() && IsStretchable(); }
    int GetStyle() const { return m_toolStyle; }
    wxItemKind GetKind() const
    {
        do { if ( IsButton() ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/tbarbase.h", 129, __FUNCTION__, "IsButton()", L"only makes sense for buttons"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );

        return m_kind;
    }

    void MakeStretchable()
    {
        do { if ( IsSeparator() ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/tbarbase.h", 136, __FUNCTION__, "IsSeparator()", "only separators can be stretchable"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );

        m_stretchable = true;
    }


    bool IsEnabled() const { return m_enabled; }
    bool IsToggled() const { return m_toggled; }
    bool CanBeToggled() const
        { return m_kind == wxITEM_CHECK || m_kind == wxITEM_RADIO; }


    const wxBitmap& GetNormalBitmap() const { return m_bmpNormal; }
    const wxBitmap& GetDisabledBitmap() const { return m_bmpDisabled; }

    const wxBitmap& GetBitmap() const
        { return IsEnabled() ? GetNormalBitmap() : GetDisabledBitmap(); }

    const wxString& GetLabel() const { return m_label; }

    const wxString& GetShortHelp() const { return m_shortHelpString; }
    const wxString& GetLongHelp() const { return m_longHelpString; }

    wxObject *GetClientData() const
    {
        if ( m_toolStyle == wxTOOL_STYLE_CONTROL )
        {
            return (wxObject*)m_control->GetClientData();
        }
        else
        {
            return m_clientData;
        }
    }


    virtual bool Enable(bool enable);
    virtual bool Toggle(bool toggle);
    virtual bool SetToggle(bool toggle);
    virtual bool SetShortHelp(const wxString& help);
    virtual bool SetLongHelp(const wxString& help);

    void Toggle() { Toggle(!IsToggled()); }

    void SetNormalBitmap(const wxBitmap& bmp) { m_bmpNormal = bmp; }
    void SetDisabledBitmap(const wxBitmap& bmp) { m_bmpDisabled = bmp; }

    virtual void SetLabel(const wxString& label) { m_label = label; }

    void SetClientData(wxObject *clientData)
    {
        if ( m_toolStyle == wxTOOL_STYLE_CONTROL )
        {
            m_control->SetClientData(clientData);
        }
        else
        {
            m_clientData = clientData;
        }
    }


    virtual void Detach() { m_tbar = 
# 198 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h" 3 4
                                    __null
# 198 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h"
                                        ; }
    virtual void Attach(wxToolBarBase *tbar) { m_tbar = tbar; }




    virtual void SetDropdownMenu(wxMenu *menu);
    wxMenu *GetDropdownMenu() const { return m_dropdownMenu; }


protected:

    void Init(wxToolBarBase *tbar,
              wxToolBarToolStyle style,
              int toolid,
              wxItemKind kind)
    {
        m_tbar = tbar;
        m_toolStyle = style;
        m_id = toolid;
        m_kind = kind;

        m_clientData = 
# 220 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h" 3 4
                      __null
# 220 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h"
                          ;

        m_stretchable = false;
        m_toggled = false;
        m_enabled = true;


        m_dropdownMenu = 
# 227 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h" 3 4
                        __null
# 227 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h"
                            ;


    }

    wxToolBarBase *m_tbar;


    wxToolBarToolStyle m_toolStyle;
    wxWindowIDRef m_id;
    wxItemKind m_kind;


    union
    {
        wxObject *m_clientData;
        wxControl *m_control;
    };


    bool m_stretchable;


    bool m_toggled;
    bool m_enabled;


    wxBitmap m_bmpNormal;
    wxBitmap m_bmpDisabled;


    wxString m_label;


    wxString m_shortHelpString;
    wxString m_longHelpString;


    wxMenu *m_dropdownMenu;


    private: wxToolBarToolBase(const wxToolBarToolBase&) = delete; wxToolBarToolBase& operator=(const wxToolBarToolBase&) = delete; public:
# 268 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h"
#pragma GCC diagnostic push
# 268 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h"
   
# 268 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 268 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h"
    virtual wxClassInfo *GetClassInfo() const;
# 268 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h"
#pragma GCC diagnostic pop
# 268 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};


typedef wxToolBarToolBase _WX_LIST_ITEM_TYPE_wxToolBarToolsList; typedef int (*wxSortFuncFor_wxToolBarToolsList)(const wxToolBarToolBase **, const wxToolBarToolBase **); class __attribute__ ((visibility("default"))) wxwxToolBarToolsListNode : public wxNodeBase { public: wxwxToolBarToolsListNode(wxListBase *list = 
# 272 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h" 3 4
__null
# 272 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h"
, wxwxToolBarToolsListNode *previous = 
# 272 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h" 3 4
__null
# 272 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h"
, wxwxToolBarToolsListNode *next = 
# 272 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h" 3 4
__null
# 272 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h"
, wxToolBarToolBase *data = 
# 272 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h" 3 4
__null
# 272 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h"
, const wxListKey& key = wxDefaultListKey) : wxNodeBase(list, previous, next, data, key) { } wxwxToolBarToolsListNode *GetNext() const { return (wxwxToolBarToolsListNode *)wxNodeBase::GetNext(); } wxwxToolBarToolsListNode *GetPrevious() const { return (wxwxToolBarToolsListNode *)wxNodeBase::GetPrevious(); } wxToolBarToolBase *GetData() const { return (wxToolBarToolBase *)wxNodeBase::GetData(); } void SetData(wxToolBarToolBase *data) { wxNodeBase::SetData(data); } protected: virtual void DeleteData() override; private: wxwxToolBarToolsListNode(const wxwxToolBarToolsListNode&) = delete; wxwxToolBarToolsListNode& operator=(const wxwxToolBarToolsListNode&) = delete; }; class __attribute__ ((visibility("default"))) wxToolBarToolsList : public wxListBase { public: typedef wxwxToolBarToolsListNode Node; class __attribute__ ((visibility("default"))) compatibility_iterator { public: compatibility_iterator(Node *ptr = 
# 272 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h" 3 4
__null
# 272 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h"
) : m_ptr(ptr) { } Node *operator->() const { return m_ptr; } operator Node *() const { return m_ptr; } private: Node *m_ptr; }; wxToolBarToolsList(wxKeyType keyType = wxKEY_NONE) : wxListBase(keyType) { } wxToolBarToolsList(const wxToolBarToolsList& list) : wxListBase(list.GetKeyType()) { Assign(list); } wxToolBarToolsList& operator=(const wxToolBarToolsList& list) { if (&list != this) Assign(list); return *this; } wxwxToolBarToolsListNode *GetFirst() const { return (wxwxToolBarToolsListNode *)wxListBase::GetFirst(); } wxwxToolBarToolsListNode *GetLast() const { return (wxwxToolBarToolsListNode *)wxListBase::GetLast(); } wxwxToolBarToolsListNode *Item(size_t index) const { return (wxwxToolBarToolsListNode *)wxListBase::Item(index); } wxToolBarToolBase *operator[](size_t index) const { wxwxToolBarToolsListNode *node = Item(index); return node ? (wxToolBarToolBase*)(node->GetData()) : 
# 272 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h" 3 4
__null
# 272 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h"
; } wxwxToolBarToolsListNode *Append(wxToolBarToolBase *object) { return (wxwxToolBarToolsListNode *)wxListBase::Append(object); } wxwxToolBarToolsListNode *Insert(wxToolBarToolBase *object) { return (wxwxToolBarToolsListNode *)Insert(static_cast<wxwxToolBarToolsListNode *>(
# 272 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h" 3 4
__null
# 272 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h"
), object); } wxwxToolBarToolsListNode *Insert(size_t pos, wxToolBarToolBase *object) { return (wxwxToolBarToolsListNode *)wxListBase::Insert(pos, object); } wxwxToolBarToolsListNode *Insert(wxwxToolBarToolsListNode *prev, wxToolBarToolBase *object) { return (wxwxToolBarToolsListNode *)wxListBase::Insert(prev, object); } wxwxToolBarToolsListNode *Append(long key, void *object) { return (wxwxToolBarToolsListNode *)wxListBase::Append(key, object); } wxwxToolBarToolsListNode *Append(const wxChar *key, void *object) { return (wxwxToolBarToolsListNode *)wxListBase::Append(key, object); } wxwxToolBarToolsListNode *DetachNode(wxwxToolBarToolsListNode *node) { return (wxwxToolBarToolsListNode *)wxListBase::DetachNode(node); } bool DeleteNode(wxwxToolBarToolsListNode *node) { return wxListBase::DeleteNode(node); } bool DeleteObject(wxToolBarToolBase *object) { return wxListBase::DeleteObject(object); } void Erase(wxwxToolBarToolsListNode *it) { DeleteNode(it); } wxwxToolBarToolsListNode *Find(const wxToolBarToolBase *object) const { return (wxwxToolBarToolsListNode *)wxListBase::Find(object); } virtual wxwxToolBarToolsListNode *Find(const wxListKey& key) const { return (wxwxToolBarToolsListNode *)wxListBase::Find(key); } bool Member(const wxToolBarToolBase *object) const { return Find(object) != 
# 272 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h" 3 4
__null
# 272 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h"
; } int IndexOf(wxToolBarToolBase *object) const { return wxListBase::IndexOf(object); } void Sort(wxSortCompareFunction func) { wxListBase::Sort(func); } void Sort(wxSortFuncFor_wxToolBarToolsList func) { Sort((wxSortCompareFunction)func); } protected: virtual wxNodeBase *CreateNode(wxNodeBase *prev, wxNodeBase *next, void *data, const wxListKey& key = wxDefaultListKey) override { return new wxwxToolBarToolsListNode(this, (wxwxToolBarToolsListNode *)prev, (wxwxToolBarToolsListNode *)next, (wxToolBarToolBase *)data, key); } public: typedef size_t size_type; typedef int difference_type; typedef wxToolBarToolBase* value_type; typedef wxToolBarToolBase* base_value_type; typedef value_type& reference; typedef const value_type& const_reference; typedef base_value_type& base_reference; typedef const base_value_type& const_base_reference; class __attribute__ ((visibility("default"))) iterator { public: typedef std::ptrdiff_t difference_type; typedef std::bidirectional_iterator_tag iterator_category; typedef wxToolBarToolBase* value_type; typedef value_type* pointer; typedef value_type& reference; typedef wxwxToolBarToolsListNode Node; typedef iterator itor; Node* m_node; Node* m_init; public: typedef reference reference_type; typedef pointer pointer_type; iterator(Node* node, Node* init) : m_node(node), m_init(init) {} iterator() : m_node(
# 272 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h" 3 4
__null
# 272 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h"
), m_init(
# 272 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h" 3 4
__null
# 272 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h"
) { } reference_type operator*() const { return *(pointer_type)m_node->GetDataPtr(); } itor& operator++() { do { if ( m_node ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/tbarbase.h", 272, __FUNCTION__, "m_node", L"uninitialized iterator"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); m_node = m_node->GetNext(); return *this; } const itor operator++(int) { itor tmp = *this; do { if ( m_node ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/tbarbase.h", 272, __FUNCTION__, "m_node", L"uninitialized iterator"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); m_node = m_node->GetNext(); return tmp; } itor& operator--() { m_node = m_node ? m_node->GetPrevious() : m_init; return *this; } const itor operator--(int) { itor tmp = *this; m_node = m_node ? m_node->GetPrevious() : m_init; return tmp; } bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; class __attribute__ ((visibility("default"))) const_iterator { public: typedef std::ptrdiff_t difference_type; typedef std::bidirectional_iterator_tag iterator_category; typedef wxToolBarToolBase* value_type; typedef const value_type* pointer; typedef const value_type& reference; typedef wxwxToolBarToolsListNode Node; typedef const_iterator itor; Node* m_node; Node* m_init; public: typedef reference reference_type; typedef pointer pointer_type; const_iterator(Node* node, Node* init) : m_node(node), m_init(init) { } const_iterator() : m_node(
# 272 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h" 3 4
__null
# 272 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h"
), m_init(
# 272 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h" 3 4
__null
# 272 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h"
) { } const_iterator(const iterator& it) : m_node(it.m_node), m_init(it.m_init) { } reference_type operator*() const { return *(pointer_type)m_node->GetDataPtr(); } itor& operator++() { do { if ( m_node ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/tbarbase.h", 272, __FUNCTION__, "m_node", L"uninitialized iterator"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); m_node = m_node->GetNext(); return *this; } const itor operator++(int) { itor tmp = *this; do { if ( m_node ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/tbarbase.h", 272, __FUNCTION__, "m_node", L"uninitialized iterator"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); m_node = m_node->GetNext(); return tmp; } itor& operator--() { m_node = m_node ? m_node->GetPrevious() : m_init; return *this; } const itor operator--(int) { itor tmp = *this; m_node = m_node ? m_node->GetPrevious() : m_init; return tmp; } bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; class __attribute__ ((visibility("default"))) reverse_iterator { public: typedef std::ptrdiff_t difference_type; typedef std::bidirectional_iterator_tag iterator_category; typedef wxToolBarToolBase* value_type; typedef value_type* pointer; typedef value_type& reference; typedef wxwxToolBarToolsListNode Node; typedef reverse_iterator itor; Node* m_node; Node* m_init; public: typedef reference reference_type; typedef pointer pointer_type; reverse_iterator(Node* node, Node* init) : m_node(node), m_init(init) { } reverse_iterator() : m_node(
# 272 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h" 3 4
__null
# 272 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h"
), m_init(
# 272 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h" 3 4
__null
# 272 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h"
) { } reference_type operator*() const { return *(pointer_type)m_node->GetDataPtr(); } itor& operator++() { m_node = m_node->GetPrevious(); return *this; } const itor operator++(int) { itor tmp = *this; m_node = m_node->GetPrevious(); return tmp; } itor& operator--() { m_node = m_node ? m_node->GetNext() : m_init; return *this; } const itor operator--(int) { itor tmp = *this; m_node = m_node ? m_node->GetNext() : m_init; return tmp; } bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; class __attribute__ ((visibility("default"))) const_reverse_iterator { public: typedef std::ptrdiff_t difference_type; typedef std::bidirectional_iterator_tag iterator_category; typedef wxToolBarToolBase* value_type; typedef const value_type* pointer; typedef const value_type& reference; typedef wxwxToolBarToolsListNode Node; typedef const_reverse_iterator itor; Node* m_node; Node* m_init; public: typedef reference reference_type; typedef pointer pointer_type; const_reverse_iterator(Node* node, Node* init) : m_node(node), m_init(init) { } const_reverse_iterator() : m_node(
# 272 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h" 3 4
__null
# 272 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h"
), m_init(
# 272 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h" 3 4
__null
# 272 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h"
) { } const_reverse_iterator(const reverse_iterator& it) : m_node(it.m_node), m_init(it.m_init) { } reference_type operator*() const { return *(pointer_type)m_node->GetDataPtr(); } itor& operator++() { m_node = m_node->GetPrevious(); return *this; } const itor operator++(int) { itor tmp = *this; m_node = m_node->GetPrevious(); return tmp; } itor& operator--() { m_node = m_node ? m_node->GetNext() : m_init; return *this;} const itor operator--(int) { itor tmp = *this; m_node = m_node ? m_node->GetNext() : m_init; return tmp; } bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; explicit wxToolBarToolsList(size_type n, const_reference v = value_type()) { assign(n, v); } wxToolBarToolsList(const const_iterator& first, const const_iterator& last) { assign(first, last); } iterator begin() { return iterator(GetFirst(), GetLast()); } const_iterator begin() const { return const_iterator(GetFirst(), GetLast()); } iterator end() { return iterator(
# 272 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h" 3 4
__null
# 272 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h"
, GetLast()); } const_iterator end() const { return const_iterator(
# 272 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h" 3 4
__null
# 272 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h"
, GetLast()); } reverse_iterator rbegin() { return reverse_iterator(GetLast(), GetFirst()); } const_reverse_iterator rbegin() const { return const_reverse_iterator(GetLast(), GetFirst()); } reverse_iterator rend() { return reverse_iterator(
# 272 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h" 3 4
__null
# 272 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h"
, GetFirst()); } const_reverse_iterator rend() const { return const_reverse_iterator(
# 272 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h" 3 4
__null
# 272 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h"
, GetFirst()); } void resize(size_type n, value_type v = value_type()) { while (n < size()) pop_back(); while (n > size()) push_back(v); } size_type size() const { return GetCount(); } size_type max_size() const { return 0x7fffffff; } bool empty() const { return IsEmpty(); } reference front() { return *begin(); } const_reference front() const { return *begin(); } reference back() { iterator tmp = end(); return *--tmp; } const_reference back() const { const_iterator tmp = end(); return *--tmp; } void push_front(const_reference v = value_type()) { Insert(GetFirst(), (const_base_reference)v); } void pop_front() { DeleteNode(GetFirst()); } void push_back(const_reference v = value_type()) { Append((const_base_reference)v); } void pop_back() { DeleteNode(GetLast()); } void assign(const_iterator first, const const_iterator& last) { clear(); for(; first != last; ++first) Append((const_base_reference)*first); } void assign(size_type n, const_reference v = value_type()) { clear(); for(size_type i = 0; i < n; ++i) Append((const_base_reference)v); } iterator insert(const iterator& it, const_reference v) { if ( it == end() ) { Append((const_base_reference)v); iterator itins(end()); return --itins; } else { Insert(it.m_node, (const_base_reference)v); iterator itins(it); return --itins; } } void insert(const iterator& it, size_type n, const_reference v) { for(size_type i = 0; i < n; ++i) insert(it, v); } void insert(const iterator& it, const_iterator first, const const_iterator& last) { for(; first != last; ++first) insert(it, *first); } iterator erase(const iterator& it) { iterator next = iterator(it.m_node->GetNext(), GetLast()); DeleteNode(it.m_node); return next; } iterator erase(const iterator& first, const iterator& last) { iterator next = last; if ( next != end() ) ++next; DeleteNodes(first.m_node, last.m_node); return next; } void clear() { Clear(); } void splice(const iterator& it, wxToolBarToolsList& l, const iterator& first, const iterator& last) { insert(it, first, last); l.erase(first, last); } void splice(const iterator& it, wxToolBarToolsList& l) { splice(it, l, l.begin(), l.end() ); } void splice(const iterator& it, wxToolBarToolsList& l, const iterator& first) { if ( it != first ) { insert(it, *first); l.erase(first); } } void remove(const_reference v) { DeleteObject((const_base_reference)v); } void reverse() { Reverse(); } };





class __attribute__ ((visibility("default"))) wxToolBarBase : public wxControl
{
public:
    wxToolBarBase();
    virtual ~wxToolBarBase();
# 291 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h"
    wxToolBarToolBase *AddTool(int toolid,
                               const wxString& label,
                               const wxBitmap& bitmap,
                               const wxBitmap& bmpDisabled,
                               wxItemKind kind = wxITEM_NORMAL,
                               const wxString& shortHelp = wxEmptyString,
                               const wxString& longHelp = wxEmptyString,
                               wxObject *clientData = 
# 298 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h" 3 4
                                                     __null
# 298 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h"
                                                         )
    {
        return DoAddTool(toolid, label, bitmap, bmpDisabled, kind,
                         shortHelp, longHelp, clientData);
    }


    wxToolBarToolBase *AddTool(int toolid,
                               const wxString& label,
                               const wxBitmap& bitmap,
                               const wxString& shortHelp = wxEmptyString,
                               wxItemKind kind = wxITEM_NORMAL)
    {
        return AddTool(toolid, label, bitmap, wxNullBitmap, kind, shortHelp);
    }


    wxToolBarToolBase *AddCheckTool(int toolid,
                                    const wxString& label,
                                    const wxBitmap& bitmap,
                                    const wxBitmap& bmpDisabled = wxNullBitmap,
                                    const wxString& shortHelp = wxEmptyString,
                                    const wxString& longHelp = wxEmptyString,
                                    wxObject *clientData = 
# 321 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h" 3 4
                                                          __null
# 321 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h"
                                                              )
    {
        return AddTool(toolid, label, bitmap, bmpDisabled, wxITEM_CHECK,
                       shortHelp, longHelp, clientData);
    }



    wxToolBarToolBase *AddRadioTool(int toolid,
                                    const wxString& label,
                                    const wxBitmap& bitmap,
                                    const wxBitmap& bmpDisabled = wxNullBitmap,
                                    const wxString& shortHelp = wxEmptyString,
                                    const wxString& longHelp = wxEmptyString,
                                    wxObject *clientData = 
# 335 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h" 3 4
                                                          __null
# 335 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h"
                                                              )
    {
        return AddTool(toolid, label, bitmap, bmpDisabled, wxITEM_RADIO,
                       shortHelp, longHelp, clientData);
    }




    virtual wxToolBarToolBase *InsertTool
                               (
                                    size_t pos,
                                    int toolid,
                                    const wxString& label,
                                    const wxBitmap& bitmap,
                                    const wxBitmap& bmpDisabled = wxNullBitmap,
                                    wxItemKind kind = wxITEM_NORMAL,
                                    const wxString& shortHelp = wxEmptyString,
                                    const wxString& longHelp = wxEmptyString,
                                    wxObject *clientData = 
# 354 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h" 3 4
                                                          __null
                               
# 355 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h"
                              );

    virtual wxToolBarToolBase *AddTool (wxToolBarToolBase *tool);
    virtual wxToolBarToolBase *InsertTool (size_t pos, wxToolBarToolBase *tool);






    virtual wxToolBarToolBase *
    AddControl(wxControl *control, const wxString& label = wxEmptyString);

    virtual wxToolBarToolBase *
    InsertControl(size_t pos, wxControl *control,
                  const wxString& label = wxEmptyString);


    virtual wxControl *FindControl( int toolid );


    virtual wxToolBarToolBase *AddSeparator();
    virtual wxToolBarToolBase *InsertSeparator(size_t pos);




    virtual wxToolBarToolBase *AddStretchableSpace();
    virtual wxToolBarToolBase *InsertStretchableSpace(size_t pos);



    virtual wxToolBarToolBase *RemoveTool(int toolid);


    virtual bool DeleteToolByPos(size_t pos);
    virtual bool DeleteTool(int toolid);


    virtual void ClearTools();






    virtual bool Realize();




    virtual void EnableTool(int toolid, bool enable);
    virtual void ToggleTool(int toolid, bool toggle);


    virtual void SetToggle(int toolid, bool toggle);


    virtual wxObject *GetToolClientData(int toolid) const;
    virtual void SetToolClientData(int toolid, wxObject *clientData);


    virtual int GetToolPos(int id) const;


    virtual bool GetToolState(int toolid) const;

    virtual bool GetToolEnabled(int toolid) const;

    virtual void SetToolShortHelp(int toolid, const wxString& helpString);
    virtual wxString GetToolShortHelp(int toolid) const;
    virtual void SetToolLongHelp(int toolid, const wxString& helpString);
    virtual wxString GetToolLongHelp(int toolid) const;

    virtual void SetToolNormalBitmap(int ,
                                     const wxBitmap& ) {}
    virtual void SetToolDisabledBitmap(int ,
                                       const wxBitmap& ) {}





    virtual void SetMargins(int x, int y);
    void SetMargins(const wxSize& size)
        { SetMargins((int) size.x, (int) size.y); }
    virtual void SetToolPacking(int packing)
        { m_toolPacking = packing; }
    virtual void SetToolSeparation(int separation)
        { m_toolSeparation = separation; }

    virtual wxSize GetToolMargins() const { return wxSize(m_xMargin, m_yMargin); }
    virtual int GetToolPacking() const { return m_toolPacking; }
    virtual int GetToolSeparation() const { return m_toolSeparation; }





    virtual void SetRows(int nRows);


    void SetMaxRowsCols(int rows, int cols)
        { m_maxRows = rows; m_maxCols = cols; }
    int GetMaxRows() const { return m_maxRows; }
    int GetMaxCols() const { return m_maxCols; }



    virtual void SetToolBitmapSize(const wxSize& size)
        { m_defaultWidth = size.x; m_defaultHeight = size.y; }
    virtual wxSize GetToolBitmapSize() const
        { return wxSize(m_defaultWidth, m_defaultHeight); }



    virtual wxSize GetToolSize() const
        { return GetToolBitmapSize(); }



    virtual wxToolBarToolBase *FindToolForPosition(wxCoord x,
                                                   wxCoord y) const = 0;


    wxToolBarToolBase *FindById(int toolid) const;


    bool IsVertical() const;



    int GetDirection() const;


    size_t GetToolsCount() const { return m_tools.GetCount(); }
    wxToolBarToolBase *GetToolByPos(int pos) { return m_tools[pos]; }
    const wxToolBarToolBase *GetToolByPos(int pos) const { return m_tools[pos]; }
# 559 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h"
    virtual bool OnLeftClick(int toolid, bool toggleDown);


    virtual void OnRightClick(int toolid, long x, long y);



    virtual void OnMouseEnter(int toolid);





    wxSize GetMargins() const { return GetToolMargins(); }




    virtual wxToolBarToolBase *CreateTool(int toolid,
                                          const wxString& label,
                                          const wxBitmap& bmpNormal,
                                          const wxBitmap& bmpDisabled = wxNullBitmap,
                                          wxItemKind kind = wxITEM_NORMAL,
                                          wxObject *clientData = 
# 582 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h" 3 4
                                                                __null
# 582 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h"
                                                                    ,
                                          const wxString& shortHelp = wxEmptyString,
                                          const wxString& longHelp = wxEmptyString) = 0;

    virtual wxToolBarToolBase *CreateTool(wxControl *control,
                                          const wxString& label) = 0;



    wxToolBarToolBase *CreateSeparator()
    {
        return CreateTool(wxID_SEPARATOR,
                          wxEmptyString,
                          wxNullBitmap, wxNullBitmap,
                          wxITEM_SEPARATOR, 
# 596 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h" 3 4
                                           __null
# 596 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h"
                                               ,
                          wxEmptyString, wxEmptyString);
    }






    virtual void UpdateWindowUI(long flags = wxUPDATE_UI_NONE) override ;


    virtual bool AcceptsFocus() const override { return false; }



    bool SetDropdownMenu(int toolid, wxMenu *menu);


protected:

    virtual wxBorder GetDefaultBorder() const override { return wxBORDER_NONE; }






    virtual wxToolBarToolBase *DoAddTool
                               (
                                   int toolid,
                                   const wxString& label,
                                   const wxBitmap& bitmap,
                                   const wxBitmap& bmpDisabled,
                                   wxItemKind kind,
                                   const wxString& shortHelp = wxEmptyString,
                                   const wxString& longHelp = wxEmptyString,
                                   wxObject *clientData = 
# 633 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h" 3 4
                                                         __null
# 633 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h"
                                                             ,
                                   wxCoord xPos = wxDefaultCoord,
                                   wxCoord yPos = wxDefaultCoord
                               );



    virtual bool DoInsertTool(size_t pos, wxToolBarToolBase *tool) = 0;



    virtual bool DoDeleteTool(size_t pos, wxToolBarToolBase *tool) = 0;


    virtual void DoEnableTool(wxToolBarToolBase *tool, bool enable) = 0;


    virtual void DoToggleTool(wxToolBarToolBase *tool, bool toggle) = 0;


    virtual void DoSetToggle(wxToolBarToolBase *tool, bool toggle) = 0;
# 664 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h"
    void FixupStyle();


    void UnToggleRadioGroup(wxToolBarToolBase *tool);


    void AdjustToolBitmapSize();


    wxToolBarToolBase *DoInsertNewTool(size_t pos, wxToolBarToolBase *tool)
    {
        if ( !InsertTool(pos, tool) )
        {
            delete tool;
            return 
# 678 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h" 3 4
                  __null
# 678 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h"
                      ;
        }

        return tool;
    }


    wxToolBarToolsList m_tools;


    int m_xMargin;
    int m_yMargin;


    int m_maxRows;
    int m_maxCols;


    int m_toolPacking,
        m_toolSeparation;


    wxCoord m_defaultWidth, m_defaultHeight;

private:
    private: static const wxEventTableEntry sm_eventTableEntries[]; protected:
# 703 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h"
#pragma GCC diagnostic push
# 703 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h"
   
# 703 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 703 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h"
    const wxEventTable* GetEventTable() const; wxEventHashTable& GetEventHashTable() const;
# 703 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h"
#pragma GCC diagnostic pop
# 703 "/usr/include/wx-3.1-unofficial/wx/tbarbase.h"
    static const wxEventTable sm_eventTable; static wxEventHashTable sm_eventHashTable;
    private: wxToolBarBase(const wxToolBarBase&) = delete; wxToolBarBase& operator=(const wxToolBarBase&) = delete;
};
# 66 "/usr/include/wx-3.1-unofficial/wx/toolbar.h" 2
# 74 "/usr/include/wx-3.1-unofficial/wx/toolbar.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/gtk/toolbar.h" 1
# 12 "/usr/include/wx-3.1-unofficial/wx/gtk/toolbar.h"
typedef struct _GtkTooltips GtkTooltips;





class __attribute__ ((visibility("default"))) wxToolBar : public wxToolBarBase
{
public:

    wxToolBar() { Init(); }
    wxToolBar( wxWindow *parent,
               wxWindowID id,
               const wxPoint& pos = wxDefaultPosition,
               const wxSize& size = wxDefaultSize,
               long style = wxTB_DEFAULT_STYLE,
               const wxString& name = wxString::FromAscii(wxToolBarNameStr) )
    {
        Init();

        Create(parent, id, pos, size, style, name);
    }

    bool Create( wxWindow *parent,
                 wxWindowID id,
                 const wxPoint& pos = wxDefaultPosition,
                 const wxSize& size = wxDefaultSize,
                 long style = wxTB_DEFAULT_STYLE,
                 const wxString& name = wxString::FromAscii(wxToolBarNameStr) );

    virtual ~wxToolBar();

    virtual wxToolBarToolBase *FindToolForPosition(wxCoord x, wxCoord y) const override;

    virtual void SetToolShortHelp(int id, const wxString& helpString) override;

    virtual void SetWindowStyleFlag( long style ) override;

    virtual void SetToolNormalBitmap(int id, const wxBitmap& bitmap) override;
    virtual void SetToolDisabledBitmap(int id, const wxBitmap& bitmap) override;

    virtual bool Realize() override;

    static wxVisualAttributes
    GetClassDefaultAttributes(wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL);

    virtual wxToolBarToolBase *CreateTool(int id,
                                          const wxString& label,
                                          const wxBitmap& bitmap1,
                                          const wxBitmap& bitmap2 = wxNullBitmap,
                                          wxItemKind kind = wxITEM_NORMAL,
                                          wxObject *clientData = 
# 63 "/usr/include/wx-3.1-unofficial/wx/gtk/toolbar.h" 3 4
                                                                __null
# 63 "/usr/include/wx-3.1-unofficial/wx/gtk/toolbar.h"
                                                                    ,
                                          const wxString& shortHelpString = wxEmptyString,
                                          const wxString& longHelpString = wxEmptyString) override;
    virtual wxToolBarToolBase *CreateTool(wxControl *control,
                                          const wxString& label) override;




    GtkToolbar* GTKGetToolbar() const { return m_toolbar; }

protected:

    virtual wxBorder GetDefaultBorder() const override { return wxBORDER_DEFAULT; }

    virtual wxSize DoGetBestSize() const override;
    virtual GdkWindow *GTKGetWindow(wxArrayGdkWindows& windows) const override;


    virtual bool DoInsertTool(size_t pos, wxToolBarToolBase *tool) override;
    virtual bool DoDeleteTool(size_t pos, wxToolBarToolBase *tool) override;

    virtual void DoEnableTool(wxToolBarToolBase *tool, bool enable) override;
    virtual void DoToggleTool(wxToolBarToolBase *tool, bool toggle) override;
    virtual void DoSetToggle(wxToolBarToolBase *tool, bool toggle) override;

private:
    void Init();
    void GtkSetStyle();
    GSList* GetRadioGroup(size_t pos);
    virtual void AddChildGTK(wxWindow* child) override;

    GtkToolbar* m_toolbar;
    GtkTooltips* m_tooltips;

    public:
# 98 "/usr/include/wx-3.1-unofficial/wx/gtk/toolbar.h"
#pragma GCC diagnostic push
# 98 "/usr/include/wx-3.1-unofficial/wx/gtk/toolbar.h"
   
# 98 "/usr/include/wx-3.1-unofficial/wx/gtk/toolbar.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 98 "/usr/include/wx-3.1-unofficial/wx/gtk/toolbar.h"
    virtual wxClassInfo *GetClassInfo() const;
# 98 "/usr/include/wx-3.1-unofficial/wx/gtk/toolbar.h"
#pragma GCC diagnostic pop
# 98 "/usr/include/wx-3.1-unofficial/wx/gtk/toolbar.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 75 "/usr/include/wx-3.1-unofficial/wx/toolbar.h" 2
# 87 "/usr/include/wx-3.1-unofficial/wx/wx.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/combobox.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/combobox.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/combobox.h" 2







extern __attribute__ ((visibility("default"))) const char wxComboBoxNameStr[];
# 31 "/usr/include/wx-3.1-unofficial/wx/combobox.h"
class __attribute__ ((visibility("default"))) wxComboBoxBase : public wxItemContainer,
                                        public wxTextEntry
{
public:

    virtual void Clear() override
    {
        wxItemContainer::Clear();
        wxTextEntry::Clear();
    }






    bool IsListEmpty() const { return wxItemContainer::IsEmpty(); }
    bool IsTextEmpty() const { return wxTextEntry::IsEmpty(); }







    virtual int GetSelection() const override = 0;
    virtual void GetSelection(long *from, long *to) const override = 0;

    virtual void Popup() { do { if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/combobox.h", 59, __FUNCTION__, "\"Assert failure\"", L"Not implemented"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); }
    virtual void Dismiss() { do { if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/combobox.h", 60, __FUNCTION__, "\"Assert failure\"", L"Not implemented"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); }




    virtual int GetCurrentSelection() const { return GetSelection(); }
};
# 79 "/usr/include/wx-3.1-unofficial/wx/combobox.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/gtk/combobox.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/gtk/combobox.h"
typedef struct _GtkEntry GtkEntry;





class __attribute__ ((visibility("default"))) wxComboBox : public wxChoice,
                                    public wxTextEntry
{
public:
    wxComboBox()
        : wxChoice(), wxTextEntry()
    {
        Init();
    }
    wxComboBox(wxWindow *parent,
               wxWindowID id,
               const wxString& value = wxEmptyString,
               const wxPoint& pos = wxDefaultPosition,
               const wxSize& size = wxDefaultSize,
               int n = 0, const wxString choices[] = 
# 35 "/usr/include/wx-3.1-unofficial/wx/gtk/combobox.h" 3 4
                                                    __null
# 35 "/usr/include/wx-3.1-unofficial/wx/gtk/combobox.h"
                                                        ,
               long style = 0,
               const wxValidator& validator = wxDefaultValidator,
               const wxString& name = wxString::FromAscii(wxComboBoxNameStr))
        : wxChoice(), wxTextEntry()
    {
        Init();
        Create(parent, id, value, pos, size, n, choices, style, validator, name);
    }

    wxComboBox(wxWindow *parent, wxWindowID id,
               const wxString& value,
               const wxPoint& pos,
               const wxSize& size,
               const wxArrayString& choices,
               long style = 0,
               const wxValidator& validator = wxDefaultValidator,
               const wxString& name = wxString::FromAscii(wxComboBoxNameStr))
        : wxChoice(), wxTextEntry()
    {
        Init();
        Create(parent, id, value, pos, size, choices, style, validator, name);
    }
    ~wxComboBox();

    bool Create(wxWindow *parent, wxWindowID id,
                const wxString& value = wxEmptyString,
                const wxPoint& pos = wxDefaultPosition,
                const wxSize& size = wxDefaultSize,
                int n = 0, const wxString choices[] = (const wxString *) 
# 64 "/usr/include/wx-3.1-unofficial/wx/gtk/combobox.h" 3 4
                                                                        __null
# 64 "/usr/include/wx-3.1-unofficial/wx/gtk/combobox.h"
                                                                            ,
                long style = 0,
                const wxValidator& validator = wxDefaultValidator,
                const wxString& name = wxString::FromAscii(wxComboBoxNameStr));
    bool Create(wxWindow *parent, wxWindowID id,
                const wxString& value,
                const wxPoint& pos,
                const wxSize& size,
                const wxArrayString& choices,
                long style = 0,
                const wxValidator& validator = wxDefaultValidator,
                const wxString& name = wxString::FromAscii(wxComboBoxNameStr));



    virtual void SetSelection(int n) override { wxChoice::SetSelection(n); }
    virtual void SetSelection(long from, long to) override
                               { wxTextEntry::SetSelection(from, to); }

    virtual int GetSelection() const override { return wxChoice::GetSelection(); }
    virtual void GetSelection(long *from, long *to) const override
                               { return wxTextEntry::GetSelection(from, to); }

    virtual wxString GetStringSelection() const override
    {
        return wxItemContainer::GetStringSelection();
    }

    virtual void SetString(unsigned int n, const wxString& string) override;

    virtual void Popup();
    virtual void Dismiss();

    virtual void Clear() override;


    bool IsListEmpty() const { return wxItemContainer::IsEmpty(); }
    bool IsTextEmpty() const { return wxTextEntry::IsEmpty(); }

    void OnChar( wxKeyEvent &event );

    virtual void SetValue(const wxString& value) override;


    void OnCut(wxCommandEvent& event);
    void OnCopy(wxCommandEvent& event);
    void OnPaste(wxCommandEvent& event);
    void OnUndo(wxCommandEvent& event);
    void OnRedo(wxCommandEvent& event);
    void OnDelete(wxCommandEvent& event);
    void OnSelectAll(wxCommandEvent& event);

    void OnUpdateCut(wxUpdateUIEvent& event);
    void OnUpdateCopy(wxUpdateUIEvent& event);
    void OnUpdatePaste(wxUpdateUIEvent& event);
    void OnUpdateUndo(wxUpdateUIEvent& event);
    void OnUpdateRedo(wxUpdateUIEvent& event);
    void OnUpdateDelete(wxUpdateUIEvent& event);
    void OnUpdateSelectAll(wxUpdateUIEvent& event);

    virtual void GTKDisableEvents() override;
    virtual void GTKEnableEvents() override;
    GtkWidget* GetConnectWidget() override;

    static wxVisualAttributes
    GetClassDefaultAttributes(wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL);

    virtual const wxTextEntry* WXGetTextEntry() const override { return this; }

protected:

    virtual GdkWindow *GTKGetWindow(wxArrayGdkWindows& windows) const override;



    virtual bool UseGTKStyleBase() const override { return true; }



    virtual void GTKCreateComboBoxWidget();

    virtual wxSize DoGetSizeFromTextSize(int xlen, int ylen = -1) const override;

    virtual GtkEntry *GetEntry() const override
        { return m_entry; }

    virtual int GTKIMFilterKeypress(GdkEventKey* event) const override
        { return GTKEntryIMFilterKeypress(event); }


    GtkEntry* m_entry;

private:

    virtual wxWindow *GetEditableWindow() override { return this; }
    virtual GtkEditable *GetEditable() const override;

    void Init();

    private: wxComboBox(const wxComboBox&) = delete; wxComboBox& operator=(const wxComboBox&) = delete; public:
# 163 "/usr/include/wx-3.1-unofficial/wx/gtk/combobox.h"
#pragma GCC diagnostic push
# 163 "/usr/include/wx-3.1-unofficial/wx/gtk/combobox.h"
   
# 163 "/usr/include/wx-3.1-unofficial/wx/gtk/combobox.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 163 "/usr/include/wx-3.1-unofficial/wx/gtk/combobox.h"
    virtual wxClassInfo *GetClassInfo() const;
# 163 "/usr/include/wx-3.1-unofficial/wx/gtk/combobox.h"
#pragma GCC diagnostic pop
# 163 "/usr/include/wx-3.1-unofficial/wx/gtk/combobox.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
    private: static const wxEventTableEntry sm_eventTableEntries[]; protected:
# 164 "/usr/include/wx-3.1-unofficial/wx/gtk/combobox.h"
#pragma GCC diagnostic push
# 164 "/usr/include/wx-3.1-unofficial/wx/gtk/combobox.h"
   
# 164 "/usr/include/wx-3.1-unofficial/wx/gtk/combobox.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 164 "/usr/include/wx-3.1-unofficial/wx/gtk/combobox.h"
    const wxEventTable* GetEventTable() const; wxEventHashTable& GetEventHashTable() const;
# 164 "/usr/include/wx-3.1-unofficial/wx/gtk/combobox.h"
#pragma GCC diagnostic pop
# 164 "/usr/include/wx-3.1-unofficial/wx/gtk/combobox.h"
    static const wxEventTable sm_eventTable; static wxEventHashTable sm_eventHashTable;
};
# 80 "/usr/include/wx-3.1-unofficial/wx/combobox.h" 2
# 88 "/usr/include/wx-3.1-unofficial/wx/wx.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/layout.h" 1
# 34 "/usr/include/wx-3.1-unofficial/wx/layout.h"
class wxWindowBase;
class wxLayoutConstraints;







enum wxEdge
{
    wxLeft, wxTop, wxRight, wxBottom, wxWidth, wxHeight,
    wxCentre, wxCenter = wxCentre, wxCentreX, wxCentreY
};

enum wxRelationship
{
    wxUnconstrained = 0,
    wxAsIs,
    wxPercentOf,
    wxAbove,
    wxBelow,
    wxLeftOf,
    wxRightOf,
    wxSameAs,
    wxAbsolute
};





class __attribute__ ((visibility("default"))) wxIndividualLayoutConstraint : public wxObject
{
public:
    wxIndividualLayoutConstraint();



    virtual ~wxIndividualLayoutConstraint(){}

    void Set(wxRelationship rel, wxWindowBase *otherW, wxEdge otherE, int val = 0, int marg = 0);




    void LeftOf(wxWindowBase *sibling, int marg = 0);
    void RightOf(wxWindowBase *sibling, int marg = 0);
    void Above(wxWindowBase *sibling, int marg = 0);
    void Below(wxWindowBase *sibling, int marg = 0);




    void SameAs(wxWindowBase *otherW, wxEdge edge, int marg = 0);


    void PercentOf(wxWindowBase *otherW, wxEdge wh, int per);




    void Absolute(int val);




    void Unconstrained() { relationship = wxUnconstrained; }




    void AsIs() { relationship = wxAsIs; }




    wxWindowBase *GetOtherWindow() { return otherWin; }
    wxEdge GetMyEdge() const { return myEdge; }
    void SetEdge(wxEdge which) { myEdge = which; }
    void SetValue(int v) { value = v; }
    int GetMargin() const { return margin; }
    void SetMargin(int m) { margin = m; }
    int GetValue() const { return value; }
    int GetPercent() const { return percent; }
    int GetOtherEdge() const { return otherEdge; }
    bool GetDone() const { return done; }
    void SetDone(bool d) { done = d; }
    wxRelationship GetRelationship() const { return relationship; }
    void SetRelationship(wxRelationship r) { relationship = r; }


    bool ResetIfWin(wxWindowBase *otherW);


    bool SatisfyConstraint(wxLayoutConstraints *constraints, wxWindowBase *win);



    int GetEdge(wxEdge which, wxWindowBase *thisWin, wxWindowBase *other) const;

protected:

    friend class wxIndividualLayoutConstraint_Serialize;


    wxWindowBase *otherWin;

    wxEdge myEdge;
    wxRelationship relationship;
    int margin;
    int value;
    int percent;
    wxEdge otherEdge;
    bool done;

    public:
# 150 "/usr/include/wx-3.1-unofficial/wx/layout.h"
#pragma GCC diagnostic push
# 150 "/usr/include/wx-3.1-unofficial/wx/layout.h"
   
# 150 "/usr/include/wx-3.1-unofficial/wx/layout.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 150 "/usr/include/wx-3.1-unofficial/wx/layout.h"
    virtual wxClassInfo *GetClassInfo() const;
# 150 "/usr/include/wx-3.1-unofficial/wx/layout.h"
#pragma GCC diagnostic pop
# 150 "/usr/include/wx-3.1-unofficial/wx/layout.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};





class __attribute__ ((visibility("default"))) wxLayoutConstraints : public wxObject
{
public:

    wxIndividualLayoutConstraint left;
    wxIndividualLayoutConstraint top;
    wxIndividualLayoutConstraint right;
    wxIndividualLayoutConstraint bottom;

    wxIndividualLayoutConstraint width;
    wxIndividualLayoutConstraint height;

    wxIndividualLayoutConstraint centreX;
    wxIndividualLayoutConstraint centreY;

    wxLayoutConstraints();



    virtual ~wxLayoutConstraints(){}

    bool SatisfyConstraints(wxWindowBase *win, int *noChanges);
    bool AreSatisfied() const
    {
        return left.GetDone() && top.GetDone() &&
               width.GetDone() && height.GetDone();
    }

    public:
# 185 "/usr/include/wx-3.1-unofficial/wx/layout.h"
#pragma GCC diagnostic push
# 185 "/usr/include/wx-3.1-unofficial/wx/layout.h"
   
# 185 "/usr/include/wx-3.1-unofficial/wx/layout.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 185 "/usr/include/wx-3.1-unofficial/wx/layout.h"
    virtual wxClassInfo *GetClassInfo() const;
# 185 "/usr/include/wx-3.1-unofficial/wx/layout.h"
#pragma GCC diagnostic pop
# 185 "/usr/include/wx-3.1-unofficial/wx/layout.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 89 "/usr/include/wx-3.1-unofficial/wx/wx.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/sizer.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/sizer.h" 2







class wxButton;
class wxBoxSizer;
class wxSizerItem;
class wxSizer;
# 35 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
class __attribute__ ((visibility("default"))) wxSizerFlags
{
public:


    wxSizerFlags(int proportion = 0) : m_proportion(proportion)
    {
        m_flags = 0;
        m_borderInPixels = 0;
    }




    wxSizerFlags& Proportion(int proportion)
    {
        m_proportion = proportion;
        return *this;
    }

    wxSizerFlags& Expand()
    {
        m_flags |= wxEXPAND;
        return *this;
    }




    wxSizerFlags& Align(int alignment)
    {
        m_flags &= ~wxALIGN_MASK;
        m_flags |= alignment;

        return *this;
    }


    wxSizerFlags& Centre() { return Align(wxALIGN_CENTRE); }
    wxSizerFlags& Center() { return Centre(); }



    wxSizerFlags& CentreVertical()
    {
        m_flags = (m_flags & ~wxALIGN_BOTTOM) | wxALIGN_CENTRE_VERTICAL;
        return *this;
    }

    wxSizerFlags& CenterVertical() { return CentreVertical(); }

    wxSizerFlags& CentreHorizontal()
    {
        m_flags = (m_flags & ~wxALIGN_RIGHT) | wxALIGN_CENTRE_HORIZONTAL;
        return *this;
    }

    wxSizerFlags& CenterHorizontal() { return CentreHorizontal(); }

    wxSizerFlags& Top()
    {
        m_flags &= ~(wxALIGN_BOTTOM | wxALIGN_CENTRE_VERTICAL);
        return *this;
    }

    wxSizerFlags& Left()
    {
        m_flags &= ~(wxALIGN_RIGHT | wxALIGN_CENTRE_HORIZONTAL);
        return *this;
    }

    wxSizerFlags& Right()
    {
        m_flags = (m_flags & ~wxALIGN_CENTRE_HORIZONTAL) | wxALIGN_RIGHT;
        return *this;
    }

    wxSizerFlags& Bottom()
    {
        m_flags = (m_flags & ~wxALIGN_CENTRE_VERTICAL) | wxALIGN_BOTTOM;
        return *this;
    }



    static int GetDefaultBorder()
    {
        return wxRound(GetDefaultBorderFractional());
    }

    static float GetDefaultBorderFractional()
    {




        return 6;
# 145 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
    }


    wxSizerFlags& Border(int direction, int borderInPixels)
    {
        if ( !(direction & ~wxALL) ) {} else { do { if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/sizer.h", 150, __FUNCTION__, "\"!(direction & ~wxALL)\"", L"direction must be a combination of wxDirection " L"enum values."), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); return *this; } struct wxDummyCheckStruct150

                                          ;

        m_flags &= ~wxALL;
        m_flags |= direction;

        m_borderInPixels = borderInPixels;

        return *this;
    }

    wxSizerFlags& Border(int direction = wxALL)
    {

        return Border(direction, wxRound(GetDefaultBorderFractional()));






    }

    wxSizerFlags& DoubleBorder(int direction = wxALL)
    {

        return Border(direction, wxRound(2 * GetDefaultBorderFractional()));





    }

    wxSizerFlags& TripleBorder(int direction = wxALL)
    {

        return Border(direction, wxRound(3 * GetDefaultBorderFractional()));





    }

    wxSizerFlags& HorzBorder()
    {

        return Border(wxLEFT | wxRIGHT, wxRound(GetDefaultBorderFractional()));



    }

    wxSizerFlags& DoubleHorzBorder()
    {

        return Border(wxLEFT | wxRIGHT, wxRound(2 * GetDefaultBorderFractional()));



    }


    wxSizerFlags& Shaped()
    {
        m_flags |= wxSHAPED;

        return *this;
    }

    wxSizerFlags& FixedMinSize()
    {
        m_flags |= wxFIXED_MINSIZE;

        return *this;
    }


    wxSizerFlags& ReserveSpaceEvenIfHidden()
    {
        m_flags |= wxRESERVE_SPACE_EVEN_IF_HIDDEN;
        return *this;
    }


    int GetProportion() const { return m_proportion; }
    int GetFlags() const { return m_flags; }
    int GetBorderInPixels() const { return m_borderInPixels; }

private:




    int m_proportion;
    int m_flags;
    int m_borderInPixels;
};






class __attribute__ ((visibility("default"))) wxSizerSpacer
{
public:
    wxSizerSpacer(const wxSize& size) : m_size(size), m_isShown(true) { }

    void SetSize(const wxSize& size) { m_size = size; }
    const wxSize& GetSize() const { return m_size; }

    void Show(bool show) { m_isShown = show; }
    bool IsShown() const { return m_isShown; }

private:

    wxSize m_size;


    bool m_isShown;
};





class __attribute__ ((visibility("default"))) wxSizerItem : public wxObject
{
public:

    wxSizerItem( wxWindow *window,
                 int proportion=0,
                 int flag=0,
                 int border=0,
                 wxObject* userData=
# 287 "/usr/include/wx-3.1-unofficial/wx/sizer.h" 3 4
                                   __null 
# 287 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
                                        );


    wxSizerItem(wxWindow *window, const wxSizerFlags& flags)
    {
        Init(flags);

        DoSetWindow(window);
    }


    wxSizerItem( wxSizer *sizer,
                 int proportion=0,
                 int flag=0,
                 int border=0,
                 wxObject* userData=
# 302 "/usr/include/wx-3.1-unofficial/wx/sizer.h" 3 4
                                   __null 
# 302 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
                                        );


    wxSizerItem(wxSizer *sizer, const wxSizerFlags& flags)
    {
        Init(flags);

        DoSetSizer(sizer);
    }


    wxSizerItem( int width,
                 int height,
                 int proportion=0,
                 int flag=0,
                 int border=0,
                 wxObject* userData=
# 318 "/usr/include/wx-3.1-unofficial/wx/sizer.h" 3 4
                                   __null
# 318 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
                                       );


    wxSizerItem(int width, int height, const wxSizerFlags& flags)
    {
        Init(flags);

        DoSetSpacer(wxSize(width, height));
    }

    wxSizerItem();
    virtual ~wxSizerItem();

    virtual void DeleteWindows();


    void DetachSizer() { m_sizer = 
# 334 "/usr/include/wx-3.1-unofficial/wx/sizer.h" 3 4
                                  __null
# 334 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
                                      ; }



    void DetachWindow() { m_window = 
# 338 "/usr/include/wx-3.1-unofficial/wx/sizer.h" 3 4
                                    __null
# 338 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
                                        ; m_kind = Item_None; }

    virtual wxSize GetSize() const;
    virtual wxSize CalcMin();
    virtual void SetDimension( const wxPoint& pos, const wxSize& size );

    wxSize GetMinSize() const
        { return m_minSize; }
    wxSize GetMinSizeWithBorder() const;

    wxSize GetMaxSize() const
        { return IsWindow() ? m_window->GetMaxSize() : wxDefaultSize; }
    wxSize GetMaxSizeWithBorder() const;

    void SetMinSize(const wxSize& size)
    {
        if ( IsWindow() )
            m_window->SetMinSize(size);
        m_minSize = size;
    }
    void SetMinSize( int x, int y )
        { SetMinSize(wxSize(x, y)); }
    void SetInitSize( int x, int y )
        { SetMinSize(wxSize(x, y)); }



    void SetRatio(int width, int height)
        { m_ratio = (width && height) ? ((float) width / (float) height) : 1; }
    void SetRatio(const wxSize& size)
        { SetRatio(size.x, size.y); }
    void SetRatio(float ratio)
        { m_ratio = ratio; }
    float GetRatio() const
        { return m_ratio; }

    virtual wxRect GetRect() { return m_rect; }



    void SetId(int id) { m_id = id; }
    int GetId() const { return m_id; }

    bool IsWindow() const { return m_kind == Item_Window; }
    bool IsSizer() const { return m_kind == Item_Sizer; }
    bool IsSpacer() const { return m_kind == Item_Spacer; }

    void SetProportion( int proportion )
        { m_proportion = proportion; }
    int GetProportion() const
        { return m_proportion; }
    void SetFlag( int flag )
        { m_flag = flag; }
    int GetFlag() const
        { return m_flag; }
    void SetBorder( int border )
        { m_border = border; }
    int GetBorder() const
        { return m_border; }

    wxWindow *GetWindow() const
        { return m_kind == Item_Window ? m_window : 
# 399 "/usr/include/wx-3.1-unofficial/wx/sizer.h" 3 4
                                                   __null
# 399 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
                                                       ; }
    wxSizer *GetSizer() const
        { return m_kind == Item_Sizer ? m_sizer : 
# 401 "/usr/include/wx-3.1-unofficial/wx/sizer.h" 3 4
                                                 __null
# 401 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
                                                     ; }
    wxSize GetSpacer() const;





    bool IsShown() const;

    void Show(bool show);

    void SetUserData(wxObject* userData)
        { delete m_userData; m_userData = userData; }
    wxObject* GetUserData() const
        { return m_userData; }
    wxPoint GetPosition() const
        { return m_pos; }





    bool InformFirstDirection( int direction, int size, int availableOtherDir=-1 );



    void AssignWindow(wxWindow *window)
    {
        Free();
        DoSetWindow(window);
    }

    void AssignSizer(wxSizer *sizer)
    {
        Free();
        DoSetSizer(sizer);
    }

    void AssignSpacer(const wxSize& size)
    {
        Free();
        DoSetSpacer(size);
    }

    void AssignSpacer(int w, int h) { AssignSpacer(wxSize(w, h)); }
# 456 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
protected:

    void Init() { m_userData = 
# 458 "/usr/include/wx-3.1-unofficial/wx/sizer.h" 3 4
                              __null
# 458 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
                                  ; m_kind = Item_None; }


    void Init(const wxSizerFlags& flags);


    void Free();


    void DoSetWindow(wxWindow *window);
    void DoSetSizer(wxSizer *sizer);
    void DoSetSpacer(const wxSize& size);



    wxSize AddBorderToSize(const wxSize& size) const;


    enum
    {
        Item_None,
        Item_Window,
        Item_Sizer,
        Item_Spacer,
        Item_Max
    } m_kind;
    union
    {
        wxWindow *m_window;
        wxSizer *m_sizer;
        wxSizerSpacer *m_spacer;
    };

    wxPoint m_pos;
    wxSize m_minSize;
    int m_proportion;
    int m_border;
    int m_flag;
    int m_id;


    wxRect m_rect;




    float m_ratio;

    wxObject *m_userData;

private:
    public:
# 509 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
#pragma GCC diagnostic push
# 509 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
   
# 509 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 509 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
    virtual wxClassInfo *GetClassInfo() const;
# 509 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
#pragma GCC diagnostic pop
# 509 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
    static wxClassInfo ms_classInfo;
    private: wxSizerItem(const wxSizerItem&) = delete; wxSizerItem& operator=(const wxSizerItem&) = delete;
};

typedef wxSizerItem _WX_LIST_ITEM_TYPE_wxSizerItemList; typedef int (*wxSortFuncFor_wxSizerItemList)(const wxSizerItem **, const wxSizerItem **); class __attribute__ ((visibility("default"))) wxwxSizerItemListNode : public wxNodeBase { public: wxwxSizerItemListNode(wxListBase *list = 
# 513 "/usr/include/wx-3.1-unofficial/wx/sizer.h" 3 4
__null
# 513 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
, wxwxSizerItemListNode *previous = 
# 513 "/usr/include/wx-3.1-unofficial/wx/sizer.h" 3 4
__null
# 513 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
, wxwxSizerItemListNode *next = 
# 513 "/usr/include/wx-3.1-unofficial/wx/sizer.h" 3 4
__null
# 513 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
, wxSizerItem *data = 
# 513 "/usr/include/wx-3.1-unofficial/wx/sizer.h" 3 4
__null
# 513 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
, const wxListKey& key = wxDefaultListKey) : wxNodeBase(list, previous, next, data, key) { } wxwxSizerItemListNode *GetNext() const { return (wxwxSizerItemListNode *)wxNodeBase::GetNext(); } wxwxSizerItemListNode *GetPrevious() const { return (wxwxSizerItemListNode *)wxNodeBase::GetPrevious(); } wxSizerItem *GetData() const { return (wxSizerItem *)wxNodeBase::GetData(); } void SetData(wxSizerItem *data) { wxNodeBase::SetData(data); } protected: virtual void DeleteData() override; private: wxwxSizerItemListNode(const wxwxSizerItemListNode&) = delete; wxwxSizerItemListNode& operator=(const wxwxSizerItemListNode&) = delete; }; class __attribute__ ((visibility("default"))) wxSizerItemList : public wxListBase { public: typedef wxwxSizerItemListNode Node; class __attribute__ ((visibility("default"))) compatibility_iterator { public: compatibility_iterator(Node *ptr = 
# 513 "/usr/include/wx-3.1-unofficial/wx/sizer.h" 3 4
__null
# 513 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
) : m_ptr(ptr) { } Node *operator->() const { return m_ptr; } operator Node *() const { return m_ptr; } private: Node *m_ptr; }; wxSizerItemList(wxKeyType keyType = wxKEY_NONE) : wxListBase(keyType) { } wxSizerItemList(const wxSizerItemList& list) : wxListBase(list.GetKeyType()) { Assign(list); } wxSizerItemList& operator=(const wxSizerItemList& list) { if (&list != this) Assign(list); return *this; } wxwxSizerItemListNode *GetFirst() const { return (wxwxSizerItemListNode *)wxListBase::GetFirst(); } wxwxSizerItemListNode *GetLast() const { return (wxwxSizerItemListNode *)wxListBase::GetLast(); } wxwxSizerItemListNode *Item(size_t index) const { return (wxwxSizerItemListNode *)wxListBase::Item(index); } wxSizerItem *operator[](size_t index) const { wxwxSizerItemListNode *node = Item(index); return node ? (wxSizerItem*)(node->GetData()) : 
# 513 "/usr/include/wx-3.1-unofficial/wx/sizer.h" 3 4
__null
# 513 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
; } wxwxSizerItemListNode *Append(wxSizerItem *object) { return (wxwxSizerItemListNode *)wxListBase::Append(object); } wxwxSizerItemListNode *Insert(wxSizerItem *object) { return (wxwxSizerItemListNode *)Insert(static_cast<wxwxSizerItemListNode *>(
# 513 "/usr/include/wx-3.1-unofficial/wx/sizer.h" 3 4
__null
# 513 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
), object); } wxwxSizerItemListNode *Insert(size_t pos, wxSizerItem *object) { return (wxwxSizerItemListNode *)wxListBase::Insert(pos, object); } wxwxSizerItemListNode *Insert(wxwxSizerItemListNode *prev, wxSizerItem *object) { return (wxwxSizerItemListNode *)wxListBase::Insert(prev, object); } wxwxSizerItemListNode *Append(long key, void *object) { return (wxwxSizerItemListNode *)wxListBase::Append(key, object); } wxwxSizerItemListNode *Append(const wxChar *key, void *object) { return (wxwxSizerItemListNode *)wxListBase::Append(key, object); } wxwxSizerItemListNode *DetachNode(wxwxSizerItemListNode *node) { return (wxwxSizerItemListNode *)wxListBase::DetachNode(node); } bool DeleteNode(wxwxSizerItemListNode *node) { return wxListBase::DeleteNode(node); } bool DeleteObject(wxSizerItem *object) { return wxListBase::DeleteObject(object); } void Erase(wxwxSizerItemListNode *it) { DeleteNode(it); } wxwxSizerItemListNode *Find(const wxSizerItem *object) const { return (wxwxSizerItemListNode *)wxListBase::Find(object); } virtual wxwxSizerItemListNode *Find(const wxListKey& key) const { return (wxwxSizerItemListNode *)wxListBase::Find(key); } bool Member(const wxSizerItem *object) const { return Find(object) != 
# 513 "/usr/include/wx-3.1-unofficial/wx/sizer.h" 3 4
__null
# 513 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
; } int IndexOf(wxSizerItem *object) const { return wxListBase::IndexOf(object); } void Sort(wxSortCompareFunction func) { wxListBase::Sort(func); } void Sort(wxSortFuncFor_wxSizerItemList func) { Sort((wxSortCompareFunction)func); } protected: virtual wxNodeBase *CreateNode(wxNodeBase *prev, wxNodeBase *next, void *data, const wxListKey& key = wxDefaultListKey) override { return new wxwxSizerItemListNode(this, (wxwxSizerItemListNode *)prev, (wxwxSizerItemListNode *)next, (wxSizerItem *)data, key); } public: typedef size_t size_type; typedef int difference_type; typedef wxSizerItem* value_type; typedef wxSizerItem* base_value_type; typedef value_type& reference; typedef const value_type& const_reference; typedef base_value_type& base_reference; typedef const base_value_type& const_base_reference; class __attribute__ ((visibility("default"))) iterator { public: typedef std::ptrdiff_t difference_type; typedef std::bidirectional_iterator_tag iterator_category; typedef wxSizerItem* value_type; typedef value_type* pointer; typedef value_type& reference; typedef wxwxSizerItemListNode Node; typedef iterator itor; Node* m_node; Node* m_init; public: typedef reference reference_type; typedef pointer pointer_type; iterator(Node* node, Node* init) : m_node(node), m_init(init) {} iterator() : m_node(
# 513 "/usr/include/wx-3.1-unofficial/wx/sizer.h" 3 4
__null
# 513 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
), m_init(
# 513 "/usr/include/wx-3.1-unofficial/wx/sizer.h" 3 4
__null
# 513 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
) { } reference_type operator*() const { return *(pointer_type)m_node->GetDataPtr(); } itor& operator++() { do { if ( m_node ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/sizer.h", 513, __FUNCTION__, "m_node", L"uninitialized iterator"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); m_node = m_node->GetNext(); return *this; } const itor operator++(int) { itor tmp = *this; do { if ( m_node ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/sizer.h", 513, __FUNCTION__, "m_node", L"uninitialized iterator"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); m_node = m_node->GetNext(); return tmp; } itor& operator--() { m_node = m_node ? m_node->GetPrevious() : m_init; return *this; } const itor operator--(int) { itor tmp = *this; m_node = m_node ? m_node->GetPrevious() : m_init; return tmp; } bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; class __attribute__ ((visibility("default"))) const_iterator { public: typedef std::ptrdiff_t difference_type; typedef std::bidirectional_iterator_tag iterator_category; typedef wxSizerItem* value_type; typedef const value_type* pointer; typedef const value_type& reference; typedef wxwxSizerItemListNode Node; typedef const_iterator itor; Node* m_node; Node* m_init; public: typedef reference reference_type; typedef pointer pointer_type; const_iterator(Node* node, Node* init) : m_node(node), m_init(init) { } const_iterator() : m_node(
# 513 "/usr/include/wx-3.1-unofficial/wx/sizer.h" 3 4
__null
# 513 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
), m_init(
# 513 "/usr/include/wx-3.1-unofficial/wx/sizer.h" 3 4
__null
# 513 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
) { } const_iterator(const iterator& it) : m_node(it.m_node), m_init(it.m_init) { } reference_type operator*() const { return *(pointer_type)m_node->GetDataPtr(); } itor& operator++() { do { if ( m_node ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/sizer.h", 513, __FUNCTION__, "m_node", L"uninitialized iterator"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); m_node = m_node->GetNext(); return *this; } const itor operator++(int) { itor tmp = *this; do { if ( m_node ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/sizer.h", 513, __FUNCTION__, "m_node", L"uninitialized iterator"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); m_node = m_node->GetNext(); return tmp; } itor& operator--() { m_node = m_node ? m_node->GetPrevious() : m_init; return *this; } const itor operator--(int) { itor tmp = *this; m_node = m_node ? m_node->GetPrevious() : m_init; return tmp; } bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; class __attribute__ ((visibility("default"))) reverse_iterator { public: typedef std::ptrdiff_t difference_type; typedef std::bidirectional_iterator_tag iterator_category; typedef wxSizerItem* value_type; typedef value_type* pointer; typedef value_type& reference; typedef wxwxSizerItemListNode Node; typedef reverse_iterator itor; Node* m_node; Node* m_init; public: typedef reference reference_type; typedef pointer pointer_type; reverse_iterator(Node* node, Node* init) : m_node(node), m_init(init) { } reverse_iterator() : m_node(
# 513 "/usr/include/wx-3.1-unofficial/wx/sizer.h" 3 4
__null
# 513 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
), m_init(
# 513 "/usr/include/wx-3.1-unofficial/wx/sizer.h" 3 4
__null
# 513 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
) { } reference_type operator*() const { return *(pointer_type)m_node->GetDataPtr(); } itor& operator++() { m_node = m_node->GetPrevious(); return *this; } const itor operator++(int) { itor tmp = *this; m_node = m_node->GetPrevious(); return tmp; } itor& operator--() { m_node = m_node ? m_node->GetNext() : m_init; return *this; } const itor operator--(int) { itor tmp = *this; m_node = m_node ? m_node->GetNext() : m_init; return tmp; } bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; class __attribute__ ((visibility("default"))) const_reverse_iterator { public: typedef std::ptrdiff_t difference_type; typedef std::bidirectional_iterator_tag iterator_category; typedef wxSizerItem* value_type; typedef const value_type* pointer; typedef const value_type& reference; typedef wxwxSizerItemListNode Node; typedef const_reverse_iterator itor; Node* m_node; Node* m_init; public: typedef reference reference_type; typedef pointer pointer_type; const_reverse_iterator(Node* node, Node* init) : m_node(node), m_init(init) { } const_reverse_iterator() : m_node(
# 513 "/usr/include/wx-3.1-unofficial/wx/sizer.h" 3 4
__null
# 513 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
), m_init(
# 513 "/usr/include/wx-3.1-unofficial/wx/sizer.h" 3 4
__null
# 513 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
) { } const_reverse_iterator(const reverse_iterator& it) : m_node(it.m_node), m_init(it.m_init) { } reference_type operator*() const { return *(pointer_type)m_node->GetDataPtr(); } itor& operator++() { m_node = m_node->GetPrevious(); return *this; } const itor operator++(int) { itor tmp = *this; m_node = m_node->GetPrevious(); return tmp; } itor& operator--() { m_node = m_node ? m_node->GetNext() : m_init; return *this;} const itor operator--(int) { itor tmp = *this; m_node = m_node ? m_node->GetNext() : m_init; return tmp; } bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; explicit wxSizerItemList(size_type n, const_reference v = value_type()) { assign(n, v); } wxSizerItemList(const const_iterator& first, const const_iterator& last) { assign(first, last); } iterator begin() { return iterator(GetFirst(), GetLast()); } const_iterator begin() const { return const_iterator(GetFirst(), GetLast()); } iterator end() { return iterator(
# 513 "/usr/include/wx-3.1-unofficial/wx/sizer.h" 3 4
__null
# 513 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
, GetLast()); } const_iterator end() const { return const_iterator(
# 513 "/usr/include/wx-3.1-unofficial/wx/sizer.h" 3 4
__null
# 513 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
, GetLast()); } reverse_iterator rbegin() { return reverse_iterator(GetLast(), GetFirst()); } const_reverse_iterator rbegin() const { return const_reverse_iterator(GetLast(), GetFirst()); } reverse_iterator rend() { return reverse_iterator(
# 513 "/usr/include/wx-3.1-unofficial/wx/sizer.h" 3 4
__null
# 513 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
, GetFirst()); } const_reverse_iterator rend() const { return const_reverse_iterator(
# 513 "/usr/include/wx-3.1-unofficial/wx/sizer.h" 3 4
__null
# 513 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
, GetFirst()); } void resize(size_type n, value_type v = value_type()) { while (n < size()) pop_back(); while (n > size()) push_back(v); } size_type size() const { return GetCount(); } size_type max_size() const { return 0x7fffffff; } bool empty() const { return IsEmpty(); } reference front() { return *begin(); } const_reference front() const { return *begin(); } reference back() { iterator tmp = end(); return *--tmp; } const_reference back() const { const_iterator tmp = end(); return *--tmp; } void push_front(const_reference v = value_type()) { Insert(GetFirst(), (const_base_reference)v); } void pop_front() { DeleteNode(GetFirst()); } void push_back(const_reference v = value_type()) { Append((const_base_reference)v); } void pop_back() { DeleteNode(GetLast()); } void assign(const_iterator first, const const_iterator& last) { clear(); for(; first != last; ++first) Append((const_base_reference)*first); } void assign(size_type n, const_reference v = value_type()) { clear(); for(size_type i = 0; i < n; ++i) Append((const_base_reference)v); } iterator insert(const iterator& it, const_reference v) { if ( it == end() ) { Append((const_base_reference)v); iterator itins(end()); return --itins; } else { Insert(it.m_node, (const_base_reference)v); iterator itins(it); return --itins; } } void insert(const iterator& it, size_type n, const_reference v) { for(size_type i = 0; i < n; ++i) insert(it, v); } void insert(const iterator& it, const_iterator first, const const_iterator& last) { for(; first != last; ++first) insert(it, *first); } iterator erase(const iterator& it) { iterator next = iterator(it.m_node->GetNext(), GetLast()); DeleteNode(it.m_node); return next; } iterator erase(const iterator& first, const iterator& last) { iterator next = last; if ( next != end() ) ++next; DeleteNodes(first.m_node, last.m_node); return next; } void clear() { Clear(); } void splice(const iterator& it, wxSizerItemList& l, const iterator& first, const iterator& last) { insert(it, first, last); l.erase(first, last); } void splice(const iterator& it, wxSizerItemList& l) { splice(it, l, l.begin(), l.end() ); } void splice(const iterator& it, wxSizerItemList& l, const iterator& first) { if ( it != first ) { insert(it, *first); l.erase(first); } } void remove(const_reference v) { DeleteObject((const_base_reference)v); } void reverse() { Reverse(); } };






class __attribute__ ((visibility("default"))) wxSizer: public wxObject, public wxClientDataContainer
{
public:
    wxSizer() { m_containingWindow = 
# 523 "/usr/include/wx-3.1-unofficial/wx/sizer.h" 3 4
                                    __null
# 523 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
                                        ; }
    virtual ~wxSizer();



    wxSizerItem* Add(wxWindow *window,
                     int proportion = 0,
                     int flag = 0,
                     int border = 0,
                     wxObject* userData = 
# 532 "/usr/include/wx-3.1-unofficial/wx/sizer.h" 3 4
                                         __null
# 532 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
                                             );
    wxSizerItem* Add(wxSizer *sizer,
                     int proportion = 0,
                     int flag = 0,
                     int border = 0,
                     wxObject* userData = 
# 537 "/usr/include/wx-3.1-unofficial/wx/sizer.h" 3 4
                                         __null
# 537 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
                                             );
    wxSizerItem* Add(int width,
                     int height,
                     int proportion = 0,
                     int flag = 0,
                     int border = 0,
                     wxObject* userData = 
# 543 "/usr/include/wx-3.1-unofficial/wx/sizer.h" 3 4
                                         __null
# 543 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
                                             );
    wxSizerItem* Add( wxWindow *window, const wxSizerFlags& flags);
    wxSizerItem* Add( wxSizer *sizer, const wxSizerFlags& flags);
    wxSizerItem* Add( int width, int height, const wxSizerFlags& flags);
    wxSizerItem* Add( wxSizerItem *item);

    virtual wxSizerItem *AddSpacer(int size);
    wxSizerItem* AddStretchSpacer(int prop = 1);

    wxSizerItem* Insert(size_t index,
                        wxWindow *window,
                        int proportion = 0,
                        int flag = 0,
                        int border = 0,
                        wxObject* userData = 
# 557 "/usr/include/wx-3.1-unofficial/wx/sizer.h" 3 4
                                            __null
# 557 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
                                                );
    wxSizerItem* Insert(size_t index,
                        wxSizer *sizer,
                        int proportion = 0,
                        int flag = 0,
                        int border = 0,
                        wxObject* userData = 
# 563 "/usr/include/wx-3.1-unofficial/wx/sizer.h" 3 4
                                            __null
# 563 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
                                                );
    wxSizerItem* Insert(size_t index,
                        int width,
                        int height,
                        int proportion = 0,
                        int flag = 0,
                        int border = 0,
                        wxObject* userData = 
# 570 "/usr/include/wx-3.1-unofficial/wx/sizer.h" 3 4
                                            __null
# 570 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
                                                );
    wxSizerItem* Insert(size_t index,
                        wxWindow *window,
                        const wxSizerFlags& flags);
    wxSizerItem* Insert(size_t index,
                        wxSizer *sizer,
                        const wxSizerFlags& flags);
    wxSizerItem* Insert(size_t index,
                        int width,
                        int height,
                        const wxSizerFlags& flags);




    virtual wxSizerItem* Insert(size_t index, wxSizerItem *item);

    wxSizerItem* InsertSpacer(size_t index, int size);
    wxSizerItem* InsertStretchSpacer(size_t index, int prop = 1);

    wxSizerItem* Prepend(wxWindow *window,
                         int proportion = 0,
                         int flag = 0,
                         int border = 0,
                         wxObject* userData = 
# 594 "/usr/include/wx-3.1-unofficial/wx/sizer.h" 3 4
                                             __null
# 594 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
                                                 );
    wxSizerItem* Prepend(wxSizer *sizer,
                         int proportion = 0,
                         int flag = 0,
                         int border = 0,
                         wxObject* userData = 
# 599 "/usr/include/wx-3.1-unofficial/wx/sizer.h" 3 4
                                             __null
# 599 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
                                                 );
    wxSizerItem* Prepend(int width,
                         int height,
                         int proportion = 0,
                         int flag = 0,
                         int border = 0,
                         wxObject* userData = 
# 605 "/usr/include/wx-3.1-unofficial/wx/sizer.h" 3 4
                                             __null
# 605 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
                                                 );
    wxSizerItem* Prepend(wxWindow *window, const wxSizerFlags& flags);
    wxSizerItem* Prepend(wxSizer *sizer, const wxSizerFlags& flags);
    wxSizerItem* Prepend(int width, int height, const wxSizerFlags& flags);
    wxSizerItem* Prepend(wxSizerItem *item);

    wxSizerItem* PrependSpacer(int size);
    wxSizerItem* PrependStretchSpacer(int prop = 1);



    void SetContainingWindow(wxWindow *window);
    wxWindow *GetContainingWindow() const { return m_containingWindow; }

    virtual bool Remove( wxSizer *sizer );
    virtual bool Remove( int index );

    virtual bool Detach( wxWindow *window );
    virtual bool Detach( wxSizer *sizer );
    virtual bool Detach( int index );

    virtual bool Replace( wxWindow *oldwin, wxWindow *newwin, bool recursive = false );
    virtual bool Replace( wxSizer *oldsz, wxSizer *newsz, bool recursive = false );
    virtual bool Replace( size_t index, wxSizerItem *newitem );

    virtual void Clear( bool delete_windows = false );
    virtual void DeleteWindows();







    virtual bool InformFirstDirection( int , int , int )
        { return false; }

    void SetMinSize( int width, int height )
        { DoSetMinSize( width, height ); }
    void SetMinSize( const wxSize& size )
        { DoSetMinSize( size.x, size.y ); }


    bool SetItemMinSize( wxWindow *window, int width, int height )
        { return DoSetItemMinSize( window, width, height ); }
    bool SetItemMinSize( wxWindow *window, const wxSize& size )
        { return DoSetItemMinSize( window, size.x, size.y ); }


    bool SetItemMinSize( wxSizer *sizer, int width, int height )
        { return DoSetItemMinSize( sizer, width, height ); }
    bool SetItemMinSize( wxSizer *sizer, const wxSize& size )
        { return DoSetItemMinSize( sizer, size.x, size.y ); }

    bool SetItemMinSize( size_t index, int width, int height )
        { return DoSetItemMinSize( index, width, height ); }
    bool SetItemMinSize( size_t index, const wxSize& size )
        { return DoSetItemMinSize( index, size.x, size.y ); }

    wxSize GetSize() const
        { return m_size; }
    wxPoint GetPosition() const
        { return m_position; }


    wxSize GetMinSize();





    virtual wxSize CalcMin() = 0;



    virtual void RepositionChildren(const wxSize& )
    {
        RecalcSizes();
    }
# 693 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
    virtual void RecalcSizes();

    virtual void Layout();

    wxSize ComputeFittingClientSize(wxWindow *window);
    wxSize ComputeFittingWindowSize(wxWindow *window);

    wxSize Fit( wxWindow *window );
    void FitInside( wxWindow *window );
    void SetSizeHints( wxWindow *window );





    wxSizerItemList& GetChildren()
        { return m_children; }
    const wxSizerItemList& GetChildren() const
        { return m_children; }

    void SetDimension(const wxPoint& pos, const wxSize& size)
    {
        m_position = pos;
        m_size = size;
        Layout();



        InformFirstDirection(wxHORIZONTAL, size.x, size.y);
    }
    void SetDimension(int x, int y, int width, int height)
        { SetDimension(wxPoint(x, y), wxSize(width, height)); }

    size_t GetItemCount() const { return m_children.GetCount(); }
    bool IsEmpty() const { return m_children.IsEmpty(); }

    wxSizerItem* GetItem( wxWindow *window, bool recursive = false );
    wxSizerItem* GetItem( wxSizer *sizer, bool recursive = false );
    wxSizerItem* GetItem( size_t index );
    wxSizerItem* GetItemById( int id, bool recursive = false );



    bool Show( wxWindow *window, bool show = true, bool recursive = false );
    bool Show( wxSizer *sizer, bool show = true, bool recursive = false );
    bool Show( size_t index, bool show = true );

    bool Hide( wxSizer *sizer, bool recursive = false )
        { return Show( sizer, false, recursive ); }
    bool Hide( wxWindow *window, bool recursive = false )
        { return Show( window, false, recursive ); }
    bool Hide( size_t index )
        { return Show( index, false ); }

    bool IsShown( wxWindow *window ) const;
    bool IsShown( wxSizer *sizer ) const;
    bool IsShown( size_t index ) const;


    virtual void ShowItems (bool show);

    void Show(bool show) { ShowItems(show); }



    virtual bool AreAnyItemsShown() const;

protected:
    wxSize m_size;
    wxSize m_minSize;
    wxPoint m_position;
    wxSizerItemList m_children;


    wxWindow *m_containingWindow;

    wxSize GetMaxClientSize( wxWindow *window ) const;
    wxSize GetMinClientSize( wxWindow *window );
    wxSize VirtualFitSize( wxWindow *window );

    virtual void DoSetMinSize( int width, int height );
    virtual bool DoSetItemMinSize( wxWindow *window, int width, int height );
    virtual bool DoSetItemMinSize( wxSizer *sizer, int width, int height );
    virtual bool DoSetItemMinSize( size_t index, int width, int height );



    virtual wxSizerItem* DoInsert(size_t index, wxSizerItem *item);

private:
    public:
# 783 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
#pragma GCC diagnostic push
# 783 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
   
# 783 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 783 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
    virtual wxClassInfo *GetClassInfo() const;
# 783 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
#pragma GCC diagnostic pop
# 783 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
    static wxClassInfo ms_classInfo;
};





class __attribute__ ((visibility("default"))) wxGridSizer: public wxSizer
{
public:


    wxGridSizer( int cols, int vgap, int hgap );
    wxGridSizer( int cols, const wxSize& gap = wxSize(0, 0) );


    wxGridSizer( int rows, int cols, int vgap, int hgap );
    wxGridSizer( int rows, int cols, const wxSize& gap );

    virtual void RepositionChildren(const wxSize& minSize) override;
    virtual wxSize CalcMin() override;

    void SetCols( int cols )
    {
        do { if ( cols >= 0 ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/sizer.h", 807, __FUNCTION__, "cols >= 0", "Number of columns must be non-negative"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );
        m_cols = cols;
    }

    void SetRows( int rows )
    {
        do { if ( rows >= 0 ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/sizer.h", 813, __FUNCTION__, "rows >= 0", "Number of rows must be non-negative"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 );
        m_rows = rows;
    }

    void SetVGap( int gap ) { m_vgap = gap; }
    void SetHGap( int gap ) { m_hgap = gap; }
    int GetCols() const { return m_cols; }
    int GetRows() const { return m_rows; }
    int GetVGap() const { return m_vgap; }
    int GetHGap() const { return m_hgap; }

    int GetEffectiveColsCount() const { return m_cols ? m_cols : CalcCols(); }
    int GetEffectiveRowsCount() const { return m_rows ? m_rows : CalcRows(); }



    int CalcRowsCols(int& rows, int& cols) const;

protected:


    int m_rows;
    int m_cols;


    int m_vgap;
    int m_hgap;

    virtual wxSizerItem *DoInsert(size_t index, wxSizerItem *item) override;

    void SetItemBounds( wxSizerItem *item, int x, int y, int w, int h );



    int CalcCols() const
    {
        if ( m_rows ) {} else { do { if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/sizer.h", 849, __FUNCTION__, "\"m_rows\"", "Can't calculate number of cols if number of rows is not specified"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); return 0; } struct wxDummyCheckStruct849



         ;

        return int(m_children.GetCount() + m_rows - 1) / m_rows;
    }

    int CalcRows() const
    {
        if ( m_cols ) {} else { do { if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/sizer.h", 860, __FUNCTION__, "\"m_cols\"", "Can't calculate number of cols if number of rows is not specified"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); return 0; } struct wxDummyCheckStruct860



         ;

        return int(m_children.GetCount() + m_cols - 1) / m_cols;
    }

private:
    public:
# 870 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
#pragma GCC diagnostic push
# 870 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
   
# 870 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 870 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
    virtual wxClassInfo *GetClassInfo() const;
# 870 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
#pragma GCC diagnostic pop
# 870 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
    static wxClassInfo ms_classInfo;
};







enum wxFlexSizerGrowMode
{

    wxFLEX_GROWMODE_NONE,


    wxFLEX_GROWMODE_SPECIFIED,


    wxFLEX_GROWMODE_ALL
};

class __attribute__ ((visibility("default"))) wxFlexGridSizer: public wxGridSizer
{
public:


    wxFlexGridSizer( int cols, int vgap, int hgap );
    wxFlexGridSizer( int cols, const wxSize& gap = wxSize(0, 0) );


    wxFlexGridSizer( int rows, int cols, int vgap, int hgap );
    wxFlexGridSizer( int rows, int cols, const wxSize& gap );


    virtual ~wxFlexGridSizer();



    void AddGrowableRow( size_t idx, int proportion = 0 );
    void RemoveGrowableRow( size_t idx );
    void AddGrowableCol( size_t idx, int proportion = 0 );
    void RemoveGrowableCol( size_t idx );

    bool IsRowGrowable( size_t idx );
    bool IsColGrowable( size_t idx );





    void SetFlexibleDirection(int direction) { m_flexDirection = direction; }
    int GetFlexibleDirection() const { return m_flexDirection; }



    void SetNonFlexibleGrowMode(wxFlexSizerGrowMode mode) { m_growMode = mode; }
    wxFlexSizerGrowMode GetNonFlexibleGrowMode() const { return m_growMode; }


    const wxArrayInt& GetRowHeights() const { return m_rowHeights; }
    const wxArrayInt& GetColWidths() const { return m_colWidths; }


    virtual void RepositionChildren(const wxSize& minSize) override;
    virtual wxSize CalcMin() override;

protected:
    void AdjustForFlexDirection();
    void AdjustForGrowables(const wxSize& sz, const wxSize& minSize);
    wxSize FindWidthsAndHeights(int nrows, int ncols);


    wxArrayInt m_rowHeights,
                m_colWidths;


    wxArrayInt m_growableRows,
                m_growableCols;


    wxArrayInt m_growableRowsProportions,
                m_growableColsProportions;



    int m_flexDirection;
    wxFlexSizerGrowMode m_growMode;

private:
    public:
# 959 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
#pragma GCC diagnostic push
# 959 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
   
# 959 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 959 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
    virtual wxClassInfo *GetClassInfo() const;
# 959 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
#pragma GCC diagnostic pop
# 959 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
    static wxClassInfo ms_classInfo;
    private: wxFlexGridSizer(const wxFlexGridSizer&) = delete; wxFlexGridSizer& operator=(const wxFlexGridSizer&) = delete;
};





class __attribute__ ((visibility("default"))) wxBoxSizer: public wxSizer
{
public:
    wxBoxSizer(int orient)
    {
        m_orient = orient;
        m_totalProportion = 0;

        do { if ( m_orient == wxHORIZONTAL || m_orient == wxVERTICAL ) { } else if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/sizer.h", 975, __FUNCTION__, "m_orient == wxHORIZONTAL || m_orient == wxVERTICAL", L"invalid value for wxBoxSizer orientation"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 )
                                                                       ;
    }

    virtual wxSizerItem *AddSpacer(int size) override;

    int GetOrientation() const { return m_orient; }

    bool IsVertical() const { return m_orient == wxVERTICAL; }

    void SetOrientation(int orient) { m_orient = orient; }


    virtual wxSize CalcMin() override;
    virtual void RepositionChildren(const wxSize& minSize) override;

    virtual bool InformFirstDirection(int direction,
                                      int size,
                                      int availableOtherDir) override;

protected:

    virtual wxSizerItem *DoInsert(size_t index, wxSizerItem *item) override;



    int GetSizeInMajorDir(const wxSize& sz) const
    {
        return m_orient == wxHORIZONTAL ? sz.x : sz.y;
    }

    int& SizeInMajorDir(wxSize& sz)
    {
        return m_orient == wxHORIZONTAL ? sz.x : sz.y;
    }

    int& PosInMajorDir(wxPoint& pt)
    {
        return m_orient == wxHORIZONTAL ? pt.x : pt.y;
    }

    int GetSizeInMinorDir(const wxSize& sz) const
    {
        return m_orient == wxHORIZONTAL ? sz.y : sz.x;
    }

    int& SizeInMinorDir(wxSize& sz)
    {
        return m_orient == wxHORIZONTAL ? sz.y : sz.x;
    }

    int& PosInMinorDir(wxPoint& pt)
    {
        return m_orient == wxHORIZONTAL ? pt.y : pt.x;
    }


    wxSize SizeFromMajorMinor(int major, int minor) const
    {
        if ( m_orient == wxHORIZONTAL )
        {
            return wxSize(major, minor);
        }
        else
        {
            return wxSize(minor, major);
        }
    }



    int m_orient;


    int m_totalProportion;

private:
    public:
# 1052 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
#pragma GCC diagnostic push
# 1052 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
   
# 1052 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 1052 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
    virtual wxClassInfo *GetClassInfo() const;
# 1052 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
#pragma GCC diagnostic pop
# 1052 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
    static wxClassInfo ms_classInfo;
};







class wxStaticBox;

class __attribute__ ((visibility("default"))) wxStaticBoxSizer: public wxBoxSizer
{
public:
    wxStaticBoxSizer(wxStaticBox *box, int orient);
    wxStaticBoxSizer(int orient, wxWindow *win, const wxString& label = wxEmptyString);
    virtual ~wxStaticBoxSizer();

    virtual wxSize CalcMin() override;
    virtual void RepositionChildren(const wxSize& minSize) override;

    wxStaticBox *GetStaticBox() const
        { return m_staticBox; }


    virtual void ShowItems (bool show) override;
    virtual bool AreAnyItemsShown() const override;

    virtual bool Detach( wxWindow *window ) override;
    virtual bool Detach( wxSizer *sizer ) override { return wxBoxSizer::Detach(sizer); }
    virtual bool Detach( int index ) override { return wxBoxSizer::Detach(index); }

protected:
    wxStaticBox *m_staticBox;

private:
    public:
# 1088 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
#pragma GCC diagnostic push
# 1088 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
   
# 1088 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 1088 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
    virtual wxClassInfo *GetClassInfo() const;
# 1088 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
#pragma GCC diagnostic pop
# 1088 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
    static wxClassInfo ms_classInfo;
    private: wxStaticBoxSizer(const wxStaticBoxSizer&) = delete; wxStaticBoxSizer& operator=(const wxStaticBoxSizer&) = delete;
};
# 1100 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
class __attribute__ ((visibility("default"))) wxStdDialogButtonSizer: public wxBoxSizer
{
public:



    wxStdDialogButtonSizer();



    void AddButton(wxButton *button);


    void SetAffirmativeButton( wxButton *button );
    void SetNegativeButton( wxButton *button );
    void SetCancelButton( wxButton *button );
# 1124 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
    void Realize();

    wxButton *GetAffirmativeButton() const { return m_buttonAffirmative; }
    wxButton *GetApplyButton() const { return m_buttonApply; }
    wxButton *GetNegativeButton() const { return m_buttonNegative; }
    wxButton *GetCancelButton() const { return m_buttonCancel; }
    wxButton *GetHelpButton() const { return m_buttonHelp; }

protected:
    wxButton *m_buttonAffirmative;
    wxButton *m_buttonApply;
    wxButton *m_buttonNegative;
    wxButton *m_buttonCancel;
    wxButton *m_buttonHelp;

private:
    public:
# 1140 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
#pragma GCC diagnostic push
# 1140 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
   
# 1140 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 1140 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
    virtual wxClassInfo *GetClassInfo() const;
# 1140 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
#pragma GCC diagnostic pop
# 1140 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
    static wxClassInfo ms_classInfo;
    private: wxStdDialogButtonSizer(const wxStdDialogButtonSizer&) = delete; wxStdDialogButtonSizer& operator=(const wxStdDialogButtonSizer&) = delete;
};
# 1175 "/usr/include/wx-3.1-unofficial/wx/sizer.h"
inline wxSizerItem*
wxSizer::Insert(size_t index, wxSizerItem *item)
{
    return DoInsert(index, item);
}


inline wxSizerItem*
wxSizer::Add( wxSizerItem *item )
{
    return Insert( m_children.GetCount(), item );
}

inline wxSizerItem*
wxSizer::Add( wxWindow *window, int proportion, int flag, int border, wxObject* userData )
{
    return Add( new wxSizerItem( window, proportion, flag, border, userData ) );
}

inline wxSizerItem*
wxSizer::Add( wxSizer *sizer, int proportion, int flag, int border, wxObject* userData )
{
    return Add( new wxSizerItem( sizer, proportion, flag, border, userData ) );
}

inline wxSizerItem*
wxSizer::Add( int width, int height, int proportion, int flag, int border, wxObject* userData )
{
    return Add( new wxSizerItem( width, height, proportion, flag, border, userData ) );
}

inline wxSizerItem*
wxSizer::Add( wxWindow *window, const wxSizerFlags& flags )
{
    return Add( new wxSizerItem(window, flags) );
}

inline wxSizerItem*
wxSizer::Add( wxSizer *sizer, const wxSizerFlags& flags )
{
    return Add( new wxSizerItem(sizer, flags) );
}

inline wxSizerItem*
wxSizer::Add( int width, int height, const wxSizerFlags& flags )
{
    return Add( new wxSizerItem(width, height, flags) );
}

inline wxSizerItem*
wxSizer::AddSpacer(int size)
{
    return Add(size, size);
}

inline wxSizerItem*
wxSizer::AddStretchSpacer(int prop)
{
    return Add(0, 0, prop);
}

inline wxSizerItem*
wxSizer::Prepend( wxSizerItem *item )
{
    return Insert( 0, item );
}

inline wxSizerItem*
wxSizer::Prepend( wxWindow *window, int proportion, int flag, int border, wxObject* userData )
{
    return Prepend( new wxSizerItem( window, proportion, flag, border, userData ) );
}

inline wxSizerItem*
wxSizer::Prepend( wxSizer *sizer, int proportion, int flag, int border, wxObject* userData )
{
    return Prepend( new wxSizerItem( sizer, proportion, flag, border, userData ) );
}

inline wxSizerItem*
wxSizer::Prepend( int width, int height, int proportion, int flag, int border, wxObject* userData )
{
    return Prepend( new wxSizerItem( width, height, proportion, flag, border, userData ) );
}

inline wxSizerItem*
wxSizer::PrependSpacer(int size)
{
    return Prepend(size, size);
}

inline wxSizerItem*
wxSizer::PrependStretchSpacer(int prop)
{
    return Prepend(0, 0, prop);
}

inline wxSizerItem*
wxSizer::Prepend( wxWindow *window, const wxSizerFlags& flags )
{
    return Prepend( new wxSizerItem(window, flags) );
}

inline wxSizerItem*
wxSizer::Prepend( wxSizer *sizer, const wxSizerFlags& flags )
{
    return Prepend( new wxSizerItem(sizer, flags) );
}

inline wxSizerItem*
wxSizer::Prepend( int width, int height, const wxSizerFlags& flags )
{
    return Prepend( new wxSizerItem(width, height, flags) );
}

inline wxSizerItem*
wxSizer::Insert( size_t index,
                 wxWindow *window,
                 int proportion,
                 int flag,
                 int border,
                 wxObject* userData )
{
    return Insert( index, new wxSizerItem( window, proportion, flag, border, userData ) );
}

inline wxSizerItem*
wxSizer::Insert( size_t index,
                 wxSizer *sizer,
                 int proportion,
                 int flag,
                 int border,
                 wxObject* userData )
{
    return Insert( index, new wxSizerItem( sizer, proportion, flag, border, userData ) );
}

inline wxSizerItem*
wxSizer::Insert( size_t index,
                 int width,
                 int height,
                 int proportion,
                 int flag,
                 int border,
                 wxObject* userData )
{
    return Insert( index, new wxSizerItem( width, height, proportion, flag, border, userData ) );
}

inline wxSizerItem*
wxSizer::Insert( size_t index, wxWindow *window, const wxSizerFlags& flags )
{
    return Insert( index, new wxSizerItem(window, flags) );
}

inline wxSizerItem*
wxSizer::Insert( size_t index, wxSizer *sizer, const wxSizerFlags& flags )
{
    return Insert( index, new wxSizerItem(sizer, flags) );
}

inline wxSizerItem*
wxSizer::Insert( size_t index, int width, int height, const wxSizerFlags& flags )
{
    return Insert( index, new wxSizerItem(width, height, flags) );
}

inline wxSizerItem*
wxSizer::InsertSpacer(size_t index, int size)
{
    return Insert(index, size, size);
}

inline wxSizerItem*
wxSizer::InsertStretchSpacer(size_t index, int prop)
{
    return Insert(index, 0, 0, prop);
}
# 90 "/usr/include/wx-3.1-unofficial/wx/wx.h" 2

# 1 "/usr/include/wx-3.1-unofficial/wx/choicdlg.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/choicdlg.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/choicdlg.h" 2



# 1 "/usr/include/wx-3.1-unofficial/wx/generic/choicdgg.h" 1
# 17 "/usr/include/wx-3.1-unofficial/wx/generic/choicdgg.h"
class wxListBoxBase;
# 33 "/usr/include/wx-3.1-unofficial/wx/generic/choicdgg.h"
class __attribute__ ((visibility("default"))) wxAnyChoiceDialog : public wxDialog
{
public:
    wxAnyChoiceDialog() : m_listbox(
# 36 "/usr/include/wx-3.1-unofficial/wx/generic/choicdgg.h" 3 4
                                   __null
# 36 "/usr/include/wx-3.1-unofficial/wx/generic/choicdgg.h"
                                       ) { }

    wxAnyChoiceDialog(wxWindow *parent,
                      const wxString& message,
                      const wxString& caption,
                      int n, const wxString *choices,
                      long styleDlg = ((0x20000000 | 0x0800 | 0x1000) | 0x0040 | 0x00000004 | 0x00000010 | wxCENTRE),
                      const wxPoint& pos = wxDefaultPosition,
                      long styleLbox = 0x0200)
    {
        (void)Create(parent, message, caption, n, choices,
                     styleDlg, pos, styleLbox);
    }
    wxAnyChoiceDialog(wxWindow *parent,
                      const wxString& message,
                      const wxString& caption,
                      const wxArrayString& choices,
                      long styleDlg = ((0x20000000 | 0x0800 | 0x1000) | 0x0040 | 0x00000004 | 0x00000010 | wxCENTRE),
                      const wxPoint& pos = wxDefaultPosition,
                      long styleLbox = 0x0200)
    {
        (void)Create(parent, message, caption, choices,
                     styleDlg, pos, styleLbox);
    }

    bool Create(wxWindow *parent,
                const wxString& message,
                const wxString& caption,
                int n, const wxString *choices,
                long styleDlg = ((0x20000000 | 0x0800 | 0x1000) | 0x0040 | 0x00000004 | 0x00000010 | wxCENTRE),
                const wxPoint& pos = wxDefaultPosition,
                long styleLbox = 0x0200);
    bool Create(wxWindow *parent,
                const wxString& message,
                const wxString& caption,
                const wxArrayString& choices,
                long styleDlg = ((0x20000000 | 0x0800 | 0x1000) | 0x0040 | 0x00000004 | 0x00000010 | wxCENTRE),
                const wxPoint& pos = wxDefaultPosition,
                long styleLbox = 0x0200);

protected:
    wxListBoxBase *m_listbox;

    virtual wxListBoxBase *CreateList(int n,
                                      const wxString *choices,
                                      long styleLbox);

    private: wxAnyChoiceDialog(const wxAnyChoiceDialog&) = delete; wxAnyChoiceDialog& operator=(const wxAnyChoiceDialog&) = delete;
};





class __attribute__ ((visibility("default"))) wxSingleChoiceDialog : public wxAnyChoiceDialog
{
public:
    wxSingleChoiceDialog()
    {
        m_selection = -1;
    }

    wxSingleChoiceDialog(wxWindow *parent,
                         const wxString& message,
                         const wxString& caption,
                         int n,
                         const wxString *choices,
                         void **clientData = 
# 103 "/usr/include/wx-3.1-unofficial/wx/generic/choicdgg.h" 3 4
                                            __null
# 103 "/usr/include/wx-3.1-unofficial/wx/generic/choicdgg.h"
                                                ,
                         long style = ((0x20000000 | 0x0800 | 0x1000) | 0x0040 | 0x00000004 | 0x00000010 | wxCENTRE),
                         const wxPoint& pos = wxDefaultPosition)
    {
        Create(parent, message, caption, n, choices, clientData, style, pos);
    }

    wxSingleChoiceDialog(wxWindow *parent,
                         const wxString& message,
                         const wxString& caption,
                         const wxArrayString& choices,
                         void **clientData = 
# 114 "/usr/include/wx-3.1-unofficial/wx/generic/choicdgg.h" 3 4
                                            __null
# 114 "/usr/include/wx-3.1-unofficial/wx/generic/choicdgg.h"
                                                ,
                         long style = ((0x20000000 | 0x0800 | 0x1000) | 0x0040 | 0x00000004 | 0x00000010 | wxCENTRE),
                         const wxPoint& pos = wxDefaultPosition)
    {
        Create(parent, message, caption, choices, clientData, style, pos);
    }

    bool Create(wxWindow *parent,
                const wxString& message,
                const wxString& caption,
                int n,
                const wxString *choices,
                void **clientData = 
# 126 "/usr/include/wx-3.1-unofficial/wx/generic/choicdgg.h" 3 4
                                   __null
# 126 "/usr/include/wx-3.1-unofficial/wx/generic/choicdgg.h"
                                       ,
                long style = ((0x20000000 | 0x0800 | 0x1000) | 0x0040 | 0x00000004 | 0x00000010 | wxCENTRE),
                const wxPoint& pos = wxDefaultPosition);
    bool Create(wxWindow *parent,
                const wxString& message,
                const wxString& caption,
                const wxArrayString& choices,
                void **clientData = 
# 133 "/usr/include/wx-3.1-unofficial/wx/generic/choicdgg.h" 3 4
                                   __null
# 133 "/usr/include/wx-3.1-unofficial/wx/generic/choicdgg.h"
                                       ,
                long style = ((0x20000000 | 0x0800 | 0x1000) | 0x0040 | 0x00000004 | 0x00000010 | wxCENTRE),
                const wxPoint& pos = wxDefaultPosition);

    void SetSelection(int sel);
    int GetSelection() const { return m_selection; }
    wxString GetStringSelection() const { return m_stringSelection; }
    void* GetSelectionData() const { return m_clientData; }
# 211 "/usr/include/wx-3.1-unofficial/wx/generic/choicdgg.h"
    void OnOK(wxCommandEvent& event);
    void OnListBoxDClick(wxCommandEvent& event);

protected:
    int m_selection;
    wxString m_stringSelection;

    void DoChoice();

private:
    private: wxSingleChoiceDialog(const wxSingleChoiceDialog&) = delete; wxSingleChoiceDialog& operator=(const wxSingleChoiceDialog&) = delete; public:
# 221 "/usr/include/wx-3.1-unofficial/wx/generic/choicdgg.h"
#pragma GCC diagnostic push
# 221 "/usr/include/wx-3.1-unofficial/wx/generic/choicdgg.h"
   
# 221 "/usr/include/wx-3.1-unofficial/wx/generic/choicdgg.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 221 "/usr/include/wx-3.1-unofficial/wx/generic/choicdgg.h"
    virtual wxClassInfo *GetClassInfo() const;
# 221 "/usr/include/wx-3.1-unofficial/wx/generic/choicdgg.h"
#pragma GCC diagnostic pop
# 221 "/usr/include/wx-3.1-unofficial/wx/generic/choicdgg.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
    private: static const wxEventTableEntry sm_eventTableEntries[]; protected:
# 222 "/usr/include/wx-3.1-unofficial/wx/generic/choicdgg.h"
#pragma GCC diagnostic push
# 222 "/usr/include/wx-3.1-unofficial/wx/generic/choicdgg.h"
   
# 222 "/usr/include/wx-3.1-unofficial/wx/generic/choicdgg.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 222 "/usr/include/wx-3.1-unofficial/wx/generic/choicdgg.h"
    const wxEventTable* GetEventTable() const; wxEventHashTable& GetEventHashTable() const;
# 222 "/usr/include/wx-3.1-unofficial/wx/generic/choicdgg.h"
#pragma GCC diagnostic pop
# 222 "/usr/include/wx-3.1-unofficial/wx/generic/choicdgg.h"
    static const wxEventTable sm_eventTable; static wxEventHashTable sm_eventHashTable;
};





class __attribute__ ((visibility("default"))) wxMultiChoiceDialog : public wxAnyChoiceDialog
{
public:
    wxMultiChoiceDialog() { }

    wxMultiChoiceDialog(wxWindow *parent,
                        const wxString& message,
                        const wxString& caption,
                        int n,
                        const wxString *choices,
                        long style = ((0x20000000 | 0x0800 | 0x1000) | 0x0040 | 0x00000004 | 0x00000010 | wxCENTRE),
                        const wxPoint& pos = wxDefaultPosition)
    {
        (void)Create(parent, message, caption, n, choices, style, pos);
    }
    wxMultiChoiceDialog(wxWindow *parent,
                        const wxString& message,
                        const wxString& caption,
                        const wxArrayString& choices,
                        long style = ((0x20000000 | 0x0800 | 0x1000) | 0x0040 | 0x00000004 | 0x00000010 | wxCENTRE),
                        const wxPoint& pos = wxDefaultPosition)
    {
        (void)Create(parent, message, caption, choices, style, pos);
    }

    bool Create(wxWindow *parent,
                const wxString& message,
                const wxString& caption,
                int n,
                const wxString *choices,
                long style = ((0x20000000 | 0x0800 | 0x1000) | 0x0040 | 0x00000004 | 0x00000010 | wxCENTRE),
                const wxPoint& pos = wxDefaultPosition);
    bool Create(wxWindow *parent,
                const wxString& message,
                const wxString& caption,
                const wxArrayString& choices,
                long style = ((0x20000000 | 0x0800 | 0x1000) | 0x0040 | 0x00000004 | 0x00000010 | wxCENTRE),
                const wxPoint& pos = wxDefaultPosition);

    void SetSelections(const wxArrayInt& selections);
    wxArrayInt GetSelections() const { return m_selections; }


    virtual bool TransferDataFromWindow() override;

protected:

    virtual wxListBoxBase *CreateList(int n,
                                      const wxString *choices,
                                      long styleLbox) override;


    wxArrayInt m_selections;

private:
    private: wxMultiChoiceDialog(const wxMultiChoiceDialog&) = delete; wxMultiChoiceDialog& operator=(const wxMultiChoiceDialog&) = delete; public:
# 284 "/usr/include/wx-3.1-unofficial/wx/generic/choicdgg.h"
#pragma GCC diagnostic push
# 284 "/usr/include/wx-3.1-unofficial/wx/generic/choicdgg.h"
   
# 284 "/usr/include/wx-3.1-unofficial/wx/generic/choicdgg.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 284 "/usr/include/wx-3.1-unofficial/wx/generic/choicdgg.h"
    virtual wxClassInfo *GetClassInfo() const;
# 284 "/usr/include/wx-3.1-unofficial/wx/generic/choicdgg.h"
#pragma GCC diagnostic pop
# 284 "/usr/include/wx-3.1-unofficial/wx/generic/choicdgg.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};






__attribute__ ((visibility("default"))) wxString wxGetSingleChoice(const wxString& message,
                                       const wxString& caption,
                                       const wxArrayString& choices,
                                       wxWindow *parent = 
# 295 "/usr/include/wx-3.1-unofficial/wx/generic/choicdgg.h" 3 4
                                                         __null
# 295 "/usr/include/wx-3.1-unofficial/wx/generic/choicdgg.h"
                                                             ,
                                       int x = wxDefaultCoord,
                                       int y = wxDefaultCoord,
                                       bool centre = true,
                                       int width = 200,
                                       int height = 150,
                                       int initialSelection = 0);

__attribute__ ((visibility("default"))) wxString wxGetSingleChoice(const wxString& message,
                                       const wxString& caption,
                                       int n, const wxString *choices,
                                       wxWindow *parent = 
# 306 "/usr/include/wx-3.1-unofficial/wx/generic/choicdgg.h" 3 4
                                                         __null
# 306 "/usr/include/wx-3.1-unofficial/wx/generic/choicdgg.h"
                                                             ,
                                       int x = wxDefaultCoord,
                                       int y = wxDefaultCoord,
                                       bool centre = true,
                                       int width = 200,
                                       int height = 150,
                                       int initialSelection = 0);

__attribute__ ((visibility("default"))) wxString wxGetSingleChoice(const wxString& message,
                                            const wxString& caption,
                                            const wxArrayString& choices,
                                            int initialSelection,
                                            wxWindow *parent = 
# 318 "/usr/include/wx-3.1-unofficial/wx/generic/choicdgg.h" 3 4
                                                              __null
# 318 "/usr/include/wx-3.1-unofficial/wx/generic/choicdgg.h"
                                                                  );

__attribute__ ((visibility("default"))) wxString wxGetSingleChoice(const wxString& message,
                                            const wxString& caption,
                                            int n, const wxString *choices,
                                            int initialSelection,
                                            wxWindow *parent = 
# 324 "/usr/include/wx-3.1-unofficial/wx/generic/choicdgg.h" 3 4
                                                              __null
# 324 "/usr/include/wx-3.1-unofficial/wx/generic/choicdgg.h"
                                                                  );



__attribute__ ((visibility("default"))) int wxGetSingleChoiceIndex(const wxString& message,
                                       const wxString& caption,
                                       const wxArrayString& choices,
                                       wxWindow *parent = 
# 331 "/usr/include/wx-3.1-unofficial/wx/generic/choicdgg.h" 3 4
                                                         __null
# 331 "/usr/include/wx-3.1-unofficial/wx/generic/choicdgg.h"
                                                             ,
                                       int x = wxDefaultCoord,
                                       int y = wxDefaultCoord,
                                       bool centre = true,
                                       int width = 200,
                                       int height = 150,
                                       int initialSelection = 0);

__attribute__ ((visibility("default"))) int wxGetSingleChoiceIndex(const wxString& message,
                                       const wxString& caption,
                                       int n, const wxString *choices,
                                       wxWindow *parent = 
# 342 "/usr/include/wx-3.1-unofficial/wx/generic/choicdgg.h" 3 4
                                                         __null
# 342 "/usr/include/wx-3.1-unofficial/wx/generic/choicdgg.h"
                                                             ,
                                       int x = wxDefaultCoord,
                                       int y = wxDefaultCoord,
                                       bool centre = true,
                                       int width = 200,
                                       int height = 150,
                                       int initialSelection = 0);

__attribute__ ((visibility("default"))) int wxGetSingleChoiceIndex(const wxString& message,
                                            const wxString& caption,
                                            const wxArrayString& choices,
                                            int initialSelection,
                                            wxWindow *parent = 
# 354 "/usr/include/wx-3.1-unofficial/wx/generic/choicdgg.h" 3 4
                                                              __null
# 354 "/usr/include/wx-3.1-unofficial/wx/generic/choicdgg.h"
                                                                  );

__attribute__ ((visibility("default"))) int wxGetSingleChoiceIndex(const wxString& message,
                                            const wxString& caption,
                                            int n, const wxString *choices,
                                            int initialSelection,
                                            wxWindow *parent = 
# 360 "/usr/include/wx-3.1-unofficial/wx/generic/choicdgg.h" 3 4
                                                              __null
# 360 "/usr/include/wx-3.1-unofficial/wx/generic/choicdgg.h"
                                                                  );


__attribute__ ((visibility("default"))) void* wxGetSingleChoiceData(const wxString& message,
                                        const wxString& caption,
                                        const wxArrayString& choices,
                                        void **client_data,
                                        wxWindow *parent = 
# 367 "/usr/include/wx-3.1-unofficial/wx/generic/choicdgg.h" 3 4
                                                          __null
# 367 "/usr/include/wx-3.1-unofficial/wx/generic/choicdgg.h"
                                                              ,
                                        int x = wxDefaultCoord,
                                        int y = wxDefaultCoord,
                                        bool centre = true,
                                        int width = 200,
                                        int height = 150,
                                        int initialSelection = 0);

__attribute__ ((visibility("default"))) void* wxGetSingleChoiceData(const wxString& message,
                                        const wxString& caption,
                                        int n, const wxString *choices,
                                        void **client_data,
                                        wxWindow *parent = 
# 379 "/usr/include/wx-3.1-unofficial/wx/generic/choicdgg.h" 3 4
                                                          __null
# 379 "/usr/include/wx-3.1-unofficial/wx/generic/choicdgg.h"
                                                              ,
                                        int x = wxDefaultCoord,
                                        int y = wxDefaultCoord,
                                        bool centre = true,
                                        int width = 200,
                                        int height = 150,
                                        int initialSelection = 0);

__attribute__ ((visibility("default"))) void* wxGetSingleChoiceData(const wxString& message,
                                             const wxString& caption,
                                             const wxArrayString& choices,
                                             void **client_data,
                                             int initialSelection,
                                             wxWindow *parent = 
# 392 "/usr/include/wx-3.1-unofficial/wx/generic/choicdgg.h" 3 4
                                                               __null
# 392 "/usr/include/wx-3.1-unofficial/wx/generic/choicdgg.h"
                                                                   );


__attribute__ ((visibility("default"))) void* wxGetSingleChoiceData(const wxString& message,
                                             const wxString& caption,
                                             int n, const wxString *choices,
                                             void **client_data,
                                             int initialSelection,
                                             wxWindow *parent = 
# 400 "/usr/include/wx-3.1-unofficial/wx/generic/choicdgg.h" 3 4
                                                               __null
# 400 "/usr/include/wx-3.1-unofficial/wx/generic/choicdgg.h"
                                                                   );




__attribute__ ((visibility("default"))) int wxGetSelectedChoices(wxArrayInt& selections,
                                        const wxString& message,
                                        const wxString& caption,
                                        int n, const wxString *choices,
                                        wxWindow *parent = 
# 409 "/usr/include/wx-3.1-unofficial/wx/generic/choicdgg.h" 3 4
                                                          __null
# 409 "/usr/include/wx-3.1-unofficial/wx/generic/choicdgg.h"
                                                              ,
                                        int x = wxDefaultCoord,
                                        int y = wxDefaultCoord,
                                        bool centre = true,
                                        int width = 200,
                                        int height = 150);

__attribute__ ((visibility("default"))) int wxGetSelectedChoices(wxArrayInt& selections,
                                        const wxString& message,
                                        const wxString& caption,
                                        const wxArrayString& choices,
                                        wxWindow *parent = 
# 420 "/usr/include/wx-3.1-unofficial/wx/generic/choicdgg.h" 3 4
                                                          __null
# 420 "/usr/include/wx-3.1-unofficial/wx/generic/choicdgg.h"
                                                              ,
                                        int x = wxDefaultCoord,
                                        int y = wxDefaultCoord,
                                        bool centre = true,
                                        int width = 200,
                                        int height = 150);
# 19 "/usr/include/wx-3.1-unofficial/wx/choicdlg.h" 2
# 92 "/usr/include/wx-3.1-unofficial/wx/wx.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/textdlg.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/textdlg.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/generic/textdlgg.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/generic/textdlgg.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/generic/textdlgg.h" 2






# 1 "/usr/include/wx-3.1-unofficial/wx/valtext.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/valtext.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/valtext.h" 2



class wxTextEntry;



enum wxTextValidatorStyle
{
    wxFILTER_NONE = 0x0,
    wxFILTER_EMPTY = 0x1,
    wxFILTER_ASCII = 0x2,
    wxFILTER_ALPHA = 0x4,
    wxFILTER_ALPHANUMERIC = 0x8,
    wxFILTER_DIGITS = 0x10,
    wxFILTER_NUMERIC = 0x20,
    wxFILTER_INCLUDE_LIST = 0x40,
    wxFILTER_INCLUDE_CHAR_LIST = 0x80,
    wxFILTER_EXCLUDE_LIST = 0x100,
    wxFILTER_EXCLUDE_CHAR_LIST = 0x200,
    wxFILTER_XDIGITS = 0x400,
    wxFILTER_SPACE = 0x800,


    wxFILTER_CC = wxFILTER_SPACE|wxFILTER_ASCII|wxFILTER_NUMERIC|
                  wxFILTER_ALPHANUMERIC|wxFILTER_ALPHA|
                  wxFILTER_DIGITS|wxFILTER_XDIGITS
};





class __attribute__ ((visibility("default"))) wxTextValidator: public wxValidator
{
public:
    wxTextValidator(long style = wxFILTER_NONE, wxString *val = 
# 51 "/usr/include/wx-3.1-unofficial/wx/valtext.h" 3 4
                                                               __null
# 51 "/usr/include/wx-3.1-unofficial/wx/valtext.h"
                                                                   );
    wxTextValidator(const wxTextValidator& val);

    virtual ~wxTextValidator(){}





    virtual wxObject *Clone() const override { return new wxTextValidator(*this); }
    bool Copy(const wxTextValidator& val);



    virtual bool Validate(wxWindow *parent) override;


    virtual bool TransferToWindow() override;


    virtual bool TransferFromWindow() override;


    void OnChar(wxKeyEvent& event);


    inline long GetStyle() const { return m_validatorStyle; }
    void SetStyle(long style);

    wxTextEntry *GetTextEntry();




    void SetCharIncludes(const wxString& chars);
    void AddCharIncludes(const wxString& chars);

    void SetIncludes(const wxArrayString& includes);
    void AddInclude(const wxString& include);

    const wxArrayString& GetIncludes() const { return m_includes; }
    wxString GetCharIncludes() const { return m_charIncludes; }




    void SetCharExcludes(const wxString& chars);
    void AddCharExcludes(const wxString& chars);

    void SetExcludes(const wxArrayString& excludes);
    void AddExclude(const wxString& exclude);

    const wxArrayString& GetExcludes() const { return m_excludes; }
    wxString GetCharExcludes() const { return m_charExcludes; }

    bool HasFlag(wxTextValidatorStyle style) const
        { return (m_validatorStyle & style) != 0; }





    virtual wxString IsValid(const wxString& str) const;

protected:

    bool IsCharIncluded(const wxUniChar& c) const
    {
        return m_charIncludes.find(c) != wxString::npos;
    }

    bool IsCharExcluded(const wxUniChar& c) const
    {
        return m_charExcludes.find(c) != wxString::npos;
    }

    bool IsIncluded(const wxString& str) const
    {
        if ( HasFlag(wxFILTER_INCLUDE_LIST) )
            return m_includes.Index(str) != (-1);



        return true;
    }

    bool IsExcluded(const wxString& str) const
    {
        return m_excludes.Index(str) != (-1);
    }


    bool IsValidChar(const wxUniChar& c) const;


    bool ContainsOnlyIncludedCharacters(const wxString& val) const;
    bool ContainsExcludedCharacters(const wxString& val) const;

protected:
    long m_validatorStyle;
    wxString* m_stringValue;
    wxString m_charIncludes;
    wxString m_charExcludes;
    wxArrayString m_includes;
    wxArrayString m_excludes;

private:
    private: wxTextValidator& operator=(const wxTextValidator&) = delete;
    public:
# 159 "/usr/include/wx-3.1-unofficial/wx/valtext.h"
#pragma GCC diagnostic push
# 159 "/usr/include/wx-3.1-unofficial/wx/valtext.h"
   
# 159 "/usr/include/wx-3.1-unofficial/wx/valtext.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 159 "/usr/include/wx-3.1-unofficial/wx/valtext.h"
    virtual wxClassInfo *GetClassInfo() const;
# 159 "/usr/include/wx-3.1-unofficial/wx/valtext.h"
#pragma GCC diagnostic pop
# 159 "/usr/include/wx-3.1-unofficial/wx/valtext.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
    private: static const wxEventTableEntry sm_eventTableEntries[]; protected:
# 160 "/usr/include/wx-3.1-unofficial/wx/valtext.h"
#pragma GCC diagnostic push
# 160 "/usr/include/wx-3.1-unofficial/wx/valtext.h"
   
# 160 "/usr/include/wx-3.1-unofficial/wx/valtext.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 160 "/usr/include/wx-3.1-unofficial/wx/valtext.h"
    const wxEventTable* GetEventTable() const; wxEventHashTable& GetEventHashTable() const;
# 160 "/usr/include/wx-3.1-unofficial/wx/valtext.h"
#pragma GCC diagnostic pop
# 160 "/usr/include/wx-3.1-unofficial/wx/valtext.h"
    static const wxEventTable sm_eventTable; static wxEventHashTable sm_eventHashTable;
};
# 22 "/usr/include/wx-3.1-unofficial/wx/generic/textdlgg.h" 2



class wxTextCtrl;

extern __attribute__ ((visibility("default"))) const char wxGetTextFromUserPromptStr[];
extern __attribute__ ((visibility("default"))) const char wxGetPasswordFromUserPromptStr[];







class __attribute__ ((visibility("default"))) wxTextEntryDialog : public wxDialog
{
public:
    wxTextEntryDialog()
    {
        m_textctrl = 
# 41 "/usr/include/wx-3.1-unofficial/wx/generic/textdlgg.h" 3 4
                    __null
# 41 "/usr/include/wx-3.1-unofficial/wx/generic/textdlgg.h"
                        ;
        m_dialogStyle = 0;
    }

    wxTextEntryDialog(wxWindow *parent,
                      const wxString& message,
                      const wxString& caption = wxString::FromAscii(wxGetTextFromUserPromptStr),
                      const wxString& value = wxEmptyString,
                      long style = (0x00000004 | 0x00000010 | wxCENTRE),
                      const wxPoint& pos = wxDefaultPosition)
    {
        Create(parent, message, caption, value, style, pos);
    }

    bool Create(wxWindow *parent,
                const wxString& message,
                const wxString& caption = wxString::FromAscii(wxGetTextFromUserPromptStr),
                const wxString& value = wxEmptyString,
                long style = (0x00000004 | 0x00000010 | wxCENTRE),
                const wxPoint& pos = wxDefaultPosition);

    void SetValue(const wxString& val);
    wxString GetValue() const { return m_value; }

    void SetMaxLength(unsigned long len);

    void ForceUpper();


    void SetTextValidator( const wxTextValidator& validator );



    void SetTextValidator( wxTextValidatorStyle style = wxFILTER_NONE );
    wxTextValidator* GetTextValidator() { return (wxTextValidator*)m_textctrl->GetValidator(); }


    virtual bool TransferDataToWindow() override;
    virtual bool TransferDataFromWindow() override;


    void OnOK(wxCommandEvent& event);

protected:
    wxTextCtrl *m_textctrl;
    wxString m_value;
    long m_dialogStyle;

private:
    private: static const wxEventTableEntry sm_eventTableEntries[]; protected:
# 90 "/usr/include/wx-3.1-unofficial/wx/generic/textdlgg.h"
#pragma GCC diagnostic push
# 90 "/usr/include/wx-3.1-unofficial/wx/generic/textdlgg.h"
   
# 90 "/usr/include/wx-3.1-unofficial/wx/generic/textdlgg.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 90 "/usr/include/wx-3.1-unofficial/wx/generic/textdlgg.h"
    const wxEventTable* GetEventTable() const; wxEventHashTable& GetEventHashTable() const;
# 90 "/usr/include/wx-3.1-unofficial/wx/generic/textdlgg.h"
#pragma GCC diagnostic pop
# 90 "/usr/include/wx-3.1-unofficial/wx/generic/textdlgg.h"
    static const wxEventTable sm_eventTable; static wxEventHashTable sm_eventHashTable;
    public:
# 91 "/usr/include/wx-3.1-unofficial/wx/generic/textdlgg.h"
#pragma GCC diagnostic push
# 91 "/usr/include/wx-3.1-unofficial/wx/generic/textdlgg.h"
   
# 91 "/usr/include/wx-3.1-unofficial/wx/generic/textdlgg.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 91 "/usr/include/wx-3.1-unofficial/wx/generic/textdlgg.h"
    virtual wxClassInfo *GetClassInfo() const;
# 91 "/usr/include/wx-3.1-unofficial/wx/generic/textdlgg.h"
#pragma GCC diagnostic pop
# 91 "/usr/include/wx-3.1-unofficial/wx/generic/textdlgg.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
    private: wxTextEntryDialog(const wxTextEntryDialog&) = delete; wxTextEntryDialog& operator=(const wxTextEntryDialog&) = delete;
};





class __attribute__ ((visibility("default"))) wxPasswordEntryDialog : public wxTextEntryDialog
{
public:
    wxPasswordEntryDialog() { }
    wxPasswordEntryDialog(wxWindow *parent,
                      const wxString& message,
                      const wxString& caption = wxString::FromAscii(wxGetPasswordFromUserPromptStr),
                      const wxString& value = wxEmptyString,
                      long style = (0x00000004 | 0x00000010 | wxCENTRE),
                      const wxPoint& pos = wxDefaultPosition)
    {
        Create(parent, message, caption, value, style, pos);
    }

    bool Create(wxWindow *parent,
                const wxString& message,
                const wxString& caption = wxString::FromAscii(wxGetPasswordFromUserPromptStr),
                const wxString& value = wxEmptyString,
                long style = (0x00000004 | 0x00000010 | wxCENTRE),
                const wxPoint& pos = wxDefaultPosition);


private:
    public:
# 122 "/usr/include/wx-3.1-unofficial/wx/generic/textdlgg.h"
#pragma GCC diagnostic push
# 122 "/usr/include/wx-3.1-unofficial/wx/generic/textdlgg.h"
   
# 122 "/usr/include/wx-3.1-unofficial/wx/generic/textdlgg.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 122 "/usr/include/wx-3.1-unofficial/wx/generic/textdlgg.h"
    virtual wxClassInfo *GetClassInfo() const;
# 122 "/usr/include/wx-3.1-unofficial/wx/generic/textdlgg.h"
#pragma GCC diagnostic pop
# 122 "/usr/include/wx-3.1-unofficial/wx/generic/textdlgg.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
    private: wxPasswordEntryDialog(const wxPasswordEntryDialog&) = delete; wxPasswordEntryDialog& operator=(const wxPasswordEntryDialog&) = delete;
};





__attribute__ ((visibility("default"))) wxString
    wxGetTextFromUser(const wxString& message,
                    const wxString& caption = wxString::FromAscii(wxGetTextFromUserPromptStr),
                    const wxString& default_value = wxEmptyString,
                    wxWindow *parent = 
# 134 "/usr/include/wx-3.1-unofficial/wx/generic/textdlgg.h" 3 4
                                      __null
# 134 "/usr/include/wx-3.1-unofficial/wx/generic/textdlgg.h"
                                          ,
                    wxCoord x = wxDefaultCoord,
                    wxCoord y = wxDefaultCoord,
                    bool centre = true);

__attribute__ ((visibility("default"))) wxString
    wxGetPasswordFromUser(const wxString& message,
                        const wxString& caption = wxString::FromAscii(wxGetPasswordFromUserPromptStr),
                        const wxString& default_value = wxEmptyString,
                        wxWindow *parent = 
# 143 "/usr/include/wx-3.1-unofficial/wx/generic/textdlgg.h" 3 4
                                          __null
# 143 "/usr/include/wx-3.1-unofficial/wx/generic/textdlgg.h"
                                              ,
                        wxCoord x = wxDefaultCoord,
                        wxCoord y = wxDefaultCoord,
                        bool centre = true);
# 15 "/usr/include/wx-3.1-unofficial/wx/textdlg.h" 2
# 93 "/usr/include/wx-3.1-unofficial/wx/wx.h" 2
# 1 "/usr/include/wx-3.1-unofficial/wx/filedlg.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/filedlg.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/filedlg.h" 2
# 42 "/usr/include/wx-3.1-unofficial/wx/filedlg.h"
enum
{
    wxFD_OPEN = 0x0001,
    wxFD_SAVE = 0x0002,
    wxFD_OVERWRITE_PROMPT = 0x0004,
    wxFD_NO_FOLLOW = 0x0008,
    wxFD_FILE_MUST_EXIST = 0x0010,
    wxFD_CHANGE_DIR = 0x0080,
    wxFD_PREVIEW = 0x0100,
    wxFD_MULTIPLE = 0x0200,
    wxFD_SHOW_HIDDEN = 0x0400
};



extern __attribute__ ((visibility("default"))) const char wxFileDialogNameStr[];
extern __attribute__ ((visibility("default"))) const char wxFileSelectorPromptStr[];
extern __attribute__ ((visibility("default"))) const char wxFileSelectorDefaultWildcardStr[];





class __attribute__ ((visibility("default"))) wxFileDialogBase: public wxDialog
{
public:
    wxFileDialogBase () { Init(); }

    wxFileDialogBase(wxWindow *parent,
                     const wxString& message = wxString::FromAscii(wxFileSelectorPromptStr),
                     const wxString& defaultDir = wxEmptyString,
                     const wxString& defaultFile = wxEmptyString,
                     const wxString& wildCard = wxString::FromAscii(wxFileSelectorDefaultWildcardStr),
                     long style = wxFD_OPEN,
                     const wxPoint& pos = wxDefaultPosition,
                     const wxSize& sz = wxDefaultSize,
                     const wxString& name = wxString::FromAscii(wxFileDialogNameStr))
    {
        Init();
        Create(parent, message, defaultDir, defaultFile, wildCard, style, pos, sz, name);
    }

    virtual ~wxFileDialogBase() {}


    bool Create(wxWindow *parent,
                const wxString& message = wxString::FromAscii(wxFileSelectorPromptStr),
                const wxString& defaultDir = wxEmptyString,
                const wxString& defaultFile = wxEmptyString,
                const wxString& wildCard = wxString::FromAscii(wxFileSelectorDefaultWildcardStr),
                long style = wxFD_OPEN,
                const wxPoint& pos = wxDefaultPosition,
                const wxSize& sz = wxDefaultSize,
                const wxString& name = wxString::FromAscii(wxFileDialogNameStr));

    bool HasFdFlag(int flag) const { return HasFlag(flag); }

    virtual void SetMessage(const wxString& message) { m_message = message; }
    virtual void SetPath(const wxString& path);
    virtual void SetDirectory(const wxString& dir);
    virtual void SetFilename(const wxString& name);
    virtual void SetWildcard(const wxString& wildCard) { m_wildCard = wildCard; }
    virtual void SetFilterIndex(int filterIndex) { m_filterIndex = filterIndex; }

    virtual wxString GetMessage() const { return m_message; }
    virtual wxString GetPath() const
    {
        if ( !HasFlag(wxFD_MULTIPLE) ) {} else { do { if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/filedlg.h", 109, __FUNCTION__, "\"!HasFlag(wxFD_MULTIPLE)\"", "When using wxFD_MULTIPLE, must call GetPaths() instead"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); return wxString(); } struct wxDummyCheckStruct109;
        return m_path;
    }

    virtual void GetPaths(wxArrayString& paths) const { paths.Empty(); paths.Add(m_path); }
    virtual wxString GetDirectory() const { return m_dir; }
    virtual wxString GetFilename() const
    {
        if ( !HasFlag(wxFD_MULTIPLE) ) {} else { do { if ( wxTheAssertHandler && (wxOnAssert("/usr/include/wx-3.1-unofficial/wx/filedlg.h", 117, __FUNCTION__, "\"!HasFlag(wxFD_MULTIPLE)\"", "When using wxFD_MULTIPLE, must call GetFilenames() instead"), wxTrapInAssert) ) { wxTrapInAssert = false; asm volatile ("int $3"); } } while ( (void)0, 0 ); return wxString(); } struct wxDummyCheckStruct117;
        return m_fileName;
    }
    virtual void GetFilenames(wxArrayString& files) const { files.Empty(); files.Add(m_fileName); }
    virtual wxString GetWildcard() const { return m_wildCard; }
    virtual int GetFilterIndex() const { return m_filterIndex; }

    virtual wxString GetCurrentlySelectedFilename() const
        { return m_currentlySelectedFilename; }

    virtual int GetCurrentlySelectedFilterIndex () const
        { return m_currentlySelectedFilterIndex; }



    typedef wxWindow *(*ExtraControlCreatorFunction)(wxWindow*);

    virtual bool SupportsExtraControl() const { return false; }

    bool SetExtraControlCreator(ExtraControlCreatorFunction creator);
    wxWindow *GetExtraControl() const { return m_extraControl; }







    static wxString AppendExtension(const wxString &filePath,
                                    const wxString &extensionList);






    void SetFilterIndexFromExt(const wxString& ext);

protected:
    wxString m_message;
    wxString m_dir;
    wxString m_path;
    wxString m_fileName;
    wxString m_wildCard;
    int m_filterIndex;





    wxString m_currentlySelectedFilename;





    int m_currentlySelectedFilterIndex;

    wxWindow* m_extraControl;


    bool CreateExtraControl();

    bool HasExtraControlCreator() const
        { return m_extraControlCreator != 
# 181 "/usr/include/wx-3.1-unofficial/wx/filedlg.h" 3 4
                                         __null
# 181 "/usr/include/wx-3.1-unofficial/wx/filedlg.h"
                                             ; }

    wxSize GetExtraControlSize();


    void UpdateExtraControlUI();

private:
    ExtraControlCreatorFunction m_extraControlCreator;

    void Init();
    public:
# 192 "/usr/include/wx-3.1-unofficial/wx/filedlg.h"
#pragma GCC diagnostic push
# 192 "/usr/include/wx-3.1-unofficial/wx/filedlg.h"
   
# 192 "/usr/include/wx-3.1-unofficial/wx/filedlg.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 192 "/usr/include/wx-3.1-unofficial/wx/filedlg.h"
    virtual wxClassInfo *GetClassInfo() const;
# 192 "/usr/include/wx-3.1-unofficial/wx/filedlg.h"
#pragma GCC diagnostic pop
# 192 "/usr/include/wx-3.1-unofficial/wx/filedlg.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
    private: wxFileDialogBase(const wxFileDialogBase&) = delete; wxFileDialogBase& operator=(const wxFileDialogBase&) = delete;
};







__attribute__ ((visibility("default"))) wxString
wxFileSelector(const wxString& message = wxString::FromAscii(wxFileSelectorPromptStr),
               const wxString& default_path = wxEmptyString,
               const wxString& default_filename = wxEmptyString,
               const wxString& default_extension = wxEmptyString,
               const wxString& wildcard = wxString::FromAscii(wxFileSelectorDefaultWildcardStr),
               int flags = 0,
               wxWindow *parent = 
# 209 "/usr/include/wx-3.1-unofficial/wx/filedlg.h" 3 4
                                 __null
# 209 "/usr/include/wx-3.1-unofficial/wx/filedlg.h"
                                     ,
               int x = wxDefaultCoord, int y = wxDefaultCoord);


__attribute__ ((visibility("default"))) wxString
wxFileSelectorEx(const wxString& message = wxString::FromAscii(wxFileSelectorPromptStr),
                 const wxString& default_path = wxEmptyString,
                 const wxString& default_filename = wxEmptyString,
                 int *indexDefaultExtension = 
# 217 "/usr/include/wx-3.1-unofficial/wx/filedlg.h" 3 4
                                             __null
# 217 "/usr/include/wx-3.1-unofficial/wx/filedlg.h"
                                                 ,
                 const wxString& wildcard = wxString::FromAscii(wxFileSelectorDefaultWildcardStr),
                 int flags = 0,
                 wxWindow *parent = 
# 220 "/usr/include/wx-3.1-unofficial/wx/filedlg.h" 3 4
                                   __null
# 220 "/usr/include/wx-3.1-unofficial/wx/filedlg.h"
                                       ,
                 int x = wxDefaultCoord, int y = wxDefaultCoord);


__attribute__ ((visibility("default"))) wxString
wxLoadFileSelector(const wxString& what,
                   const wxString& extension,
                   const wxString& default_name = wxEmptyString,
                   wxWindow *parent = 
# 228 "/usr/include/wx-3.1-unofficial/wx/filedlg.h" 3 4
                                     __null
# 228 "/usr/include/wx-3.1-unofficial/wx/filedlg.h"
                                         );


__attribute__ ((visibility("default"))) wxString
wxSaveFileSelector(const wxString& what,
                   const wxString& extension,
                   const wxString& default_name = wxEmptyString,
                   wxWindow *parent = 
# 235 "/usr/include/wx-3.1-unofficial/wx/filedlg.h" 3 4
                                     __null
# 235 "/usr/include/wx-3.1-unofficial/wx/filedlg.h"
                                         );
# 246 "/usr/include/wx-3.1-unofficial/wx/filedlg.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/gtk/filedlg.h" 1
# 12 "/usr/include/wx-3.1-unofficial/wx/gtk/filedlg.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/gtk/filectrl.h" 1
# 16 "/usr/include/wx-3.1-unofficial/wx/gtk/filectrl.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/filectrl.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/filectrl.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 16 "/usr/include/wx-3.1-unofficial/wx/filectrl.h" 2






enum
{
    wxFC_OPEN = 0x0001,
    wxFC_SAVE = 0x0002,
    wxFC_MULTIPLE = 0x0004,
    wxFC_NOSHOWHIDDEN = 0x0008
};


extern __attribute__ ((visibility("default"))) const char wxFileCtrlNameStr[];

class __attribute__ ((visibility("default"))) wxFileCtrlBase
{
public:
    virtual ~wxFileCtrlBase() {}

    virtual void SetWildcard( const wxString& wildCard ) = 0;
    virtual void SetFilterIndex( int filterindex ) = 0;
    virtual bool SetDirectory( const wxString& dir ) = 0;




    virtual bool SetFilename( const wxString& name ) = 0;





    virtual bool SetPath( const wxString& path ) = 0;

    virtual wxString GetFilename() const = 0;
    virtual wxString GetDirectory() const = 0;
    virtual wxString GetWildcard() const = 0;
    virtual wxString GetPath() const = 0;
    virtual void GetPaths( wxArrayString& paths ) const = 0;
    virtual void GetFilenames( wxArrayString& files ) const = 0;
    virtual int GetFilterIndex() const = 0;

    virtual bool HasMultipleFileSelection() const = 0;
    virtual void ShowHidden(bool show) = 0;
};

void wxGenerateFilterChangedEvent( wxFileCtrlBase *fileCtrl, wxWindow *wnd );
void wxGenerateFolderChangedEvent( wxFileCtrlBase *fileCtrl, wxWindow *wnd );
void wxGenerateSelectionChangedEvent( wxFileCtrlBase *fileCtrl, wxWindow *wnd );
void wxGenerateFileActivatedEvent( wxFileCtrlBase *fileCtrl, wxWindow *wnd, const wxString& filename = wxEmptyString );



# 1 "/usr/include/wx-3.1-unofficial/wx/gtk/filectrl.h" 1
# 73 "/usr/include/wx-3.1-unofficial/wx/filectrl.h" 2
# 90 "/usr/include/wx-3.1-unofficial/wx/filectrl.h"
class __attribute__ ((visibility("default"))) wxFileCtrlEvent : public wxCommandEvent
{
public:
    wxFileCtrlEvent() {}
    wxFileCtrlEvent( wxEventType type, wxObject *evtObject, int id )
            : wxCommandEvent( type, id )
    {
        SetEventObject( evtObject );
    }


    virtual wxEvent *Clone() const override { return new wxFileCtrlEvent( *this ); }

    void SetFiles( const wxArrayString &files ) { m_files = files; }
    void SetDirectory( const wxString &directory ) { m_directory = directory; }
    void SetFilterIndex( int filterIndex ) { m_filterIndex = filterIndex; }

    wxArrayString GetFiles() const { return m_files; }
    wxString GetDirectory() const { return m_directory; }
    int GetFilterIndex() const { return m_filterIndex; }

    wxString GetFile() const;

protected:
    int m_filterIndex;
    wxString m_directory;
    wxArrayString m_files;

    private: wxFileCtrlEvent& operator=(const wxFileCtrlEvent&) = delete; public:
# 118 "/usr/include/wx-3.1-unofficial/wx/filectrl.h"
#pragma GCC diagnostic push
# 118 "/usr/include/wx-3.1-unofficial/wx/filectrl.h"
   
# 118 "/usr/include/wx-3.1-unofficial/wx/filectrl.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 118 "/usr/include/wx-3.1-unofficial/wx/filectrl.h"
    virtual wxClassInfo *GetClassInfo() const;
# 118 "/usr/include/wx-3.1-unofficial/wx/filectrl.h"
#pragma GCC diagnostic pop
# 118 "/usr/include/wx-3.1-unofficial/wx/filectrl.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};

typedef void ( wxEvtHandler::*wxFileCtrlEventFunction )( wxFileCtrlEvent& );

extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxFileCtrlEvent > wxEVT_FILECTRL_SELECTIONCHANGED;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxFileCtrlEvent > wxEVT_FILECTRL_FILEACTIVATED;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxFileCtrlEvent > wxEVT_FILECTRL_FOLDERCHANGED;
extern const __attribute__ ((visibility("default"))) wxEventTypeTag< wxFileCtrlEvent > wxEVT_FILECTRL_FILTERCHANGED;
# 17 "/usr/include/wx-3.1-unofficial/wx/gtk/filectrl.h" 2

extern __attribute__ ((visibility("default"))) const char wxFileSelectorDefaultWildcardStr[];

typedef struct _GtkFileChooser GtkFileChooser;
# 31 "/usr/include/wx-3.1-unofficial/wx/gtk/filectrl.h"
class __attribute__ ((visibility("default"))) wxGtkFileChooser
{
public:
    wxGtkFileChooser() { m_ignoreNextFilterEvent = false; }

    void SetWidget(GtkFileChooser *w);

    wxString GetPath() const;
    void GetPaths( wxArrayString& paths ) const;
    wxString GetDirectory() const;
    wxString GetFilename() const;
    void GetFilenames( wxArrayString& files ) const;
    int GetFilterIndex() const;

    bool SetPath( const wxString& path );
    bool SetDirectory( const wxString& dir );
    void SetWildcard( const wxString& wildCard );
    void SetFilterIndex( int filterIndex );

    bool HasFilterChoice() const;

    bool ShouldIgnoreNextFilterEvent() const { return m_ignoreNextFilterEvent; }

    wxString GetCurrentWildCard() const
       { return m_wildcards[GetFilterIndex()]; }

private:
    GtkFileChooser *m_widget;


    wxArrayString m_wildcards;



    bool m_ignoreNextFilterEvent;
};



class __attribute__ ((visibility("default"))) wxGtkFileCtrl: public wxControl,
            public wxFileCtrlBase
{
public:
    wxGtkFileCtrl () { Init(); }

    wxGtkFileCtrl ( wxWindow *parent,
                    wxWindowID id,
                    const wxString& defaultDirectory = wxEmptyString,
                    const wxString& defaultFilename = wxEmptyString,
                    const wxString& wildCard = wxString::FromAscii(wxFileSelectorDefaultWildcardStr),
                    long style = wxFC_OPEN,
                    const wxPoint& pos = wxDefaultPosition,
                    const wxSize& size = wxDefaultSize,
                    const wxString& name = wxString::FromAscii(wxFileCtrlNameStr) )
    {
        Init();
        Create( parent, id, defaultDirectory, defaultFilename, wildCard, style, pos, size, name );
    }

    virtual ~wxGtkFileCtrl();

    bool Create( wxWindow *parent,
                 wxWindowID id,
                 const wxString& defaultDirectory = wxEmptyString,
                 const wxString& defaultFileName = wxEmptyString,
                 const wxString& wildCard = wxString::FromAscii(wxFileSelectorDefaultWildcardStr),
                 long style = wxFC_OPEN,
                 const wxPoint& pos = wxDefaultPosition,
                 const wxSize& size = wxDefaultSize,
                 const wxString& name = wxString::FromAscii(wxFileCtrlNameStr) );

    virtual void SetWildcard( const wxString& wildCard ) override;
    virtual void SetFilterIndex( int filterIndex ) override;
    virtual bool SetDirectory( const wxString& dir ) override;
    virtual bool SetFilename( const wxString& name ) override;
    virtual bool SetPath( const wxString& path ) override;

    virtual wxString GetFilename() const override;
    virtual wxString GetDirectory() const override;
    virtual wxString GetWildcard() const override { return this->m_wildCard; }
    virtual wxString GetPath() const override;
    virtual void GetPaths( wxArrayString& paths ) const override;
    virtual void GetFilenames( wxArrayString& files ) const override;
    virtual int GetFilterIndex() const override { return m_fc.GetFilterIndex(); }

    virtual bool HasMultipleFileSelection() const override { return HasFlag( wxFC_MULTIPLE ); }
    virtual void ShowHidden(bool show) override;

    virtual bool HasFilterChoice() const
        { return m_fc.HasFilterChoice(); }



    bool GTKShouldIgnoreNextFilterEvent() const
        { return m_fc.ShouldIgnoreNextFilterEvent(); }

    bool m_checkNextSelEvent;
    bool m_ignoreNextFolderChangeEvent;

protected:
    GtkFileChooser *m_fcWidget;
    wxGtkFileChooser m_fc;
    wxString m_wildCard;

private:
    void Init();

    public:
# 138 "/usr/include/wx-3.1-unofficial/wx/gtk/filectrl.h"
#pragma GCC diagnostic push
# 138 "/usr/include/wx-3.1-unofficial/wx/gtk/filectrl.h"
   
# 138 "/usr/include/wx-3.1-unofficial/wx/gtk/filectrl.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 138 "/usr/include/wx-3.1-unofficial/wx/gtk/filectrl.h"
    virtual wxClassInfo *GetClassInfo() const;
# 138 "/usr/include/wx-3.1-unofficial/wx/gtk/filectrl.h"
#pragma GCC diagnostic pop
# 138 "/usr/include/wx-3.1-unofficial/wx/gtk/filectrl.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 13 "/usr/include/wx-3.1-unofficial/wx/gtk/filedlg.h" 2





class __attribute__ ((visibility("default"))) wxFileDialog: public wxFileDialogBase
{
public:
    wxFileDialog() { }

    wxFileDialog(wxWindow *parent,
                 const wxString& message = wxString::FromAscii(wxFileSelectorPromptStr),
                 const wxString& defaultDir = wxEmptyString,
                 const wxString& defaultFile = wxEmptyString,
                 const wxString& wildCard = wxString::FromAscii(wxFileSelectorDefaultWildcardStr),
                 long style = wxFD_OPEN,
                 const wxPoint& pos = wxDefaultPosition,
                 const wxSize& sz = wxDefaultSize,
                 const wxString& name = wxString::FromAscii(wxFileDialogNameStr));
    bool Create(wxWindow *parent,
                 const wxString& message = wxString::FromAscii(wxFileSelectorPromptStr),
                 const wxString& defaultDir = wxEmptyString,
                 const wxString& defaultFile = wxEmptyString,
                 const wxString& wildCard = wxString::FromAscii(wxFileSelectorDefaultWildcardStr),
                 long style = wxFD_OPEN,
                 const wxPoint& pos = wxDefaultPosition,
                 const wxSize& sz = wxDefaultSize,
                 const wxString& name = wxString::FromAscii(wxFileDialogNameStr));
    virtual ~wxFileDialog();

    virtual wxString GetPath() const override;
    virtual void GetPaths(wxArrayString& paths) const override;
    virtual wxString GetFilename() const override;
    virtual void GetFilenames(wxArrayString& files) const override;
    virtual int GetFilterIndex() const override;

    virtual void SetMessage(const wxString& message) override;
    virtual void SetPath(const wxString& path) override;
    virtual void SetDirectory(const wxString& dir) override;
    virtual void SetFilename(const wxString& name) override;
    virtual void SetWildcard(const wxString& wildCard) override;
    virtual void SetFilterIndex(int filterIndex) override;

    virtual int ShowModal() override;

    virtual bool SupportsExtraControl() const override { return true; }


    void GTKSelectionChanged(const wxString& filename);


protected:


    virtual void DoSetSize(int x, int y,
                           int width, int height,
                           int sizeFlags = (0x0001|0x0002)) override;


private:
    void OnFakeOk( wxCommandEvent &event );
    void OnSize(wxSizeEvent&);
    virtual void AddChildGTK(wxWindow* child) override;

    wxGtkFileChooser m_fc;

    public:
# 79 "/usr/include/wx-3.1-unofficial/wx/gtk/filedlg.h"
#pragma GCC diagnostic push
# 79 "/usr/include/wx-3.1-unofficial/wx/gtk/filedlg.h"
   
# 79 "/usr/include/wx-3.1-unofficial/wx/gtk/filedlg.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 79 "/usr/include/wx-3.1-unofficial/wx/gtk/filedlg.h"
    virtual wxClassInfo *GetClassInfo() const;
# 79 "/usr/include/wx-3.1-unofficial/wx/gtk/filedlg.h"
#pragma GCC diagnostic pop
# 79 "/usr/include/wx-3.1-unofficial/wx/gtk/filedlg.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
    private: static const wxEventTableEntry sm_eventTableEntries[]; protected:
# 80 "/usr/include/wx-3.1-unofficial/wx/gtk/filedlg.h"
#pragma GCC diagnostic push
# 80 "/usr/include/wx-3.1-unofficial/wx/gtk/filedlg.h"
   
# 80 "/usr/include/wx-3.1-unofficial/wx/gtk/filedlg.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 80 "/usr/include/wx-3.1-unofficial/wx/gtk/filedlg.h"
    const wxEventTable* GetEventTable() const; wxEventHashTable& GetEventHashTable() const;
# 80 "/usr/include/wx-3.1-unofficial/wx/gtk/filedlg.h"
#pragma GCC diagnostic pop
# 80 "/usr/include/wx-3.1-unofficial/wx/gtk/filedlg.h"
    static const wxEventTable sm_eventTable; static wxEventHashTable sm_eventHashTable;
};
# 247 "/usr/include/wx-3.1-unofficial/wx/filedlg.h" 2
# 94 "/usr/include/wx-3.1-unofficial/wx/wx.h" 2






# 1 "/usr/include/wx-3.1-unofficial/wx/mdi.h" 1
# 14 "/usr/include/wx-3.1-unofficial/wx/mdi.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/defs.h" 1
# 15 "/usr/include/wx-3.1-unofficial/wx/mdi.h" 2







class wxMDIParentFrame;
class wxMDIChildFrame;
class wxMDIClientWindowBase;
class wxMDIClientWindow;





class __attribute__ ((visibility("default"))) wxMDIParentFrameBase : public wxFrame
{
public:
    wxMDIParentFrameBase()
    {
        m_clientWindow = 
# 36 "/usr/include/wx-3.1-unofficial/wx/mdi.h" 3 4
                        __null
# 36 "/usr/include/wx-3.1-unofficial/wx/mdi.h"
                            ;
        m_currentChild = 
# 37 "/usr/include/wx-3.1-unofficial/wx/mdi.h" 3 4
                        __null
# 37 "/usr/include/wx-3.1-unofficial/wx/mdi.h"
                            ;

        m_windowMenu = 
# 39 "/usr/include/wx-3.1-unofficial/wx/mdi.h" 3 4
                      __null
# 39 "/usr/include/wx-3.1-unofficial/wx/mdi.h"
                          ;

    }
# 57 "/usr/include/wx-3.1-unofficial/wx/mdi.h"
    virtual ~wxMDIParentFrameBase()
    {
        delete m_windowMenu;
    }






    virtual wxMDIChildFrame *GetActiveChild() const
        { return m_currentChild; }
    virtual void SetActiveChild(wxMDIChildFrame *child)
        { m_currentChild = child; }



    wxMDIClientWindowBase *GetClientWindow() const { return m_clientWindow; }
# 83 "/usr/include/wx-3.1-unofficial/wx/mdi.h"
    wxMenu* GetWindowMenu() const { return m_windowMenu; }




    virtual void SetWindowMenu(wxMenu *menu)
    {
        if ( menu != m_windowMenu )
        {
            delete m_windowMenu;
            m_windowMenu = menu;
        }
    }






    virtual void Cascade() { }
    virtual void Tile(wxOrientation = wxHORIZONTAL) { }
    virtual void ArrangeIcons() { }
    virtual void ActivateNext() = 0;
    virtual void ActivatePrevious() = 0;
# 122 "/usr/include/wx-3.1-unofficial/wx/mdi.h"
    virtual wxMDIClientWindow *OnCreateClient();

protected:

    virtual bool TryBefore(wxEvent& event) override;






    wxMDIClientWindowBase *m_clientWindow;
    wxMDIChildFrame *m_currentChild;



    wxMenu *m_windowMenu;

};





class __attribute__ ((visibility("default"))) wxMDIChildFrameBase : public wxFrame
{
public:
    wxMDIChildFrameBase() { m_mdiParent = 
# 149 "/usr/include/wx-3.1-unofficial/wx/mdi.h" 3 4
                                         __null
# 149 "/usr/include/wx-3.1-unofficial/wx/mdi.h"
                                             ; }
# 166 "/usr/include/wx-3.1-unofficial/wx/mdi.h"
    virtual void Activate() = 0;




    wxMDIParentFrame *GetMDIParent() const { return m_mdiParent; }


    wxMDIParentFrame *GetMDIParentFrame() const { return GetMDIParent(); }





    virtual bool IsTopLevel() const override { return false; }




    virtual bool IsTopNavigationDomain(NavigationKind kind) const override
    {
        switch ( kind )
        {
            case Navigation_Tab:
                return true;

            case Navigation_Accel:


                break;
        }

        return false;
    }




    virtual void Raise() override { Activate(); }

protected:
    wxMDIParentFrame *m_mdiParent;
};





class __attribute__ ((visibility("default"))) wxTDIChildFrame : public wxMDIChildFrameBase
{
public:






    virtual wxStatusBar* CreateStatusBar(int = 1,
                                         long = 1,
                                         wxWindowID = 1,
                                         const wxString&
                                            = wxEmptyString) override
      { return 
# 228 "/usr/include/wx-3.1-unofficial/wx/mdi.h" 3 4
              __null
# 228 "/usr/include/wx-3.1-unofficial/wx/mdi.h"
                  ; }

    virtual wxStatusBar *GetStatusBar() const override
        { return 
# 231 "/usr/include/wx-3.1-unofficial/wx/mdi.h" 3 4
                __null
# 231 "/usr/include/wx-3.1-unofficial/wx/mdi.h"
                    ; }
    virtual void SetStatusText(const wxString &,
                               int =0) override
        { }
    virtual void SetStatusWidths(int ,
                                 const int []) override
        { }






    virtual wxToolBar *CreateToolBar(long ,
                                     wxWindowID ,
                                     const wxString& ) override
        { return 
# 247 "/usr/include/wx-3.1-unofficial/wx/mdi.h" 3 4
                __null
# 247 "/usr/include/wx-3.1-unofficial/wx/mdi.h"
                    ; }
    virtual wxToolBar *GetToolBar() const override { return 
# 248 "/usr/include/wx-3.1-unofficial/wx/mdi.h" 3 4
                                                             __null
# 248 "/usr/include/wx-3.1-unofficial/wx/mdi.h"
                                                                 ; }



    virtual void SetIcons(const wxIconBundle& ) override { }


    virtual wxString GetTitle() const override { return m_title; }
    virtual void SetTitle(const wxString& title) override = 0;


    virtual void Maximize(bool = true) override { }
    virtual bool IsMaximized() const override { return true; }
    virtual bool IsAlwaysMaximized() const override { return true; }
    virtual void Iconize(bool = true) override { }
    virtual bool IsIconized() const override { return false; }
    virtual void Restore() override { }

    virtual bool ShowFullScreen(bool ,
                                long ) override { return false; }
    virtual bool IsFullScreen() const override { return false; }







    virtual void AddChild(wxWindowBase *child) override { wxWindow::AddChild(child); }

    virtual bool Destroy() override { return wxWindow::Destroy(); }
# 298 "/usr/include/wx-3.1-unofficial/wx/mdi.h"
protected:
    virtual void DoGetSize(int *width, int *height) const override
    {
        wxWindow::DoGetSize(width, height);
    }

    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags) override
    {
        wxWindow::DoSetSize(x, y, width, height, sizeFlags);
    }

    virtual void DoGetClientSize(int *width, int *height) const override
    {
        wxWindow::DoGetClientSize(width, height);
    }

    virtual void DoSetClientSize(int width, int height) override
    {
        wxWindow::DoSetClientSize(width, height);
    }

    virtual void DoMoveWindow(int x, int y, int width, int height) override
    {
        wxWindow::DoMoveWindow(x, y, width, height);
    }

    virtual void DoGetScreenPosition(int *x, int *y) const override
    {
        wxWindow::DoGetScreenPosition(x, y);
    }


    virtual void DoSetSizeHints(int , int ,
                                int , int ,
                                int , int ) override { }

    wxString m_title;
};





class __attribute__ ((visibility("default"))) wxMDIClientWindowBase : public wxWindow
{
public:







    virtual bool CreateClient(wxMDIParentFrame *parent,
                              long style = ((int)0x80000000) | 0x40000000) = 0;
};
# 383 "/usr/include/wx-3.1-unofficial/wx/mdi.h"
# 1 "/usr/include/wx-3.1-unofficial/wx/gtk/mdi.h" 1
# 16 "/usr/include/wx-3.1-unofficial/wx/gtk/mdi.h"
class wxMDIChildFrame;
class wxMDIClientWindow;

typedef struct _GtkNotebook GtkNotebook;





class __attribute__ ((visibility("default"))) wxMDIParentFrame : public wxMDIParentFrameBase
{
public:
    wxMDIParentFrame() { Init(); }
    wxMDIParentFrame(wxWindow *parent,
                     wxWindowID id,
                     const wxString& title,
                     const wxPoint& pos = wxDefaultPosition,
                     const wxSize& size = wxDefaultSize,
                     long style = (0x0800 | 0x0040 | 0x0400 | 0x0200 | 0x1000 | 0x20000000 | 0x00400000) | ((int)0x80000000) | 0x40000000,
                     const wxString& name = wxString::FromAscii(wxFrameNameStr))
    {
        Init();

        (void)Create(parent, id, title, pos, size, style, name);
    }

    bool Create(wxWindow *parent,
                wxWindowID id,
                const wxString& title,
                const wxPoint& pos = wxDefaultPosition,
                const wxSize& size = wxDefaultSize,
                long style = (0x0800 | 0x0040 | 0x0400 | 0x0200 | 0x1000 | 0x20000000 | 0x00400000) | ((int)0x80000000) | 0x40000000,
                const wxString& name = wxString::FromAscii(wxFrameNameStr));



    virtual wxMDIChildFrame *GetActiveChild() const override;




    virtual void ActivateNext() override;
    virtual void ActivatePrevious() override;

    static bool IsTDI() { return true; }



    bool m_justInserted;

    virtual void OnInternalIdle() override;

protected:
    virtual void DoGetClientSize(int* width, int* height) const override;

private:
    friend class wxMDIChildFrame;
    void Init();

    public:
# 75 "/usr/include/wx-3.1-unofficial/wx/gtk/mdi.h"
#pragma GCC diagnostic push
# 75 "/usr/include/wx-3.1-unofficial/wx/gtk/mdi.h"
   
# 75 "/usr/include/wx-3.1-unofficial/wx/gtk/mdi.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 75 "/usr/include/wx-3.1-unofficial/wx/gtk/mdi.h"
    virtual wxClassInfo *GetClassInfo() const;
# 75 "/usr/include/wx-3.1-unofficial/wx/gtk/mdi.h"
#pragma GCC diagnostic pop
# 75 "/usr/include/wx-3.1-unofficial/wx/gtk/mdi.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};





class __attribute__ ((visibility("default"))) wxMDIChildFrame : public wxTDIChildFrame
{
public:
    wxMDIChildFrame() { Init(); }
    wxMDIChildFrame(wxMDIParentFrame *parent,
                    wxWindowID id,
                    const wxString& title,
                    const wxPoint& pos = wxDefaultPosition,
                    const wxSize& size = wxDefaultSize,
                    long style = (0x0800 | 0x0040 | 0x0400 | 0x0200 | 0x1000 | 0x20000000 | 0x00400000),
                    const wxString& name = wxString::FromAscii(wxFrameNameStr))
    {
        Init();

        Create(parent, id, title, pos, size, style, name);
    }

    bool Create(wxMDIParentFrame *parent,
                wxWindowID id,
                const wxString& title,
                const wxPoint& pos = wxDefaultPosition,
                const wxSize& size = wxDefaultSize,
                long style = (0x0800 | 0x0040 | 0x0400 | 0x0200 | 0x1000 | 0x20000000 | 0x00400000),
                const wxString& name = wxString::FromAscii(wxFrameNameStr));

    virtual ~wxMDIChildFrame();

    virtual void SetMenuBar( wxMenuBar *menu_bar ) override;
    virtual wxMenuBar *GetMenuBar() const override;

    virtual void Activate() override;

    virtual void SetTitle(const wxString& title) override;



    void OnActivate( wxActivateEvent& event );
    void OnMenuHighlight( wxMenuEvent& event );
    virtual void GTKHandleRealized() override;

    wxMenuBar *m_menuBar;
    bool m_justInserted;

protected:
    virtual void DoGetPosition(int *x, int *y) const override;

private:
    void Init();

    GtkNotebook *GTKGetNotebook() const;

    private: static const wxEventTableEntry sm_eventTableEntries[]; protected:
# 133 "/usr/include/wx-3.1-unofficial/wx/gtk/mdi.h"
#pragma GCC diagnostic push
# 133 "/usr/include/wx-3.1-unofficial/wx/gtk/mdi.h"
   
# 133 "/usr/include/wx-3.1-unofficial/wx/gtk/mdi.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 133 "/usr/include/wx-3.1-unofficial/wx/gtk/mdi.h"
    const wxEventTable* GetEventTable() const; wxEventHashTable& GetEventHashTable() const;
# 133 "/usr/include/wx-3.1-unofficial/wx/gtk/mdi.h"
#pragma GCC diagnostic pop
# 133 "/usr/include/wx-3.1-unofficial/wx/gtk/mdi.h"
    static const wxEventTable sm_eventTable; static wxEventHashTable sm_eventHashTable;
    public:
# 134 "/usr/include/wx-3.1-unofficial/wx/gtk/mdi.h"
#pragma GCC diagnostic push
# 134 "/usr/include/wx-3.1-unofficial/wx/gtk/mdi.h"
   
# 134 "/usr/include/wx-3.1-unofficial/wx/gtk/mdi.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 134 "/usr/include/wx-3.1-unofficial/wx/gtk/mdi.h"
    virtual wxClassInfo *GetClassInfo() const;
# 134 "/usr/include/wx-3.1-unofficial/wx/gtk/mdi.h"
#pragma GCC diagnostic pop
# 134 "/usr/include/wx-3.1-unofficial/wx/gtk/mdi.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};





class __attribute__ ((visibility("default"))) wxMDIClientWindow : public wxMDIClientWindowBase
{
public:
    wxMDIClientWindow() { }
    ~wxMDIClientWindow();

    virtual bool CreateClient(wxMDIParentFrame *parent,
                              long style = ((int)0x80000000) | 0x40000000) override;

private:
    virtual void AddChildGTK(wxWindow* child) override;

    public:
# 153 "/usr/include/wx-3.1-unofficial/wx/gtk/mdi.h"
#pragma GCC diagnostic push
# 153 "/usr/include/wx-3.1-unofficial/wx/gtk/mdi.h"
   
# 153 "/usr/include/wx-3.1-unofficial/wx/gtk/mdi.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 153 "/usr/include/wx-3.1-unofficial/wx/gtk/mdi.h"
    virtual wxClassInfo *GetClassInfo() const;
# 153 "/usr/include/wx-3.1-unofficial/wx/gtk/mdi.h"
#pragma GCC diagnostic pop
# 153 "/usr/include/wx-3.1-unofficial/wx/gtk/mdi.h"
    static wxClassInfo ms_classInfo; static wxObject* wxCreateObject();
};
# 384 "/usr/include/wx-3.1-unofficial/wx/mdi.h" 2
# 392 "/usr/include/wx-3.1-unofficial/wx/mdi.h"
inline wxMDIClientWindow *wxMDIParentFrameBase::OnCreateClient()
{
    return new wxMDIClientWindow;
}

inline bool wxMDIParentFrameBase::TryBefore(wxEvent& event)
{


    if ( event.GetEventType() == wxEVT_MENU ||
            event.GetEventType() == wxEVT_UPDATE_UI )
    {
        wxMDIChildFrame * const child = GetActiveChild();
        if ( child )
        {


            wxWindow* const
                from = static_cast<wxWindow*>(event.GetPropagatedFrom());
            if ( !from || !from->IsDescendant(child) )
            {
                if ( child->ProcessWindowEventLocally(event) )
                    return true;
            }
        }
    }

    return wxFrame::TryBefore(event);
}
# 101 "/usr/include/wx-3.1-unofficial/wx/wx.h" 2
# 14 "/mnt/sda3/Users/LMC/2021/REPOS_2021/2MM4_PROG_AVAN_2021-2/REPO_progavan_2021-2/org_progavan/2021-2/U2_GUI/App11/App11Main.h" 2





class App11Frame: public wxFrame {
    public:
        App11Frame(wxFrame *frame, const wxString& title);
        ~App11Frame();
    private:
        static const long idBtnClickMe;
        wxBoxSizer* m_boxSizerMain;
        wxButton* m_btnClickMe;
        void OnClickMe(wxCommandEvent& event);
        void OnClose(wxCloseEvent& event);
        private: static const wxEventTableEntry sm_eventTableEntries[]; protected:
# 29 "/mnt/sda3/Users/LMC/2021/REPOS_2021/2MM4_PROG_AVAN_2021-2/REPO_progavan_2021-2/org_progavan/2021-2/U2_GUI/App11/App11Main.h"
#pragma GCC diagnostic push
# 29 "/mnt/sda3/Users/LMC/2021/REPOS_2021/2MM4_PROG_AVAN_2021-2/REPO_progavan_2021-2/org_progavan/2021-2/U2_GUI/App11/App11Main.h"
       
# 29 "/mnt/sda3/Users/LMC/2021/REPOS_2021/2MM4_PROG_AVAN_2021-2/REPO_progavan_2021-2/org_progavan/2021-2/U2_GUI/App11/App11Main.h"
#pragma GCC diagnostic ignored "-Wsuggest-override"
# 29 "/mnt/sda3/Users/LMC/2021/REPOS_2021/2MM4_PROG_AVAN_2021-2/REPO_progavan_2021-2/org_progavan/2021-2/U2_GUI/App11/App11Main.h"
        const wxEventTable* GetEventTable() const; wxEventHashTable& GetEventHashTable() const;
# 29 "/mnt/sda3/Users/LMC/2021/REPOS_2021/2MM4_PROG_AVAN_2021-2/REPO_progavan_2021-2/org_progavan/2021-2/U2_GUI/App11/App11Main.h"
#pragma GCC diagnostic pop
# 29 "/mnt/sda3/Users/LMC/2021/REPOS_2021/2MM4_PROG_AVAN_2021-2/REPO_progavan_2021-2/org_progavan/2021-2/U2_GUI/App11/App11Main.h"
        static const wxEventTable sm_eventTable; static wxEventHashTable sm_eventHashTable;
};
# 20 "/mnt/sda3/Users/LMC/2021/REPOS_2021/2MM4_PROG_AVAN_2021-2/REPO_progavan_2021-2/org_progavan/2021-2/U2_GUI/App11/App11App.cpp" 2

 int main(int argc, char **argv) { ; ; return wxEntry(argc, argv); } App11App& wxGetApp() { return *static_cast<App11App*>(wxApp::GetInstance()); } wxAppConsole *wxCreateApp() { wxAppConsole::CheckBuildOptions("3" "." "1" "." "5" " (" "wchar_t" ",compiler with C++ ABI compatible with gcc 4" ",wx containers" ",compatible with 3.0" ")", "your program"); return new App11App; } wxAppInitializer wxTheAppInitializer((wxAppInitializerFunction) wxCreateApp);;

bool App11App::OnInit() {
    App11Frame* frame = new App11Frame(0L, wxGetTranslation(("wxWidgets Application Template")));



    frame->Show();

    return true;
}
